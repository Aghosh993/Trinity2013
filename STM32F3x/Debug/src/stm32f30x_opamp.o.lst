   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f30x_opamp.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	2
  21              		.global	OPAMP_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	OPAMP_DeInit:
  26              	.LFB111:
  27              		.file 1 "../src/stm32f30x_opamp.c"
   1:../src/stm32f30x_opamp.c **** /**
   2:../src/stm32f30x_opamp.c ****   ******************************************************************************
   3:../src/stm32f30x_opamp.c ****   * @file    stm32f30x_opamp.c
   4:../src/stm32f30x_opamp.c ****   * @author  MCD Application Team
   5:../src/stm32f30x_opamp.c ****   * @version V1.0.1
   6:../src/stm32f30x_opamp.c ****   * @date    23-October-2012
   7:../src/stm32f30x_opamp.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../src/stm32f30x_opamp.c ****   *          functionalities of the operational amplifiers (OPAMP1,...OPAMP4) peripheral: 
   9:../src/stm32f30x_opamp.c ****   *           + OPAMP Configuration
  10:../src/stm32f30x_opamp.c ****   *           + OPAMP calibration
  11:../src/stm32f30x_opamp.c ****   *
  12:../src/stm32f30x_opamp.c ****   @verbatim
  13:../src/stm32f30x_opamp.c ****   
  14:../src/stm32f30x_opamp.c ****   ==============================================================================
  15:../src/stm32f30x_opamp.c ****                         ##### OPAMP Peripheral Features #####
  16:../src/stm32f30x_opamp.c ****   ==============================================================================
  17:../src/stm32f30x_opamp.c ****                    
  18:../src/stm32f30x_opamp.c ****   [..]
  19:../src/stm32f30x_opamp.c ****       The device integrates 4 operational amplifiers OPAMP1, OPAMP2, OPAMP3 and OPAMP4:
  20:../src/stm32f30x_opamp.c ****               
  21:../src/stm32f30x_opamp.c ****       (+) The OPAMPs non inverting input can be selected among the list shown by
  22:../src/stm32f30x_opamp.c ****           table below.
  23:../src/stm32f30x_opamp.c ****   
  24:../src/stm32f30x_opamp.c ****       (+) The OPAMPs inverting input can be selected among the list shown by
  25:../src/stm32f30x_opamp.c ****           table below.
  26:../src/stm32f30x_opamp.c ****   
  27:../src/stm32f30x_opamp.c ****       (+) The OPAMPs outputs can be internally connected to the inverting input 
  28:../src/stm32f30x_opamp.c ****           (follower mode)
  29:../src/stm32f30x_opamp.c ****       (+) The OPAMPs outputs can be internally connected to resistor feedback
  30:../src/stm32f30x_opamp.c ****           output (Programmable Gain Amplifier mode)
  31:../src/stm32f30x_opamp.c ****   
  32:../src/stm32f30x_opamp.c ****       (+) The OPAMPs outputs can be internally connected to ADC
  33:../src/stm32f30x_opamp.c ****   
  34:../src/stm32f30x_opamp.c ****       (+) The OPAMPs can be calibrated to compensate the offset compensation
  35:../src/stm32f30x_opamp.c ****   
  36:../src/stm32f30x_opamp.c ****       (+) Timer-controlled Mux for automatic switch of inverting and
  37:../src/stm32f30x_opamp.c ****           non-inverting input
  38:../src/stm32f30x_opamp.c ****   
  39:../src/stm32f30x_opamp.c ****   OPAMPs inverting/non-inverting inputs:
  40:../src/stm32f30x_opamp.c ****     +--------------------------------------------------------------+     
  41:../src/stm32f30x_opamp.c ****     |                 |        | OPAMP1 | OPAMP2 | OPAMP3 | OPAMP4 |
  42:../src/stm32f30x_opamp.c ****     |-----------------|--------|--------|--------|--------|--------|
  43:../src/stm32f30x_opamp.c ****     |                 | PGA    |  OK    |  OK    |  OK    |  OK    |
  44:../src/stm32f30x_opamp.c ****     | Inverting Input | Vout   |  OK    |  OK    |  OK    |  OK    |
  45:../src/stm32f30x_opamp.c ****     |                 | IO1    |  PC5   |  PC5   |  PB10  |  PB10  |
  46:../src/stm32f30x_opamp.c ****     |                 | IO2    |  PA3   |  PA5   |  PB2   |  PD8   |
  47:../src/stm32f30x_opamp.c ****     |-----------------|--------|--------|--------|--------|--------|
  48:../src/stm32f30x_opamp.c ****     |                 | IO1    |  PA7   |  PD14  |  PB13  |  PD11  |
  49:../src/stm32f30x_opamp.c ****     |  Non Inverting  | IO2    |  PA5   |  PB14  |  PA5   |  PB11  |
  50:../src/stm32f30x_opamp.c ****     |    Input        | IO3    |  PA3   |  PB0   |  PA1   |  PA4   |
  51:../src/stm32f30x_opamp.c ****     |                 | IO4    |  PA1   |  PA7   |  PB0   |  PB13  |
  52:../src/stm32f30x_opamp.c ****     +--------------------------------------------------------------+  
  53:../src/stm32f30x_opamp.c ****   
  54:../src/stm32f30x_opamp.c ****                         ##### How to use this driver #####
  55:../src/stm32f30x_opamp.c ****   ==============================================================================
  56:../src/stm32f30x_opamp.c ****   [..]
  57:../src/stm32f30x_opamp.c ****   This driver provides functions to configure and program the OPAMP 
  58:../src/stm32f30x_opamp.c ****   of all STM32F30x devices.
  59:../src/stm32f30x_opamp.c ****   
  60:../src/stm32f30x_opamp.c ****   To use the OPAMP, perform the following steps:
  61:../src/stm32f30x_opamp.c ****  
  62:../src/stm32f30x_opamp.c ****   (#) Enable the SYSCFG APB clock to get write access to OPAMP
  63:../src/stm32f30x_opamp.c ****       register using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
  64:../src/stm32f30x_opamp.c ****   
  65:../src/stm32f30x_opamp.c ****   (#) Configure the OPAMP input in analog mode using GPIO_Init()
  66:../src/stm32f30x_opamp.c ****   
  67:../src/stm32f30x_opamp.c ****   (#) Configure the OPAMP using OPAMP_Init() function:
  68:../src/stm32f30x_opamp.c ****       (++) Select the inverting input
  69:../src/stm32f30x_opamp.c ****       (++) Select the non-inverting inverting input
  70:../src/stm32f30x_opamp.c ****     
  71:../src/stm32f30x_opamp.c ****   (#) Enable the OPAMP using OPAMP_Cmd() function
  72:../src/stm32f30x_opamp.c ****     
  73:../src/stm32f30x_opamp.c ****   @endverbatim
  74:../src/stm32f30x_opamp.c ****       
  75:../src/stm32f30x_opamp.c ****   ******************************************************************************
  76:../src/stm32f30x_opamp.c ****   * @attention
  77:../src/stm32f30x_opamp.c ****   *
  78:../src/stm32f30x_opamp.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  79:../src/stm32f30x_opamp.c ****   *
  80:../src/stm32f30x_opamp.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  81:../src/stm32f30x_opamp.c ****   * You may not use this file except in compliance with the License.
  82:../src/stm32f30x_opamp.c ****   * You may obtain a copy of the License at:
  83:../src/stm32f30x_opamp.c ****   *
  84:../src/stm32f30x_opamp.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  85:../src/stm32f30x_opamp.c ****   *
  86:../src/stm32f30x_opamp.c ****   * Unless required by applicable law or agreed to in writing, software 
  87:../src/stm32f30x_opamp.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  88:../src/stm32f30x_opamp.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  89:../src/stm32f30x_opamp.c ****   * See the License for the specific language governing permissions and
  90:../src/stm32f30x_opamp.c ****   * limitations under the License.
  91:../src/stm32f30x_opamp.c ****   *
  92:../src/stm32f30x_opamp.c ****   ******************************************************************************
  93:../src/stm32f30x_opamp.c ****   */ 
  94:../src/stm32f30x_opamp.c **** 
  95:../src/stm32f30x_opamp.c **** /* Includes ------------------------------------------------------------------*/
  96:../src/stm32f30x_opamp.c **** #include "stm32f30x_opamp.h"
  97:../src/stm32f30x_opamp.c **** 
  98:../src/stm32f30x_opamp.c **** /** @addtogroup STM32F30x_StdPeriph_Driver
  99:../src/stm32f30x_opamp.c ****   * @{
 100:../src/stm32f30x_opamp.c ****   */
 101:../src/stm32f30x_opamp.c **** 
 102:../src/stm32f30x_opamp.c **** /** @defgroup OPAMP 
 103:../src/stm32f30x_opamp.c ****   * @brief OPAMP driver modules
 104:../src/stm32f30x_opamp.c ****   * @{
 105:../src/stm32f30x_opamp.c ****   */ 
 106:../src/stm32f30x_opamp.c **** 
 107:../src/stm32f30x_opamp.c **** /* Private typedef -----------------------------------------------------------*/
 108:../src/stm32f30x_opamp.c **** /* Private define ------------------------------------------------------------*/
 109:../src/stm32f30x_opamp.c **** #define OPAMP_CSR_DEFAULT_MASK                    ((uint32_t)0xFFFFFF93)
 110:../src/stm32f30x_opamp.c **** #define OPAMP_CSR_TIMERMUX_MASK                   ((uint32_t)0xFFFFF8FF)
 111:../src/stm32f30x_opamp.c **** #define OPAMP_CSR_TRIMMING_MASK                   ((uint32_t)0x0000001F)
 112:../src/stm32f30x_opamp.c **** 
 113:../src/stm32f30x_opamp.c **** /* Private macro -------------------------------------------------------------*/
 114:../src/stm32f30x_opamp.c **** /* Private variables ---------------------------------------------------------*/
 115:../src/stm32f30x_opamp.c **** /* Private function prototypes -----------------------------------------------*/
 116:../src/stm32f30x_opamp.c **** /* Private functions ---------------------------------------------------------*/
 117:../src/stm32f30x_opamp.c **** 
 118:../src/stm32f30x_opamp.c **** /** @defgroup OPAMP_Private_Functions
 119:../src/stm32f30x_opamp.c ****   * @{
 120:../src/stm32f30x_opamp.c ****   */
 121:../src/stm32f30x_opamp.c **** 
 122:../src/stm32f30x_opamp.c **** /** @defgroup OPAMP_Group1 Initialization and Configuration functions
 123:../src/stm32f30x_opamp.c ****  *  @brief   Initialization and Configuration functions 
 124:../src/stm32f30x_opamp.c ****  *
 125:../src/stm32f30x_opamp.c **** @verbatim   
 126:../src/stm32f30x_opamp.c ****  ===============================================================================
 127:../src/stm32f30x_opamp.c ****              ##### Initialization and Configuration functions #####
 128:../src/stm32f30x_opamp.c ****  ===============================================================================  
 129:../src/stm32f30x_opamp.c **** 
 130:../src/stm32f30x_opamp.c **** @endverbatim
 131:../src/stm32f30x_opamp.c ****   * @{
 132:../src/stm32f30x_opamp.c ****   */
 133:../src/stm32f30x_opamp.c ****    
 134:../src/stm32f30x_opamp.c **** /**
 135:../src/stm32f30x_opamp.c ****   * @brief  Deinitializes OPAMP peripheral registers to their default reset values.
 136:../src/stm32f30x_opamp.c ****   * @note   Deinitialization can't be performed if the OPAMP configuration is locked.
 137:../src/stm32f30x_opamp.c ****   *         To unlock the configuration, perform a system reset.
 138:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 139:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 140:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 141:../src/stm32f30x_opamp.c ****   * @param  None
 142:../src/stm32f30x_opamp.c ****   * @retval None
 143:../src/stm32f30x_opamp.c ****   */
 144:../src/stm32f30x_opamp.c **** void OPAMP_DeInit(uint32_t OPAMP_Selection)
 145:../src/stm32f30x_opamp.c **** {
  28              		.loc 1 145 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 146:../src/stm32f30x_opamp.c ****   /*!< Set OPAMP_CSR register to reset value */
 147:../src/stm32f30x_opamp.c ****   *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) = ((uint32_t)0x00000000);
  44              		.loc 1 147 0
  45 0008 7A68     		ldr	r2, [r7, #4]
  46 000a 4FF03803 		mov	r3, #56
  47 000e C4F20103 		movt	r3, 16385
  48 0012 D318     		adds	r3, r2, r3
  49 0014 4FF00002 		mov	r2, #0
  50 0018 1A60     		str	r2, [r3, #0]
 148:../src/stm32f30x_opamp.c **** }
  51              		.loc 1 148 0
  52 001a 07F10C07 		add	r7, r7, #12
  53 001e BD46     		mov	sp, r7
  54 0020 80BC     		pop	{r7}
  55 0022 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE111:
  59              		.align	2
  60              		.global	OPAMP_Init
  61              		.thumb
  62              		.thumb_func
  64              	OPAMP_Init:
  65              	.LFB112:
 149:../src/stm32f30x_opamp.c **** 
 150:../src/stm32f30x_opamp.c **** /**
 151:../src/stm32f30x_opamp.c ****   * @brief  Initializes the OPAMP peripheral according to the specified parameters
 152:../src/stm32f30x_opamp.c ****   *         in OPAMP_InitStruct
 153:../src/stm32f30x_opamp.c ****   * @note   If the selected OPAMP is locked, initialization can't be performed.
 154:../src/stm32f30x_opamp.c ****   *         To unlock the configuration, perform a system reset.
 155:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 156:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 157:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 158:../src/stm32f30x_opamp.c ****   * @param  OPAMP_InitStruct: pointer to an OPAMP_InitTypeDef structure that contains 
 159:../src/stm32f30x_opamp.c ****   *         the configuration information for the specified OPAMP peripheral.
 160:../src/stm32f30x_opamp.c ****   *           - OPAMP_InvertingInput specifies the inverting input of OPAMP
 161:../src/stm32f30x_opamp.c ****   *           - OPAMP_NonInvertingInput specifies the non inverting input of OPAMP
 162:../src/stm32f30x_opamp.c ****   * @retval None
 163:../src/stm32f30x_opamp.c ****   */
 164:../src/stm32f30x_opamp.c **** void OPAMP_Init(uint32_t OPAMP_Selection, OPAMP_InitTypeDef* OPAMP_InitStruct)
 165:../src/stm32f30x_opamp.c **** {
  66              		.loc 1 165 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 16
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  71 0024 80B4     		push	{r7}
  72              	.LCFI3:
  73              		.cfi_def_cfa_offset 4
  74              		.cfi_offset 7, -4
  75 0026 85B0     		sub	sp, sp, #20
  76              	.LCFI4:
  77              		.cfi_def_cfa_offset 24
  78 0028 00AF     		add	r7, sp, #0
  79              	.LCFI5:
  80              		.cfi_def_cfa_register 7
  81 002a 7860     		str	r0, [r7, #4]
  82 002c 3960     		str	r1, [r7, #0]
 166:../src/stm32f30x_opamp.c ****   uint32_t tmpreg = 0;
  83              		.loc 1 166 0
  84 002e 4FF00003 		mov	r3, #0
  85 0032 FB60     		str	r3, [r7, #12]
 167:../src/stm32f30x_opamp.c **** 
 168:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 169:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 170:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_INVERTING_INPUT(OPAMP_InitStruct->OPAMP_InvertingInput));
 171:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_NONINVERTING_INPUT(OPAMP_InitStruct->OPAMP_NonInvertingInput));
 172:../src/stm32f30x_opamp.c **** 
 173:../src/stm32f30x_opamp.c ****   /*!< Get the OPAMPx_CSR register value */
 174:../src/stm32f30x_opamp.c ****   tmpreg = *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection);
  86              		.loc 1 174 0
  87 0034 7A68     		ldr	r2, [r7, #4]
  88 0036 4FF03803 		mov	r3, #56
  89 003a C4F20103 		movt	r3, 16385
  90 003e D318     		adds	r3, r2, r3
  91 0040 1B68     		ldr	r3, [r3, #0]
  92 0042 FB60     		str	r3, [r7, #12]
 175:../src/stm32f30x_opamp.c **** 
 176:../src/stm32f30x_opamp.c ****   /*!< Clear the inverting and non inverting bits selection bits */
 177:../src/stm32f30x_opamp.c ****   tmpreg &= (uint32_t) (OPAMP_CSR_DEFAULT_MASK);
  93              		.loc 1 177 0
  94 0044 FB68     		ldr	r3, [r7, #12]
  95 0046 23F06C03 		bic	r3, r3, #108
  96 004a FB60     		str	r3, [r7, #12]
 178:../src/stm32f30x_opamp.c **** 
 179:../src/stm32f30x_opamp.c ****   /*!< Configure OPAMP: inverting and non inverting inputs */
 180:../src/stm32f30x_opamp.c ****   tmpreg |= (uint32_t)(OPAMP_InitStruct->OPAMP_InvertingInput | OPAMP_InitStruct->OPAMP_NonInvertin
  97              		.loc 1 180 0
  98 004c 3B68     		ldr	r3, [r7, #0]
  99 004e 1A68     		ldr	r2, [r3, #0]
 100 0050 3B68     		ldr	r3, [r7, #0]
 101 0052 5B68     		ldr	r3, [r3, #4]
 102 0054 1343     		orrs	r3, r3, r2
 103 0056 FA68     		ldr	r2, [r7, #12]
 104 0058 1343     		orrs	r3, r3, r2
 105 005a FB60     		str	r3, [r7, #12]
 181:../src/stm32f30x_opamp.c **** 
 182:../src/stm32f30x_opamp.c ****   /*!< Write to OPAMPx_CSR register */
 183:../src/stm32f30x_opamp.c ****   *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) = tmpreg;
 106              		.loc 1 183 0
 107 005c 7A68     		ldr	r2, [r7, #4]
 108 005e 4FF03803 		mov	r3, #56
 109 0062 C4F20103 		movt	r3, 16385
 110 0066 D318     		adds	r3, r2, r3
 111 0068 FA68     		ldr	r2, [r7, #12]
 112 006a 1A60     		str	r2, [r3, #0]
 184:../src/stm32f30x_opamp.c **** }
 113              		.loc 1 184 0
 114 006c 07F11407 		add	r7, r7, #20
 115 0070 BD46     		mov	sp, r7
 116 0072 80BC     		pop	{r7}
 117 0074 7047     		bx	lr
 118              		.cfi_endproc
 119              	.LFE112:
 121 0076 00BF     		.align	2
 122              		.global	OPAMP_StructInit
 123              		.thumb
 124              		.thumb_func
 126              	OPAMP_StructInit:
 127              	.LFB113:
 185:../src/stm32f30x_opamp.c **** 
 186:../src/stm32f30x_opamp.c **** /**
 187:../src/stm32f30x_opamp.c ****   * @brief  Fills each OPAMP_InitStruct member with its default value.
 188:../src/stm32f30x_opamp.c ****   * @param  OPAMP_InitStruct: pointer to an OPAMP_InitTypeDef structure which will 
 189:../src/stm32f30x_opamp.c ****   *         be initialized.
 190:../src/stm32f30x_opamp.c ****   * @retval None
 191:../src/stm32f30x_opamp.c ****   */
 192:../src/stm32f30x_opamp.c **** void OPAMP_StructInit(OPAMP_InitTypeDef* OPAMP_InitStruct)
 193:../src/stm32f30x_opamp.c **** {
 128              		.loc 1 193 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 8
 131              		@ frame_needed = 1, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133 0078 80B4     		push	{r7}
 134              	.LCFI6:
 135              		.cfi_def_cfa_offset 4
 136              		.cfi_offset 7, -4
 137 007a 83B0     		sub	sp, sp, #12
 138              	.LCFI7:
 139              		.cfi_def_cfa_offset 16
 140 007c 00AF     		add	r7, sp, #0
 141              	.LCFI8:
 142              		.cfi_def_cfa_register 7
 143 007e 7860     		str	r0, [r7, #4]
 194:../src/stm32f30x_opamp.c ****   OPAMP_InitStruct->OPAMP_NonInvertingInput = OPAMP_NonInvertingInput_IO1;
 144              		.loc 1 194 0
 145 0080 7B68     		ldr	r3, [r7, #4]
 146 0082 4FF00002 		mov	r2, #0
 147 0086 5A60     		str	r2, [r3, #4]
 195:../src/stm32f30x_opamp.c ****   OPAMP_InitStruct->OPAMP_InvertingInput = OPAMP_InvertingInput_IO1;
 148              		.loc 1 195 0
 149 0088 7B68     		ldr	r3, [r7, #4]
 150 008a 4FF00002 		mov	r2, #0
 151 008e 1A60     		str	r2, [r3, #0]
 196:../src/stm32f30x_opamp.c **** }
 152              		.loc 1 196 0
 153 0090 07F10C07 		add	r7, r7, #12
 154 0094 BD46     		mov	sp, r7
 155 0096 80BC     		pop	{r7}
 156 0098 7047     		bx	lr
 157              		.cfi_endproc
 158              	.LFE113:
 160 009a 00BF     		.align	2
 161              		.global	OPAMP_PGAConfig
 162              		.thumb
 163              		.thumb_func
 165              	OPAMP_PGAConfig:
 166              	.LFB114:
 197:../src/stm32f30x_opamp.c **** 
 198:../src/stm32f30x_opamp.c **** /**
 199:../src/stm32f30x_opamp.c ****   * @brief  Configure the feedback resistor gain.
 200:../src/stm32f30x_opamp.c ****   * @note   If the selected OPAMP is locked, gain configuration can't be performed.
 201:../src/stm32f30x_opamp.c ****   *         To unlock the configuration, perform a system reset.
 202:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 203:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 204:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 205:../src/stm32f30x_opamp.c ****   * @param  NewState: new state of the OPAMP peripheral.
 206:../src/stm32f30x_opamp.c ****   *         This parameter can be: ENABLE or DISABLE.
 207:../src/stm32f30x_opamp.c ****   * @retval None
 208:../src/stm32f30x_opamp.c ****   */
 209:../src/stm32f30x_opamp.c **** void OPAMP_PGAConfig(uint32_t OPAMP_Selection, uint32_t OPAMP_PGAGain, uint32_t OPAMP_PGAConnect)
 210:../src/stm32f30x_opamp.c **** {
 167              		.loc 1 210 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 16
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 009c 80B4     		push	{r7}
 173              	.LCFI9:
 174              		.cfi_def_cfa_offset 4
 175              		.cfi_offset 7, -4
 176 009e 85B0     		sub	sp, sp, #20
 177              	.LCFI10:
 178              		.cfi_def_cfa_offset 24
 179 00a0 00AF     		add	r7, sp, #0
 180              	.LCFI11:
 181              		.cfi_def_cfa_register 7
 182 00a2 F860     		str	r0, [r7, #12]
 183 00a4 B960     		str	r1, [r7, #8]
 184 00a6 7A60     		str	r2, [r7, #4]
 211:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 212:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 213:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_PGAGAIN(OPAMP_PGAGain));
 214:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_PGACONNECT(OPAMP_PGAConnect));
 215:../src/stm32f30x_opamp.c **** 
 216:../src/stm32f30x_opamp.c ****   /* Reset the configuration bits */
 217:../src/stm32f30x_opamp.c ****   *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_PGGAIN);
 185              		.loc 1 217 0
 186 00a8 FA68     		ldr	r2, [r7, #12]
 187 00aa 4FF03803 		mov	r3, #56
 188 00ae C4F20103 		movt	r3, 16385
 189 00b2 D318     		adds	r3, r2, r3
 190 00b4 1A46     		mov	r2, r3
 191 00b6 F968     		ldr	r1, [r7, #12]
 192 00b8 4FF03803 		mov	r3, #56
 193 00bc C4F20103 		movt	r3, 16385
 194 00c0 CB18     		adds	r3, r1, r3
 195 00c2 1B68     		ldr	r3, [r3, #0]
 196 00c4 23F47033 		bic	r3, r3, #245760
 197 00c8 1360     		str	r3, [r2, #0]
 218:../src/stm32f30x_opamp.c **** 
 219:../src/stm32f30x_opamp.c ****   /* Set the new configuration */
 220:../src/stm32f30x_opamp.c ****   *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_PGAGain | OPAMP_PGAConnect
 198              		.loc 1 220 0
 199 00ca FA68     		ldr	r2, [r7, #12]
 200 00cc 4FF03803 		mov	r3, #56
 201 00d0 C4F20103 		movt	r3, 16385
 202 00d4 D318     		adds	r3, r2, r3
 203 00d6 1A46     		mov	r2, r3
 204 00d8 F968     		ldr	r1, [r7, #12]
 205 00da 4FF03803 		mov	r3, #56
 206 00de C4F20103 		movt	r3, 16385
 207 00e2 CB18     		adds	r3, r1, r3
 208 00e4 1968     		ldr	r1, [r3, #0]
 209 00e6 B868     		ldr	r0, [r7, #8]
 210 00e8 7B68     		ldr	r3, [r7, #4]
 211 00ea 0343     		orrs	r3, r3, r0
 212 00ec 0B43     		orrs	r3, r3, r1
 213 00ee 1360     		str	r3, [r2, #0]
 221:../src/stm32f30x_opamp.c **** }
 214              		.loc 1 221 0
 215 00f0 07F11407 		add	r7, r7, #20
 216 00f4 BD46     		mov	sp, r7
 217 00f6 80BC     		pop	{r7}
 218 00f8 7047     		bx	lr
 219              		.cfi_endproc
 220              	.LFE114:
 222 00fa 00BF     		.align	2
 223              		.global	OPAMP_VrefConfig
 224              		.thumb
 225              		.thumb_func
 227              	OPAMP_VrefConfig:
 228              	.LFB115:
 222:../src/stm32f30x_opamp.c **** 
 223:../src/stm32f30x_opamp.c **** /**
 224:../src/stm32f30x_opamp.c ****   * @brief  Configure the OPAMP's internal reference.
 225:../src/stm32f30x_opamp.c ****   * @note   This feature is used when calibration enabled or OPAMP's reference
 226:../src/stm32f30x_opamp.c ****   *         connected to the non inverting input.
 227:../src/stm32f30x_opamp.c ****   * @note   If the selected OPAMP is locked, Vref configuration can't be performed.
 228:../src/stm32f30x_opamp.c ****   *         To unlock the configuration, perform a system reset.  
 229:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 230:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 231:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 232:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Vref: This parameter can be:
 233:../src/stm32f30x_opamp.c ****   *           OPAMP_Vref_3VDDA: OPMAP Vref = 3.3% VDDA
 234:../src/stm32f30x_opamp.c ****   *           OPAMP_Vref_10VDDA: OPMAP Vref = 10% VDDA
 235:../src/stm32f30x_opamp.c ****   *           OPAMP_Vref_50VDDA: OPMAP Vref = 50% VDDA
 236:../src/stm32f30x_opamp.c ****   *           OPAMP_Vref_90VDDA: OPMAP Vref = 90% VDDA
 237:../src/stm32f30x_opamp.c ****   * @retval None
 238:../src/stm32f30x_opamp.c ****   */
 239:../src/stm32f30x_opamp.c **** void OPAMP_VrefConfig(uint32_t OPAMP_Selection, uint32_t OPAMP_Vref)
 240:../src/stm32f30x_opamp.c **** {
 229              		.loc 1 240 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 16
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234 00fc 80B4     		push	{r7}
 235              	.LCFI12:
 236              		.cfi_def_cfa_offset 4
 237              		.cfi_offset 7, -4
 238 00fe 85B0     		sub	sp, sp, #20
 239              	.LCFI13:
 240              		.cfi_def_cfa_offset 24
 241 0100 00AF     		add	r7, sp, #0
 242              	.LCFI14:
 243              		.cfi_def_cfa_register 7
 244 0102 7860     		str	r0, [r7, #4]
 245 0104 3960     		str	r1, [r7, #0]
 241:../src/stm32f30x_opamp.c ****   uint32_t tmpreg = 0;
 246              		.loc 1 241 0
 247 0106 4FF00003 		mov	r3, #0
 248 010a FB60     		str	r3, [r7, #12]
 242:../src/stm32f30x_opamp.c **** 
 243:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 244:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 245:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_VREF(OPAMP_Vref));
 246:../src/stm32f30x_opamp.c **** 
 247:../src/stm32f30x_opamp.c ****   /*!< Get the OPAMPx_CSR register value */
 248:../src/stm32f30x_opamp.c ****   tmpreg = *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection);
 249              		.loc 1 248 0
 250 010c 7A68     		ldr	r2, [r7, #4]
 251 010e 4FF03803 		mov	r3, #56
 252 0112 C4F20103 		movt	r3, 16385
 253 0116 D318     		adds	r3, r2, r3
 254 0118 1B68     		ldr	r3, [r3, #0]
 255 011a FB60     		str	r3, [r7, #12]
 249:../src/stm32f30x_opamp.c **** 
 250:../src/stm32f30x_opamp.c ****   /*!< Clear the CALSEL bits */
 251:../src/stm32f30x_opamp.c ****   tmpreg &= (uint32_t) (~OPAMP_CSR_CALSEL);
 256              		.loc 1 251 0
 257 011c FB68     		ldr	r3, [r7, #12]
 258 011e 23F44053 		bic	r3, r3, #12288
 259 0122 FB60     		str	r3, [r7, #12]
 252:../src/stm32f30x_opamp.c **** 
 253:../src/stm32f30x_opamp.c ****   /*!< Configure OPAMP reference */
 254:../src/stm32f30x_opamp.c ****   tmpreg |= (uint32_t)(OPAMP_Vref);
 260              		.loc 1 254 0
 261 0124 FA68     		ldr	r2, [r7, #12]
 262 0126 3B68     		ldr	r3, [r7, #0]
 263 0128 1343     		orrs	r3, r3, r2
 264 012a FB60     		str	r3, [r7, #12]
 255:../src/stm32f30x_opamp.c **** 
 256:../src/stm32f30x_opamp.c ****   /*!< Write to OPAMPx_CSR register */
 257:../src/stm32f30x_opamp.c ****   *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) = tmpreg;
 265              		.loc 1 257 0
 266 012c 7A68     		ldr	r2, [r7, #4]
 267 012e 4FF03803 		mov	r3, #56
 268 0132 C4F20103 		movt	r3, 16385
 269 0136 D318     		adds	r3, r2, r3
 270 0138 FA68     		ldr	r2, [r7, #12]
 271 013a 1A60     		str	r2, [r3, #0]
 258:../src/stm32f30x_opamp.c **** }
 272              		.loc 1 258 0
 273 013c 07F11407 		add	r7, r7, #20
 274 0140 BD46     		mov	sp, r7
 275 0142 80BC     		pop	{r7}
 276 0144 7047     		bx	lr
 277              		.cfi_endproc
 278              	.LFE115:
 280 0146 00BF     		.align	2
 281              		.global	OPAMP_VrefConnectNonInvertingInput
 282              		.thumb
 283              		.thumb_func
 285              	OPAMP_VrefConnectNonInvertingInput:
 286              	.LFB116:
 259:../src/stm32f30x_opamp.c **** 
 260:../src/stm32f30x_opamp.c **** /**
 261:../src/stm32f30x_opamp.c ****   * @brief  Connnect the internal reference to the OPAMP's non inverting input.
 262:../src/stm32f30x_opamp.c ****   * @note   If the selected OPAMP is locked, Vref configuration can't be performed.
 263:../src/stm32f30x_opamp.c ****   *         To unlock the configuration, perform a system reset.  
 264:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 265:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 266:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 267:../src/stm32f30x_opamp.c ****   * @param  NewState: new state of the OPAMP peripheral.
 268:../src/stm32f30x_opamp.c ****   *         This parameter can be: ENABLE or DISABLE.
 269:../src/stm32f30x_opamp.c ****   * @retval None
 270:../src/stm32f30x_opamp.c ****   */
 271:../src/stm32f30x_opamp.c **** void OPAMP_VrefConnectNonInvertingInput(uint32_t OPAMP_Selection, FunctionalState NewState)
 272:../src/stm32f30x_opamp.c **** {
 287              		.loc 1 272 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 8
 290              		@ frame_needed = 1, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292 0148 80B4     		push	{r7}
 293              	.LCFI15:
 294              		.cfi_def_cfa_offset 4
 295              		.cfi_offset 7, -4
 296 014a 83B0     		sub	sp, sp, #12
 297              	.LCFI16:
 298              		.cfi_def_cfa_offset 16
 299 014c 00AF     		add	r7, sp, #0
 300              	.LCFI17:
 301              		.cfi_def_cfa_register 7
 302 014e 7860     		str	r0, [r7, #4]
 303 0150 0B46     		mov	r3, r1
 304 0152 FB70     		strb	r3, [r7, #3]
 273:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 274:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 275:../src/stm32f30x_opamp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 276:../src/stm32f30x_opamp.c **** 
 277:../src/stm32f30x_opamp.c ****   if (NewState != DISABLE)
 305              		.loc 1 277 0
 306 0154 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 307 0156 002B     		cmp	r3, #0
 308 0158 11D0     		beq	.L7
 278:../src/stm32f30x_opamp.c ****   {
 279:../src/stm32f30x_opamp.c ****     /* Connnect the internal reference to the OPAMP's non inverting input */
 280:../src/stm32f30x_opamp.c ****     *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_FORCEVP);
 309              		.loc 1 280 0
 310 015a 7A68     		ldr	r2, [r7, #4]
 311 015c 4FF03803 		mov	r3, #56
 312 0160 C4F20103 		movt	r3, 16385
 313 0164 D318     		adds	r3, r2, r3
 314 0166 1A46     		mov	r2, r3
 315 0168 7968     		ldr	r1, [r7, #4]
 316 016a 4FF03803 		mov	r3, #56
 317 016e C4F20103 		movt	r3, 16385
 318 0172 CB18     		adds	r3, r1, r3
 319 0174 1B68     		ldr	r3, [r3, #0]
 320 0176 43F00203 		orr	r3, r3, #2
 321 017a 1360     		str	r3, [r2, #0]
 322 017c 10E0     		b	.L6
 323              	.L7:
 281:../src/stm32f30x_opamp.c ****   }
 282:../src/stm32f30x_opamp.c ****   else
 283:../src/stm32f30x_opamp.c ****   {
 284:../src/stm32f30x_opamp.c ****     /* Disconnnect the internal reference to the OPAMP's non inverting input */
 285:../src/stm32f30x_opamp.c ****     *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_FORCEVP);
 324              		.loc 1 285 0
 325 017e 7A68     		ldr	r2, [r7, #4]
 326 0180 4FF03803 		mov	r3, #56
 327 0184 C4F20103 		movt	r3, 16385
 328 0188 D318     		adds	r3, r2, r3
 329 018a 1A46     		mov	r2, r3
 330 018c 7968     		ldr	r1, [r7, #4]
 331 018e 4FF03803 		mov	r3, #56
 332 0192 C4F20103 		movt	r3, 16385
 333 0196 CB18     		adds	r3, r1, r3
 334 0198 1B68     		ldr	r3, [r3, #0]
 335 019a 23F00203 		bic	r3, r3, #2
 336 019e 1360     		str	r3, [r2, #0]
 337              	.L6:
 286:../src/stm32f30x_opamp.c ****   }
 287:../src/stm32f30x_opamp.c **** }
 338              		.loc 1 287 0
 339 01a0 07F10C07 		add	r7, r7, #12
 340 01a4 BD46     		mov	sp, r7
 341 01a6 80BC     		pop	{r7}
 342 01a8 7047     		bx	lr
 343              		.cfi_endproc
 344              	.LFE116:
 346 01aa 00BF     		.align	2
 347              		.global	OPAMP_VrefConnectADCCmd
 348              		.thumb
 349              		.thumb_func
 351              	OPAMP_VrefConnectADCCmd:
 352              	.LFB117:
 288:../src/stm32f30x_opamp.c **** 
 289:../src/stm32f30x_opamp.c **** /**
 290:../src/stm32f30x_opamp.c ****   * @brief  Enables or disables connecting the OPAMP's internal reference to ADC.
 291:../src/stm32f30x_opamp.c ****   * @note   If the selected OPAMP is locked, Vref connection can't be performed.
 292:../src/stm32f30x_opamp.c ****   *         To unlock the configuration, perform a system reset.  
 293:../src/stm32f30x_opamp.c ****   * @param  NewState: new state of the Vrefint output.
 294:../src/stm32f30x_opamp.c ****   *         This parameter can be: ENABLE or DISABLE.
 295:../src/stm32f30x_opamp.c ****   * @retval None
 296:../src/stm32f30x_opamp.c ****   */
 297:../src/stm32f30x_opamp.c **** void OPAMP_VrefConnectADCCmd(uint32_t OPAMP_Selection, FunctionalState NewState)
 298:../src/stm32f30x_opamp.c **** {
 353              		.loc 1 298 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 8
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 358 01ac 80B4     		push	{r7}
 359              	.LCFI18:
 360              		.cfi_def_cfa_offset 4
 361              		.cfi_offset 7, -4
 362 01ae 83B0     		sub	sp, sp, #12
 363              	.LCFI19:
 364              		.cfi_def_cfa_offset 16
 365 01b0 00AF     		add	r7, sp, #0
 366              	.LCFI20:
 367              		.cfi_def_cfa_register 7
 368 01b2 7860     		str	r0, [r7, #4]
 369 01b4 0B46     		mov	r3, r1
 370 01b6 FB70     		strb	r3, [r7, #3]
 299:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 300:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 301:../src/stm32f30x_opamp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 302:../src/stm32f30x_opamp.c **** 
 303:../src/stm32f30x_opamp.c ****   if (NewState != DISABLE)
 371              		.loc 1 303 0
 372 01b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 373 01ba 002B     		cmp	r3, #0
 374 01bc 11D0     		beq	.L10
 304:../src/stm32f30x_opamp.c ****   {
 305:../src/stm32f30x_opamp.c ****     /* Enable output internal reference */
 306:../src/stm32f30x_opamp.c ****     *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_TSTREF);
 375              		.loc 1 306 0
 376 01be 7A68     		ldr	r2, [r7, #4]
 377 01c0 4FF03803 		mov	r3, #56
 378 01c4 C4F20103 		movt	r3, 16385
 379 01c8 D318     		adds	r3, r2, r3
 380 01ca 1A46     		mov	r2, r3
 381 01cc 7968     		ldr	r1, [r7, #4]
 382 01ce 4FF03803 		mov	r3, #56
 383 01d2 C4F20103 		movt	r3, 16385
 384 01d6 CB18     		adds	r3, r1, r3
 385 01d8 1B68     		ldr	r3, [r3, #0]
 386 01da 43F00053 		orr	r3, r3, #536870912
 387 01de 1360     		str	r3, [r2, #0]
 388 01e0 10E0     		b	.L9
 389              	.L10:
 307:../src/stm32f30x_opamp.c ****   }
 308:../src/stm32f30x_opamp.c ****   else
 309:../src/stm32f30x_opamp.c ****   {
 310:../src/stm32f30x_opamp.c ****     /* Disable output internal reference */
 311:../src/stm32f30x_opamp.c ****     *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_TSTREF);
 390              		.loc 1 311 0
 391 01e2 7A68     		ldr	r2, [r7, #4]
 392 01e4 4FF03803 		mov	r3, #56
 393 01e8 C4F20103 		movt	r3, 16385
 394 01ec D318     		adds	r3, r2, r3
 395 01ee 1A46     		mov	r2, r3
 396 01f0 7968     		ldr	r1, [r7, #4]
 397 01f2 4FF03803 		mov	r3, #56
 398 01f6 C4F20103 		movt	r3, 16385
 399 01fa CB18     		adds	r3, r1, r3
 400 01fc 1B68     		ldr	r3, [r3, #0]
 401 01fe 23F00053 		bic	r3, r3, #536870912
 402 0202 1360     		str	r3, [r2, #0]
 403              	.L9:
 312:../src/stm32f30x_opamp.c ****   }
 313:../src/stm32f30x_opamp.c **** }
 404              		.loc 1 313 0
 405 0204 07F10C07 		add	r7, r7, #12
 406 0208 BD46     		mov	sp, r7
 407 020a 80BC     		pop	{r7}
 408 020c 7047     		bx	lr
 409              		.cfi_endproc
 410              	.LFE117:
 412 020e 00BF     		.align	2
 413              		.global	OPAMP_TimerControlledMuxConfig
 414              		.thumb
 415              		.thumb_func
 417              	OPAMP_TimerControlledMuxConfig:
 418              	.LFB118:
 314:../src/stm32f30x_opamp.c **** 
 315:../src/stm32f30x_opamp.c **** /**
 316:../src/stm32f30x_opamp.c ****   * @brief  Configure the OPAMP peripheral (secondary inputs) for timer-controlled
 317:../src/stm32f30x_opamp.c ****   *          mux mode according to the specified parameters in OPAMP_InitStruct.
 318:../src/stm32f30x_opamp.c ****   * @note   If the selected OPAMP is locked, timer-controlled mux configuration
 319:../src/stm32f30x_opamp.c ****   *         can't be performed.
 320:../src/stm32f30x_opamp.c ****   *         To unlock the configuration, perform a system reset.
 321:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 322:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 323:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 324:../src/stm32f30x_opamp.c ****   * @param  OPAMP_InitStruct: pointer to an OPAMP_InitTypeDef structure that contains 
 325:../src/stm32f30x_opamp.c ****   *         the configuration information for the specified OPAMP peripheral.
 326:../src/stm32f30x_opamp.c ****   *           - OPAMP_InvertingInput specifies the inverting input of OPAMP
 327:../src/stm32f30x_opamp.c ****   *           - OPAMP_NonInvertingInput specifies the non inverting input of OPAMP
 328:../src/stm32f30x_opamp.c ****   * @note   PGA and Vout can't be selected as seconadry inverting input.
 329:../src/stm32f30x_opamp.c ****   * @retval None
 330:../src/stm32f30x_opamp.c ****   */
 331:../src/stm32f30x_opamp.c **** void OPAMP_TimerControlledMuxConfig(uint32_t OPAMP_Selection, OPAMP_InitTypeDef* OPAMP_InitStruct)
 332:../src/stm32f30x_opamp.c **** {
 419              		.loc 1 332 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 16
 422              		@ frame_needed = 1, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424 0210 80B4     		push	{r7}
 425              	.LCFI21:
 426              		.cfi_def_cfa_offset 4
 427              		.cfi_offset 7, -4
 428 0212 85B0     		sub	sp, sp, #20
 429              	.LCFI22:
 430              		.cfi_def_cfa_offset 24
 431 0214 00AF     		add	r7, sp, #0
 432              	.LCFI23:
 433              		.cfi_def_cfa_register 7
 434 0216 7860     		str	r0, [r7, #4]
 435 0218 3960     		str	r1, [r7, #0]
 333:../src/stm32f30x_opamp.c ****   uint32_t tmpreg = 0;
 436              		.loc 1 333 0
 437 021a 4FF00003 		mov	r3, #0
 438 021e FB60     		str	r3, [r7, #12]
 334:../src/stm32f30x_opamp.c **** 
 335:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 336:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 337:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_SECONDARY_INVINPUT(OPAMP_InitStruct->OPAMP_InvertingInput));
 338:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_NONINVERTING_INPUT(OPAMP_InitStruct->OPAMP_NonInvertingInput));
 339:../src/stm32f30x_opamp.c **** 
 340:../src/stm32f30x_opamp.c ****   /*!< Get the OPAMPx_CSR register value */
 341:../src/stm32f30x_opamp.c ****   tmpreg = *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection);
 439              		.loc 1 341 0
 440 0220 7A68     		ldr	r2, [r7, #4]
 441 0222 4FF03803 		mov	r3, #56
 442 0226 C4F20103 		movt	r3, 16385
 443 022a D318     		adds	r3, r2, r3
 444 022c 1B68     		ldr	r3, [r3, #0]
 445 022e FB60     		str	r3, [r7, #12]
 342:../src/stm32f30x_opamp.c **** 
 343:../src/stm32f30x_opamp.c ****   /*!< Clear the secondary inverting bit, secondary non inverting bit and TCMEN bits */
 344:../src/stm32f30x_opamp.c ****   tmpreg &= (uint32_t) (OPAMP_CSR_TIMERMUX_MASK);
 446              		.loc 1 344 0
 447 0230 FB68     		ldr	r3, [r7, #12]
 448 0232 23F4E063 		bic	r3, r3, #1792
 449 0236 FB60     		str	r3, [r7, #12]
 345:../src/stm32f30x_opamp.c **** 
 346:../src/stm32f30x_opamp.c ****   /*!< Configure OPAMP: secondary inverting and non inverting inputs */
 347:../src/stm32f30x_opamp.c ****   tmpreg |= (uint32_t)((uint32_t)(OPAMP_InitStruct->OPAMP_InvertingInput<<3) | (uint32_t)(OPAMP_Ini
 450              		.loc 1 347 0
 451 0238 3B68     		ldr	r3, [r7, #0]
 452 023a 1B68     		ldr	r3, [r3, #0]
 453 023c 4FEAC302 		lsl	r2, r3, #3
 454 0240 3B68     		ldr	r3, [r7, #0]
 455 0242 5B68     		ldr	r3, [r3, #4]
 456 0244 4FEAC313 		lsl	r3, r3, #7
 457 0248 1343     		orrs	r3, r3, r2
 458 024a FA68     		ldr	r2, [r7, #12]
 459 024c 1343     		orrs	r3, r3, r2
 460 024e FB60     		str	r3, [r7, #12]
 348:../src/stm32f30x_opamp.c **** 
 349:../src/stm32f30x_opamp.c ****   /*!< Write to OPAMPx_CSR register */
 350:../src/stm32f30x_opamp.c ****   *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) = tmpreg;
 461              		.loc 1 350 0
 462 0250 7A68     		ldr	r2, [r7, #4]
 463 0252 4FF03803 		mov	r3, #56
 464 0256 C4F20103 		movt	r3, 16385
 465 025a D318     		adds	r3, r2, r3
 466 025c FA68     		ldr	r2, [r7, #12]
 467 025e 1A60     		str	r2, [r3, #0]
 351:../src/stm32f30x_opamp.c **** }
 468              		.loc 1 351 0
 469 0260 07F11407 		add	r7, r7, #20
 470 0264 BD46     		mov	sp, r7
 471 0266 80BC     		pop	{r7}
 472 0268 7047     		bx	lr
 473              		.cfi_endproc
 474              	.LFE118:
 476 026a 00BF     		.align	2
 477              		.global	OPAMP_TimerControlledMuxCmd
 478              		.thumb
 479              		.thumb_func
 481              	OPAMP_TimerControlledMuxCmd:
 482              	.LFB119:
 352:../src/stm32f30x_opamp.c **** 
 353:../src/stm32f30x_opamp.c **** /**
 354:../src/stm32f30x_opamp.c ****   * @brief  Enable or disable the timer-controlled mux mode.
 355:../src/stm32f30x_opamp.c ****   * @note   If the selected OPAMP is locked, enable/disable can't be performed.
 356:../src/stm32f30x_opamp.c ****   *         To unlock the configuration, perform a system reset.
 357:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 358:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 359:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 360:../src/stm32f30x_opamp.c ****   * @param  NewState: new state of the OPAMP peripheral.
 361:../src/stm32f30x_opamp.c ****   *         This parameter can be: ENABLE or DISABLE.
 362:../src/stm32f30x_opamp.c ****   * @retval None
 363:../src/stm32f30x_opamp.c ****   */
 364:../src/stm32f30x_opamp.c **** void OPAMP_TimerControlledMuxCmd(uint32_t OPAMP_Selection, FunctionalState NewState)
 365:../src/stm32f30x_opamp.c **** {
 483              		.loc 1 365 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 8
 486              		@ frame_needed = 1, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 488 026c 80B4     		push	{r7}
 489              	.LCFI24:
 490              		.cfi_def_cfa_offset 4
 491              		.cfi_offset 7, -4
 492 026e 83B0     		sub	sp, sp, #12
 493              	.LCFI25:
 494              		.cfi_def_cfa_offset 16
 495 0270 00AF     		add	r7, sp, #0
 496              	.LCFI26:
 497              		.cfi_def_cfa_register 7
 498 0272 7860     		str	r0, [r7, #4]
 499 0274 0B46     		mov	r3, r1
 500 0276 FB70     		strb	r3, [r7, #3]
 366:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 367:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 368:../src/stm32f30x_opamp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 369:../src/stm32f30x_opamp.c **** 
 370:../src/stm32f30x_opamp.c ****   if (NewState != DISABLE)
 501              		.loc 1 370 0
 502 0278 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 503 027a 002B     		cmp	r3, #0
 504 027c 11D0     		beq	.L14
 371:../src/stm32f30x_opamp.c ****   {
 372:../src/stm32f30x_opamp.c ****     /* Enable the timer-controlled Mux mode */
 373:../src/stm32f30x_opamp.c ****     *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_TCMEN);
 505              		.loc 1 373 0
 506 027e 7A68     		ldr	r2, [r7, #4]
 507 0280 4FF03803 		mov	r3, #56
 508 0284 C4F20103 		movt	r3, 16385
 509 0288 D318     		adds	r3, r2, r3
 510 028a 1A46     		mov	r2, r3
 511 028c 7968     		ldr	r1, [r7, #4]
 512 028e 4FF03803 		mov	r3, #56
 513 0292 C4F20103 		movt	r3, 16385
 514 0296 CB18     		adds	r3, r1, r3
 515 0298 1B68     		ldr	r3, [r3, #0]
 516 029a 43F08003 		orr	r3, r3, #128
 517 029e 1360     		str	r3, [r2, #0]
 518 02a0 10E0     		b	.L13
 519              	.L14:
 374:../src/stm32f30x_opamp.c ****   }
 375:../src/stm32f30x_opamp.c ****   else
 376:../src/stm32f30x_opamp.c ****   {
 377:../src/stm32f30x_opamp.c ****     /* Disable the timer-controlled Mux mode */
 378:../src/stm32f30x_opamp.c ****     *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_TCMEN);
 520              		.loc 1 378 0
 521 02a2 7A68     		ldr	r2, [r7, #4]
 522 02a4 4FF03803 		mov	r3, #56
 523 02a8 C4F20103 		movt	r3, 16385
 524 02ac D318     		adds	r3, r2, r3
 525 02ae 1A46     		mov	r2, r3
 526 02b0 7968     		ldr	r1, [r7, #4]
 527 02b2 4FF03803 		mov	r3, #56
 528 02b6 C4F20103 		movt	r3, 16385
 529 02ba CB18     		adds	r3, r1, r3
 530 02bc 1B68     		ldr	r3, [r3, #0]
 531 02be 23F08003 		bic	r3, r3, #128
 532 02c2 1360     		str	r3, [r2, #0]
 533              	.L13:
 379:../src/stm32f30x_opamp.c ****   }
 380:../src/stm32f30x_opamp.c **** }
 534              		.loc 1 380 0
 535 02c4 07F10C07 		add	r7, r7, #12
 536 02c8 BD46     		mov	sp, r7
 537 02ca 80BC     		pop	{r7}
 538 02cc 7047     		bx	lr
 539              		.cfi_endproc
 540              	.LFE119:
 542 02ce 00BF     		.align	2
 543              		.global	OPAMP_Cmd
 544              		.thumb
 545              		.thumb_func
 547              	OPAMP_Cmd:
 548              	.LFB120:
 381:../src/stm32f30x_opamp.c **** 
 382:../src/stm32f30x_opamp.c **** /**
 383:../src/stm32f30x_opamp.c ****   * @brief  Enable or disable the OPAMP peripheral.
 384:../src/stm32f30x_opamp.c ****   * @note   If the selected OPAMP is locked, enable/disable can't be performed.
 385:../src/stm32f30x_opamp.c ****   *         To unlock the configuration, perform a system reset.
 386:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 387:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 388:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 389:../src/stm32f30x_opamp.c ****   * @param  NewState: new state of the OPAMP peripheral.
 390:../src/stm32f30x_opamp.c ****   *         This parameter can be: ENABLE or DISABLE.
 391:../src/stm32f30x_opamp.c ****   * @retval None
 392:../src/stm32f30x_opamp.c ****   */
 393:../src/stm32f30x_opamp.c **** void OPAMP_Cmd(uint32_t OPAMP_Selection, FunctionalState NewState)
 394:../src/stm32f30x_opamp.c **** {
 549              		.loc 1 394 0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 8
 552              		@ frame_needed = 1, uses_anonymous_args = 0
 553              		@ link register save eliminated.
 554 02d0 80B4     		push	{r7}
 555              	.LCFI27:
 556              		.cfi_def_cfa_offset 4
 557              		.cfi_offset 7, -4
 558 02d2 83B0     		sub	sp, sp, #12
 559              	.LCFI28:
 560              		.cfi_def_cfa_offset 16
 561 02d4 00AF     		add	r7, sp, #0
 562              	.LCFI29:
 563              		.cfi_def_cfa_register 7
 564 02d6 7860     		str	r0, [r7, #4]
 565 02d8 0B46     		mov	r3, r1
 566 02da FB70     		strb	r3, [r7, #3]
 395:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 396:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 397:../src/stm32f30x_opamp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 398:../src/stm32f30x_opamp.c **** 
 399:../src/stm32f30x_opamp.c ****   if (NewState != DISABLE)
 567              		.loc 1 399 0
 568 02dc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 569 02de 002B     		cmp	r3, #0
 570 02e0 11D0     		beq	.L17
 400:../src/stm32f30x_opamp.c ****   {
 401:../src/stm32f30x_opamp.c ****     /* Enable the selected OPAMPx peripheral */
 402:../src/stm32f30x_opamp.c ****     *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_OPAMPxEN);
 571              		.loc 1 402 0
 572 02e2 7A68     		ldr	r2, [r7, #4]
 573 02e4 4FF03803 		mov	r3, #56
 574 02e8 C4F20103 		movt	r3, 16385
 575 02ec D318     		adds	r3, r2, r3
 576 02ee 1A46     		mov	r2, r3
 577 02f0 7968     		ldr	r1, [r7, #4]
 578 02f2 4FF03803 		mov	r3, #56
 579 02f6 C4F20103 		movt	r3, 16385
 580 02fa CB18     		adds	r3, r1, r3
 581 02fc 1B68     		ldr	r3, [r3, #0]
 582 02fe 43F00103 		orr	r3, r3, #1
 583 0302 1360     		str	r3, [r2, #0]
 584 0304 10E0     		b	.L16
 585              	.L17:
 403:../src/stm32f30x_opamp.c ****   }
 404:../src/stm32f30x_opamp.c ****   else
 405:../src/stm32f30x_opamp.c ****   {
 406:../src/stm32f30x_opamp.c ****     /* Disable the selected OPAMPx peripheral */
 407:../src/stm32f30x_opamp.c ****     *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_OPAMPxEN);
 586              		.loc 1 407 0
 587 0306 7A68     		ldr	r2, [r7, #4]
 588 0308 4FF03803 		mov	r3, #56
 589 030c C4F20103 		movt	r3, 16385
 590 0310 D318     		adds	r3, r2, r3
 591 0312 1A46     		mov	r2, r3
 592 0314 7968     		ldr	r1, [r7, #4]
 593 0316 4FF03803 		mov	r3, #56
 594 031a C4F20103 		movt	r3, 16385
 595 031e CB18     		adds	r3, r1, r3
 596 0320 1B68     		ldr	r3, [r3, #0]
 597 0322 23F00103 		bic	r3, r3, #1
 598 0326 1360     		str	r3, [r2, #0]
 599              	.L16:
 408:../src/stm32f30x_opamp.c ****   }
 409:../src/stm32f30x_opamp.c **** }
 600              		.loc 1 409 0
 601 0328 07F10C07 		add	r7, r7, #12
 602 032c BD46     		mov	sp, r7
 603 032e 80BC     		pop	{r7}
 604 0330 7047     		bx	lr
 605              		.cfi_endproc
 606              	.LFE120:
 608 0332 00BF     		.align	2
 609              		.global	OPAMP_GetOutputLevel
 610              		.thumb
 611              		.thumb_func
 613              	OPAMP_GetOutputLevel:
 614              	.LFB121:
 410:../src/stm32f30x_opamp.c **** 
 411:../src/stm32f30x_opamp.c **** /**
 412:../src/stm32f30x_opamp.c ****   * @brief  Return the output level (high or low) during calibration of the selected OPAMP. 
 413:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 414:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 415:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 416:../src/stm32f30x_opamp.c ****   *           - OPAMP output is low when the non-inverting input is at a lower
 417:../src/stm32f30x_opamp.c ****   *             voltage than the inverting input
 418:../src/stm32f30x_opamp.c ****   *           - OPAMP output is high when the non-inverting input is at a higher
 419:../src/stm32f30x_opamp.c ****   *             voltage than the inverting input
 420:../src/stm32f30x_opamp.c ****   * @note OPAMP ouput level is provided only during calibration phase.
 421:../src/stm32f30x_opamp.c ****   * @retval Returns the selected OPAMP output level: low or high.
 422:../src/stm32f30x_opamp.c ****   *       
 423:../src/stm32f30x_opamp.c ****   */
 424:../src/stm32f30x_opamp.c **** uint32_t OPAMP_GetOutputLevel(uint32_t OPAMP_Selection)
 425:../src/stm32f30x_opamp.c **** {
 615              		.loc 1 425 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 16
 618              		@ frame_needed = 1, uses_anonymous_args = 0
 619              		@ link register save eliminated.
 620 0334 80B4     		push	{r7}
 621              	.LCFI30:
 622              		.cfi_def_cfa_offset 4
 623              		.cfi_offset 7, -4
 624 0336 85B0     		sub	sp, sp, #20
 625              	.LCFI31:
 626              		.cfi_def_cfa_offset 24
 627 0338 00AF     		add	r7, sp, #0
 628              	.LCFI32:
 629              		.cfi_def_cfa_register 7
 630 033a 7860     		str	r0, [r7, #4]
 426:../src/stm32f30x_opamp.c ****   uint32_t opampout = 0x0;
 631              		.loc 1 426 0
 632 033c 4FF00003 		mov	r3, #0
 633 0340 FB60     		str	r3, [r7, #12]
 427:../src/stm32f30x_opamp.c **** 
 428:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 429:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 430:../src/stm32f30x_opamp.c **** 
 431:../src/stm32f30x_opamp.c ****   /* Check if selected OPAMP output is high */
 432:../src/stm32f30x_opamp.c ****   if ((*(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) & (OPAMP_CSR_OUTCAL)) != 0)
 634              		.loc 1 432 0
 635 0342 7A68     		ldr	r2, [r7, #4]
 636 0344 4FF03803 		mov	r3, #56
 637 0348 C4F20103 		movt	r3, 16385
 638 034c D318     		adds	r3, r2, r3
 639 034e 1B68     		ldr	r3, [r3, #0]
 640 0350 03F08043 		and	r3, r3, #1073741824
 641 0354 002B     		cmp	r3, #0
 642 0356 03D0     		beq	.L20
 433:../src/stm32f30x_opamp.c ****   {
 434:../src/stm32f30x_opamp.c ****     opampout = OPAMP_OutputLevel_High;
 643              		.loc 1 434 0
 644 0358 4FF08043 		mov	r3, #1073741824
 645 035c FB60     		str	r3, [r7, #12]
 646 035e 02E0     		b	.L21
 647              	.L20:
 435:../src/stm32f30x_opamp.c ****   }
 436:../src/stm32f30x_opamp.c ****   else
 437:../src/stm32f30x_opamp.c ****   {
 438:../src/stm32f30x_opamp.c ****     opampout = OPAMP_OutputLevel_Low;
 648              		.loc 1 438 0
 649 0360 4FF00003 		mov	r3, #0
 650 0364 FB60     		str	r3, [r7, #12]
 651              	.L21:
 439:../src/stm32f30x_opamp.c ****   }
 440:../src/stm32f30x_opamp.c **** 
 441:../src/stm32f30x_opamp.c ****   /* Return the OPAMP output level */
 442:../src/stm32f30x_opamp.c ****   return (uint32_t)(opampout);
 652              		.loc 1 442 0
 653 0366 FB68     		ldr	r3, [r7, #12]
 443:../src/stm32f30x_opamp.c **** }
 654              		.loc 1 443 0
 655 0368 1846     		mov	r0, r3
 656 036a 07F11407 		add	r7, r7, #20
 657 036e BD46     		mov	sp, r7
 658 0370 80BC     		pop	{r7}
 659 0372 7047     		bx	lr
 660              		.cfi_endproc
 661              	.LFE121:
 663              		.align	2
 664              		.global	OPAMP_OffsetTrimModeSelect
 665              		.thumb
 666              		.thumb_func
 668              	OPAMP_OffsetTrimModeSelect:
 669              	.LFB122:
 444:../src/stm32f30x_opamp.c **** 
 445:../src/stm32f30x_opamp.c **** /**
 446:../src/stm32f30x_opamp.c ****   * @brief  Select the trimming mode.
 447:../src/stm32f30x_opamp.c ****   * @param  OffsetTrimming: the selected offset trimming mode. 
 448:../src/stm32f30x_opamp.c ****   *   This parameter  can be one of the following values:
 449:../src/stm32f30x_opamp.c ****   *     @arg OPAMP_Trimming_Factory: factory trimming values are used for offset
 450:../src/stm32f30x_opamp.c ****   *                                  calibration
 451:../src/stm32f30x_opamp.c ****   *     @arg OPAMP_Trimming_User: user trimming values are used for offset
 452:../src/stm32f30x_opamp.c ****   *                               calibration
 453:../src/stm32f30x_opamp.c ****   * @note When OffsetTrimming_User is selected, use OPAMP_OffsetTrimConfig()
 454:../src/stm32f30x_opamp.c ****   *       function or OPAMP_OffsetTrimLowPowerConfig() function to adjust 
 455:../src/stm32f30x_opamp.c ****   *       trimming value.
 456:../src/stm32f30x_opamp.c ****   * @retval None
 457:../src/stm32f30x_opamp.c ****   */
 458:../src/stm32f30x_opamp.c **** void OPAMP_OffsetTrimModeSelect(uint32_t OPAMP_Selection, uint32_t OPAMP_Trimming)
 459:../src/stm32f30x_opamp.c **** {
 670              		.loc 1 459 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 8
 673              		@ frame_needed = 1, uses_anonymous_args = 0
 674              		@ link register save eliminated.
 675 0374 80B4     		push	{r7}
 676              	.LCFI33:
 677              		.cfi_def_cfa_offset 4
 678              		.cfi_offset 7, -4
 679 0376 83B0     		sub	sp, sp, #12
 680              	.LCFI34:
 681              		.cfi_def_cfa_offset 16
 682 0378 00AF     		add	r7, sp, #0
 683              	.LCFI35:
 684              		.cfi_def_cfa_register 7
 685 037a 7860     		str	r0, [r7, #4]
 686 037c 3960     		str	r1, [r7, #0]
 460:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 461:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 462:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_TRIMMING(OPAMP_Trimming));
 463:../src/stm32f30x_opamp.c **** 
 464:../src/stm32f30x_opamp.c ****   /* Reset USERTRIM bit */
 465:../src/stm32f30x_opamp.c ****   *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (~(uint32_t) (OPAMP_CSR_USERTRIM));
 687              		.loc 1 465 0
 688 037e 7A68     		ldr	r2, [r7, #4]
 689 0380 4FF03803 		mov	r3, #56
 690 0384 C4F20103 		movt	r3, 16385
 691 0388 D318     		adds	r3, r2, r3
 692 038a 1A46     		mov	r2, r3
 693 038c 7968     		ldr	r1, [r7, #4]
 694 038e 4FF03803 		mov	r3, #56
 695 0392 C4F20103 		movt	r3, 16385
 696 0396 CB18     		adds	r3, r1, r3
 697 0398 1B68     		ldr	r3, [r3, #0]
 698 039a 23F48023 		bic	r3, r3, #262144
 699 039e 1360     		str	r3, [r2, #0]
 466:../src/stm32f30x_opamp.c **** 
 467:../src/stm32f30x_opamp.c ****   /* Select trimming mode */
 468:../src/stm32f30x_opamp.c ****   *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= OPAMP_Trimming;
 700              		.loc 1 468 0
 701 03a0 7A68     		ldr	r2, [r7, #4]
 702 03a2 4FF03803 		mov	r3, #56
 703 03a6 C4F20103 		movt	r3, 16385
 704 03aa D318     		adds	r3, r2, r3
 705 03ac 1A46     		mov	r2, r3
 706 03ae 7968     		ldr	r1, [r7, #4]
 707 03b0 4FF03803 		mov	r3, #56
 708 03b4 C4F20103 		movt	r3, 16385
 709 03b8 CB18     		adds	r3, r1, r3
 710 03ba 1968     		ldr	r1, [r3, #0]
 711 03bc 3B68     		ldr	r3, [r7, #0]
 712 03be 0B43     		orrs	r3, r3, r1
 713 03c0 1360     		str	r3, [r2, #0]
 469:../src/stm32f30x_opamp.c **** }
 714              		.loc 1 469 0
 715 03c2 07F10C07 		add	r7, r7, #12
 716 03c6 BD46     		mov	sp, r7
 717 03c8 80BC     		pop	{r7}
 718 03ca 7047     		bx	lr
 719              		.cfi_endproc
 720              	.LFE122:
 722              		.align	2
 723              		.global	OPAMP_OffsetTrimConfig
 724              		.thumb
 725              		.thumb_func
 727              	OPAMP_OffsetTrimConfig:
 728              	.LFB123:
 470:../src/stm32f30x_opamp.c **** 
 471:../src/stm32f30x_opamp.c **** /**
 472:../src/stm32f30x_opamp.c ****   * @brief  Configure the trimming value of the OPAMP.
 473:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 474:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 475:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 476:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Input: the selected OPAMP input. 
 477:../src/stm32f30x_opamp.c ****   *   This parameter can be one of the following values:
 478:../src/stm32f30x_opamp.c ****   *         @arg OPAMP_Input_Inverting: Inverting input is selected to configure the trimming value
 479:../src/stm32f30x_opamp.c ****   *         @arg OPAMP_Input_NonInverting: Non inverting input is selected to configure the trimmin
 480:../src/stm32f30x_opamp.c ****   * @param  OPAMP_TrimValue: the trimming value. This parameter can be any value lower
 481:../src/stm32f30x_opamp.c ****   *         or equal to 0x0000001F. 
 482:../src/stm32f30x_opamp.c ****   * @retval None
 483:../src/stm32f30x_opamp.c ****   */
 484:../src/stm32f30x_opamp.c **** void OPAMP_OffsetTrimConfig(uint32_t OPAMP_Selection, uint32_t OPAMP_Input, uint32_t OPAMP_TrimValu
 485:../src/stm32f30x_opamp.c **** {
 729              		.loc 1 485 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 24
 732              		@ frame_needed = 1, uses_anonymous_args = 0
 733              		@ link register save eliminated.
 734 03cc 80B4     		push	{r7}
 735              	.LCFI36:
 736              		.cfi_def_cfa_offset 4
 737              		.cfi_offset 7, -4
 738 03ce 87B0     		sub	sp, sp, #28
 739              	.LCFI37:
 740              		.cfi_def_cfa_offset 32
 741 03d0 00AF     		add	r7, sp, #0
 742              	.LCFI38:
 743              		.cfi_def_cfa_register 7
 744 03d2 F860     		str	r0, [r7, #12]
 745 03d4 B960     		str	r1, [r7, #8]
 746 03d6 7A60     		str	r2, [r7, #4]
 486:../src/stm32f30x_opamp.c ****   uint32_t tmpreg = 0;
 747              		.loc 1 486 0
 748 03d8 4FF00003 		mov	r3, #0
 749 03dc 7B61     		str	r3, [r7, #20]
 487:../src/stm32f30x_opamp.c **** 
 488:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 489:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 490:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_INPUT(OPAMP_Input));
 491:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_TRIMMINGVALUE(OPAMP_TrimValue));
 492:../src/stm32f30x_opamp.c **** 
 493:../src/stm32f30x_opamp.c ****   /*!< Get the OPAMPx_CSR register value */
 494:../src/stm32f30x_opamp.c ****   tmpreg = *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection);
 750              		.loc 1 494 0
 751 03de FA68     		ldr	r2, [r7, #12]
 752 03e0 4FF03803 		mov	r3, #56
 753 03e4 C4F20103 		movt	r3, 16385
 754 03e8 D318     		adds	r3, r2, r3
 755 03ea 1B68     		ldr	r3, [r3, #0]
 756 03ec 7B61     		str	r3, [r7, #20]
 495:../src/stm32f30x_opamp.c **** 
 496:../src/stm32f30x_opamp.c ****   /*!< Clear the trimming bits */
 497:../src/stm32f30x_opamp.c ****   tmpreg &= ((uint32_t)~(OPAMP_CSR_TRIMMING_MASK<<OPAMP_Input));
 757              		.loc 1 497 0
 758 03ee BB68     		ldr	r3, [r7, #8]
 759 03f0 4FF01F02 		mov	r2, #31
 760 03f4 02FA03F3 		lsl	r3, r2, r3
 761 03f8 6FEA0303 		mvn	r3, r3
 762 03fc 7A69     		ldr	r2, [r7, #20]
 763 03fe 1340     		ands	r3, r3, r2
 764 0400 7B61     		str	r3, [r7, #20]
 498:../src/stm32f30x_opamp.c **** 
 499:../src/stm32f30x_opamp.c ****   /*!< Configure the new trimming value */
 500:../src/stm32f30x_opamp.c ****   tmpreg |= (uint32_t)(OPAMP_TrimValue<<OPAMP_Input);
 765              		.loc 1 500 0
 766 0402 BB68     		ldr	r3, [r7, #8]
 767 0404 7A68     		ldr	r2, [r7, #4]
 768 0406 02FA03F3 		lsl	r3, r2, r3
 769 040a 7A69     		ldr	r2, [r7, #20]
 770 040c 1343     		orrs	r3, r3, r2
 771 040e 7B61     		str	r3, [r7, #20]
 501:../src/stm32f30x_opamp.c **** 
 502:../src/stm32f30x_opamp.c ****   /*!< Write to OPAMPx_CSR register */
 503:../src/stm32f30x_opamp.c ****   *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) = tmpreg;
 772              		.loc 1 503 0
 773 0410 FA68     		ldr	r2, [r7, #12]
 774 0412 4FF03803 		mov	r3, #56
 775 0416 C4F20103 		movt	r3, 16385
 776 041a D318     		adds	r3, r2, r3
 777 041c 7A69     		ldr	r2, [r7, #20]
 778 041e 1A60     		str	r2, [r3, #0]
 504:../src/stm32f30x_opamp.c **** }
 779              		.loc 1 504 0
 780 0420 07F11C07 		add	r7, r7, #28
 781 0424 BD46     		mov	sp, r7
 782 0426 80BC     		pop	{r7}
 783 0428 7047     		bx	lr
 784              		.cfi_endproc
 785              	.LFE123:
 787 042a 00BF     		.align	2
 788              		.global	OPAMP_StartCalibration
 789              		.thumb
 790              		.thumb_func
 792              	OPAMP_StartCalibration:
 793              	.LFB124:
 505:../src/stm32f30x_opamp.c **** 
 506:../src/stm32f30x_opamp.c **** /**
 507:../src/stm32f30x_opamp.c ****   * @brief  Start or stop the calibration of selected OPAMP peripheral.
 508:../src/stm32f30x_opamp.c ****   * @note   If the selected OPAMP is locked, start/stop can't be performed.
 509:../src/stm32f30x_opamp.c ****   *         To unlock the configuration, perform a system reset.
 510:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 511:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 512:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 513:../src/stm32f30x_opamp.c ****   * @param  NewState: new state of the OPAMP peripheral.
 514:../src/stm32f30x_opamp.c ****   *         This parameter can be: ENABLE or DISABLE.  
 515:../src/stm32f30x_opamp.c ****   * @retval None
 516:../src/stm32f30x_opamp.c ****   */
 517:../src/stm32f30x_opamp.c **** void OPAMP_StartCalibration(uint32_t OPAMP_Selection, FunctionalState NewState)
 518:../src/stm32f30x_opamp.c **** {
 794              		.loc 1 518 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 8
 797              		@ frame_needed = 1, uses_anonymous_args = 0
 798              		@ link register save eliminated.
 799 042c 80B4     		push	{r7}
 800              	.LCFI39:
 801              		.cfi_def_cfa_offset 4
 802              		.cfi_offset 7, -4
 803 042e 83B0     		sub	sp, sp, #12
 804              	.LCFI40:
 805              		.cfi_def_cfa_offset 16
 806 0430 00AF     		add	r7, sp, #0
 807              	.LCFI41:
 808              		.cfi_def_cfa_register 7
 809 0432 7860     		str	r0, [r7, #4]
 810 0434 0B46     		mov	r3, r1
 811 0436 FB70     		strb	r3, [r7, #3]
 519:../src/stm32f30x_opamp.c ****   /* Check the parameters */
 520:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 521:../src/stm32f30x_opamp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 522:../src/stm32f30x_opamp.c **** 
 523:../src/stm32f30x_opamp.c ****   if (NewState != DISABLE)
 812              		.loc 1 523 0
 813 0438 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 814 043a 002B     		cmp	r3, #0
 815 043c 11D0     		beq	.L26
 524:../src/stm32f30x_opamp.c ****   {
 525:../src/stm32f30x_opamp.c ****     /* Start the OPAMPx calibration */
 526:../src/stm32f30x_opamp.c ****     *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_CALON);
 816              		.loc 1 526 0
 817 043e 7A68     		ldr	r2, [r7, #4]
 818 0440 4FF03803 		mov	r3, #56
 819 0444 C4F20103 		movt	r3, 16385
 820 0448 D318     		adds	r3, r2, r3
 821 044a 1A46     		mov	r2, r3
 822 044c 7968     		ldr	r1, [r7, #4]
 823 044e 4FF03803 		mov	r3, #56
 824 0452 C4F20103 		movt	r3, 16385
 825 0456 CB18     		adds	r3, r1, r3
 826 0458 1B68     		ldr	r3, [r3, #0]
 827 045a 43F40063 		orr	r3, r3, #2048
 828 045e 1360     		str	r3, [r2, #0]
 829 0460 10E0     		b	.L25
 830              	.L26:
 527:../src/stm32f30x_opamp.c ****   }
 528:../src/stm32f30x_opamp.c ****   else
 529:../src/stm32f30x_opamp.c ****   {
 530:../src/stm32f30x_opamp.c ****     /* Stop the OPAMPx calibration */
 531:../src/stm32f30x_opamp.c ****     *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_CALON);
 831              		.loc 1 531 0
 832 0462 7A68     		ldr	r2, [r7, #4]
 833 0464 4FF03803 		mov	r3, #56
 834 0468 C4F20103 		movt	r3, 16385
 835 046c D318     		adds	r3, r2, r3
 836 046e 1A46     		mov	r2, r3
 837 0470 7968     		ldr	r1, [r7, #4]
 838 0472 4FF03803 		mov	r3, #56
 839 0476 C4F20103 		movt	r3, 16385
 840 047a CB18     		adds	r3, r1, r3
 841 047c 1B68     		ldr	r3, [r3, #0]
 842 047e 23F40063 		bic	r3, r3, #2048
 843 0482 1360     		str	r3, [r2, #0]
 844              	.L25:
 532:../src/stm32f30x_opamp.c ****   }
 533:../src/stm32f30x_opamp.c **** }
 845              		.loc 1 533 0
 846 0484 07F10C07 		add	r7, r7, #12
 847 0488 BD46     		mov	sp, r7
 848 048a 80BC     		pop	{r7}
 849 048c 7047     		bx	lr
 850              		.cfi_endproc
 851              	.LFE124:
 853 048e 00BF     		.align	2
 854              		.global	OPAMP_LockConfig
 855              		.thumb
 856              		.thumb_func
 858              	OPAMP_LockConfig:
 859              	.LFB125:
 534:../src/stm32f30x_opamp.c **** 
 535:../src/stm32f30x_opamp.c **** /**
 536:../src/stm32f30x_opamp.c ****   * @}
 537:../src/stm32f30x_opamp.c ****   */
 538:../src/stm32f30x_opamp.c **** 
 539:../src/stm32f30x_opamp.c **** /** @defgroup OPAMP_Group2 OPAMP configuration locking function
 540:../src/stm32f30x_opamp.c ****  *  @brief   OPAMP1,...OPAMP4 configuration locking function
 541:../src/stm32f30x_opamp.c ****  *           OPAMP1,...OPAMP4 configuration can be locked each separately.
 542:../src/stm32f30x_opamp.c ****  *           Unlocking is performed by system reset.
 543:../src/stm32f30x_opamp.c ****  *
 544:../src/stm32f30x_opamp.c **** @verbatim   
 545:../src/stm32f30x_opamp.c ****  ===============================================================================
 546:../src/stm32f30x_opamp.c ****                      ##### Configuration Lock function #####
 547:../src/stm32f30x_opamp.c ****  ===============================================================================  
 548:../src/stm32f30x_opamp.c **** 
 549:../src/stm32f30x_opamp.c **** @endverbatim
 550:../src/stm32f30x_opamp.c ****   * @{
 551:../src/stm32f30x_opamp.c ****   */
 552:../src/stm32f30x_opamp.c **** 
 553:../src/stm32f30x_opamp.c **** /**
 554:../src/stm32f30x_opamp.c ****   * @brief  Lock the selected OPAMP configuration.
 555:../src/stm32f30x_opamp.c ****   * @note   Locking the configuration means that all control bits are read-only.
 556:../src/stm32f30x_opamp.c ****   *         To unlock the OPAMP configuration, perform a system reset.
 557:../src/stm32f30x_opamp.c ****   * @param  OPAMP_Selection: the selected OPAMP. 
 558:../src/stm32f30x_opamp.c ****   *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
 559:../src/stm32f30x_opamp.c ****   *          to select the OPAMP peripheral.
 560:../src/stm32f30x_opamp.c ****   * @retval None
 561:../src/stm32f30x_opamp.c ****   */
 562:../src/stm32f30x_opamp.c **** void OPAMP_LockConfig(uint32_t OPAMP_Selection)
 563:../src/stm32f30x_opamp.c **** {
 860              		.loc 1 563 0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 8
 863              		@ frame_needed = 1, uses_anonymous_args = 0
 864              		@ link register save eliminated.
 865 0490 80B4     		push	{r7}
 866              	.LCFI42:
 867              		.cfi_def_cfa_offset 4
 868              		.cfi_offset 7, -4
 869 0492 83B0     		sub	sp, sp, #12
 870              	.LCFI43:
 871              		.cfi_def_cfa_offset 16
 872 0494 00AF     		add	r7, sp, #0
 873              	.LCFI44:
 874              		.cfi_def_cfa_register 7
 875 0496 7860     		str	r0, [r7, #4]
 564:../src/stm32f30x_opamp.c ****   /* Check the parameter */
 565:../src/stm32f30x_opamp.c ****   assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
 566:../src/stm32f30x_opamp.c **** 
 567:../src/stm32f30x_opamp.c ****   /* Set the lock bit corresponding to selected OPAMP */
 568:../src/stm32f30x_opamp.c ****   *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_LOCK);
 876              		.loc 1 568 0
 877 0498 7A68     		ldr	r2, [r7, #4]
 878 049a 4FF03803 		mov	r3, #56
 879 049e C4F20103 		movt	r3, 16385
 880 04a2 D318     		adds	r3, r2, r3
 881 04a4 1A46     		mov	r2, r3
 882 04a6 7968     		ldr	r1, [r7, #4]
 883 04a8 4FF03803 		mov	r3, #56
 884 04ac C4F20103 		movt	r3, 16385
 885 04b0 CB18     		adds	r3, r1, r3
 886 04b2 1B68     		ldr	r3, [r3, #0]
 887 04b4 43F00043 		orr	r3, r3, #-2147483648
 888 04b8 1360     		str	r3, [r2, #0]
 569:../src/stm32f30x_opamp.c **** }
 889              		.loc 1 569 0
 890 04ba 07F10C07 		add	r7, r7, #12
 891 04be BD46     		mov	sp, r7
 892 04c0 80BC     		pop	{r7}
 893 04c2 7047     		bx	lr
 894              		.cfi_endproc
 895              	.LFE125:
 897              	.Letext0:
 898              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 899              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 900              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_opamp.h"
 901              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f30x_opamp.c
     /tmp/ccnc4eCd.s:20     .text:00000000 $t
     /tmp/ccnc4eCd.s:25     .text:00000000 OPAMP_DeInit
     /tmp/ccnc4eCd.s:64     .text:00000024 OPAMP_Init
     /tmp/ccnc4eCd.s:126    .text:00000078 OPAMP_StructInit
     /tmp/ccnc4eCd.s:165    .text:0000009c OPAMP_PGAConfig
     /tmp/ccnc4eCd.s:227    .text:000000fc OPAMP_VrefConfig
     /tmp/ccnc4eCd.s:285    .text:00000148 OPAMP_VrefConnectNonInvertingInput
     /tmp/ccnc4eCd.s:351    .text:000001ac OPAMP_VrefConnectADCCmd
     /tmp/ccnc4eCd.s:417    .text:00000210 OPAMP_TimerControlledMuxConfig
     /tmp/ccnc4eCd.s:481    .text:0000026c OPAMP_TimerControlledMuxCmd
     /tmp/ccnc4eCd.s:547    .text:000002d0 OPAMP_Cmd
     /tmp/ccnc4eCd.s:613    .text:00000334 OPAMP_GetOutputLevel
     /tmp/ccnc4eCd.s:668    .text:00000374 OPAMP_OffsetTrimModeSelect
     /tmp/ccnc4eCd.s:727    .text:000003cc OPAMP_OffsetTrimConfig
     /tmp/ccnc4eCd.s:792    .text:0000042c OPAMP_StartCalibration
     /tmp/ccnc4eCd.s:858    .text:00000490 OPAMP_LockConfig
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.743cd71370ebc432b539c5dba7924ecc
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.cf7c793e178943e1bbf613f1b21cd51a
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5

NO UNDEFINED SYMBOLS
