   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f30x_adc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	2
  21              		.global	ADC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	ADC_DeInit:
  26              	.LFB111:
  27              		.file 1 "../src/stm32f30x_adc.c"
   1:../src/stm32f30x_adc.c **** /**
   2:../src/stm32f30x_adc.c ****   ******************************************************************************
   3:../src/stm32f30x_adc.c ****   * @file    stm32f30x_adc.c
   4:../src/stm32f30x_adc.c ****   * @author  MCD Application Team
   5:../src/stm32f30x_adc.c ****   * @version V1.0.1
   6:../src/stm32f30x_adc.c ****   * @date    23-October-2012
   7:../src/stm32f30x_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../src/stm32f30x_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:../src/stm32f30x_adc.c ****   *           + Initialization and Configuration
  10:../src/stm32f30x_adc.c ****   *           + Analog Watchdog configuration
  11:../src/stm32f30x_adc.c ****   *           + Temperature Sensor, Vbat & Vrefint (Internal Reference Voltage) management 
  12:../src/stm32f30x_adc.c ****   *           + Regular Channels Configuration
  13:../src/stm32f30x_adc.c ****   *           + Regular Channels DMA Configuration
  14:../src/stm32f30x_adc.c ****   *           + Injected channels Configuration
  15:../src/stm32f30x_adc.c ****   *           + Interrupts and flags management
  16:../src/stm32f30x_adc.c ****   *           + Dual mode configuration  
  17:../src/stm32f30x_adc.c ****   *         
  18:../src/stm32f30x_adc.c ****   @verbatim
  19:../src/stm32f30x_adc.c ****   ==============================================================================
  20:../src/stm32f30x_adc.c ****                              ##### How to use this driver #####
  21:../src/stm32f30x_adc.c ****   ==============================================================================
  22:../src/stm32f30x_adc.c ****     [..]
  23:../src/stm32f30x_adc.c ****     (#) select the ADC clock using the function RCC_ADCCLKConfig()
  24:../src/stm32f30x_adc.c ****     (#) Enable the ADC interface clock using RCC_AHBPeriphClockCmd();
  25:../src/stm32f30x_adc.c ****     (#) ADC pins configuration
  26:../src/stm32f30x_adc.c ****         (++) Enable the clock for the ADC GPIOs using the following function:
  27:../src/stm32f30x_adc.c ****              RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOx, ENABLE);
  28:../src/stm32f30x_adc.c ****         (++) Configure these ADC pins in analog mode using GPIO_Init();
  29:../src/stm32f30x_adc.c ****     (#) Configure the ADC conversion resolution, data alignment, external
  30:../src/stm32f30x_adc.c ****         trigger and edge, sequencer lenght and Enable/Disable the continuous mode
  31:../src/stm32f30x_adc.c ****         using the ADC_Init() function.
  32:../src/stm32f30x_adc.c ****     (#) Activate the ADC peripheral using ADC_Cmd() function.
  33:../src/stm32f30x_adc.c **** 
  34:../src/stm32f30x_adc.c ****     *** ADC channels group configuration ***
  35:../src/stm32f30x_adc.c ****     ========================================    
  36:../src/stm32f30x_adc.c ****     [..] 
  37:../src/stm32f30x_adc.c ****     (+) To configure the ADC channels features, use ADC_Init(), ADC_InjectedInit()
  38:../src/stm32f30x_adc.c ****         and ADC_RegularChannelConfig() functions or/and ADC_InjectedChannelConfig()
  39:../src/stm32f30x_adc.c ****     (+) To activate the continuous mode, use the ADC_ContinuousModeCmd()
  40:../src/stm32f30x_adc.c ****         function.
  41:../src/stm32f30x_adc.c ****     (+) To activate the Discontinuous mode, use the ADC_DiscModeCmd() functions. 
  42:../src/stm32f30x_adc.c ****     (+) To activate the overrun mode, use the ADC_OverrunModeCmd() functions.
  43:../src/stm32f30x_adc.c ****     (+) To activate the calibration mode, use the ADC_StartCalibration() functions.
  44:../src/stm32f30x_adc.c ****     (+) To read the ADC converted values, use the ADC_GetConversionValue()
  45:../src/stm32f30x_adc.c ****         function.
  46:../src/stm32f30x_adc.c **** 
  47:../src/stm32f30x_adc.c ****     *** DMA for ADC channels features configuration ***
  48:../src/stm32f30x_adc.c ****     ===================================================     
  49:../src/stm32f30x_adc.c ****     [..] 
  50:../src/stm32f30x_adc.c ****     (+) To enable the DMA mode for ADC channels group, use the ADC_DMACmd() function.
  51:../src/stm32f30x_adc.c ****     (+) To configure the DMA transfer request, use ADC_DMAConfig() function.
  52:../src/stm32f30x_adc.c **** 
  53:../src/stm32f30x_adc.c ****   @endverbatim
  54:../src/stm32f30x_adc.c ****   *
  55:../src/stm32f30x_adc.c ****   ******************************************************************************
  56:../src/stm32f30x_adc.c ****   * @attention
  57:../src/stm32f30x_adc.c ****   *
  58:../src/stm32f30x_adc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  59:../src/stm32f30x_adc.c ****   *
  60:../src/stm32f30x_adc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  61:../src/stm32f30x_adc.c ****   * You may not use this file except in compliance with the License.
  62:../src/stm32f30x_adc.c ****   * You may obtain a copy of the License at:
  63:../src/stm32f30x_adc.c ****   *
  64:../src/stm32f30x_adc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  65:../src/stm32f30x_adc.c ****   *
  66:../src/stm32f30x_adc.c ****   * Unless required by applicable law or agreed to in writing, software 
  67:../src/stm32f30x_adc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  68:../src/stm32f30x_adc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  69:../src/stm32f30x_adc.c ****   * See the License for the specific language governing permissions and
  70:../src/stm32f30x_adc.c ****   * limitations under the License.
  71:../src/stm32f30x_adc.c ****   *
  72:../src/stm32f30x_adc.c ****   ******************************************************************************
  73:../src/stm32f30x_adc.c ****   */
  74:../src/stm32f30x_adc.c **** 
  75:../src/stm32f30x_adc.c **** /* Includes ------------------------------------------------------------------*/
  76:../src/stm32f30x_adc.c **** #include "stm32f30x_adc.h"
  77:../src/stm32f30x_adc.c **** #include "stm32f30x_rcc.h"
  78:../src/stm32f30x_adc.c **** 
  79:../src/stm32f30x_adc.c **** /** @addtogroup STM32F30x_StdPeriph_Driver
  80:../src/stm32f30x_adc.c ****   * @{
  81:../src/stm32f30x_adc.c ****   */
  82:../src/stm32f30x_adc.c **** 
  83:../src/stm32f30x_adc.c **** /** @defgroup ADC 
  84:../src/stm32f30x_adc.c ****   * @brief ADC driver modules
  85:../src/stm32f30x_adc.c ****   * @{
  86:../src/stm32f30x_adc.c ****   */
  87:../src/stm32f30x_adc.c **** 
  88:../src/stm32f30x_adc.c **** /* Private typedef -----------------------------------------------------------*/
  89:../src/stm32f30x_adc.c **** /* Private define ------------------------------------------------------------*/
  90:../src/stm32f30x_adc.c **** 
  91:../src/stm32f30x_adc.c **** /* CFGR register Mask */
  92:../src/stm32f30x_adc.c **** #define CFGR_CLEAR_Mask             ((uint32_t)0xFDFFC007)
  93:../src/stm32f30x_adc.c **** 
  94:../src/stm32f30x_adc.c **** /* JSQR register Mask */
  95:../src/stm32f30x_adc.c **** #define JSQR_CLEAR_Mask             ((uint32_t)0x00000000)
  96:../src/stm32f30x_adc.c **** 
  97:../src/stm32f30x_adc.c **** /* ADC ADON mask */
  98:../src/stm32f30x_adc.c **** #define CCR_CLEAR_MASK              ((uint32_t)0xFFFC10E0)
  99:../src/stm32f30x_adc.c **** 
 100:../src/stm32f30x_adc.c **** /* ADC JDRx registers offset */
 101:../src/stm32f30x_adc.c **** #define JDR_Offset                  ((uint8_t)0x80)
 102:../src/stm32f30x_adc.c **** 
 103:../src/stm32f30x_adc.c **** /* Private macro -------------------------------------------------------------*/
 104:../src/stm32f30x_adc.c **** /* Private variables ---------------------------------------------------------*/
 105:../src/stm32f30x_adc.c **** /* Private function prototypes -----------------------------------------------*/
 106:../src/stm32f30x_adc.c **** /* Private functions ---------------------------------------------------------*/
 107:../src/stm32f30x_adc.c **** 
 108:../src/stm32f30x_adc.c **** /** @defgroup ADC_Private_Functions
 109:../src/stm32f30x_adc.c ****   * @{
 110:../src/stm32f30x_adc.c ****   */
 111:../src/stm32f30x_adc.c **** 
 112:../src/stm32f30x_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 113:../src/stm32f30x_adc.c ****  *  @brief   Initialization and Configuration functions 
 114:../src/stm32f30x_adc.c ****  *
 115:../src/stm32f30x_adc.c **** @verbatim    
 116:../src/stm32f30x_adc.c ****  ===============================================================================
 117:../src/stm32f30x_adc.c ****                  ##### Initialization and Configuration functions  #####
 118:../src/stm32f30x_adc.c ****  ===============================================================================  
 119:../src/stm32f30x_adc.c ****   [..] 
 120:../src/stm32f30x_adc.c ****   This section provides functions allowing to:
 121:../src/stm32f30x_adc.c ****    (#) Initialize and configure the ADC injected and/or regular channels and dual mode.
 122:../src/stm32f30x_adc.c ****    (#) Management of the calibration process
 123:../src/stm32f30x_adc.c ****    (#) ADC Power-on Power-off
 124:../src/stm32f30x_adc.c ****    (#) Single ended or differential mode 
 125:../src/stm32f30x_adc.c ****    (#) Enabling the queue of context and the auto delay mode
 126:../src/stm32f30x_adc.c ****    (#) The number of ADC conversions that will be done using the sequencer for regular 
 127:../src/stm32f30x_adc.c ****        channel group
 128:../src/stm32f30x_adc.c ****    (#) Enable or disable the ADC peripheral
 129:../src/stm32f30x_adc.c ****    
 130:../src/stm32f30x_adc.c **** @endverbatim
 131:../src/stm32f30x_adc.c ****   * @{
 132:../src/stm32f30x_adc.c ****   */
 133:../src/stm32f30x_adc.c **** 
 134:../src/stm32f30x_adc.c **** /**
 135:../src/stm32f30x_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
 136:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2,3 or 4 to select the ADC peripheral.
 137:../src/stm32f30x_adc.c ****   * @retval None
 138:../src/stm32f30x_adc.c ****   */
 139:../src/stm32f30x_adc.c **** void ADC_DeInit(ADC_TypeDef* ADCx)
 140:../src/stm32f30x_adc.c **** {
  28              		.loc 1 140 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 141:../src/stm32f30x_adc.c ****   /* Check the parameters */
 142:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 143:../src/stm32f30x_adc.c **** 
 144:../src/stm32f30x_adc.c **** 
 145:../src/stm32f30x_adc.c ****   if((ADCx == ADC1) || (ADCx == ADC2))
  44              		.loc 1 145 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a B3F1A04F 		cmp	r3, #1342177280
  47 000e 06D0     		beq	.L2
  48              		.loc 1 145 0 is_stmt 0 discriminator 1
  49 0010 7A68     		ldr	r2, [r7, #4]
  50 0012 4FF48073 		mov	r3, #256
  51 0016 C5F20003 		movt	r3, 20480
  52 001a 9A42     		cmp	r2, r3
  53 001c 0CD1     		bne	.L3
  54              	.L2:
 146:../src/stm32f30x_adc.c ****   {
 147:../src/stm32f30x_adc.c ****     /* Enable ADC1/ADC2 reset state */
 148:../src/stm32f30x_adc.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, ENABLE);
  55              		.loc 1 148 0 is_stmt 1
  56 001e 4FF08050 		mov	r0, #268435456
  57 0022 4FF00101 		mov	r1, #1
  58 0026 FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
 149:../src/stm32f30x_adc.c ****     /* Release ADC1/ADC2 from reset state */
 150:../src/stm32f30x_adc.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, DISABLE);
  59              		.loc 1 150 0
  60 002a 4FF08050 		mov	r0, #268435456
  61 002e 4FF00001 		mov	r1, #0
  62 0032 FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
  63 0036 19E0     		b	.L1
  64              	.L3:
 151:../src/stm32f30x_adc.c ****   }
 152:../src/stm32f30x_adc.c ****   else if((ADCx == ADC3) || (ADCx == ADC4))
  65              		.loc 1 152 0
  66 0038 7A68     		ldr	r2, [r7, #4]
  67 003a 4FF48063 		mov	r3, #1024
  68 003e C5F20003 		movt	r3, 20480
  69 0042 9A42     		cmp	r2, r3
  70 0044 06D0     		beq	.L5
  71              		.loc 1 152 0 is_stmt 0 discriminator 1
  72 0046 7A68     		ldr	r2, [r7, #4]
  73 0048 4FF4A063 		mov	r3, #1280
  74 004c C5F20003 		movt	r3, 20480
  75 0050 9A42     		cmp	r2, r3
  76 0052 0BD1     		bne	.L1
  77              	.L5:
 153:../src/stm32f30x_adc.c ****   {
 154:../src/stm32f30x_adc.c ****     /* Enable ADC3/ADC4 reset state */
 155:../src/stm32f30x_adc.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, ENABLE);
  78              		.loc 1 155 0 is_stmt 1
  79 0054 4FF00050 		mov	r0, #536870912
  80 0058 4FF00101 		mov	r1, #1
  81 005c FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
 156:../src/stm32f30x_adc.c ****     /* Release ADC3/ADC4 from reset state */
 157:../src/stm32f30x_adc.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, DISABLE);
  82              		.loc 1 157 0
  83 0060 4FF00050 		mov	r0, #536870912
  84 0064 4FF00001 		mov	r1, #0
  85 0068 FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
  86              	.L1:
 158:../src/stm32f30x_adc.c ****   }
 159:../src/stm32f30x_adc.c **** }
  87              		.loc 1 159 0
  88 006c 07F10807 		add	r7, r7, #8
  89 0070 BD46     		mov	sp, r7
  90 0072 80BD     		pop	{r7, pc}
  91              		.cfi_endproc
  92              	.LFE111:
  94              		.align	2
  95              		.global	ADC_Init
  96              		.thumb
  97              		.thumb_func
  99              	ADC_Init:
 100              	.LFB112:
 160:../src/stm32f30x_adc.c **** /**
 161:../src/stm32f30x_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters
 162:../src/stm32f30x_adc.c ****   *         in the ADC_InitStruct.
 163:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 164:../src/stm32f30x_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 165:../src/stm32f30x_adc.c ****   *         the configuration information for the specified ADC peripheral.
 166:../src/stm32f30x_adc.c ****   * @retval None
 167:../src/stm32f30x_adc.c ****   */
 168:../src/stm32f30x_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 169:../src/stm32f30x_adc.c **** {
 101              		.loc 1 169 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 16
 104              		@ frame_needed = 1, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106 0074 80B4     		push	{r7}
 107              	.LCFI3:
 108              		.cfi_def_cfa_offset 4
 109              		.cfi_offset 7, -4
 110 0076 85B0     		sub	sp, sp, #20
 111              	.LCFI4:
 112              		.cfi_def_cfa_offset 24
 113 0078 00AF     		add	r7, sp, #0
 114              	.LCFI5:
 115              		.cfi_def_cfa_register 7
 116 007a 7860     		str	r0, [r7, #4]
 117 007c 3960     		str	r1, [r7, #0]
 170:../src/stm32f30x_adc.c ****   uint32_t tmpreg1 = 0;
 118              		.loc 1 170 0
 119 007e 4FF00003 		mov	r3, #0
 120 0082 FB60     		str	r3, [r7, #12]
 171:../src/stm32f30x_adc.c ****   /* Check the parameters */
 172:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 173:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CONVMODE(ADC_InitStruct->ADC_ContinuousConvMode));
 174:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution));
 175:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConvEvent)); 
 176:../src/stm32f30x_adc.c ****   assert_param(IS_EXTERNALTRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigEventEdge));  
 177:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 178:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_OVRUNMODE(ADC_InitStruct->ADC_OverrunMode));
 179:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
 180:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));
 181:../src/stm32f30x_adc.c **** 
 182:../src/stm32f30x_adc.c ****   /*---------------------------- ADCx CFGR Configuration -----------------*/
 183:../src/stm32f30x_adc.c ****   /* Get the ADCx CFGR value */
 184:../src/stm32f30x_adc.c ****   tmpreg1 = ADCx->CFGR;
 121              		.loc 1 184 0
 122 0084 7B68     		ldr	r3, [r7, #4]
 123 0086 DB68     		ldr	r3, [r3, #12]
 124 0088 FB60     		str	r3, [r7, #12]
 185:../src/stm32f30x_adc.c ****   /* Clear SCAN bit */
 186:../src/stm32f30x_adc.c ****   tmpreg1 &= CFGR_CLEAR_Mask; 
 125              		.loc 1 186 0
 126 008a FA68     		ldr	r2, [r7, #12]
 127 008c 4CF20703 		movw	r3, #49159
 128 0090 CFF6FF53 		movt	r3, 65023
 129 0094 1340     		ands	r3, r3, r2
 130 0096 FB60     		str	r3, [r7, #12]
 187:../src/stm32f30x_adc.c ****   /* Configure ADCx: scan conversion mode */
 188:../src/stm32f30x_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 189:../src/stm32f30x_adc.c ****   tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 131              		.loc 1 189 0
 132 0098 3B68     		ldr	r3, [r7, #0]
 133 009a 1A68     		ldr	r2, [r3, #0]
 190:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_Resolution|                 
 134              		.loc 1 190 0
 135 009c 3B68     		ldr	r3, [r7, #0]
 136 009e 5B68     		ldr	r3, [r3, #4]
 189:../src/stm32f30x_adc.c ****   tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 137              		.loc 1 189 0
 138 00a0 1A43     		orrs	r2, r2, r3
 191:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 139              		.loc 1 191 0
 140 00a2 3B68     		ldr	r3, [r7, #0]
 141 00a4 9B68     		ldr	r3, [r3, #8]
 190:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_Resolution|                 
 142              		.loc 1 190 0
 143 00a6 1A43     		orrs	r2, r2, r3
 192:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 144              		.loc 1 192 0
 145 00a8 3B68     		ldr	r3, [r7, #0]
 146 00aa DB68     		ldr	r3, [r3, #12]
 191:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 147              		.loc 1 191 0
 148 00ac 1A43     		orrs	r2, r2, r3
 193:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_DataAlign|                 
 149              		.loc 1 193 0
 150 00ae 3B68     		ldr	r3, [r7, #0]
 151 00b0 1B69     		ldr	r3, [r3, #16]
 192:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 152              		.loc 1 192 0
 153 00b2 1A43     		orrs	r2, r2, r3
 194:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_OverrunMode|        
 154              		.loc 1 194 0
 155 00b4 3B68     		ldr	r3, [r7, #0]
 156 00b6 5B69     		ldr	r3, [r3, #20]
 193:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_DataAlign|                 
 157              		.loc 1 193 0
 158 00b8 1A43     		orrs	r2, r2, r3
 195:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_AutoInjMode;
 159              		.loc 1 195 0
 160 00ba 3B68     		ldr	r3, [r7, #0]
 161 00bc 9B69     		ldr	r3, [r3, #24]
 194:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_OverrunMode|        
 162              		.loc 1 194 0
 163 00be 1343     		orrs	r3, r3, r2
 189:../src/stm32f30x_adc.c ****   tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 164              		.loc 1 189 0
 165 00c0 FA68     		ldr	r2, [r7, #12]
 166 00c2 1343     		orrs	r3, r3, r2
 167 00c4 FB60     		str	r3, [r7, #12]
 196:../src/stm32f30x_adc.c ****   
 197:../src/stm32f30x_adc.c ****   /* Write to ADCx CFGR */
 198:../src/stm32f30x_adc.c ****   ADCx->CFGR = tmpreg1;
 168              		.loc 1 198 0
 169 00c6 7B68     		ldr	r3, [r7, #4]
 170 00c8 FA68     		ldr	r2, [r7, #12]
 171 00ca DA60     		str	r2, [r3, #12]
 199:../src/stm32f30x_adc.c ****   
 200:../src/stm32f30x_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 201:../src/stm32f30x_adc.c ****   /* Get the ADCx SQR1 value */
 202:../src/stm32f30x_adc.c ****   tmpreg1 = ADCx->SQR1;
 172              		.loc 1 202 0
 173 00cc 7B68     		ldr	r3, [r7, #4]
 174 00ce 1B6B     		ldr	r3, [r3, #48]
 175 00d0 FB60     		str	r3, [r7, #12]
 203:../src/stm32f30x_adc.c ****   /* Clear L bits */
 204:../src/stm32f30x_adc.c ****   tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 176              		.loc 1 204 0
 177 00d2 FB68     		ldr	r3, [r7, #12]
 178 00d4 23F00F03 		bic	r3, r3, #15
 179 00d8 FB60     		str	r3, [r7, #12]
 205:../src/stm32f30x_adc.c ****   /* Configure ADCx: regular channel sequence length */
 206:../src/stm32f30x_adc.c ****   /* Set L bits according to ADC_NbrOfRegChannel value */
 207:../src/stm32f30x_adc.c ****   tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 180              		.loc 1 207 0
 181 00da 3B68     		ldr	r3, [r7, #0]
 182 00dc 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 183 00de 03F1FF33 		add	r3, r3, #-1
 184 00e2 FA68     		ldr	r2, [r7, #12]
 185 00e4 1343     		orrs	r3, r3, r2
 186 00e6 FB60     		str	r3, [r7, #12]
 208:../src/stm32f30x_adc.c ****   /* Write to ADCx SQR1 */
 209:../src/stm32f30x_adc.c ****   ADCx->SQR1 = tmpreg1; 
 187              		.loc 1 209 0
 188 00e8 7B68     		ldr	r3, [r7, #4]
 189 00ea FA68     		ldr	r2, [r7, #12]
 190 00ec 1A63     		str	r2, [r3, #48]
 210:../src/stm32f30x_adc.c ****    
 211:../src/stm32f30x_adc.c **** }  
 191              		.loc 1 211 0
 192 00ee 07F11407 		add	r7, r7, #20
 193 00f2 BD46     		mov	sp, r7
 194 00f4 80BC     		pop	{r7}
 195 00f6 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE112:
 199              		.align	2
 200              		.global	ADC_StructInit
 201              		.thumb
 202              		.thumb_func
 204              	ADC_StructInit:
 205              	.LFB113:
 212:../src/stm32f30x_adc.c **** 
 213:../src/stm32f30x_adc.c **** /**
 214:../src/stm32f30x_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 215:../src/stm32f30x_adc.c ****   * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
 216:../src/stm32f30x_adc.c ****   * @retval None
 217:../src/stm32f30x_adc.c ****   */
 218:../src/stm32f30x_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 219:../src/stm32f30x_adc.c **** {
 206              		.loc 1 219 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 211 00f8 80B4     		push	{r7}
 212              	.LCFI6:
 213              		.cfi_def_cfa_offset 4
 214              		.cfi_offset 7, -4
 215 00fa 83B0     		sub	sp, sp, #12
 216              	.LCFI7:
 217              		.cfi_def_cfa_offset 16
 218 00fc 00AF     		add	r7, sp, #0
 219              	.LCFI8:
 220              		.cfi_def_cfa_register 7
 221 00fe 7860     		str	r0, [r7, #4]
 220:../src/stm32f30x_adc.c ****   /* Reset ADC init structure parameters values */
 221:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 222              		.loc 1 221 0
 223 0100 7B68     		ldr	r3, [r7, #4]
 224 0102 4FF00002 		mov	r2, #0
 225 0106 1A60     		str	r2, [r3, #0]
 222:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 226              		.loc 1 222 0
 227 0108 7B68     		ldr	r3, [r7, #4]
 228 010a 4FF00002 		mov	r2, #0
 229 010e 5A60     		str	r2, [r3, #4]
 223:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 230              		.loc 1 223 0
 231 0110 7B68     		ldr	r3, [r7, #4]
 232 0112 4FF00002 		mov	r2, #0
 233 0116 9A60     		str	r2, [r3, #8]
 224:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 234              		.loc 1 224 0
 235 0118 7B68     		ldr	r3, [r7, #4]
 236 011a 4FF00002 		mov	r2, #0
 237 011e DA60     		str	r2, [r3, #12]
 225:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 238              		.loc 1 225 0
 239 0120 7B68     		ldr	r3, [r7, #4]
 240 0122 4FF00002 		mov	r2, #0
 241 0126 1A61     		str	r2, [r3, #16]
 226:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 242              		.loc 1 226 0
 243 0128 7B68     		ldr	r3, [r7, #4]
 244 012a 4FF00002 		mov	r2, #0
 245 012e 5A61     		str	r2, [r3, #20]
 227:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 246              		.loc 1 227 0
 247 0130 7B68     		ldr	r3, [r7, #4]
 248 0132 4FF00002 		mov	r2, #0
 249 0136 9A61     		str	r2, [r3, #24]
 228:../src/stm32f30x_adc.c ****   ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 250              		.loc 1 228 0
 251 0138 7B68     		ldr	r3, [r7, #4]
 252 013a 4FF00102 		mov	r2, #1
 253 013e 1A77     		strb	r2, [r3, #28]
 229:../src/stm32f30x_adc.c **** }
 254              		.loc 1 229 0
 255 0140 07F10C07 		add	r7, r7, #12
 256 0144 BD46     		mov	sp, r7
 257 0146 80BC     		pop	{r7}
 258 0148 7047     		bx	lr
 259              		.cfi_endproc
 260              	.LFE113:
 262 014a 00BF     		.align	2
 263              		.global	ADC_InjectedInit
 264              		.thumb
 265              		.thumb_func
 267              	ADC_InjectedInit:
 268              	.LFB114:
 230:../src/stm32f30x_adc.c **** 
 231:../src/stm32f30x_adc.c **** /**
 232:../src/stm32f30x_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters
 233:../src/stm32f30x_adc.c ****   *         in the ADC_InitStruct.
 234:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 235:../src/stm32f30x_adc.c ****   * @param  ADC_InjectInitStruct: pointer to an ADC_InjecInitTypeDef structure that contains
 236:../src/stm32f30x_adc.c ****   *         the configuration information for the specified ADC injected channel.
 237:../src/stm32f30x_adc.c ****   * @retval None
 238:../src/stm32f30x_adc.c ****   */
 239:../src/stm32f30x_adc.c **** void ADC_InjectedInit(ADC_TypeDef* ADCx, ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
 240:../src/stm32f30x_adc.c **** {
 269              		.loc 1 240 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 16
 272              		@ frame_needed = 1, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274 014c 80B4     		push	{r7}
 275              	.LCFI9:
 276              		.cfi_def_cfa_offset 4
 277              		.cfi_offset 7, -4
 278 014e 85B0     		sub	sp, sp, #20
 279              	.LCFI10:
 280              		.cfi_def_cfa_offset 24
 281 0150 00AF     		add	r7, sp, #0
 282              	.LCFI11:
 283              		.cfi_def_cfa_register 7
 284 0152 7860     		str	r0, [r7, #4]
 285 0154 3960     		str	r1, [r7, #0]
 241:../src/stm32f30x_adc.c ****   uint32_t tmpreg1 = 0;
 286              		.loc 1 241 0
 287 0156 4FF00003 		mov	r3, #0
 288 015a FB60     		str	r3, [r7, #12]
 242:../src/stm32f30x_adc.c ****   /* Check the parameters */
 243:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 244:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent)); 
 245:../src/stm32f30x_adc.c ****   assert_param(IS_EXTERNALTRIGINJ_EDGE(ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge));   
 246:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(ADC_InjectedInitStruct->ADC_NbrOfInjecChannel));
 247:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence1));
 248:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence2));
 249:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence3));
 250:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence4));
 251:../src/stm32f30x_adc.c ****   
 252:../src/stm32f30x_adc.c ****   /*---------------------------- ADCx JSQR Configuration -----------------*/
 253:../src/stm32f30x_adc.c ****   /* Get the ADCx JSQR value */
 254:../src/stm32f30x_adc.c ****   tmpreg1 = ADCx->JSQR;
 289              		.loc 1 254 0
 290 015c 7B68     		ldr	r3, [r7, #4]
 291 015e DB6C     		ldr	r3, [r3, #76]
 292 0160 FB60     		str	r3, [r7, #12]
 255:../src/stm32f30x_adc.c ****   /* Clear L bits */
 256:../src/stm32f30x_adc.c ****   tmpreg1 &= JSQR_CLEAR_Mask;
 293              		.loc 1 256 0
 294 0162 4FF00003 		mov	r3, #0
 295 0166 FB60     		str	r3, [r7, #12]
 257:../src/stm32f30x_adc.c ****   /* Configure ADCx: Injected channel sequence length, external trigger, 
 258:../src/stm32f30x_adc.c ****      external trigger edge and sequences
 259:../src/stm32f30x_adc.c ****   */
 260:../src/stm32f30x_adc.c ****   tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 296              		.loc 1 260 0
 297 0168 3B68     		ldr	r3, [r7, #0]
 298 016a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 299 016c 03F1FF33 		add	r3, r3, #-1
 300 0170 1A46     		mov	r2, r3
 261:../src/stm32f30x_adc.c ****                          ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
 301              		.loc 1 261 0
 302 0172 3B68     		ldr	r3, [r7, #0]
 303 0174 1B68     		ldr	r3, [r3, #0]
 260:../src/stm32f30x_adc.c ****   tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 304              		.loc 1 260 0
 305 0176 1A43     		orrs	r2, r2, r3
 262:../src/stm32f30x_adc.c ****                          ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 306              		.loc 1 262 0
 307 0178 3B68     		ldr	r3, [r7, #0]
 308 017a 5B68     		ldr	r3, [r3, #4]
 261:../src/stm32f30x_adc.c ****                          ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
 309              		.loc 1 261 0
 310 017c 1A43     		orrs	r2, r2, r3
 263:../src/stm32f30x_adc.c ****                          (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
 311              		.loc 1 263 0
 312 017e 3B68     		ldr	r3, [r7, #0]
 313 0180 DB68     		ldr	r3, [r3, #12]
 314 0182 4FEA0323 		lsl	r3, r3, #8
 262:../src/stm32f30x_adc.c ****                          ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 315              		.loc 1 262 0
 316 0186 1A43     		orrs	r2, r2, r3
 264:../src/stm32f30x_adc.c ****                          (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
 317              		.loc 1 264 0
 318 0188 3B68     		ldr	r3, [r7, #0]
 319 018a 1B69     		ldr	r3, [r3, #16]
 320 018c 4FEA8333 		lsl	r3, r3, #14
 263:../src/stm32f30x_adc.c ****                          (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
 321              		.loc 1 263 0
 322 0190 1A43     		orrs	r2, r2, r3
 265:../src/stm32f30x_adc.c ****                          (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
 323              		.loc 1 265 0
 324 0192 3B68     		ldr	r3, [r7, #0]
 325 0194 5B69     		ldr	r3, [r3, #20]
 326 0196 4FEA0353 		lsl	r3, r3, #20
 264:../src/stm32f30x_adc.c ****                          (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
 327              		.loc 1 264 0
 328 019a 1A43     		orrs	r2, r2, r3
 266:../src/stm32f30x_adc.c ****                          (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence4) << 26));
 329              		.loc 1 266 0
 330 019c 3B68     		ldr	r3, [r7, #0]
 331 019e 9B69     		ldr	r3, [r3, #24]
 332 01a0 4FEA8363 		lsl	r3, r3, #26
 260:../src/stm32f30x_adc.c ****   tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 333              		.loc 1 260 0
 334 01a4 1343     		orrs	r3, r3, r2
 335 01a6 FB60     		str	r3, [r7, #12]
 267:../src/stm32f30x_adc.c ****   /* Write to ADCx SQR1 */
 268:../src/stm32f30x_adc.c ****   ADCx->JSQR = tmpreg1;  
 336              		.loc 1 268 0
 337 01a8 7B68     		ldr	r3, [r7, #4]
 338 01aa FA68     		ldr	r2, [r7, #12]
 339 01ac DA64     		str	r2, [r3, #76]
 269:../src/stm32f30x_adc.c **** }
 340              		.loc 1 269 0
 341 01ae 07F11407 		add	r7, r7, #20
 342 01b2 BD46     		mov	sp, r7
 343 01b4 80BC     		pop	{r7}
 344 01b6 7047     		bx	lr
 345              		.cfi_endproc
 346              	.LFE114:
 348              		.align	2
 349              		.global	ADC_InjectedStructInit
 350              		.thumb
 351              		.thumb_func
 353              	ADC_InjectedStructInit:
 354              	.LFB115:
 270:../src/stm32f30x_adc.c **** 
 271:../src/stm32f30x_adc.c **** /**
 272:../src/stm32f30x_adc.c ****   * @brief  Fills each ADC_InjectedInitStruct member with its default value.
 273:../src/stm32f30x_adc.c ****   * @param  ADC_InjectedInitStruct : pointer to an ADC_InjectedInitTypeDef structure which will be 
 274:../src/stm32f30x_adc.c ****   * @retval None
 275:../src/stm32f30x_adc.c ****   */
 276:../src/stm32f30x_adc.c **** void ADC_InjectedStructInit(ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
 277:../src/stm32f30x_adc.c **** {
 355              		.loc 1 277 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 8
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359              		@ link register save eliminated.
 360 01b8 80B4     		push	{r7}
 361              	.LCFI12:
 362              		.cfi_def_cfa_offset 4
 363              		.cfi_offset 7, -4
 364 01ba 83B0     		sub	sp, sp, #12
 365              	.LCFI13:
 366              		.cfi_def_cfa_offset 16
 367 01bc 00AF     		add	r7, sp, #0
 368              	.LCFI14:
 369              		.cfi_def_cfa_register 7
 370 01be 7860     		str	r0, [r7, #4]
 278:../src/stm32f30x_adc.c ****   ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent = ADC_ExternalTrigInjecConvEvent_0;    
 371              		.loc 1 278 0
 372 01c0 7B68     		ldr	r3, [r7, #4]
 373 01c2 4FF00002 		mov	r2, #0
 374 01c6 1A60     		str	r2, [r3, #0]
 279:../src/stm32f30x_adc.c ****   ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge = ADC_ExternalTrigInjecEventEdge_None;    
 375              		.loc 1 279 0
 376 01c8 7B68     		ldr	r3, [r7, #4]
 377 01ca 4FF00002 		mov	r2, #0
 378 01ce 5A60     		str	r2, [r3, #4]
 280:../src/stm32f30x_adc.c ****   ADC_InjectedInitStruct->ADC_NbrOfInjecChannel = 1;                                               
 379              		.loc 1 280 0
 380 01d0 7B68     		ldr	r3, [r7, #4]
 381 01d2 4FF00102 		mov	r2, #1
 382 01d6 1A72     		strb	r2, [r3, #8]
 281:../src/stm32f30x_adc.c ****   ADC_InjectedInitStruct->ADC_InjecSequence1 = ADC_InjectedChannel_1; 
 383              		.loc 1 281 0
 384 01d8 7B68     		ldr	r3, [r7, #4]
 385 01da 4FF00102 		mov	r2, #1
 386 01de DA60     		str	r2, [r3, #12]
 282:../src/stm32f30x_adc.c ****   ADC_InjectedInitStruct->ADC_InjecSequence2 = ADC_InjectedChannel_1;
 387              		.loc 1 282 0
 388 01e0 7B68     		ldr	r3, [r7, #4]
 389 01e2 4FF00102 		mov	r2, #1
 390 01e6 1A61     		str	r2, [r3, #16]
 283:../src/stm32f30x_adc.c ****   ADC_InjectedInitStruct->ADC_InjecSequence3 = ADC_InjectedChannel_1;
 391              		.loc 1 283 0
 392 01e8 7B68     		ldr	r3, [r7, #4]
 393 01ea 4FF00102 		mov	r2, #1
 394 01ee 5A61     		str	r2, [r3, #20]
 284:../src/stm32f30x_adc.c ****   ADC_InjectedInitStruct->ADC_InjecSequence4 = ADC_InjectedChannel_1; 
 395              		.loc 1 284 0
 396 01f0 7B68     		ldr	r3, [r7, #4]
 397 01f2 4FF00102 		mov	r2, #1
 398 01f6 9A61     		str	r2, [r3, #24]
 285:../src/stm32f30x_adc.c **** }
 399              		.loc 1 285 0
 400 01f8 07F10C07 		add	r7, r7, #12
 401 01fc BD46     		mov	sp, r7
 402 01fe 80BC     		pop	{r7}
 403 0200 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE115:
 407 0202 00BF     		.align	2
 408              		.global	ADC_CommonInit
 409              		.thumb
 410              		.thumb_func
 412              	ADC_CommonInit:
 413              	.LFB116:
 286:../src/stm32f30x_adc.c ****     
 287:../src/stm32f30x_adc.c **** /**
 288:../src/stm32f30x_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 289:../src/stm32f30x_adc.c ****   *         in the ADC_CommonInitStruct.
 290:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1 or 4 to select the ADC peripheral.
 291:../src/stm32f30x_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 292:../src/stm32f30x_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 293:../src/stm32f30x_adc.c ****   * @retval None
 294:../src/stm32f30x_adc.c ****   */
 295:../src/stm32f30x_adc.c **** void ADC_CommonInit(ADC_TypeDef* ADCx, ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 296:../src/stm32f30x_adc.c **** {
 414              		.loc 1 296 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 16
 417              		@ frame_needed = 1, uses_anonymous_args = 0
 418              		@ link register save eliminated.
 419 0204 80B4     		push	{r7}
 420              	.LCFI15:
 421              		.cfi_def_cfa_offset 4
 422              		.cfi_offset 7, -4
 423 0206 85B0     		sub	sp, sp, #20
 424              	.LCFI16:
 425              		.cfi_def_cfa_offset 24
 426 0208 00AF     		add	r7, sp, #0
 427              	.LCFI17:
 428              		.cfi_def_cfa_register 7
 429 020a 7860     		str	r0, [r7, #4]
 430 020c 3960     		str	r1, [r7, #0]
 297:../src/stm32f30x_adc.c ****   uint32_t tmpreg1 = 0;
 431              		.loc 1 297 0
 432 020e 4FF00003 		mov	r3, #0
 433 0212 FB60     		str	r3, [r7, #12]
 298:../src/stm32f30x_adc.c ****   /* Check the parameters */
 299:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 300:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CLOCKMODE(ADC_CommonInitStruct->ADC_Clock));
 301:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_DMA_MODE(ADC_CommonInitStruct->ADC_DMAMode));
 302:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 303:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_TWOSAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 304:../src/stm32f30x_adc.c **** 
 305:../src/stm32f30x_adc.c ****   if((ADCx == ADC1) || (ADCx == ADC2))
 434              		.loc 1 305 0
 435 0214 7B68     		ldr	r3, [r7, #4]
 436 0216 B3F1A04F 		cmp	r3, #1342177280
 437 021a 06D0     		beq	.L11
 438              		.loc 1 305 0 is_stmt 0 discriminator 1
 439 021c 7A68     		ldr	r2, [r7, #4]
 440 021e 4FF48073 		mov	r3, #256
 441 0222 C5F20003 		movt	r3, 20480
 442 0226 9A42     		cmp	r2, r3
 443 0228 0DD1     		bne	.L12
 444              	.L11:
 306:../src/stm32f30x_adc.c ****   {
 307:../src/stm32f30x_adc.c ****     /* Get the ADC CCR value */
 308:../src/stm32f30x_adc.c ****     tmpreg1 = ADC1_2->CCR;
 445              		.loc 1 308 0 is_stmt 1
 446 022a 4FF44073 		mov	r3, #768
 447 022e C5F20003 		movt	r3, 20480
 448 0232 9B68     		ldr	r3, [r3, #8]
 449 0234 FB60     		str	r3, [r7, #12]
 309:../src/stm32f30x_adc.c ****   
 310:../src/stm32f30x_adc.c ****     /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 311:../src/stm32f30x_adc.c ****     tmpreg1 &= CCR_CLEAR_MASK;
 450              		.loc 1 311 0
 451 0236 FA68     		ldr	r2, [r7, #12]
 452 0238 4FF48753 		mov	r3, #4320
 453 023c CFF6FC73 		movt	r3, 65532
 454 0240 1340     		ands	r3, r3, r2
 455 0242 FB60     		str	r3, [r7, #12]
 456 0244 0CE0     		b	.L13
 457              	.L12:
 312:../src/stm32f30x_adc.c ****   }
 313:../src/stm32f30x_adc.c ****   else
 314:../src/stm32f30x_adc.c ****   {
 315:../src/stm32f30x_adc.c ****     /* Get the ADC CCR value */
 316:../src/stm32f30x_adc.c ****     tmpreg1 = ADC3_4->CCR;
 458              		.loc 1 316 0
 459 0246 4FF4E063 		mov	r3, #1792
 460 024a C5F20003 		movt	r3, 20480
 461 024e 9B68     		ldr	r3, [r3, #8]
 462 0250 FB60     		str	r3, [r7, #12]
 317:../src/stm32f30x_adc.c ****   
 318:../src/stm32f30x_adc.c ****     /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 319:../src/stm32f30x_adc.c ****     tmpreg1 &= CCR_CLEAR_MASK;
 463              		.loc 1 319 0
 464 0252 FA68     		ldr	r2, [r7, #12]
 465 0254 4FF48753 		mov	r3, #4320
 466 0258 CFF6FC73 		movt	r3, 65532
 467 025c 1340     		ands	r3, r3, r2
 468 025e FB60     		str	r3, [r7, #12]
 469              	.L13:
 320:../src/stm32f30x_adc.c ****   }
 321:../src/stm32f30x_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/  
 322:../src/stm32f30x_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC clock, DMA mode
 323:../src/stm32f30x_adc.c ****      and DMA access mode for dual mode */
 324:../src/stm32f30x_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 325:../src/stm32f30x_adc.c ****   /* Set CKMODE bits according to ADC_Clock value */
 326:../src/stm32f30x_adc.c ****   /* Set MDMA bits according to ADC_DMAAccessMode value */
 327:../src/stm32f30x_adc.c ****   /* Set DMACFG bits according to ADC_DMAMode value */
 328:../src/stm32f30x_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 329:../src/stm32f30x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 470              		.loc 1 329 0
 471 0260 3B68     		ldr	r3, [r7, #0]
 472 0262 1A68     		ldr	r2, [r3, #0]
 330:../src/stm32f30x_adc.c ****                         ADC_CommonInitStruct->ADC_Clock | 
 473              		.loc 1 330 0
 474 0264 3B68     		ldr	r3, [r7, #0]
 475 0266 5B68     		ldr	r3, [r3, #4]
 329:../src/stm32f30x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 476              		.loc 1 329 0
 477 0268 1A43     		orrs	r2, r2, r3
 331:../src/stm32f30x_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 478              		.loc 1 331 0
 479 026a 3B68     		ldr	r3, [r7, #0]
 480 026c 9B68     		ldr	r3, [r3, #8]
 330:../src/stm32f30x_adc.c ****                         ADC_CommonInitStruct->ADC_Clock | 
 481              		.loc 1 330 0
 482 026e 1A43     		orrs	r2, r2, r3
 332:../src/stm32f30x_adc.c ****                         (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
 483              		.loc 1 332 0
 484 0270 3B68     		ldr	r3, [r7, #0]
 485 0272 DB68     		ldr	r3, [r3, #12]
 486 0274 4FEA0333 		lsl	r3, r3, #12
 331:../src/stm32f30x_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 487              		.loc 1 331 0
 488 0278 1A43     		orrs	r2, r2, r3
 333:../src/stm32f30x_adc.c ****                         (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));
 489              		.loc 1 333 0
 490 027a 3B68     		ldr	r3, [r7, #0]
 491 027c 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 492 027e 4FEA0323 		lsl	r3, r3, #8
 329:../src/stm32f30x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 493              		.loc 1 329 0
 494 0282 1343     		orrs	r3, r3, r2
 495 0284 FA68     		ldr	r2, [r7, #12]
 496 0286 1343     		orrs	r3, r3, r2
 497 0288 FB60     		str	r3, [r7, #12]
 334:../src/stm32f30x_adc.c **** 
 335:../src/stm32f30x_adc.c ****   if((ADCx == ADC1) || (ADCx == ADC2))
 498              		.loc 1 335 0
 499 028a 7B68     		ldr	r3, [r7, #4]
 500 028c B3F1A04F 		cmp	r3, #1342177280
 501 0290 06D0     		beq	.L14
 502              		.loc 1 335 0 is_stmt 0 discriminator 1
 503 0292 7A68     		ldr	r2, [r7, #4]
 504 0294 4FF48073 		mov	r3, #256
 505 0298 C5F20003 		movt	r3, 20480
 506 029c 9A42     		cmp	r2, r3
 507 029e 06D1     		bne	.L15
 508              	.L14:
 336:../src/stm32f30x_adc.c ****   {                        
 337:../src/stm32f30x_adc.c ****     /* Write to ADC CCR */
 338:../src/stm32f30x_adc.c ****     ADC1_2->CCR = tmpreg1;
 509              		.loc 1 338 0 is_stmt 1
 510 02a0 4FF44073 		mov	r3, #768
 511 02a4 C5F20003 		movt	r3, 20480
 512 02a8 FA68     		ldr	r2, [r7, #12]
 513 02aa 9A60     		str	r2, [r3, #8]
 514 02ac 05E0     		b	.L10
 515              	.L15:
 339:../src/stm32f30x_adc.c ****   }
 340:../src/stm32f30x_adc.c ****   else
 341:../src/stm32f30x_adc.c ****   {
 342:../src/stm32f30x_adc.c ****     /* Write to ADC CCR */
 343:../src/stm32f30x_adc.c ****     ADC3_4->CCR = tmpreg1;
 516              		.loc 1 343 0
 517 02ae 4FF4E063 		mov	r3, #1792
 518 02b2 C5F20003 		movt	r3, 20480
 519 02b6 FA68     		ldr	r2, [r7, #12]
 520 02b8 9A60     		str	r2, [r3, #8]
 521              	.L10:
 344:../src/stm32f30x_adc.c ****   }
 345:../src/stm32f30x_adc.c **** }
 522              		.loc 1 345 0
 523 02ba 07F11407 		add	r7, r7, #20
 524 02be BD46     		mov	sp, r7
 525 02c0 80BC     		pop	{r7}
 526 02c2 7047     		bx	lr
 527              		.cfi_endproc
 528              	.LFE116:
 530              		.align	2
 531              		.global	ADC_CommonStructInit
 532              		.thumb
 533              		.thumb_func
 535              	ADC_CommonStructInit:
 536              	.LFB117:
 346:../src/stm32f30x_adc.c **** 
 347:../src/stm32f30x_adc.c **** /**
 348:../src/stm32f30x_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 349:../src/stm32f30x_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 350:../src/stm32f30x_adc.c ****   *         which will be initialized.
 351:../src/stm32f30x_adc.c ****   * @retval None
 352:../src/stm32f30x_adc.c ****   */
 353:../src/stm32f30x_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 354:../src/stm32f30x_adc.c **** {
 537              		.loc 1 354 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 8
 540              		@ frame_needed = 1, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 542 02c4 80B4     		push	{r7}
 543              	.LCFI18:
 544              		.cfi_def_cfa_offset 4
 545              		.cfi_offset 7, -4
 546 02c6 83B0     		sub	sp, sp, #12
 547              	.LCFI19:
 548              		.cfi_def_cfa_offset 16
 549 02c8 00AF     		add	r7, sp, #0
 550              	.LCFI20:
 551              		.cfi_def_cfa_register 7
 552 02ca 7860     		str	r0, [r7, #4]
 355:../src/stm32f30x_adc.c ****   /* Initialize the ADC_Mode member */
 356:../src/stm32f30x_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 553              		.loc 1 356 0
 554 02cc 7B68     		ldr	r3, [r7, #4]
 555 02ce 4FF00002 		mov	r2, #0
 556 02d2 1A60     		str	r2, [r3, #0]
 357:../src/stm32f30x_adc.c **** 
 358:../src/stm32f30x_adc.c ****   /* initialize the ADC_Clock member */
 359:../src/stm32f30x_adc.c ****   ADC_CommonInitStruct->ADC_Clock = ADC_Clock_AsynClkMode;
 557              		.loc 1 359 0
 558 02d4 7B68     		ldr	r3, [r7, #4]
 559 02d6 4FF00002 		mov	r2, #0
 560 02da 5A60     		str	r2, [r3, #4]
 360:../src/stm32f30x_adc.c **** 
 361:../src/stm32f30x_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 362:../src/stm32f30x_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 561              		.loc 1 362 0
 562 02dc 7B68     		ldr	r3, [r7, #4]
 563 02de 4FF00002 		mov	r2, #0
 564 02e2 9A60     		str	r2, [r3, #8]
 363:../src/stm32f30x_adc.c **** 
 364:../src/stm32f30x_adc.c ****   /* Initialize the ADC_DMAMode member */
 365:../src/stm32f30x_adc.c ****   ADC_CommonInitStruct->ADC_DMAMode = ADC_DMAMode_OneShot;
 565              		.loc 1 365 0
 566 02e4 7B68     		ldr	r3, [r7, #4]
 567 02e6 4FF00002 		mov	r2, #0
 568 02ea DA60     		str	r2, [r3, #12]
 366:../src/stm32f30x_adc.c **** 
 367:../src/stm32f30x_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 368:../src/stm32f30x_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = 0;
 569              		.loc 1 368 0
 570 02ec 7B68     		ldr	r3, [r7, #4]
 571 02ee 4FF00002 		mov	r2, #0
 572 02f2 1A74     		strb	r2, [r3, #16]
 369:../src/stm32f30x_adc.c **** 
 370:../src/stm32f30x_adc.c **** }
 573              		.loc 1 370 0
 574 02f4 07F10C07 		add	r7, r7, #12
 575 02f8 BD46     		mov	sp, r7
 576 02fa 80BC     		pop	{r7}
 577 02fc 7047     		bx	lr
 578              		.cfi_endproc
 579              	.LFE117:
 581 02fe 00BF     		.align	2
 582              		.global	ADC_Cmd
 583              		.thumb
 584              		.thumb_func
 586              	ADC_Cmd:
 587              	.LFB118:
 371:../src/stm32f30x_adc.c **** 
 372:../src/stm32f30x_adc.c **** /**
 373:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 374:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 375:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the ADCx peripheral.
 376:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 377:../src/stm32f30x_adc.c ****   * @retval None
 378:../src/stm32f30x_adc.c ****   */
 379:../src/stm32f30x_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 380:../src/stm32f30x_adc.c **** {
 588              		.loc 1 380 0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 8
 591              		@ frame_needed = 1, uses_anonymous_args = 0
 592              		@ link register save eliminated.
 593 0300 80B4     		push	{r7}
 594              	.LCFI21:
 595              		.cfi_def_cfa_offset 4
 596              		.cfi_offset 7, -4
 597 0302 83B0     		sub	sp, sp, #12
 598              	.LCFI22:
 599              		.cfi_def_cfa_offset 16
 600 0304 00AF     		add	r7, sp, #0
 601              	.LCFI23:
 602              		.cfi_def_cfa_register 7
 603 0306 7860     		str	r0, [r7, #4]
 604 0308 0B46     		mov	r3, r1
 605 030a FB70     		strb	r3, [r7, #3]
 381:../src/stm32f30x_adc.c ****   /* Check the parameters */
 382:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 383:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 384:../src/stm32f30x_adc.c **** 
 385:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 606              		.loc 1 385 0
 607 030c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 608 030e 002B     		cmp	r3, #0
 609 0310 06D0     		beq	.L19
 386:../src/stm32f30x_adc.c ****   {
 387:../src/stm32f30x_adc.c ****     /* Set the ADEN bit */
 388:../src/stm32f30x_adc.c ****     ADCx->CR |= ADC_CR_ADEN;
 610              		.loc 1 388 0
 611 0312 7B68     		ldr	r3, [r7, #4]
 612 0314 9B68     		ldr	r3, [r3, #8]
 613 0316 43F00102 		orr	r2, r3, #1
 614 031a 7B68     		ldr	r3, [r7, #4]
 615 031c 9A60     		str	r2, [r3, #8]
 616 031e 05E0     		b	.L18
 617              	.L19:
 389:../src/stm32f30x_adc.c ****   }
 390:../src/stm32f30x_adc.c ****   else
 391:../src/stm32f30x_adc.c ****   {
 392:../src/stm32f30x_adc.c ****     /* Disable the selected ADC peripheral: Set the ADDIS bit */
 393:../src/stm32f30x_adc.c ****     ADCx->CR |= ADC_CR_ADDIS;
 618              		.loc 1 393 0
 619 0320 7B68     		ldr	r3, [r7, #4]
 620 0322 9B68     		ldr	r3, [r3, #8]
 621 0324 43F00202 		orr	r2, r3, #2
 622 0328 7B68     		ldr	r3, [r7, #4]
 623 032a 9A60     		str	r2, [r3, #8]
 624              	.L18:
 394:../src/stm32f30x_adc.c ****   }
 395:../src/stm32f30x_adc.c **** }
 625              		.loc 1 395 0
 626 032c 07F10C07 		add	r7, r7, #12
 627 0330 BD46     		mov	sp, r7
 628 0332 80BC     		pop	{r7}
 629 0334 7047     		bx	lr
 630              		.cfi_endproc
 631              	.LFE118:
 633 0336 00BF     		.align	2
 634              		.global	ADC_StartCalibration
 635              		.thumb
 636              		.thumb_func
 638              	ADC_StartCalibration:
 639              	.LFB119:
 396:../src/stm32f30x_adc.c **** 
 397:../src/stm32f30x_adc.c **** /**
 398:../src/stm32f30x_adc.c ****   * @brief  Starts the selected ADC calibration process.
 399:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 400:../src/stm32f30x_adc.c ****   * @retval None
 401:../src/stm32f30x_adc.c ****   */
 402:../src/stm32f30x_adc.c **** void ADC_StartCalibration(ADC_TypeDef* ADCx)
 403:../src/stm32f30x_adc.c **** {
 640              		.loc 1 403 0
 641              		.cfi_startproc
 642              		@ args = 0, pretend = 0, frame = 8
 643              		@ frame_needed = 1, uses_anonymous_args = 0
 644              		@ link register save eliminated.
 645 0338 80B4     		push	{r7}
 646              	.LCFI24:
 647              		.cfi_def_cfa_offset 4
 648              		.cfi_offset 7, -4
 649 033a 83B0     		sub	sp, sp, #12
 650              	.LCFI25:
 651              		.cfi_def_cfa_offset 16
 652 033c 00AF     		add	r7, sp, #0
 653              	.LCFI26:
 654              		.cfi_def_cfa_register 7
 655 033e 7860     		str	r0, [r7, #4]
 404:../src/stm32f30x_adc.c ****   /* Check the parameters */
 405:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 406:../src/stm32f30x_adc.c **** 
 407:../src/stm32f30x_adc.c ****   /* Set the ADCAL bit */
 408:../src/stm32f30x_adc.c ****   ADCx->CR |= ADC_CR_ADCAL;
 656              		.loc 1 408 0
 657 0340 7B68     		ldr	r3, [r7, #4]
 658 0342 9B68     		ldr	r3, [r3, #8]
 659 0344 43F00042 		orr	r2, r3, #-2147483648
 660 0348 7B68     		ldr	r3, [r7, #4]
 661 034a 9A60     		str	r2, [r3, #8]
 409:../src/stm32f30x_adc.c **** }
 662              		.loc 1 409 0
 663 034c 07F10C07 		add	r7, r7, #12
 664 0350 BD46     		mov	sp, r7
 665 0352 80BC     		pop	{r7}
 666 0354 7047     		bx	lr
 667              		.cfi_endproc
 668              	.LFE119:
 670 0356 00BF     		.align	2
 671              		.global	ADC_GetCalibrationValue
 672              		.thumb
 673              		.thumb_func
 675              	ADC_GetCalibrationValue:
 676              	.LFB120:
 410:../src/stm32f30x_adc.c **** 
 411:../src/stm32f30x_adc.c **** /**
 412:../src/stm32f30x_adc.c ****   * @brief  Returns the ADCx calibration value.
 413:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 414:../src/stm32f30x_adc.c ****   * @retval None
 415:../src/stm32f30x_adc.c ****   */
 416:../src/stm32f30x_adc.c **** uint32_t ADC_GetCalibrationValue(ADC_TypeDef* ADCx)
 417:../src/stm32f30x_adc.c **** {
 677              		.loc 1 417 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 8
 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681              		@ link register save eliminated.
 682 0358 80B4     		push	{r7}
 683              	.LCFI27:
 684              		.cfi_def_cfa_offset 4
 685              		.cfi_offset 7, -4
 686 035a 83B0     		sub	sp, sp, #12
 687              	.LCFI28:
 688              		.cfi_def_cfa_offset 16
 689 035c 00AF     		add	r7, sp, #0
 690              	.LCFI29:
 691              		.cfi_def_cfa_register 7
 692 035e 7860     		str	r0, [r7, #4]
 418:../src/stm32f30x_adc.c ****   /* Check the parameters */
 419:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 420:../src/stm32f30x_adc.c **** 
 421:../src/stm32f30x_adc.c ****   /* Return the selected ADC calibration value */
 422:../src/stm32f30x_adc.c ****   return (uint32_t)ADCx->CALFACT;
 693              		.loc 1 422 0
 694 0360 7B68     		ldr	r3, [r7, #4]
 695 0362 D3F8B430 		ldr	r3, [r3, #180]
 423:../src/stm32f30x_adc.c **** }
 696              		.loc 1 423 0
 697 0366 1846     		mov	r0, r3
 698 0368 07F10C07 		add	r7, r7, #12
 699 036c BD46     		mov	sp, r7
 700 036e 80BC     		pop	{r7}
 701 0370 7047     		bx	lr
 702              		.cfi_endproc
 703              	.LFE120:
 705 0372 00BF     		.align	2
 706              		.global	ADC_SetCalibrationValue
 707              		.thumb
 708              		.thumb_func
 710              	ADC_SetCalibrationValue:
 711              	.LFB121:
 424:../src/stm32f30x_adc.c **** 
 425:../src/stm32f30x_adc.c **** /**
 426:../src/stm32f30x_adc.c ****   * @brief  Sets the ADCx calibration register.
 427:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 428:../src/stm32f30x_adc.c ****   * @retval None
 429:../src/stm32f30x_adc.c ****   */
 430:../src/stm32f30x_adc.c **** void ADC_SetCalibrationValue(ADC_TypeDef* ADCx, uint32_t ADC_Calibration)
 431:../src/stm32f30x_adc.c **** {
 712              		.loc 1 431 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 8
 715              		@ frame_needed = 1, uses_anonymous_args = 0
 716              		@ link register save eliminated.
 717 0374 80B4     		push	{r7}
 718              	.LCFI30:
 719              		.cfi_def_cfa_offset 4
 720              		.cfi_offset 7, -4
 721 0376 83B0     		sub	sp, sp, #12
 722              	.LCFI31:
 723              		.cfi_def_cfa_offset 16
 724 0378 00AF     		add	r7, sp, #0
 725              	.LCFI32:
 726              		.cfi_def_cfa_register 7
 727 037a 7860     		str	r0, [r7, #4]
 728 037c 3960     		str	r1, [r7, #0]
 432:../src/stm32f30x_adc.c ****   /* Check the parameters */
 433:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 434:../src/stm32f30x_adc.c **** 
 435:../src/stm32f30x_adc.c ****   /* Set the ADC calibration register value */
 436:../src/stm32f30x_adc.c ****   ADCx->CALFACT = ADC_Calibration;
 729              		.loc 1 436 0
 730 037e 7B68     		ldr	r3, [r7, #4]
 731 0380 3A68     		ldr	r2, [r7, #0]
 732 0382 C3F8B420 		str	r2, [r3, #180]
 437:../src/stm32f30x_adc.c **** }
 733              		.loc 1 437 0
 734 0386 07F10C07 		add	r7, r7, #12
 735 038a BD46     		mov	sp, r7
 736 038c 80BC     		pop	{r7}
 737 038e 7047     		bx	lr
 738              		.cfi_endproc
 739              	.LFE121:
 741              		.align	2
 742              		.global	ADC_SelectCalibrationMode
 743              		.thumb
 744              		.thumb_func
 746              	ADC_SelectCalibrationMode:
 747              	.LFB122:
 438:../src/stm32f30x_adc.c **** 
 439:../src/stm32f30x_adc.c **** /**
 440:../src/stm32f30x_adc.c ****   * @brief  Select the ADC calibration mode.
 441:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 442:../src/stm32f30x_adc.c ****   * @param  ADC_CalibrationMode: the ADC calibration mode.
 443:../src/stm32f30x_adc.c ****   *         This parameter can be one of the following values: 
 444:../src/stm32f30x_adc.c ****   *          @arg ADC_CalibrationMode_Single: to select the calibration for single channel
 445:../src/stm32f30x_adc.c ****   *          @arg ADC_CalibrationMode_Differential: to select the calibration for differential chan
 446:../src/stm32f30x_adc.c ****   * @retval None
 447:../src/stm32f30x_adc.c ****   */
 448:../src/stm32f30x_adc.c **** void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode)
 449:../src/stm32f30x_adc.c **** {
 748              		.loc 1 449 0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 8
 751              		@ frame_needed = 1, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 753 0390 80B4     		push	{r7}
 754              	.LCFI33:
 755              		.cfi_def_cfa_offset 4
 756              		.cfi_offset 7, -4
 757 0392 83B0     		sub	sp, sp, #12
 758              	.LCFI34:
 759              		.cfi_def_cfa_offset 16
 760 0394 00AF     		add	r7, sp, #0
 761              	.LCFI35:
 762              		.cfi_def_cfa_register 7
 763 0396 7860     		str	r0, [r7, #4]
 764 0398 3960     		str	r1, [r7, #0]
 450:../src/stm32f30x_adc.c ****   /* Check the parameters */
 451:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 452:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
 453:../src/stm32f30x_adc.c ****   /* Set or Reset the ADCALDIF bit */
 454:../src/stm32f30x_adc.c ****   ADCx->CR &= (~ADC_CR_ADCALDIF);
 765              		.loc 1 454 0
 766 039a 7B68     		ldr	r3, [r7, #4]
 767 039c 9B68     		ldr	r3, [r3, #8]
 768 039e 23F08042 		bic	r2, r3, #1073741824
 769 03a2 7B68     		ldr	r3, [r7, #4]
 770 03a4 9A60     		str	r2, [r3, #8]
 455:../src/stm32f30x_adc.c ****   ADCx->CR |= ADC_CalibrationMode;
 771              		.loc 1 455 0
 772 03a6 7B68     		ldr	r3, [r7, #4]
 773 03a8 9A68     		ldr	r2, [r3, #8]
 774 03aa 3B68     		ldr	r3, [r7, #0]
 775 03ac 1A43     		orrs	r2, r2, r3
 776 03ae 7B68     		ldr	r3, [r7, #4]
 777 03b0 9A60     		str	r2, [r3, #8]
 456:../src/stm32f30x_adc.c **** 
 457:../src/stm32f30x_adc.c **** }
 778              		.loc 1 457 0
 779 03b2 07F10C07 		add	r7, r7, #12
 780 03b6 BD46     		mov	sp, r7
 781 03b8 80BC     		pop	{r7}
 782 03ba 7047     		bx	lr
 783              		.cfi_endproc
 784              	.LFE122:
 786              		.align	2
 787              		.global	ADC_GetCalibrationStatus
 788              		.thumb
 789              		.thumb_func
 791              	ADC_GetCalibrationStatus:
 792              	.LFB123:
 458:../src/stm32f30x_adc.c **** 
 459:../src/stm32f30x_adc.c **** /**
 460:../src/stm32f30x_adc.c ****   * @brief  Gets the selected ADC calibration status.
 461:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 462:../src/stm32f30x_adc.c ****   * @retval The new state of ADC calibration (SET or RESET).
 463:../src/stm32f30x_adc.c ****   */
 464:../src/stm32f30x_adc.c **** FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
 465:../src/stm32f30x_adc.c **** {
 793              		.loc 1 465 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 16
 796              		@ frame_needed = 1, uses_anonymous_args = 0
 797              		@ link register save eliminated.
 798 03bc 80B4     		push	{r7}
 799              	.LCFI36:
 800              		.cfi_def_cfa_offset 4
 801              		.cfi_offset 7, -4
 802 03be 85B0     		sub	sp, sp, #20
 803              	.LCFI37:
 804              		.cfi_def_cfa_offset 24
 805 03c0 00AF     		add	r7, sp, #0
 806              	.LCFI38:
 807              		.cfi_def_cfa_register 7
 808 03c2 7860     		str	r0, [r7, #4]
 466:../src/stm32f30x_adc.c ****   FlagStatus bitstatus = RESET;
 809              		.loc 1 466 0
 810 03c4 4FF00003 		mov	r3, #0
 811 03c8 FB73     		strb	r3, [r7, #15]
 467:../src/stm32f30x_adc.c ****   /* Check the parameters */
 468:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 469:../src/stm32f30x_adc.c ****   /* Check the status of CAL bit */
 470:../src/stm32f30x_adc.c ****   if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 812              		.loc 1 470 0
 813 03ca 7B68     		ldr	r3, [r7, #4]
 814 03cc 9B68     		ldr	r3, [r3, #8]
 815 03ce 002B     		cmp	r3, #0
 816 03d0 03DA     		bge	.L27
 471:../src/stm32f30x_adc.c ****   {
 472:../src/stm32f30x_adc.c ****     /* CAL bit is set: calibration on going */
 473:../src/stm32f30x_adc.c ****     bitstatus = SET;
 817              		.loc 1 473 0
 818 03d2 4FF00103 		mov	r3, #1
 819 03d6 FB73     		strb	r3, [r7, #15]
 820 03d8 02E0     		b	.L28
 821              	.L27:
 474:../src/stm32f30x_adc.c ****   }
 475:../src/stm32f30x_adc.c ****   else
 476:../src/stm32f30x_adc.c ****   {
 477:../src/stm32f30x_adc.c ****     /* CAL bit is reset: end of calibration */
 478:../src/stm32f30x_adc.c ****     bitstatus = RESET;
 822              		.loc 1 478 0
 823 03da 4FF00003 		mov	r3, #0
 824 03de FB73     		strb	r3, [r7, #15]
 825              	.L28:
 479:../src/stm32f30x_adc.c ****   }
 480:../src/stm32f30x_adc.c ****   /* Return the CAL bit status */
 481:../src/stm32f30x_adc.c ****   return  bitstatus;
 826              		.loc 1 481 0
 827 03e0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 482:../src/stm32f30x_adc.c **** }
 828              		.loc 1 482 0
 829 03e2 1846     		mov	r0, r3
 830 03e4 07F11407 		add	r7, r7, #20
 831 03e8 BD46     		mov	sp, r7
 832 03ea 80BC     		pop	{r7}
 833 03ec 7047     		bx	lr
 834              		.cfi_endproc
 835              	.LFE123:
 837 03ee 00BF     		.align	2
 838              		.global	ADC_DisableCmd
 839              		.thumb
 840              		.thumb_func
 842              	ADC_DisableCmd:
 843              	.LFB124:
 483:../src/stm32f30x_adc.c **** 
 484:../src/stm32f30x_adc.c **** /**
 485:../src/stm32f30x_adc.c ****   * @brief  ADC Disable Command.
 486:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 487:../src/stm32f30x_adc.c ****   * @retval None
 488:../src/stm32f30x_adc.c ****   */
 489:../src/stm32f30x_adc.c **** void ADC_DisableCmd(ADC_TypeDef* ADCx)
 490:../src/stm32f30x_adc.c **** {
 844              		.loc 1 490 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 8
 847              		@ frame_needed = 1, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 849 03f0 80B4     		push	{r7}
 850              	.LCFI39:
 851              		.cfi_def_cfa_offset 4
 852              		.cfi_offset 7, -4
 853 03f2 83B0     		sub	sp, sp, #12
 854              	.LCFI40:
 855              		.cfi_def_cfa_offset 16
 856 03f4 00AF     		add	r7, sp, #0
 857              	.LCFI41:
 858              		.cfi_def_cfa_register 7
 859 03f6 7860     		str	r0, [r7, #4]
 491:../src/stm32f30x_adc.c ****   /* Check the parameters */
 492:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 493:../src/stm32f30x_adc.c **** 
 494:../src/stm32f30x_adc.c ****   /* Set the ADDIS bit */
 495:../src/stm32f30x_adc.c ****   ADCx->CR |= ADC_CR_ADDIS;
 860              		.loc 1 495 0
 861 03f8 7B68     		ldr	r3, [r7, #4]
 862 03fa 9B68     		ldr	r3, [r3, #8]
 863 03fc 43F00202 		orr	r2, r3, #2
 864 0400 7B68     		ldr	r3, [r7, #4]
 865 0402 9A60     		str	r2, [r3, #8]
 496:../src/stm32f30x_adc.c **** }
 866              		.loc 1 496 0
 867 0404 07F10C07 		add	r7, r7, #12
 868 0408 BD46     		mov	sp, r7
 869 040a 80BC     		pop	{r7}
 870 040c 7047     		bx	lr
 871              		.cfi_endproc
 872              	.LFE124:
 874 040e 00BF     		.align	2
 875              		.global	ADC_GetDisableCmdStatus
 876              		.thumb
 877              		.thumb_func
 879              	ADC_GetDisableCmdStatus:
 880              	.LFB125:
 497:../src/stm32f30x_adc.c **** 
 498:../src/stm32f30x_adc.c **** 
 499:../src/stm32f30x_adc.c **** /**
 500:../src/stm32f30x_adc.c ****   * @brief  Gets the selected ADC disable command Status.
 501:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 502:../src/stm32f30x_adc.c ****   * @retval The new state of ADC ADC disable command (SET or RESET).
 503:../src/stm32f30x_adc.c ****   */
 504:../src/stm32f30x_adc.c **** FlagStatus ADC_GetDisableCmdStatus(ADC_TypeDef* ADCx)
 505:../src/stm32f30x_adc.c **** {
 881              		.loc 1 505 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 16
 884              		@ frame_needed = 1, uses_anonymous_args = 0
 885              		@ link register save eliminated.
 886 0410 80B4     		push	{r7}
 887              	.LCFI42:
 888              		.cfi_def_cfa_offset 4
 889              		.cfi_offset 7, -4
 890 0412 85B0     		sub	sp, sp, #20
 891              	.LCFI43:
 892              		.cfi_def_cfa_offset 24
 893 0414 00AF     		add	r7, sp, #0
 894              	.LCFI44:
 895              		.cfi_def_cfa_register 7
 896 0416 7860     		str	r0, [r7, #4]
 506:../src/stm32f30x_adc.c ****   FlagStatus bitstatus = RESET;
 897              		.loc 1 506 0
 898 0418 4FF00003 		mov	r3, #0
 899 041c FB73     		strb	r3, [r7, #15]
 507:../src/stm32f30x_adc.c ****   /* Check the parameters */
 508:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 509:../src/stm32f30x_adc.c **** 
 510:../src/stm32f30x_adc.c ****   /* Check the status of ADDIS bit */
 511:../src/stm32f30x_adc.c ****   if ((ADCx->CR & ADC_CR_ADDIS) != (uint32_t)RESET)
 900              		.loc 1 511 0
 901 041e 7B68     		ldr	r3, [r7, #4]
 902 0420 9B68     		ldr	r3, [r3, #8]
 903 0422 03F00203 		and	r3, r3, #2
 904 0426 002B     		cmp	r3, #0
 905 0428 03D0     		beq	.L32
 512:../src/stm32f30x_adc.c ****   {
 513:../src/stm32f30x_adc.c ****     /* ADDIS bit is set */
 514:../src/stm32f30x_adc.c ****     bitstatus = SET;
 906              		.loc 1 514 0
 907 042a 4FF00103 		mov	r3, #1
 908 042e FB73     		strb	r3, [r7, #15]
 909 0430 02E0     		b	.L33
 910              	.L32:
 515:../src/stm32f30x_adc.c ****   }
 516:../src/stm32f30x_adc.c ****   else
 517:../src/stm32f30x_adc.c ****   {
 518:../src/stm32f30x_adc.c ****     /* ADDIS bit is reset */
 519:../src/stm32f30x_adc.c ****     bitstatus = RESET;
 911              		.loc 1 519 0
 912 0432 4FF00003 		mov	r3, #0
 913 0436 FB73     		strb	r3, [r7, #15]
 914              	.L33:
 520:../src/stm32f30x_adc.c ****   }
 521:../src/stm32f30x_adc.c ****   /* Return the ADDIS bit status */
 522:../src/stm32f30x_adc.c ****   return  bitstatus;
 915              		.loc 1 522 0
 916 0438 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 523:../src/stm32f30x_adc.c **** }
 917              		.loc 1 523 0
 918 043a 1846     		mov	r0, r3
 919 043c 07F11407 		add	r7, r7, #20
 920 0440 BD46     		mov	sp, r7
 921 0442 80BC     		pop	{r7}
 922 0444 7047     		bx	lr
 923              		.cfi_endproc
 924              	.LFE125:
 926 0446 00BF     		.align	2
 927              		.global	ADC_VoltageRegulatorCmd
 928              		.thumb
 929              		.thumb_func
 931              	ADC_VoltageRegulatorCmd:
 932              	.LFB126:
 524:../src/stm32f30x_adc.c **** 
 525:../src/stm32f30x_adc.c **** /**
 526:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the specified ADC Voltage Regulator.
 527:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 528:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the ADCx Voltage Regulator.
 529:../src/stm32f30x_adc.c ****   *         This parameter can be: ENABLE or DISABLE.
 530:../src/stm32f30x_adc.c ****   * @retval None
 531:../src/stm32f30x_adc.c ****   */
 532:../src/stm32f30x_adc.c **** void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 533:../src/stm32f30x_adc.c **** {
 933              		.loc 1 533 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 8
 936              		@ frame_needed = 1, uses_anonymous_args = 0
 937              		@ link register save eliminated.
 938 0448 80B4     		push	{r7}
 939              	.LCFI45:
 940              		.cfi_def_cfa_offset 4
 941              		.cfi_offset 7, -4
 942 044a 83B0     		sub	sp, sp, #12
 943              	.LCFI46:
 944              		.cfi_def_cfa_offset 16
 945 044c 00AF     		add	r7, sp, #0
 946              	.LCFI47:
 947              		.cfi_def_cfa_register 7
 948 044e 7860     		str	r0, [r7, #4]
 949 0450 0B46     		mov	r3, r1
 950 0452 FB70     		strb	r3, [r7, #3]
 534:../src/stm32f30x_adc.c ****   /* Check the parameters */
 535:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 536:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 537:../src/stm32f30x_adc.c **** 
 538:../src/stm32f30x_adc.c ****   /* set the intermediate state before moving the ADC voltage regulator 
 539:../src/stm32f30x_adc.c ****   from enable state to disable state or from disable state to enable state */
 540:../src/stm32f30x_adc.c ****   ADCx->CR &= ~(ADC_CR_ADVREGEN);
 951              		.loc 1 540 0
 952 0454 7B68     		ldr	r3, [r7, #4]
 953 0456 9B68     		ldr	r3, [r3, #8]
 954 0458 23F04052 		bic	r2, r3, #805306368
 955 045c 7B68     		ldr	r3, [r7, #4]
 956 045e 9A60     		str	r2, [r3, #8]
 541:../src/stm32f30x_adc.c ****   
 542:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 957              		.loc 1 542 0
 958 0460 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 959 0462 002B     		cmp	r3, #0
 960 0464 06D0     		beq	.L36
 543:../src/stm32f30x_adc.c ****   {
 544:../src/stm32f30x_adc.c ****     /* Set the ADVREGEN bit 0 */
 545:../src/stm32f30x_adc.c ****     ADCx->CR |= ADC_CR_ADVREGEN_0;
 961              		.loc 1 545 0
 962 0466 7B68     		ldr	r3, [r7, #4]
 963 0468 9B68     		ldr	r3, [r3, #8]
 964 046a 43F08052 		orr	r2, r3, #268435456
 965 046e 7B68     		ldr	r3, [r7, #4]
 966 0470 9A60     		str	r2, [r3, #8]
 967 0472 05E0     		b	.L35
 968              	.L36:
 546:../src/stm32f30x_adc.c ****   }
 547:../src/stm32f30x_adc.c ****   else
 548:../src/stm32f30x_adc.c ****   {
 549:../src/stm32f30x_adc.c ****     /* Set the ADVREGEN bit 1 */
 550:../src/stm32f30x_adc.c ****     ADCx->CR |=ADC_CR_ADVREGEN_1;
 969              		.loc 1 550 0
 970 0474 7B68     		ldr	r3, [r7, #4]
 971 0476 9B68     		ldr	r3, [r3, #8]
 972 0478 43F00052 		orr	r2, r3, #536870912
 973 047c 7B68     		ldr	r3, [r7, #4]
 974 047e 9A60     		str	r2, [r3, #8]
 975              	.L35:
 551:../src/stm32f30x_adc.c ****   }
 552:../src/stm32f30x_adc.c **** }
 976              		.loc 1 552 0
 977 0480 07F10C07 		add	r7, r7, #12
 978 0484 BD46     		mov	sp, r7
 979 0486 80BC     		pop	{r7}
 980 0488 7047     		bx	lr
 981              		.cfi_endproc
 982              	.LFE126:
 984 048a 00BF     		.align	2
 985              		.global	ADC_SelectDifferentialMode
 986              		.thumb
 987              		.thumb_func
 989              	ADC_SelectDifferentialMode:
 990              	.LFB127:
 553:../src/stm32f30x_adc.c **** 
 554:../src/stm32f30x_adc.c **** /**
 555:../src/stm32f30x_adc.c ****   * @brief  Selectes the differential mode for a specific channel
 556:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 557:../src/stm32f30x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 558:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
 559:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 560:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 561:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 562:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 563:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 564:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 565:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 566:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 567:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 568:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 569:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 570:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 571:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 572:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 573:../src/stm32f30x_adc.c ****   * @note : Channel 15, 16 and 17 are fixed to single-ended inputs mode.
 574:../src/stm32f30x_adc.c ****   * @retval None
 575:../src/stm32f30x_adc.c ****   */
 576:../src/stm32f30x_adc.c **** void ADC_SelectDifferentialMode(ADC_TypeDef* ADCx, uint8_t ADC_Channel, FunctionalState NewState)
 577:../src/stm32f30x_adc.c **** {
 991              		.loc 1 577 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 8
 994              		@ frame_needed = 1, uses_anonymous_args = 0
 995              		@ link register save eliminated.
 996 048c 80B4     		push	{r7}
 997              	.LCFI48:
 998              		.cfi_def_cfa_offset 4
 999              		.cfi_offset 7, -4
 1000 048e 83B0     		sub	sp, sp, #12
 1001              	.LCFI49:
 1002              		.cfi_def_cfa_offset 16
 1003 0490 00AF     		add	r7, sp, #0
 1004              	.LCFI50:
 1005              		.cfi_def_cfa_register 7
 1006 0492 7860     		str	r0, [r7, #4]
 1007 0494 1346     		mov	r3, r2
 1008 0496 0A46     		mov	r2, r1
 1009 0498 FA70     		strb	r2, [r7, #3]
 1010 049a BB70     		strb	r3, [r7, #2]
 578:../src/stm32f30x_adc.c ****   /* Check the parameters */
 579:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
 580:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_DIFFCHANNEL(ADC_Channel)); 
 581:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 582:../src/stm32f30x_adc.c **** 
 583:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 1011              		.loc 1 583 0
 1012 049c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1013 049e 002B     		cmp	r3, #0
 1014 04a0 0CD0     		beq	.L39
 584:../src/stm32f30x_adc.c ****   {
 585:../src/stm32f30x_adc.c ****     /* Set the DIFSEL bit */
 586:../src/stm32f30x_adc.c ****    ADCx->DIFSEL |= (uint32_t)(1 << ADC_Channel );
 1015              		.loc 1 586 0
 1016 04a2 7B68     		ldr	r3, [r7, #4]
 1017 04a4 D3F8B020 		ldr	r2, [r3, #176]
 1018 04a8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1019 04aa 4FF00101 		mov	r1, #1
 1020 04ae 01FA03F3 		lsl	r3, r1, r3
 1021 04b2 1A43     		orrs	r2, r2, r3
 1022 04b4 7B68     		ldr	r3, [r7, #4]
 1023 04b6 C3F8B020 		str	r2, [r3, #176]
 1024 04ba 0DE0     		b	.L38
 1025              	.L39:
 587:../src/stm32f30x_adc.c ****   }
 588:../src/stm32f30x_adc.c ****   else
 589:../src/stm32f30x_adc.c ****   {
 590:../src/stm32f30x_adc.c ****     /* Reset the DIFSEL bit */
 591:../src/stm32f30x_adc.c ****    ADCx->DIFSEL &= ~(uint32_t)(1 << ADC_Channel);
 1026              		.loc 1 591 0
 1027 04bc 7B68     		ldr	r3, [r7, #4]
 1028 04be D3F8B020 		ldr	r2, [r3, #176]
 1029 04c2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1030 04c4 4FF00101 		mov	r1, #1
 1031 04c8 01FA03F3 		lsl	r3, r1, r3
 1032 04cc 6FEA0303 		mvn	r3, r3
 1033 04d0 1A40     		ands	r2, r2, r3
 1034 04d2 7B68     		ldr	r3, [r7, #4]
 1035 04d4 C3F8B020 		str	r2, [r3, #176]
 1036              	.L38:
 592:../src/stm32f30x_adc.c ****   }
 593:../src/stm32f30x_adc.c **** }
 1037              		.loc 1 593 0
 1038 04d8 07F10C07 		add	r7, r7, #12
 1039 04dc BD46     		mov	sp, r7
 1040 04de 80BC     		pop	{r7}
 1041 04e0 7047     		bx	lr
 1042              		.cfi_endproc
 1043              	.LFE127:
 1045 04e2 00BF     		.align	2
 1046              		.global	ADC_SelectQueueOfContextMode
 1047              		.thumb
 1048              		.thumb_func
 1050              	ADC_SelectQueueOfContextMode:
 1051              	.LFB128:
 594:../src/stm32f30x_adc.c **** 
 595:../src/stm32f30x_adc.c **** /**
 596:../src/stm32f30x_adc.c ****   * @brief  Selects the Queue Of Context Mode for injected channels.
 597:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 598:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the Queue Of Context Mode.
 599:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 600:../src/stm32f30x_adc.c ****   * @retval None
 601:../src/stm32f30x_adc.c ****   */
 602:../src/stm32f30x_adc.c **** void ADC_SelectQueueOfContextMode(ADC_TypeDef* ADCx, FunctionalState NewState)
 603:../src/stm32f30x_adc.c **** {
 1052              		.loc 1 603 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 8
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
 1057 04e4 80B4     		push	{r7}
 1058              	.LCFI51:
 1059              		.cfi_def_cfa_offset 4
 1060              		.cfi_offset 7, -4
 1061 04e6 83B0     		sub	sp, sp, #12
 1062              	.LCFI52:
 1063              		.cfi_def_cfa_offset 16
 1064 04e8 00AF     		add	r7, sp, #0
 1065              	.LCFI53:
 1066              		.cfi_def_cfa_register 7
 1067 04ea 7860     		str	r0, [r7, #4]
 1068 04ec 0B46     		mov	r3, r1
 1069 04ee FB70     		strb	r3, [r7, #3]
 604:../src/stm32f30x_adc.c ****   /* Check the parameters */
 605:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
 606:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 607:../src/stm32f30x_adc.c **** 
 608:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 1070              		.loc 1 608 0
 1071 04f0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1072 04f2 002B     		cmp	r3, #0
 1073 04f4 06D0     		beq	.L42
 609:../src/stm32f30x_adc.c ****   {
 610:../src/stm32f30x_adc.c ****     /* Set the JQM bit */
 611:../src/stm32f30x_adc.c ****     ADCx->CFGR |= (uint32_t)(ADC_CFGR_JQM );
 1074              		.loc 1 611 0
 1075 04f6 7B68     		ldr	r3, [r7, #4]
 1076 04f8 DB68     		ldr	r3, [r3, #12]
 1077 04fa 43F40012 		orr	r2, r3, #2097152
 1078 04fe 7B68     		ldr	r3, [r7, #4]
 1079 0500 DA60     		str	r2, [r3, #12]
 1080 0502 05E0     		b	.L41
 1081              	.L42:
 612:../src/stm32f30x_adc.c ****   }
 613:../src/stm32f30x_adc.c ****   else
 614:../src/stm32f30x_adc.c ****   {
 615:../src/stm32f30x_adc.c ****     /* Reset the JQM bit */
 616:../src/stm32f30x_adc.c ****     ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_JQM);
 1082              		.loc 1 616 0
 1083 0504 7B68     		ldr	r3, [r7, #4]
 1084 0506 DB68     		ldr	r3, [r3, #12]
 1085 0508 23F40012 		bic	r2, r3, #2097152
 1086 050c 7B68     		ldr	r3, [r7, #4]
 1087 050e DA60     		str	r2, [r3, #12]
 1088              	.L41:
 617:../src/stm32f30x_adc.c ****   }
 618:../src/stm32f30x_adc.c **** }
 1089              		.loc 1 618 0
 1090 0510 07F10C07 		add	r7, r7, #12
 1091 0514 BD46     		mov	sp, r7
 1092 0516 80BC     		pop	{r7}
 1093 0518 7047     		bx	lr
 1094              		.cfi_endproc
 1095              	.LFE128:
 1097 051a 00BF     		.align	2
 1098              		.global	ADC_AutoDelayCmd
 1099              		.thumb
 1100              		.thumb_func
 1102              	ADC_AutoDelayCmd:
 1103              	.LFB129:
 619:../src/stm32f30x_adc.c **** 
 620:../src/stm32f30x_adc.c **** /**
 621:../src/stm32f30x_adc.c ****   * @brief  Selects the ADC Delayed Conversion Mode.
 622:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 623:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the ADC Delayed Conversion Mode.
 624:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 625:../src/stm32f30x_adc.c ****   * @retval None
 626:../src/stm32f30x_adc.c ****   */
 627:../src/stm32f30x_adc.c **** void ADC_AutoDelayCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 628:../src/stm32f30x_adc.c **** {
 1104              		.loc 1 628 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 8
 1107              		@ frame_needed = 1, uses_anonymous_args = 0
 1108              		@ link register save eliminated.
 1109 051c 80B4     		push	{r7}
 1110              	.LCFI54:
 1111              		.cfi_def_cfa_offset 4
 1112              		.cfi_offset 7, -4
 1113 051e 83B0     		sub	sp, sp, #12
 1114              	.LCFI55:
 1115              		.cfi_def_cfa_offset 16
 1116 0520 00AF     		add	r7, sp, #0
 1117              	.LCFI56:
 1118              		.cfi_def_cfa_register 7
 1119 0522 7860     		str	r0, [r7, #4]
 1120 0524 0B46     		mov	r3, r1
 1121 0526 FB70     		strb	r3, [r7, #3]
 629:../src/stm32f30x_adc.c ****   /* Check the parameters */
 630:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
 631:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 632:../src/stm32f30x_adc.c **** 
 633:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 1122              		.loc 1 633 0
 1123 0528 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1124 052a 002B     		cmp	r3, #0
 1125 052c 06D0     		beq	.L45
 634:../src/stm32f30x_adc.c ****   {
 635:../src/stm32f30x_adc.c ****     /* Set the AUTDLY bit */
 636:../src/stm32f30x_adc.c ****     ADCx->CFGR |= (uint32_t)(ADC_CFGR_AUTDLY );
 1126              		.loc 1 636 0
 1127 052e 7B68     		ldr	r3, [r7, #4]
 1128 0530 DB68     		ldr	r3, [r3, #12]
 1129 0532 43F48042 		orr	r2, r3, #16384
 1130 0536 7B68     		ldr	r3, [r7, #4]
 1131 0538 DA60     		str	r2, [r3, #12]
 1132 053a 05E0     		b	.L44
 1133              	.L45:
 637:../src/stm32f30x_adc.c ****   }
 638:../src/stm32f30x_adc.c ****   else
 639:../src/stm32f30x_adc.c ****   {
 640:../src/stm32f30x_adc.c ****     /* Reset the AUTDLY bit */
 641:../src/stm32f30x_adc.c ****     ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_AUTDLY);
 1134              		.loc 1 641 0
 1135 053c 7B68     		ldr	r3, [r7, #4]
 1136 053e DB68     		ldr	r3, [r3, #12]
 1137 0540 23F48042 		bic	r2, r3, #16384
 1138 0544 7B68     		ldr	r3, [r7, #4]
 1139 0546 DA60     		str	r2, [r3, #12]
 1140              	.L44:
 642:../src/stm32f30x_adc.c ****   }
 643:../src/stm32f30x_adc.c **** }
 1141              		.loc 1 643 0
 1142 0548 07F10C07 		add	r7, r7, #12
 1143 054c BD46     		mov	sp, r7
 1144 054e 80BC     		pop	{r7}
 1145 0550 7047     		bx	lr
 1146              		.cfi_endproc
 1147              	.LFE129:
 1149 0552 00BF     		.align	2
 1150              		.global	ADC_AnalogWatchdogCmd
 1151              		.thumb
 1152              		.thumb_func
 1154              	ADC_AnalogWatchdogCmd:
 1155              	.LFB130:
 644:../src/stm32f30x_adc.c **** 
 645:../src/stm32f30x_adc.c **** /**
 646:../src/stm32f30x_adc.c ****   * @}
 647:../src/stm32f30x_adc.c ****   */
 648:../src/stm32f30x_adc.c **** 
 649:../src/stm32f30x_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 650:../src/stm32f30x_adc.c ****  *  @brief   Analog Watchdog configuration functions 
 651:../src/stm32f30x_adc.c ****  *
 652:../src/stm32f30x_adc.c **** @verbatim   
 653:../src/stm32f30x_adc.c ****  ===============================================================================
 654:../src/stm32f30x_adc.c ****                     ##### Analog Watchdog configuration functions #####
 655:../src/stm32f30x_adc.c ****  ===============================================================================  
 656:../src/stm32f30x_adc.c **** 
 657:../src/stm32f30x_adc.c ****   [..] This section provides functions allowing to configure the 3 Analog Watchdogs 
 658:../src/stm32f30x_adc.c ****        (AWDG1, AWDG2 and AWDG3) in the ADC.
 659:../src/stm32f30x_adc.c ****   
 660:../src/stm32f30x_adc.c ****   [..] A typical configuration Analog Watchdog is done following these steps :
 661:../src/stm32f30x_adc.c ****    (#) The ADC guarded channel(s) is (are) selected using the functions: 
 662:../src/stm32f30x_adc.c ****       (++) ADC_AnalogWatchdog1SingleChannelConfig().
 663:../src/stm32f30x_adc.c ****       (++) ADC_AnalogWatchdog2SingleChannelConfig().
 664:../src/stm32f30x_adc.c ****       (++) ADC_AnalogWatchdog3SingleChannelConfig().
 665:../src/stm32f30x_adc.c **** 
 666:../src/stm32f30x_adc.c ****    (#) The Analog watchdog lower and higher threshold are configured using the functions: 
 667:../src/stm32f30x_adc.c ****       (++) ADC_AnalogWatchdog1ThresholdsConfig().
 668:../src/stm32f30x_adc.c ****       (++) ADC_AnalogWatchdog2ThresholdsConfig().
 669:../src/stm32f30x_adc.c ****       (++) ADC_AnalogWatchdog3ThresholdsConfig().
 670:../src/stm32f30x_adc.c **** 
 671:../src/stm32f30x_adc.c ****    (#) The Analog watchdog is enabled and configured to enable the check, on one
 672:../src/stm32f30x_adc.c ****       or more channels, using the function:
 673:../src/stm32f30x_adc.c ****       (++) ADC_AnalogWatchdogCmd().
 674:../src/stm32f30x_adc.c **** 
 675:../src/stm32f30x_adc.c **** @endverbatim
 676:../src/stm32f30x_adc.c ****   * @{
 677:../src/stm32f30x_adc.c ****   */
 678:../src/stm32f30x_adc.c **** 
 679:../src/stm32f30x_adc.c **** /**
 680:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular
 681:../src/stm32f30x_adc.c ****   *         or injected channels
 682:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 683:../src/stm32f30x_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 684:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
 685:../src/stm32f30x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 686:../src/stm32f30x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected channel
 687:../src/stm32f30x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular or inje
 688:../src/stm32f30x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on  all regular channel
 689:../src/stm32f30x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on  all injected channel
 690:../src/stm32f30x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected c
 691:../src/stm32f30x_adc.c ****   *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 692:../src/stm32f30x_adc.c ****   * @retval None	  
 693:../src/stm32f30x_adc.c ****   */
 694:../src/stm32f30x_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 695:../src/stm32f30x_adc.c **** {
 1156              		.loc 1 695 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 16
 1159              		@ frame_needed = 1, uses_anonymous_args = 0
 1160              		@ link register save eliminated.
 1161 0554 80B4     		push	{r7}
 1162              	.LCFI57:
 1163              		.cfi_def_cfa_offset 4
 1164              		.cfi_offset 7, -4
 1165 0556 85B0     		sub	sp, sp, #20
 1166              	.LCFI58:
 1167              		.cfi_def_cfa_offset 24
 1168 0558 00AF     		add	r7, sp, #0
 1169              	.LCFI59:
 1170              		.cfi_def_cfa_register 7
 1171 055a 7860     		str	r0, [r7, #4]
 1172 055c 3960     		str	r1, [r7, #0]
 696:../src/stm32f30x_adc.c ****   uint32_t tmpreg = 0;
 1173              		.loc 1 696 0
 1174 055e 4FF00003 		mov	r3, #0
 1175 0562 FB60     		str	r3, [r7, #12]
 697:../src/stm32f30x_adc.c ****   /* Check the parameters */
 698:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 699:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 700:../src/stm32f30x_adc.c ****   /* Get the old register value */
 701:../src/stm32f30x_adc.c ****   tmpreg = ADCx->CFGR;
 1176              		.loc 1 701 0
 1177 0564 7B68     		ldr	r3, [r7, #4]
 1178 0566 DB68     		ldr	r3, [r3, #12]
 1179 0568 FB60     		str	r3, [r7, #12]
 702:../src/stm32f30x_adc.c ****   /* Clear AWDEN, AWDENJ and AWDSGL bits */
 703:../src/stm32f30x_adc.c ****   tmpreg &= ~(uint32_t)(ADC_CFGR_AWD1SGL|ADC_CFGR_AWD1EN|ADC_CFGR_JAWD1EN);
 1180              		.loc 1 703 0
 1181 056a FB68     		ldr	r3, [r7, #12]
 1182 056c 23F0E073 		bic	r3, r3, #29360128
 1183 0570 FB60     		str	r3, [r7, #12]
 704:../src/stm32f30x_adc.c ****   /* Set the analog watchdog enable mode */
 705:../src/stm32f30x_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 1184              		.loc 1 705 0
 1185 0572 FA68     		ldr	r2, [r7, #12]
 1186 0574 3B68     		ldr	r3, [r7, #0]
 1187 0576 1343     		orrs	r3, r3, r2
 1188 0578 FB60     		str	r3, [r7, #12]
 706:../src/stm32f30x_adc.c ****   /* Store the new register value */
 707:../src/stm32f30x_adc.c ****   ADCx->CFGR = tmpreg;
 1189              		.loc 1 707 0
 1190 057a 7B68     		ldr	r3, [r7, #4]
 1191 057c FA68     		ldr	r2, [r7, #12]
 1192 057e DA60     		str	r2, [r3, #12]
 708:../src/stm32f30x_adc.c **** }
 1193              		.loc 1 708 0
 1194 0580 07F11407 		add	r7, r7, #20
 1195 0584 BD46     		mov	sp, r7
 1196 0586 80BC     		pop	{r7}
 1197 0588 7047     		bx	lr
 1198              		.cfi_endproc
 1199              	.LFE130:
 1201 058a 00BF     		.align	2
 1202              		.global	ADC_AnalogWatchdog1ThresholdsConfig
 1203              		.thumb
 1204              		.thumb_func
 1206              	ADC_AnalogWatchdog1ThresholdsConfig:
 1207              	.LFB131:
 709:../src/stm32f30x_adc.c **** 
 710:../src/stm32f30x_adc.c **** /**
 711:../src/stm32f30x_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog1.
 712:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 713:../src/stm32f30x_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 714:../src/stm32f30x_adc.c ****   *   This parameter must be a 12bit value.
 715:../src/stm32f30x_adc.c ****   * @param  LowThreshold: the ADC analog watchdog Low threshold value.
 716:../src/stm32f30x_adc.c ****   *   This parameter must be a 12bit value.
 717:../src/stm32f30x_adc.c ****   * @retval None
 718:../src/stm32f30x_adc.c ****   */
 719:../src/stm32f30x_adc.c **** void ADC_AnalogWatchdog1ThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 720:../src/stm32f30x_adc.c ****                                          uint16_t LowThreshold)
 721:../src/stm32f30x_adc.c **** {
 1208              		.loc 1 721 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 8
 1211              		@ frame_needed = 1, uses_anonymous_args = 0
 1212              		@ link register save eliminated.
 1213 058c 80B4     		push	{r7}
 1214              	.LCFI60:
 1215              		.cfi_def_cfa_offset 4
 1216              		.cfi_offset 7, -4
 1217 058e 83B0     		sub	sp, sp, #12
 1218              	.LCFI61:
 1219              		.cfi_def_cfa_offset 16
 1220 0590 00AF     		add	r7, sp, #0
 1221              	.LCFI62:
 1222              		.cfi_def_cfa_register 7
 1223 0592 7860     		str	r0, [r7, #4]
 1224 0594 1346     		mov	r3, r2
 1225 0596 0A46     		mov	r2, r1	@ movhi
 1226 0598 7A80     		strh	r2, [r7, #2]	@ movhi
 1227 059a 3B80     		strh	r3, [r7, #0]	@ movhi
 722:../src/stm32f30x_adc.c ****   /* Check the parameters */
 723:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 724:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 725:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 726:../src/stm32f30x_adc.c ****   /* Set the ADCx high threshold */
 727:../src/stm32f30x_adc.c ****   ADCx->TR1 &= ~(uint32_t)ADC_TR1_HT1;
 1228              		.loc 1 727 0
 1229 059c 7B68     		ldr	r3, [r7, #4]
 1230 059e 1B6A     		ldr	r3, [r3, #32]
 1231 05a0 23F07F63 		bic	r3, r3, #267386880
 1232 05a4 23F47023 		bic	r3, r3, #983040
 1233 05a8 7A68     		ldr	r2, [r7, #4]
 1234 05aa 1362     		str	r3, [r2, #32]
 728:../src/stm32f30x_adc.c ****   ADCx->TR1 |= (uint32_t)((uint32_t)HighThreshold << 16);
 1235              		.loc 1 728 0
 1236 05ac 7B68     		ldr	r3, [r7, #4]
 1237 05ae 1A6A     		ldr	r2, [r3, #32]
 1238 05b0 7B88     		ldrh	r3, [r7, #2]
 1239 05b2 4FEA0343 		lsl	r3, r3, #16
 1240 05b6 1A43     		orrs	r2, r2, r3
 1241 05b8 7B68     		ldr	r3, [r7, #4]
 1242 05ba 1A62     		str	r2, [r3, #32]
 729:../src/stm32f30x_adc.c **** 
 730:../src/stm32f30x_adc.c ****   /* Set the ADCx low threshold */
 731:../src/stm32f30x_adc.c ****   ADCx->TR1 &= ~(uint32_t)ADC_TR1_LT1;
 1243              		.loc 1 731 0
 1244 05bc 7B68     		ldr	r3, [r7, #4]
 1245 05be 1B6A     		ldr	r3, [r3, #32]
 1246 05c0 23F47F63 		bic	r3, r3, #4080
 1247 05c4 23F00F03 		bic	r3, r3, #15
 1248 05c8 7A68     		ldr	r2, [r7, #4]
 1249 05ca 1362     		str	r3, [r2, #32]
 732:../src/stm32f30x_adc.c ****   ADCx->TR1 |= LowThreshold;
 1250              		.loc 1 732 0
 1251 05cc 7B68     		ldr	r3, [r7, #4]
 1252 05ce 1A6A     		ldr	r2, [r3, #32]
 1253 05d0 3B88     		ldrh	r3, [r7, #0]
 1254 05d2 1A43     		orrs	r2, r2, r3
 1255 05d4 7B68     		ldr	r3, [r7, #4]
 1256 05d6 1A62     		str	r2, [r3, #32]
 733:../src/stm32f30x_adc.c **** }
 1257              		.loc 1 733 0
 1258 05d8 07F10C07 		add	r7, r7, #12
 1259 05dc BD46     		mov	sp, r7
 1260 05de 80BC     		pop	{r7}
 1261 05e0 7047     		bx	lr
 1262              		.cfi_endproc
 1263              	.LFE131:
 1265 05e2 00BF     		.align	2
 1266              		.global	ADC_AnalogWatchdog2ThresholdsConfig
 1267              		.thumb
 1268              		.thumb_func
 1270              	ADC_AnalogWatchdog2ThresholdsConfig:
 1271              	.LFB132:
 734:../src/stm32f30x_adc.c **** 
 735:../src/stm32f30x_adc.c **** /**
 736:../src/stm32f30x_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog2.
 737:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 738:../src/stm32f30x_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 739:../src/stm32f30x_adc.c ****   *   This parameter must be a 8bit value.
 740:../src/stm32f30x_adc.c ****   * @param  LowThreshold: the ADC analog watchdog Low threshold value.
 741:../src/stm32f30x_adc.c ****   *   This parameter must be a 8bit value.
 742:../src/stm32f30x_adc.c ****   * @retval None
 743:../src/stm32f30x_adc.c ****   */
 744:../src/stm32f30x_adc.c **** void ADC_AnalogWatchdog2ThresholdsConfig(ADC_TypeDef* ADCx, uint8_t HighThreshold,
 745:../src/stm32f30x_adc.c ****                                          uint8_t LowThreshold)
 746:../src/stm32f30x_adc.c **** {
 1272              		.loc 1 746 0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 8
 1275              		@ frame_needed = 1, uses_anonymous_args = 0
 1276              		@ link register save eliminated.
 1277 05e4 80B4     		push	{r7}
 1278              	.LCFI63:
 1279              		.cfi_def_cfa_offset 4
 1280              		.cfi_offset 7, -4
 1281 05e6 83B0     		sub	sp, sp, #12
 1282              	.LCFI64:
 1283              		.cfi_def_cfa_offset 16
 1284 05e8 00AF     		add	r7, sp, #0
 1285              	.LCFI65:
 1286              		.cfi_def_cfa_register 7
 1287 05ea 7860     		str	r0, [r7, #4]
 1288 05ec 1346     		mov	r3, r2
 1289 05ee 0A46     		mov	r2, r1
 1290 05f0 FA70     		strb	r2, [r7, #3]
 1291 05f2 BB70     		strb	r3, [r7, #2]
 747:../src/stm32f30x_adc.c ****   /* Check the parameters */
 748:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 749:../src/stm32f30x_adc.c ****   
 750:../src/stm32f30x_adc.c ****   /* Set the ADCx high threshold */
 751:../src/stm32f30x_adc.c ****   ADCx->TR2 &= ~(uint32_t)ADC_TR2_HT2;
 1292              		.loc 1 751 0
 1293 05f4 7B68     		ldr	r3, [r7, #4]
 1294 05f6 5B6A     		ldr	r3, [r3, #36]
 1295 05f8 23F47F02 		bic	r2, r3, #16711680
 1296 05fc 7B68     		ldr	r3, [r7, #4]
 1297 05fe 5A62     		str	r2, [r3, #36]
 752:../src/stm32f30x_adc.c ****   ADCx->TR2 |= (uint32_t)((uint32_t)HighThreshold << 16);
 1298              		.loc 1 752 0
 1299 0600 7B68     		ldr	r3, [r7, #4]
 1300 0602 5A6A     		ldr	r2, [r3, #36]
 1301 0604 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1302 0606 4FEA0343 		lsl	r3, r3, #16
 1303 060a 1A43     		orrs	r2, r2, r3
 1304 060c 7B68     		ldr	r3, [r7, #4]
 1305 060e 5A62     		str	r2, [r3, #36]
 753:../src/stm32f30x_adc.c **** 
 754:../src/stm32f30x_adc.c ****   /* Set the ADCx low threshold */
 755:../src/stm32f30x_adc.c ****   ADCx->TR2 &= ~(uint32_t)ADC_TR2_LT2;
 1306              		.loc 1 755 0
 1307 0610 7B68     		ldr	r3, [r7, #4]
 1308 0612 5B6A     		ldr	r3, [r3, #36]
 1309 0614 23F0FF02 		bic	r2, r3, #255
 1310 0618 7B68     		ldr	r3, [r7, #4]
 1311 061a 5A62     		str	r2, [r3, #36]
 756:../src/stm32f30x_adc.c ****   ADCx->TR2 |= LowThreshold;
 1312              		.loc 1 756 0
 1313 061c 7B68     		ldr	r3, [r7, #4]
 1314 061e 5A6A     		ldr	r2, [r3, #36]
 1315 0620 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1316 0622 1A43     		orrs	r2, r2, r3
 1317 0624 7B68     		ldr	r3, [r7, #4]
 1318 0626 5A62     		str	r2, [r3, #36]
 757:../src/stm32f30x_adc.c **** }
 1319              		.loc 1 757 0
 1320 0628 07F10C07 		add	r7, r7, #12
 1321 062c BD46     		mov	sp, r7
 1322 062e 80BC     		pop	{r7}
 1323 0630 7047     		bx	lr
 1324              		.cfi_endproc
 1325              	.LFE132:
 1327 0632 00BF     		.align	2
 1328              		.global	ADC_AnalogWatchdog3ThresholdsConfig
 1329              		.thumb
 1330              		.thumb_func
 1332              	ADC_AnalogWatchdog3ThresholdsConfig:
 1333              	.LFB133:
 758:../src/stm32f30x_adc.c **** 
 759:../src/stm32f30x_adc.c **** /**
 760:../src/stm32f30x_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog3.
 761:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 762:../src/stm32f30x_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 763:../src/stm32f30x_adc.c ****   *   This parameter must be a 8bit value.
 764:../src/stm32f30x_adc.c ****   * @param  LowThreshold: the ADC analog watchdog Low threshold value.
 765:../src/stm32f30x_adc.c ****   *   This parameter must be a 8bit value.
 766:../src/stm32f30x_adc.c ****   * @retval None
 767:../src/stm32f30x_adc.c ****   */
 768:../src/stm32f30x_adc.c **** void ADC_AnalogWatchdog3ThresholdsConfig(ADC_TypeDef* ADCx, uint8_t HighThreshold,
 769:../src/stm32f30x_adc.c ****                                          uint8_t LowThreshold)
 770:../src/stm32f30x_adc.c **** {
 1334              		.loc 1 770 0
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 8
 1337              		@ frame_needed = 1, uses_anonymous_args = 0
 1338              		@ link register save eliminated.
 1339 0634 80B4     		push	{r7}
 1340              	.LCFI66:
 1341              		.cfi_def_cfa_offset 4
 1342              		.cfi_offset 7, -4
 1343 0636 83B0     		sub	sp, sp, #12
 1344              	.LCFI67:
 1345              		.cfi_def_cfa_offset 16
 1346 0638 00AF     		add	r7, sp, #0
 1347              	.LCFI68:
 1348              		.cfi_def_cfa_register 7
 1349 063a 7860     		str	r0, [r7, #4]
 1350 063c 1346     		mov	r3, r2
 1351 063e 0A46     		mov	r2, r1
 1352 0640 FA70     		strb	r2, [r7, #3]
 1353 0642 BB70     		strb	r3, [r7, #2]
 771:../src/stm32f30x_adc.c ****   /* Check the parameters */
 772:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 773:../src/stm32f30x_adc.c **** 
 774:../src/stm32f30x_adc.c ****   /* Set the ADCx high threshold */
 775:../src/stm32f30x_adc.c ****   ADCx->TR3 &= ~(uint32_t)ADC_TR3_HT3;
 1354              		.loc 1 775 0
 1355 0644 7B68     		ldr	r3, [r7, #4]
 1356 0646 9B6A     		ldr	r3, [r3, #40]
 1357 0648 23F47F02 		bic	r2, r3, #16711680
 1358 064c 7B68     		ldr	r3, [r7, #4]
 1359 064e 9A62     		str	r2, [r3, #40]
 776:../src/stm32f30x_adc.c ****   ADCx->TR3 |= (uint32_t)((uint32_t)HighThreshold << 16);
 1360              		.loc 1 776 0
 1361 0650 7B68     		ldr	r3, [r7, #4]
 1362 0652 9A6A     		ldr	r2, [r3, #40]
 1363 0654 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1364 0656 4FEA0343 		lsl	r3, r3, #16
 1365 065a 1A43     		orrs	r2, r2, r3
 1366 065c 7B68     		ldr	r3, [r7, #4]
 1367 065e 9A62     		str	r2, [r3, #40]
 777:../src/stm32f30x_adc.c **** 
 778:../src/stm32f30x_adc.c ****   /* Set the ADCx low threshold */
 779:../src/stm32f30x_adc.c ****   ADCx->TR3 &= ~(uint32_t)ADC_TR3_LT3;
 1368              		.loc 1 779 0
 1369 0660 7B68     		ldr	r3, [r7, #4]
 1370 0662 9B6A     		ldr	r3, [r3, #40]
 1371 0664 23F0FF02 		bic	r2, r3, #255
 1372 0668 7B68     		ldr	r3, [r7, #4]
 1373 066a 9A62     		str	r2, [r3, #40]
 780:../src/stm32f30x_adc.c ****   ADCx->TR3 |= LowThreshold;
 1374              		.loc 1 780 0
 1375 066c 7B68     		ldr	r3, [r7, #4]
 1376 066e 9A6A     		ldr	r2, [r3, #40]
 1377 0670 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1378 0672 1A43     		orrs	r2, r2, r3
 1379 0674 7B68     		ldr	r3, [r7, #4]
 1380 0676 9A62     		str	r2, [r3, #40]
 781:../src/stm32f30x_adc.c **** }
 1381              		.loc 1 781 0
 1382 0678 07F10C07 		add	r7, r7, #12
 1383 067c BD46     		mov	sp, r7
 1384 067e 80BC     		pop	{r7}
 1385 0680 7047     		bx	lr
 1386              		.cfi_endproc
 1387              	.LFE133:
 1389 0682 00BF     		.align	2
 1390              		.global	ADC_AnalogWatchdog1SingleChannelConfig
 1391              		.thumb
 1392              		.thumb_func
 1394              	ADC_AnalogWatchdog1SingleChannelConfig:
 1395              	.LFB134:
 782:../src/stm32f30x_adc.c **** 
 783:../src/stm32f30x_adc.c **** /**
 784:../src/stm32f30x_adc.c ****   * @brief  Configures the analog watchdog 2 guarded single channel
 785:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 786:../src/stm32f30x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 787:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
 788:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 789:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 790:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 791:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 792:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 793:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 794:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 795:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 796:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 797:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 798:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 799:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 800:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 801:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 802:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 803:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 804:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 805:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_18: ADC Channel18 selected
 806:../src/stm32f30x_adc.c ****   * @retval None
 807:../src/stm32f30x_adc.c ****   */
 808:../src/stm32f30x_adc.c **** void ADC_AnalogWatchdog1SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 809:../src/stm32f30x_adc.c **** {
 1396              		.loc 1 809 0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 16
 1399              		@ frame_needed = 1, uses_anonymous_args = 0
 1400              		@ link register save eliminated.
 1401 0684 80B4     		push	{r7}
 1402              	.LCFI69:
 1403              		.cfi_def_cfa_offset 4
 1404              		.cfi_offset 7, -4
 1405 0686 85B0     		sub	sp, sp, #20
 1406              	.LCFI70:
 1407              		.cfi_def_cfa_offset 24
 1408 0688 00AF     		add	r7, sp, #0
 1409              	.LCFI71:
 1410              		.cfi_def_cfa_register 7
 1411 068a 7860     		str	r0, [r7, #4]
 1412 068c 0B46     		mov	r3, r1
 1413 068e FB70     		strb	r3, [r7, #3]
 810:../src/stm32f30x_adc.c ****   uint32_t tmpreg = 0;
 1414              		.loc 1 810 0
 1415 0690 4FF00003 		mov	r3, #0
 1416 0694 FB60     		str	r3, [r7, #12]
 811:../src/stm32f30x_adc.c ****   /* Check the parameters */
 812:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 813:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 814:../src/stm32f30x_adc.c ****   /* Get the old register value */
 815:../src/stm32f30x_adc.c ****   tmpreg = ADCx->CFGR;
 1417              		.loc 1 815 0
 1418 0696 7B68     		ldr	r3, [r7, #4]
 1419 0698 DB68     		ldr	r3, [r3, #12]
 1420 069a FB60     		str	r3, [r7, #12]
 816:../src/stm32f30x_adc.c ****   /* Clear the Analog watchdog channel select bits */
 817:../src/stm32f30x_adc.c ****   tmpreg &= ~(uint32_t)ADC_CFGR_AWD1CH;
 1421              		.loc 1 817 0
 1422 069c FB68     		ldr	r3, [r7, #12]
 1423 069e 23F0F843 		bic	r3, r3, #2080374784
 1424 06a2 FB60     		str	r3, [r7, #12]
 818:../src/stm32f30x_adc.c ****   /* Set the Analog watchdog channel */
 819:../src/stm32f30x_adc.c ****   tmpreg |= (uint32_t)((uint32_t)ADC_Channel << 26);
 1425              		.loc 1 819 0
 1426 06a4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1427 06a6 4FEA8363 		lsl	r3, r3, #26
 1428 06aa FA68     		ldr	r2, [r7, #12]
 1429 06ac 1343     		orrs	r3, r3, r2
 1430 06ae FB60     		str	r3, [r7, #12]
 820:../src/stm32f30x_adc.c ****   /* Store the new register value */
 821:../src/stm32f30x_adc.c ****   ADCx->CFGR = tmpreg;
 1431              		.loc 1 821 0
 1432 06b0 7B68     		ldr	r3, [r7, #4]
 1433 06b2 FA68     		ldr	r2, [r7, #12]
 1434 06b4 DA60     		str	r2, [r3, #12]
 822:../src/stm32f30x_adc.c **** }
 1435              		.loc 1 822 0
 1436 06b6 07F11407 		add	r7, r7, #20
 1437 06ba BD46     		mov	sp, r7
 1438 06bc 80BC     		pop	{r7}
 1439 06be 7047     		bx	lr
 1440              		.cfi_endproc
 1441              	.LFE134:
 1443              		.align	2
 1444              		.global	ADC_AnalogWatchdog2SingleChannelConfig
 1445              		.thumb
 1446              		.thumb_func
 1448              	ADC_AnalogWatchdog2SingleChannelConfig:
 1449              	.LFB135:
 823:../src/stm32f30x_adc.c **** 
 824:../src/stm32f30x_adc.c **** /**
 825:../src/stm32f30x_adc.c ****   * @brief  Configures the analog watchdog 2 guarded single channel
 826:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 827:../src/stm32f30x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 828:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
 829:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 830:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 831:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 832:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 833:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 834:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 835:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 836:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 837:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 838:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 839:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 840:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 841:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 842:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 843:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 844:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 845:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 846:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_18: ADC Channel18 selected
 847:../src/stm32f30x_adc.c ****   * @retval None
 848:../src/stm32f30x_adc.c ****   */
 849:../src/stm32f30x_adc.c **** void ADC_AnalogWatchdog2SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 850:../src/stm32f30x_adc.c **** {
 1450              		.loc 1 850 0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 16
 1453              		@ frame_needed = 1, uses_anonymous_args = 0
 1454              		@ link register save eliminated.
 1455 06c0 80B4     		push	{r7}
 1456              	.LCFI72:
 1457              		.cfi_def_cfa_offset 4
 1458              		.cfi_offset 7, -4
 1459 06c2 85B0     		sub	sp, sp, #20
 1460              	.LCFI73:
 1461              		.cfi_def_cfa_offset 24
 1462 06c4 00AF     		add	r7, sp, #0
 1463              	.LCFI74:
 1464              		.cfi_def_cfa_register 7
 1465 06c6 7860     		str	r0, [r7, #4]
 1466 06c8 0B46     		mov	r3, r1
 1467 06ca FB70     		strb	r3, [r7, #3]
 851:../src/stm32f30x_adc.c ****   uint32_t tmpreg = 0;
 1468              		.loc 1 851 0
 1469 06cc 4FF00003 		mov	r3, #0
 1470 06d0 FB60     		str	r3, [r7, #12]
 852:../src/stm32f30x_adc.c ****   /* Check the parameters */
 853:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 854:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 855:../src/stm32f30x_adc.c ****   /* Get the old register value */
 856:../src/stm32f30x_adc.c ****   tmpreg = ADCx->AWD2CR;
 1471              		.loc 1 856 0
 1472 06d2 7B68     		ldr	r3, [r7, #4]
 1473 06d4 D3F8A030 		ldr	r3, [r3, #160]
 1474 06d8 FB60     		str	r3, [r7, #12]
 857:../src/stm32f30x_adc.c ****   /* Clear the Analog watchdog channel select bits */
 858:../src/stm32f30x_adc.c ****   tmpreg &= ~(uint32_t)ADC_AWD2CR_AWD2CH;
 1475              		.loc 1 858 0
 1476 06da FA68     		ldr	r2, [r7, #12]
 1477 06dc 4FF00103 		mov	r3, #1
 1478 06e0 CFF6F873 		movt	r3, 65528
 1479 06e4 1340     		ands	r3, r3, r2
 1480 06e6 FB60     		str	r3, [r7, #12]
 859:../src/stm32f30x_adc.c ****   /* Set the Analog watchdog channel */
 860:../src/stm32f30x_adc.c ****   tmpreg |= (uint32_t)1 << (ADC_Channel);
 1481              		.loc 1 860 0
 1482 06e8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1483 06ea 4FF00102 		mov	r2, #1
 1484 06ee 02FA03F3 		lsl	r3, r2, r3
 1485 06f2 FA68     		ldr	r2, [r7, #12]
 1486 06f4 1343     		orrs	r3, r3, r2
 1487 06f6 FB60     		str	r3, [r7, #12]
 861:../src/stm32f30x_adc.c ****   /* Store the new register value */
 862:../src/stm32f30x_adc.c ****   ADCx->AWD2CR |= tmpreg;
 1488              		.loc 1 862 0
 1489 06f8 7B68     		ldr	r3, [r7, #4]
 1490 06fa D3F8A020 		ldr	r2, [r3, #160]
 1491 06fe FB68     		ldr	r3, [r7, #12]
 1492 0700 1A43     		orrs	r2, r2, r3
 1493 0702 7B68     		ldr	r3, [r7, #4]
 1494 0704 C3F8A020 		str	r2, [r3, #160]
 863:../src/stm32f30x_adc.c **** }
 1495              		.loc 1 863 0
 1496 0708 07F11407 		add	r7, r7, #20
 1497 070c BD46     		mov	sp, r7
 1498 070e 80BC     		pop	{r7}
 1499 0710 7047     		bx	lr
 1500              		.cfi_endproc
 1501              	.LFE135:
 1503 0712 00BF     		.align	2
 1504              		.global	ADC_AnalogWatchdog3SingleChannelConfig
 1505              		.thumb
 1506              		.thumb_func
 1508              	ADC_AnalogWatchdog3SingleChannelConfig:
 1509              	.LFB136:
 864:../src/stm32f30x_adc.c **** 
 865:../src/stm32f30x_adc.c **** /**
 866:../src/stm32f30x_adc.c ****   * @brief  Configures the analog watchdog 3 guarded single channel
 867:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
 868:../src/stm32f30x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 869:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
 870:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 871:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 872:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 873:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 874:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 875:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 876:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 877:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 878:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 879:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 880:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 881:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 882:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 883:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 884:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 885:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 886:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 887:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_18: ADC Channel18 selected
 888:../src/stm32f30x_adc.c ****   * @retval None
 889:../src/stm32f30x_adc.c ****   */
 890:../src/stm32f30x_adc.c **** void ADC_AnalogWatchdog3SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 891:../src/stm32f30x_adc.c **** {
 1510              		.loc 1 891 0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 16
 1513              		@ frame_needed = 1, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
 1515 0714 80B4     		push	{r7}
 1516              	.LCFI75:
 1517              		.cfi_def_cfa_offset 4
 1518              		.cfi_offset 7, -4
 1519 0716 85B0     		sub	sp, sp, #20
 1520              	.LCFI76:
 1521              		.cfi_def_cfa_offset 24
 1522 0718 00AF     		add	r7, sp, #0
 1523              	.LCFI77:
 1524              		.cfi_def_cfa_register 7
 1525 071a 7860     		str	r0, [r7, #4]
 1526 071c 0B46     		mov	r3, r1
 1527 071e FB70     		strb	r3, [r7, #3]
 892:../src/stm32f30x_adc.c ****   uint32_t tmpreg = 0;
 1528              		.loc 1 892 0
 1529 0720 4FF00003 		mov	r3, #0
 1530 0724 FB60     		str	r3, [r7, #12]
 893:../src/stm32f30x_adc.c ****   /* Check the parameters */
 894:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 895:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 896:../src/stm32f30x_adc.c ****   /* Get the old register value */
 897:../src/stm32f30x_adc.c ****   tmpreg = ADCx->AWD3CR;
 1531              		.loc 1 897 0
 1532 0726 7B68     		ldr	r3, [r7, #4]
 1533 0728 D3F8A430 		ldr	r3, [r3, #164]
 1534 072c FB60     		str	r3, [r7, #12]
 898:../src/stm32f30x_adc.c ****   /* Clear the Analog watchdog channel select bits */
 899:../src/stm32f30x_adc.c ****   tmpreg &= ~(uint32_t)ADC_AWD3CR_AWD3CH;
 1535              		.loc 1 899 0
 1536 072e FA68     		ldr	r2, [r7, #12]
 1537 0730 4FF00103 		mov	r3, #1
 1538 0734 CFF6F873 		movt	r3, 65528
 1539 0738 1340     		ands	r3, r3, r2
 1540 073a FB60     		str	r3, [r7, #12]
 900:../src/stm32f30x_adc.c ****   /* Set the Analog watchdog channel */
 901:../src/stm32f30x_adc.c ****   tmpreg |= (uint32_t)1 << (ADC_Channel);
 1541              		.loc 1 901 0
 1542 073c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1543 073e 4FF00102 		mov	r2, #1
 1544 0742 02FA03F3 		lsl	r3, r2, r3
 1545 0746 FA68     		ldr	r2, [r7, #12]
 1546 0748 1343     		orrs	r3, r3, r2
 1547 074a FB60     		str	r3, [r7, #12]
 902:../src/stm32f30x_adc.c ****   /* Store the new register value */
 903:../src/stm32f30x_adc.c ****   ADCx->AWD3CR |= tmpreg;
 1548              		.loc 1 903 0
 1549 074c 7B68     		ldr	r3, [r7, #4]
 1550 074e D3F8A420 		ldr	r2, [r3, #164]
 1551 0752 FB68     		ldr	r3, [r7, #12]
 1552 0754 1A43     		orrs	r2, r2, r3
 1553 0756 7B68     		ldr	r3, [r7, #4]
 1554 0758 C3F8A420 		str	r2, [r3, #164]
 904:../src/stm32f30x_adc.c **** }
 1555              		.loc 1 904 0
 1556 075c 07F11407 		add	r7, r7, #20
 1557 0760 BD46     		mov	sp, r7
 1558 0762 80BC     		pop	{r7}
 1559 0764 7047     		bx	lr
 1560              		.cfi_endproc
 1561              	.LFE136:
 1563 0766 00BF     		.align	2
 1564              		.global	ADC_TempSensorCmd
 1565              		.thumb
 1566              		.thumb_func
 1568              	ADC_TempSensorCmd:
 1569              	.LFB137:
 905:../src/stm32f30x_adc.c **** 
 906:../src/stm32f30x_adc.c **** /**
 907:../src/stm32f30x_adc.c ****   * @}
 908:../src/stm32f30x_adc.c ****   */
 909:../src/stm32f30x_adc.c **** 
 910:../src/stm32f30x_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor - Vrefint (Internal Reference Voltage) and VBAT managem
 911:../src/stm32f30x_adc.c ****  *  @brief   Vbat, Temperature Sensor & Vrefint (Internal Reference Voltage) management function 
 912:../src/stm32f30x_adc.c ****  *
 913:../src/stm32f30x_adc.c **** @verbatim   
 914:../src/stm32f30x_adc.c ****  ==================================================================================================
 915:../src/stm32f30x_adc.c ****   ##### Temperature Sensor - Vrefint (Internal Reference Voltage) and VBAT management functions ###
 916:../src/stm32f30x_adc.c ****  ==================================================================================================
 917:../src/stm32f30x_adc.c **** 
 918:../src/stm32f30x_adc.c ****   [..] This section provides a function allowing to enable/ disable the internal 
 919:../src/stm32f30x_adc.c ****   connections between the ADC and the Vbat/2, Temperature Sensor and the Vrefint source.
 920:../src/stm32f30x_adc.c **** 
 921:../src/stm32f30x_adc.c ****   [..] A typical configuration to get the Temperature sensor and Vrefint channels 
 922:../src/stm32f30x_adc.c ****   voltages is done following these steps :
 923:../src/stm32f30x_adc.c ****    (#) Enable the internal connection of Vbat/2, Temperature sensor and Vrefint sources 
 924:../src/stm32f30x_adc.c ****        with the ADC channels using:
 925:../src/stm32f30x_adc.c ****       (++) ADC_TempSensorCmd()  
 926:../src/stm32f30x_adc.c ****       (++) ADC_VrefintCmd() 
 927:../src/stm32f30x_adc.c ****       (++) ADC_VbatCmd()  
 928:../src/stm32f30x_adc.c **** 
 929:../src/stm32f30x_adc.c ****    (#) select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint and/or ADC_Channel_Vbat using 
 930:../src/stm32f30x_adc.c ****       (++) ADC_RegularChannelConfig() or  
 931:../src/stm32f30x_adc.c ****       (++) ADC_InjectedInit() functions 
 932:../src/stm32f30x_adc.c **** 
 933:../src/stm32f30x_adc.c ****    (#) Get the voltage values, using:
 934:../src/stm32f30x_adc.c ****       (++) ADC_GetConversionValue() or  
 935:../src/stm32f30x_adc.c ****       (++) ADC_GetInjectedConversionValue().
 936:../src/stm32f30x_adc.c ****  
 937:../src/stm32f30x_adc.c **** @endverbatim
 938:../src/stm32f30x_adc.c ****   * @{
 939:../src/stm32f30x_adc.c ****   */
 940:../src/stm32f30x_adc.c **** 
 941:../src/stm32f30x_adc.c **** /**
 942:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the temperature sensor channel.
 943:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1 or 4 to select the ADC peripheral.
 944:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the temperature sensor.
 945:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 946:../src/stm32f30x_adc.c ****   * @retval None
 947:../src/stm32f30x_adc.c ****   */
 948:../src/stm32f30x_adc.c **** void ADC_TempSensorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 949:../src/stm32f30x_adc.c **** {
 1570              		.loc 1 949 0
 1571              		.cfi_startproc
 1572              		@ args = 0, pretend = 0, frame = 8
 1573              		@ frame_needed = 1, uses_anonymous_args = 0
 1574              		@ link register save eliminated.
 1575 0768 80B4     		push	{r7}
 1576              	.LCFI78:
 1577              		.cfi_def_cfa_offset 4
 1578              		.cfi_offset 7, -4
 1579 076a 83B0     		sub	sp, sp, #12
 1580              	.LCFI79:
 1581              		.cfi_def_cfa_offset 16
 1582 076c 00AF     		add	r7, sp, #0
 1583              	.LCFI80:
 1584              		.cfi_def_cfa_register 7
 1585 076e 7860     		str	r0, [r7, #4]
 1586 0770 0B46     		mov	r3, r1
 1587 0772 FB70     		strb	r3, [r7, #3]
 950:../src/stm32f30x_adc.c ****   /* Check the parameters */
 951:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 952:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 953:../src/stm32f30x_adc.c **** 
 954:../src/stm32f30x_adc.c ****   if((ADCx == ADC1) || (ADCx == ADC2))
 1588              		.loc 1 954 0
 1589 0774 7B68     		ldr	r3, [r7, #4]
 1590 0776 B3F1A04F 		cmp	r3, #1342177280
 1591 077a 06D0     		beq	.L55
 1592              		.loc 1 954 0 is_stmt 0 discriminator 1
 1593 077c 7A68     		ldr	r2, [r7, #4]
 1594 077e 4FF48073 		mov	r3, #256
 1595 0782 C5F20003 		movt	r3, 20480
 1596 0786 9A42     		cmp	r2, r3
 1597 0788 1CD1     		bne	.L56
 1598              	.L55:
 955:../src/stm32f30x_adc.c ****   {
 956:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1599              		.loc 1 956 0 is_stmt 1
 1600 078a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1601 078c 002B     		cmp	r3, #0
 1602 078e 0CD0     		beq	.L57
 957:../src/stm32f30x_adc.c ****     {
 958:../src/stm32f30x_adc.c ****       /* Enable the temperature sensor channel*/
 959:../src/stm32f30x_adc.c ****       ADC1_2->CCR |= ADC12_CCR_TSEN;
 1603              		.loc 1 959 0
 1604 0790 4FF44073 		mov	r3, #768
 1605 0794 C5F20003 		movt	r3, 20480
 1606 0798 4FF44072 		mov	r2, #768
 1607 079c C5F20002 		movt	r2, 20480
 1608 07a0 9268     		ldr	r2, [r2, #8]
 1609 07a2 42F40002 		orr	r2, r2, #8388608
 1610 07a6 9A60     		str	r2, [r3, #8]
 956:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1611              		.loc 1 956 0
 1612 07a8 28E0     		b	.L54
 1613              	.L57:
 960:../src/stm32f30x_adc.c ****     }
 961:../src/stm32f30x_adc.c ****     else
 962:../src/stm32f30x_adc.c ****     {
 963:../src/stm32f30x_adc.c ****       /* Disable the temperature sensor channel*/
 964:../src/stm32f30x_adc.c ****       ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_TSEN;
 1614              		.loc 1 964 0
 1615 07aa 4FF44073 		mov	r3, #768
 1616 07ae C5F20003 		movt	r3, 20480
 1617 07b2 4FF44072 		mov	r2, #768
 1618 07b6 C5F20002 		movt	r2, 20480
 1619 07ba 9268     		ldr	r2, [r2, #8]
 1620 07bc 22F40002 		bic	r2, r2, #8388608
 1621 07c0 9A60     		str	r2, [r3, #8]
 956:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1622              		.loc 1 956 0
 1623 07c2 1BE0     		b	.L54
 1624              	.L56:
 965:../src/stm32f30x_adc.c ****     }
 966:../src/stm32f30x_adc.c ****   }
 967:../src/stm32f30x_adc.c ****   else
 968:../src/stm32f30x_adc.c ****   {
 969:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1625              		.loc 1 969 0
 1626 07c4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1627 07c6 002B     		cmp	r3, #0
 1628 07c8 0CD0     		beq	.L60
 970:../src/stm32f30x_adc.c ****     {
 971:../src/stm32f30x_adc.c ****       /* Enable the temperature sensor channel*/
 972:../src/stm32f30x_adc.c ****       ADC3_4->CCR |= ADC34_CCR_TSEN;
 1629              		.loc 1 972 0
 1630 07ca 4FF4E063 		mov	r3, #1792
 1631 07ce C5F20003 		movt	r3, 20480
 1632 07d2 4FF4E062 		mov	r2, #1792
 1633 07d6 C5F20002 		movt	r2, 20480
 1634 07da 9268     		ldr	r2, [r2, #8]
 1635 07dc 42F40002 		orr	r2, r2, #8388608
 1636 07e0 9A60     		str	r2, [r3, #8]
 1637 07e2 0BE0     		b	.L54
 1638              	.L60:
 973:../src/stm32f30x_adc.c ****     }
 974:../src/stm32f30x_adc.c ****     else
 975:../src/stm32f30x_adc.c ****     {
 976:../src/stm32f30x_adc.c ****       /* Disable the temperature sensor channel*/
 977:../src/stm32f30x_adc.c ****       ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_TSEN;
 1639              		.loc 1 977 0
 1640 07e4 4FF4E063 		mov	r3, #1792
 1641 07e8 C5F20003 		movt	r3, 20480
 1642 07ec 4FF4E062 		mov	r2, #1792
 1643 07f0 C5F20002 		movt	r2, 20480
 1644 07f4 9268     		ldr	r2, [r2, #8]
 1645 07f6 22F40002 		bic	r2, r2, #8388608
 1646 07fa 9A60     		str	r2, [r3, #8]
 1647              	.L54:
 978:../src/stm32f30x_adc.c ****     }
 979:../src/stm32f30x_adc.c ****   }
 980:../src/stm32f30x_adc.c **** }
 1648              		.loc 1 980 0
 1649 07fc 07F10C07 		add	r7, r7, #12
 1650 0800 BD46     		mov	sp, r7
 1651 0802 80BC     		pop	{r7}
 1652 0804 7047     		bx	lr
 1653              		.cfi_endproc
 1654              	.LFE137:
 1656 0806 00BF     		.align	2
 1657              		.global	ADC_VrefintCmd
 1658              		.thumb
 1659              		.thumb_func
 1661              	ADC_VrefintCmd:
 1662              	.LFB138:
 981:../src/stm32f30x_adc.c **** 
 982:../src/stm32f30x_adc.c **** /**
 983:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the Vrefint channel.
 984:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1 or 4 to select the ADC peripheral.
 985:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the Vrefint.
 986:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 987:../src/stm32f30x_adc.c ****   * @retval None
 988:../src/stm32f30x_adc.c ****   */
 989:../src/stm32f30x_adc.c **** void ADC_VrefintCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 990:../src/stm32f30x_adc.c **** {
 1663              		.loc 1 990 0
 1664              		.cfi_startproc
 1665              		@ args = 0, pretend = 0, frame = 8
 1666              		@ frame_needed = 1, uses_anonymous_args = 0
 1667              		@ link register save eliminated.
 1668 0808 80B4     		push	{r7}
 1669              	.LCFI81:
 1670              		.cfi_def_cfa_offset 4
 1671              		.cfi_offset 7, -4
 1672 080a 83B0     		sub	sp, sp, #12
 1673              	.LCFI82:
 1674              		.cfi_def_cfa_offset 16
 1675 080c 00AF     		add	r7, sp, #0
 1676              	.LCFI83:
 1677              		.cfi_def_cfa_register 7
 1678 080e 7860     		str	r0, [r7, #4]
 1679 0810 0B46     		mov	r3, r1
 1680 0812 FB70     		strb	r3, [r7, #3]
 991:../src/stm32f30x_adc.c ****   /* Check the parameters */
 992:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 993:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 994:../src/stm32f30x_adc.c **** 
 995:../src/stm32f30x_adc.c ****   if((ADCx == ADC1) || (ADCx == ADC2))
 1681              		.loc 1 995 0
 1682 0814 7B68     		ldr	r3, [r7, #4]
 1683 0816 B3F1A04F 		cmp	r3, #1342177280
 1684 081a 06D0     		beq	.L62
 1685              		.loc 1 995 0 is_stmt 0 discriminator 1
 1686 081c 7A68     		ldr	r2, [r7, #4]
 1687 081e 4FF48073 		mov	r3, #256
 1688 0822 C5F20003 		movt	r3, 20480
 1689 0826 9A42     		cmp	r2, r3
 1690 0828 1CD1     		bne	.L63
 1691              	.L62:
 996:../src/stm32f30x_adc.c ****   {
 997:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1692              		.loc 1 997 0 is_stmt 1
 1693 082a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1694 082c 002B     		cmp	r3, #0
 1695 082e 0CD0     		beq	.L64
 998:../src/stm32f30x_adc.c ****     {
 999:../src/stm32f30x_adc.c ****       /* Enable the Vrefint channel*/
1000:../src/stm32f30x_adc.c ****       ADC1_2->CCR |= ADC12_CCR_VREFEN;
 1696              		.loc 1 1000 0
 1697 0830 4FF44073 		mov	r3, #768
 1698 0834 C5F20003 		movt	r3, 20480
 1699 0838 4FF44072 		mov	r2, #768
 1700 083c C5F20002 		movt	r2, 20480
 1701 0840 9268     		ldr	r2, [r2, #8]
 1702 0842 42F48002 		orr	r2, r2, #4194304
 1703 0846 9A60     		str	r2, [r3, #8]
 997:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1704              		.loc 1 997 0
 1705 0848 28E0     		b	.L61
 1706              	.L64:
1001:../src/stm32f30x_adc.c ****     }
1002:../src/stm32f30x_adc.c ****     else
1003:../src/stm32f30x_adc.c ****     {
1004:../src/stm32f30x_adc.c ****       /* Disable the Vrefint channel*/
1005:../src/stm32f30x_adc.c ****       ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
 1707              		.loc 1 1005 0
 1708 084a 4FF44073 		mov	r3, #768
 1709 084e C5F20003 		movt	r3, 20480
 1710 0852 4FF44072 		mov	r2, #768
 1711 0856 C5F20002 		movt	r2, 20480
 1712 085a 9268     		ldr	r2, [r2, #8]
 1713 085c 22F48002 		bic	r2, r2, #4194304
 1714 0860 9A60     		str	r2, [r3, #8]
 997:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1715              		.loc 1 997 0
 1716 0862 1BE0     		b	.L61
 1717              	.L63:
1006:../src/stm32f30x_adc.c ****     }
1007:../src/stm32f30x_adc.c ****   }
1008:../src/stm32f30x_adc.c ****   else
1009:../src/stm32f30x_adc.c ****   {
1010:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1718              		.loc 1 1010 0
 1719 0864 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1720 0866 002B     		cmp	r3, #0
 1721 0868 0CD0     		beq	.L67
1011:../src/stm32f30x_adc.c ****     {
1012:../src/stm32f30x_adc.c ****       /* Enable the Vrefint channel*/
1013:../src/stm32f30x_adc.c ****       ADC3_4->CCR |= ADC34_CCR_VREFEN;
 1722              		.loc 1 1013 0
 1723 086a 4FF4E063 		mov	r3, #1792
 1724 086e C5F20003 		movt	r3, 20480
 1725 0872 4FF4E062 		mov	r2, #1792
 1726 0876 C5F20002 		movt	r2, 20480
 1727 087a 9268     		ldr	r2, [r2, #8]
 1728 087c 42F48002 		orr	r2, r2, #4194304
 1729 0880 9A60     		str	r2, [r3, #8]
 1730 0882 0BE0     		b	.L61
 1731              	.L67:
1014:../src/stm32f30x_adc.c ****     }
1015:../src/stm32f30x_adc.c ****     else
1016:../src/stm32f30x_adc.c ****     {
1017:../src/stm32f30x_adc.c ****       /* Disable the Vrefint channel*/
1018:../src/stm32f30x_adc.c ****       ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
 1732              		.loc 1 1018 0
 1733 0884 4FF4E063 		mov	r3, #1792
 1734 0888 C5F20003 		movt	r3, 20480
 1735 088c 4FF4E062 		mov	r2, #1792
 1736 0890 C5F20002 		movt	r2, 20480
 1737 0894 9268     		ldr	r2, [r2, #8]
 1738 0896 22F48002 		bic	r2, r2, #4194304
 1739 089a 9A60     		str	r2, [r3, #8]
 1740              	.L61:
1019:../src/stm32f30x_adc.c ****     }
1020:../src/stm32f30x_adc.c ****   }
1021:../src/stm32f30x_adc.c **** }
 1741              		.loc 1 1021 0
 1742 089c 07F10C07 		add	r7, r7, #12
 1743 08a0 BD46     		mov	sp, r7
 1744 08a2 80BC     		pop	{r7}
 1745 08a4 7047     		bx	lr
 1746              		.cfi_endproc
 1747              	.LFE138:
 1749 08a6 00BF     		.align	2
 1750              		.global	ADC_VbatCmd
 1751              		.thumb
 1752              		.thumb_func
 1754              	ADC_VbatCmd:
 1755              	.LFB139:
1022:../src/stm32f30x_adc.c **** 
1023:../src/stm32f30x_adc.c **** /**
1024:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the Vbat channel.
1025:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1 or 4 to select the ADC peripheral.
1026:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the Vbat.
1027:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1028:../src/stm32f30x_adc.c ****   * @retval None
1029:../src/stm32f30x_adc.c ****   */
1030:../src/stm32f30x_adc.c **** void ADC_VbatCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1031:../src/stm32f30x_adc.c **** {
 1756              		.loc 1 1031 0
 1757              		.cfi_startproc
 1758              		@ args = 0, pretend = 0, frame = 8
 1759              		@ frame_needed = 1, uses_anonymous_args = 0
 1760              		@ link register save eliminated.
 1761 08a8 80B4     		push	{r7}
 1762              	.LCFI84:
 1763              		.cfi_def_cfa_offset 4
 1764              		.cfi_offset 7, -4
 1765 08aa 83B0     		sub	sp, sp, #12
 1766              	.LCFI85:
 1767              		.cfi_def_cfa_offset 16
 1768 08ac 00AF     		add	r7, sp, #0
 1769              	.LCFI86:
 1770              		.cfi_def_cfa_register 7
 1771 08ae 7860     		str	r0, [r7, #4]
 1772 08b0 0B46     		mov	r3, r1
 1773 08b2 FB70     		strb	r3, [r7, #3]
1032:../src/stm32f30x_adc.c ****   /* Check the parameters */
1033:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1034:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1035:../src/stm32f30x_adc.c **** 
1036:../src/stm32f30x_adc.c ****   if((ADCx == ADC1) || (ADCx == ADC2))
 1774              		.loc 1 1036 0
 1775 08b4 7B68     		ldr	r3, [r7, #4]
 1776 08b6 B3F1A04F 		cmp	r3, #1342177280
 1777 08ba 06D0     		beq	.L69
 1778              		.loc 1 1036 0 is_stmt 0 discriminator 1
 1779 08bc 7A68     		ldr	r2, [r7, #4]
 1780 08be 4FF48073 		mov	r3, #256
 1781 08c2 C5F20003 		movt	r3, 20480
 1782 08c6 9A42     		cmp	r2, r3
 1783 08c8 1CD1     		bne	.L70
 1784              	.L69:
1037:../src/stm32f30x_adc.c ****   {
1038:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1785              		.loc 1 1038 0 is_stmt 1
 1786 08ca FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1787 08cc 002B     		cmp	r3, #0
 1788 08ce 0CD0     		beq	.L71
1039:../src/stm32f30x_adc.c ****     {
1040:../src/stm32f30x_adc.c ****       /* Enable the Vbat channel*/
1041:../src/stm32f30x_adc.c ****       ADC1_2->CCR |= ADC12_CCR_VBATEN;
 1789              		.loc 1 1041 0
 1790 08d0 4FF44073 		mov	r3, #768
 1791 08d4 C5F20003 		movt	r3, 20480
 1792 08d8 4FF44072 		mov	r2, #768
 1793 08dc C5F20002 		movt	r2, 20480
 1794 08e0 9268     		ldr	r2, [r2, #8]
 1795 08e2 42F08072 		orr	r2, r2, #16777216
 1796 08e6 9A60     		str	r2, [r3, #8]
1038:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1797              		.loc 1 1038 0
 1798 08e8 28E0     		b	.L68
 1799              	.L71:
1042:../src/stm32f30x_adc.c ****     }
1043:../src/stm32f30x_adc.c ****     else
1044:../src/stm32f30x_adc.c ****     {
1045:../src/stm32f30x_adc.c ****       /* Disable the Vbat channel*/
1046:../src/stm32f30x_adc.c ****       ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VBATEN;
 1800              		.loc 1 1046 0
 1801 08ea 4FF44073 		mov	r3, #768
 1802 08ee C5F20003 		movt	r3, 20480
 1803 08f2 4FF44072 		mov	r2, #768
 1804 08f6 C5F20002 		movt	r2, 20480
 1805 08fa 9268     		ldr	r2, [r2, #8]
 1806 08fc 22F08072 		bic	r2, r2, #16777216
 1807 0900 9A60     		str	r2, [r3, #8]
1038:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1808              		.loc 1 1038 0
 1809 0902 1BE0     		b	.L68
 1810              	.L70:
1047:../src/stm32f30x_adc.c ****     }
1048:../src/stm32f30x_adc.c ****   }
1049:../src/stm32f30x_adc.c ****   else
1050:../src/stm32f30x_adc.c ****   {
1051:../src/stm32f30x_adc.c ****     if (NewState != DISABLE)
 1811              		.loc 1 1051 0
 1812 0904 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1813 0906 002B     		cmp	r3, #0
 1814 0908 0CD0     		beq	.L74
1052:../src/stm32f30x_adc.c ****     {
1053:../src/stm32f30x_adc.c ****       /* Enable the Vbat channel*/
1054:../src/stm32f30x_adc.c ****       ADC3_4->CCR |= ADC34_CCR_VBATEN;
 1815              		.loc 1 1054 0
 1816 090a 4FF4E063 		mov	r3, #1792
 1817 090e C5F20003 		movt	r3, 20480
 1818 0912 4FF4E062 		mov	r2, #1792
 1819 0916 C5F20002 		movt	r2, 20480
 1820 091a 9268     		ldr	r2, [r2, #8]
 1821 091c 42F08072 		orr	r2, r2, #16777216
 1822 0920 9A60     		str	r2, [r3, #8]
 1823 0922 0BE0     		b	.L68
 1824              	.L74:
1055:../src/stm32f30x_adc.c ****     }
1056:../src/stm32f30x_adc.c ****     else
1057:../src/stm32f30x_adc.c ****     {
1058:../src/stm32f30x_adc.c ****       /* Disable the Vbat channel*/
1059:../src/stm32f30x_adc.c ****       ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VBATEN;
 1825              		.loc 1 1059 0
 1826 0924 4FF4E063 		mov	r3, #1792
 1827 0928 C5F20003 		movt	r3, 20480
 1828 092c 4FF4E062 		mov	r2, #1792
 1829 0930 C5F20002 		movt	r2, 20480
 1830 0934 9268     		ldr	r2, [r2, #8]
 1831 0936 22F08072 		bic	r2, r2, #16777216
 1832 093a 9A60     		str	r2, [r3, #8]
 1833              	.L68:
1060:../src/stm32f30x_adc.c ****     }
1061:../src/stm32f30x_adc.c ****   }
1062:../src/stm32f30x_adc.c **** }
 1834              		.loc 1 1062 0
 1835 093c 07F10C07 		add	r7, r7, #12
 1836 0940 BD46     		mov	sp, r7
 1837 0942 80BC     		pop	{r7}
 1838 0944 7047     		bx	lr
 1839              		.cfi_endproc
 1840              	.LFE139:
 1842 0946 00BF     		.align	2
 1843              		.global	ADC_RegularChannelConfig
 1844              		.thumb
 1845              		.thumb_func
 1847              	ADC_RegularChannelConfig:
 1848              	.LFB140:
1063:../src/stm32f30x_adc.c **** 
1064:../src/stm32f30x_adc.c **** /**
1065:../src/stm32f30x_adc.c ****   * @}
1066:../src/stm32f30x_adc.c ****   */
1067:../src/stm32f30x_adc.c **** 
1068:../src/stm32f30x_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
1069:../src/stm32f30x_adc.c ****  *  @brief   Regular Channels Configuration functions 
1070:../src/stm32f30x_adc.c ****  *
1071:../src/stm32f30x_adc.c **** @verbatim   
1072:../src/stm32f30x_adc.c ****  ===============================================================================
1073:../src/stm32f30x_adc.c ****                   ##### Channels Configuration functions #####
1074:../src/stm32f30x_adc.c ****  ===============================================================================  
1075:../src/stm32f30x_adc.c **** 
1076:../src/stm32f30x_adc.c ****   [..] This section provides functions allowing to manage the ADC regular channels.
1077:../src/stm32f30x_adc.c ****    
1078:../src/stm32f30x_adc.c ****   [..] To configure a regular sequence of channels use:
1079:../src/stm32f30x_adc.c ****    (#) ADC_RegularChannelConfig()
1080:../src/stm32f30x_adc.c ****        this fuction allows:
1081:../src/stm32f30x_adc.c ****        (++) Configure the rank in the regular group sequencer for each channel
1082:../src/stm32f30x_adc.c ****        (++) Configure the sampling time for each channel
1083:../src/stm32f30x_adc.c **** 
1084:../src/stm32f30x_adc.c ****    (#) ADC_RegularChannelSequencerLengthConfig() to set the length of the regular sequencer
1085:../src/stm32f30x_adc.c **** 
1086:../src/stm32f30x_adc.c ****    [..] The regular trigger is configured using the following functions:
1087:../src/stm32f30x_adc.c ****    (#) ADC_SelectExternalTrigger()
1088:../src/stm32f30x_adc.c ****    (#) ADC_ExternalTriggerPolarityConfig()
1089:../src/stm32f30x_adc.c **** 
1090:../src/stm32f30x_adc.c ****    [..] The start and the stop conversion are controlled by:
1091:../src/stm32f30x_adc.c ****    (#) ADC_StartConversion()
1092:../src/stm32f30x_adc.c ****    (#) ADC_StopConversion()
1093:../src/stm32f30x_adc.c ****     
1094:../src/stm32f30x_adc.c ****    [..] 
1095:../src/stm32f30x_adc.c ****    (@)Please Note that the following features for regular channels are configurated
1096:../src/stm32f30x_adc.c ****      using the ADC_Init() function : 
1097:../src/stm32f30x_adc.c ****           (++) continuous mode activation
1098:../src/stm32f30x_adc.c ****           (++) Resolution  
1099:../src/stm32f30x_adc.c ****           (++) Data Alignement 
1100:../src/stm32f30x_adc.c ****           (++) Overrun Mode.
1101:../src/stm32f30x_adc.c ****      
1102:../src/stm32f30x_adc.c ****   [..] Get the conversion data: This subsection provides an important function in 
1103:../src/stm32f30x_adc.c ****      the ADC peripheral since it returns the converted data of the current 
1104:../src/stm32f30x_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
1105:../src/stm32f30x_adc.c ****      automatically cleared.
1106:../src/stm32f30x_adc.c **** 
1107:../src/stm32f30x_adc.c ****   [..] To configure the  discontinous mode, the following functions should be used:
1108:../src/stm32f30x_adc.c ****    (#) ADC_DiscModeChannelCountConfig() to configure the number of discontinuous channel to be conv
1109:../src/stm32f30x_adc.c ****    (#) ADC_DiscModeCmd() to enable the discontinuous mode.
1110:../src/stm32f30x_adc.c **** 
1111:../src/stm32f30x_adc.c ****   [..] To configure and enable/disable the Channel offset use the functions:
1112:../src/stm32f30x_adc.c ****      (++) ADC_SetChannelOffset1()
1113:../src/stm32f30x_adc.c ****      (++) ADC_SetChannelOffset2()
1114:../src/stm32f30x_adc.c ****      (++) ADC_SetChannelOffset3()
1115:../src/stm32f30x_adc.c ****      (++) ADC_SetChannelOffset4()
1116:../src/stm32f30x_adc.c ****      (++) ADC_ChannelOffset1Cmd()
1117:../src/stm32f30x_adc.c ****      (++) ADC_ChannelOffset2Cmd()
1118:../src/stm32f30x_adc.c ****      (++) ADC_ChannelOffset3Cmd()
1119:../src/stm32f30x_adc.c ****      (++) ADC_ChannelOffset4Cmd()
1120:../src/stm32f30x_adc.c ****   
1121:../src/stm32f30x_adc.c **** @endverbatim
1122:../src/stm32f30x_adc.c ****   * @{
1123:../src/stm32f30x_adc.c ****   */
1124:../src/stm32f30x_adc.c **** 
1125:../src/stm32f30x_adc.c **** /**
1126:../src/stm32f30x_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
1127:../src/stm32f30x_adc.c ****   *         rank in the sequencer and its sample time.
1128:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1129:../src/stm32f30x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1130:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
1131:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
1132:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
1133:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
1134:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
1135:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
1136:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
1137:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
1138:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
1139:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
1140:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
1141:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
1142:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
1143:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
1144:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
1145:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
1146:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
1147:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
1148:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_18: ADC Channel18 selected
1149:../src/stm32f30x_adc.c ****   * @param  Rank: The rank in the regular group sequencer. This parameter must be between 1 to 16.
1150:../src/stm32f30x_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1151:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
1152:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
1153:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_2Cycles5: Sample time equal to 2.5 cycles
1154:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_4Cycles5: Sample time equal to 4.5 cycles
1155:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles	
1156:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_19Cycles5: Sample time equal to 19.5 cycles	
1157:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_61Cycles5: Sample time equal to 61.5 cycles	
1158:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
1159:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
1160:../src/stm32f30x_adc.c ****   * @retval None
1161:../src/stm32f30x_adc.c ****   */
1162:../src/stm32f30x_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
1163:../src/stm32f30x_adc.c **** {
 1849              		.loc 1 1163 0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 16
 1852              		@ frame_needed = 1, uses_anonymous_args = 0
 1853              		@ link register save eliminated.
 1854 0948 80B4     		push	{r7}
 1855              	.LCFI87:
 1856              		.cfi_def_cfa_offset 4
 1857              		.cfi_offset 7, -4
 1858 094a 85B0     		sub	sp, sp, #20
 1859              	.LCFI88:
 1860              		.cfi_def_cfa_offset 24
 1861 094c 00AF     		add	r7, sp, #0
 1862              	.LCFI89:
 1863              		.cfi_def_cfa_register 7
 1864 094e 7860     		str	r0, [r7, #4]
 1865 0950 F970     		strb	r1, [r7, #3]
 1866 0952 BA70     		strb	r2, [r7, #2]
 1867 0954 7B70     		strb	r3, [r7, #1]
1164:../src/stm32f30x_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 1868              		.loc 1 1164 0
 1869 0956 4FF00003 		mov	r3, #0
 1870 095a FB60     		str	r3, [r7, #12]
 1871 095c 4FF00003 		mov	r3, #0
 1872 0960 BB60     		str	r3, [r7, #8]
1165:../src/stm32f30x_adc.c ****   /* Check the parameters */
1166:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1167:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1168:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1169:../src/stm32f30x_adc.c **** 
1170:../src/stm32f30x_adc.c ****   /* Regular sequence configuration */
1171:../src/stm32f30x_adc.c ****   /* For Rank 1 to 4 */
1172:../src/stm32f30x_adc.c ****   if (Rank < 5)
 1873              		.loc 1 1172 0
 1874 0962 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1875 0964 042B     		cmp	r3, #4
 1876 0966 27D8     		bhi	.L76
1173:../src/stm32f30x_adc.c ****   {
1174:../src/stm32f30x_adc.c ****     /* Get the old register value */
1175:../src/stm32f30x_adc.c ****     tmpreg1 = ADCx->SQR1;
 1877              		.loc 1 1175 0
 1878 0968 7B68     		ldr	r3, [r7, #4]
 1879 096a 1B6B     		ldr	r3, [r3, #48]
 1880 096c FB60     		str	r3, [r7, #12]
1176:../src/stm32f30x_adc.c ****     /* Calculate the mask to clear */
1177:../src/stm32f30x_adc.c ****     tmpreg2 = 0x1F << (6 * (Rank ));
 1881              		.loc 1 1177 0
 1882 096e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1883 0970 1346     		mov	r3, r2
 1884 0972 4FEA4303 		lsl	r3, r3, #1
 1885 0976 9B18     		adds	r3, r3, r2
 1886 0978 4FEA4303 		lsl	r3, r3, #1
 1887 097c 4FF01F02 		mov	r2, #31
 1888 0980 02FA03F3 		lsl	r3, r2, r3
 1889 0984 BB60     		str	r3, [r7, #8]
1178:../src/stm32f30x_adc.c ****     /* Clear the old SQx bits for the selected rank */
1179:../src/stm32f30x_adc.c ****     tmpreg1 &= ~tmpreg2;
 1890              		.loc 1 1179 0
 1891 0986 BB68     		ldr	r3, [r7, #8]
 1892 0988 6FEA0303 		mvn	r3, r3
 1893 098c FA68     		ldr	r2, [r7, #12]
 1894 098e 1340     		ands	r3, r3, r2
 1895 0990 FB60     		str	r3, [r7, #12]
1180:../src/stm32f30x_adc.c ****     /* Calculate the mask to set */
1181:../src/stm32f30x_adc.c ****     tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 1896              		.loc 1 1181 0
 1897 0992 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1898 0994 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1899 0996 1346     		mov	r3, r2
 1900 0998 4FEA4303 		lsl	r3, r3, #1
 1901 099c 9B18     		adds	r3, r3, r2
 1902 099e 4FEA4303 		lsl	r3, r3, #1
 1903 09a2 01FA03F3 		lsl	r3, r1, r3
 1904 09a6 BB60     		str	r3, [r7, #8]
1182:../src/stm32f30x_adc.c ****     /* Set the SQx bits for the selected rank */
1183:../src/stm32f30x_adc.c ****     tmpreg1 |= tmpreg2;
 1905              		.loc 1 1183 0
 1906 09a8 FA68     		ldr	r2, [r7, #12]
 1907 09aa BB68     		ldr	r3, [r7, #8]
 1908 09ac 1343     		orrs	r3, r3, r2
 1909 09ae FB60     		str	r3, [r7, #12]
1184:../src/stm32f30x_adc.c ****     /* Store the new register value */
1185:../src/stm32f30x_adc.c ****     ADCx->SQR1 = tmpreg1;
 1910              		.loc 1 1185 0
 1911 09b0 7B68     		ldr	r3, [r7, #4]
 1912 09b2 FA68     		ldr	r2, [r7, #12]
 1913 09b4 1A63     		str	r2, [r3, #48]
 1914 09b6 88E0     		b	.L77
 1915              	.L76:
1186:../src/stm32f30x_adc.c ****   }
1187:../src/stm32f30x_adc.c ****   /* For Rank 5 to 9 */
1188:../src/stm32f30x_adc.c ****   else if (Rank < 10)
 1916              		.loc 1 1188 0
 1917 09b8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1918 09ba 092B     		cmp	r3, #9
 1919 09bc 2BD8     		bhi	.L78
1189:../src/stm32f30x_adc.c ****   {
1190:../src/stm32f30x_adc.c ****     /* Get the old register value */
1191:../src/stm32f30x_adc.c ****     tmpreg1 = ADCx->SQR2;
 1920              		.loc 1 1191 0
 1921 09be 7B68     		ldr	r3, [r7, #4]
 1922 09c0 5B6B     		ldr	r3, [r3, #52]
 1923 09c2 FB60     		str	r3, [r7, #12]
1192:../src/stm32f30x_adc.c ****     /* Calculate the mask to clear */
1193:../src/stm32f30x_adc.c ****     tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 1924              		.loc 1 1193 0
 1925 09c4 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1926 09c6 1346     		mov	r3, r2
 1927 09c8 4FEA4303 		lsl	r3, r3, #1
 1928 09cc 9B18     		adds	r3, r3, r2
 1929 09ce 4FEA4303 		lsl	r3, r3, #1
 1930 09d2 A3F11E03 		sub	r3, r3, #30
 1931 09d6 4FF01F02 		mov	r2, #31
 1932 09da 02FA03F3 		lsl	r3, r2, r3
 1933 09de BB60     		str	r3, [r7, #8]
1194:../src/stm32f30x_adc.c ****     /* Clear the old SQx bits for the selected rank */
1195:../src/stm32f30x_adc.c ****     tmpreg1 &= ~tmpreg2;
 1934              		.loc 1 1195 0
 1935 09e0 BB68     		ldr	r3, [r7, #8]
 1936 09e2 6FEA0303 		mvn	r3, r3
 1937 09e6 FA68     		ldr	r2, [r7, #12]
 1938 09e8 1340     		ands	r3, r3, r2
 1939 09ea FB60     		str	r3, [r7, #12]
1196:../src/stm32f30x_adc.c ****     /* Calculate the mask to set */
1197:../src/stm32f30x_adc.c ****     tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 1940              		.loc 1 1197 0
 1941 09ec F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1942 09ee BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1943 09f0 1346     		mov	r3, r2
 1944 09f2 4FEA4303 		lsl	r3, r3, #1
 1945 09f6 9B18     		adds	r3, r3, r2
 1946 09f8 4FEA4303 		lsl	r3, r3, #1
 1947 09fc A3F11E03 		sub	r3, r3, #30
 1948 0a00 01FA03F3 		lsl	r3, r1, r3
 1949 0a04 BB60     		str	r3, [r7, #8]
1198:../src/stm32f30x_adc.c ****     /* Set the SQx bits for the selected rank */
1199:../src/stm32f30x_adc.c ****     tmpreg1 |= tmpreg2;
 1950              		.loc 1 1199 0
 1951 0a06 FA68     		ldr	r2, [r7, #12]
 1952 0a08 BB68     		ldr	r3, [r7, #8]
 1953 0a0a 1343     		orrs	r3, r3, r2
 1954 0a0c FB60     		str	r3, [r7, #12]
1200:../src/stm32f30x_adc.c ****     /* Store the new register value */
1201:../src/stm32f30x_adc.c ****     ADCx->SQR2 = tmpreg1;
 1955              		.loc 1 1201 0
 1956 0a0e 7B68     		ldr	r3, [r7, #4]
 1957 0a10 FA68     		ldr	r2, [r7, #12]
 1958 0a12 5A63     		str	r2, [r3, #52]
 1959 0a14 59E0     		b	.L77
 1960              	.L78:
1202:../src/stm32f30x_adc.c ****   }
1203:../src/stm32f30x_adc.c ****   /* For Rank 10 to 14 */
1204:../src/stm32f30x_adc.c ****   else if (Rank < 15)
 1961              		.loc 1 1204 0
 1962 0a16 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1963 0a18 0E2B     		cmp	r3, #14
 1964 0a1a 2BD8     		bhi	.L79
1205:../src/stm32f30x_adc.c ****   {
1206:../src/stm32f30x_adc.c ****     /* Get the old register value */
1207:../src/stm32f30x_adc.c ****     tmpreg1 = ADCx->SQR3;
 1965              		.loc 1 1207 0
 1966 0a1c 7B68     		ldr	r3, [r7, #4]
 1967 0a1e 9B6B     		ldr	r3, [r3, #56]
 1968 0a20 FB60     		str	r3, [r7, #12]
1208:../src/stm32f30x_adc.c ****     /* Calculate the mask to clear */
1209:../src/stm32f30x_adc.c ****     tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 1969              		.loc 1 1209 0
 1970 0a22 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1971 0a24 1346     		mov	r3, r2
 1972 0a26 4FEA4303 		lsl	r3, r3, #1
 1973 0a2a 9B18     		adds	r3, r3, r2
 1974 0a2c 4FEA4303 		lsl	r3, r3, #1
 1975 0a30 A3F13C03 		sub	r3, r3, #60
 1976 0a34 4FF01F02 		mov	r2, #31
 1977 0a38 02FA03F3 		lsl	r3, r2, r3
 1978 0a3c BB60     		str	r3, [r7, #8]
1210:../src/stm32f30x_adc.c ****     /* Clear the old SQx bits for the selected rank */
1211:../src/stm32f30x_adc.c ****     tmpreg1 &= ~tmpreg2;
 1979              		.loc 1 1211 0
 1980 0a3e BB68     		ldr	r3, [r7, #8]
 1981 0a40 6FEA0303 		mvn	r3, r3
 1982 0a44 FA68     		ldr	r2, [r7, #12]
 1983 0a46 1340     		ands	r3, r3, r2
 1984 0a48 FB60     		str	r3, [r7, #12]
1212:../src/stm32f30x_adc.c ****     /* Calculate the mask to set */
1213:../src/stm32f30x_adc.c ****     tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 1985              		.loc 1 1213 0
 1986 0a4a F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1987 0a4c BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1988 0a4e 1346     		mov	r3, r2
 1989 0a50 4FEA4303 		lsl	r3, r3, #1
 1990 0a54 9B18     		adds	r3, r3, r2
 1991 0a56 4FEA4303 		lsl	r3, r3, #1
 1992 0a5a A3F13C03 		sub	r3, r3, #60
 1993 0a5e 01FA03F3 		lsl	r3, r1, r3
 1994 0a62 BB60     		str	r3, [r7, #8]
1214:../src/stm32f30x_adc.c ****     /* Set the SQx bits for the selected rank */
1215:../src/stm32f30x_adc.c ****     tmpreg1 |= tmpreg2;
 1995              		.loc 1 1215 0
 1996 0a64 FA68     		ldr	r2, [r7, #12]
 1997 0a66 BB68     		ldr	r3, [r7, #8]
 1998 0a68 1343     		orrs	r3, r3, r2
 1999 0a6a FB60     		str	r3, [r7, #12]
1216:../src/stm32f30x_adc.c ****     /* Store the new register value */
1217:../src/stm32f30x_adc.c ****     ADCx->SQR3 = tmpreg1;
 2000              		.loc 1 1217 0
 2001 0a6c 7B68     		ldr	r3, [r7, #4]
 2002 0a6e FA68     		ldr	r2, [r7, #12]
 2003 0a70 9A63     		str	r2, [r3, #56]
 2004 0a72 2AE0     		b	.L77
 2005              	.L79:
1218:../src/stm32f30x_adc.c ****   }
1219:../src/stm32f30x_adc.c ****   else 
1220:../src/stm32f30x_adc.c ****   {
1221:../src/stm32f30x_adc.c ****     /* Get the old register value */
1222:../src/stm32f30x_adc.c ****     tmpreg1 = ADCx->SQR4;
 2006              		.loc 1 1222 0
 2007 0a74 7B68     		ldr	r3, [r7, #4]
 2008 0a76 DB6B     		ldr	r3, [r3, #60]
 2009 0a78 FB60     		str	r3, [r7, #12]
1223:../src/stm32f30x_adc.c ****     /* Calculate the mask to clear */
1224:../src/stm32f30x_adc.c ****     tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 2010              		.loc 1 1224 0
 2011 0a7a BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 2012 0a7c 1346     		mov	r3, r2
 2013 0a7e 4FEA4303 		lsl	r3, r3, #1
 2014 0a82 9B18     		adds	r3, r3, r2
 2015 0a84 4FEA4303 		lsl	r3, r3, #1
 2016 0a88 A3F15A03 		sub	r3, r3, #90
 2017 0a8c 4FF01F02 		mov	r2, #31
 2018 0a90 02FA03F3 		lsl	r3, r2, r3
 2019 0a94 BB60     		str	r3, [r7, #8]
1225:../src/stm32f30x_adc.c ****     /* Clear the old SQx bits for the selected rank */
1226:../src/stm32f30x_adc.c ****     tmpreg1 &= ~tmpreg2;
 2020              		.loc 1 1226 0
 2021 0a96 BB68     		ldr	r3, [r7, #8]
 2022 0a98 6FEA0303 		mvn	r3, r3
 2023 0a9c FA68     		ldr	r2, [r7, #12]
 2024 0a9e 1340     		ands	r3, r3, r2
 2025 0aa0 FB60     		str	r3, [r7, #12]
1227:../src/stm32f30x_adc.c ****     /* Calculate the mask to set */
1228:../src/stm32f30x_adc.c ****     tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 2026              		.loc 1 1228 0
 2027 0aa2 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 2028 0aa4 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 2029 0aa6 1346     		mov	r3, r2
 2030 0aa8 4FEA4303 		lsl	r3, r3, #1
 2031 0aac 9B18     		adds	r3, r3, r2
 2032 0aae 4FEA4303 		lsl	r3, r3, #1
 2033 0ab2 A3F15A03 		sub	r3, r3, #90
 2034 0ab6 01FA03F3 		lsl	r3, r1, r3
 2035 0aba BB60     		str	r3, [r7, #8]
1229:../src/stm32f30x_adc.c ****     /* Set the SQx bits for the selected rank */
1230:../src/stm32f30x_adc.c ****     tmpreg1 |= tmpreg2;
 2036              		.loc 1 1230 0
 2037 0abc FA68     		ldr	r2, [r7, #12]
 2038 0abe BB68     		ldr	r3, [r7, #8]
 2039 0ac0 1343     		orrs	r3, r3, r2
 2040 0ac2 FB60     		str	r3, [r7, #12]
1231:../src/stm32f30x_adc.c ****     /* Store the new register value */
1232:../src/stm32f30x_adc.c ****     ADCx->SQR4 = tmpreg1;
 2041              		.loc 1 1232 0
 2042 0ac4 7B68     		ldr	r3, [r7, #4]
 2043 0ac6 FA68     		ldr	r2, [r7, #12]
 2044 0ac8 DA63     		str	r2, [r3, #60]
 2045              	.L77:
1233:../src/stm32f30x_adc.c ****   }
1234:../src/stm32f30x_adc.c **** 
1235:../src/stm32f30x_adc.c ****   /* Channel sampling configuration */
1236:../src/stm32f30x_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1237:../src/stm32f30x_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 2046              		.loc 1 1237 0
 2047 0aca FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2048 0acc 092B     		cmp	r3, #9
 2049 0ace 27D9     		bls	.L80
1238:../src/stm32f30x_adc.c ****   {
1239:../src/stm32f30x_adc.c ****     /* Get the old register value */
1240:../src/stm32f30x_adc.c ****     tmpreg1 = ADCx->SMPR2;
 2050              		.loc 1 1240 0
 2051 0ad0 7B68     		ldr	r3, [r7, #4]
 2052 0ad2 9B69     		ldr	r3, [r3, #24]
 2053 0ad4 FB60     		str	r3, [r7, #12]
1241:../src/stm32f30x_adc.c ****     /* Calculate the mask to clear */
1242:../src/stm32f30x_adc.c ****     tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 2054              		.loc 1 1242 0
 2055 0ad6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2056 0ad8 1346     		mov	r3, r2
 2057 0ada 4FEA4303 		lsl	r3, r3, #1
 2058 0ade 9B18     		adds	r3, r3, r2
 2059 0ae0 A3F11E03 		sub	r3, r3, #30
 2060 0ae4 4FF00702 		mov	r2, #7
 2061 0ae8 02FA03F3 		lsl	r3, r2, r3
 2062 0aec BB60     		str	r3, [r7, #8]
1243:../src/stm32f30x_adc.c ****     /* Clear the old channel sample time */
1244:../src/stm32f30x_adc.c **** 	ADCx->SMPR2 &= ~tmpreg2;
 2063              		.loc 1 1244 0
 2064 0aee 7B68     		ldr	r3, [r7, #4]
 2065 0af0 9A69     		ldr	r2, [r3, #24]
 2066 0af2 BB68     		ldr	r3, [r7, #8]
 2067 0af4 6FEA0303 		mvn	r3, r3
 2068 0af8 1A40     		ands	r2, r2, r3
 2069 0afa 7B68     		ldr	r3, [r7, #4]
 2070 0afc 9A61     		str	r2, [r3, #24]
1245:../src/stm32f30x_adc.c ****     /* Calculate the mask to set */
1246:../src/stm32f30x_adc.c **** 	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 2071              		.loc 1 1246 0
 2072 0afe 7B68     		ldr	r3, [r7, #4]
 2073 0b00 9969     		ldr	r1, [r3, #24]
 2074 0b02 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 2075 0b04 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2076 0b06 1346     		mov	r3, r2
 2077 0b08 4FEA4303 		lsl	r3, r3, #1
 2078 0b0c 9B18     		adds	r3, r3, r2
 2079 0b0e A3F11E03 		sub	r3, r3, #30
 2080 0b12 00FA03F3 		lsl	r3, r0, r3
 2081 0b16 41EA0302 		orr	r2, r1, r3
 2082 0b1a 7B68     		ldr	r3, [r7, #4]
 2083 0b1c 9A61     		str	r2, [r3, #24]
 2084 0b1e 24E0     		b	.L75
 2085              	.L80:
1247:../src/stm32f30x_adc.c **** 
1248:../src/stm32f30x_adc.c ****   }
1249:../src/stm32f30x_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1250:../src/stm32f30x_adc.c ****   {
1251:../src/stm32f30x_adc.c ****     /* Get the old register value */
1252:../src/stm32f30x_adc.c ****     tmpreg1 = ADCx->SMPR1;
 2086              		.loc 1 1252 0
 2087 0b20 7B68     		ldr	r3, [r7, #4]
 2088 0b22 5B69     		ldr	r3, [r3, #20]
 2089 0b24 FB60     		str	r3, [r7, #12]
1253:../src/stm32f30x_adc.c ****     /* Calculate the mask to clear */
1254:../src/stm32f30x_adc.c ****     tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 2090              		.loc 1 1254 0
 2091 0b26 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2092 0b28 03F1FF32 		add	r2, r3, #-1
 2093 0b2c 1346     		mov	r3, r2
 2094 0b2e 4FEA4303 		lsl	r3, r3, #1
 2095 0b32 9B18     		adds	r3, r3, r2
 2096 0b34 4FF03802 		mov	r2, #56
 2097 0b38 02FA03F3 		lsl	r3, r2, r3
 2098 0b3c BB60     		str	r3, [r7, #8]
1255:../src/stm32f30x_adc.c ****     /* Clear the old channel sample time */
1256:../src/stm32f30x_adc.c **** 	ADCx->SMPR1 &= ~tmpreg2;
 2099              		.loc 1 1256 0
 2100 0b3e 7B68     		ldr	r3, [r7, #4]
 2101 0b40 5A69     		ldr	r2, [r3, #20]
 2102 0b42 BB68     		ldr	r3, [r7, #8]
 2103 0b44 6FEA0303 		mvn	r3, r3
 2104 0b48 1A40     		ands	r2, r2, r3
 2105 0b4a 7B68     		ldr	r3, [r7, #4]
 2106 0b4c 5A61     		str	r2, [r3, #20]
1257:../src/stm32f30x_adc.c ****     /* Calculate the mask to set */
1258:../src/stm32f30x_adc.c **** 	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 2107              		.loc 1 1258 0
 2108 0b4e 7B68     		ldr	r3, [r7, #4]
 2109 0b50 5969     		ldr	r1, [r3, #20]
 2110 0b52 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 2111 0b54 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2112 0b56 1346     		mov	r3, r2
 2113 0b58 4FEA4303 		lsl	r3, r3, #1
 2114 0b5c 9B18     		adds	r3, r3, r2
 2115 0b5e 00FA03F3 		lsl	r3, r0, r3
 2116 0b62 41EA0302 		orr	r2, r1, r3
 2117 0b66 7B68     		ldr	r3, [r7, #4]
 2118 0b68 5A61     		str	r2, [r3, #20]
 2119              	.L75:
1259:../src/stm32f30x_adc.c ****   }
1260:../src/stm32f30x_adc.c **** }
 2120              		.loc 1 1260 0
 2121 0b6a 07F11407 		add	r7, r7, #20
 2122 0b6e BD46     		mov	sp, r7
 2123 0b70 80BC     		pop	{r7}
 2124 0b72 7047     		bx	lr
 2125              		.cfi_endproc
 2126              	.LFE140:
 2128              		.align	2
 2129              		.global	ADC_RegularChannelSequencerLengthConfig
 2130              		.thumb
 2131              		.thumb_func
 2133              	ADC_RegularChannelSequencerLengthConfig:
 2134              	.LFB141:
1261:../src/stm32f30x_adc.c **** 
1262:../src/stm32f30x_adc.c **** /**
1263:../src/stm32f30x_adc.c ****   * @brief  Sets the ADC regular channel sequence lenght.
1264:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1265:../src/stm32f30x_adc.c ****   * @param  SequenceLength: The Regular sequence length. This parameter must be between 1 to 16.
1266:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1267:../src/stm32f30x_adc.c ****   * @retval None
1268:../src/stm32f30x_adc.c ****   */
1269:../src/stm32f30x_adc.c **** void ADC_RegularChannelSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t SequencerLength)
1270:../src/stm32f30x_adc.c **** {
 2135              		.loc 1 1270 0
 2136              		.cfi_startproc
 2137              		@ args = 0, pretend = 0, frame = 8
 2138              		@ frame_needed = 1, uses_anonymous_args = 0
 2139              		@ link register save eliminated.
 2140 0b74 80B4     		push	{r7}
 2141              	.LCFI90:
 2142              		.cfi_def_cfa_offset 4
 2143              		.cfi_offset 7, -4
 2144 0b76 83B0     		sub	sp, sp, #12
 2145              	.LCFI91:
 2146              		.cfi_def_cfa_offset 16
 2147 0b78 00AF     		add	r7, sp, #0
 2148              	.LCFI92:
 2149              		.cfi_def_cfa_register 7
 2150 0b7a 7860     		str	r0, [r7, #4]
 2151 0b7c 0B46     		mov	r3, r1
 2152 0b7e FB70     		strb	r3, [r7, #3]
1271:../src/stm32f30x_adc.c ****   /* Check the parameters */
1272:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1273:../src/stm32f30x_adc.c **** 
1274:../src/stm32f30x_adc.c ****   /* Configure the ADC sequence lenght */  
1275:../src/stm32f30x_adc.c ****   ADCx->SQR1 &= ~(uint32_t)ADC_SQR1_L;
 2153              		.loc 1 1275 0
 2154 0b80 7B68     		ldr	r3, [r7, #4]
 2155 0b82 1B6B     		ldr	r3, [r3, #48]
 2156 0b84 23F00F02 		bic	r2, r3, #15
 2157 0b88 7B68     		ldr	r3, [r7, #4]
 2158 0b8a 1A63     		str	r2, [r3, #48]
1276:../src/stm32f30x_adc.c ****   ADCx->SQR1 |= (uint32_t)(SequencerLength - 1);   
 2159              		.loc 1 1276 0
 2160 0b8c 7B68     		ldr	r3, [r7, #4]
 2161 0b8e 1A6B     		ldr	r2, [r3, #48]
 2162 0b90 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2163 0b92 03F1FF33 		add	r3, r3, #-1
 2164 0b96 1A43     		orrs	r2, r2, r3
 2165 0b98 7B68     		ldr	r3, [r7, #4]
 2166 0b9a 1A63     		str	r2, [r3, #48]
1277:../src/stm32f30x_adc.c **** }
 2167              		.loc 1 1277 0
 2168 0b9c 07F10C07 		add	r7, r7, #12
 2169 0ba0 BD46     		mov	sp, r7
 2170 0ba2 80BC     		pop	{r7}
 2171 0ba4 7047     		bx	lr
 2172              		.cfi_endproc
 2173              	.LFE141:
 2175 0ba6 00BF     		.align	2
 2176              		.global	ADC_ExternalTriggerConfig
 2177              		.thumb
 2178              		.thumb_func
 2180              	ADC_ExternalTriggerConfig:
 2181              	.LFB142:
1278:../src/stm32f30x_adc.c **** 
1279:../src/stm32f30x_adc.c **** /**
1280:../src/stm32f30x_adc.c ****   * @brief  External Trigger Enable and Polarity Selection for regular channels.
1281:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1282:../src/stm32f30x_adc.c ****   * @param  ADC_ExternalTrigConvEvent: ADC external Trigger source.
1283:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
1284:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event0: External trigger event 0 
1285:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event1: External trigger event 1
1286:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event2: External trigger event 2
1287:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event3: External trigger event 3
1288:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event4: External trigger event 4 
1289:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event5: External trigger event 5
1290:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event6: External trigger event 6
1291:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event7: External trigger event 7
1292:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event8: External trigger event 8 
1293:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event9: External trigger event 9
1294:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event10: External trigger event 10
1295:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event11: External trigger event 11
1296:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event12: External trigger event 12 
1297:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event13: External trigger event 13
1298:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event14: External trigger event 14
1299:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigger_Event15: External trigger event 15	  
1300:../src/stm32f30x_adc.c ****   * @param  ADC_ExternalTrigEventEdge: ADC external Trigger Polarity.
1301:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
1302:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigEventEdge_OFF: Hardware trigger detection disabled 
1303:../src/stm32f30x_adc.c ****   *                                          (conversions can be launched by software)
1304:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigEventEdge_RisingEdge: Hardware trigger detection on the rising edge
1305:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigEventEdge_FallingEdge: Hardware trigger detection on the falling edge
1306:../src/stm32f30x_adc.c ****   *     @arg ADC_ExternalTrigEventEdge_BothEdge: Hardware trigger detection on both the rising and 
1307:../src/stm32f30x_adc.c ****   * @retval None
1308:../src/stm32f30x_adc.c ****   */
1309:../src/stm32f30x_adc.c **** void ADC_ExternalTriggerConfig(ADC_TypeDef* ADCx, uint16_t ADC_ExternalTrigConvEvent, uint16_t ADC_
1310:../src/stm32f30x_adc.c **** {
 2182              		.loc 1 1310 0
 2183              		.cfi_startproc
 2184              		@ args = 0, pretend = 0, frame = 8
 2185              		@ frame_needed = 1, uses_anonymous_args = 0
 2186              		@ link register save eliminated.
 2187 0ba8 80B4     		push	{r7}
 2188              	.LCFI93:
 2189              		.cfi_def_cfa_offset 4
 2190              		.cfi_offset 7, -4
 2191 0baa 83B0     		sub	sp, sp, #12
 2192              	.LCFI94:
 2193              		.cfi_def_cfa_offset 16
 2194 0bac 00AF     		add	r7, sp, #0
 2195              	.LCFI95:
 2196              		.cfi_def_cfa_register 7
 2197 0bae 7860     		str	r0, [r7, #4]
 2198 0bb0 1346     		mov	r3, r2
 2199 0bb2 0A46     		mov	r2, r1	@ movhi
 2200 0bb4 7A80     		strh	r2, [r7, #2]	@ movhi
 2201 0bb6 3B80     		strh	r3, [r7, #0]	@ movhi
1311:../src/stm32f30x_adc.c ****   /* Check the parameters */
1312:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1313:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_ExternalTrigConvEvent));
1314:../src/stm32f30x_adc.c ****   assert_param(IS_EXTERNALTRIG_EDGE(ADC_ExternalTrigEventEdge));
1315:../src/stm32f30x_adc.c **** 
1316:../src/stm32f30x_adc.c ****   /* Disable the selected ADC conversion on external event */
1317:../src/stm32f30x_adc.c ****   ADCx->CFGR &= ~(ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL);
 2202              		.loc 1 1317 0
 2203 0bb8 7B68     		ldr	r3, [r7, #4]
 2204 0bba DB68     		ldr	r3, [r3, #12]
 2205 0bbc 23F47C62 		bic	r2, r3, #4032
 2206 0bc0 7B68     		ldr	r3, [r7, #4]
 2207 0bc2 DA60     		str	r2, [r3, #12]
1318:../src/stm32f30x_adc.c ****   ADCx->CFGR |= (uint32_t)(ADC_ExternalTrigEventEdge | ADC_ExternalTrigConvEvent);
 2208              		.loc 1 1318 0
 2209 0bc4 7B68     		ldr	r3, [r7, #4]
 2210 0bc6 DA68     		ldr	r2, [r3, #12]
 2211 0bc8 3988     		ldrh	r1, [r7, #0]	@ movhi
 2212 0bca 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2213 0bcc 0B43     		orrs	r3, r3, r1
 2214 0bce 9BB2     		uxth	r3, r3
 2215 0bd0 1A43     		orrs	r2, r2, r3
 2216 0bd2 7B68     		ldr	r3, [r7, #4]
 2217 0bd4 DA60     		str	r2, [r3, #12]
1319:../src/stm32f30x_adc.c **** }
 2218              		.loc 1 1319 0
 2219 0bd6 07F10C07 		add	r7, r7, #12
 2220 0bda BD46     		mov	sp, r7
 2221 0bdc 80BC     		pop	{r7}
 2222 0bde 7047     		bx	lr
 2223              		.cfi_endproc
 2224              	.LFE142:
 2226              		.align	2
 2227              		.global	ADC_StartConversion
 2228              		.thumb
 2229              		.thumb_func
 2231              	ADC_StartConversion:
 2232              	.LFB143:
1320:../src/stm32f30x_adc.c **** 
1321:../src/stm32f30x_adc.c **** /**
1322:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the selected ADC start conversion .
1323:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1324:../src/stm32f30x_adc.c ****   * @retval None
1325:../src/stm32f30x_adc.c ****   */
1326:../src/stm32f30x_adc.c **** void ADC_StartConversion(ADC_TypeDef* ADCx)
1327:../src/stm32f30x_adc.c **** {
 2233              		.loc 1 1327 0
 2234              		.cfi_startproc
 2235              		@ args = 0, pretend = 0, frame = 8
 2236              		@ frame_needed = 1, uses_anonymous_args = 0
 2237              		@ link register save eliminated.
 2238 0be0 80B4     		push	{r7}
 2239              	.LCFI96:
 2240              		.cfi_def_cfa_offset 4
 2241              		.cfi_offset 7, -4
 2242 0be2 83B0     		sub	sp, sp, #12
 2243              	.LCFI97:
 2244              		.cfi_def_cfa_offset 16
 2245 0be4 00AF     		add	r7, sp, #0
 2246              	.LCFI98:
 2247              		.cfi_def_cfa_register 7
 2248 0be6 7860     		str	r0, [r7, #4]
1328:../src/stm32f30x_adc.c ****   /* Check the parameters */
1329:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1330:../src/stm32f30x_adc.c **** 
1331:../src/stm32f30x_adc.c ****   /* Set the ADSTART bit */
1332:../src/stm32f30x_adc.c ****   ADCx->CR |= ADC_CR_ADSTART;
 2249              		.loc 1 1332 0
 2250 0be8 7B68     		ldr	r3, [r7, #4]
 2251 0bea 9B68     		ldr	r3, [r3, #8]
 2252 0bec 43F00402 		orr	r2, r3, #4
 2253 0bf0 7B68     		ldr	r3, [r7, #4]
 2254 0bf2 9A60     		str	r2, [r3, #8]
1333:../src/stm32f30x_adc.c **** }
 2255              		.loc 1 1333 0
 2256 0bf4 07F10C07 		add	r7, r7, #12
 2257 0bf8 BD46     		mov	sp, r7
 2258 0bfa 80BC     		pop	{r7}
 2259 0bfc 7047     		bx	lr
 2260              		.cfi_endproc
 2261              	.LFE143:
 2263 0bfe 00BF     		.align	2
 2264              		.global	ADC_GetStartConversionStatus
 2265              		.thumb
 2266              		.thumb_func
 2268              	ADC_GetStartConversionStatus:
 2269              	.LFB144:
1334:../src/stm32f30x_adc.c **** 
1335:../src/stm32f30x_adc.c **** /**
1336:../src/stm32f30x_adc.c ****   * @brief  Gets the selected ADC start conversion Status.
1337:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1338:../src/stm32f30x_adc.c ****   * @retval The new state of ADC start conversion (SET or RESET).
1339:../src/stm32f30x_adc.c ****   */
1340:../src/stm32f30x_adc.c **** FlagStatus ADC_GetStartConversionStatus(ADC_TypeDef* ADCx)
1341:../src/stm32f30x_adc.c **** {
 2270              		.loc 1 1341 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 16
 2273              		@ frame_needed = 1, uses_anonymous_args = 0
 2274              		@ link register save eliminated.
 2275 0c00 80B4     		push	{r7}
 2276              	.LCFI99:
 2277              		.cfi_def_cfa_offset 4
 2278              		.cfi_offset 7, -4
 2279 0c02 85B0     		sub	sp, sp, #20
 2280              	.LCFI100:
 2281              		.cfi_def_cfa_offset 24
 2282 0c04 00AF     		add	r7, sp, #0
 2283              	.LCFI101:
 2284              		.cfi_def_cfa_register 7
 2285 0c06 7860     		str	r0, [r7, #4]
1342:../src/stm32f30x_adc.c ****   FlagStatus bitstatus = RESET;
 2286              		.loc 1 1342 0
 2287 0c08 4FF00003 		mov	r3, #0
 2288 0c0c FB73     		strb	r3, [r7, #15]
1343:../src/stm32f30x_adc.c ****   /* Check the parameters */
1344:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1345:../src/stm32f30x_adc.c ****   /* Check the status of ADSTART bit */
1346:../src/stm32f30x_adc.c ****   if ((ADCx->CR & ADC_CR_ADSTART) != (uint32_t)RESET)
 2289              		.loc 1 1346 0
 2290 0c0e 7B68     		ldr	r3, [r7, #4]
 2291 0c10 9B68     		ldr	r3, [r3, #8]
 2292 0c12 03F00403 		and	r3, r3, #4
 2293 0c16 002B     		cmp	r3, #0
 2294 0c18 03D0     		beq	.L86
1347:../src/stm32f30x_adc.c ****   {
1348:../src/stm32f30x_adc.c ****     /* ADSTART bit is set */
1349:../src/stm32f30x_adc.c ****     bitstatus = SET;
 2295              		.loc 1 1349 0
 2296 0c1a 4FF00103 		mov	r3, #1
 2297 0c1e FB73     		strb	r3, [r7, #15]
 2298 0c20 02E0     		b	.L87
 2299              	.L86:
1350:../src/stm32f30x_adc.c ****   }
1351:../src/stm32f30x_adc.c ****   else
1352:../src/stm32f30x_adc.c ****   {
1353:../src/stm32f30x_adc.c ****     /* ADSTART bit is reset */
1354:../src/stm32f30x_adc.c ****     bitstatus = RESET;
 2300              		.loc 1 1354 0
 2301 0c22 4FF00003 		mov	r3, #0
 2302 0c26 FB73     		strb	r3, [r7, #15]
 2303              	.L87:
1355:../src/stm32f30x_adc.c ****   }
1356:../src/stm32f30x_adc.c ****   /* Return the ADSTART bit status */
1357:../src/stm32f30x_adc.c ****   return  bitstatus;
 2304              		.loc 1 1357 0
 2305 0c28 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1358:../src/stm32f30x_adc.c **** }
 2306              		.loc 1 1358 0
 2307 0c2a 1846     		mov	r0, r3
 2308 0c2c 07F11407 		add	r7, r7, #20
 2309 0c30 BD46     		mov	sp, r7
 2310 0c32 80BC     		pop	{r7}
 2311 0c34 7047     		bx	lr
 2312              		.cfi_endproc
 2313              	.LFE144:
 2315 0c36 00BF     		.align	2
 2316              		.global	ADC_StopConversion
 2317              		.thumb
 2318              		.thumb_func
 2320              	ADC_StopConversion:
 2321              	.LFB145:
1359:../src/stm32f30x_adc.c **** 
1360:../src/stm32f30x_adc.c **** /**
1361:../src/stm32f30x_adc.c ****   * @brief  Stops the selected ADC ongoing conversion.
1362:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1363:../src/stm32f30x_adc.c ****   * @retval None
1364:../src/stm32f30x_adc.c ****   */
1365:../src/stm32f30x_adc.c **** void ADC_StopConversion(ADC_TypeDef* ADCx)
1366:../src/stm32f30x_adc.c **** {
 2322              		.loc 1 1366 0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 8
 2325              		@ frame_needed = 1, uses_anonymous_args = 0
 2326              		@ link register save eliminated.
 2327 0c38 80B4     		push	{r7}
 2328              	.LCFI102:
 2329              		.cfi_def_cfa_offset 4
 2330              		.cfi_offset 7, -4
 2331 0c3a 83B0     		sub	sp, sp, #12
 2332              	.LCFI103:
 2333              		.cfi_def_cfa_offset 16
 2334 0c3c 00AF     		add	r7, sp, #0
 2335              	.LCFI104:
 2336              		.cfi_def_cfa_register 7
 2337 0c3e 7860     		str	r0, [r7, #4]
1367:../src/stm32f30x_adc.c ****   /* Check the parameters */
1368:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1369:../src/stm32f30x_adc.c **** 
1370:../src/stm32f30x_adc.c ****   /* Set the ADSTP bit */
1371:../src/stm32f30x_adc.c ****    ADCx->CR |= ADC_CR_ADSTP;
 2338              		.loc 1 1371 0
 2339 0c40 7B68     		ldr	r3, [r7, #4]
 2340 0c42 9B68     		ldr	r3, [r3, #8]
 2341 0c44 43F01002 		orr	r2, r3, #16
 2342 0c48 7B68     		ldr	r3, [r7, #4]
 2343 0c4a 9A60     		str	r2, [r3, #8]
1372:../src/stm32f30x_adc.c **** }
 2344              		.loc 1 1372 0
 2345 0c4c 07F10C07 		add	r7, r7, #12
 2346 0c50 BD46     		mov	sp, r7
 2347 0c52 80BC     		pop	{r7}
 2348 0c54 7047     		bx	lr
 2349              		.cfi_endproc
 2350              	.LFE145:
 2352 0c56 00BF     		.align	2
 2353              		.global	ADC_DiscModeChannelCountConfig
 2354              		.thumb
 2355              		.thumb_func
 2357              	ADC_DiscModeChannelCountConfig:
 2358              	.LFB146:
1373:../src/stm32f30x_adc.c **** 
1374:../src/stm32f30x_adc.c **** 
1375:../src/stm32f30x_adc.c **** /**
1376:../src/stm32f30x_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular
1377:../src/stm32f30x_adc.c ****   *         group channel.
1378:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1379:../src/stm32f30x_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel
1380:../src/stm32f30x_adc.c ****   *         count value. This number must be between 1 and 8.
1381:../src/stm32f30x_adc.c ****   * @retval None
1382:../src/stm32f30x_adc.c ****   */
1383:../src/stm32f30x_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
1384:../src/stm32f30x_adc.c **** {
 2359              		.loc 1 1384 0
 2360              		.cfi_startproc
 2361              		@ args = 0, pretend = 0, frame = 16
 2362              		@ frame_needed = 1, uses_anonymous_args = 0
 2363              		@ link register save eliminated.
 2364 0c58 80B4     		push	{r7}
 2365              	.LCFI105:
 2366              		.cfi_def_cfa_offset 4
 2367              		.cfi_offset 7, -4
 2368 0c5a 85B0     		sub	sp, sp, #20
 2369              	.LCFI106:
 2370              		.cfi_def_cfa_offset 24
 2371 0c5c 00AF     		add	r7, sp, #0
 2372              	.LCFI107:
 2373              		.cfi_def_cfa_register 7
 2374 0c5e 7860     		str	r0, [r7, #4]
 2375 0c60 0B46     		mov	r3, r1
 2376 0c62 FB70     		strb	r3, [r7, #3]
1385:../src/stm32f30x_adc.c ****   uint32_t tmpreg1 = 0;
 2377              		.loc 1 1385 0
 2378 0c64 4FF00003 		mov	r3, #0
 2379 0c68 FB60     		str	r3, [r7, #12]
1386:../src/stm32f30x_adc.c ****   uint32_t tmpreg2 = 0;
 2380              		.loc 1 1386 0
 2381 0c6a 4FF00003 		mov	r3, #0
 2382 0c6e BB60     		str	r3, [r7, #8]
1387:../src/stm32f30x_adc.c ****   /* Check the parameters */
1388:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1389:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
1390:../src/stm32f30x_adc.c ****   /* Get the old register value */
1391:../src/stm32f30x_adc.c ****   tmpreg1 = ADCx->CFGR;
 2383              		.loc 1 1391 0
 2384 0c70 7B68     		ldr	r3, [r7, #4]
 2385 0c72 DB68     		ldr	r3, [r3, #12]
 2386 0c74 FB60     		str	r3, [r7, #12]
1392:../src/stm32f30x_adc.c ****   /* Clear the old discontinuous mode channel count */
1393:../src/stm32f30x_adc.c ****   tmpreg1 &= ~(uint32_t)(ADC_CFGR_DISCNUM);
 2387              		.loc 1 1393 0
 2388 0c76 FB68     		ldr	r3, [r7, #12]
 2389 0c78 23F46023 		bic	r3, r3, #917504
 2390 0c7c FB60     		str	r3, [r7, #12]
1394:../src/stm32f30x_adc.c ****   /* Set the discontinuous mode channel count */
1395:../src/stm32f30x_adc.c ****   tmpreg2 = Number - 1;
 2391              		.loc 1 1395 0
 2392 0c7e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2393 0c80 03F1FF33 		add	r3, r3, #-1
 2394 0c84 BB60     		str	r3, [r7, #8]
1396:../src/stm32f30x_adc.c ****   tmpreg1 |= tmpreg2 << 17;
 2395              		.loc 1 1396 0
 2396 0c86 BB68     		ldr	r3, [r7, #8]
 2397 0c88 4FEA4343 		lsl	r3, r3, #17
 2398 0c8c FA68     		ldr	r2, [r7, #12]
 2399 0c8e 1343     		orrs	r3, r3, r2
 2400 0c90 FB60     		str	r3, [r7, #12]
1397:../src/stm32f30x_adc.c ****   /* Store the new register value */
1398:../src/stm32f30x_adc.c ****   ADCx->CFGR = tmpreg1;
 2401              		.loc 1 1398 0
 2402 0c92 7B68     		ldr	r3, [r7, #4]
 2403 0c94 FA68     		ldr	r2, [r7, #12]
 2404 0c96 DA60     		str	r2, [r3, #12]
1399:../src/stm32f30x_adc.c **** }
 2405              		.loc 1 1399 0
 2406 0c98 07F11407 		add	r7, r7, #20
 2407 0c9c BD46     		mov	sp, r7
 2408 0c9e 80BC     		pop	{r7}
 2409 0ca0 7047     		bx	lr
 2410              		.cfi_endproc
 2411              	.LFE146:
 2413 0ca2 00BF     		.align	2
 2414              		.global	ADC_DiscModeCmd
 2415              		.thumb
 2416              		.thumb_func
 2418              	ADC_DiscModeCmd:
 2419              	.LFB147:
1400:../src/stm32f30x_adc.c **** 
1401:../src/stm32f30x_adc.c **** /**
1402:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group
1403:../src/stm32f30x_adc.c ****   *         channel for the specified ADC
1404:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1405:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode
1406:../src/stm32f30x_adc.c ****   *         on regular group channel.
1407:../src/stm32f30x_adc.c ****   *         This parameter can be: ENABLE or DISABLE.
1408:../src/stm32f30x_adc.c ****   * @retval None
1409:../src/stm32f30x_adc.c ****   */
1410:../src/stm32f30x_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1411:../src/stm32f30x_adc.c **** {
 2420              		.loc 1 1411 0
 2421              		.cfi_startproc
 2422              		@ args = 0, pretend = 0, frame = 8
 2423              		@ frame_needed = 1, uses_anonymous_args = 0
 2424              		@ link register save eliminated.
 2425 0ca4 80B4     		push	{r7}
 2426              	.LCFI108:
 2427              		.cfi_def_cfa_offset 4
 2428              		.cfi_offset 7, -4
 2429 0ca6 83B0     		sub	sp, sp, #12
 2430              	.LCFI109:
 2431              		.cfi_def_cfa_offset 16
 2432 0ca8 00AF     		add	r7, sp, #0
 2433              	.LCFI110:
 2434              		.cfi_def_cfa_register 7
 2435 0caa 7860     		str	r0, [r7, #4]
 2436 0cac 0B46     		mov	r3, r1
 2437 0cae FB70     		strb	r3, [r7, #3]
1412:../src/stm32f30x_adc.c ****   /* Check the parameters */
1413:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1414:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1415:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 2438              		.loc 1 1415 0
 2439 0cb0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2440 0cb2 002B     		cmp	r3, #0
 2441 0cb4 06D0     		beq	.L92
1416:../src/stm32f30x_adc.c ****   {
1417:../src/stm32f30x_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
1418:../src/stm32f30x_adc.c ****     ADCx->CFGR |= ADC_CFGR_DISCEN;
 2442              		.loc 1 1418 0
 2443 0cb6 7B68     		ldr	r3, [r7, #4]
 2444 0cb8 DB68     		ldr	r3, [r3, #12]
 2445 0cba 43F48032 		orr	r2, r3, #65536
 2446 0cbe 7B68     		ldr	r3, [r7, #4]
 2447 0cc0 DA60     		str	r2, [r3, #12]
 2448 0cc2 05E0     		b	.L91
 2449              	.L92:
1419:../src/stm32f30x_adc.c ****   }
1420:../src/stm32f30x_adc.c ****   else
1421:../src/stm32f30x_adc.c ****   {
1422:../src/stm32f30x_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
1423:../src/stm32f30x_adc.c ****     ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_DISCEN);
 2450              		.loc 1 1423 0
 2451 0cc4 7B68     		ldr	r3, [r7, #4]
 2452 0cc6 DB68     		ldr	r3, [r3, #12]
 2453 0cc8 23F48032 		bic	r2, r3, #65536
 2454 0ccc 7B68     		ldr	r3, [r7, #4]
 2455 0cce DA60     		str	r2, [r3, #12]
 2456              	.L91:
1424:../src/stm32f30x_adc.c ****   }
1425:../src/stm32f30x_adc.c **** }
 2457              		.loc 1 1425 0
 2458 0cd0 07F10C07 		add	r7, r7, #12
 2459 0cd4 BD46     		mov	sp, r7
 2460 0cd6 80BC     		pop	{r7}
 2461 0cd8 7047     		bx	lr
 2462              		.cfi_endproc
 2463              	.LFE147:
 2465 0cda 00BF     		.align	2
 2466              		.global	ADC_GetConversionValue
 2467              		.thumb
 2468              		.thumb_func
 2470              	ADC_GetConversionValue:
 2471              	.LFB148:
1426:../src/stm32f30x_adc.c **** 
1427:../src/stm32f30x_adc.c **** /**
1428:../src/stm32f30x_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
1429:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1430:../src/stm32f30x_adc.c ****   * @retval The Data conversion value.
1431:../src/stm32f30x_adc.c ****   */
1432:../src/stm32f30x_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
1433:../src/stm32f30x_adc.c **** {
 2472              		.loc 1 1433 0
 2473              		.cfi_startproc
 2474              		@ args = 0, pretend = 0, frame = 8
 2475              		@ frame_needed = 1, uses_anonymous_args = 0
 2476              		@ link register save eliminated.
 2477 0cdc 80B4     		push	{r7}
 2478              	.LCFI111:
 2479              		.cfi_def_cfa_offset 4
 2480              		.cfi_offset 7, -4
 2481 0cde 83B0     		sub	sp, sp, #12
 2482              	.LCFI112:
 2483              		.cfi_def_cfa_offset 16
 2484 0ce0 00AF     		add	r7, sp, #0
 2485              	.LCFI113:
 2486              		.cfi_def_cfa_register 7
 2487 0ce2 7860     		str	r0, [r7, #4]
1434:../src/stm32f30x_adc.c ****   /* Check the parameters */
1435:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1436:../src/stm32f30x_adc.c ****   /* Return the selected ADC conversion value */
1437:../src/stm32f30x_adc.c ****   return (uint16_t) ADCx->DR;
 2488              		.loc 1 1437 0
 2489 0ce4 7B68     		ldr	r3, [r7, #4]
 2490 0ce6 1B6C     		ldr	r3, [r3, #64]
 2491 0ce8 9BB2     		uxth	r3, r3
1438:../src/stm32f30x_adc.c **** }
 2492              		.loc 1 1438 0
 2493 0cea 1846     		mov	r0, r3
 2494 0cec 07F10C07 		add	r7, r7, #12
 2495 0cf0 BD46     		mov	sp, r7
 2496 0cf2 80BC     		pop	{r7}
 2497 0cf4 7047     		bx	lr
 2498              		.cfi_endproc
 2499              	.LFE148:
 2501 0cf6 00BF     		.align	2
 2502              		.global	ADC_GetDualModeConversionValue
 2503              		.thumb
 2504              		.thumb_func
 2506              	ADC_GetDualModeConversionValue:
 2507              	.LFB149:
1439:../src/stm32f30x_adc.c **** 
1440:../src/stm32f30x_adc.c **** /**
1441:../src/stm32f30x_adc.c ****   * @brief  Returns the last ADC1, ADC2, ADC3 and ADC4 regular conversions results 
1442:../src/stm32f30x_adc.c ****   *         data in the selected dual mode.
1443:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.  
1444:../src/stm32f30x_adc.c ****   * @retval The Data conversion value.
1445:../src/stm32f30x_adc.c ****   * @note   In dual mode, the value returned by this function is as following
1446:../src/stm32f30x_adc.c ****   *           Data[15:0] : these bits contain the regular data of the Master ADC.
1447:../src/stm32f30x_adc.c ****   *           Data[31:16]: these bits contain the regular data of the Slave ADC.           
1448:../src/stm32f30x_adc.c ****   */
1449:../src/stm32f30x_adc.c **** uint32_t ADC_GetDualModeConversionValue(ADC_TypeDef* ADCx)
1450:../src/stm32f30x_adc.c **** {
 2508              		.loc 1 1450 0
 2509              		.cfi_startproc
 2510              		@ args = 0, pretend = 0, frame = 16
 2511              		@ frame_needed = 1, uses_anonymous_args = 0
 2512              		@ link register save eliminated.
 2513 0cf8 80B4     		push	{r7}
 2514              	.LCFI114:
 2515              		.cfi_def_cfa_offset 4
 2516              		.cfi_offset 7, -4
 2517 0cfa 85B0     		sub	sp, sp, #20
 2518              	.LCFI115:
 2519              		.cfi_def_cfa_offset 24
 2520 0cfc 00AF     		add	r7, sp, #0
 2521              	.LCFI116:
 2522              		.cfi_def_cfa_register 7
 2523 0cfe 7860     		str	r0, [r7, #4]
1451:../src/stm32f30x_adc.c ****   uint32_t tmpreg1 = 0;
 2524              		.loc 1 1451 0
 2525 0d00 4FF00003 		mov	r3, #0
 2526 0d04 FB60     		str	r3, [r7, #12]
1452:../src/stm32f30x_adc.c **** 
1453:../src/stm32f30x_adc.c ****   /* Check the parameters */
1454:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1455:../src/stm32f30x_adc.c **** 
1456:../src/stm32f30x_adc.c ****   if((ADCx == ADC1) || (ADCx== ADC2))
 2527              		.loc 1 1456 0
 2528 0d06 7B68     		ldr	r3, [r7, #4]
 2529 0d08 B3F1A04F 		cmp	r3, #1342177280
 2530 0d0c 06D0     		beq	.L97
 2531              		.loc 1 1456 0 is_stmt 0 discriminator 1
 2532 0d0e 7A68     		ldr	r2, [r7, #4]
 2533 0d10 4FF48073 		mov	r3, #256
 2534 0d14 C5F20003 		movt	r3, 20480
 2535 0d18 9A42     		cmp	r2, r3
 2536 0d1a 06D1     		bne	.L98
 2537              	.L97:
1457:../src/stm32f30x_adc.c ****   {
1458:../src/stm32f30x_adc.c ****     /* Get the dual mode conversion value */
1459:../src/stm32f30x_adc.c ****     tmpreg1 = ADC1_2->CDR;
 2538              		.loc 1 1459 0 is_stmt 1
 2539 0d1c 4FF44073 		mov	r3, #768
 2540 0d20 C5F20003 		movt	r3, 20480
 2541 0d24 DB68     		ldr	r3, [r3, #12]
 2542 0d26 FB60     		str	r3, [r7, #12]
 2543 0d28 05E0     		b	.L99
 2544              	.L98:
1460:../src/stm32f30x_adc.c ****   }
1461:../src/stm32f30x_adc.c ****   else
1462:../src/stm32f30x_adc.c ****   {	
1463:../src/stm32f30x_adc.c ****     /* Get the dual mode conversion value */
1464:../src/stm32f30x_adc.c ****     tmpreg1 = ADC3_4->CDR;
 2545              		.loc 1 1464 0
 2546 0d2a 4FF4E063 		mov	r3, #1792
 2547 0d2e C5F20003 		movt	r3, 20480
 2548 0d32 DB68     		ldr	r3, [r3, #12]
 2549 0d34 FB60     		str	r3, [r7, #12]
 2550              	.L99:
1465:../src/stm32f30x_adc.c ****   }
1466:../src/stm32f30x_adc.c ****   /* Return the dual mode conversion value */
1467:../src/stm32f30x_adc.c ****   return (uint32_t) tmpreg1;
 2551              		.loc 1 1467 0
 2552 0d36 FB68     		ldr	r3, [r7, #12]
1468:../src/stm32f30x_adc.c **** }
 2553              		.loc 1 1468 0
 2554 0d38 1846     		mov	r0, r3
 2555 0d3a 07F11407 		add	r7, r7, #20
 2556 0d3e BD46     		mov	sp, r7
 2557 0d40 80BC     		pop	{r7}
 2558 0d42 7047     		bx	lr
 2559              		.cfi_endproc
 2560              	.LFE149:
 2562              		.align	2
 2563              		.global	ADC_SetChannelOffset1
 2564              		.thumb
 2565              		.thumb_func
 2567              	ADC_SetChannelOffset1:
 2568              	.LFB150:
1469:../src/stm32f30x_adc.c **** 
1470:../src/stm32f30x_adc.c **** /**
1471:../src/stm32f30x_adc.c ****   * @brief  Set the ADC channels conversion value offset1
1472:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1473:../src/stm32f30x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1474:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
1475:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
1476:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
1477:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
1478:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
1479:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
1480:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
1481:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
1482:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
1483:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
1484:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
1485:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
1486:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
1487:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
1488:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
1489:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
1490:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
1491:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
1492:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_18: ADC Channel18 selected
1493:../src/stm32f30x_adc.c ****   * @param  Offset: the offset value for the selected ADC Channel
1494:../src/stm32f30x_adc.c ****   *   This parameter must be a 12bit value.
1495:../src/stm32f30x_adc.c ****   * @retval None
1496:../src/stm32f30x_adc.c ****   */
1497:../src/stm32f30x_adc.c **** void ADC_SetChannelOffset1(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
1498:../src/stm32f30x_adc.c **** {
 2569              		.loc 1 1498 0
 2570              		.cfi_startproc
 2571              		@ args = 0, pretend = 0, frame = 8
 2572              		@ frame_needed = 1, uses_anonymous_args = 0
 2573              		@ link register save eliminated.
 2574 0d44 80B4     		push	{r7}
 2575              	.LCFI117:
 2576              		.cfi_def_cfa_offset 4
 2577              		.cfi_offset 7, -4
 2578 0d46 83B0     		sub	sp, sp, #12
 2579              	.LCFI118:
 2580              		.cfi_def_cfa_offset 16
 2581 0d48 00AF     		add	r7, sp, #0
 2582              	.LCFI119:
 2583              		.cfi_def_cfa_register 7
 2584 0d4a 7860     		str	r0, [r7, #4]
 2585 0d4c 1346     		mov	r3, r2
 2586 0d4e 0A46     		mov	r2, r1
 2587 0d50 FA70     		strb	r2, [r7, #3]
 2588 0d52 3B80     		strh	r3, [r7, #0]	@ movhi
1499:../src/stm32f30x_adc.c ****   /* Check the parameters */
1500:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1501:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1502:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1503:../src/stm32f30x_adc.c ****     
1504:../src/stm32f30x_adc.c ****   /* Select the Channel */
1505:../src/stm32f30x_adc.c ****   ADCx->OFR1 &= ~ (uint32_t) ADC_OFR1_OFFSET1_CH;
 2589              		.loc 1 1505 0
 2590 0d54 7B68     		ldr	r3, [r7, #4]
 2591 0d56 1B6E     		ldr	r3, [r3, #96]
 2592 0d58 23F0F842 		bic	r2, r3, #2080374784
 2593 0d5c 7B68     		ldr	r3, [r7, #4]
 2594 0d5e 1A66     		str	r2, [r3, #96]
1506:../src/stm32f30x_adc.c ****   ADCx->OFR1 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 2595              		.loc 1 1506 0
 2596 0d60 7B68     		ldr	r3, [r7, #4]
 2597 0d62 1A6E     		ldr	r2, [r3, #96]
 2598 0d64 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2599 0d66 4FEA8363 		lsl	r3, r3, #26
 2600 0d6a 1A43     		orrs	r2, r2, r3
 2601 0d6c 7B68     		ldr	r3, [r7, #4]
 2602 0d6e 1A66     		str	r2, [r3, #96]
1507:../src/stm32f30x_adc.c **** 
1508:../src/stm32f30x_adc.c ****   /* Set the data offset */
1509:../src/stm32f30x_adc.c ****   ADCx->OFR1 &= ~ (uint32_t) ADC_OFR1_OFFSET1;
 2603              		.loc 1 1509 0
 2604 0d70 7B68     		ldr	r3, [r7, #4]
 2605 0d72 1B6E     		ldr	r3, [r3, #96]
 2606 0d74 23F47F63 		bic	r3, r3, #4080
 2607 0d78 23F00F03 		bic	r3, r3, #15
 2608 0d7c 7A68     		ldr	r2, [r7, #4]
 2609 0d7e 1366     		str	r3, [r2, #96]
1510:../src/stm32f30x_adc.c ****   ADCx->OFR1 |= (uint32_t)Offset;
 2610              		.loc 1 1510 0
 2611 0d80 7B68     		ldr	r3, [r7, #4]
 2612 0d82 1A6E     		ldr	r2, [r3, #96]
 2613 0d84 3B88     		ldrh	r3, [r7, #0]
 2614 0d86 1A43     		orrs	r2, r2, r3
 2615 0d88 7B68     		ldr	r3, [r7, #4]
 2616 0d8a 1A66     		str	r2, [r3, #96]
1511:../src/stm32f30x_adc.c **** }
 2617              		.loc 1 1511 0
 2618 0d8c 07F10C07 		add	r7, r7, #12
 2619 0d90 BD46     		mov	sp, r7
 2620 0d92 80BC     		pop	{r7}
 2621 0d94 7047     		bx	lr
 2622              		.cfi_endproc
 2623              	.LFE150:
 2625 0d96 00BF     		.align	2
 2626              		.global	ADC_SetChannelOffset2
 2627              		.thumb
 2628              		.thumb_func
 2630              	ADC_SetChannelOffset2:
 2631              	.LFB151:
1512:../src/stm32f30x_adc.c **** 
1513:../src/stm32f30x_adc.c **** /**
1514:../src/stm32f30x_adc.c ****   * @brief  Set the ADC channels conversion value offset2
1515:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1516:../src/stm32f30x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1517:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
1518:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
1519:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
1520:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
1521:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
1522:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
1523:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
1524:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
1525:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
1526:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
1527:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
1528:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
1529:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
1530:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
1531:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
1532:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
1533:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
1534:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
1535:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_18: ADC Channel18 selected
1536:../src/stm32f30x_adc.c ****   * @param  Offset: the offset value for the selected ADC Channel
1537:../src/stm32f30x_adc.c ****   *   This parameter must be a 12bit value.
1538:../src/stm32f30x_adc.c ****   * @retval None
1539:../src/stm32f30x_adc.c ****   */
1540:../src/stm32f30x_adc.c **** void ADC_SetChannelOffset2(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
1541:../src/stm32f30x_adc.c **** {
 2632              		.loc 1 1541 0
 2633              		.cfi_startproc
 2634              		@ args = 0, pretend = 0, frame = 8
 2635              		@ frame_needed = 1, uses_anonymous_args = 0
 2636              		@ link register save eliminated.
 2637 0d98 80B4     		push	{r7}
 2638              	.LCFI120:
 2639              		.cfi_def_cfa_offset 4
 2640              		.cfi_offset 7, -4
 2641 0d9a 83B0     		sub	sp, sp, #12
 2642              	.LCFI121:
 2643              		.cfi_def_cfa_offset 16
 2644 0d9c 00AF     		add	r7, sp, #0
 2645              	.LCFI122:
 2646              		.cfi_def_cfa_register 7
 2647 0d9e 7860     		str	r0, [r7, #4]
 2648 0da0 1346     		mov	r3, r2
 2649 0da2 0A46     		mov	r2, r1
 2650 0da4 FA70     		strb	r2, [r7, #3]
 2651 0da6 3B80     		strh	r3, [r7, #0]	@ movhi
1542:../src/stm32f30x_adc.c ****   /* Check the parameters */
1543:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1544:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1545:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1546:../src/stm32f30x_adc.c ****     
1547:../src/stm32f30x_adc.c ****   /* Select the Channel */
1548:../src/stm32f30x_adc.c ****   ADCx->OFR2 &= ~ (uint32_t) ADC_OFR2_OFFSET2_CH;
 2652              		.loc 1 1548 0
 2653 0da8 7B68     		ldr	r3, [r7, #4]
 2654 0daa 5B6E     		ldr	r3, [r3, #100]
 2655 0dac 23F0F842 		bic	r2, r3, #2080374784
 2656 0db0 7B68     		ldr	r3, [r7, #4]
 2657 0db2 5A66     		str	r2, [r3, #100]
1549:../src/stm32f30x_adc.c ****   ADCx->OFR2 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 2658              		.loc 1 1549 0
 2659 0db4 7B68     		ldr	r3, [r7, #4]
 2660 0db6 5A6E     		ldr	r2, [r3, #100]
 2661 0db8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2662 0dba 4FEA8363 		lsl	r3, r3, #26
 2663 0dbe 1A43     		orrs	r2, r2, r3
 2664 0dc0 7B68     		ldr	r3, [r7, #4]
 2665 0dc2 5A66     		str	r2, [r3, #100]
1550:../src/stm32f30x_adc.c **** 
1551:../src/stm32f30x_adc.c ****   /* Set the data offset */
1552:../src/stm32f30x_adc.c ****   ADCx->OFR2 &= ~ (uint32_t) ADC_OFR2_OFFSET2;
 2666              		.loc 1 1552 0
 2667 0dc4 7B68     		ldr	r3, [r7, #4]
 2668 0dc6 5B6E     		ldr	r3, [r3, #100]
 2669 0dc8 23F47F63 		bic	r3, r3, #4080
 2670 0dcc 23F00F03 		bic	r3, r3, #15
 2671 0dd0 7A68     		ldr	r2, [r7, #4]
 2672 0dd2 5366     		str	r3, [r2, #100]
1553:../src/stm32f30x_adc.c ****   ADCx->OFR2 |= (uint32_t)Offset;
 2673              		.loc 1 1553 0
 2674 0dd4 7B68     		ldr	r3, [r7, #4]
 2675 0dd6 5A6E     		ldr	r2, [r3, #100]
 2676 0dd8 3B88     		ldrh	r3, [r7, #0]
 2677 0dda 1A43     		orrs	r2, r2, r3
 2678 0ddc 7B68     		ldr	r3, [r7, #4]
 2679 0dde 5A66     		str	r2, [r3, #100]
1554:../src/stm32f30x_adc.c **** }
 2680              		.loc 1 1554 0
 2681 0de0 07F10C07 		add	r7, r7, #12
 2682 0de4 BD46     		mov	sp, r7
 2683 0de6 80BC     		pop	{r7}
 2684 0de8 7047     		bx	lr
 2685              		.cfi_endproc
 2686              	.LFE151:
 2688 0dea 00BF     		.align	2
 2689              		.global	ADC_SetChannelOffset3
 2690              		.thumb
 2691              		.thumb_func
 2693              	ADC_SetChannelOffset3:
 2694              	.LFB152:
1555:../src/stm32f30x_adc.c **** 
1556:../src/stm32f30x_adc.c **** /**
1557:../src/stm32f30x_adc.c ****   * @brief  Set the ADC channels conversion value offset3
1558:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1559:../src/stm32f30x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1560:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
1561:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
1562:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
1563:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
1564:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
1565:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
1566:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
1567:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
1568:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
1569:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
1570:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
1571:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
1572:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
1573:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
1574:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
1575:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
1576:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
1577:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
1578:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_18: ADC Channel18 selected
1579:../src/stm32f30x_adc.c ****   * @param  Offset: the offset value for the selected ADC Channel
1580:../src/stm32f30x_adc.c ****   *   This parameter must be a 12bit value.
1581:../src/stm32f30x_adc.c ****   * @retval None
1582:../src/stm32f30x_adc.c ****   */
1583:../src/stm32f30x_adc.c **** void ADC_SetChannelOffset3(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
1584:../src/stm32f30x_adc.c **** {
 2695              		.loc 1 1584 0
 2696              		.cfi_startproc
 2697              		@ args = 0, pretend = 0, frame = 8
 2698              		@ frame_needed = 1, uses_anonymous_args = 0
 2699              		@ link register save eliminated.
 2700 0dec 80B4     		push	{r7}
 2701              	.LCFI123:
 2702              		.cfi_def_cfa_offset 4
 2703              		.cfi_offset 7, -4
 2704 0dee 83B0     		sub	sp, sp, #12
 2705              	.LCFI124:
 2706              		.cfi_def_cfa_offset 16
 2707 0df0 00AF     		add	r7, sp, #0
 2708              	.LCFI125:
 2709              		.cfi_def_cfa_register 7
 2710 0df2 7860     		str	r0, [r7, #4]
 2711 0df4 1346     		mov	r3, r2
 2712 0df6 0A46     		mov	r2, r1
 2713 0df8 FA70     		strb	r2, [r7, #3]
 2714 0dfa 3B80     		strh	r3, [r7, #0]	@ movhi
1585:../src/stm32f30x_adc.c ****   /* Check the parameters */
1586:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1587:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1588:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1589:../src/stm32f30x_adc.c ****     
1590:../src/stm32f30x_adc.c ****   /* Select the Channel */
1591:../src/stm32f30x_adc.c ****   ADCx->OFR3 &= ~ (uint32_t) ADC_OFR3_OFFSET3_CH;
 2715              		.loc 1 1591 0
 2716 0dfc 7B68     		ldr	r3, [r7, #4]
 2717 0dfe 9B6E     		ldr	r3, [r3, #104]
 2718 0e00 23F0F842 		bic	r2, r3, #2080374784
 2719 0e04 7B68     		ldr	r3, [r7, #4]
 2720 0e06 9A66     		str	r2, [r3, #104]
1592:../src/stm32f30x_adc.c ****   ADCx->OFR3 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 2721              		.loc 1 1592 0
 2722 0e08 7B68     		ldr	r3, [r7, #4]
 2723 0e0a 9A6E     		ldr	r2, [r3, #104]
 2724 0e0c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2725 0e0e 4FEA8363 		lsl	r3, r3, #26
 2726 0e12 1A43     		orrs	r2, r2, r3
 2727 0e14 7B68     		ldr	r3, [r7, #4]
 2728 0e16 9A66     		str	r2, [r3, #104]
1593:../src/stm32f30x_adc.c **** 
1594:../src/stm32f30x_adc.c ****   /* Set the data offset */
1595:../src/stm32f30x_adc.c ****   ADCx->OFR3 &= ~ (uint32_t) ADC_OFR3_OFFSET3;
 2729              		.loc 1 1595 0
 2730 0e18 7B68     		ldr	r3, [r7, #4]
 2731 0e1a 9B6E     		ldr	r3, [r3, #104]
 2732 0e1c 23F47F63 		bic	r3, r3, #4080
 2733 0e20 23F00F03 		bic	r3, r3, #15
 2734 0e24 7A68     		ldr	r2, [r7, #4]
 2735 0e26 9366     		str	r3, [r2, #104]
1596:../src/stm32f30x_adc.c ****   ADCx->OFR3 |= (uint32_t)Offset;
 2736              		.loc 1 1596 0
 2737 0e28 7B68     		ldr	r3, [r7, #4]
 2738 0e2a 9A6E     		ldr	r2, [r3, #104]
 2739 0e2c 3B88     		ldrh	r3, [r7, #0]
 2740 0e2e 1A43     		orrs	r2, r2, r3
 2741 0e30 7B68     		ldr	r3, [r7, #4]
 2742 0e32 9A66     		str	r2, [r3, #104]
1597:../src/stm32f30x_adc.c **** }
 2743              		.loc 1 1597 0
 2744 0e34 07F10C07 		add	r7, r7, #12
 2745 0e38 BD46     		mov	sp, r7
 2746 0e3a 80BC     		pop	{r7}
 2747 0e3c 7047     		bx	lr
 2748              		.cfi_endproc
 2749              	.LFE152:
 2751 0e3e 00BF     		.align	2
 2752              		.global	ADC_SetChannelOffset4
 2753              		.thumb
 2754              		.thumb_func
 2756              	ADC_SetChannelOffset4:
 2757              	.LFB153:
1598:../src/stm32f30x_adc.c **** 
1599:../src/stm32f30x_adc.c **** /**
1600:../src/stm32f30x_adc.c ****   * @brief  Set the ADC channels conversion value offset4
1601:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1602:../src/stm32f30x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1603:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
1604:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
1605:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
1606:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
1607:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
1608:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
1609:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
1610:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
1611:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
1612:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
1613:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
1614:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
1615:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
1616:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
1617:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
1618:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
1619:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
1620:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
1621:../src/stm32f30x_adc.c ****   *     @arg ADC_Channel_18: ADC Channel18 selected
1622:../src/stm32f30x_adc.c ****   * @param  Offset: the offset value for the selected ADC Channel
1623:../src/stm32f30x_adc.c ****   *   This parameter must be a 12bit value.
1624:../src/stm32f30x_adc.c ****   * @retval None
1625:../src/stm32f30x_adc.c ****   */
1626:../src/stm32f30x_adc.c **** void ADC_SetChannelOffset4(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
1627:../src/stm32f30x_adc.c **** {
 2758              		.loc 1 1627 0
 2759              		.cfi_startproc
 2760              		@ args = 0, pretend = 0, frame = 8
 2761              		@ frame_needed = 1, uses_anonymous_args = 0
 2762              		@ link register save eliminated.
 2763 0e40 80B4     		push	{r7}
 2764              	.LCFI126:
 2765              		.cfi_def_cfa_offset 4
 2766              		.cfi_offset 7, -4
 2767 0e42 83B0     		sub	sp, sp, #12
 2768              	.LCFI127:
 2769              		.cfi_def_cfa_offset 16
 2770 0e44 00AF     		add	r7, sp, #0
 2771              	.LCFI128:
 2772              		.cfi_def_cfa_register 7
 2773 0e46 7860     		str	r0, [r7, #4]
 2774 0e48 1346     		mov	r3, r2
 2775 0e4a 0A46     		mov	r2, r1
 2776 0e4c FA70     		strb	r2, [r7, #3]
 2777 0e4e 3B80     		strh	r3, [r7, #0]	@ movhi
1628:../src/stm32f30x_adc.c ****   /* Check the parameters */
1629:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1630:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1631:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1632:../src/stm32f30x_adc.c ****     
1633:../src/stm32f30x_adc.c ****   /* Select the Channel */
1634:../src/stm32f30x_adc.c ****   ADCx->OFR4 &= ~ (uint32_t) ADC_OFR4_OFFSET4_CH;
 2778              		.loc 1 1634 0
 2779 0e50 7B68     		ldr	r3, [r7, #4]
 2780 0e52 DB6E     		ldr	r3, [r3, #108]
 2781 0e54 23F0F842 		bic	r2, r3, #2080374784
 2782 0e58 7B68     		ldr	r3, [r7, #4]
 2783 0e5a DA66     		str	r2, [r3, #108]
1635:../src/stm32f30x_adc.c ****   ADCx->OFR4 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 2784              		.loc 1 1635 0
 2785 0e5c 7B68     		ldr	r3, [r7, #4]
 2786 0e5e DA6E     		ldr	r2, [r3, #108]
 2787 0e60 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2788 0e62 4FEA8363 		lsl	r3, r3, #26
 2789 0e66 1A43     		orrs	r2, r2, r3
 2790 0e68 7B68     		ldr	r3, [r7, #4]
 2791 0e6a DA66     		str	r2, [r3, #108]
1636:../src/stm32f30x_adc.c **** 
1637:../src/stm32f30x_adc.c ****   /* Set the data offset */
1638:../src/stm32f30x_adc.c ****   ADCx->OFR4 &= ~ (uint32_t) ADC_OFR4_OFFSET4;
 2792              		.loc 1 1638 0
 2793 0e6c 7B68     		ldr	r3, [r7, #4]
 2794 0e6e DB6E     		ldr	r3, [r3, #108]
 2795 0e70 23F47F63 		bic	r3, r3, #4080
 2796 0e74 23F00F03 		bic	r3, r3, #15
 2797 0e78 7A68     		ldr	r2, [r7, #4]
 2798 0e7a D366     		str	r3, [r2, #108]
1639:../src/stm32f30x_adc.c ****   ADCx->OFR4 |= (uint32_t)Offset;
 2799              		.loc 1 1639 0
 2800 0e7c 7B68     		ldr	r3, [r7, #4]
 2801 0e7e DA6E     		ldr	r2, [r3, #108]
 2802 0e80 3B88     		ldrh	r3, [r7, #0]
 2803 0e82 1A43     		orrs	r2, r2, r3
 2804 0e84 7B68     		ldr	r3, [r7, #4]
 2805 0e86 DA66     		str	r2, [r3, #108]
1640:../src/stm32f30x_adc.c **** }
 2806              		.loc 1 1640 0
 2807 0e88 07F10C07 		add	r7, r7, #12
 2808 0e8c BD46     		mov	sp, r7
 2809 0e8e 80BC     		pop	{r7}
 2810 0e90 7047     		bx	lr
 2811              		.cfi_endproc
 2812              	.LFE153:
 2814 0e92 00BF     		.align	2
 2815              		.global	ADC_ChannelOffset1Cmd
 2816              		.thumb
 2817              		.thumb_func
 2819              	ADC_ChannelOffset1Cmd:
 2820              	.LFB154:
1641:../src/stm32f30x_adc.c **** 
1642:../src/stm32f30x_adc.c **** /**
1643:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the Offset1.
1644:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1645:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the ADCx offset1.
1646:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1647:../src/stm32f30x_adc.c ****   * @retval None
1648:../src/stm32f30x_adc.c ****   */
1649:../src/stm32f30x_adc.c **** void ADC_ChannelOffset1Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1650:../src/stm32f30x_adc.c **** {
 2821              		.loc 1 1650 0
 2822              		.cfi_startproc
 2823              		@ args = 0, pretend = 0, frame = 8
 2824              		@ frame_needed = 1, uses_anonymous_args = 0
 2825              		@ link register save eliminated.
 2826 0e94 80B4     		push	{r7}
 2827              	.LCFI129:
 2828              		.cfi_def_cfa_offset 4
 2829              		.cfi_offset 7, -4
 2830 0e96 83B0     		sub	sp, sp, #12
 2831              	.LCFI130:
 2832              		.cfi_def_cfa_offset 16
 2833 0e98 00AF     		add	r7, sp, #0
 2834              	.LCFI131:
 2835              		.cfi_def_cfa_register 7
 2836 0e9a 7860     		str	r0, [r7, #4]
 2837 0e9c 0B46     		mov	r3, r1
 2838 0e9e FB70     		strb	r3, [r7, #3]
1651:../src/stm32f30x_adc.c ****   /* Check the parameters */
1652:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1653:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1654:../src/stm32f30x_adc.c **** 
1655:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 2839              		.loc 1 1655 0
 2840 0ea0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2841 0ea2 002B     		cmp	r3, #0
 2842 0ea4 06D0     		beq	.L106
1656:../src/stm32f30x_adc.c ****   {
1657:../src/stm32f30x_adc.c ****     /* Set the OFFSET1_EN bit */
1658:../src/stm32f30x_adc.c ****     ADCx->OFR1 |= ADC_OFR1_OFFSET1_EN;
 2843              		.loc 1 1658 0
 2844 0ea6 7B68     		ldr	r3, [r7, #4]
 2845 0ea8 1B6E     		ldr	r3, [r3, #96]
 2846 0eaa 43F00042 		orr	r2, r3, #-2147483648
 2847 0eae 7B68     		ldr	r3, [r7, #4]
 2848 0eb0 1A66     		str	r2, [r3, #96]
 2849 0eb2 05E0     		b	.L105
 2850              	.L106:
1659:../src/stm32f30x_adc.c ****   }
1660:../src/stm32f30x_adc.c ****   else
1661:../src/stm32f30x_adc.c ****   {
1662:../src/stm32f30x_adc.c ****     /* Reset the OFFSET1_EN bit */
1663:../src/stm32f30x_adc.c ****     ADCx->OFR1 &= ~(ADC_OFR1_OFFSET1_EN);
 2851              		.loc 1 1663 0
 2852 0eb4 7B68     		ldr	r3, [r7, #4]
 2853 0eb6 1B6E     		ldr	r3, [r3, #96]
 2854 0eb8 23F00042 		bic	r2, r3, #-2147483648
 2855 0ebc 7B68     		ldr	r3, [r7, #4]
 2856 0ebe 1A66     		str	r2, [r3, #96]
 2857              	.L105:
1664:../src/stm32f30x_adc.c ****   }
1665:../src/stm32f30x_adc.c **** }
 2858              		.loc 1 1665 0
 2859 0ec0 07F10C07 		add	r7, r7, #12
 2860 0ec4 BD46     		mov	sp, r7
 2861 0ec6 80BC     		pop	{r7}
 2862 0ec8 7047     		bx	lr
 2863              		.cfi_endproc
 2864              	.LFE154:
 2866 0eca 00BF     		.align	2
 2867              		.global	ADC_ChannelOffset2Cmd
 2868              		.thumb
 2869              		.thumb_func
 2871              	ADC_ChannelOffset2Cmd:
 2872              	.LFB155:
1666:../src/stm32f30x_adc.c **** 
1667:../src/stm32f30x_adc.c **** /**
1668:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the Offset2.
1669:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1670:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the ADCx offset2.
1671:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1672:../src/stm32f30x_adc.c ****   * @retval None
1673:../src/stm32f30x_adc.c ****   */
1674:../src/stm32f30x_adc.c **** void ADC_ChannelOffset2Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1675:../src/stm32f30x_adc.c **** {
 2873              		.loc 1 1675 0
 2874              		.cfi_startproc
 2875              		@ args = 0, pretend = 0, frame = 8
 2876              		@ frame_needed = 1, uses_anonymous_args = 0
 2877              		@ link register save eliminated.
 2878 0ecc 80B4     		push	{r7}
 2879              	.LCFI132:
 2880              		.cfi_def_cfa_offset 4
 2881              		.cfi_offset 7, -4
 2882 0ece 83B0     		sub	sp, sp, #12
 2883              	.LCFI133:
 2884              		.cfi_def_cfa_offset 16
 2885 0ed0 00AF     		add	r7, sp, #0
 2886              	.LCFI134:
 2887              		.cfi_def_cfa_register 7
 2888 0ed2 7860     		str	r0, [r7, #4]
 2889 0ed4 0B46     		mov	r3, r1
 2890 0ed6 FB70     		strb	r3, [r7, #3]
1676:../src/stm32f30x_adc.c ****   /* Check the parameters */
1677:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1678:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1679:../src/stm32f30x_adc.c **** 
1680:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 2891              		.loc 1 1680 0
 2892 0ed8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2893 0eda 002B     		cmp	r3, #0
 2894 0edc 06D0     		beq	.L109
1681:../src/stm32f30x_adc.c ****   {
1682:../src/stm32f30x_adc.c ****     /* Set the OFFSET1_EN bit */
1683:../src/stm32f30x_adc.c ****     ADCx->OFR2 |= ADC_OFR2_OFFSET2_EN;
 2895              		.loc 1 1683 0
 2896 0ede 7B68     		ldr	r3, [r7, #4]
 2897 0ee0 5B6E     		ldr	r3, [r3, #100]
 2898 0ee2 43F00042 		orr	r2, r3, #-2147483648
 2899 0ee6 7B68     		ldr	r3, [r7, #4]
 2900 0ee8 5A66     		str	r2, [r3, #100]
 2901 0eea 05E0     		b	.L108
 2902              	.L109:
1684:../src/stm32f30x_adc.c ****   }
1685:../src/stm32f30x_adc.c ****   else
1686:../src/stm32f30x_adc.c ****   {
1687:../src/stm32f30x_adc.c ****     /* Reset the OFFSET1_EN bit */
1688:../src/stm32f30x_adc.c ****     ADCx->OFR2 &= ~(ADC_OFR2_OFFSET2_EN);
 2903              		.loc 1 1688 0
 2904 0eec 7B68     		ldr	r3, [r7, #4]
 2905 0eee 5B6E     		ldr	r3, [r3, #100]
 2906 0ef0 23F00042 		bic	r2, r3, #-2147483648
 2907 0ef4 7B68     		ldr	r3, [r7, #4]
 2908 0ef6 5A66     		str	r2, [r3, #100]
 2909              	.L108:
1689:../src/stm32f30x_adc.c ****   }
1690:../src/stm32f30x_adc.c **** }
 2910              		.loc 1 1690 0
 2911 0ef8 07F10C07 		add	r7, r7, #12
 2912 0efc BD46     		mov	sp, r7
 2913 0efe 80BC     		pop	{r7}
 2914 0f00 7047     		bx	lr
 2915              		.cfi_endproc
 2916              	.LFE155:
 2918 0f02 00BF     		.align	2
 2919              		.global	ADC_ChannelOffset3Cmd
 2920              		.thumb
 2921              		.thumb_func
 2923              	ADC_ChannelOffset3Cmd:
 2924              	.LFB156:
1691:../src/stm32f30x_adc.c **** 
1692:../src/stm32f30x_adc.c **** /**
1693:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the Offset3.
1694:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1695:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the ADCx offset3.
1696:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1697:../src/stm32f30x_adc.c ****   * @retval None
1698:../src/stm32f30x_adc.c ****   */
1699:../src/stm32f30x_adc.c **** void ADC_ChannelOffset3Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1700:../src/stm32f30x_adc.c **** {
 2925              		.loc 1 1700 0
 2926              		.cfi_startproc
 2927              		@ args = 0, pretend = 0, frame = 8
 2928              		@ frame_needed = 1, uses_anonymous_args = 0
 2929              		@ link register save eliminated.
 2930 0f04 80B4     		push	{r7}
 2931              	.LCFI135:
 2932              		.cfi_def_cfa_offset 4
 2933              		.cfi_offset 7, -4
 2934 0f06 83B0     		sub	sp, sp, #12
 2935              	.LCFI136:
 2936              		.cfi_def_cfa_offset 16
 2937 0f08 00AF     		add	r7, sp, #0
 2938              	.LCFI137:
 2939              		.cfi_def_cfa_register 7
 2940 0f0a 7860     		str	r0, [r7, #4]
 2941 0f0c 0B46     		mov	r3, r1
 2942 0f0e FB70     		strb	r3, [r7, #3]
1701:../src/stm32f30x_adc.c ****   /* Check the parameters */
1702:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1703:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1704:../src/stm32f30x_adc.c **** 
1705:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 2943              		.loc 1 1705 0
 2944 0f10 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2945 0f12 002B     		cmp	r3, #0
 2946 0f14 06D0     		beq	.L112
1706:../src/stm32f30x_adc.c ****   {
1707:../src/stm32f30x_adc.c ****     /* Set the OFFSET1_EN bit */
1708:../src/stm32f30x_adc.c ****     ADCx->OFR3 |= ADC_OFR3_OFFSET3_EN;
 2947              		.loc 1 1708 0
 2948 0f16 7B68     		ldr	r3, [r7, #4]
 2949 0f18 9B6E     		ldr	r3, [r3, #104]
 2950 0f1a 43F00042 		orr	r2, r3, #-2147483648
 2951 0f1e 7B68     		ldr	r3, [r7, #4]
 2952 0f20 9A66     		str	r2, [r3, #104]
 2953 0f22 05E0     		b	.L111
 2954              	.L112:
1709:../src/stm32f30x_adc.c ****   }
1710:../src/stm32f30x_adc.c ****   else
1711:../src/stm32f30x_adc.c ****   {
1712:../src/stm32f30x_adc.c ****     /* Reset the OFFSET1_EN bit */
1713:../src/stm32f30x_adc.c ****     ADCx->OFR3 &= ~(ADC_OFR3_OFFSET3_EN);
 2955              		.loc 1 1713 0
 2956 0f24 7B68     		ldr	r3, [r7, #4]
 2957 0f26 9B6E     		ldr	r3, [r3, #104]
 2958 0f28 23F00042 		bic	r2, r3, #-2147483648
 2959 0f2c 7B68     		ldr	r3, [r7, #4]
 2960 0f2e 9A66     		str	r2, [r3, #104]
 2961              	.L111:
1714:../src/stm32f30x_adc.c ****   }
1715:../src/stm32f30x_adc.c **** }
 2962              		.loc 1 1715 0
 2963 0f30 07F10C07 		add	r7, r7, #12
 2964 0f34 BD46     		mov	sp, r7
 2965 0f36 80BC     		pop	{r7}
 2966 0f38 7047     		bx	lr
 2967              		.cfi_endproc
 2968              	.LFE156:
 2970 0f3a 00BF     		.align	2
 2971              		.global	ADC_ChannelOffset4Cmd
 2972              		.thumb
 2973              		.thumb_func
 2975              	ADC_ChannelOffset4Cmd:
 2976              	.LFB157:
1716:../src/stm32f30x_adc.c **** 
1717:../src/stm32f30x_adc.c **** /**
1718:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the Offset4.
1719:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1720:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the ADCx offset4.
1721:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1722:../src/stm32f30x_adc.c ****   * @retval None
1723:../src/stm32f30x_adc.c ****   */
1724:../src/stm32f30x_adc.c **** void ADC_ChannelOffset4Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1725:../src/stm32f30x_adc.c **** {
 2977              		.loc 1 1725 0
 2978              		.cfi_startproc
 2979              		@ args = 0, pretend = 0, frame = 8
 2980              		@ frame_needed = 1, uses_anonymous_args = 0
 2981              		@ link register save eliminated.
 2982 0f3c 80B4     		push	{r7}
 2983              	.LCFI138:
 2984              		.cfi_def_cfa_offset 4
 2985              		.cfi_offset 7, -4
 2986 0f3e 83B0     		sub	sp, sp, #12
 2987              	.LCFI139:
 2988              		.cfi_def_cfa_offset 16
 2989 0f40 00AF     		add	r7, sp, #0
 2990              	.LCFI140:
 2991              		.cfi_def_cfa_register 7
 2992 0f42 7860     		str	r0, [r7, #4]
 2993 0f44 0B46     		mov	r3, r1
 2994 0f46 FB70     		strb	r3, [r7, #3]
1726:../src/stm32f30x_adc.c ****   /* Check the parameters */
1727:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1728:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1729:../src/stm32f30x_adc.c **** 
1730:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 2995              		.loc 1 1730 0
 2996 0f48 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2997 0f4a 002B     		cmp	r3, #0
 2998 0f4c 06D0     		beq	.L115
1731:../src/stm32f30x_adc.c ****   {
1732:../src/stm32f30x_adc.c ****     /* Set the OFFSET1_EN bit */
1733:../src/stm32f30x_adc.c ****     ADCx->OFR4 |= ADC_OFR4_OFFSET4_EN;
 2999              		.loc 1 1733 0
 3000 0f4e 7B68     		ldr	r3, [r7, #4]
 3001 0f50 DB6E     		ldr	r3, [r3, #108]
 3002 0f52 43F00042 		orr	r2, r3, #-2147483648
 3003 0f56 7B68     		ldr	r3, [r7, #4]
 3004 0f58 DA66     		str	r2, [r3, #108]
 3005 0f5a 05E0     		b	.L114
 3006              	.L115:
1734:../src/stm32f30x_adc.c ****   }
1735:../src/stm32f30x_adc.c ****   else
1736:../src/stm32f30x_adc.c ****   {
1737:../src/stm32f30x_adc.c ****     /* Reset the OFFSET1_EN bit */
1738:../src/stm32f30x_adc.c ****     ADCx->OFR4 &= ~(ADC_OFR4_OFFSET4_EN);
 3007              		.loc 1 1738 0
 3008 0f5c 7B68     		ldr	r3, [r7, #4]
 3009 0f5e DB6E     		ldr	r3, [r3, #108]
 3010 0f60 23F00042 		bic	r2, r3, #-2147483648
 3011 0f64 7B68     		ldr	r3, [r7, #4]
 3012 0f66 DA66     		str	r2, [r3, #108]
 3013              	.L114:
1739:../src/stm32f30x_adc.c ****   }
1740:../src/stm32f30x_adc.c **** }
 3014              		.loc 1 1740 0
 3015 0f68 07F10C07 		add	r7, r7, #12
 3016 0f6c BD46     		mov	sp, r7
 3017 0f6e 80BC     		pop	{r7}
 3018 0f70 7047     		bx	lr
 3019              		.cfi_endproc
 3020              	.LFE157:
 3022 0f72 00BF     		.align	2
 3023              		.global	ADC_DMACmd
 3024              		.thumb
 3025              		.thumb_func
 3027              	ADC_DMACmd:
 3028              	.LFB158:
1741:../src/stm32f30x_adc.c **** 
1742:../src/stm32f30x_adc.c **** /**
1743:../src/stm32f30x_adc.c ****   * @}
1744:../src/stm32f30x_adc.c ****   */
1745:../src/stm32f30x_adc.c **** 
1746:../src/stm32f30x_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1747:../src/stm32f30x_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1748:../src/stm32f30x_adc.c ****  *
1749:../src/stm32f30x_adc.c **** @verbatim   
1750:../src/stm32f30x_adc.c ****  ===============================================================================
1751:../src/stm32f30x_adc.c ****                    ##### Regular Channels DMA Configuration functions #####
1752:../src/stm32f30x_adc.c ****  ===============================================================================  
1753:../src/stm32f30x_adc.c **** 
1754:../src/stm32f30x_adc.c ****   [..] This section provides functions allowing to configure the DMA for ADC regular 
1755:../src/stm32f30x_adc.c ****   channels. Since converted regular channel values are stored into a unique data register, 
1756:../src/stm32f30x_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1757:../src/stm32f30x_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1758:../src/stm32f30x_adc.c ****   
1759:../src/stm32f30x_adc.c ****   (#) ADC_DMACmd() function is used to enable the ADC DMA mode, after each
1760:../src/stm32f30x_adc.c ****       conversion of a regular channel, a DMA request is generated.
1761:../src/stm32f30x_adc.c ****   (#) ADC_DMAConfig() function is used to select between the oneshot DMA mode 
1762:../src/stm32f30x_adc.c ****       or the circular DMA mode
1763:../src/stm32f30x_adc.c **** 
1764:../src/stm32f30x_adc.c **** @endverbatim
1765:../src/stm32f30x_adc.c ****   * @{
1766:../src/stm32f30x_adc.c ****   */
1767:../src/stm32f30x_adc.c **** 
1768:../src/stm32f30x_adc.c **** /**
1769:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1770:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1771:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1772:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1773:../src/stm32f30x_adc.c ****   * @retval None
1774:../src/stm32f30x_adc.c ****   */
1775:../src/stm32f30x_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1776:../src/stm32f30x_adc.c **** {
 3029              		.loc 1 1776 0
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 8
 3032              		@ frame_needed = 1, uses_anonymous_args = 0
 3033              		@ link register save eliminated.
 3034 0f74 80B4     		push	{r7}
 3035              	.LCFI141:
 3036              		.cfi_def_cfa_offset 4
 3037              		.cfi_offset 7, -4
 3038 0f76 83B0     		sub	sp, sp, #12
 3039              	.LCFI142:
 3040              		.cfi_def_cfa_offset 16
 3041 0f78 00AF     		add	r7, sp, #0
 3042              	.LCFI143:
 3043              		.cfi_def_cfa_register 7
 3044 0f7a 7860     		str	r0, [r7, #4]
 3045 0f7c 0B46     		mov	r3, r1
 3046 0f7e FB70     		strb	r3, [r7, #3]
1777:../src/stm32f30x_adc.c ****   /* Check the parameters */
1778:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_DMA_PERIPH(ADCx));
1779:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1780:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 3047              		.loc 1 1780 0
 3048 0f80 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3049 0f82 002B     		cmp	r3, #0
 3050 0f84 06D0     		beq	.L118
1781:../src/stm32f30x_adc.c ****   {
1782:../src/stm32f30x_adc.c ****     /* Enable the selected ADC DMA request */
1783:../src/stm32f30x_adc.c ****     ADCx->CFGR |= ADC_CFGR_DMAEN;
 3051              		.loc 1 1783 0
 3052 0f86 7B68     		ldr	r3, [r7, #4]
 3053 0f88 DB68     		ldr	r3, [r3, #12]
 3054 0f8a 43F00102 		orr	r2, r3, #1
 3055 0f8e 7B68     		ldr	r3, [r7, #4]
 3056 0f90 DA60     		str	r2, [r3, #12]
 3057 0f92 05E0     		b	.L117
 3058              	.L118:
1784:../src/stm32f30x_adc.c ****   }
1785:../src/stm32f30x_adc.c ****   else
1786:../src/stm32f30x_adc.c ****   {
1787:../src/stm32f30x_adc.c ****     /* Disable the selected ADC DMA request */
1788:../src/stm32f30x_adc.c ****     ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMAEN;
 3059              		.loc 1 1788 0
 3060 0f94 7B68     		ldr	r3, [r7, #4]
 3061 0f96 DB68     		ldr	r3, [r3, #12]
 3062 0f98 23F00102 		bic	r2, r3, #1
 3063 0f9c 7B68     		ldr	r3, [r7, #4]
 3064 0f9e DA60     		str	r2, [r3, #12]
 3065              	.L117:
1789:../src/stm32f30x_adc.c ****   }
1790:../src/stm32f30x_adc.c **** }
 3066              		.loc 1 1790 0
 3067 0fa0 07F10C07 		add	r7, r7, #12
 3068 0fa4 BD46     		mov	sp, r7
 3069 0fa6 80BC     		pop	{r7}
 3070 0fa8 7047     		bx	lr
 3071              		.cfi_endproc
 3072              	.LFE158:
 3074 0faa 00BF     		.align	2
 3075              		.global	ADC_DMAConfig
 3076              		.thumb
 3077              		.thumb_func
 3079              	ADC_DMAConfig:
 3080              	.LFB159:
1791:../src/stm32f30x_adc.c **** 
1792:../src/stm32f30x_adc.c **** /**
1793:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1794:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1795:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1796:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1797:../src/stm32f30x_adc.c ****   * @retval None
1798:../src/stm32f30x_adc.c ****   */
1799:../src/stm32f30x_adc.c **** void ADC_DMAConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMAMode)
1800:../src/stm32f30x_adc.c **** {
 3081              		.loc 1 1800 0
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 8
 3084              		@ frame_needed = 1, uses_anonymous_args = 0
 3085              		@ link register save eliminated.
 3086 0fac 80B4     		push	{r7}
 3087              	.LCFI144:
 3088              		.cfi_def_cfa_offset 4
 3089              		.cfi_offset 7, -4
 3090 0fae 83B0     		sub	sp, sp, #12
 3091              	.LCFI145:
 3092              		.cfi_def_cfa_offset 16
 3093 0fb0 00AF     		add	r7, sp, #0
 3094              	.LCFI146:
 3095              		.cfi_def_cfa_register 7
 3096 0fb2 7860     		str	r0, [r7, #4]
 3097 0fb4 3960     		str	r1, [r7, #0]
1801:../src/stm32f30x_adc.c ****   /* Check the parameters */
1802:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_DMA_PERIPH(ADCx));
1803:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_DMA_MODE(ADC_DMAMode));
1804:../src/stm32f30x_adc.c **** 
1805:../src/stm32f30x_adc.c ****   /* Set or reset the DMACFG bit */
1806:../src/stm32f30x_adc.c ****    ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMACFG;
 3098              		.loc 1 1806 0
 3099 0fb6 7B68     		ldr	r3, [r7, #4]
 3100 0fb8 DB68     		ldr	r3, [r3, #12]
 3101 0fba 23F00202 		bic	r2, r3, #2
 3102 0fbe 7B68     		ldr	r3, [r7, #4]
 3103 0fc0 DA60     		str	r2, [r3, #12]
1807:../src/stm32f30x_adc.c ****    ADCx->CFGR |= ADC_DMAMode;
 3104              		.loc 1 1807 0
 3105 0fc2 7B68     		ldr	r3, [r7, #4]
 3106 0fc4 DA68     		ldr	r2, [r3, #12]
 3107 0fc6 3B68     		ldr	r3, [r7, #0]
 3108 0fc8 1A43     		orrs	r2, r2, r3
 3109 0fca 7B68     		ldr	r3, [r7, #4]
 3110 0fcc DA60     		str	r2, [r3, #12]
1808:../src/stm32f30x_adc.c **** }
 3111              		.loc 1 1808 0
 3112 0fce 07F10C07 		add	r7, r7, #12
 3113 0fd2 BD46     		mov	sp, r7
 3114 0fd4 80BC     		pop	{r7}
 3115 0fd6 7047     		bx	lr
 3116              		.cfi_endproc
 3117              	.LFE159:
 3119              		.align	2
 3120              		.global	ADC_InjectedChannelSampleTimeConfig
 3121              		.thumb
 3122              		.thumb_func
 3124              	ADC_InjectedChannelSampleTimeConfig:
 3125              	.LFB160:
1809:../src/stm32f30x_adc.c **** 
1810:../src/stm32f30x_adc.c **** /**
1811:../src/stm32f30x_adc.c ****   * @}
1812:../src/stm32f30x_adc.c ****   */
1813:../src/stm32f30x_adc.c **** 
1814:../src/stm32f30x_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1815:../src/stm32f30x_adc.c ****  *  @brief   Injected channels Configuration functions 
1816:../src/stm32f30x_adc.c ****  *
1817:../src/stm32f30x_adc.c **** @verbatim   
1818:../src/stm32f30x_adc.c ****  ===============================================================================
1819:../src/stm32f30x_adc.c ****                      ##### Injected channels Configuration functions #####
1820:../src/stm32f30x_adc.c ****  ===============================================================================  
1821:../src/stm32f30x_adc.c **** 
1822:../src/stm32f30x_adc.c ****   [..] This section provide functions allowing to manage the ADC Injected channels,
1823:../src/stm32f30x_adc.c ****   it is composed of : 
1824:../src/stm32f30x_adc.c ****     
1825:../src/stm32f30x_adc.c ****    (#) Configuration functions for Injected channels sample time
1826:../src/stm32f30x_adc.c ****    (#) Functions to start and stop the injected conversion
1827:../src/stm32f30x_adc.c ****    (#) unction to select the discontinuous mode    
1828:../src/stm32f30x_adc.c ****    (#) Function to get the Specified Injected channel conversion data: This subsection 
1829:../src/stm32f30x_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1830:../src/stm32f30x_adc.c ****       converted data of the specific injected channel.
1831:../src/stm32f30x_adc.c **** 
1832:../src/stm32f30x_adc.c **** @endverbatim
1833:../src/stm32f30x_adc.c ****   * @{
1834:../src/stm32f30x_adc.c ****   */ 
1835:../src/stm32f30x_adc.c **** 
1836:../src/stm32f30x_adc.c **** /**
1837:../src/stm32f30x_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1838:../src/stm32f30x_adc.c ****   *         sample time.
1839:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1840:../src/stm32f30x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1841:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
1842:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_1: ADC Channel1 selected
1843:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_2: ADC Channel2 selected
1844:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_3: ADC Channel3 selected
1845:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_4: ADC Channel4 selected
1846:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_5: ADC Channel5 selected
1847:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_6: ADC Channel6 selected
1848:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_7: ADC Channel7 selected
1849:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_8: ADC Channel8 selected
1850:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_9: ADC Channel9 selected
1851:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_10: ADC Channel10 selected
1852:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_11: ADC Channel11 selected
1853:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_12: ADC Channel12 selected
1854:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_13: ADC Channel13 selected
1855:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_14: ADC Channel14 selected
1856:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_15: ADC Channel15 selected
1857:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_16: ADC Channel16 selected
1858:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_17: ADC Channel17 selected
1859:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedChannel_18: ADC Channel18 selected
1860:../src/stm32f30x_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1861:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
1862:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
1863:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_2Cycles5: Sample time equal to 2.5 cycles
1864:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_4Cycles5: Sample time equal to 4.5 cycles
1865:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles	
1866:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_19Cycles5: Sample time equal to 19.5 cycles	
1867:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_61Cycles5: Sample time equal to 61.5 cycles	
1868:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
1869:../src/stm32f30x_adc.c ****   *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
1870:../src/stm32f30x_adc.c ****   * @retval None
1871:../src/stm32f30x_adc.c ****   */
1872:../src/stm32f30x_adc.c **** void ADC_InjectedChannelSampleTimeConfig(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint8_t AD
1873:../src/stm32f30x_adc.c **** {
 3126              		.loc 1 1873 0
 3127              		.cfi_startproc
 3128              		@ args = 0, pretend = 0, frame = 16
 3129              		@ frame_needed = 1, uses_anonymous_args = 0
 3130              		@ link register save eliminated.
 3131 0fd8 80B4     		push	{r7}
 3132              	.LCFI147:
 3133              		.cfi_def_cfa_offset 4
 3134              		.cfi_offset 7, -4
 3135 0fda 85B0     		sub	sp, sp, #20
 3136              	.LCFI148:
 3137              		.cfi_def_cfa_offset 24
 3138 0fdc 00AF     		add	r7, sp, #0
 3139              	.LCFI149:
 3140              		.cfi_def_cfa_register 7
 3141 0fde 7860     		str	r0, [r7, #4]
 3142 0fe0 1346     		mov	r3, r2
 3143 0fe2 0A46     		mov	r2, r1
 3144 0fe4 FA70     		strb	r2, [r7, #3]
 3145 0fe6 BB70     		strb	r3, [r7, #2]
1874:../src/stm32f30x_adc.c ****   uint32_t tmpreg1 = 0;
 3146              		.loc 1 1874 0
 3147 0fe8 4FF00003 		mov	r3, #0
 3148 0fec FB60     		str	r3, [r7, #12]
1875:../src/stm32f30x_adc.c ****   /* Check the parameters */
1876:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1877:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1878:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1879:../src/stm32f30x_adc.c **** 
1880:../src/stm32f30x_adc.c ****   /* Channel sampling configuration */
1881:../src/stm32f30x_adc.c ****   /* if ADC_InjectedChannel_10 ... ADC_InjectedChannel_18 is selected */
1882:../src/stm32f30x_adc.c ****   if (ADC_InjectedChannel > ADC_InjectedChannel_9)
 3149              		.loc 1 1882 0
 3150 0fee FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3151 0ff0 092B     		cmp	r3, #9
 3152 0ff2 24D9     		bls	.L122
1883:../src/stm32f30x_adc.c ****   {
1884:../src/stm32f30x_adc.c ****     /* Calculate the mask to clear */
1885:../src/stm32f30x_adc.c ****     tmpreg1 = ADC_SMPR2_SMP10 << (3 * (ADC_InjectedChannel - 10));
 3153              		.loc 1 1885 0
 3154 0ff4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3155 0ff6 1346     		mov	r3, r2
 3156 0ff8 4FEA4303 		lsl	r3, r3, #1
 3157 0ffc 9B18     		adds	r3, r3, r2
 3158 0ffe A3F11E03 		sub	r3, r3, #30
 3159 1002 4FF00702 		mov	r2, #7
 3160 1006 02FA03F3 		lsl	r3, r2, r3
 3161 100a FB60     		str	r3, [r7, #12]
1886:../src/stm32f30x_adc.c ****     /* Clear the old channel sample time */
1887:../src/stm32f30x_adc.c **** 	ADCx->SMPR2 &= ~tmpreg1;
 3162              		.loc 1 1887 0
 3163 100c 7B68     		ldr	r3, [r7, #4]
 3164 100e 9A69     		ldr	r2, [r3, #24]
 3165 1010 FB68     		ldr	r3, [r7, #12]
 3166 1012 6FEA0303 		mvn	r3, r3
 3167 1016 1A40     		ands	r2, r2, r3
 3168 1018 7B68     		ldr	r3, [r7, #4]
 3169 101a 9A61     		str	r2, [r3, #24]
1888:../src/stm32f30x_adc.c ****     /* Calculate the mask to set */
1889:../src/stm32f30x_adc.c **** 	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_InjectedChannel - 10));
 3170              		.loc 1 1889 0
 3171 101c 7B68     		ldr	r3, [r7, #4]
 3172 101e 9969     		ldr	r1, [r3, #24]
 3173 1020 B878     		ldrb	r0, [r7, #2]	@ zero_extendqisi2
 3174 1022 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3175 1024 1346     		mov	r3, r2
 3176 1026 4FEA4303 		lsl	r3, r3, #1
 3177 102a 9B18     		adds	r3, r3, r2
 3178 102c A3F11E03 		sub	r3, r3, #30
 3179 1030 00FA03F3 		lsl	r3, r0, r3
 3180 1034 41EA0302 		orr	r2, r1, r3
 3181 1038 7B68     		ldr	r3, [r7, #4]
 3182 103a 9A61     		str	r2, [r3, #24]
 3183 103c 21E0     		b	.L121
 3184              	.L122:
1890:../src/stm32f30x_adc.c **** 
1891:../src/stm32f30x_adc.c ****   }
1892:../src/stm32f30x_adc.c ****   else /* ADC_InjectedChannel include in ADC_InjectedChannel_[0..9] */
1893:../src/stm32f30x_adc.c ****   {
1894:../src/stm32f30x_adc.c ****     /* Calculate the mask to clear */
1895:../src/stm32f30x_adc.c ****     tmpreg1 = ADC_SMPR1_SMP1 << (3 * (ADC_InjectedChannel - 1));
 3185              		.loc 1 1895 0
 3186 103e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3187 1040 03F1FF32 		add	r2, r3, #-1
 3188 1044 1346     		mov	r3, r2
 3189 1046 4FEA4303 		lsl	r3, r3, #1
 3190 104a 9B18     		adds	r3, r3, r2
 3191 104c 4FF03802 		mov	r2, #56
 3192 1050 02FA03F3 		lsl	r3, r2, r3
 3193 1054 FB60     		str	r3, [r7, #12]
1896:../src/stm32f30x_adc.c ****     /* Clear the old channel sample time */
1897:../src/stm32f30x_adc.c **** 	ADCx->SMPR1 &= ~tmpreg1;
 3194              		.loc 1 1897 0
 3195 1056 7B68     		ldr	r3, [r7, #4]
 3196 1058 5A69     		ldr	r2, [r3, #20]
 3197 105a FB68     		ldr	r3, [r7, #12]
 3198 105c 6FEA0303 		mvn	r3, r3
 3199 1060 1A40     		ands	r2, r2, r3
 3200 1062 7B68     		ldr	r3, [r7, #4]
 3201 1064 5A61     		str	r2, [r3, #20]
1898:../src/stm32f30x_adc.c ****     /* Calculate the mask to set */
1899:../src/stm32f30x_adc.c **** 	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_InjectedChannel));
 3202              		.loc 1 1899 0
 3203 1066 7B68     		ldr	r3, [r7, #4]
 3204 1068 5969     		ldr	r1, [r3, #20]
 3205 106a B878     		ldrb	r0, [r7, #2]	@ zero_extendqisi2
 3206 106c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3207 106e 1346     		mov	r3, r2
 3208 1070 4FEA4303 		lsl	r3, r3, #1
 3209 1074 9B18     		adds	r3, r3, r2
 3210 1076 00FA03F3 		lsl	r3, r0, r3
 3211 107a 41EA0302 		orr	r2, r1, r3
 3212 107e 7B68     		ldr	r3, [r7, #4]
 3213 1080 5A61     		str	r2, [r3, #20]
 3214              	.L121:
1900:../src/stm32f30x_adc.c ****   }  
1901:../src/stm32f30x_adc.c **** }
 3215              		.loc 1 1901 0
 3216 1082 07F11407 		add	r7, r7, #20
 3217 1086 BD46     		mov	sp, r7
 3218 1088 80BC     		pop	{r7}
 3219 108a 7047     		bx	lr
 3220              		.cfi_endproc
 3221              	.LFE160:
 3223              		.align	2
 3224              		.global	ADC_StartInjectedConversion
 3225              		.thumb
 3226              		.thumb_func
 3228              	ADC_StartInjectedConversion:
 3229              	.LFB161:
1902:../src/stm32f30x_adc.c **** 
1903:../src/stm32f30x_adc.c **** /**
1904:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the selected ADC start of the injected 
1905:../src/stm32f30x_adc.c ****   *         channels conversion.
1906:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1907:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the selected ADC software start injected conversion.
1908:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1909:../src/stm32f30x_adc.c ****   * @retval None
1910:../src/stm32f30x_adc.c ****   */
1911:../src/stm32f30x_adc.c **** void ADC_StartInjectedConversion(ADC_TypeDef* ADCx)
1912:../src/stm32f30x_adc.c **** {
 3230              		.loc 1 1912 0
 3231              		.cfi_startproc
 3232              		@ args = 0, pretend = 0, frame = 8
 3233              		@ frame_needed = 1, uses_anonymous_args = 0
 3234              		@ link register save eliminated.
 3235 108c 80B4     		push	{r7}
 3236              	.LCFI150:
 3237              		.cfi_def_cfa_offset 4
 3238              		.cfi_offset 7, -4
 3239 108e 83B0     		sub	sp, sp, #12
 3240              	.LCFI151:
 3241              		.cfi_def_cfa_offset 16
 3242 1090 00AF     		add	r7, sp, #0
 3243              	.LCFI152:
 3244              		.cfi_def_cfa_register 7
 3245 1092 7860     		str	r0, [r7, #4]
1913:../src/stm32f30x_adc.c ****   /* Check the parameters */
1914:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1915:../src/stm32f30x_adc.c **** 
1916:../src/stm32f30x_adc.c ****   /* Enable the selected ADC conversion for injected group on external event and start the selected
1917:../src/stm32f30x_adc.c ****      ADC injected conversion */
1918:../src/stm32f30x_adc.c ****   ADCx->CR |= ADC_CR_JADSTART;
 3246              		.loc 1 1918 0
 3247 1094 7B68     		ldr	r3, [r7, #4]
 3248 1096 9B68     		ldr	r3, [r3, #8]
 3249 1098 43F00802 		orr	r2, r3, #8
 3250 109c 7B68     		ldr	r3, [r7, #4]
 3251 109e 9A60     		str	r2, [r3, #8]
1919:../src/stm32f30x_adc.c **** }
 3252              		.loc 1 1919 0
 3253 10a0 07F10C07 		add	r7, r7, #12
 3254 10a4 BD46     		mov	sp, r7
 3255 10a6 80BC     		pop	{r7}
 3256 10a8 7047     		bx	lr
 3257              		.cfi_endproc
 3258              	.LFE161:
 3260 10aa 00BF     		.align	2
 3261              		.global	ADC_StopInjectedConversion
 3262              		.thumb
 3263              		.thumb_func
 3265              	ADC_StopInjectedConversion:
 3266              	.LFB162:
1920:../src/stm32f30x_adc.c **** 
1921:../src/stm32f30x_adc.c **** /**
1922:../src/stm32f30x_adc.c ****   * @brief  Stops the selected ADC ongoing injected conversion.
1923:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1924:../src/stm32f30x_adc.c ****   * @retval None
1925:../src/stm32f30x_adc.c ****   */
1926:../src/stm32f30x_adc.c **** void ADC_StopInjectedConversion(ADC_TypeDef* ADCx)
1927:../src/stm32f30x_adc.c **** {
 3267              		.loc 1 1927 0
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 8
 3270              		@ frame_needed = 1, uses_anonymous_args = 0
 3271              		@ link register save eliminated.
 3272 10ac 80B4     		push	{r7}
 3273              	.LCFI153:
 3274              		.cfi_def_cfa_offset 4
 3275              		.cfi_offset 7, -4
 3276 10ae 83B0     		sub	sp, sp, #12
 3277              	.LCFI154:
 3278              		.cfi_def_cfa_offset 16
 3279 10b0 00AF     		add	r7, sp, #0
 3280              	.LCFI155:
 3281              		.cfi_def_cfa_register 7
 3282 10b2 7860     		str	r0, [r7, #4]
1928:../src/stm32f30x_adc.c ****   /* Check the parameters */
1929:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1930:../src/stm32f30x_adc.c **** 
1931:../src/stm32f30x_adc.c ****   /* Set the JADSTP bit */
1932:../src/stm32f30x_adc.c ****    ADCx->CR |= ADC_CR_JADSTP;
 3283              		.loc 1 1932 0
 3284 10b4 7B68     		ldr	r3, [r7, #4]
 3285 10b6 9B68     		ldr	r3, [r3, #8]
 3286 10b8 43F02002 		orr	r2, r3, #32
 3287 10bc 7B68     		ldr	r3, [r7, #4]
 3288 10be 9A60     		str	r2, [r3, #8]
1933:../src/stm32f30x_adc.c **** }
 3289              		.loc 1 1933 0
 3290 10c0 07F10C07 		add	r7, r7, #12
 3291 10c4 BD46     		mov	sp, r7
 3292 10c6 80BC     		pop	{r7}
 3293 10c8 7047     		bx	lr
 3294              		.cfi_endproc
 3295              	.LFE162:
 3297 10ca 00BF     		.align	2
 3298              		.global	ADC_GetStartInjectedConversionStatus
 3299              		.thumb
 3300              		.thumb_func
 3302              	ADC_GetStartInjectedConversionStatus:
 3303              	.LFB163:
1934:../src/stm32f30x_adc.c **** 
1935:../src/stm32f30x_adc.c **** /**
1936:../src/stm32f30x_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1937:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1938:../src/stm32f30x_adc.c ****   * @retval The new state of ADC start injected conversion (SET or RESET).
1939:../src/stm32f30x_adc.c ****   */
1940:../src/stm32f30x_adc.c **** FlagStatus ADC_GetStartInjectedConversionStatus(ADC_TypeDef* ADCx)
1941:../src/stm32f30x_adc.c **** {
 3304              		.loc 1 1941 0
 3305              		.cfi_startproc
 3306              		@ args = 0, pretend = 0, frame = 16
 3307              		@ frame_needed = 1, uses_anonymous_args = 0
 3308              		@ link register save eliminated.
 3309 10cc 80B4     		push	{r7}
 3310              	.LCFI156:
 3311              		.cfi_def_cfa_offset 4
 3312              		.cfi_offset 7, -4
 3313 10ce 85B0     		sub	sp, sp, #20
 3314              	.LCFI157:
 3315              		.cfi_def_cfa_offset 24
 3316 10d0 00AF     		add	r7, sp, #0
 3317              	.LCFI158:
 3318              		.cfi_def_cfa_register 7
 3319 10d2 7860     		str	r0, [r7, #4]
1942:../src/stm32f30x_adc.c ****   FlagStatus bitstatus = RESET;
 3320              		.loc 1 1942 0
 3321 10d4 4FF00003 		mov	r3, #0
 3322 10d8 FB73     		strb	r3, [r7, #15]
1943:../src/stm32f30x_adc.c ****   /* Check the parameters */
1944:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1945:../src/stm32f30x_adc.c **** 
1946:../src/stm32f30x_adc.c ****   /* Check the status of JADSTART bit */
1947:../src/stm32f30x_adc.c ****   if ((ADCx->CR & ADC_CR_JADSTART) != (uint32_t)RESET)
 3323              		.loc 1 1947 0
 3324 10da 7B68     		ldr	r3, [r7, #4]
 3325 10dc 9B68     		ldr	r3, [r3, #8]
 3326 10de 03F00803 		and	r3, r3, #8
 3327 10e2 002B     		cmp	r3, #0
 3328 10e4 03D0     		beq	.L127
1948:../src/stm32f30x_adc.c ****   {
1949:../src/stm32f30x_adc.c ****     /* JADSTART bit is set */
1950:../src/stm32f30x_adc.c ****     bitstatus = SET;
 3329              		.loc 1 1950 0
 3330 10e6 4FF00103 		mov	r3, #1
 3331 10ea FB73     		strb	r3, [r7, #15]
 3332 10ec 02E0     		b	.L128
 3333              	.L127:
1951:../src/stm32f30x_adc.c ****   }
1952:../src/stm32f30x_adc.c ****   else
1953:../src/stm32f30x_adc.c ****   {
1954:../src/stm32f30x_adc.c ****     /* JADSTART bit is reset */
1955:../src/stm32f30x_adc.c ****     bitstatus = RESET;
 3334              		.loc 1 1955 0
 3335 10ee 4FF00003 		mov	r3, #0
 3336 10f2 FB73     		strb	r3, [r7, #15]
 3337              	.L128:
1956:../src/stm32f30x_adc.c ****   }
1957:../src/stm32f30x_adc.c ****   /* Return the JADSTART bit status */
1958:../src/stm32f30x_adc.c ****   return  bitstatus;
 3338              		.loc 1 1958 0
 3339 10f4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1959:../src/stm32f30x_adc.c **** }
 3340              		.loc 1 1959 0
 3341 10f6 1846     		mov	r0, r3
 3342 10f8 07F11407 		add	r7, r7, #20
 3343 10fc BD46     		mov	sp, r7
 3344 10fe 80BC     		pop	{r7}
 3345 1100 7047     		bx	lr
 3346              		.cfi_endproc
 3347              	.LFE163:
 3349 1102 00BF     		.align	2
 3350              		.global	ADC_AutoInjectedConvCmd
 3351              		.thumb
 3352              		.thumb_func
 3354              	ADC_AutoInjectedConvCmd:
 3355              	.LFB164:
1960:../src/stm32f30x_adc.c **** 
1961:../src/stm32f30x_adc.c **** /**
1962:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group
1963:../src/stm32f30x_adc.c ****   *         conversion after regular one.
1964:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1965:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1966:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1967:../src/stm32f30x_adc.c ****   * @retval None
1968:../src/stm32f30x_adc.c ****   */
1969:../src/stm32f30x_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1970:../src/stm32f30x_adc.c **** {
 3356              		.loc 1 1970 0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 8
 3359              		@ frame_needed = 1, uses_anonymous_args = 0
 3360              		@ link register save eliminated.
 3361 1104 80B4     		push	{r7}
 3362              	.LCFI159:
 3363              		.cfi_def_cfa_offset 4
 3364              		.cfi_offset 7, -4
 3365 1106 83B0     		sub	sp, sp, #12
 3366              	.LCFI160:
 3367              		.cfi_def_cfa_offset 16
 3368 1108 00AF     		add	r7, sp, #0
 3369              	.LCFI161:
 3370              		.cfi_def_cfa_register 7
 3371 110a 7860     		str	r0, [r7, #4]
 3372 110c 0B46     		mov	r3, r1
 3373 110e FB70     		strb	r3, [r7, #3]
1971:../src/stm32f30x_adc.c ****   /* Check the parameters */
1972:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1973:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1974:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 3374              		.loc 1 1974 0
 3375 1110 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3376 1112 002B     		cmp	r3, #0
 3377 1114 06D0     		beq	.L131
1975:../src/stm32f30x_adc.c ****   {
1976:../src/stm32f30x_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1977:../src/stm32f30x_adc.c ****     ADCx->CFGR |= ADC_CFGR_JAUTO;
 3378              		.loc 1 1977 0
 3379 1116 7B68     		ldr	r3, [r7, #4]
 3380 1118 DB68     		ldr	r3, [r3, #12]
 3381 111a 43F00072 		orr	r2, r3, #33554432
 3382 111e 7B68     		ldr	r3, [r7, #4]
 3383 1120 DA60     		str	r2, [r3, #12]
 3384 1122 05E0     		b	.L130
 3385              	.L131:
1978:../src/stm32f30x_adc.c ****   }
1979:../src/stm32f30x_adc.c ****   else
1980:../src/stm32f30x_adc.c ****   {
1981:../src/stm32f30x_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1982:../src/stm32f30x_adc.c ****     ADCx->CFGR &= ~ADC_CFGR_JAUTO;
 3386              		.loc 1 1982 0
 3387 1124 7B68     		ldr	r3, [r7, #4]
 3388 1126 DB68     		ldr	r3, [r3, #12]
 3389 1128 23F00072 		bic	r2, r3, #33554432
 3390 112c 7B68     		ldr	r3, [r7, #4]
 3391 112e DA60     		str	r2, [r3, #12]
 3392              	.L130:
1983:../src/stm32f30x_adc.c ****   }
1984:../src/stm32f30x_adc.c **** }
 3393              		.loc 1 1984 0
 3394 1130 07F10C07 		add	r7, r7, #12
 3395 1134 BD46     		mov	sp, r7
 3396 1136 80BC     		pop	{r7}
 3397 1138 7047     		bx	lr
 3398              		.cfi_endproc
 3399              	.LFE164:
 3401 113a 00BF     		.align	2
 3402              		.global	ADC_InjectedDiscModeCmd
 3403              		.thumb
 3404              		.thumb_func
 3406              	ADC_InjectedDiscModeCmd:
 3407              	.LFB165:
1985:../src/stm32f30x_adc.c **** 
1986:../src/stm32f30x_adc.c **** /**
1987:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group
1988:../src/stm32f30x_adc.c ****   *         channel for the specified ADC
1989:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
1990:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode
1991:../src/stm32f30x_adc.c ****   *         on injected group channel.
1992:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1993:../src/stm32f30x_adc.c ****   * @retval None
1994:../src/stm32f30x_adc.c ****   */
1995:../src/stm32f30x_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1996:../src/stm32f30x_adc.c **** {
 3408              		.loc 1 1996 0
 3409              		.cfi_startproc
 3410              		@ args = 0, pretend = 0, frame = 8
 3411              		@ frame_needed = 1, uses_anonymous_args = 0
 3412              		@ link register save eliminated.
 3413 113c 80B4     		push	{r7}
 3414              	.LCFI162:
 3415              		.cfi_def_cfa_offset 4
 3416              		.cfi_offset 7, -4
 3417 113e 83B0     		sub	sp, sp, #12
 3418              	.LCFI163:
 3419              		.cfi_def_cfa_offset 16
 3420 1140 00AF     		add	r7, sp, #0
 3421              	.LCFI164:
 3422              		.cfi_def_cfa_register 7
 3423 1142 7860     		str	r0, [r7, #4]
 3424 1144 0B46     		mov	r3, r1
 3425 1146 FB70     		strb	r3, [r7, #3]
1997:../src/stm32f30x_adc.c ****   /* Check the parameters */
1998:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1999:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2000:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 3426              		.loc 1 2000 0
 3427 1148 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3428 114a 002B     		cmp	r3, #0
 3429 114c 06D0     		beq	.L134
2001:../src/stm32f30x_adc.c ****   {
2002:../src/stm32f30x_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
2003:../src/stm32f30x_adc.c ****     ADCx->CFGR |= ADC_CFGR_JDISCEN;
 3430              		.loc 1 2003 0
 3431 114e 7B68     		ldr	r3, [r7, #4]
 3432 1150 DB68     		ldr	r3, [r3, #12]
 3433 1152 43F48012 		orr	r2, r3, #1048576
 3434 1156 7B68     		ldr	r3, [r7, #4]
 3435 1158 DA60     		str	r2, [r3, #12]
 3436 115a 05E0     		b	.L133
 3437              	.L134:
2004:../src/stm32f30x_adc.c ****   }
2005:../src/stm32f30x_adc.c ****   else
2006:../src/stm32f30x_adc.c ****   {
2007:../src/stm32f30x_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
2008:../src/stm32f30x_adc.c ****     ADCx->CFGR &= ~ADC_CFGR_JDISCEN;
 3438              		.loc 1 2008 0
 3439 115c 7B68     		ldr	r3, [r7, #4]
 3440 115e DB68     		ldr	r3, [r3, #12]
 3441 1160 23F48012 		bic	r2, r3, #1048576
 3442 1164 7B68     		ldr	r3, [r7, #4]
 3443 1166 DA60     		str	r2, [r3, #12]
 3444              	.L133:
2009:../src/stm32f30x_adc.c ****   }
2010:../src/stm32f30x_adc.c **** }
 3445              		.loc 1 2010 0
 3446 1168 07F10C07 		add	r7, r7, #12
 3447 116c BD46     		mov	sp, r7
 3448 116e 80BC     		pop	{r7}
 3449 1170 7047     		bx	lr
 3450              		.cfi_endproc
 3451              	.LFE165:
 3453 1172 00BF     		.align	2
 3454              		.global	ADC_GetInjectedConversionValue
 3455              		.thumb
 3456              		.thumb_func
 3458              	ADC_GetInjectedConversionValue:
 3459              	.LFB166:
2011:../src/stm32f30x_adc.c **** 
2012:../src/stm32f30x_adc.c **** /**
2013:../src/stm32f30x_adc.c ****   * @brief  Returns the ADC injected channel conversion result
2014:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
2015:../src/stm32f30x_adc.c ****   * @param  ADC_InjectedSequence: the converted ADC injected sequence.
2016:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
2017:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedSequence_1: Injected Sequence1 selected
2018:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedSequence_2: Injected Sequence2 selected
2019:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedSequence_3: Injected Sequence3 selected
2020:../src/stm32f30x_adc.c ****   *     @arg ADC_InjectedSequence_4: Injected Sequence4 selected
2021:../src/stm32f30x_adc.c ****   * @retval The Data conversion value.
2022:../src/stm32f30x_adc.c ****   */
2023:../src/stm32f30x_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedSequence)
2024:../src/stm32f30x_adc.c **** {
 3460              		.loc 1 2024 0
 3461              		.cfi_startproc
 3462              		@ args = 0, pretend = 0, frame = 16
 3463              		@ frame_needed = 1, uses_anonymous_args = 0
 3464              		@ link register save eliminated.
 3465 1174 80B4     		push	{r7}
 3466              	.LCFI165:
 3467              		.cfi_def_cfa_offset 4
 3468              		.cfi_offset 7, -4
 3469 1176 85B0     		sub	sp, sp, #20
 3470              	.LCFI166:
 3471              		.cfi_def_cfa_offset 24
 3472 1178 00AF     		add	r7, sp, #0
 3473              	.LCFI167:
 3474              		.cfi_def_cfa_register 7
 3475 117a 7860     		str	r0, [r7, #4]
 3476 117c 0B46     		mov	r3, r1
 3477 117e FB70     		strb	r3, [r7, #3]
2025:../src/stm32f30x_adc.c ****   __IO uint32_t tmp = 0;
 3478              		.loc 1 2025 0
 3479 1180 4FF00003 		mov	r3, #0
 3480 1184 FB60     		str	r3, [r7, #12]
2026:../src/stm32f30x_adc.c ****   
2027:../src/stm32f30x_adc.c ****   /* Check the parameters */
2028:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
2029:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_INJECTED_SEQUENCE(ADC_InjectedSequence));
2030:../src/stm32f30x_adc.c **** 
2031:../src/stm32f30x_adc.c ****   tmp = (uint32_t)ADCx;
 3481              		.loc 1 2031 0
 3482 1186 7B68     		ldr	r3, [r7, #4]
 3483 1188 FB60     		str	r3, [r7, #12]
2032:../src/stm32f30x_adc.c ****   tmp += ((ADC_InjectedSequence - 1 )<< 2) + JDR_Offset;
 3484              		.loc 1 2032 0
 3485 118a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3486 118c 03F1FF33 		add	r3, r3, #-1
 3487 1190 4FEA8303 		lsl	r3, r3, #2
 3488 1194 1A46     		mov	r2, r3
 3489 1196 FB68     		ldr	r3, [r7, #12]
 3490 1198 D318     		adds	r3, r2, r3
 3491 119a 03F18003 		add	r3, r3, #128
 3492 119e FB60     		str	r3, [r7, #12]
2033:../src/stm32f30x_adc.c ****   
2034:../src/stm32f30x_adc.c ****   /* Returns the selected injected channel conversion data value */
2035:../src/stm32f30x_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp);   
 3493              		.loc 1 2035 0
 3494 11a0 FB68     		ldr	r3, [r7, #12]
 3495 11a2 1B68     		ldr	r3, [r3, #0]
 3496 11a4 9BB2     		uxth	r3, r3
2036:../src/stm32f30x_adc.c **** }
 3497              		.loc 1 2036 0
 3498 11a6 1846     		mov	r0, r3
 3499 11a8 07F11407 		add	r7, r7, #20
 3500 11ac BD46     		mov	sp, r7
 3501 11ae 80BC     		pop	{r7}
 3502 11b0 7047     		bx	lr
 3503              		.cfi_endproc
 3504              	.LFE166:
 3506 11b2 00BF     		.align	2
 3507              		.global	ADC_ITConfig
 3508              		.thumb
 3509              		.thumb_func
 3511              	ADC_ITConfig:
 3512              	.LFB167:
2037:../src/stm32f30x_adc.c **** 
2038:../src/stm32f30x_adc.c **** /**
2039:../src/stm32f30x_adc.c ****   * @}
2040:../src/stm32f30x_adc.c ****   */
2041:../src/stm32f30x_adc.c **** 
2042:../src/stm32f30x_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
2043:../src/stm32f30x_adc.c ****  *  @brief   Interrupts and flags management functions
2044:../src/stm32f30x_adc.c ****  *
2045:../src/stm32f30x_adc.c **** @verbatim   
2046:../src/stm32f30x_adc.c ****  ===============================================================================
2047:../src/stm32f30x_adc.c ****                    ##### Interrupts and flags management functions #####
2048:../src/stm32f30x_adc.c ****  ===============================================================================  
2049:../src/stm32f30x_adc.c **** 
2050:../src/stm32f30x_adc.c ****   [..] This section provides functions allowing to configure the ADC Interrupts, get 
2051:../src/stm32f30x_adc.c ****         the status and clear flags and Interrupts pending bits.
2052:../src/stm32f30x_adc.c ****   
2053:../src/stm32f30x_adc.c ****   [..] The ADC provide 11 Interrupts sources and 11 Flags which can be divided into 3 groups:
2054:../src/stm32f30x_adc.c ****   
2055:../src/stm32f30x_adc.c ****   (#) Flags and Interrupts for ADC regular channels
2056:../src/stm32f30x_adc.c ****   (##)Flags
2057:../src/stm32f30x_adc.c ****       (+) ADC_FLAG_RDY: ADC Ready flag
2058:../src/stm32f30x_adc.c ****       (+) ADC_FLAG_EOSMP: ADC End of Sampling flag
2059:../src/stm32f30x_adc.c ****       (+) ADC_FLAG_EOC: ADC End of Regular Conversion flag.
2060:../src/stm32f30x_adc.c ****       (+) ADC_FLAG_EOS: ADC End of Regular sequence of Conversions flag
2061:../src/stm32f30x_adc.c ****       (+) ADC_FLAG_OVR: ADC overrun flag
2062:../src/stm32f30x_adc.c ****      
2063:../src/stm32f30x_adc.c ****   (##) Interrupts
2064:../src/stm32f30x_adc.c ****       (+) ADC_IT_RDY: ADC Ready interrupt source 
2065:../src/stm32f30x_adc.c ****       (+) ADC_IT_EOSMP: ADC End of Sampling interrupt source
2066:../src/stm32f30x_adc.c ****       (+) ADC_IT_EOC: ADC End of Regular Conversion interrupt source
2067:../src/stm32f30x_adc.c ****       (+) ADC_IT_EOS: ADC End of Regular sequence of Conversions interrupt
2068:../src/stm32f30x_adc.c ****       (+) ADC_IT_OVR: ADC overrun interrupt source
2069:../src/stm32f30x_adc.c ****   
2070:../src/stm32f30x_adc.c ****   
2071:../src/stm32f30x_adc.c ****   (#) Flags and Interrupts for ADC regular channels
2072:../src/stm32f30x_adc.c ****   (##)Flags
2073:../src/stm32f30x_adc.c ****       (+) ADC_FLAG_JEOC: ADC Ready flag
2074:../src/stm32f30x_adc.c ****       (+) ADC_FLAG_JEOS: ADC End of Sampling flag
2075:../src/stm32f30x_adc.c ****       (+) ADC_FLAG_JQOVF: ADC End of Regular Conversion flag.
2076:../src/stm32f30x_adc.c ****      
2077:../src/stm32f30x_adc.c ****   (##) Interrupts
2078:../src/stm32f30x_adc.c ****       (+) ADC_IT_JEOC: ADC End of Injected Conversion interrupt source 
2079:../src/stm32f30x_adc.c ****       (+) ADC_IT_JEOS: ADC End of Injected sequence of Conversions interrupt source
2080:../src/stm32f30x_adc.c ****       (+) ADC_IT_JQOVF: ADC Injected Context Queue Overflow interrupt source   
2081:../src/stm32f30x_adc.c **** 
2082:../src/stm32f30x_adc.c ****   (#) General Flags and Interrupts for the ADC
2083:../src/stm32f30x_adc.c ****   (##)Flags 
2084:../src/stm32f30x_adc.c ****      (+)  ADC_FLAG_AWD1: ADC Analog watchdog 1 flag
2085:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_AWD2: ADC Analog watchdog 2 flag
2086:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_AWD3: ADC Analog watchdog 3 flag
2087:../src/stm32f30x_adc.c ****     
2088:../src/stm32f30x_adc.c ****   (##)Flags 
2089:../src/stm32f30x_adc.c ****      (+)  ADC_IT_AWD1: ADC Analog watchdog 1 interrupt source
2090:../src/stm32f30x_adc.c ****      (+) ADC_IT_AWD2: ADC Analog watchdog 2 interrupt source
2091:../src/stm32f30x_adc.c ****      (+) ADC_IT_AWD3: ADC Analog watchdog 3 interrupt source
2092:../src/stm32f30x_adc.c ****      
2093:../src/stm32f30x_adc.c ****   (#) Flags  for ADC dual mode
2094:../src/stm32f30x_adc.c ****   (##)Flags for Master
2095:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTRDY: ADC master Ready (ADRDY) flag 
2096:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTEOSMP: ADC master End of Sampling flag 
2097:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTEOC: ADC master End of Regular Conversion flag 
2098:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTEOS: ADC master End of Regular sequence of Conversions flag 
2099:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTOVR: ADC master overrun flag 
2100:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTJEOC: ADC master End of Injected Conversion flag 
2101:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTJEOS: ADC master End of Injected sequence of Conversions flag 
2102:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTAWD1: ADC master Analog watchdog 1 flag 
2103:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTAWD2: ADC master Analog watchdog 2 flag 
2104:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTAWD3: ADC master Analog watchdog 3 flag 
2105:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_MSTJQOVF: ADC master Injected Context Queue Overflow flag       
2106:../src/stm32f30x_adc.c ****      
2107:../src/stm32f30x_adc.c ****   (##) Flags for Slave
2108:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVRDY: ADC slave Ready (ADRDY) flag 
2109:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVEOSMP: ADC slave End of Sampling flag 
2110:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVEOC: ADC slave End of Regular Conversion flag 
2111:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVEOS: ADC slave End of Regular sequence of Conversions flag 
2112:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVOVR: ADC slave overrun flag 
2113:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVJEOC: ADC slave End of Injected Conversion flag 
2114:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVJEOS: ADC slave End of Injected sequence of Conversions flag 
2115:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVAWD1: ADC slave Analog watchdog 1 flag 
2116:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVAWD2: ADC slave Analog watchdog 2 flag 
2117:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVAWD3: ADC slave Analog watchdog 3 flag 
2118:../src/stm32f30x_adc.c ****      (+) ADC_FLAG_SLVJQOVF: ADC slave Injected Context Queue Overflow flag 
2119:../src/stm32f30x_adc.c ****      
2120:../src/stm32f30x_adc.c ****   The user should identify which mode will be used in his application to manage   
2121:../src/stm32f30x_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
2122:../src/stm32f30x_adc.c ****   
2123:../src/stm32f30x_adc.c ****   In the Polling Mode it is advised to use the following functions:
2124:../src/stm32f30x_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
2125:../src/stm32f30x_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
2126:../src/stm32f30x_adc.c ****       
2127:../src/stm32f30x_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
2128:../src/stm32f30x_adc.c ****      - ADC_ITConfig()       : to enable or disable the interrupt source.
2129:../src/stm32f30x_adc.c ****      - ADC_GetITStatus()    : to check if Interrupt occurs.
2130:../src/stm32f30x_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
2131:../src/stm32f30x_adc.c ****                                 (corresponding Flag). 
2132:../src/stm32f30x_adc.c **** @endverbatim
2133:../src/stm32f30x_adc.c ****   * @{
2134:../src/stm32f30x_adc.c ****   */ 
2135:../src/stm32f30x_adc.c **** 
2136:../src/stm32f30x_adc.c **** /**
2137:../src/stm32f30x_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
2138:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
2139:../src/stm32f30x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
2140:../src/stm32f30x_adc.c ****   *   This parameter can be any combination of the following values:
2141:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_RDY: ADC Ready (ADRDY) interrupt source 
2142:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_EOSMP: ADC End of Sampling interrupt source 
2143:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_EOC: ADC End of Regular Conversion interrupt source 
2144:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_EOS: ADC End of Regular sequence of Conversions interrupt source 
2145:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_OVR: ADC overrun interrupt source 
2146:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_JEOC: ADC End of Injected Conversion interrupt source 
2147:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_JEOS: ADC End of Injected sequence of Conversions interrupt source 
2148:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_AWD1: ADC Analog watchdog 1 interrupt source 
2149:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_AWD2: ADC Analog watchdog 2 interrupt source 
2150:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_AWD3: ADC Analog watchdog 3 interrupt source 
2151:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_JQOVF: ADC Injected Context Queue Overflow interrupt source 
2152:../src/stm32f30x_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
2153:../src/stm32f30x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
2154:../src/stm32f30x_adc.c ****   * @retval None
2155:../src/stm32f30x_adc.c ****   */
2156:../src/stm32f30x_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint32_t ADC_IT, FunctionalState NewState)
2157:../src/stm32f30x_adc.c **** {
 3513              		.loc 1 2157 0
 3514              		.cfi_startproc
 3515              		@ args = 0, pretend = 0, frame = 16
 3516              		@ frame_needed = 1, uses_anonymous_args = 0
 3517              		@ link register save eliminated.
 3518 11b4 80B4     		push	{r7}
 3519              	.LCFI168:
 3520              		.cfi_def_cfa_offset 4
 3521              		.cfi_offset 7, -4
 3522 11b6 85B0     		sub	sp, sp, #20
 3523              	.LCFI169:
 3524              		.cfi_def_cfa_offset 24
 3525 11b8 00AF     		add	r7, sp, #0
 3526              	.LCFI170:
 3527              		.cfi_def_cfa_register 7
 3528 11ba F860     		str	r0, [r7, #12]
 3529 11bc B960     		str	r1, [r7, #8]
 3530 11be 1346     		mov	r3, r2
 3531 11c0 FB71     		strb	r3, [r7, #7]
2158:../src/stm32f30x_adc.c ****   /* Check the parameters */
2159:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
2160:../src/stm32f30x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2161:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
2162:../src/stm32f30x_adc.c **** 
2163:../src/stm32f30x_adc.c ****   if (NewState != DISABLE)
 3532              		.loc 1 2163 0
 3533 11c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3534 11c4 002B     		cmp	r3, #0
 3535 11c6 06D0     		beq	.L139
2164:../src/stm32f30x_adc.c ****   {
2165:../src/stm32f30x_adc.c ****     /* Enable the selected ADC interrupts */
2166:../src/stm32f30x_adc.c ****     ADCx->IER |= ADC_IT;
 3536              		.loc 1 2166 0
 3537 11c8 FB68     		ldr	r3, [r7, #12]
 3538 11ca 5A68     		ldr	r2, [r3, #4]
 3539 11cc BB68     		ldr	r3, [r7, #8]
 3540 11ce 1A43     		orrs	r2, r2, r3
 3541 11d0 FB68     		ldr	r3, [r7, #12]
 3542 11d2 5A60     		str	r2, [r3, #4]
 3543 11d4 07E0     		b	.L138
 3544              	.L139:
2167:../src/stm32f30x_adc.c ****   }
2168:../src/stm32f30x_adc.c ****   else
2169:../src/stm32f30x_adc.c ****   {
2170:../src/stm32f30x_adc.c ****     /* Disable the selected ADC interrupts */
2171:../src/stm32f30x_adc.c ****     ADCx->IER &= (~(uint32_t)ADC_IT);
 3545              		.loc 1 2171 0
 3546 11d6 FB68     		ldr	r3, [r7, #12]
 3547 11d8 5A68     		ldr	r2, [r3, #4]
 3548 11da BB68     		ldr	r3, [r7, #8]
 3549 11dc 6FEA0303 		mvn	r3, r3
 3550 11e0 1A40     		ands	r2, r2, r3
 3551 11e2 FB68     		ldr	r3, [r7, #12]
 3552 11e4 5A60     		str	r2, [r3, #4]
 3553              	.L138:
2172:../src/stm32f30x_adc.c ****   }
2173:../src/stm32f30x_adc.c **** }
 3554              		.loc 1 2173 0
 3555 11e6 07F11407 		add	r7, r7, #20
 3556 11ea BD46     		mov	sp, r7
 3557 11ec 80BC     		pop	{r7}
 3558 11ee 7047     		bx	lr
 3559              		.cfi_endproc
 3560              	.LFE167:
 3562              		.align	2
 3563              		.global	ADC_GetFlagStatus
 3564              		.thumb
 3565              		.thumb_func
 3567              	ADC_GetFlagStatus:
 3568              	.LFB168:
2174:../src/stm32f30x_adc.c **** 
2175:../src/stm32f30x_adc.c **** /**
2176:../src/stm32f30x_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
2177:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
2178:../src/stm32f30x_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
2179:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
2180:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_RDY: ADC Ready (ADRDY) flag 
2181:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_EOSMP: ADC End of Sampling flag 
2182:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_EOC: ADC End of Regular Conversion flag 
2183:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_EOS: ADC End of Regular sequence of Conversions flag 
2184:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_OVR: ADC overrun flag 
2185:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_JEOC: ADC End of Injected Conversion flag 
2186:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_JEOS: ADC End of Injected sequence of Conversions flag 
2187:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_AWD1: ADC Analog watchdog 1 flag 
2188:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_AWD2: ADC Analog watchdog 2 flag 
2189:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
2190:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
2191:../src/stm32f30x_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
2192:../src/stm32f30x_adc.c ****   */
2193:../src/stm32f30x_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
2194:../src/stm32f30x_adc.c **** {
 3569              		.loc 1 2194 0
 3570              		.cfi_startproc
 3571              		@ args = 0, pretend = 0, frame = 16
 3572              		@ frame_needed = 1, uses_anonymous_args = 0
 3573              		@ link register save eliminated.
 3574 11f0 80B4     		push	{r7}
 3575              	.LCFI171:
 3576              		.cfi_def_cfa_offset 4
 3577              		.cfi_offset 7, -4
 3578 11f2 85B0     		sub	sp, sp, #20
 3579              	.LCFI172:
 3580              		.cfi_def_cfa_offset 24
 3581 11f4 00AF     		add	r7, sp, #0
 3582              	.LCFI173:
 3583              		.cfi_def_cfa_register 7
 3584 11f6 7860     		str	r0, [r7, #4]
 3585 11f8 3960     		str	r1, [r7, #0]
2195:../src/stm32f30x_adc.c ****   FlagStatus bitstatus = RESET;
 3586              		.loc 1 2195 0
 3587 11fa 4FF00003 		mov	r3, #0
 3588 11fe FB73     		strb	r3, [r7, #15]
2196:../src/stm32f30x_adc.c ****   /* Check the parameters */
2197:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
2198:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
2199:../src/stm32f30x_adc.c **** 
2200:../src/stm32f30x_adc.c ****   /* Check the status of the specified ADC flag */
2201:../src/stm32f30x_adc.c ****   if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 3589              		.loc 1 2201 0
 3590 1200 7B68     		ldr	r3, [r7, #4]
 3591 1202 1A68     		ldr	r2, [r3, #0]
 3592 1204 3B68     		ldr	r3, [r7, #0]
 3593 1206 1340     		ands	r3, r3, r2
 3594 1208 002B     		cmp	r3, #0
 3595 120a 03D0     		beq	.L142
2202:../src/stm32f30x_adc.c ****   {
2203:../src/stm32f30x_adc.c ****     /* ADC_FLAG is set */
2204:../src/stm32f30x_adc.c ****     bitstatus = SET;
 3596              		.loc 1 2204 0
 3597 120c 4FF00103 		mov	r3, #1
 3598 1210 FB73     		strb	r3, [r7, #15]
 3599 1212 02E0     		b	.L143
 3600              	.L142:
2205:../src/stm32f30x_adc.c ****   }
2206:../src/stm32f30x_adc.c ****   else
2207:../src/stm32f30x_adc.c ****   {
2208:../src/stm32f30x_adc.c ****     /* ADC_FLAG is reset */
2209:../src/stm32f30x_adc.c ****     bitstatus = RESET;
 3601              		.loc 1 2209 0
 3602 1214 4FF00003 		mov	r3, #0
 3603 1218 FB73     		strb	r3, [r7, #15]
 3604              	.L143:
2210:../src/stm32f30x_adc.c ****   }
2211:../src/stm32f30x_adc.c ****   /* Return the ADC_FLAG status */
2212:../src/stm32f30x_adc.c ****   return  bitstatus;
 3605              		.loc 1 2212 0
 3606 121a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2213:../src/stm32f30x_adc.c **** }
 3607              		.loc 1 2213 0
 3608 121c 1846     		mov	r0, r3
 3609 121e 07F11407 		add	r7, r7, #20
 3610 1222 BD46     		mov	sp, r7
 3611 1224 80BC     		pop	{r7}
 3612 1226 7047     		bx	lr
 3613              		.cfi_endproc
 3614              	.LFE168:
 3616              		.align	2
 3617              		.global	ADC_ClearFlag
 3618              		.thumb
 3619              		.thumb_func
 3621              	ADC_ClearFlag:
 3622              	.LFB169:
2214:../src/stm32f30x_adc.c **** 
2215:../src/stm32f30x_adc.c **** /**
2216:../src/stm32f30x_adc.c ****   * @brief  Clears the ADCx's pending flags.
2217:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
2218:../src/stm32f30x_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
2219:../src/stm32f30x_adc.c ****   *   This parameter can be any combination of the following values:
2220:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_RDY: ADC Ready (ADRDY) flag 
2221:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_EOSMP: ADC End of Sampling flag 
2222:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_EOC: ADC End of Regular Conversion flag 
2223:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_EOS: ADC End of Regular sequence of Conversions flag 
2224:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_OVR: ADC overrun flag 
2225:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_JEOC: ADC End of Injected Conversion flag 
2226:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_JEOS: ADC End of Injected sequence of Conversions flag 
2227:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_AWD1: ADC Analog watchdog 1 flag 
2228:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_AWD2: ADC Analog watchdog 2 flag 
2229:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
2230:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
2231:../src/stm32f30x_adc.c ****   * @retval None
2232:../src/stm32f30x_adc.c ****   */
2233:../src/stm32f30x_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
2234:../src/stm32f30x_adc.c **** {
 3623              		.loc 1 2234 0
 3624              		.cfi_startproc
 3625              		@ args = 0, pretend = 0, frame = 8
 3626              		@ frame_needed = 1, uses_anonymous_args = 0
 3627              		@ link register save eliminated.
 3628 1228 80B4     		push	{r7}
 3629              	.LCFI174:
 3630              		.cfi_def_cfa_offset 4
 3631              		.cfi_offset 7, -4
 3632 122a 83B0     		sub	sp, sp, #12
 3633              	.LCFI175:
 3634              		.cfi_def_cfa_offset 16
 3635 122c 00AF     		add	r7, sp, #0
 3636              	.LCFI176:
 3637              		.cfi_def_cfa_register 7
 3638 122e 7860     		str	r0, [r7, #4]
 3639 1230 3960     		str	r1, [r7, #0]
2235:../src/stm32f30x_adc.c ****   /* Check the parameters */
2236:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
2237:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
2238:../src/stm32f30x_adc.c ****   /* Clear the selected ADC flags */
2239:../src/stm32f30x_adc.c ****   ADCx->ISR = (uint32_t)ADC_FLAG;
 3640              		.loc 1 2239 0
 3641 1232 7B68     		ldr	r3, [r7, #4]
 3642 1234 3A68     		ldr	r2, [r7, #0]
 3643 1236 1A60     		str	r2, [r3, #0]
2240:../src/stm32f30x_adc.c **** }
 3644              		.loc 1 2240 0
 3645 1238 07F10C07 		add	r7, r7, #12
 3646 123c BD46     		mov	sp, r7
 3647 123e 80BC     		pop	{r7}
 3648 1240 7047     		bx	lr
 3649              		.cfi_endproc
 3650              	.LFE169:
 3652 1242 00BF     		.align	2
 3653              		.global	ADC_GetCommonFlagStatus
 3654              		.thumb
 3655              		.thumb_func
 3657              	ADC_GetCommonFlagStatus:
 3658              	.LFB170:
2241:../src/stm32f30x_adc.c **** 
2242:../src/stm32f30x_adc.c **** /**
2243:../src/stm32f30x_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
2244:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
2245:../src/stm32f30x_adc.c ****   * @param  ADC_FLAG: specifies the master or slave flag to check. 
2246:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
2247:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTRDY: ADC master Ready (ADRDY) flag 
2248:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTEOSMP: ADC master End of Sampling flag 
2249:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTEOC: ADC master End of Regular Conversion flag 
2250:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTEOS: ADC master End of Regular sequence of Conversions flag 
2251:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTOVR: ADC master overrun flag 
2252:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTJEOC: ADC master End of Injected Conversion flag 
2253:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTJEOS: ADC master End of Injected sequence of Conversions flag 
2254:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTAWD1: ADC master Analog watchdog 1 flag 
2255:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTAWD2: ADC master Analog watchdog 2 flag 
2256:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTAWD3: ADC master Analog watchdog 3 flag 
2257:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTJQOVF: ADC master Injected Context Queue Overflow flag 
2258:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVRDY: ADC slave Ready (ADRDY) flag 
2259:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVEOSMP: ADC slave End of Sampling flag 
2260:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVEOC: ADC slave End of Regular Conversion flag 
2261:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVEOS: ADC slave End of Regular sequence of Conversions flag 
2262:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVOVR: ADC slave overrun flag 
2263:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVJEOC: ADC slave End of Injected Conversion flag 
2264:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVJEOS: ADC slave End of Injected sequence of Conversions flag 
2265:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVAWD1: ADC slave Analog watchdog 1 flag 
2266:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVAWD2: ADC slave Analog watchdog 2 flag 
2267:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVAWD3: ADC slave Analog watchdog 3 flag 
2268:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVJQOVF: ADC slave Injected Context Queue Overflow flag 
2269:../src/stm32f30x_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
2270:../src/stm32f30x_adc.c ****   */
2271:../src/stm32f30x_adc.c **** FlagStatus ADC_GetCommonFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
2272:../src/stm32f30x_adc.c **** {
 3659              		.loc 1 2272 0
 3660              		.cfi_startproc
 3661              		@ args = 0, pretend = 0, frame = 16
 3662              		@ frame_needed = 1, uses_anonymous_args = 0
 3663              		@ link register save eliminated.
 3664 1244 80B4     		push	{r7}
 3665              	.LCFI177:
 3666              		.cfi_def_cfa_offset 4
 3667              		.cfi_offset 7, -4
 3668 1246 85B0     		sub	sp, sp, #20
 3669              	.LCFI178:
 3670              		.cfi_def_cfa_offset 24
 3671 1248 00AF     		add	r7, sp, #0
 3672              	.LCFI179:
 3673              		.cfi_def_cfa_register 7
 3674 124a 7860     		str	r0, [r7, #4]
 3675 124c 3960     		str	r1, [r7, #0]
2273:../src/stm32f30x_adc.c ****   uint32_t tmpreg1 = 0;
 3676              		.loc 1 2273 0
 3677 124e 4FF00003 		mov	r3, #0
 3678 1252 FB60     		str	r3, [r7, #12]
2274:../src/stm32f30x_adc.c ****   FlagStatus bitstatus = RESET;
 3679              		.loc 1 2274 0
 3680 1254 4FF00003 		mov	r3, #0
 3681 1258 FB72     		strb	r3, [r7, #11]
2275:../src/stm32f30x_adc.c **** 
2276:../src/stm32f30x_adc.c ****   /* Check the parameters */
2277:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
2278:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_GET_COMMONFLAG(ADC_FLAG));
2279:../src/stm32f30x_adc.c **** 
2280:../src/stm32f30x_adc.c ****   if((ADCx == ADC1) || (ADCx == ADC2))
 3682              		.loc 1 2280 0
 3683 125a 7B68     		ldr	r3, [r7, #4]
 3684 125c B3F1A04F 		cmp	r3, #1342177280
 3685 1260 06D0     		beq	.L147
 3686              		.loc 1 2280 0 is_stmt 0 discriminator 1
 3687 1262 7A68     		ldr	r2, [r7, #4]
 3688 1264 4FF48073 		mov	r3, #256
 3689 1268 C5F20003 		movt	r3, 20480
 3690 126c 9A42     		cmp	r2, r3
 3691 126e 06D1     		bne	.L148
 3692              	.L147:
2281:../src/stm32f30x_adc.c ****   {
2282:../src/stm32f30x_adc.c ****     tmpreg1 = ADC1_2->CSR;
 3693              		.loc 1 2282 0 is_stmt 1
 3694 1270 4FF44073 		mov	r3, #768
 3695 1274 C5F20003 		movt	r3, 20480
 3696 1278 1B68     		ldr	r3, [r3, #0]
 3697 127a FB60     		str	r3, [r7, #12]
 3698 127c 05E0     		b	.L149
 3699              	.L148:
2283:../src/stm32f30x_adc.c ****   }
2284:../src/stm32f30x_adc.c ****   else
2285:../src/stm32f30x_adc.c ****   {
2286:../src/stm32f30x_adc.c ****     tmpreg1 = ADC3_4->CSR;
 3700              		.loc 1 2286 0
 3701 127e 4FF4E063 		mov	r3, #1792
 3702 1282 C5F20003 		movt	r3, 20480
 3703 1286 1B68     		ldr	r3, [r3, #0]
 3704 1288 FB60     		str	r3, [r7, #12]
 3705              	.L149:
2287:../src/stm32f30x_adc.c ****   }  
2288:../src/stm32f30x_adc.c ****   /* Check the status of the specified ADC flag */
2289:../src/stm32f30x_adc.c ****   if ((tmpreg1 & ADC_FLAG) != (uint32_t)RESET)
 3706              		.loc 1 2289 0
 3707 128a FA68     		ldr	r2, [r7, #12]
 3708 128c 3B68     		ldr	r3, [r7, #0]
 3709 128e 1340     		ands	r3, r3, r2
 3710 1290 002B     		cmp	r3, #0
 3711 1292 03D0     		beq	.L150
2290:../src/stm32f30x_adc.c ****   {
2291:../src/stm32f30x_adc.c ****     /* ADC_FLAG is set */
2292:../src/stm32f30x_adc.c ****     bitstatus = SET;
 3712              		.loc 1 2292 0
 3713 1294 4FF00103 		mov	r3, #1
 3714 1298 FB72     		strb	r3, [r7, #11]
 3715 129a 02E0     		b	.L151
 3716              	.L150:
2293:../src/stm32f30x_adc.c ****   }
2294:../src/stm32f30x_adc.c ****   else
2295:../src/stm32f30x_adc.c ****   {
2296:../src/stm32f30x_adc.c ****     /* ADC_FLAG is reset */
2297:../src/stm32f30x_adc.c ****     bitstatus = RESET;
 3717              		.loc 1 2297 0
 3718 129c 4FF00003 		mov	r3, #0
 3719 12a0 FB72     		strb	r3, [r7, #11]
 3720              	.L151:
2298:../src/stm32f30x_adc.c ****   }
2299:../src/stm32f30x_adc.c ****   /* Return the ADC_FLAG status */
2300:../src/stm32f30x_adc.c ****   return  bitstatus;
 3721              		.loc 1 2300 0
 3722 12a2 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
2301:../src/stm32f30x_adc.c **** }
 3723              		.loc 1 2301 0
 3724 12a4 1846     		mov	r0, r3
 3725 12a6 07F11407 		add	r7, r7, #20
 3726 12aa BD46     		mov	sp, r7
 3727 12ac 80BC     		pop	{r7}
 3728 12ae 7047     		bx	lr
 3729              		.cfi_endproc
 3730              	.LFE170:
 3732              		.align	2
 3733              		.global	ADC_ClearCommonFlag
 3734              		.thumb
 3735              		.thumb_func
 3737              	ADC_ClearCommonFlag:
 3738              	.LFB171:
2302:../src/stm32f30x_adc.c **** 
2303:../src/stm32f30x_adc.c **** /**
2304:../src/stm32f30x_adc.c ****   * @brief  Clears the ADCx's pending flags.
2305:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
2306:../src/stm32f30x_adc.c ****   * @param  ADC_FLAG: specifies the master or slave flag to clear. 
2307:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
2308:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTRDY: ADC master Ready (ADRDY) flag 
2309:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTEOSMP: ADC master End of Sampling flag 
2310:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTEOC: ADC master End of Regular Conversion flag 
2311:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTEOS: ADC master End of Regular sequence of Conversions flag 
2312:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTOVR: ADC master overrun flag 
2313:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTJEOC: ADC master End of Injected Conversion flag 
2314:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTJEOS: ADC master End of Injected sequence of Conversions flag 
2315:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTAWD1: ADC master Analog watchdog 1 flag 
2316:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTAWD2: ADC master Analog watchdog 2 flag 
2317:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTAWD3: ADC master Analog watchdog 3 flag 
2318:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_MSTJQOVF: ADC master Injected Context Queue Overflow flag 
2319:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVRDY: ADC slave Ready (ADRDY) flag 
2320:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVEOSMP: ADC slave End of Sampling flag 
2321:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVEOC: ADC slave End of Regular Conversion flag 
2322:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVEOS: ADC slave End of Regular sequence of Conversions flag 
2323:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVOVR: ADC slave overrun flag 
2324:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVJEOC: ADC slave End of Injected Conversion flag 
2325:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVJEOS: ADC slave End of Injected sequence of Conversions flag 
2326:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVAWD1: ADC slave Analog watchdog 1 flag 
2327:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVAWD2: ADC slave Analog watchdog 2 flag 
2328:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVAWD3: ADC slave Analog watchdog 3 flag 
2329:../src/stm32f30x_adc.c ****   *     @arg ADC_FLAG_SLVJQOVF: ADC slave Injected Context Queue Overflow flag 
2330:../src/stm32f30x_adc.c ****   * @retval None
2331:../src/stm32f30x_adc.c ****   */
2332:../src/stm32f30x_adc.c **** void ADC_ClearCommonFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
2333:../src/stm32f30x_adc.c **** {
 3739              		.loc 1 2333 0
 3740              		.cfi_startproc
 3741              		@ args = 0, pretend = 0, frame = 8
 3742              		@ frame_needed = 1, uses_anonymous_args = 0
 3743              		@ link register save eliminated.
 3744 12b0 80B4     		push	{r7}
 3745              	.LCFI180:
 3746              		.cfi_def_cfa_offset 4
 3747              		.cfi_offset 7, -4
 3748 12b2 83B0     		sub	sp, sp, #12
 3749              	.LCFI181:
 3750              		.cfi_def_cfa_offset 16
 3751 12b4 00AF     		add	r7, sp, #0
 3752              	.LCFI182:
 3753              		.cfi_def_cfa_register 7
 3754 12b6 7860     		str	r0, [r7, #4]
 3755 12b8 3960     		str	r1, [r7, #0]
2334:../src/stm32f30x_adc.c ****   /* Check the parameters */
2335:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
2336:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_CLEAR_COMMONFLAG(ADC_FLAG));
2337:../src/stm32f30x_adc.c **** 
2338:../src/stm32f30x_adc.c ****   if((ADCx == ADC1) || (ADCx == ADC2))
 3756              		.loc 1 2338 0
 3757 12ba 7B68     		ldr	r3, [r7, #4]
 3758 12bc B3F1A04F 		cmp	r3, #1342177280
 3759 12c0 06D0     		beq	.L154
 3760              		.loc 1 2338 0 is_stmt 0 discriminator 1
 3761 12c2 7A68     		ldr	r2, [r7, #4]
 3762 12c4 4FF48073 		mov	r3, #256
 3763 12c8 C5F20003 		movt	r3, 20480
 3764 12cc 9A42     		cmp	r2, r3
 3765 12ce 0CD1     		bne	.L155
 3766              	.L154:
2339:../src/stm32f30x_adc.c ****   {
2340:../src/stm32f30x_adc.c ****     /* Clear the selected ADC flags */
2341:../src/stm32f30x_adc.c ****     ADC1_2->CSR |= (uint32_t)ADC_FLAG;
 3767              		.loc 1 2341 0 is_stmt 1
 3768 12d0 4FF44073 		mov	r3, #768
 3769 12d4 C5F20003 		movt	r3, 20480
 3770 12d8 4FF44072 		mov	r2, #768
 3771 12dc C5F20002 		movt	r2, 20480
 3772 12e0 1168     		ldr	r1, [r2, #0]
 3773 12e2 3A68     		ldr	r2, [r7, #0]
 3774 12e4 0A43     		orrs	r2, r2, r1
 3775 12e6 1A60     		str	r2, [r3, #0]
 3776 12e8 0BE0     		b	.L153
 3777              	.L155:
2342:../src/stm32f30x_adc.c ****   }
2343:../src/stm32f30x_adc.c ****   else
2344:../src/stm32f30x_adc.c ****   {
2345:../src/stm32f30x_adc.c ****     /* Clear the selected ADC flags */
2346:../src/stm32f30x_adc.c ****     ADC3_4->CSR |= (uint32_t)ADC_FLAG;
 3778              		.loc 1 2346 0
 3779 12ea 4FF4E063 		mov	r3, #1792
 3780 12ee C5F20003 		movt	r3, 20480
 3781 12f2 4FF4E062 		mov	r2, #1792
 3782 12f6 C5F20002 		movt	r2, 20480
 3783 12fa 1168     		ldr	r1, [r2, #0]
 3784 12fc 3A68     		ldr	r2, [r7, #0]
 3785 12fe 0A43     		orrs	r2, r2, r1
 3786 1300 1A60     		str	r2, [r3, #0]
 3787              	.L153:
2347:../src/stm32f30x_adc.c ****   }  
2348:../src/stm32f30x_adc.c **** }
 3788              		.loc 1 2348 0
 3789 1302 07F10C07 		add	r7, r7, #12
 3790 1306 BD46     		mov	sp, r7
 3791 1308 80BC     		pop	{r7}
 3792 130a 7047     		bx	lr
 3793              		.cfi_endproc
 3794              	.LFE171:
 3796              		.align	2
 3797              		.global	ADC_GetITStatus
 3798              		.thumb
 3799              		.thumb_func
 3801              	ADC_GetITStatus:
 3802              	.LFB172:
2349:../src/stm32f30x_adc.c **** 
2350:../src/stm32f30x_adc.c **** /**
2351:../src/stm32f30x_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
2352:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
2353:../src/stm32f30x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
2354:../src/stm32f30x_adc.c ****   *   This parameter can be one of the following values:
2355:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_RDY: ADC Ready (ADRDY) interrupt source 
2356:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_EOSMP: ADC End of Sampling interrupt source 
2357:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_EOC: ADC End of Regular Conversion interrupt source 
2358:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_EOS: ADC End of Regular sequence of Conversions interrupt source 
2359:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_OVR: ADC overrun interrupt source 
2360:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_JEOC: ADC End of Injected Conversion interrupt source 
2361:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_JEOS: ADC End of Injected sequence of Conversions interrupt source 
2362:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_AWD1: ADC Analog watchdog 1 interrupt source 
2363:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_AWD2: ADC Analog watchdog 2 interrupt source 
2364:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_AWD3: ADC Analog watchdog 3 interrupt source 
2365:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_JQOVF: ADC Injected Context Queue Overflow interrupt source 
2366:../src/stm32f30x_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
2367:../src/stm32f30x_adc.c ****   */
2368:../src/stm32f30x_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint32_t ADC_IT)
2369:../src/stm32f30x_adc.c **** {
 3803              		.loc 1 2369 0
 3804              		.cfi_startproc
 3805              		@ args = 0, pretend = 0, frame = 16
 3806              		@ frame_needed = 1, uses_anonymous_args = 0
 3807              		@ link register save eliminated.
 3808 130c 80B4     		push	{r7}
 3809              	.LCFI183:
 3810              		.cfi_def_cfa_offset 4
 3811              		.cfi_offset 7, -4
 3812 130e 85B0     		sub	sp, sp, #20
 3813              	.LCFI184:
 3814              		.cfi_def_cfa_offset 24
 3815 1310 00AF     		add	r7, sp, #0
 3816              	.LCFI185:
 3817              		.cfi_def_cfa_register 7
 3818 1312 7860     		str	r0, [r7, #4]
 3819 1314 3960     		str	r1, [r7, #0]
2370:../src/stm32f30x_adc.c ****   ITStatus bitstatus = RESET;  
 3820              		.loc 1 2370 0
 3821 1316 4FF00003 		mov	r3, #0
 3822 131a FB73     		strb	r3, [r7, #15]
2371:../src/stm32f30x_adc.c ****   uint16_t itstatus = 0x0, itenable = 0x0;
 3823              		.loc 1 2371 0
 3824 131c 4FF00003 		mov	r3, #0
 3825 1320 BB81     		strh	r3, [r7, #12]	@ movhi
 3826 1322 4FF00003 		mov	r3, #0
 3827 1326 7B81     		strh	r3, [r7, #10]	@ movhi
2372:../src/stm32f30x_adc.c ****   /* Check the parameters */
2373:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
2374:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_GET_IT(ADC_IT));
2375:../src/stm32f30x_adc.c ****    
2376:../src/stm32f30x_adc.c ****   itstatus = ADCx->ISR & ADC_IT;
 3828              		.loc 1 2376 0
 3829 1328 7B68     		ldr	r3, [r7, #4]
 3830 132a 1B68     		ldr	r3, [r3, #0]
 3831 132c 9AB2     		uxth	r2, r3
 3832 132e 3B68     		ldr	r3, [r7, #0]
 3833 1330 9BB2     		uxth	r3, r3
 3834 1332 1340     		ands	r3, r3, r2
 3835 1334 BB81     		strh	r3, [r7, #12]	@ movhi
2377:../src/stm32f30x_adc.c ****   
2378:../src/stm32f30x_adc.c ****   itenable = ADCx->IER & ADC_IT;
 3836              		.loc 1 2378 0
 3837 1336 7B68     		ldr	r3, [r7, #4]
 3838 1338 5B68     		ldr	r3, [r3, #4]
 3839 133a 9AB2     		uxth	r2, r3
 3840 133c 3B68     		ldr	r3, [r7, #0]
 3841 133e 9BB2     		uxth	r3, r3
 3842 1340 1340     		ands	r3, r3, r2
 3843 1342 7B81     		strh	r3, [r7, #10]	@ movhi
2379:../src/stm32f30x_adc.c ****   if ((itstatus != (uint32_t)RESET) && (itenable != (uint32_t)RESET))
 3844              		.loc 1 2379 0
 3845 1344 BB89     		ldrh	r3, [r7, #12]
 3846 1346 002B     		cmp	r3, #0
 3847 1348 06D0     		beq	.L158
 3848              		.loc 1 2379 0 is_stmt 0 discriminator 1
 3849 134a 7B89     		ldrh	r3, [r7, #10]
 3850 134c 002B     		cmp	r3, #0
 3851 134e 03D0     		beq	.L158
2380:../src/stm32f30x_adc.c ****   {
2381:../src/stm32f30x_adc.c ****     bitstatus = SET;
 3852              		.loc 1 2381 0 is_stmt 1
 3853 1350 4FF00103 		mov	r3, #1
 3854 1354 FB73     		strb	r3, [r7, #15]
 3855 1356 02E0     		b	.L159
 3856              	.L158:
2382:../src/stm32f30x_adc.c ****   }
2383:../src/stm32f30x_adc.c ****   else
2384:../src/stm32f30x_adc.c ****   {
2385:../src/stm32f30x_adc.c ****     bitstatus = RESET;
 3857              		.loc 1 2385 0
 3858 1358 4FF00003 		mov	r3, #0
 3859 135c FB73     		strb	r3, [r7, #15]
 3860              	.L159:
2386:../src/stm32f30x_adc.c ****   }
2387:../src/stm32f30x_adc.c ****   return bitstatus;
 3861              		.loc 1 2387 0
 3862 135e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2388:../src/stm32f30x_adc.c **** }
 3863              		.loc 1 2388 0
 3864 1360 1846     		mov	r0, r3
 3865 1362 07F11407 		add	r7, r7, #20
 3866 1366 BD46     		mov	sp, r7
 3867 1368 80BC     		pop	{r7}
 3868 136a 7047     		bx	lr
 3869              		.cfi_endproc
 3870              	.LFE172:
 3872              		.align	2
 3873              		.global	ADC_ClearITPendingBit
 3874              		.thumb
 3875              		.thumb_func
 3877              	ADC_ClearITPendingBit:
 3878              	.LFB173:
2389:../src/stm32f30x_adc.c **** 
2390:../src/stm32f30x_adc.c **** /**
2391:../src/stm32f30x_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
2392:../src/stm32f30x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
2393:../src/stm32f30x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
2394:../src/stm32f30x_adc.c ****   *   This parameter can be any combination of the following values:
2395:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_RDY: ADC Ready (ADRDY) interrupt source 
2396:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_EOSMP: ADC End of Sampling interrupt source 
2397:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_EOC: ADC End of Regular Conversion interrupt source 
2398:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_EOS: ADC End of Regular sequence of Conversions interrupt source 
2399:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_OVR: ADC overrun interrupt source 
2400:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_JEOC: ADC End of Injected Conversion interrupt source 
2401:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_JEOS: ADC End of Injected sequence of Conversions interrupt source 
2402:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_AWD1: ADC Analog watchdog 1 interrupt source 
2403:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_AWD2: ADC Analog watchdog 2 interrupt source 
2404:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_AWD3: ADC Analog watchdog 3 interrupt source 
2405:../src/stm32f30x_adc.c ****   *     @arg ADC_IT_JQOVF: ADC Injected Context Queue Overflow interrupt source
2406:../src/stm32f30x_adc.c ****   * @retval None
2407:../src/stm32f30x_adc.c ****   */
2408:../src/stm32f30x_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint32_t ADC_IT)
2409:../src/stm32f30x_adc.c **** {
 3879              		.loc 1 2409 0
 3880              		.cfi_startproc
 3881              		@ args = 0, pretend = 0, frame = 8
 3882              		@ frame_needed = 1, uses_anonymous_args = 0
 3883              		@ link register save eliminated.
 3884 136c 80B4     		push	{r7}
 3885              	.LCFI186:
 3886              		.cfi_def_cfa_offset 4
 3887              		.cfi_offset 7, -4
 3888 136e 83B0     		sub	sp, sp, #12
 3889              	.LCFI187:
 3890              		.cfi_def_cfa_offset 16
 3891 1370 00AF     		add	r7, sp, #0
 3892              	.LCFI188:
 3893              		.cfi_def_cfa_register 7
 3894 1372 7860     		str	r0, [r7, #4]
 3895 1374 3960     		str	r1, [r7, #0]
2410:../src/stm32f30x_adc.c ****   /* Check the parameters */
2411:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
2412:../src/stm32f30x_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
2413:../src/stm32f30x_adc.c ****   /* Clear the selected ADC interrupt pending bit */
2414:../src/stm32f30x_adc.c ****   ADCx->ISR |= (uint32_t)ADC_IT;
 3896              		.loc 1 2414 0
 3897 1376 7B68     		ldr	r3, [r7, #4]
 3898 1378 1A68     		ldr	r2, [r3, #0]
 3899 137a 3B68     		ldr	r3, [r7, #0]
 3900 137c 1A43     		orrs	r2, r2, r3
 3901 137e 7B68     		ldr	r3, [r7, #4]
 3902 1380 1A60     		str	r2, [r3, #0]
2415:../src/stm32f30x_adc.c **** }
 3903              		.loc 1 2415 0
 3904 1382 07F10C07 		add	r7, r7, #12
 3905 1386 BD46     		mov	sp, r7
 3906 1388 80BC     		pop	{r7}
 3907 138a 7047     		bx	lr
 3908              		.cfi_endproc
 3909              	.LFE173:
 3911              	.Letext0:
 3912              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 3913              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 3914              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 3915              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f30x_adc.c
     /tmp/ccAeWGDF.s:20     .text:00000000 $t
     /tmp/ccAeWGDF.s:25     .text:00000000 ADC_DeInit
     /tmp/ccAeWGDF.s:99     .text:00000074 ADC_Init
     /tmp/ccAeWGDF.s:204    .text:000000f8 ADC_StructInit
     /tmp/ccAeWGDF.s:267    .text:0000014c ADC_InjectedInit
     /tmp/ccAeWGDF.s:353    .text:000001b8 ADC_InjectedStructInit
     /tmp/ccAeWGDF.s:412    .text:00000204 ADC_CommonInit
     /tmp/ccAeWGDF.s:535    .text:000002c4 ADC_CommonStructInit
     /tmp/ccAeWGDF.s:586    .text:00000300 ADC_Cmd
     /tmp/ccAeWGDF.s:638    .text:00000338 ADC_StartCalibration
     /tmp/ccAeWGDF.s:675    .text:00000358 ADC_GetCalibrationValue
     /tmp/ccAeWGDF.s:710    .text:00000374 ADC_SetCalibrationValue
     /tmp/ccAeWGDF.s:746    .text:00000390 ADC_SelectCalibrationMode
     /tmp/ccAeWGDF.s:791    .text:000003bc ADC_GetCalibrationStatus
     /tmp/ccAeWGDF.s:842    .text:000003f0 ADC_DisableCmd
     /tmp/ccAeWGDF.s:879    .text:00000410 ADC_GetDisableCmdStatus
     /tmp/ccAeWGDF.s:931    .text:00000448 ADC_VoltageRegulatorCmd
     /tmp/ccAeWGDF.s:989    .text:0000048c ADC_SelectDifferentialMode
     /tmp/ccAeWGDF.s:1050   .text:000004e4 ADC_SelectQueueOfContextMode
     /tmp/ccAeWGDF.s:1102   .text:0000051c ADC_AutoDelayCmd
     /tmp/ccAeWGDF.s:1154   .text:00000554 ADC_AnalogWatchdogCmd
     /tmp/ccAeWGDF.s:1206   .text:0000058c ADC_AnalogWatchdog1ThresholdsConfig
     /tmp/ccAeWGDF.s:1270   .text:000005e4 ADC_AnalogWatchdog2ThresholdsConfig
     /tmp/ccAeWGDF.s:1332   .text:00000634 ADC_AnalogWatchdog3ThresholdsConfig
     /tmp/ccAeWGDF.s:1394   .text:00000684 ADC_AnalogWatchdog1SingleChannelConfig
     /tmp/ccAeWGDF.s:1448   .text:000006c0 ADC_AnalogWatchdog2SingleChannelConfig
     /tmp/ccAeWGDF.s:1508   .text:00000714 ADC_AnalogWatchdog3SingleChannelConfig
     /tmp/ccAeWGDF.s:1568   .text:00000768 ADC_TempSensorCmd
     /tmp/ccAeWGDF.s:1661   .text:00000808 ADC_VrefintCmd
     /tmp/ccAeWGDF.s:1754   .text:000008a8 ADC_VbatCmd
     /tmp/ccAeWGDF.s:1847   .text:00000948 ADC_RegularChannelConfig
     /tmp/ccAeWGDF.s:2133   .text:00000b74 ADC_RegularChannelSequencerLengthConfig
     /tmp/ccAeWGDF.s:2180   .text:00000ba8 ADC_ExternalTriggerConfig
     /tmp/ccAeWGDF.s:2231   .text:00000be0 ADC_StartConversion
     /tmp/ccAeWGDF.s:2268   .text:00000c00 ADC_GetStartConversionStatus
     /tmp/ccAeWGDF.s:2320   .text:00000c38 ADC_StopConversion
     /tmp/ccAeWGDF.s:2357   .text:00000c58 ADC_DiscModeChannelCountConfig
     /tmp/ccAeWGDF.s:2418   .text:00000ca4 ADC_DiscModeCmd
     /tmp/ccAeWGDF.s:2470   .text:00000cdc ADC_GetConversionValue
     /tmp/ccAeWGDF.s:2506   .text:00000cf8 ADC_GetDualModeConversionValue
     /tmp/ccAeWGDF.s:2567   .text:00000d44 ADC_SetChannelOffset1
     /tmp/ccAeWGDF.s:2630   .text:00000d98 ADC_SetChannelOffset2
     /tmp/ccAeWGDF.s:2693   .text:00000dec ADC_SetChannelOffset3
     /tmp/ccAeWGDF.s:2756   .text:00000e40 ADC_SetChannelOffset4
     /tmp/ccAeWGDF.s:2819   .text:00000e94 ADC_ChannelOffset1Cmd
     /tmp/ccAeWGDF.s:2871   .text:00000ecc ADC_ChannelOffset2Cmd
     /tmp/ccAeWGDF.s:2923   .text:00000f04 ADC_ChannelOffset3Cmd
     /tmp/ccAeWGDF.s:2975   .text:00000f3c ADC_ChannelOffset4Cmd
     /tmp/ccAeWGDF.s:3027   .text:00000f74 ADC_DMACmd
     /tmp/ccAeWGDF.s:3079   .text:00000fac ADC_DMAConfig
     /tmp/ccAeWGDF.s:3124   .text:00000fd8 ADC_InjectedChannelSampleTimeConfig
     /tmp/ccAeWGDF.s:3228   .text:0000108c ADC_StartInjectedConversion
     /tmp/ccAeWGDF.s:3265   .text:000010ac ADC_StopInjectedConversion
     /tmp/ccAeWGDF.s:3302   .text:000010cc ADC_GetStartInjectedConversionStatus
     /tmp/ccAeWGDF.s:3354   .text:00001104 ADC_AutoInjectedConvCmd
     /tmp/ccAeWGDF.s:3406   .text:0000113c ADC_InjectedDiscModeCmd
     /tmp/ccAeWGDF.s:3458   .text:00001174 ADC_GetInjectedConversionValue
     /tmp/ccAeWGDF.s:3511   .text:000011b4 ADC_ITConfig
     /tmp/ccAeWGDF.s:3567   .text:000011f0 ADC_GetFlagStatus
     /tmp/ccAeWGDF.s:3621   .text:00001228 ADC_ClearFlag
     /tmp/ccAeWGDF.s:3657   .text:00001244 ADC_GetCommonFlagStatus
     /tmp/ccAeWGDF.s:3737   .text:000012b0 ADC_ClearCommonFlag
     /tmp/ccAeWGDF.s:3801   .text:0000130c ADC_GetITStatus
     /tmp/ccAeWGDF.s:3877   .text:0000136c ADC_ClearITPendingBit
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.743cd71370ebc432b539c5dba7924ecc
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.cf7c793e178943e1bbf613f1b21cd51a
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e

UNDEFINED SYMBOLS
RCC_AHBPeriphResetCmd
