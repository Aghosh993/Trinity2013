   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f30x_spi.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	SPI_I2S_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	SPI_I2S_DeInit:
  25              	.LFB111:
  26              		.file 1 "../src/stm32f30x_spi.c"
   1:../src/stm32f30x_spi.c **** /**
   2:../src/stm32f30x_spi.c ****   ******************************************************************************
   3:../src/stm32f30x_spi.c ****   * @file    stm32f30x_spi.c
   4:../src/stm32f30x_spi.c ****   * @author  MCD Application Team
   5:../src/stm32f30x_spi.c ****   * @version V1.0.1
   6:../src/stm32f30x_spi.c ****   * @date    23-October-2012
   7:../src/stm32f30x_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../src/stm32f30x_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:../src/stm32f30x_spi.c ****   *           + Initialization and Configuration
  10:../src/stm32f30x_spi.c ****   *           + Data transfers functions
  11:../src/stm32f30x_spi.c ****   *           + Hardware CRC Calculation
  12:../src/stm32f30x_spi.c ****   *           + DMA transfers management
  13:../src/stm32f30x_spi.c ****   *           + Interrupts and flags management
  14:../src/stm32f30x_spi.c ****   *
  15:../src/stm32f30x_spi.c ****   *  @verbatim
  16:../src/stm32f30x_spi.c ****   
  17:../src/stm32f30x_spi.c ****   
  18:../src/stm32f30x_spi.c ****  ===============================================================================
  19:../src/stm32f30x_spi.c ****                       ##### How to use this driver #####
  20:../src/stm32f30x_spi.c ****  ===============================================================================
  21:../src/stm32f30x_spi.c ****     [..]
  22:../src/stm32f30x_spi.c ****         (#) Enable peripheral clock using RCC_APBPeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE)
  23:../src/stm32f30x_spi.c ****             function for SPI1 or using RCC_APBPeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE)
  24:../src/stm32f30x_spi.c ****             function for SPI2.
  25:../src/stm32f30x_spi.c ****         (#) Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHBPeriphClockCmd()
  26:../src/stm32f30x_spi.c ****             function. 
  27:../src/stm32f30x_spi.c ****         (#) Peripherals alternate function: 
  28:../src/stm32f30x_spi.c ****             (++) Connect the pin to the desired peripherals' Alternate 
  29:../src/stm32f30x_spi.c ****                  Function (AF) using GPIO_PinAFConfig() function.
  30:../src/stm32f30x_spi.c ****             (++) Configure the desired pin in alternate function by:
  31:../src/stm32f30x_spi.c ****                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF.
  32:../src/stm32f30x_spi.c ****             (++) Select the type, pull-up/pull-down and output speed via 
  33:../src/stm32f30x_spi.c ****                  GPIO_PuPd, GPIO_OType and GPIO_Speed members.
  34:../src/stm32f30x_spi.c ****             (++) Call GPIO_Init() function.
  35:../src/stm32f30x_spi.c ****         (#) Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  36:../src/stm32f30x_spi.c ****             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  37:../src/stm32f30x_spi.c ****             function in SPI mode. In I2S mode, program the Mode, Standard, Data Format,
  38:../src/stm32f30x_spi.c ****             MCLK Output, Audio frequency and Polarity using I2S_Init() function.
  39:../src/stm32f30x_spi.c ****         (#) Configure the FIFO threshold using SPI_RxFIFOThresholdConfig() to select 
  40:../src/stm32f30x_spi.c ****             at which threshold the RXNE event is generated.     
  41:../src/stm32f30x_spi.c ****         (#) Enable the NVIC and the corresponding interrupt using the function 
  42:../src/stm32f30x_spi.c ****             SPI_I2S_ITConfig() if you need to use interrupt mode. 
  43:../src/stm32f30x_spi.c ****         (#) When using the DMA mode 
  44:../src/stm32f30x_spi.c ****             (++) Configure the DMA using DMA_Init() function.
  45:../src/stm32f30x_spi.c ****             (++) Active the needed channel Request using SPI_I2S_DMACmd() function.
  46:../src/stm32f30x_spi.c ****         (#) Enable the SPI using the SPI_Cmd() function or enable the I2S using
  47:../src/stm32f30x_spi.c ****             I2S_Cmd().
  48:../src/stm32f30x_spi.c ****         (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  49:../src/stm32f30x_spi.c ****         (#) Optionally you can enable/configure the following parameters without
  50:../src/stm32f30x_spi.c ****             re-initialization (i.e there is no need to call again SPI_Init() function):
  51:../src/stm32f30x_spi.c ****             (++) When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  52:../src/stm32f30x_spi.c ****                  is programmed as Data direction parameter using the SPI_Init() function
  53:../src/stm32f30x_spi.c ****                  it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  54:../src/stm32f30x_spi.c ****                  using the SPI_BiDirectionalLineConfig() function.
  55:../src/stm32f30x_spi.c ****             (++) When SPI_NSS_Soft is selected as Slave Select Management parameter 
  56:../src/stm32f30x_spi.c ****                  using the SPI_Init() function it can be possible to manage the 
  57:../src/stm32f30x_spi.c ****                  NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  58:../src/stm32f30x_spi.c ****             (++) Reconfigure the data size using the SPI_DataSizeConfig() function.  
  59:../src/stm32f30x_spi.c ****             (++) Enable or disable the SS output using the SPI_SSOutputCmd() function.
  60:../src/stm32f30x_spi.c ****         (#) To use the CRC Hardware calculation feature refer to the Peripheral 
  61:../src/stm32f30x_spi.c ****             CRC hardware Calculation subsection.
  62:../src/stm32f30x_spi.c ****     [..] It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  63:../src/stm32f30x_spi.c ****          peripheral is able to manage sending and receiving data simultaneously
  64:../src/stm32f30x_spi.c ****          using two data lines. Each SPI peripheral has an extended block called I2Sxext
  65:../src/stm32f30x_spi.c ****          (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  66:../src/stm32f30x_spi.c ****          The extension block is not a full SPI IP, it is used only as I2S slave to
  67:../src/stm32f30x_spi.c ****          implement full duplex mode. The extension block uses the same clock sources
  68:../src/stm32f30x_spi.c ****          as its master.          
  69:../src/stm32f30x_spi.c ****          To configure I2S full duplex you have to:
  70:../src/stm32f30x_spi.c ****         (#) Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  71:../src/stm32f30x_spi.c ****         (#) Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  72:../src/stm32f30x_spi.c ****             I2S_Init() function.
  73:../src/stm32f30x_spi.c ****         (#) Call I2S_Cmd() for SPIx then for its extended block.
  74:../src/stm32f30x_spi.c ****         (#) Configure interrupts or DMA requests and to get/clear flag status, 
  75:../src/stm32f30x_spi.c ****             use I2Sxext instance for the extension block.
  76:../src/stm32f30x_spi.c ****         [..] Functions that can be called with I2Sxext instances are:
  77:../src/stm32f30x_spi.c ****              I2S_Cmd(), I2S_FullDuplexConfig(), SPI_I2S_ReceiveData16(), SPI_I2S_SendData16(), 
  78:../src/stm32f30x_spi.c ****              SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), SPI_I2S_ClearFlag(),
  79:../src/stm32f30x_spi.c ****              SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
  80:../src/stm32f30x_spi.c ****         [..] Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
  81:../src/stm32f30x_spi.c ****         [..] RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
  82:../src/stm32f30x_spi.c ****              I2S_StructInit(&I2SInitStruct);
  83:../src/stm32f30x_spi.c ****              I2SInitStruct.Mode = I2S_Mode_MasterTx;     
  84:../src/stm32f30x_spi.c ****              I2S_Init(SPI3, &I2SInitStruct);
  85:../src/stm32f30x_spi.c ****              I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
  86:../src/stm32f30x_spi.c ****              I2S_Cmd(SPI3, ENABLE);
  87:../src/stm32f30x_spi.c ****              I2S_Cmd(SPI3ext, ENABLE);
  88:../src/stm32f30x_spi.c ****              ...
  89:../src/stm32f30x_spi.c ****              while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
  90:../src/stm32f30x_spi.c ****              {}
  91:../src/stm32f30x_spi.c ****              SPI_I2S_SendData16(SPI3, txdata[i]);
  92:../src/stm32f30x_spi.c ****              ...  
  93:../src/stm32f30x_spi.c ****              while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
  94:../src/stm32f30x_spi.c ****              {}
  95:../src/stm32f30x_spi.c ****              rxdata[i] = SPI_I2S_ReceiveData16(I2S3ext);
  96:../src/stm32f30x_spi.c ****              ...          
  97:../src/stm32f30x_spi.c ****     [..]
  98:../src/stm32f30x_spi.c ****     (@) In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
  99:../src/stm32f30x_spi.c ****         just after calling the function SPI_Init().  
 100:../src/stm32f30x_spi.c ****               
 101:../src/stm32f30x_spi.c ****     @endverbatim
 102:../src/stm32f30x_spi.c ****   ******************************************************************************
 103:../src/stm32f30x_spi.c ****   * @attention
 104:../src/stm32f30x_spi.c ****   *
 105:../src/stm32f30x_spi.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
 106:../src/stm32f30x_spi.c ****   *
 107:../src/stm32f30x_spi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 108:../src/stm32f30x_spi.c ****   * You may not use this file except in compliance with the License.
 109:../src/stm32f30x_spi.c ****   * You may obtain a copy of the License at:
 110:../src/stm32f30x_spi.c ****   *
 111:../src/stm32f30x_spi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 112:../src/stm32f30x_spi.c ****   *
 113:../src/stm32f30x_spi.c ****   * Unless required by applicable law or agreed to in writing, software 
 114:../src/stm32f30x_spi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 115:../src/stm32f30x_spi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 116:../src/stm32f30x_spi.c ****   * See the License for the specific language governing permissions and
 117:../src/stm32f30x_spi.c ****   * limitations under the License.
 118:../src/stm32f30x_spi.c ****   *
 119:../src/stm32f30x_spi.c ****   ******************************************************************************
 120:../src/stm32f30x_spi.c ****   */
 121:../src/stm32f30x_spi.c **** 
 122:../src/stm32f30x_spi.c **** /* Includes ------------------------------------------------------------------*/
 123:../src/stm32f30x_spi.c **** #include "stm32f30x_spi.h"
 124:../src/stm32f30x_spi.c **** #include "stm32f30x_rcc.h"
 125:../src/stm32f30x_spi.c **** 
 126:../src/stm32f30x_spi.c **** /** @addtogroup STM32F30x_StdPeriph_Driver
 127:../src/stm32f30x_spi.c ****   * @{
 128:../src/stm32f30x_spi.c ****   */
 129:../src/stm32f30x_spi.c **** 
 130:../src/stm32f30x_spi.c **** /** @defgroup SPI
 131:../src/stm32f30x_spi.c ****   * @brief SPI driver modules
 132:../src/stm32f30x_spi.c ****   * @{
 133:../src/stm32f30x_spi.c ****   */
 134:../src/stm32f30x_spi.c **** 
 135:../src/stm32f30x_spi.c **** /* Private typedef -----------------------------------------------------------*/
 136:../src/stm32f30x_spi.c **** /* Private define ------------------------------------------------------------*/
 137:../src/stm32f30x_spi.c **** /* SPI registers Masks */
 138:../src/stm32f30x_spi.c **** #define CR1_CLEAR_MASK       ((uint16_t)0x3040)
 139:../src/stm32f30x_spi.c **** #define CR2_LDMA_MASK        ((uint16_t)0x9FFF)
 140:../src/stm32f30x_spi.c **** 
 141:../src/stm32f30x_spi.c **** #define I2SCFGR_CLEAR_MASK   ((uint16_t)0xF040)
 142:../src/stm32f30x_spi.c **** 
 143:../src/stm32f30x_spi.c **** /* Private macro -------------------------------------------------------------*/
 144:../src/stm32f30x_spi.c **** /* Private variables ---------------------------------------------------------*/
 145:../src/stm32f30x_spi.c **** /* Private function prototypes -----------------------------------------------*/
 146:../src/stm32f30x_spi.c **** /* Private functions ---------------------------------------------------------*/
 147:../src/stm32f30x_spi.c **** 
 148:../src/stm32f30x_spi.c **** /** @defgroup SPI_Private_Functions
 149:../src/stm32f30x_spi.c ****   * @{
 150:../src/stm32f30x_spi.c ****   */
 151:../src/stm32f30x_spi.c **** 
 152:../src/stm32f30x_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 153:../src/stm32f30x_spi.c ****  *  @brief   Initialization and Configuration functions 
 154:../src/stm32f30x_spi.c ****  *
 155:../src/stm32f30x_spi.c **** @verbatim   
 156:../src/stm32f30x_spi.c ****  ===============================================================================
 157:../src/stm32f30x_spi.c ****            ##### Initialization and Configuration functions #####
 158:../src/stm32f30x_spi.c ****  ===============================================================================  
 159:../src/stm32f30x_spi.c ****     [..] This section provides a set of functions allowing to initialize the SPI Direction,
 160:../src/stm32f30x_spi.c ****          SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 161:../src/stm32f30x_spi.c ****          Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 162:../src/stm32f30x_spi.c ****     [..] The SPI_Init() function follows the SPI configuration procedures for Master mode
 163:../src/stm32f30x_spi.c ****          and Slave mode (details for these procedures are available in reference manual).
 164:../src/stm32f30x_spi.c ****     [..] When the Software NSS management (SPI_InitStruct->SPI_NSS = SPI_NSS_Soft) is selected,
 165:../src/stm32f30x_spi.c ****          use the following function to manage the NSS bit:
 166:../src/stm32f30x_spi.c ****          void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft);
 167:../src/stm32f30x_spi.c ****     [..] In Master mode, when the Hardware NSS management (SPI_InitStruct->SPI_NSS = SPI_NSS_Hard)
 168:../src/stm32f30x_spi.c ****          is selected, use the follwoing function to enable the NSS output feature.
 169:../src/stm32f30x_spi.c ****          void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 170:../src/stm32f30x_spi.c ****     [..] The NSS pulse mode can be managed by the SPI TI mode when enabling it using the 
 171:../src/stm32f30x_spi.c ****          following function: void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 172:../src/stm32f30x_spi.c ****          And it can be managed by software in the SPI Motorola mode using this function: 
 173:../src/stm32f30x_spi.c ****          void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 174:../src/stm32f30x_spi.c ****     [..] This section provides also functions to initialize the I2S Mode, Standard, 
 175:../src/stm32f30x_spi.c ****          Data Format, MCLK Output, Audio frequency and Polarity.
 176:../src/stm32f30x_spi.c ****     [..] The I2S_Init() function follows the I2S configuration procedures for Master mode
 177:../src/stm32f30x_spi.c ****          and Slave mode.
 178:../src/stm32f30x_spi.c ****   
 179:../src/stm32f30x_spi.c **** @endverbatim
 180:../src/stm32f30x_spi.c ****   * @{
 181:../src/stm32f30x_spi.c ****   */
 182:../src/stm32f30x_spi.c **** 
 183:../src/stm32f30x_spi.c **** /**
 184:../src/stm32f30x_spi.c ****   * @brief  Deinitializes the SPIx peripheral registers to their default
 185:../src/stm32f30x_spi.c ****   *         reset values.
 186:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx peripheral, where x can be: 1, 2 or 3 
 187:../src/stm32f30x_spi.c ****   *         in SPI mode.
 188:../src/stm32f30x_spi.c ****   * @retval None
 189:../src/stm32f30x_spi.c ****   */
 190:../src/stm32f30x_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 191:../src/stm32f30x_spi.c **** {
  27              		.loc 1 191 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 192:../src/stm32f30x_spi.c ****   /* Check the parameters */
 193:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 194:../src/stm32f30x_spi.c **** 
 195:../src/stm32f30x_spi.c ****   if (SPIx == SPI1)
  43              		.loc 1 195 0
  44 0008 7A68     		ldr	r2, [r7, #4]
  45 000a 4FF44053 		mov	r3, #12288
  46 000e C4F20103 		movt	r3, 16385
  47 0012 9A42     		cmp	r2, r3
  48 0014 0CD1     		bne	.L2
 196:../src/stm32f30x_spi.c ****   {
 197:../src/stm32f30x_spi.c ****     /* Enable SPI1 reset state */
 198:../src/stm32f30x_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  49              		.loc 1 198 0
  50 0016 4FF48050 		mov	r0, #4096
  51 001a 4FF00101 		mov	r1, #1
  52 001e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 199:../src/stm32f30x_spi.c ****     /* Release SPI1 from reset state */
 200:../src/stm32f30x_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  53              		.loc 1 200 0
  54 0022 4FF48050 		mov	r0, #4096
  55 0026 4FF00001 		mov	r1, #0
  56 002a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  57 002e 26E0     		b	.L1
  58              	.L2:
 201:../src/stm32f30x_spi.c ****   }
 202:../src/stm32f30x_spi.c ****   else if (SPIx == SPI2)
  59              		.loc 1 202 0
  60 0030 7A68     		ldr	r2, [r7, #4]
  61 0032 4FF46053 		mov	r3, #14336
  62 0036 C4F20003 		movt	r3, 16384
  63 003a 9A42     		cmp	r2, r3
  64 003c 0CD1     		bne	.L4
 203:../src/stm32f30x_spi.c ****   {
 204:../src/stm32f30x_spi.c ****     /* Enable SPI2 reset state */
 205:../src/stm32f30x_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  65              		.loc 1 205 0
  66 003e 4FF48040 		mov	r0, #16384
  67 0042 4FF00101 		mov	r1, #1
  68 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:../src/stm32f30x_spi.c ****     /* Release SPI2 from reset state */
 207:../src/stm32f30x_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  69              		.loc 1 207 0
  70 004a 4FF48040 		mov	r0, #16384
  71 004e 4FF00001 		mov	r1, #0
  72 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  73 0056 12E0     		b	.L1
  74              	.L4:
 208:../src/stm32f30x_spi.c ****   }
 209:../src/stm32f30x_spi.c ****   else
 210:../src/stm32f30x_spi.c ****   {
 211:../src/stm32f30x_spi.c ****     if (SPIx == SPI3)
  75              		.loc 1 211 0
  76 0058 7A68     		ldr	r2, [r7, #4]
  77 005a 4FF47053 		mov	r3, #15360
  78 005e C4F20003 		movt	r3, 16384
  79 0062 9A42     		cmp	r2, r3
  80 0064 0BD1     		bne	.L1
 212:../src/stm32f30x_spi.c ****     {
 213:../src/stm32f30x_spi.c ****       /* Enable SPI3 reset state */
 214:../src/stm32f30x_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  81              		.loc 1 214 0
  82 0066 4FF40040 		mov	r0, #32768
  83 006a 4FF00101 		mov	r1, #1
  84 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 215:../src/stm32f30x_spi.c ****       /* Release SPI3 from reset state */
 216:../src/stm32f30x_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  85              		.loc 1 216 0
  86 0072 4FF40040 		mov	r0, #32768
  87 0076 4FF00001 		mov	r1, #0
  88 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  89              	.L1:
 217:../src/stm32f30x_spi.c ****     }
 218:../src/stm32f30x_spi.c ****   }
 219:../src/stm32f30x_spi.c **** }
  90              		.loc 1 219 0
  91 007e 07F10807 		add	r7, r7, #8
  92 0082 BD46     		mov	sp, r7
  93 0084 80BD     		pop	{r7, pc}
  94              		.cfi_endproc
  95              	.LFE111:
  97 0086 00BF     		.align	2
  98              		.global	SPI_StructInit
  99              		.thumb
 100              		.thumb_func
 102              	SPI_StructInit:
 103              	.LFB112:
 220:../src/stm32f30x_spi.c **** 
 221:../src/stm32f30x_spi.c **** /**
 222:../src/stm32f30x_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 223:../src/stm32f30x_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 224:../src/stm32f30x_spi.c ****   * @retval None
 225:../src/stm32f30x_spi.c ****   */
 226:../src/stm32f30x_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 227:../src/stm32f30x_spi.c **** {
 104              		.loc 1 227 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 8
 107              		@ frame_needed = 1, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 109 0088 80B4     		push	{r7}
 110              	.LCFI3:
 111              		.cfi_def_cfa_offset 4
 112              		.cfi_offset 7, -4
 113 008a 83B0     		sub	sp, sp, #12
 114              	.LCFI4:
 115              		.cfi_def_cfa_offset 16
 116 008c 00AF     		add	r7, sp, #0
 117              	.LCFI5:
 118              		.cfi_def_cfa_register 7
 119 008e 7860     		str	r0, [r7, #4]
 228:../src/stm32f30x_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 229:../src/stm32f30x_spi.c ****   /* Initialize the SPI_Direction member */
 230:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 120              		.loc 1 230 0
 121 0090 7B68     		ldr	r3, [r7, #4]
 122 0092 4FF00002 		mov	r2, #0
 123 0096 1A80     		strh	r2, [r3, #0]	@ movhi
 231:../src/stm32f30x_spi.c ****   /* Initialize the SPI_Mode member */
 232:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 124              		.loc 1 232 0
 125 0098 7B68     		ldr	r3, [r7, #4]
 126 009a 4FF00002 		mov	r2, #0
 127 009e 5A80     		strh	r2, [r3, #2]	@ movhi
 233:../src/stm32f30x_spi.c ****   /* Initialize the SPI_DataSize member */
 234:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 128              		.loc 1 234 0
 129 00a0 7B68     		ldr	r3, [r7, #4]
 130 00a2 4FF4E062 		mov	r2, #1792
 131 00a6 9A80     		strh	r2, [r3, #4]	@ movhi
 235:../src/stm32f30x_spi.c ****   /* Initialize the SPI_CPOL member */
 236:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 132              		.loc 1 236 0
 133 00a8 7B68     		ldr	r3, [r7, #4]
 134 00aa 4FF00002 		mov	r2, #0
 135 00ae DA80     		strh	r2, [r3, #6]	@ movhi
 237:../src/stm32f30x_spi.c ****   /* Initialize the SPI_CPHA member */
 238:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 136              		.loc 1 238 0
 137 00b0 7B68     		ldr	r3, [r7, #4]
 138 00b2 4FF00002 		mov	r2, #0
 139 00b6 1A81     		strh	r2, [r3, #8]	@ movhi
 239:../src/stm32f30x_spi.c ****   /* Initialize the SPI_NSS member */
 240:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 140              		.loc 1 240 0
 141 00b8 7B68     		ldr	r3, [r7, #4]
 142 00ba 4FF00002 		mov	r2, #0
 143 00be 5A81     		strh	r2, [r3, #10]	@ movhi
 241:../src/stm32f30x_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 242:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 144              		.loc 1 242 0
 145 00c0 7B68     		ldr	r3, [r7, #4]
 146 00c2 4FF00002 		mov	r2, #0
 147 00c6 9A81     		strh	r2, [r3, #12]	@ movhi
 243:../src/stm32f30x_spi.c ****   /* Initialize the SPI_FirstBit member */
 244:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 148              		.loc 1 244 0
 149 00c8 7B68     		ldr	r3, [r7, #4]
 150 00ca 4FF00002 		mov	r2, #0
 151 00ce DA81     		strh	r2, [r3, #14]	@ movhi
 245:../src/stm32f30x_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 246:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 152              		.loc 1 246 0
 153 00d0 7B68     		ldr	r3, [r7, #4]
 154 00d2 4FF00702 		mov	r2, #7
 155 00d6 1A82     		strh	r2, [r3, #16]	@ movhi
 247:../src/stm32f30x_spi.c **** }
 156              		.loc 1 247 0
 157 00d8 07F10C07 		add	r7, r7, #12
 158 00dc BD46     		mov	sp, r7
 159 00de 80BC     		pop	{r7}
 160 00e0 7047     		bx	lr
 161              		.cfi_endproc
 162              	.LFE112:
 164 00e2 00BF     		.align	2
 165              		.global	SPI_Init
 166              		.thumb
 167              		.thumb_func
 169              	SPI_Init:
 170              	.LFB113:
 248:../src/stm32f30x_spi.c **** 
 249:../src/stm32f30x_spi.c **** /**
 250:../src/stm32f30x_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 251:../src/stm32f30x_spi.c ****   *         parameters in the SPI_InitStruct.
 252:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 253:../src/stm32f30x_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 254:../src/stm32f30x_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 255:../src/stm32f30x_spi.c ****   * @retval None
 256:../src/stm32f30x_spi.c ****   */
 257:../src/stm32f30x_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 258:../src/stm32f30x_spi.c **** {
 171              		.loc 1 258 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 16
 174              		@ frame_needed = 1, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 176 00e4 80B4     		push	{r7}
 177              	.LCFI6:
 178              		.cfi_def_cfa_offset 4
 179              		.cfi_offset 7, -4
 180 00e6 85B0     		sub	sp, sp, #20
 181              	.LCFI7:
 182              		.cfi_def_cfa_offset 24
 183 00e8 00AF     		add	r7, sp, #0
 184              	.LCFI8:
 185              		.cfi_def_cfa_register 7
 186 00ea 7860     		str	r0, [r7, #4]
 187 00ec 3960     		str	r1, [r7, #0]
 259:../src/stm32f30x_spi.c ****   uint16_t tmpreg = 0;
 188              		.loc 1 259 0
 189 00ee 4FF00003 		mov	r3, #0
 190 00f2 FB81     		strh	r3, [r7, #14]	@ movhi
 260:../src/stm32f30x_spi.c **** 
 261:../src/stm32f30x_spi.c ****   /* check the parameters */
 262:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 263:../src/stm32f30x_spi.c **** 
 264:../src/stm32f30x_spi.c ****   /* Check the SPI parameters */
 265:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 266:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 267:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_DATA_SIZE(SPI_InitStruct->SPI_DataSize));
 268:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 269:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 270:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 271:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 272:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 273:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 274:../src/stm32f30x_spi.c **** 
 275:../src/stm32f30x_spi.c ****   /* Configuring the SPI in master mode */
 276:../src/stm32f30x_spi.c ****   if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
 191              		.loc 1 276 0
 192 00f4 3B68     		ldr	r3, [r7, #0]
 193 00f6 5B88     		ldrh	r3, [r3, #2]
 194 00f8 B3F5827F 		cmp	r3, #260
 195 00fc 36D1     		bne	.L7
 277:../src/stm32f30x_spi.c ****   {
 278:../src/stm32f30x_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 279:../src/stm32f30x_spi.c ****     /* Get the SPIx CR1 value */
 280:../src/stm32f30x_spi.c ****     tmpreg = SPIx->CR1;
 196              		.loc 1 280 0
 197 00fe 7B68     		ldr	r3, [r7, #4]
 198 0100 1B88     		ldrh	r3, [r3, #0]	@ movhi
 199 0102 FB81     		strh	r3, [r7, #14]	@ movhi
 281:../src/stm32f30x_spi.c ****     /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 282:../src/stm32f30x_spi.c ****     tmpreg &= CR1_CLEAR_MASK;
 200              		.loc 1 282 0
 201 0104 FB89     		ldrh	r3, [r7, #14]	@ movhi
 202 0106 03F44153 		and	r3, r3, #12352
 203 010a FB81     		strh	r3, [r7, #14]	@ movhi
 283:../src/stm32f30x_spi.c ****     /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 284:../src/stm32f30x_spi.c ****        master/slave mode, CPOL and CPHA */
 285:../src/stm32f30x_spi.c ****     /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 286:../src/stm32f30x_spi.c ****     /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 287:../src/stm32f30x_spi.c ****     /* Set LSBFirst bit according to SPI_FirstBit value */
 288:../src/stm32f30x_spi.c ****     /* Set BR bits according to SPI_BaudRatePrescaler value */
 289:../src/stm32f30x_spi.c ****     /* Set CPOL bit according to SPI_CPOL value */
 290:../src/stm32f30x_spi.c ****     /* Set CPHA bit according to SPI_CPHA value */
 291:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 204              		.loc 1 291 0
 205 010c 3B68     		ldr	r3, [r7, #0]
 206 010e 1A88     		ldrh	r2, [r3, #0]
 207 0110 3B68     		ldr	r3, [r7, #0]
 208 0112 5B88     		ldrh	r3, [r3, #2]
 209 0114 1343     		orrs	r3, r3, r2
 210 0116 9AB2     		uxth	r2, r3
 292:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA)
 211              		.loc 1 292 0
 212 0118 3B68     		ldr	r3, [r7, #0]
 213 011a D988     		ldrh	r1, [r3, #6]
 214 011c 3B68     		ldr	r3, [r7, #0]
 215 011e 1B89     		ldrh	r3, [r3, #8]
 216 0120 0B43     		orrs	r3, r3, r1
 217 0122 99B2     		uxth	r1, r3
 293:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRa
 218              		.loc 1 293 0
 219 0124 3B68     		ldr	r3, [r7, #0]
 220 0126 5889     		ldrh	r0, [r3, #10]
 221 0128 3B68     		ldr	r3, [r7, #0]
 222 012a 9B89     		ldrh	r3, [r3, #12]
 223 012c 0343     		orrs	r3, r3, r0
 224 012e 98B2     		uxth	r0, r3
 294:../src/stm32f30x_spi.c ****                          SPI_InitStruct->SPI_FirstBit)));
 225              		.loc 1 294 0
 226 0130 3B68     		ldr	r3, [r7, #0]
 227 0132 DB89     		ldrh	r3, [r3, #14]
 293:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRa
 228              		.loc 1 293 0
 229 0134 0343     		orrs	r3, r3, r0
 230 0136 9BB2     		uxth	r3, r3
 292:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA)
 231              		.loc 1 292 0
 232 0138 0B43     		orrs	r3, r3, r1
 233 013a 9BB2     		uxth	r3, r3
 291:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 234              		.loc 1 291 0
 235 013c 1343     		orrs	r3, r3, r2
 236 013e 9AB2     		uxth	r2, r3
 237 0140 FB89     		ldrh	r3, [r7, #14]	@ movhi
 238 0142 1343     		orrs	r3, r3, r2
 239 0144 FB81     		strh	r3, [r7, #14]	@ movhi
 295:../src/stm32f30x_spi.c ****     /* Write to SPIx CR1 */
 296:../src/stm32f30x_spi.c ****     SPIx->CR1 = tmpreg;
 240              		.loc 1 296 0
 241 0146 7B68     		ldr	r3, [r7, #4]
 242 0148 FA89     		ldrh	r2, [r7, #14]	@ movhi
 243 014a 1A80     		strh	r2, [r3, #0]	@ movhi
 297:../src/stm32f30x_spi.c ****     /*-------------------------Data Size Configuration -----------------------*/
 298:../src/stm32f30x_spi.c ****     /* Get the SPIx CR2 value */
 299:../src/stm32f30x_spi.c ****     tmpreg = SPIx->CR2;
 244              		.loc 1 299 0
 245 014c 7B68     		ldr	r3, [r7, #4]
 246 014e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 247 0150 FB81     		strh	r3, [r7, #14]	@ movhi
 300:../src/stm32f30x_spi.c ****     /* Clear DS[3:0] bits */
 301:../src/stm32f30x_spi.c ****     tmpreg &= (uint16_t)~SPI_CR2_DS;
 248              		.loc 1 301 0
 249 0152 FB89     		ldrh	r3, [r7, #14]	@ movhi
 250 0154 23F47063 		bic	r3, r3, #3840
 251 0158 FB81     		strh	r3, [r7, #14]	@ movhi
 302:../src/stm32f30x_spi.c ****     /* Configure SPIx: Data Size */
 303:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 252              		.loc 1 303 0
 253 015a 3B68     		ldr	r3, [r7, #0]
 254 015c 9A88     		ldrh	r2, [r3, #4]
 255 015e FB89     		ldrh	r3, [r7, #14]	@ movhi
 256 0160 1343     		orrs	r3, r3, r2
 257 0162 FB81     		strh	r3, [r7, #14]	@ movhi
 304:../src/stm32f30x_spi.c ****     /* Write to SPIx CR2 */
 305:../src/stm32f30x_spi.c ****     SPIx->CR2 = tmpreg;
 258              		.loc 1 305 0
 259 0164 7B68     		ldr	r3, [r7, #4]
 260 0166 FA89     		ldrh	r2, [r7, #14]	@ movhi
 261 0168 9A80     		strh	r2, [r3, #4]	@ movhi
 262 016a 35E0     		b	.L8
 263              	.L7:
 306:../src/stm32f30x_spi.c ****   }
 307:../src/stm32f30x_spi.c ****   /* Configuring the SPI in slave mode */
 308:../src/stm32f30x_spi.c ****   else
 309:../src/stm32f30x_spi.c ****   {
 310:../src/stm32f30x_spi.c **** /*---------------------------- Data size Configuration -----------------------*/
 311:../src/stm32f30x_spi.c ****     /* Get the SPIx CR2 value */
 312:../src/stm32f30x_spi.c ****     tmpreg = SPIx->CR2;
 264              		.loc 1 312 0
 265 016c 7B68     		ldr	r3, [r7, #4]
 266 016e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 267 0170 FB81     		strh	r3, [r7, #14]	@ movhi
 313:../src/stm32f30x_spi.c ****     /* Clear DS[3:0] bits */
 314:../src/stm32f30x_spi.c ****     tmpreg &= (uint16_t)~SPI_CR2_DS;
 268              		.loc 1 314 0
 269 0172 FB89     		ldrh	r3, [r7, #14]	@ movhi
 270 0174 23F47063 		bic	r3, r3, #3840
 271 0178 FB81     		strh	r3, [r7, #14]	@ movhi
 315:../src/stm32f30x_spi.c ****     /* Configure SPIx: Data Size */
 316:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 272              		.loc 1 316 0
 273 017a 3B68     		ldr	r3, [r7, #0]
 274 017c 9A88     		ldrh	r2, [r3, #4]
 275 017e FB89     		ldrh	r3, [r7, #14]	@ movhi
 276 0180 1343     		orrs	r3, r3, r2
 277 0182 FB81     		strh	r3, [r7, #14]	@ movhi
 317:../src/stm32f30x_spi.c ****     /* Write to SPIx CR2 */
 318:../src/stm32f30x_spi.c ****     SPIx->CR2 = tmpreg;
 278              		.loc 1 318 0
 279 0184 7B68     		ldr	r3, [r7, #4]
 280 0186 FA89     		ldrh	r2, [r7, #14]	@ movhi
 281 0188 9A80     		strh	r2, [r3, #4]	@ movhi
 319:../src/stm32f30x_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 320:../src/stm32f30x_spi.c ****     /* Get the SPIx CR1 value */
 321:../src/stm32f30x_spi.c ****     tmpreg = SPIx->CR1;
 282              		.loc 1 321 0
 283 018a 7B68     		ldr	r3, [r7, #4]
 284 018c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 285 018e FB81     		strh	r3, [r7, #14]	@ movhi
 322:../src/stm32f30x_spi.c ****     /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 323:../src/stm32f30x_spi.c ****     tmpreg &= CR1_CLEAR_MASK;
 286              		.loc 1 323 0
 287 0190 FB89     		ldrh	r3, [r7, #14]	@ movhi
 288 0192 03F44153 		and	r3, r3, #12352
 289 0196 FB81     		strh	r3, [r7, #14]	@ movhi
 324:../src/stm32f30x_spi.c ****     /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 325:../src/stm32f30x_spi.c ****        master/salve mode, CPOL and CPHA */
 326:../src/stm32f30x_spi.c ****     /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 327:../src/stm32f30x_spi.c ****     /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 328:../src/stm32f30x_spi.c ****     /* Set LSBFirst bit according to SPI_FirstBit value */
 329:../src/stm32f30x_spi.c ****     /* Set BR bits according to SPI_BaudRatePrescaler value */
 330:../src/stm32f30x_spi.c ****     /* Set CPOL bit according to SPI_CPOL value */
 331:../src/stm32f30x_spi.c ****     /* Set CPHA bit according to SPI_CPHA value */
 332:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 290              		.loc 1 332 0
 291 0198 3B68     		ldr	r3, [r7, #0]
 292 019a 1A88     		ldrh	r2, [r3, #0]
 293 019c 3B68     		ldr	r3, [r7, #0]
 294 019e 5B88     		ldrh	r3, [r3, #2]
 295 01a0 1343     		orrs	r3, r3, r2
 296 01a2 9AB2     		uxth	r2, r3
 333:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA)
 297              		.loc 1 333 0
 298 01a4 3B68     		ldr	r3, [r7, #0]
 299 01a6 D988     		ldrh	r1, [r3, #6]
 300 01a8 3B68     		ldr	r3, [r7, #0]
 301 01aa 1B89     		ldrh	r3, [r3, #8]
 302 01ac 0B43     		orrs	r3, r3, r1
 303 01ae 99B2     		uxth	r1, r3
 334:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRa
 304              		.loc 1 334 0
 305 01b0 3B68     		ldr	r3, [r7, #0]
 306 01b2 5889     		ldrh	r0, [r3, #10]
 307 01b4 3B68     		ldr	r3, [r7, #0]
 308 01b6 9B89     		ldrh	r3, [r3, #12]
 309 01b8 0343     		orrs	r3, r3, r0
 310 01ba 98B2     		uxth	r0, r3
 335:../src/stm32f30x_spi.c ****                          SPI_InitStruct->SPI_FirstBit)));
 311              		.loc 1 335 0
 312 01bc 3B68     		ldr	r3, [r7, #0]
 313 01be DB89     		ldrh	r3, [r3, #14]
 334:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRa
 314              		.loc 1 334 0
 315 01c0 0343     		orrs	r3, r3, r0
 316 01c2 9BB2     		uxth	r3, r3
 333:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA)
 317              		.loc 1 333 0
 318 01c4 0B43     		orrs	r3, r3, r1
 319 01c6 9BB2     		uxth	r3, r3
 332:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 320              		.loc 1 332 0
 321 01c8 1343     		orrs	r3, r3, r2
 322 01ca 9AB2     		uxth	r2, r3
 323 01cc FB89     		ldrh	r3, [r7, #14]	@ movhi
 324 01ce 1343     		orrs	r3, r3, r2
 325 01d0 FB81     		strh	r3, [r7, #14]	@ movhi
 336:../src/stm32f30x_spi.c **** 
 337:../src/stm32f30x_spi.c ****     /* Write to SPIx CR1 */
 338:../src/stm32f30x_spi.c ****     SPIx->CR1 = tmpreg;
 326              		.loc 1 338 0
 327 01d2 7B68     		ldr	r3, [r7, #4]
 328 01d4 FA89     		ldrh	r2, [r7, #14]	@ movhi
 329 01d6 1A80     		strh	r2, [r3, #0]	@ movhi
 330              	.L8:
 339:../src/stm32f30x_spi.c ****   }
 340:../src/stm32f30x_spi.c **** 
 341:../src/stm32f30x_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 342:../src/stm32f30x_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 331              		.loc 1 342 0
 332 01d8 7B68     		ldr	r3, [r7, #4]
 333 01da 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 334 01dc 9BB2     		uxth	r3, r3
 335 01de 23F40063 		bic	r3, r3, #2048
 336 01e2 9AB2     		uxth	r2, r3
 337 01e4 7B68     		ldr	r3, [r7, #4]
 338 01e6 9A83     		strh	r2, [r3, #28]	@ movhi
 343:../src/stm32f30x_spi.c **** 
 344:../src/stm32f30x_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 345:../src/stm32f30x_spi.c ****   /* Write to SPIx CRCPOLY */
 346:../src/stm32f30x_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 339              		.loc 1 346 0
 340 01e8 3B68     		ldr	r3, [r7, #0]
 341 01ea 1A8A     		ldrh	r2, [r3, #16]
 342 01ec 7B68     		ldr	r3, [r7, #4]
 343 01ee 1A82     		strh	r2, [r3, #16]	@ movhi
 347:../src/stm32f30x_spi.c **** }
 344              		.loc 1 347 0
 345 01f0 07F11407 		add	r7, r7, #20
 346 01f4 BD46     		mov	sp, r7
 347 01f6 80BC     		pop	{r7}
 348 01f8 7047     		bx	lr
 349              		.cfi_endproc
 350              	.LFE113:
 352 01fa 00BF     		.align	2
 353              		.global	I2S_StructInit
 354              		.thumb
 355              		.thumb_func
 357              	I2S_StructInit:
 358              	.LFB114:
 348:../src/stm32f30x_spi.c **** 
 349:../src/stm32f30x_spi.c **** /**
 350:../src/stm32f30x_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 351:../src/stm32f30x_spi.c ****   * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
 352:../src/stm32f30x_spi.c ****   * @retval None
 353:../src/stm32f30x_spi.c ****   */
 354:../src/stm32f30x_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 355:../src/stm32f30x_spi.c **** {
 359              		.loc 1 355 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 8
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364 01fc 80B4     		push	{r7}
 365              	.LCFI9:
 366              		.cfi_def_cfa_offset 4
 367              		.cfi_offset 7, -4
 368 01fe 83B0     		sub	sp, sp, #12
 369              	.LCFI10:
 370              		.cfi_def_cfa_offset 16
 371 0200 00AF     		add	r7, sp, #0
 372              	.LCFI11:
 373              		.cfi_def_cfa_register 7
 374 0202 7860     		str	r0, [r7, #4]
 356:../src/stm32f30x_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 357:../src/stm32f30x_spi.c ****   /* Initialize the I2S_Mode member */
 358:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 375              		.loc 1 358 0
 376 0204 7B68     		ldr	r3, [r7, #4]
 377 0206 4FF00002 		mov	r2, #0
 378 020a 1A80     		strh	r2, [r3, #0]	@ movhi
 359:../src/stm32f30x_spi.c **** 
 360:../src/stm32f30x_spi.c ****   /* Initialize the I2S_Standard member */
 361:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 379              		.loc 1 361 0
 380 020c 7B68     		ldr	r3, [r7, #4]
 381 020e 4FF00002 		mov	r2, #0
 382 0212 5A80     		strh	r2, [r3, #2]	@ movhi
 362:../src/stm32f30x_spi.c **** 
 363:../src/stm32f30x_spi.c ****   /* Initialize the I2S_DataFormat member */
 364:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 383              		.loc 1 364 0
 384 0214 7B68     		ldr	r3, [r7, #4]
 385 0216 4FF00002 		mov	r2, #0
 386 021a 9A80     		strh	r2, [r3, #4]	@ movhi
 365:../src/stm32f30x_spi.c **** 
 366:../src/stm32f30x_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 367:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 387              		.loc 1 367 0
 388 021c 7B68     		ldr	r3, [r7, #4]
 389 021e 4FF00002 		mov	r2, #0
 390 0222 DA80     		strh	r2, [r3, #6]	@ movhi
 368:../src/stm32f30x_spi.c **** 
 369:../src/stm32f30x_spi.c ****   /* Initialize the I2S_AudioFreq member */
 370:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 391              		.loc 1 370 0
 392 0224 7B68     		ldr	r3, [r7, #4]
 393 0226 4FF00202 		mov	r2, #2
 394 022a 9A60     		str	r2, [r3, #8]
 371:../src/stm32f30x_spi.c **** 
 372:../src/stm32f30x_spi.c ****   /* Initialize the I2S_CPOL member */
 373:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 395              		.loc 1 373 0
 396 022c 7B68     		ldr	r3, [r7, #4]
 397 022e 4FF00002 		mov	r2, #0
 398 0232 9A81     		strh	r2, [r3, #12]	@ movhi
 374:../src/stm32f30x_spi.c **** }
 399              		.loc 1 374 0
 400 0234 07F10C07 		add	r7, r7, #12
 401 0238 BD46     		mov	sp, r7
 402 023a 80BC     		pop	{r7}
 403 023c 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE114:
 407 023e 00BF     		.align	2
 408              		.global	I2S_Init
 409              		.thumb
 410              		.thumb_func
 412              	I2S_Init:
 413              	.LFB115:
 375:../src/stm32f30x_spi.c **** 
 376:../src/stm32f30x_spi.c **** /**
 377:../src/stm32f30x_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 378:../src/stm32f30x_spi.c ****   *   parameters in the I2S_InitStruct.
 379:../src/stm32f30x_spi.c ****   * @param  SPIx:To select the SPIx peripheral, where x can be: 2 or 3 
 380:../src/stm32f30x_spi.c ****   *         in I2S mode. 
 381:../src/stm32f30x_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 382:../src/stm32f30x_spi.c ****   *   contains the configuration information for the specified SPI peripheral
 383:../src/stm32f30x_spi.c ****   *   configured in I2S mode.
 384:../src/stm32f30x_spi.c ****   * @note
 385:../src/stm32f30x_spi.c ****   *  The function calculates the optimal prescaler needed to obtain the most 
 386:../src/stm32f30x_spi.c ****   *  accurate audio frequency (depending on the I2S clock source, the PLL values 
 387:../src/stm32f30x_spi.c ****   *  and the product configuration). But in case the prescaler value is greater 
 388:../src/stm32f30x_spi.c ****   *  than 511, the default value (0x02) will be configured instead.     
 389:../src/stm32f30x_spi.c ****   * @retval None
 390:../src/stm32f30x_spi.c ****   */
 391:../src/stm32f30x_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 392:../src/stm32f30x_spi.c **** {
 414              		.loc 1 392 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 88
 417              		@ frame_needed = 1, uses_anonymous_args = 0
 418 0240 80B5     		push	{r7, lr}
 419              	.LCFI12:
 420              		.cfi_def_cfa_offset 8
 421              		.cfi_offset 7, -8
 422              		.cfi_offset 14, -4
 423 0242 96B0     		sub	sp, sp, #88
 424              	.LCFI13:
 425              		.cfi_def_cfa_offset 96
 426 0244 00AF     		add	r7, sp, #0
 427              	.LCFI14:
 428              		.cfi_def_cfa_register 7
 429 0246 7860     		str	r0, [r7, #4]
 430 0248 3960     		str	r1, [r7, #0]
 393:../src/stm32f30x_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 431              		.loc 1 393 0
 432 024a 4FF00003 		mov	r3, #0
 433 024e A7F84A30 		strh	r3, [r7, #74]	@ movhi
 434 0252 4FF00203 		mov	r3, #2
 435 0256 A7F85630 		strh	r3, [r7, #86]	@ movhi
 436 025a 4FF00003 		mov	r3, #0
 437 025e A7F85430 		strh	r3, [r7, #84]	@ movhi
 438 0262 4FF00103 		mov	r3, #1
 439 0266 A7F85230 		strh	r3, [r7, #82]	@ movhi
 394:../src/stm32f30x_spi.c ****   uint32_t tmp = 0;
 440              		.loc 1 394 0
 441 026a 4FF00003 		mov	r3, #0
 442 026e FB64     		str	r3, [r7, #76]
 395:../src/stm32f30x_spi.c ****   RCC_ClocksTypeDef RCC_Clocks;
 396:../src/stm32f30x_spi.c ****   uint32_t sourceclock = 0;
 443              		.loc 1 396 0
 444 0270 4FF00003 		mov	r3, #0
 445 0274 7B64     		str	r3, [r7, #68]
 397:../src/stm32f30x_spi.c **** 
 398:../src/stm32f30x_spi.c ****   /* Check the I2S parameters */
 399:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 400:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 401:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 402:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 403:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 404:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 405:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 406:../src/stm32f30x_spi.c **** 
 407:../src/stm32f30x_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 408:../src/stm32f30x_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 409:../src/stm32f30x_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 446              		.loc 1 409 0
 447 0276 7B68     		ldr	r3, [r7, #4]
 448 0278 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 449 027a 9BB2     		uxth	r3, r3
 450 027c 23F47B63 		bic	r3, r3, #4016
 451 0280 23F00F03 		bic	r3, r3, #15
 452 0284 9AB2     		uxth	r2, r3
 453 0286 7B68     		ldr	r3, [r7, #4]
 454 0288 9A83     		strh	r2, [r3, #28]	@ movhi
 410:../src/stm32f30x_spi.c ****   SPIx->I2SPR = 0x0002;
 455              		.loc 1 410 0
 456 028a 7B68     		ldr	r3, [r7, #4]
 457 028c 4FF00202 		mov	r2, #2
 458 0290 1A84     		strh	r2, [r3, #32]	@ movhi
 411:../src/stm32f30x_spi.c **** 
 412:../src/stm32f30x_spi.c ****   /* Get the I2SCFGR register value */
 413:../src/stm32f30x_spi.c ****   tmpreg = SPIx->I2SCFGR;
 459              		.loc 1 413 0
 460 0292 7B68     		ldr	r3, [r7, #4]
 461 0294 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 462 0296 A7F84A30 		strh	r3, [r7, #74]	@ movhi
 414:../src/stm32f30x_spi.c **** 
 415:../src/stm32f30x_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 416:../src/stm32f30x_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 463              		.loc 1 416 0
 464 029a 3B68     		ldr	r3, [r7, #0]
 465 029c 9B68     		ldr	r3, [r3, #8]
 466 029e 022B     		cmp	r3, #2
 467 02a0 08D1     		bne	.L11
 417:../src/stm32f30x_spi.c ****   {
 418:../src/stm32f30x_spi.c ****     i2sodd = (uint16_t)0;
 468              		.loc 1 418 0
 469 02a2 4FF00003 		mov	r3, #0
 470 02a6 A7F85430 		strh	r3, [r7, #84]	@ movhi
 419:../src/stm32f30x_spi.c ****     i2sdiv = (uint16_t)2;   
 471              		.loc 1 419 0
 472 02aa 4FF00203 		mov	r3, #2
 473 02ae A7F85630 		strh	r3, [r7, #86]	@ movhi
 474 02b2 61E0     		b	.L12
 475              	.L11:
 420:../src/stm32f30x_spi.c ****   }
 421:../src/stm32f30x_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 422:../src/stm32f30x_spi.c ****   else
 423:../src/stm32f30x_spi.c ****   {
 424:../src/stm32f30x_spi.c ****     /* Check the frame length (For the Prescaler computing) */
 425:../src/stm32f30x_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 476              		.loc 1 425 0
 477 02b4 3B68     		ldr	r3, [r7, #0]
 478 02b6 9B88     		ldrh	r3, [r3, #4]
 479 02b8 002B     		cmp	r3, #0
 480 02ba 04D1     		bne	.L13
 426:../src/stm32f30x_spi.c ****     {
 427:../src/stm32f30x_spi.c ****       /* Packet length is 16 bits */
 428:../src/stm32f30x_spi.c ****       packetlength = 1;
 481              		.loc 1 428 0
 482 02bc 4FF00103 		mov	r3, #1
 483 02c0 A7F85230 		strh	r3, [r7, #82]	@ movhi
 484 02c4 03E0     		b	.L14
 485              	.L13:
 429:../src/stm32f30x_spi.c ****     }
 430:../src/stm32f30x_spi.c ****     else
 431:../src/stm32f30x_spi.c ****     {
 432:../src/stm32f30x_spi.c ****       /* Packet length is 32 bits */
 433:../src/stm32f30x_spi.c ****       packetlength = 2;
 486              		.loc 1 433 0
 487 02c6 4FF00203 		mov	r3, #2
 488 02ca A7F85230 		strh	r3, [r7, #82]	@ movhi
 489              	.L14:
 434:../src/stm32f30x_spi.c ****     }
 435:../src/stm32f30x_spi.c **** 
 436:../src/stm32f30x_spi.c ****     /* I2S Clock source is System clock: Get System Clock frequency */
 437:../src/stm32f30x_spi.c ****     RCC_GetClocksFreq(&RCC_Clocks);      
 490              		.loc 1 437 0
 491 02ce 07F10803 		add	r3, r7, #8
 492 02d2 1846     		mov	r0, r3
 493 02d4 FFF7FEFF 		bl	RCC_GetClocksFreq
 438:../src/stm32f30x_spi.c **** 
 439:../src/stm32f30x_spi.c ****     /* Get the source clock value: based on System Clock value */
 440:../src/stm32f30x_spi.c ****     sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 494              		.loc 1 440 0
 495 02d8 BB68     		ldr	r3, [r7, #8]
 496 02da 7B64     		str	r3, [r7, #68]
 441:../src/stm32f30x_spi.c **** 
 442:../src/stm32f30x_spi.c ****     /* Compute the Real divider depending on the MCLK output state with a floating point */
 443:../src/stm32f30x_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 497              		.loc 1 443 0
 498 02dc 3B68     		ldr	r3, [r7, #0]
 499 02de DB88     		ldrh	r3, [r3, #6]
 500 02e0 B3F5007F 		cmp	r3, #512
 501 02e4 13D1     		bne	.L15
 444:../src/stm32f30x_spi.c ****     {
 445:../src/stm32f30x_spi.c ****       /* MCLK output is enabled */
 446:../src/stm32f30x_spi.c ****       tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 502              		.loc 1 446 0
 503 02e6 7B6C     		ldr	r3, [r7, #68]
 504 02e8 4FEA1322 		lsr	r2, r3, #8
 505 02ec 1346     		mov	r3, r2
 506 02ee 4FEA8303 		lsl	r3, r3, #2
 507 02f2 9B18     		adds	r3, r3, r2
 508 02f4 4FEA4303 		lsl	r3, r3, #1
 509 02f8 1A46     		mov	r2, r3
 510 02fa 3B68     		ldr	r3, [r7, #0]
 511 02fc 9B68     		ldr	r3, [r3, #8]
 512 02fe B2FBF3F3 		udiv	r3, r2, r3
 513 0302 9BB2     		uxth	r3, r3
 514 0304 03F10503 		add	r3, r3, #5
 515 0308 9BB2     		uxth	r3, r3
 516 030a FB64     		str	r3, [r7, #76]
 517 030c 16E0     		b	.L16
 518              	.L15:
 447:../src/stm32f30x_spi.c ****     }
 448:../src/stm32f30x_spi.c ****     else
 449:../src/stm32f30x_spi.c ****     {
 450:../src/stm32f30x_spi.c ****       /* MCLK output is disabled */
 451:../src/stm32f30x_spi.c ****       tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq
 519              		.loc 1 451 0
 520 030e B7F85230 		ldrh	r3, [r7, #82]
 521 0312 4FEA4313 		lsl	r3, r3, #5
 522 0316 7A6C     		ldr	r2, [r7, #68]
 523 0318 B2FBF3F2 		udiv	r2, r2, r3
 524 031c 1346     		mov	r3, r2
 525 031e 4FEA8303 		lsl	r3, r3, #2
 526 0322 9B18     		adds	r3, r3, r2
 527 0324 4FEA4303 		lsl	r3, r3, #1
 528 0328 1A46     		mov	r2, r3
 529 032a 3B68     		ldr	r3, [r7, #0]
 530 032c 9B68     		ldr	r3, [r3, #8]
 531 032e B2FBF3F3 		udiv	r3, r2, r3
 532 0332 9BB2     		uxth	r3, r3
 533 0334 03F10503 		add	r3, r3, #5
 534 0338 9BB2     		uxth	r3, r3
 535 033a FB64     		str	r3, [r7, #76]
 536              	.L16:
 452:../src/stm32f30x_spi.c ****     }
 453:../src/stm32f30x_spi.c ****     
 454:../src/stm32f30x_spi.c ****     /* Remove the floating point */
 455:../src/stm32f30x_spi.c ****     tmp = tmp / 10;
 537              		.loc 1 455 0
 538 033c FA6C     		ldr	r2, [r7, #76]
 539 033e 4CF6CD43 		movw	r3, #52429
 540 0342 CCF6CC43 		movt	r3, 52428
 541 0346 A3FB0213 		umull	r1, r3, r3, r2
 542 034a 4FEAD303 		lsr	r3, r3, #3
 543 034e FB64     		str	r3, [r7, #76]
 456:../src/stm32f30x_spi.c **** 
 457:../src/stm32f30x_spi.c ****     /* Check the parity of the divider */
 458:../src/stm32f30x_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 544              		.loc 1 458 0
 545 0350 FB6C     		ldr	r3, [r7, #76]
 546 0352 9BB2     		uxth	r3, r3
 547 0354 03F00103 		and	r3, r3, #1
 548 0358 A7F85430 		strh	r3, [r7, #84]	@ movhi
 459:../src/stm32f30x_spi.c **** 
 460:../src/stm32f30x_spi.c ****     /* Compute the i2sdiv prescaler */
 461:../src/stm32f30x_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 549              		.loc 1 461 0
 550 035c B7F85430 		ldrh	r3, [r7, #84]
 551 0360 FA6C     		ldr	r2, [r7, #76]
 552 0362 D31A     		subs	r3, r2, r3
 553 0364 4FEA5303 		lsr	r3, r3, #1
 554 0368 A7F85630 		strh	r3, [r7, #86]	@ movhi
 462:../src/stm32f30x_spi.c **** 
 463:../src/stm32f30x_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 464:../src/stm32f30x_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 555              		.loc 1 464 0
 556 036c B7F85430 		ldrh	r3, [r7, #84]	@ movhi
 557 0370 4FEA0323 		lsl	r3, r3, #8
 558 0374 A7F85430 		strh	r3, [r7, #84]	@ movhi
 559              	.L12:
 465:../src/stm32f30x_spi.c ****   }
 466:../src/stm32f30x_spi.c **** 
 467:../src/stm32f30x_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 468:../src/stm32f30x_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 560              		.loc 1 468 0
 561 0378 B7F85630 		ldrh	r3, [r7, #86]
 562 037c 012B     		cmp	r3, #1
 563 037e 03D9     		bls	.L17
 564              		.loc 1 468 0 is_stmt 0 discriminator 1
 565 0380 B7F85630 		ldrh	r3, [r7, #86]
 566 0384 FF2B     		cmp	r3, #255
 567 0386 07D9     		bls	.L18
 568              	.L17:
 469:../src/stm32f30x_spi.c ****   {
 470:../src/stm32f30x_spi.c ****     /* Set the default values */
 471:../src/stm32f30x_spi.c ****     i2sdiv = 2;
 569              		.loc 1 471 0 is_stmt 1
 570 0388 4FF00203 		mov	r3, #2
 571 038c A7F85630 		strh	r3, [r7, #86]	@ movhi
 472:../src/stm32f30x_spi.c ****     i2sodd = 0;
 572              		.loc 1 472 0
 573 0390 4FF00003 		mov	r3, #0
 574 0394 A7F85430 		strh	r3, [r7, #84]	@ movhi
 575              	.L18:
 473:../src/stm32f30x_spi.c ****   }
 474:../src/stm32f30x_spi.c **** 
 475:../src/stm32f30x_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 476:../src/stm32f30x_spi.c ****   SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 576              		.loc 1 476 0
 577 0398 3B68     		ldr	r3, [r7, #0]
 578 039a DA88     		ldrh	r2, [r3, #6]
 579 039c B7F85430 		ldrh	r3, [r7, #84]	@ movhi
 580 03a0 1343     		orrs	r3, r3, r2
 581 03a2 9AB2     		uxth	r2, r3
 582 03a4 B7F85630 		ldrh	r3, [r7, #86]	@ movhi
 583 03a8 1343     		orrs	r3, r3, r2
 584 03aa 9AB2     		uxth	r2, r3
 585 03ac 7B68     		ldr	r3, [r7, #4]
 586 03ae 1A84     		strh	r2, [r3, #32]	@ movhi
 477:../src/stm32f30x_spi.c **** 
 478:../src/stm32f30x_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 479:../src/stm32f30x_spi.c ****   tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 587              		.loc 1 479 0
 588 03b0 3B68     		ldr	r3, [r7, #0]
 589 03b2 1A88     		ldrh	r2, [r3, #0]
 480:../src/stm32f30x_spi.c ****                        (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruc
 590              		.loc 1 480 0
 591 03b4 3B68     		ldr	r3, [r7, #0]
 592 03b6 5988     		ldrh	r1, [r3, #2]
 593 03b8 3B68     		ldr	r3, [r7, #0]
 594 03ba 9B88     		ldrh	r3, [r3, #4]
 595 03bc 0B43     		orrs	r3, r3, r1
 596 03be 99B2     		uxth	r1, r3
 481:../src/stm32f30x_spi.c ****                        I2S_InitStruct->I2S_CPOL)));
 597              		.loc 1 481 0
 598 03c0 3B68     		ldr	r3, [r7, #0]
 599 03c2 9B89     		ldrh	r3, [r3, #12]
 480:../src/stm32f30x_spi.c ****                        (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruc
 600              		.loc 1 480 0
 601 03c4 0B43     		orrs	r3, r3, r1
 602 03c6 9BB2     		uxth	r3, r3
 479:../src/stm32f30x_spi.c ****   tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 603              		.loc 1 479 0
 604 03c8 1343     		orrs	r3, r3, r2
 605 03ca 9AB2     		uxth	r2, r3
 606 03cc B7F84A30 		ldrh	r3, [r7, #74]	@ movhi
 607 03d0 1343     		orrs	r3, r3, r2
 608 03d2 9BB2     		uxth	r3, r3
 609 03d4 43F40063 		orr	r3, r3, #2048
 610 03d8 A7F84A30 		strh	r3, [r7, #74]	@ movhi
 482:../src/stm32f30x_spi.c **** 
 483:../src/stm32f30x_spi.c ****   /* Write to SPIx I2SCFGR */
 484:../src/stm32f30x_spi.c ****   SPIx->I2SCFGR = tmpreg;
 611              		.loc 1 484 0
 612 03dc 7B68     		ldr	r3, [r7, #4]
 613 03de B7F84A20 		ldrh	r2, [r7, #74]	@ movhi
 614 03e2 9A83     		strh	r2, [r3, #28]	@ movhi
 485:../src/stm32f30x_spi.c **** }
 615              		.loc 1 485 0
 616 03e4 07F15807 		add	r7, r7, #88
 617 03e8 BD46     		mov	sp, r7
 618 03ea 80BD     		pop	{r7, pc}
 619              		.cfi_endproc
 620              	.LFE115:
 622              		.align	2
 623              		.global	SPI_Cmd
 624              		.thumb
 625              		.thumb_func
 627              	SPI_Cmd:
 628              	.LFB116:
 486:../src/stm32f30x_spi.c **** 
 487:../src/stm32f30x_spi.c **** /**
 488:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 489:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 490:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 491:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 492:../src/stm32f30x_spi.c ****   * @retval None
 493:../src/stm32f30x_spi.c ****   */
 494:../src/stm32f30x_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 495:../src/stm32f30x_spi.c **** {
 629              		.loc 1 495 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 8
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 634 03ec 80B4     		push	{r7}
 635              	.LCFI15:
 636              		.cfi_def_cfa_offset 4
 637              		.cfi_offset 7, -4
 638 03ee 83B0     		sub	sp, sp, #12
 639              	.LCFI16:
 640              		.cfi_def_cfa_offset 16
 641 03f0 00AF     		add	r7, sp, #0
 642              	.LCFI17:
 643              		.cfi_def_cfa_register 7
 644 03f2 7860     		str	r0, [r7, #4]
 645 03f4 0B46     		mov	r3, r1
 646 03f6 FB70     		strb	r3, [r7, #3]
 496:../src/stm32f30x_spi.c ****   /* Check the parameters */
 497:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 498:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 499:../src/stm32f30x_spi.c **** 
 500:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 647              		.loc 1 500 0
 648 03f8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 649 03fa 002B     		cmp	r3, #0
 650 03fc 08D0     		beq	.L20
 501:../src/stm32f30x_spi.c ****   {
 502:../src/stm32f30x_spi.c ****     /* Enable the selected SPI peripheral */
 503:../src/stm32f30x_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 651              		.loc 1 503 0
 652 03fe 7B68     		ldr	r3, [r7, #4]
 653 0400 1B88     		ldrh	r3, [r3, #0]	@ movhi
 654 0402 9BB2     		uxth	r3, r3
 655 0404 43F04003 		orr	r3, r3, #64
 656 0408 9AB2     		uxth	r2, r3
 657 040a 7B68     		ldr	r3, [r7, #4]
 658 040c 1A80     		strh	r2, [r3, #0]	@ movhi
 659 040e 07E0     		b	.L19
 660              	.L20:
 504:../src/stm32f30x_spi.c ****   }
 505:../src/stm32f30x_spi.c ****   else
 506:../src/stm32f30x_spi.c ****   {
 507:../src/stm32f30x_spi.c ****     /* Disable the selected SPI peripheral */
 508:../src/stm32f30x_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 661              		.loc 1 508 0
 662 0410 7B68     		ldr	r3, [r7, #4]
 663 0412 1B88     		ldrh	r3, [r3, #0]	@ movhi
 664 0414 9BB2     		uxth	r3, r3
 665 0416 23F04003 		bic	r3, r3, #64
 666 041a 9AB2     		uxth	r2, r3
 667 041c 7B68     		ldr	r3, [r7, #4]
 668 041e 1A80     		strh	r2, [r3, #0]	@ movhi
 669              	.L19:
 509:../src/stm32f30x_spi.c ****   }
 510:../src/stm32f30x_spi.c **** }
 670              		.loc 1 510 0
 671 0420 07F10C07 		add	r7, r7, #12
 672 0424 BD46     		mov	sp, r7
 673 0426 80BC     		pop	{r7}
 674 0428 7047     		bx	lr
 675              		.cfi_endproc
 676              	.LFE116:
 678 042a 00BF     		.align	2
 679              		.global	SPI_TIModeCmd
 680              		.thumb
 681              		.thumb_func
 683              	SPI_TIModeCmd:
 684              	.LFB117:
 511:../src/stm32f30x_spi.c **** 
 512:../src/stm32f30x_spi.c **** /**
 513:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the TI Mode.
 514:../src/stm32f30x_spi.c ****   * @note    This function can be called only after the SPI_Init() function has 
 515:../src/stm32f30x_spi.c ****   *          been called. 
 516:../src/stm32f30x_spi.c ****   * @note    When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 517:../src/stm32f30x_spi.c ****   *          are not taken into consideration and are configured by hardware 
 518:../src/stm32f30x_spi.c ****   *          respectively to the TI mode requirements.  
 519:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.  
 520:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 521:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 522:../src/stm32f30x_spi.c ****   * @retval None
 523:../src/stm32f30x_spi.c ****   */
 524:../src/stm32f30x_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 525:../src/stm32f30x_spi.c **** {
 685              		.loc 1 525 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 8
 688              		@ frame_needed = 1, uses_anonymous_args = 0
 689              		@ link register save eliminated.
 690 042c 80B4     		push	{r7}
 691              	.LCFI18:
 692              		.cfi_def_cfa_offset 4
 693              		.cfi_offset 7, -4
 694 042e 83B0     		sub	sp, sp, #12
 695              	.LCFI19:
 696              		.cfi_def_cfa_offset 16
 697 0430 00AF     		add	r7, sp, #0
 698              	.LCFI20:
 699              		.cfi_def_cfa_register 7
 700 0432 7860     		str	r0, [r7, #4]
 701 0434 0B46     		mov	r3, r1
 702 0436 FB70     		strb	r3, [r7, #3]
 526:../src/stm32f30x_spi.c ****   /* Check the parameters */
 527:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 528:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 529:../src/stm32f30x_spi.c **** 
 530:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 703              		.loc 1 530 0
 704 0438 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 705 043a 002B     		cmp	r3, #0
 706 043c 08D0     		beq	.L23
 531:../src/stm32f30x_spi.c ****   {
 532:../src/stm32f30x_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 533:../src/stm32f30x_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 707              		.loc 1 533 0
 708 043e 7B68     		ldr	r3, [r7, #4]
 709 0440 9B88     		ldrh	r3, [r3, #4]	@ movhi
 710 0442 9BB2     		uxth	r3, r3
 711 0444 43F01003 		orr	r3, r3, #16
 712 0448 9AB2     		uxth	r2, r3
 713 044a 7B68     		ldr	r3, [r7, #4]
 714 044c 9A80     		strh	r2, [r3, #4]	@ movhi
 715 044e 07E0     		b	.L22
 716              	.L23:
 534:../src/stm32f30x_spi.c ****   }
 535:../src/stm32f30x_spi.c ****   else
 536:../src/stm32f30x_spi.c ****   {
 537:../src/stm32f30x_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 538:../src/stm32f30x_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 717              		.loc 1 538 0
 718 0450 7B68     		ldr	r3, [r7, #4]
 719 0452 9B88     		ldrh	r3, [r3, #4]	@ movhi
 720 0454 9BB2     		uxth	r3, r3
 721 0456 23F01003 		bic	r3, r3, #16
 722 045a 9AB2     		uxth	r2, r3
 723 045c 7B68     		ldr	r3, [r7, #4]
 724 045e 9A80     		strh	r2, [r3, #4]	@ movhi
 725              	.L22:
 539:../src/stm32f30x_spi.c ****   }
 540:../src/stm32f30x_spi.c **** }
 726              		.loc 1 540 0
 727 0460 07F10C07 		add	r7, r7, #12
 728 0464 BD46     		mov	sp, r7
 729 0466 80BC     		pop	{r7}
 730 0468 7047     		bx	lr
 731              		.cfi_endproc
 732              	.LFE117:
 734 046a 00BF     		.align	2
 735              		.global	I2S_Cmd
 736              		.thumb
 737              		.thumb_func
 739              	I2S_Cmd:
 740              	.LFB118:
 541:../src/stm32f30x_spi.c **** 
 542:../src/stm32f30x_spi.c **** /**
 543:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 544:../src/stm32f30x_spi.c ****   * @param  SPIx:To select the SPIx peripheral, where x can be: 2 or 3 in 
 545:../src/stm32f30x_spi.c ****   *         I2S mode or I2Sxext for I2S full duplex mode. 
 546:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 547:../src/stm32f30x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 548:../src/stm32f30x_spi.c ****   * @retval None
 549:../src/stm32f30x_spi.c ****   */
 550:../src/stm32f30x_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 551:../src/stm32f30x_spi.c **** {
 741              		.loc 1 551 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 8
 744              		@ frame_needed = 1, uses_anonymous_args = 0
 745              		@ link register save eliminated.
 746 046c 80B4     		push	{r7}
 747              	.LCFI21:
 748              		.cfi_def_cfa_offset 4
 749              		.cfi_offset 7, -4
 750 046e 83B0     		sub	sp, sp, #12
 751              	.LCFI22:
 752              		.cfi_def_cfa_offset 16
 753 0470 00AF     		add	r7, sp, #0
 754              	.LCFI23:
 755              		.cfi_def_cfa_register 7
 756 0472 7860     		str	r0, [r7, #4]
 757 0474 0B46     		mov	r3, r1
 758 0476 FB70     		strb	r3, [r7, #3]
 552:../src/stm32f30x_spi.c ****   /* Check the parameters */
 553:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 554:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 555:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 759              		.loc 1 555 0
 760 0478 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 761 047a 002B     		cmp	r3, #0
 762 047c 08D0     		beq	.L26
 556:../src/stm32f30x_spi.c ****   {
 557:../src/stm32f30x_spi.c ****     /* Enable the selected SPI peripheral in I2S mode */
 558:../src/stm32f30x_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 763              		.loc 1 558 0
 764 047e 7B68     		ldr	r3, [r7, #4]
 765 0480 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 766 0482 9BB2     		uxth	r3, r3
 767 0484 43F48063 		orr	r3, r3, #1024
 768 0488 9AB2     		uxth	r2, r3
 769 048a 7B68     		ldr	r3, [r7, #4]
 770 048c 9A83     		strh	r2, [r3, #28]	@ movhi
 771 048e 07E0     		b	.L25
 772              	.L26:
 559:../src/stm32f30x_spi.c ****   }
 560:../src/stm32f30x_spi.c ****   else
 561:../src/stm32f30x_spi.c ****   {
 562:../src/stm32f30x_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 563:../src/stm32f30x_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 773              		.loc 1 563 0
 774 0490 7B68     		ldr	r3, [r7, #4]
 775 0492 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 776 0494 9BB2     		uxth	r3, r3
 777 0496 23F48063 		bic	r3, r3, #1024
 778 049a 9AB2     		uxth	r2, r3
 779 049c 7B68     		ldr	r3, [r7, #4]
 780 049e 9A83     		strh	r2, [r3, #28]	@ movhi
 781              	.L25:
 564:../src/stm32f30x_spi.c ****   }
 565:../src/stm32f30x_spi.c **** }
 782              		.loc 1 565 0
 783 04a0 07F10C07 		add	r7, r7, #12
 784 04a4 BD46     		mov	sp, r7
 785 04a6 80BC     		pop	{r7}
 786 04a8 7047     		bx	lr
 787              		.cfi_endproc
 788              	.LFE118:
 790 04aa 00BF     		.align	2
 791              		.global	SPI_DataSizeConfig
 792              		.thumb
 793              		.thumb_func
 795              	SPI_DataSizeConfig:
 796              	.LFB119:
 566:../src/stm32f30x_spi.c **** 
 567:../src/stm32f30x_spi.c **** /**
 568:../src/stm32f30x_spi.c ****   * @brief  Configures the data size for the selected SPI.
 569:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral. 
 570:../src/stm32f30x_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 571:../src/stm32f30x_spi.c ****   *   For the SPIx peripheral this parameter can be one of the following values:
 572:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_4b: Set data size to 4 bits
 573:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_5b: Set data size to 5 bits
 574:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_6b: Set data size to 6 bits
 575:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_7b: Set data size to 7 bits
 576:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_8b: Set data size to 8 bits
 577:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_9b: Set data size to 9 bits
 578:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_10b: Set data size to 10 bits
 579:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_11b: Set data size to 11 bits
 580:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_12b: Set data size to 12 bits
 581:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_13b: Set data size to 13 bits
 582:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_14b: Set data size to 14 bits
 583:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_15b: Set data size to 15 bits
 584:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_16b: Set data size to 16 bits
 585:../src/stm32f30x_spi.c ****   * @retval None
 586:../src/stm32f30x_spi.c ****   */
 587:../src/stm32f30x_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 588:../src/stm32f30x_spi.c **** {
 797              		.loc 1 588 0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 16
 800              		@ frame_needed = 1, uses_anonymous_args = 0
 801              		@ link register save eliminated.
 802 04ac 80B4     		push	{r7}
 803              	.LCFI24:
 804              		.cfi_def_cfa_offset 4
 805              		.cfi_offset 7, -4
 806 04ae 85B0     		sub	sp, sp, #20
 807              	.LCFI25:
 808              		.cfi_def_cfa_offset 24
 809 04b0 00AF     		add	r7, sp, #0
 810              	.LCFI26:
 811              		.cfi_def_cfa_register 7
 812 04b2 7860     		str	r0, [r7, #4]
 813 04b4 0B46     		mov	r3, r1
 814 04b6 7B80     		strh	r3, [r7, #2]	@ movhi
 589:../src/stm32f30x_spi.c ****   uint16_t tmpreg = 0;
 815              		.loc 1 589 0
 816 04b8 4FF00003 		mov	r3, #0
 817 04bc FB81     		strh	r3, [r7, #14]	@ movhi
 590:../src/stm32f30x_spi.c ****   
 591:../src/stm32f30x_spi.c ****   /* Check the parameters */
 592:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 593:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
 594:../src/stm32f30x_spi.c ****   /* Read the CR2 register */
 595:../src/stm32f30x_spi.c ****   tmpreg = SPIx->CR2;
 818              		.loc 1 595 0
 819 04be 7B68     		ldr	r3, [r7, #4]
 820 04c0 9B88     		ldrh	r3, [r3, #4]	@ movhi
 821 04c2 FB81     		strh	r3, [r7, #14]	@ movhi
 596:../src/stm32f30x_spi.c ****   /* Clear DS[3:0] bits */
 597:../src/stm32f30x_spi.c ****   tmpreg &= (uint16_t)~SPI_CR2_DS;
 822              		.loc 1 597 0
 823 04c4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 824 04c6 23F47063 		bic	r3, r3, #3840
 825 04ca FB81     		strh	r3, [r7, #14]	@ movhi
 598:../src/stm32f30x_spi.c ****   /* Set new DS[3:0] bits value */
 599:../src/stm32f30x_spi.c ****   tmpreg |= SPI_DataSize;
 826              		.loc 1 599 0
 827 04cc FA89     		ldrh	r2, [r7, #14]	@ movhi
 828 04ce 7B88     		ldrh	r3, [r7, #2]	@ movhi
 829 04d0 1343     		orrs	r3, r3, r2
 830 04d2 FB81     		strh	r3, [r7, #14]	@ movhi
 600:../src/stm32f30x_spi.c ****   SPIx->CR2 = tmpreg;
 831              		.loc 1 600 0
 832 04d4 7B68     		ldr	r3, [r7, #4]
 833 04d6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 834 04d8 9A80     		strh	r2, [r3, #4]	@ movhi
 601:../src/stm32f30x_spi.c **** }
 835              		.loc 1 601 0
 836 04da 07F11407 		add	r7, r7, #20
 837 04de BD46     		mov	sp, r7
 838 04e0 80BC     		pop	{r7}
 839 04e2 7047     		bx	lr
 840              		.cfi_endproc
 841              	.LFE119:
 843              		.align	2
 844              		.global	SPI_RxFIFOThresholdConfig
 845              		.thumb
 846              		.thumb_func
 848              	SPI_RxFIFOThresholdConfig:
 849              	.LFB120:
 602:../src/stm32f30x_spi.c **** 
 603:../src/stm32f30x_spi.c **** /**
 604:../src/stm32f30x_spi.c ****   * @brief  Configures the FIFO reception threshold for the selected SPI.
 605:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral. 
 606:../src/stm32f30x_spi.c ****   * @param  SPI_RxFIFOThreshold: specifies the FIFO reception threshold.
 607:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
 608:../src/stm32f30x_spi.c ****   *     @arg SPI_RxFIFOThreshold_HF: RXNE event is generated if the FIFO 
 609:../src/stm32f30x_spi.c ****   *          level is greater or equal to 1/2. 
 610:../src/stm32f30x_spi.c ****   *     @arg SPI_RxFIFOThreshold_QF: RXNE event is generated if the FIFO 
 611:../src/stm32f30x_spi.c ****   *          level is greater or equal to 1/4. 
 612:../src/stm32f30x_spi.c ****   * @retval None
 613:../src/stm32f30x_spi.c ****   */
 614:../src/stm32f30x_spi.c **** void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
 615:../src/stm32f30x_spi.c **** {
 850              		.loc 1 615 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 8
 853              		@ frame_needed = 1, uses_anonymous_args = 0
 854              		@ link register save eliminated.
 855 04e4 80B4     		push	{r7}
 856              	.LCFI27:
 857              		.cfi_def_cfa_offset 4
 858              		.cfi_offset 7, -4
 859 04e6 83B0     		sub	sp, sp, #12
 860              	.LCFI28:
 861              		.cfi_def_cfa_offset 16
 862 04e8 00AF     		add	r7, sp, #0
 863              	.LCFI29:
 864              		.cfi_def_cfa_register 7
 865 04ea 7860     		str	r0, [r7, #4]
 866 04ec 0B46     		mov	r3, r1
 867 04ee 7B80     		strh	r3, [r7, #2]	@ movhi
 616:../src/stm32f30x_spi.c ****   /* Check the parameters */
 617:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 618:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));
 619:../src/stm32f30x_spi.c **** 
 620:../src/stm32f30x_spi.c ****   /* Clear FRXTH bit */
 621:../src/stm32f30x_spi.c ****   SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 868              		.loc 1 621 0
 869 04f0 7B68     		ldr	r3, [r7, #4]
 870 04f2 9B88     		ldrh	r3, [r3, #4]	@ movhi
 871 04f4 9BB2     		uxth	r3, r3
 872 04f6 23F48053 		bic	r3, r3, #4096
 873 04fa 9AB2     		uxth	r2, r3
 874 04fc 7B68     		ldr	r3, [r7, #4]
 875 04fe 9A80     		strh	r2, [r3, #4]	@ movhi
 622:../src/stm32f30x_spi.c **** 
 623:../src/stm32f30x_spi.c ****   /* Set new FRXTH bit value */
 624:../src/stm32f30x_spi.c ****   SPIx->CR2 |= SPI_RxFIFOThreshold;
 876              		.loc 1 624 0
 877 0500 7B68     		ldr	r3, [r7, #4]
 878 0502 9B88     		ldrh	r3, [r3, #4]	@ movhi
 879 0504 9AB2     		uxth	r2, r3
 880 0506 7B88     		ldrh	r3, [r7, #2]	@ movhi
 881 0508 1343     		orrs	r3, r3, r2
 882 050a 9AB2     		uxth	r2, r3
 883 050c 7B68     		ldr	r3, [r7, #4]
 884 050e 9A80     		strh	r2, [r3, #4]	@ movhi
 625:../src/stm32f30x_spi.c **** }
 885              		.loc 1 625 0
 886 0510 07F10C07 		add	r7, r7, #12
 887 0514 BD46     		mov	sp, r7
 888 0516 80BC     		pop	{r7}
 889 0518 7047     		bx	lr
 890              		.cfi_endproc
 891              	.LFE120:
 893 051a 00BF     		.align	2
 894              		.global	SPI_BiDirectionalLineConfig
 895              		.thumb
 896              		.thumb_func
 898              	SPI_BiDirectionalLineConfig:
 899              	.LFB121:
 626:../src/stm32f30x_spi.c **** 
 627:../src/stm32f30x_spi.c **** /**
 628:../src/stm32f30x_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 629:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral. 
 630:../src/stm32f30x_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 631:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
 632:../src/stm32f30x_spi.c ****   *     @arg SPI_Direction_Tx: Selects Tx transmission direction
 633:../src/stm32f30x_spi.c ****   *     @arg SPI_Direction_Rx: Selects Rx receive direction
 634:../src/stm32f30x_spi.c ****   * @retval None
 635:../src/stm32f30x_spi.c ****   */
 636:../src/stm32f30x_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 637:../src/stm32f30x_spi.c **** {
 900              		.loc 1 637 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 8
 903              		@ frame_needed = 1, uses_anonymous_args = 0
 904              		@ link register save eliminated.
 905 051c 80B4     		push	{r7}
 906              	.LCFI30:
 907              		.cfi_def_cfa_offset 4
 908              		.cfi_offset 7, -4
 909 051e 83B0     		sub	sp, sp, #12
 910              	.LCFI31:
 911              		.cfi_def_cfa_offset 16
 912 0520 00AF     		add	r7, sp, #0
 913              	.LCFI32:
 914              		.cfi_def_cfa_register 7
 915 0522 7860     		str	r0, [r7, #4]
 916 0524 0B46     		mov	r3, r1
 917 0526 7B80     		strh	r3, [r7, #2]	@ movhi
 638:../src/stm32f30x_spi.c ****   /* Check the parameters */
 639:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 640:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 641:../src/stm32f30x_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 918              		.loc 1 641 0
 919 0528 7B88     		ldrh	r3, [r7, #2]
 920 052a B3F5804F 		cmp	r3, #16384
 921 052e 08D1     		bne	.L31
 642:../src/stm32f30x_spi.c ****   {
 643:../src/stm32f30x_spi.c ****     /* Set the Tx only mode */
 644:../src/stm32f30x_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 922              		.loc 1 644 0
 923 0530 7B68     		ldr	r3, [r7, #4]
 924 0532 1B88     		ldrh	r3, [r3, #0]	@ movhi
 925 0534 9BB2     		uxth	r3, r3
 926 0536 43F48043 		orr	r3, r3, #16384
 927 053a 9AB2     		uxth	r2, r3
 928 053c 7B68     		ldr	r3, [r7, #4]
 929 053e 1A80     		strh	r2, [r3, #0]	@ movhi
 930 0540 07E0     		b	.L30
 931              	.L31:
 645:../src/stm32f30x_spi.c ****   }
 646:../src/stm32f30x_spi.c ****   else
 647:../src/stm32f30x_spi.c ****   {
 648:../src/stm32f30x_spi.c ****     /* Set the Rx only mode */
 649:../src/stm32f30x_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 932              		.loc 1 649 0
 933 0542 7B68     		ldr	r3, [r7, #4]
 934 0544 1B88     		ldrh	r3, [r3, #0]	@ movhi
 935 0546 9BB2     		uxth	r3, r3
 936 0548 23F48043 		bic	r3, r3, #16384
 937 054c 9AB2     		uxth	r2, r3
 938 054e 7B68     		ldr	r3, [r7, #4]
 939 0550 1A80     		strh	r2, [r3, #0]	@ movhi
 940              	.L30:
 650:../src/stm32f30x_spi.c ****   }
 651:../src/stm32f30x_spi.c **** }
 941              		.loc 1 651 0
 942 0552 07F10C07 		add	r7, r7, #12
 943 0556 BD46     		mov	sp, r7
 944 0558 80BC     		pop	{r7}
 945 055a 7047     		bx	lr
 946              		.cfi_endproc
 947              	.LFE121:
 949              		.align	2
 950              		.global	SPI_NSSInternalSoftwareConfig
 951              		.thumb
 952              		.thumb_func
 954              	SPI_NSSInternalSoftwareConfig:
 955              	.LFB122:
 652:../src/stm32f30x_spi.c **** 
 653:../src/stm32f30x_spi.c **** /**
 654:../src/stm32f30x_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 655:../src/stm32f30x_spi.c ****   * @note    This function can be called only after the SPI_Init() function has 
 656:../src/stm32f30x_spi.c ****   *          been called.  
 657:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 658:../src/stm32f30x_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 659:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
 660:../src/stm32f30x_spi.c ****   *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 661:../src/stm32f30x_spi.c ****   *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 662:../src/stm32f30x_spi.c ****   * @retval None
 663:../src/stm32f30x_spi.c ****   */
 664:../src/stm32f30x_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 665:../src/stm32f30x_spi.c **** {
 956              		.loc 1 665 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 8
 959              		@ frame_needed = 1, uses_anonymous_args = 0
 960              		@ link register save eliminated.
 961 055c 80B4     		push	{r7}
 962              	.LCFI33:
 963              		.cfi_def_cfa_offset 4
 964              		.cfi_offset 7, -4
 965 055e 83B0     		sub	sp, sp, #12
 966              	.LCFI34:
 967              		.cfi_def_cfa_offset 16
 968 0560 00AF     		add	r7, sp, #0
 969              	.LCFI35:
 970              		.cfi_def_cfa_register 7
 971 0562 7860     		str	r0, [r7, #4]
 972 0564 0B46     		mov	r3, r1
 973 0566 7B80     		strh	r3, [r7, #2]	@ movhi
 666:../src/stm32f30x_spi.c ****   /* Check the parameters */
 667:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 668:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 669:../src/stm32f30x_spi.c **** 
 670:../src/stm32f30x_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 974              		.loc 1 670 0
 975 0568 7A88     		ldrh	r2, [r7, #2]
 976 056a 4FF6FF63 		movw	r3, #65279
 977 056e 9A42     		cmp	r2, r3
 978 0570 08D0     		beq	.L34
 671:../src/stm32f30x_spi.c ****   {
 672:../src/stm32f30x_spi.c ****     /* Set NSS pin internally by software */
 673:../src/stm32f30x_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 979              		.loc 1 673 0
 980 0572 7B68     		ldr	r3, [r7, #4]
 981 0574 1B88     		ldrh	r3, [r3, #0]	@ movhi
 982 0576 9BB2     		uxth	r3, r3
 983 0578 43F48073 		orr	r3, r3, #256
 984 057c 9AB2     		uxth	r2, r3
 985 057e 7B68     		ldr	r3, [r7, #4]
 986 0580 1A80     		strh	r2, [r3, #0]	@ movhi
 987 0582 07E0     		b	.L33
 988              	.L34:
 674:../src/stm32f30x_spi.c ****   }
 675:../src/stm32f30x_spi.c ****   else
 676:../src/stm32f30x_spi.c ****   {
 677:../src/stm32f30x_spi.c ****     /* Reset NSS pin internally by software */
 678:../src/stm32f30x_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 989              		.loc 1 678 0
 990 0584 7B68     		ldr	r3, [r7, #4]
 991 0586 1B88     		ldrh	r3, [r3, #0]	@ movhi
 992 0588 9BB2     		uxth	r3, r3
 993 058a 23F48073 		bic	r3, r3, #256
 994 058e 9AB2     		uxth	r2, r3
 995 0590 7B68     		ldr	r3, [r7, #4]
 996 0592 1A80     		strh	r2, [r3, #0]	@ movhi
 997              	.L33:
 679:../src/stm32f30x_spi.c ****   }
 680:../src/stm32f30x_spi.c **** }
 998              		.loc 1 680 0
 999 0594 07F10C07 		add	r7, r7, #12
 1000 0598 BD46     		mov	sp, r7
 1001 059a 80BC     		pop	{r7}
 1002 059c 7047     		bx	lr
 1003              		.cfi_endproc
 1004              	.LFE122:
 1006 059e 00BF     		.align	2
 1007              		.global	I2S_FullDuplexConfig
 1008              		.thumb
 1009              		.thumb_func
 1011              	I2S_FullDuplexConfig:
 1012              	.LFB123:
 681:../src/stm32f30x_spi.c **** 
 682:../src/stm32f30x_spi.c **** /**
 683:../src/stm32f30x_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 684:../src/stm32f30x_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 685:../src/stm32f30x_spi.c ****   *         I2S_InitStruct.
 686:../src/stm32f30x_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 687:../src/stm32f30x_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 688:../src/stm32f30x_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 689:../src/stm32f30x_spi.c ****   *         extension.
 690:../src/stm32f30x_spi.c ****   * 
 691:../src/stm32f30x_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 692:../src/stm32f30x_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 693:../src/stm32f30x_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 694:../src/stm32f30x_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 695:../src/stm32f30x_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 696:../src/stm32f30x_spi.c ****   *         
 697:../src/stm32f30x_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 698:../src/stm32f30x_spi.c ****   *  
 699:../src/stm32f30x_spi.c ****   * @retval None
 700:../src/stm32f30x_spi.c ****   */
 701:../src/stm32f30x_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 702:../src/stm32f30x_spi.c **** {
 1013              		.loc 1 702 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 16
 1016              		@ frame_needed = 1, uses_anonymous_args = 0
 1017              		@ link register save eliminated.
 1018 05a0 80B4     		push	{r7}
 1019              	.LCFI36:
 1020              		.cfi_def_cfa_offset 4
 1021              		.cfi_offset 7, -4
 1022 05a2 85B0     		sub	sp, sp, #20
 1023              	.LCFI37:
 1024              		.cfi_def_cfa_offset 24
 1025 05a4 00AF     		add	r7, sp, #0
 1026              	.LCFI38:
 1027              		.cfi_def_cfa_register 7
 1028 05a6 7860     		str	r0, [r7, #4]
 1029 05a8 3960     		str	r1, [r7, #0]
 703:../src/stm32f30x_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 1030              		.loc 1 703 0
 1031 05aa 4FF00003 		mov	r3, #0
 1032 05ae BB81     		strh	r3, [r7, #12]	@ movhi
 1033 05b0 4FF00003 		mov	r3, #0
 1034 05b4 FB81     		strh	r3, [r7, #14]	@ movhi
 704:../src/stm32f30x_spi.c ****   
 705:../src/stm32f30x_spi.c ****   /* Check the I2S parameters */
 706:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 707:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 708:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 709:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 710:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 711:../src/stm32f30x_spi.c **** 
 712:../src/stm32f30x_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 713:../src/stm32f30x_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 714:../src/stm32f30x_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 1035              		.loc 1 714 0
 1036 05b6 7B68     		ldr	r3, [r7, #4]
 1037 05b8 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1038 05ba 9BB2     		uxth	r3, r3
 1039 05bc 23F47B63 		bic	r3, r3, #4016
 1040 05c0 23F00F03 		bic	r3, r3, #15
 1041 05c4 9AB2     		uxth	r2, r3
 1042 05c6 7B68     		ldr	r3, [r7, #4]
 1043 05c8 9A83     		strh	r2, [r3, #28]	@ movhi
 715:../src/stm32f30x_spi.c ****   I2Sxext->I2SPR = 0x0002;
 1044              		.loc 1 715 0
 1045 05ca 7B68     		ldr	r3, [r7, #4]
 1046 05cc 4FF00202 		mov	r2, #2
 1047 05d0 1A84     		strh	r2, [r3, #32]	@ movhi
 716:../src/stm32f30x_spi.c ****   
 717:../src/stm32f30x_spi.c ****   /* Get the I2SCFGR register value */
 718:../src/stm32f30x_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 1048              		.loc 1 718 0
 1049 05d2 7B68     		ldr	r3, [r7, #4]
 1050 05d4 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1051 05d6 BB81     		strh	r3, [r7, #12]	@ movhi
 719:../src/stm32f30x_spi.c ****   
 720:../src/stm32f30x_spi.c ****   /* Get the mode to be configured for the extended I2S */
 721:../src/stm32f30x_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 1052              		.loc 1 721 0
 1053 05d8 3B68     		ldr	r3, [r7, #0]
 1054 05da 1B88     		ldrh	r3, [r3, #0]
 1055 05dc B3F5007F 		cmp	r3, #512
 1056 05e0 03D0     		beq	.L37
 1057              		.loc 1 721 0 is_stmt 0 discriminator 1
 1058 05e2 3B68     		ldr	r3, [r7, #0]
 1059 05e4 1B88     		ldrh	r3, [r3, #0]
 1060 05e6 002B     		cmp	r3, #0
 1061 05e8 03D1     		bne	.L38
 1062              	.L37:
 722:../src/stm32f30x_spi.c ****   {
 723:../src/stm32f30x_spi.c ****     tmp = I2S_Mode_SlaveRx;
 1063              		.loc 1 723 0 is_stmt 1
 1064 05ea 4FF48073 		mov	r3, #256
 1065 05ee FB81     		strh	r3, [r7, #14]	@ movhi
 1066 05f0 0CE0     		b	.L39
 1067              	.L38:
 724:../src/stm32f30x_spi.c ****   }
 725:../src/stm32f30x_spi.c ****   else
 726:../src/stm32f30x_spi.c ****   {
 727:../src/stm32f30x_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 1068              		.loc 1 727 0
 1069 05f2 3B68     		ldr	r3, [r7, #0]
 1070 05f4 1B88     		ldrh	r3, [r3, #0]
 1071 05f6 B3F5407F 		cmp	r3, #768
 1072 05fa 04D0     		beq	.L40
 1073              		.loc 1 727 0 is_stmt 0 discriminator 1
 1074 05fc 3B68     		ldr	r3, [r7, #0]
 1075 05fe 1B88     		ldrh	r3, [r3, #0]
 1076 0600 B3F5807F 		cmp	r3, #256
 1077 0604 02D1     		bne	.L39
 1078              	.L40:
 728:../src/stm32f30x_spi.c ****     {
 729:../src/stm32f30x_spi.c ****       tmp = I2S_Mode_SlaveTx;
 1079              		.loc 1 729 0 is_stmt 1
 1080 0606 4FF00003 		mov	r3, #0
 1081 060a FB81     		strh	r3, [r7, #14]	@ movhi
 1082              	.L39:
 730:../src/stm32f30x_spi.c ****     }
 731:../src/stm32f30x_spi.c ****   }
 732:../src/stm32f30x_spi.c **** 
 733:../src/stm32f30x_spi.c ****  
 734:../src/stm32f30x_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 735:../src/stm32f30x_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 736:../src/stm32f30x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1083              		.loc 1 736 0
 1084 060c 3B68     		ldr	r3, [r7, #0]
 1085 060e 5A88     		ldrh	r2, [r3, #2]
 1086 0610 3B68     		ldr	r3, [r7, #0]
 1087 0612 9988     		ldrh	r1, [r3, #4]
 737:../src/stm32f30x_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1088              		.loc 1 737 0
 1089 0614 3B68     		ldr	r3, [r7, #0]
 1090 0616 9B89     		ldrh	r3, [r3, #12]
 736:../src/stm32f30x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1091              		.loc 1 736 0
 1092 0618 0B43     		orrs	r3, r3, r1
 1093 061a 9BB2     		uxth	r3, r3
 1094 061c 1343     		orrs	r3, r3, r2
 1095 061e 9AB2     		uxth	r2, r3
 735:../src/stm32f30x_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 1096              		.loc 1 735 0
 1097 0620 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1098 0622 1343     		orrs	r3, r3, r2
 1099 0624 9AB2     		uxth	r2, r3
 1100 0626 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1101 0628 1343     		orrs	r3, r3, r2
 1102 062a 9BB2     		uxth	r3, r3
 1103 062c 43F40063 		orr	r3, r3, #2048
 1104 0630 BB81     		strh	r3, [r7, #12]	@ movhi
 738:../src/stm32f30x_spi.c ****  
 739:../src/stm32f30x_spi.c ****   /* Write to SPIx I2SCFGR */  
 740:../src/stm32f30x_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 1105              		.loc 1 740 0
 1106 0632 7B68     		ldr	r3, [r7, #4]
 1107 0634 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1108 0636 9A83     		strh	r2, [r3, #28]	@ movhi
 741:../src/stm32f30x_spi.c **** }
 1109              		.loc 1 741 0
 1110 0638 07F11407 		add	r7, r7, #20
 1111 063c BD46     		mov	sp, r7
 1112 063e 80BC     		pop	{r7}
 1113 0640 7047     		bx	lr
 1114              		.cfi_endproc
 1115              	.LFE123:
 1117 0642 00BF     		.align	2
 1118              		.global	SPI_SSOutputCmd
 1119              		.thumb
 1120              		.thumb_func
 1122              	SPI_SSOutputCmd:
 1123              	.LFB124:
 742:../src/stm32f30x_spi.c **** 
 743:../src/stm32f30x_spi.c **** /**
 744:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 745:../src/stm32f30x_spi.c ****   * @note    This function can be called only after the SPI_Init() function has 
 746:../src/stm32f30x_spi.c ****   *          been called and the NSS hardware management mode is selected. 
 747:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 748:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 749:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 750:../src/stm32f30x_spi.c ****   * @retval None
 751:../src/stm32f30x_spi.c ****   */
 752:../src/stm32f30x_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 753:../src/stm32f30x_spi.c **** {
 1124              		.loc 1 753 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 8
 1127              		@ frame_needed = 1, uses_anonymous_args = 0
 1128              		@ link register save eliminated.
 1129 0644 80B4     		push	{r7}
 1130              	.LCFI39:
 1131              		.cfi_def_cfa_offset 4
 1132              		.cfi_offset 7, -4
 1133 0646 83B0     		sub	sp, sp, #12
 1134              	.LCFI40:
 1135              		.cfi_def_cfa_offset 16
 1136 0648 00AF     		add	r7, sp, #0
 1137              	.LCFI41:
 1138              		.cfi_def_cfa_register 7
 1139 064a 7860     		str	r0, [r7, #4]
 1140 064c 0B46     		mov	r3, r1
 1141 064e FB70     		strb	r3, [r7, #3]
 754:../src/stm32f30x_spi.c ****   /* Check the parameters */
 755:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 756:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 757:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 1142              		.loc 1 757 0
 1143 0650 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1144 0652 002B     		cmp	r3, #0
 1145 0654 08D0     		beq	.L42
 758:../src/stm32f30x_spi.c ****   {
 759:../src/stm32f30x_spi.c ****     /* Enable the selected SPI SS output */
 760:../src/stm32f30x_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 1146              		.loc 1 760 0
 1147 0656 7B68     		ldr	r3, [r7, #4]
 1148 0658 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1149 065a 9BB2     		uxth	r3, r3
 1150 065c 43F00403 		orr	r3, r3, #4
 1151 0660 9AB2     		uxth	r2, r3
 1152 0662 7B68     		ldr	r3, [r7, #4]
 1153 0664 9A80     		strh	r2, [r3, #4]	@ movhi
 1154 0666 07E0     		b	.L41
 1155              	.L42:
 761:../src/stm32f30x_spi.c ****   }
 762:../src/stm32f30x_spi.c ****   else
 763:../src/stm32f30x_spi.c ****   {
 764:../src/stm32f30x_spi.c ****     /* Disable the selected SPI SS output */
 765:../src/stm32f30x_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 1156              		.loc 1 765 0
 1157 0668 7B68     		ldr	r3, [r7, #4]
 1158 066a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1159 066c 9BB2     		uxth	r3, r3
 1160 066e 23F00403 		bic	r3, r3, #4
 1161 0672 9AB2     		uxth	r2, r3
 1162 0674 7B68     		ldr	r3, [r7, #4]
 1163 0676 9A80     		strh	r2, [r3, #4]	@ movhi
 1164              	.L41:
 766:../src/stm32f30x_spi.c ****   }
 767:../src/stm32f30x_spi.c **** }
 1165              		.loc 1 767 0
 1166 0678 07F10C07 		add	r7, r7, #12
 1167 067c BD46     		mov	sp, r7
 1168 067e 80BC     		pop	{r7}
 1169 0680 7047     		bx	lr
 1170              		.cfi_endproc
 1171              	.LFE124:
 1173 0682 00BF     		.align	2
 1174              		.global	SPI_NSSPulseModeCmd
 1175              		.thumb
 1176              		.thumb_func
 1178              	SPI_NSSPulseModeCmd:
 1179              	.LFB125:
 768:../src/stm32f30x_spi.c **** 
 769:../src/stm32f30x_spi.c **** /**
 770:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the NSS pulse management mode.
 771:../src/stm32f30x_spi.c ****   * @note    This function can be called only after the SPI_Init() function has 
 772:../src/stm32f30x_spi.c ****   *          been called. 
 773:../src/stm32f30x_spi.c ****   * @note    When TI mode is selected, the control bits NSSP is not taken into 
 774:../src/stm32f30x_spi.c ****   *          consideration and are configured by hardware respectively to the 
 775:../src/stm32f30x_spi.c ****   *          TI mode requirements. 
 776:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral. 
 777:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the NSS pulse management mode.
 778:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 779:../src/stm32f30x_spi.c ****   * @retval None
 780:../src/stm32f30x_spi.c ****   */
 781:../src/stm32f30x_spi.c **** void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 782:../src/stm32f30x_spi.c **** {
 1180              		.loc 1 782 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 8
 1183              		@ frame_needed = 1, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
 1185 0684 80B4     		push	{r7}
 1186              	.LCFI42:
 1187              		.cfi_def_cfa_offset 4
 1188              		.cfi_offset 7, -4
 1189 0686 83B0     		sub	sp, sp, #12
 1190              	.LCFI43:
 1191              		.cfi_def_cfa_offset 16
 1192 0688 00AF     		add	r7, sp, #0
 1193              	.LCFI44:
 1194              		.cfi_def_cfa_register 7
 1195 068a 7860     		str	r0, [r7, #4]
 1196 068c 0B46     		mov	r3, r1
 1197 068e FB70     		strb	r3, [r7, #3]
 783:../src/stm32f30x_spi.c ****   /* Check the parameters */
 784:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 785:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 786:../src/stm32f30x_spi.c **** 
 787:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 1198              		.loc 1 787 0
 1199 0690 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1200 0692 002B     		cmp	r3, #0
 1201 0694 08D0     		beq	.L45
 788:../src/stm32f30x_spi.c ****   {
 789:../src/stm32f30x_spi.c ****     /* Enable the NSS pulse management mode */
 790:../src/stm32f30x_spi.c ****     SPIx->CR2 |= SPI_CR2_NSSP;
 1202              		.loc 1 790 0
 1203 0696 7B68     		ldr	r3, [r7, #4]
 1204 0698 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1205 069a 9BB2     		uxth	r3, r3
 1206 069c 43F00803 		orr	r3, r3, #8
 1207 06a0 9AB2     		uxth	r2, r3
 1208 06a2 7B68     		ldr	r3, [r7, #4]
 1209 06a4 9A80     		strh	r2, [r3, #4]	@ movhi
 1210 06a6 07E0     		b	.L44
 1211              	.L45:
 791:../src/stm32f30x_spi.c ****   }
 792:../src/stm32f30x_spi.c ****   else
 793:../src/stm32f30x_spi.c ****   {
 794:../src/stm32f30x_spi.c ****     /* Disable the NSS pulse management mode */
 795:../src/stm32f30x_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 1212              		.loc 1 795 0
 1213 06a8 7B68     		ldr	r3, [r7, #4]
 1214 06aa 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1215 06ac 9BB2     		uxth	r3, r3
 1216 06ae 23F00803 		bic	r3, r3, #8
 1217 06b2 9AB2     		uxth	r2, r3
 1218 06b4 7B68     		ldr	r3, [r7, #4]
 1219 06b6 9A80     		strh	r2, [r3, #4]	@ movhi
 1220              	.L44:
 796:../src/stm32f30x_spi.c ****   }
 797:../src/stm32f30x_spi.c **** }
 1221              		.loc 1 797 0
 1222 06b8 07F10C07 		add	r7, r7, #12
 1223 06bc BD46     		mov	sp, r7
 1224 06be 80BC     		pop	{r7}
 1225 06c0 7047     		bx	lr
 1226              		.cfi_endproc
 1227              	.LFE125:
 1229 06c2 00BF     		.align	2
 1230              		.global	SPI_SendData8
 1231              		.thumb
 1232              		.thumb_func
 1234              	SPI_SendData8:
 1235              	.LFB126:
 798:../src/stm32f30x_spi.c **** 
 799:../src/stm32f30x_spi.c **** /**
 800:../src/stm32f30x_spi.c ****   * @}
 801:../src/stm32f30x_spi.c ****   */
 802:../src/stm32f30x_spi.c **** 
 803:../src/stm32f30x_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 804:../src/stm32f30x_spi.c ****  *  @brief   Data transfers functions
 805:../src/stm32f30x_spi.c ****  *
 806:../src/stm32f30x_spi.c **** @verbatim
 807:../src/stm32f30x_spi.c ****  ===============================================================================
 808:../src/stm32f30x_spi.c ****                     ##### Data transfers functions #####
 809:../src/stm32f30x_spi.c ****  ===============================================================================  
 810:../src/stm32f30x_spi.c ****     [..] This section provides a set of functions allowing to manage the SPI or I2S 
 811:../src/stm32f30x_spi.c ****          data transfers.
 812:../src/stm32f30x_spi.c ****     [..] In reception, data are received and then stored into an internal Rx buffer while 
 813:../src/stm32f30x_spi.c ****          In transmission, data are first stored into an internal Tx buffer before being 
 814:../src/stm32f30x_spi.c ****          transmitted.
 815:../src/stm32f30x_spi.c ****     [..] The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 816:../src/stm32f30x_spi.c ****          function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 817:../src/stm32f30x_spi.c ****          can be done using SPI_I2S_SendData() function and stores the written data into 
 818:../src/stm32f30x_spi.c ****          Tx buffer.
 819:../src/stm32f30x_spi.c **** 
 820:../src/stm32f30x_spi.c **** @endverbatim
 821:../src/stm32f30x_spi.c ****   * @{
 822:../src/stm32f30x_spi.c ****   */
 823:../src/stm32f30x_spi.c **** 
 824:../src/stm32f30x_spi.c **** /**
 825:../src/stm32f30x_spi.c ****   * @brief  Transmits a Data through the SPIx peripheral.
 826:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 827:../src/stm32f30x_spi.c ****   * @param  Data: Data to be transmitted.
 828:../src/stm32f30x_spi.c ****   * @retval None
 829:../src/stm32f30x_spi.c ****   */
 830:../src/stm32f30x_spi.c **** void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
 831:../src/stm32f30x_spi.c **** {
 1236              		.loc 1 831 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 16
 1239              		@ frame_needed = 1, uses_anonymous_args = 0
 1240              		@ link register save eliminated.
 1241 06c4 80B4     		push	{r7}
 1242              	.LCFI45:
 1243              		.cfi_def_cfa_offset 4
 1244              		.cfi_offset 7, -4
 1245 06c6 85B0     		sub	sp, sp, #20
 1246              	.LCFI46:
 1247              		.cfi_def_cfa_offset 24
 1248 06c8 00AF     		add	r7, sp, #0
 1249              	.LCFI47:
 1250              		.cfi_def_cfa_register 7
 1251 06ca 7860     		str	r0, [r7, #4]
 1252 06cc 0B46     		mov	r3, r1
 1253 06ce FB70     		strb	r3, [r7, #3]
 832:../src/stm32f30x_spi.c ****   uint32_t spixbase = 0x00;
 1254              		.loc 1 832 0
 1255 06d0 4FF00003 		mov	r3, #0
 1256 06d4 FB60     		str	r3, [r7, #12]
 833:../src/stm32f30x_spi.c **** 
 834:../src/stm32f30x_spi.c ****   /* Check the parameters */
 835:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 836:../src/stm32f30x_spi.c **** 
 837:../src/stm32f30x_spi.c ****   spixbase = (uint32_t)SPIx; 
 1257              		.loc 1 837 0
 1258 06d6 7B68     		ldr	r3, [r7, #4]
 1259 06d8 FB60     		str	r3, [r7, #12]
 838:../src/stm32f30x_spi.c ****   spixbase += 0x0C;
 1260              		.loc 1 838 0
 1261 06da FB68     		ldr	r3, [r7, #12]
 1262 06dc 03F10C03 		add	r3, r3, #12
 1263 06e0 FB60     		str	r3, [r7, #12]
 839:../src/stm32f30x_spi.c ****   
 840:../src/stm32f30x_spi.c ****   *(__IO uint8_t *) spixbase = Data;
 1264              		.loc 1 840 0
 1265 06e2 FB68     		ldr	r3, [r7, #12]
 1266 06e4 FA78     		ldrb	r2, [r7, #3]
 1267 06e6 1A70     		strb	r2, [r3, #0]
 841:../src/stm32f30x_spi.c **** }
 1268              		.loc 1 841 0
 1269 06e8 07F11407 		add	r7, r7, #20
 1270 06ec BD46     		mov	sp, r7
 1271 06ee 80BC     		pop	{r7}
 1272 06f0 7047     		bx	lr
 1273              		.cfi_endproc
 1274              	.LFE126:
 1276 06f2 00BF     		.align	2
 1277              		.global	SPI_I2S_SendData16
 1278              		.thumb
 1279              		.thumb_func
 1281              	SPI_I2S_SendData16:
 1282              	.LFB127:
 842:../src/stm32f30x_spi.c **** 
 843:../src/stm32f30x_spi.c **** /**
 844:../src/stm32f30x_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 845:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 846:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
 847:../src/stm32f30x_spi.c ****   * @param  Data: Data to be transmitted.
 848:../src/stm32f30x_spi.c ****   * @retval None
 849:../src/stm32f30x_spi.c ****   */
 850:../src/stm32f30x_spi.c **** void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
 851:../src/stm32f30x_spi.c **** {
 1283              		.loc 1 851 0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 8
 1286              		@ frame_needed = 1, uses_anonymous_args = 0
 1287              		@ link register save eliminated.
 1288 06f4 80B4     		push	{r7}
 1289              	.LCFI48:
 1290              		.cfi_def_cfa_offset 4
 1291              		.cfi_offset 7, -4
 1292 06f6 83B0     		sub	sp, sp, #12
 1293              	.LCFI49:
 1294              		.cfi_def_cfa_offset 16
 1295 06f8 00AF     		add	r7, sp, #0
 1296              	.LCFI50:
 1297              		.cfi_def_cfa_register 7
 1298 06fa 7860     		str	r0, [r7, #4]
 1299 06fc 0B46     		mov	r3, r1
 1300 06fe 7B80     		strh	r3, [r7, #2]	@ movhi
 852:../src/stm32f30x_spi.c ****   /* Check the parameters */
 853:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 854:../src/stm32f30x_spi.c ****   
 855:../src/stm32f30x_spi.c ****   SPIx->DR = (uint16_t)Data;
 1301              		.loc 1 855 0
 1302 0700 7B68     		ldr	r3, [r7, #4]
 1303 0702 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1304 0704 9A81     		strh	r2, [r3, #12]	@ movhi
 856:../src/stm32f30x_spi.c **** }
 1305              		.loc 1 856 0
 1306 0706 07F10C07 		add	r7, r7, #12
 1307 070a BD46     		mov	sp, r7
 1308 070c 80BC     		pop	{r7}
 1309 070e 7047     		bx	lr
 1310              		.cfi_endproc
 1311              	.LFE127:
 1313              		.align	2
 1314              		.global	SPI_ReceiveData8
 1315              		.thumb
 1316              		.thumb_func
 1318              	SPI_ReceiveData8:
 1319              	.LFB128:
 857:../src/stm32f30x_spi.c **** 
 858:../src/stm32f30x_spi.c **** /**
 859:../src/stm32f30x_spi.c ****   * @brief  Returns the most recent received data by the SPIx peripheral. 
 860:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 861:../src/stm32f30x_spi.c ****   * @retval The value of the received data.
 862:../src/stm32f30x_spi.c ****   */
 863:../src/stm32f30x_spi.c **** uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
 864:../src/stm32f30x_spi.c **** {
 1320              		.loc 1 864 0
 1321              		.cfi_startproc
 1322              		@ args = 0, pretend = 0, frame = 16
 1323              		@ frame_needed = 1, uses_anonymous_args = 0
 1324              		@ link register save eliminated.
 1325 0710 80B4     		push	{r7}
 1326              	.LCFI51:
 1327              		.cfi_def_cfa_offset 4
 1328              		.cfi_offset 7, -4
 1329 0712 85B0     		sub	sp, sp, #20
 1330              	.LCFI52:
 1331              		.cfi_def_cfa_offset 24
 1332 0714 00AF     		add	r7, sp, #0
 1333              	.LCFI53:
 1334              		.cfi_def_cfa_register 7
 1335 0716 7860     		str	r0, [r7, #4]
 865:../src/stm32f30x_spi.c ****   uint32_t spixbase = 0x00;
 1336              		.loc 1 865 0
 1337 0718 4FF00003 		mov	r3, #0
 1338 071c FB60     		str	r3, [r7, #12]
 866:../src/stm32f30x_spi.c ****   
 867:../src/stm32f30x_spi.c ****   /* Check the parameters */
 868:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 869:../src/stm32f30x_spi.c ****   
 870:../src/stm32f30x_spi.c ****   spixbase = (uint32_t)SPIx; 
 1339              		.loc 1 870 0
 1340 071e 7B68     		ldr	r3, [r7, #4]
 1341 0720 FB60     		str	r3, [r7, #12]
 871:../src/stm32f30x_spi.c ****   spixbase += 0x0C;
 1342              		.loc 1 871 0
 1343 0722 FB68     		ldr	r3, [r7, #12]
 1344 0724 03F10C03 		add	r3, r3, #12
 1345 0728 FB60     		str	r3, [r7, #12]
 872:../src/stm32f30x_spi.c ****   
 873:../src/stm32f30x_spi.c ****   return *(__IO uint8_t *) spixbase;
 1346              		.loc 1 873 0
 1347 072a FB68     		ldr	r3, [r7, #12]
 1348 072c 1B78     		ldrb	r3, [r3, #0]
 1349 072e DBB2     		uxtb	r3, r3
 874:../src/stm32f30x_spi.c **** }
 1350              		.loc 1 874 0
 1351 0730 1846     		mov	r0, r3
 1352 0732 07F11407 		add	r7, r7, #20
 1353 0736 BD46     		mov	sp, r7
 1354 0738 80BC     		pop	{r7}
 1355 073a 7047     		bx	lr
 1356              		.cfi_endproc
 1357              	.LFE128:
 1359              		.align	2
 1360              		.global	SPI_I2S_ReceiveData16
 1361              		.thumb
 1362              		.thumb_func
 1364              	SPI_I2S_ReceiveData16:
 1365              	.LFB129:
 875:../src/stm32f30x_spi.c **** 
 876:../src/stm32f30x_spi.c **** /**
 877:../src/stm32f30x_spi.c ****   * @brief  Returns the most recent received data by the SPIx peripheral. 
 878:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 879:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.
 880:../src/stm32f30x_spi.c ****   * @retval The value of the received data.
 881:../src/stm32f30x_spi.c ****   */
 882:../src/stm32f30x_spi.c **** uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
 883:../src/stm32f30x_spi.c **** {  
 1366              		.loc 1 883 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 8
 1369              		@ frame_needed = 1, uses_anonymous_args = 0
 1370              		@ link register save eliminated.
 1371 073c 80B4     		push	{r7}
 1372              	.LCFI54:
 1373              		.cfi_def_cfa_offset 4
 1374              		.cfi_offset 7, -4
 1375 073e 83B0     		sub	sp, sp, #12
 1376              	.LCFI55:
 1377              		.cfi_def_cfa_offset 16
 1378 0740 00AF     		add	r7, sp, #0
 1379              	.LCFI56:
 1380              		.cfi_def_cfa_register 7
 1381 0742 7860     		str	r0, [r7, #4]
 884:../src/stm32f30x_spi.c ****   /* Check the parameters */
 885:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 886:../src/stm32f30x_spi.c ****   
 887:../src/stm32f30x_spi.c ****   return SPIx->DR;
 1382              		.loc 1 887 0
 1383 0744 7B68     		ldr	r3, [r7, #4]
 1384 0746 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1385 0748 9BB2     		uxth	r3, r3
 888:../src/stm32f30x_spi.c **** }
 1386              		.loc 1 888 0
 1387 074a 1846     		mov	r0, r3
 1388 074c 07F10C07 		add	r7, r7, #12
 1389 0750 BD46     		mov	sp, r7
 1390 0752 80BC     		pop	{r7}
 1391 0754 7047     		bx	lr
 1392              		.cfi_endproc
 1393              	.LFE129:
 1395 0756 00BF     		.align	2
 1396              		.global	SPI_CRCLengthConfig
 1397              		.thumb
 1398              		.thumb_func
 1400              	SPI_CRCLengthConfig:
 1401              	.LFB130:
 889:../src/stm32f30x_spi.c **** /**
 890:../src/stm32f30x_spi.c ****   * @}
 891:../src/stm32f30x_spi.c ****   */
 892:../src/stm32f30x_spi.c **** 
 893:../src/stm32f30x_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 894:../src/stm32f30x_spi.c ****  *  @brief   Hardware CRC Calculation functions
 895:../src/stm32f30x_spi.c ****  *
 896:../src/stm32f30x_spi.c **** @verbatim   
 897:../src/stm32f30x_spi.c ****  ===============================================================================
 898:../src/stm32f30x_spi.c ****                   ##### Hardware CRC Calculation functions #####
 899:../src/stm32f30x_spi.c ****  ===============================================================================  
 900:../src/stm32f30x_spi.c ****     [..] This section provides a set of functions allowing to manage the SPI CRC hardware 
 901:../src/stm32f30x_spi.c ****          calculation.
 902:../src/stm32f30x_spi.c ****     [..] SPI communication using CRC is possible through the following procedure:
 903:../src/stm32f30x_spi.c ****          (#) Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 904:../src/stm32f30x_spi.c ****              Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 905:../src/stm32f30x_spi.c ****              function.
 906:../src/stm32f30x_spi.c ****          (#) Enable the CRC calculation using the SPI_CalculateCRC() function.
 907:../src/stm32f30x_spi.c ****          (#) Enable the SPI using the SPI_Cmd() function
 908:../src/stm32f30x_spi.c ****          (#) Before writing the last data to the TX buffer, set the CRCNext bit using the 
 909:../src/stm32f30x_spi.c ****              SPI_TransmitCRC() function to indicate that after transmission of the last 
 910:../src/stm32f30x_spi.c ****              data, the CRC should be transmitted.
 911:../src/stm32f30x_spi.c ****          (#) After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 912:../src/stm32f30x_spi.c ****              bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 913:../src/stm32f30x_spi.c ****              value. 
 914:../src/stm32f30x_spi.c ****              If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 915:../src/stm32f30x_spi.c ****              can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 916:../src/stm32f30x_spi.c ****     [..]
 917:../src/stm32f30x_spi.c ****     (@)
 918:../src/stm32f30x_spi.c ****          (+@) It is advised to don't read the calculate CRC values during the communication.
 919:../src/stm32f30x_spi.c ****          (+@) When the SPI is in slave mode, be careful to enable CRC calculation only 
 920:../src/stm32f30x_spi.c ****               when the clock is stable, that is, when the clock is in the steady state. 
 921:../src/stm32f30x_spi.c ****               If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 922:../src/stm32f30x_spi.c ****               to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 923:../src/stm32f30x_spi.c ****               the value of the SPE bit.
 924:../src/stm32f30x_spi.c ****          (+@) With high bitrate frequencies, be careful when transmitting the CRC.
 925:../src/stm32f30x_spi.c ****               As the number of used CPU cycles has to be as low as possible in the CRC 
 926:../src/stm32f30x_spi.c ****               transfer phase, it is forbidden to call software functions in the CRC 
 927:../src/stm32f30x_spi.c ****               transmission sequence to avoid errors in the last data and CRC reception. 
 928:../src/stm32f30x_spi.c ****               In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 929:../src/stm32f30x_spi.c ****               of the last data.
 930:../src/stm32f30x_spi.c ****          (+@) For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 931:../src/stm32f30x_spi.c ****               degradation of the SPI speed performance due to CPU accesses impacting the 
 932:../src/stm32f30x_spi.c ****               SPI bandwidth.
 933:../src/stm32f30x_spi.c ****          (+@) When the STM32F30x are configured as slaves and the NSS hardware mode is 
 934:../src/stm32f30x_spi.c ****               used, the NSS pin needs to be kept low between the data phase and the CRC 
 935:../src/stm32f30x_spi.c ****               phase.
 936:../src/stm32f30x_spi.c ****          (+@) When the SPI is configured in slave mode with the CRC feature enabled, CRC
 937:../src/stm32f30x_spi.c ****               calculation takes place even if a high level is applied on the NSS pin. 
 938:../src/stm32f30x_spi.c ****               This may happen for example in case of a multislave environment where the 
 939:../src/stm32f30x_spi.c ****               communication master addresses slaves alternately.
 940:../src/stm32f30x_spi.c ****          (+@) Between a slave deselection (high level on NSS) and a new slave selection 
 941:../src/stm32f30x_spi.c ****               (low level on NSS), the CRC value should be cleared on both master and slave
 942:../src/stm32f30x_spi.c ****               sides in order to resynchronize the master and slave for their respective 
 943:../src/stm32f30x_spi.c ****               CRC calculation.
 944:../src/stm32f30x_spi.c ****     [..]          
 945:../src/stm32f30x_spi.c ****     (@) To clear the CRC, follow the procedure below:
 946:../src/stm32f30x_spi.c ****          (#@) Disable SPI using the SPI_Cmd() function.
 947:../src/stm32f30x_spi.c ****          (#@) Disable the CRC calculation using the SPI_CalculateCRC() function.
 948:../src/stm32f30x_spi.c ****          (#@) Enable the CRC calculation using the SPI_CalculateCRC() function.
 949:../src/stm32f30x_spi.c ****          (#@) Enable SPI using the SPI_Cmd() function.
 950:../src/stm32f30x_spi.c **** 
 951:../src/stm32f30x_spi.c **** @endverbatim
 952:../src/stm32f30x_spi.c ****   * @{
 953:../src/stm32f30x_spi.c ****   */
 954:../src/stm32f30x_spi.c **** 
 955:../src/stm32f30x_spi.c **** /**
 956:../src/stm32f30x_spi.c ****   * @brief  Configures the CRC calculation length for the selected SPI.
 957:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 958:../src/stm32f30x_spi.c ****   * @param  SPI_CRCLength: specifies the SPI CRC calculation length.
 959:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
 960:../src/stm32f30x_spi.c ****   *     @arg SPI_CRCLength_8b: Set CRC Calculation to 8 bits
 961:../src/stm32f30x_spi.c ****   *     @arg SPI_CRCLength_16b: Set CRC Calculation to 16 bits
 962:../src/stm32f30x_spi.c ****   * @retval None
 963:../src/stm32f30x_spi.c ****   */
 964:../src/stm32f30x_spi.c **** void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength)
 965:../src/stm32f30x_spi.c **** {
 1402              		.loc 1 965 0
 1403              		.cfi_startproc
 1404              		@ args = 0, pretend = 0, frame = 8
 1405              		@ frame_needed = 1, uses_anonymous_args = 0
 1406              		@ link register save eliminated.
 1407 0758 80B4     		push	{r7}
 1408              	.LCFI57:
 1409              		.cfi_def_cfa_offset 4
 1410              		.cfi_offset 7, -4
 1411 075a 83B0     		sub	sp, sp, #12
 1412              	.LCFI58:
 1413              		.cfi_def_cfa_offset 16
 1414 075c 00AF     		add	r7, sp, #0
 1415              	.LCFI59:
 1416              		.cfi_def_cfa_register 7
 1417 075e 7860     		str	r0, [r7, #4]
 1418 0760 0B46     		mov	r3, r1
 1419 0762 7B80     		strh	r3, [r7, #2]	@ movhi
 966:../src/stm32f30x_spi.c ****   /* Check the parameters */
 967:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 968:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));
 969:../src/stm32f30x_spi.c **** 
 970:../src/stm32f30x_spi.c ****   /* Clear CRCL bit */
 971:../src/stm32f30x_spi.c ****   SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 1420              		.loc 1 971 0
 1421 0764 7B68     		ldr	r3, [r7, #4]
 1422 0766 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1423 0768 9BB2     		uxth	r3, r3
 1424 076a 23F40063 		bic	r3, r3, #2048
 1425 076e 9AB2     		uxth	r2, r3
 1426 0770 7B68     		ldr	r3, [r7, #4]
 1427 0772 1A80     		strh	r2, [r3, #0]	@ movhi
 972:../src/stm32f30x_spi.c **** 
 973:../src/stm32f30x_spi.c ****   /* Set new CRCL bit value */
 974:../src/stm32f30x_spi.c ****   SPIx->CR1 |= SPI_CRCLength;
 1428              		.loc 1 974 0
 1429 0774 7B68     		ldr	r3, [r7, #4]
 1430 0776 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1431 0778 9AB2     		uxth	r2, r3
 1432 077a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1433 077c 1343     		orrs	r3, r3, r2
 1434 077e 9AB2     		uxth	r2, r3
 1435 0780 7B68     		ldr	r3, [r7, #4]
 1436 0782 1A80     		strh	r2, [r3, #0]	@ movhi
 975:../src/stm32f30x_spi.c **** }
 1437              		.loc 1 975 0
 1438 0784 07F10C07 		add	r7, r7, #12
 1439 0788 BD46     		mov	sp, r7
 1440 078a 80BC     		pop	{r7}
 1441 078c 7047     		bx	lr
 1442              		.cfi_endproc
 1443              	.LFE130:
 1445 078e 00BF     		.align	2
 1446              		.global	SPI_CalculateCRC
 1447              		.thumb
 1448              		.thumb_func
 1450              	SPI_CalculateCRC:
 1451              	.LFB131:
 976:../src/stm32f30x_spi.c **** 
 977:../src/stm32f30x_spi.c **** /**
 978:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 979:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 980:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 981:../src/stm32f30x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 982:../src/stm32f30x_spi.c ****   * @retval None
 983:../src/stm32f30x_spi.c ****   */
 984:../src/stm32f30x_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 985:../src/stm32f30x_spi.c **** {
 1452              		.loc 1 985 0
 1453              		.cfi_startproc
 1454              		@ args = 0, pretend = 0, frame = 8
 1455              		@ frame_needed = 1, uses_anonymous_args = 0
 1456              		@ link register save eliminated.
 1457 0790 80B4     		push	{r7}
 1458              	.LCFI60:
 1459              		.cfi_def_cfa_offset 4
 1460              		.cfi_offset 7, -4
 1461 0792 83B0     		sub	sp, sp, #12
 1462              	.LCFI61:
 1463              		.cfi_def_cfa_offset 16
 1464 0794 00AF     		add	r7, sp, #0
 1465              	.LCFI62:
 1466              		.cfi_def_cfa_register 7
 1467 0796 7860     		str	r0, [r7, #4]
 1468 0798 0B46     		mov	r3, r1
 1469 079a FB70     		strb	r3, [r7, #3]
 986:../src/stm32f30x_spi.c ****   /* Check the parameters */
 987:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 988:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 989:../src/stm32f30x_spi.c **** 
 990:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 1470              		.loc 1 990 0
 1471 079c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1472 079e 002B     		cmp	r3, #0
 1473 07a0 08D0     		beq	.L55
 991:../src/stm32f30x_spi.c ****   {
 992:../src/stm32f30x_spi.c ****     /* Enable the selected SPI CRC calculation */
 993:../src/stm32f30x_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 1474              		.loc 1 993 0
 1475 07a2 7B68     		ldr	r3, [r7, #4]
 1476 07a4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1477 07a6 9BB2     		uxth	r3, r3
 1478 07a8 43F40053 		orr	r3, r3, #8192
 1479 07ac 9AB2     		uxth	r2, r3
 1480 07ae 7B68     		ldr	r3, [r7, #4]
 1481 07b0 1A80     		strh	r2, [r3, #0]	@ movhi
 1482 07b2 07E0     		b	.L54
 1483              	.L55:
 994:../src/stm32f30x_spi.c ****   }
 995:../src/stm32f30x_spi.c ****   else
 996:../src/stm32f30x_spi.c ****   {
 997:../src/stm32f30x_spi.c ****     /* Disable the selected SPI CRC calculation */
 998:../src/stm32f30x_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 1484              		.loc 1 998 0
 1485 07b4 7B68     		ldr	r3, [r7, #4]
 1486 07b6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1487 07b8 9BB2     		uxth	r3, r3
 1488 07ba 23F40053 		bic	r3, r3, #8192
 1489 07be 9AB2     		uxth	r2, r3
 1490 07c0 7B68     		ldr	r3, [r7, #4]
 1491 07c2 1A80     		strh	r2, [r3, #0]	@ movhi
 1492              	.L54:
 999:../src/stm32f30x_spi.c ****   }
1000:../src/stm32f30x_spi.c **** }
 1493              		.loc 1 1000 0
 1494 07c4 07F10C07 		add	r7, r7, #12
 1495 07c8 BD46     		mov	sp, r7
 1496 07ca 80BC     		pop	{r7}
 1497 07cc 7047     		bx	lr
 1498              		.cfi_endproc
 1499              	.LFE131:
 1501 07ce 00BF     		.align	2
 1502              		.global	SPI_TransmitCRC
 1503              		.thumb
 1504              		.thumb_func
 1506              	SPI_TransmitCRC:
 1507              	.LFB132:
1001:../src/stm32f30x_spi.c **** 
1002:../src/stm32f30x_spi.c **** /**
1003:../src/stm32f30x_spi.c ****   * @brief  Transmits the SPIx CRC value.
1004:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1005:../src/stm32f30x_spi.c ****   * @retval None
1006:../src/stm32f30x_spi.c ****   */
1007:../src/stm32f30x_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
1008:../src/stm32f30x_spi.c **** {
 1508              		.loc 1 1008 0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 8
 1511              		@ frame_needed = 1, uses_anonymous_args = 0
 1512              		@ link register save eliminated.
 1513 07d0 80B4     		push	{r7}
 1514              	.LCFI63:
 1515              		.cfi_def_cfa_offset 4
 1516              		.cfi_offset 7, -4
 1517 07d2 83B0     		sub	sp, sp, #12
 1518              	.LCFI64:
 1519              		.cfi_def_cfa_offset 16
 1520 07d4 00AF     		add	r7, sp, #0
 1521              	.LCFI65:
 1522              		.cfi_def_cfa_register 7
 1523 07d6 7860     		str	r0, [r7, #4]
1009:../src/stm32f30x_spi.c ****   /* Check the parameters */
1010:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1011:../src/stm32f30x_spi.c **** 
1012:../src/stm32f30x_spi.c ****   /* Enable the selected SPI CRC transmission */
1013:../src/stm32f30x_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 1524              		.loc 1 1013 0
 1525 07d8 7B68     		ldr	r3, [r7, #4]
 1526 07da 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1527 07dc 9BB2     		uxth	r3, r3
 1528 07de 43F48053 		orr	r3, r3, #4096
 1529 07e2 9AB2     		uxth	r2, r3
 1530 07e4 7B68     		ldr	r3, [r7, #4]
 1531 07e6 1A80     		strh	r2, [r3, #0]	@ movhi
1014:../src/stm32f30x_spi.c **** }
 1532              		.loc 1 1014 0
 1533 07e8 07F10C07 		add	r7, r7, #12
 1534 07ec BD46     		mov	sp, r7
 1535 07ee 80BC     		pop	{r7}
 1536 07f0 7047     		bx	lr
 1537              		.cfi_endproc
 1538              	.LFE132:
 1540 07f2 00BF     		.align	2
 1541              		.global	SPI_GetCRC
 1542              		.thumb
 1543              		.thumb_func
 1545              	SPI_GetCRC:
 1546              	.LFB133:
1015:../src/stm32f30x_spi.c **** 
1016:../src/stm32f30x_spi.c **** /**
1017:../src/stm32f30x_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
1018:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1019:../src/stm32f30x_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
1020:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
1021:../src/stm32f30x_spi.c ****   *     @arg SPI_CRC_Tx: Selects Tx CRC register
1022:../src/stm32f30x_spi.c ****   *     @arg SPI_CRC_Rx: Selects Rx CRC register
1023:../src/stm32f30x_spi.c ****   * @retval The selected CRC register value..
1024:../src/stm32f30x_spi.c ****   */
1025:../src/stm32f30x_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
1026:../src/stm32f30x_spi.c **** {
 1547              		.loc 1 1026 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 16
 1550              		@ frame_needed = 1, uses_anonymous_args = 0
 1551              		@ link register save eliminated.
 1552 07f4 80B4     		push	{r7}
 1553              	.LCFI66:
 1554              		.cfi_def_cfa_offset 4
 1555              		.cfi_offset 7, -4
 1556 07f6 85B0     		sub	sp, sp, #20
 1557              	.LCFI67:
 1558              		.cfi_def_cfa_offset 24
 1559 07f8 00AF     		add	r7, sp, #0
 1560              	.LCFI68:
 1561              		.cfi_def_cfa_register 7
 1562 07fa 7860     		str	r0, [r7, #4]
 1563 07fc 0B46     		mov	r3, r1
 1564 07fe FB70     		strb	r3, [r7, #3]
1027:../src/stm32f30x_spi.c ****   uint16_t crcreg = 0;
 1565              		.loc 1 1027 0
 1566 0800 4FF00003 		mov	r3, #0
 1567 0804 FB81     		strh	r3, [r7, #14]	@ movhi
1028:../src/stm32f30x_spi.c ****   /* Check the parameters */
1029:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1030:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
1031:../src/stm32f30x_spi.c **** 
1032:../src/stm32f30x_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1568              		.loc 1 1032 0
 1569 0806 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1570 0808 012B     		cmp	r3, #1
 1571 080a 03D0     		beq	.L59
1033:../src/stm32f30x_spi.c ****   {
1034:../src/stm32f30x_spi.c ****     /* Get the Tx CRC register */
1035:../src/stm32f30x_spi.c ****     crcreg = SPIx->TXCRCR;
 1572              		.loc 1 1035 0
 1573 080c 7B68     		ldr	r3, [r7, #4]
 1574 080e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1575 0810 FB81     		strh	r3, [r7, #14]	@ movhi
 1576 0812 02E0     		b	.L60
 1577              	.L59:
1036:../src/stm32f30x_spi.c ****   }
1037:../src/stm32f30x_spi.c ****   else
1038:../src/stm32f30x_spi.c ****   {
1039:../src/stm32f30x_spi.c ****     /* Get the Rx CRC register */
1040:../src/stm32f30x_spi.c ****     crcreg = SPIx->RXCRCR;
 1578              		.loc 1 1040 0
 1579 0814 7B68     		ldr	r3, [r7, #4]
 1580 0816 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1581 0818 FB81     		strh	r3, [r7, #14]	@ movhi
 1582              	.L60:
1041:../src/stm32f30x_spi.c ****   }
1042:../src/stm32f30x_spi.c ****   /* Return the selected CRC register */
1043:../src/stm32f30x_spi.c ****   return crcreg;
 1583              		.loc 1 1043 0
 1584 081a FB89     		ldrh	r3, [r7, #14]
1044:../src/stm32f30x_spi.c **** }
 1585              		.loc 1 1044 0
 1586 081c 1846     		mov	r0, r3
 1587 081e 07F11407 		add	r7, r7, #20
 1588 0822 BD46     		mov	sp, r7
 1589 0824 80BC     		pop	{r7}
 1590 0826 7047     		bx	lr
 1591              		.cfi_endproc
 1592              	.LFE133:
 1594              		.align	2
 1595              		.global	SPI_GetCRCPolynomial
 1596              		.thumb
 1597              		.thumb_func
 1599              	SPI_GetCRCPolynomial:
 1600              	.LFB134:
1045:../src/stm32f30x_spi.c **** 
1046:../src/stm32f30x_spi.c **** /**
1047:../src/stm32f30x_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
1048:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1049:../src/stm32f30x_spi.c ****   * @retval The CRC Polynomial register value.
1050:../src/stm32f30x_spi.c ****   */
1051:../src/stm32f30x_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
1052:../src/stm32f30x_spi.c **** {
 1601              		.loc 1 1052 0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 8
 1604              		@ frame_needed = 1, uses_anonymous_args = 0
 1605              		@ link register save eliminated.
 1606 0828 80B4     		push	{r7}
 1607              	.LCFI69:
 1608              		.cfi_def_cfa_offset 4
 1609              		.cfi_offset 7, -4
 1610 082a 83B0     		sub	sp, sp, #12
 1611              	.LCFI70:
 1612              		.cfi_def_cfa_offset 16
 1613 082c 00AF     		add	r7, sp, #0
 1614              	.LCFI71:
 1615              		.cfi_def_cfa_register 7
 1616 082e 7860     		str	r0, [r7, #4]
1053:../src/stm32f30x_spi.c ****   /* Check the parameters */
1054:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1055:../src/stm32f30x_spi.c **** 
1056:../src/stm32f30x_spi.c ****   /* Return the CRC polynomial register */
1057:../src/stm32f30x_spi.c ****   return SPIx->CRCPR;
 1617              		.loc 1 1057 0
 1618 0830 7B68     		ldr	r3, [r7, #4]
 1619 0832 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1620 0834 9BB2     		uxth	r3, r3
1058:../src/stm32f30x_spi.c **** }
 1621              		.loc 1 1058 0
 1622 0836 1846     		mov	r0, r3
 1623 0838 07F10C07 		add	r7, r7, #12
 1624 083c BD46     		mov	sp, r7
 1625 083e 80BC     		pop	{r7}
 1626 0840 7047     		bx	lr
 1627              		.cfi_endproc
 1628              	.LFE134:
 1630 0842 00BF     		.align	2
 1631              		.global	SPI_I2S_DMACmd
 1632              		.thumb
 1633              		.thumb_func
 1635              	SPI_I2S_DMACmd:
 1636              	.LFB135:
1059:../src/stm32f30x_spi.c **** 
1060:../src/stm32f30x_spi.c **** /**
1061:../src/stm32f30x_spi.c ****   * @}
1062:../src/stm32f30x_spi.c ****   */
1063:../src/stm32f30x_spi.c **** 
1064:../src/stm32f30x_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
1065:../src/stm32f30x_spi.c ****  *  @brief   DMA transfers management functions
1066:../src/stm32f30x_spi.c ****   *
1067:../src/stm32f30x_spi.c **** @verbatim   
1068:../src/stm32f30x_spi.c ****  ===============================================================================
1069:../src/stm32f30x_spi.c ****                   ##### DMA transfers management functions #####
1070:../src/stm32f30x_spi.c ****  ===============================================================================
1071:../src/stm32f30x_spi.c **** 
1072:../src/stm32f30x_spi.c **** @endverbatim
1073:../src/stm32f30x_spi.c ****   * @{
1074:../src/stm32f30x_spi.c ****   */
1075:../src/stm32f30x_spi.c **** 
1076:../src/stm32f30x_spi.c **** /**
1077:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
1078:../src/stm32f30x_spi.c ****   * @param  SPIx:To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1079:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1080:../src/stm32f30x_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
1081:../src/stm32f30x_spi.c ****   *   This parameter can be any combination of the following values:
1082:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
1083:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
1084:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
1085:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
1086:../src/stm32f30x_spi.c ****   * @retval None
1087:../src/stm32f30x_spi.c ****   */
1088:../src/stm32f30x_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
1089:../src/stm32f30x_spi.c **** {
 1637              		.loc 1 1089 0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 8
 1640              		@ frame_needed = 1, uses_anonymous_args = 0
 1641              		@ link register save eliminated.
 1642 0844 80B4     		push	{r7}
 1643              	.LCFI72:
 1644              		.cfi_def_cfa_offset 4
 1645              		.cfi_offset 7, -4
 1646 0846 83B0     		sub	sp, sp, #12
 1647              	.LCFI73:
 1648              		.cfi_def_cfa_offset 16
 1649 0848 00AF     		add	r7, sp, #0
 1650              	.LCFI74:
 1651              		.cfi_def_cfa_register 7
 1652 084a 7860     		str	r0, [r7, #4]
 1653 084c 1346     		mov	r3, r2
 1654 084e 0A46     		mov	r2, r1	@ movhi
 1655 0850 7A80     		strh	r2, [r7, #2]	@ movhi
 1656 0852 7B70     		strb	r3, [r7, #1]
1090:../src/stm32f30x_spi.c ****   /* Check the parameters */
1091:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1092:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1093:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));
1094:../src/stm32f30x_spi.c **** 
1095:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 1657              		.loc 1 1095 0
 1658 0854 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1659 0856 002B     		cmp	r3, #0
 1660 0858 08D0     		beq	.L65
1096:../src/stm32f30x_spi.c ****   {
1097:../src/stm32f30x_spi.c ****     /* Enable the selected SPI DMA requests */
1098:../src/stm32f30x_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1661              		.loc 1 1098 0
 1662 085a 7B68     		ldr	r3, [r7, #4]
 1663 085c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1664 085e 9AB2     		uxth	r2, r3
 1665 0860 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1666 0862 1343     		orrs	r3, r3, r2
 1667 0864 9AB2     		uxth	r2, r3
 1668 0866 7B68     		ldr	r3, [r7, #4]
 1669 0868 9A80     		strh	r2, [r3, #4]	@ movhi
 1670 086a 0AE0     		b	.L64
 1671              	.L65:
1099:../src/stm32f30x_spi.c ****   }
1100:../src/stm32f30x_spi.c ****   else
1101:../src/stm32f30x_spi.c ****   {
1102:../src/stm32f30x_spi.c ****     /* Disable the selected SPI DMA requests */
1103:../src/stm32f30x_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1672              		.loc 1 1103 0
 1673 086c 7B68     		ldr	r3, [r7, #4]
 1674 086e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1675 0870 9AB2     		uxth	r2, r3
 1676 0872 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1677 0874 6FEA0303 		mvn	r3, r3
 1678 0878 9BB2     		uxth	r3, r3
 1679 087a 1340     		ands	r3, r3, r2
 1680 087c 9AB2     		uxth	r2, r3
 1681 087e 7B68     		ldr	r3, [r7, #4]
 1682 0880 9A80     		strh	r2, [r3, #4]	@ movhi
 1683              	.L64:
1104:../src/stm32f30x_spi.c ****   }
1105:../src/stm32f30x_spi.c **** }
 1684              		.loc 1 1105 0
 1685 0882 07F10C07 		add	r7, r7, #12
 1686 0886 BD46     		mov	sp, r7
 1687 0888 80BC     		pop	{r7}
 1688 088a 7047     		bx	lr
 1689              		.cfi_endproc
 1690              	.LFE135:
 1692              		.align	2
 1693              		.global	SPI_LastDMATransferCmd
 1694              		.thumb
 1695              		.thumb_func
 1697              	SPI_LastDMATransferCmd:
 1698              	.LFB136:
1106:../src/stm32f30x_spi.c **** 
1107:../src/stm32f30x_spi.c **** /**
1108:../src/stm32f30x_spi.c ****   * @brief  Configures the number of data to transfer type(Even/Odd) for the DMA
1109:../src/stm32f30x_spi.c ****   *         last transfers and for the selected SPI.
1110:../src/stm32f30x_spi.c ****   * @note   This function have a meaning only if DMA mode is selected and if 
1111:../src/stm32f30x_spi.c ****   *         the packing mode is used (data length <= 8 and DMA transfer size halfword)  
1112:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1113:../src/stm32f30x_spi.c ****   * @param  SPI_LastDMATransfer: specifies the SPI last DMA transfers state.
1114:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
1115:../src/stm32f30x_spi.c ****   *     @arg SPI_LastDMATransfer_TxEvenRxEven: Number of data for transmission Even
1116:../src/stm32f30x_spi.c ****   *          and number of data for reception Even.
1117:../src/stm32f30x_spi.c ****   *     @arg SPI_LastDMATransfer_TxOddRxEven: Number of data for transmission Odd
1118:../src/stm32f30x_spi.c ****   *          and number of data for reception Even.
1119:../src/stm32f30x_spi.c ****   *     @arg SPI_LastDMATransfer_TxEvenRxOdd: Number of data for transmission Even
1120:../src/stm32f30x_spi.c ****   *          and number of data for reception Odd.
1121:../src/stm32f30x_spi.c ****   *     @arg SPI_LastDMATransfer_TxOddRxOdd: RNumber of data for transmission Odd
1122:../src/stm32f30x_spi.c ****   *          and number of data for reception Odd.
1123:../src/stm32f30x_spi.c ****   * @retval None
1124:../src/stm32f30x_spi.c ****   */
1125:../src/stm32f30x_spi.c **** void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer)
1126:../src/stm32f30x_spi.c **** {
 1699              		.loc 1 1126 0
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 8
 1702              		@ frame_needed = 1, uses_anonymous_args = 0
 1703              		@ link register save eliminated.
 1704 088c 80B4     		push	{r7}
 1705              	.LCFI75:
 1706              		.cfi_def_cfa_offset 4
 1707              		.cfi_offset 7, -4
 1708 088e 83B0     		sub	sp, sp, #12
 1709              	.LCFI76:
 1710              		.cfi_def_cfa_offset 16
 1711 0890 00AF     		add	r7, sp, #0
 1712              	.LCFI77:
 1713              		.cfi_def_cfa_register 7
 1714 0892 7860     		str	r0, [r7, #4]
 1715 0894 0B46     		mov	r3, r1
 1716 0896 7B80     		strh	r3, [r7, #2]	@ movhi
1127:../src/stm32f30x_spi.c ****   /* Check the parameters */
1128:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1129:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));
1130:../src/stm32f30x_spi.c **** 
1131:../src/stm32f30x_spi.c ****   /* Clear LDMA_TX and LDMA_RX bits */
1132:../src/stm32f30x_spi.c ****   SPIx->CR2 &= CR2_LDMA_MASK;
 1717              		.loc 1 1132 0
 1718 0898 7B68     		ldr	r3, [r7, #4]
 1719 089a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1720 089c 9BB2     		uxth	r3, r3
 1721 089e 23F4C043 		bic	r3, r3, #24576
 1722 08a2 9AB2     		uxth	r2, r3
 1723 08a4 7B68     		ldr	r3, [r7, #4]
 1724 08a6 9A80     		strh	r2, [r3, #4]	@ movhi
1133:../src/stm32f30x_spi.c **** 
1134:../src/stm32f30x_spi.c ****   /* Set new LDMA_TX and LDMA_RX bits value */
1135:../src/stm32f30x_spi.c ****   SPIx->CR2 |= SPI_LastDMATransfer; 
 1725              		.loc 1 1135 0
 1726 08a8 7B68     		ldr	r3, [r7, #4]
 1727 08aa 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1728 08ac 9AB2     		uxth	r2, r3
 1729 08ae 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1730 08b0 1343     		orrs	r3, r3, r2
 1731 08b2 9AB2     		uxth	r2, r3
 1732 08b4 7B68     		ldr	r3, [r7, #4]
 1733 08b6 9A80     		strh	r2, [r3, #4]	@ movhi
1136:../src/stm32f30x_spi.c **** }
 1734              		.loc 1 1136 0
 1735 08b8 07F10C07 		add	r7, r7, #12
 1736 08bc BD46     		mov	sp, r7
 1737 08be 80BC     		pop	{r7}
 1738 08c0 7047     		bx	lr
 1739              		.cfi_endproc
 1740              	.LFE136:
 1742 08c2 00BF     		.align	2
 1743              		.global	SPI_I2S_ITConfig
 1744              		.thumb
 1745              		.thumb_func
 1747              	SPI_I2S_ITConfig:
 1748              	.LFB137:
1137:../src/stm32f30x_spi.c **** 
1138:../src/stm32f30x_spi.c **** /**
1139:../src/stm32f30x_spi.c ****   * @}
1140:../src/stm32f30x_spi.c ****   */
1141:../src/stm32f30x_spi.c **** 
1142:../src/stm32f30x_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1143:../src/stm32f30x_spi.c ****  *  @brief   Interrupts and flags management functions
1144:../src/stm32f30x_spi.c ****   *
1145:../src/stm32f30x_spi.c **** @verbatim   
1146:../src/stm32f30x_spi.c ****  ===============================================================================
1147:../src/stm32f30x_spi.c ****               ##### Interrupts and flags management functions #####
1148:../src/stm32f30x_spi.c ****  ===============================================================================  
1149:../src/stm32f30x_spi.c ****     [..] This section provides a set of functions allowing to configure the SPI/I2S 
1150:../src/stm32f30x_spi.c ****          Interrupts sources and check or clear the flags or pending bits status.
1151:../src/stm32f30x_spi.c ****          The user should identify which mode will be used in his application to manage 
1152:../src/stm32f30x_spi.c ****          the communication: Polling mode, Interrupt mode or DMA mode. 
1153:../src/stm32f30x_spi.c ****     
1154:../src/stm32f30x_spi.c ****   *** Polling Mode ***
1155:../src/stm32f30x_spi.c ****   ====================
1156:../src/stm32f30x_spi.c ****     [..] In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1157:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register.
1158:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register.
1159:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1160:../src/stm32f30x_spi.c ****          (#) SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur.              
1161:../src/stm32f30x_spi.c ****          (#) SPI_FLAG_MODF : to indicate if a Mode Fault error occur.
1162:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur.
1163:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_FRE: to indicate a Frame Format error occurs.
1164:../src/stm32f30x_spi.c ****          (#) I2S_FLAG_UDR: to indicate an Underrun error occurs.
1165:../src/stm32f30x_spi.c ****          (#) I2S_FLAG_CHSIDE: to indicate Channel Side.
1166:../src/stm32f30x_spi.c ****     [..]
1167:../src/stm32f30x_spi.c ****          (@) Do not use the BSY flag to handle each data transmission or reception.
1168:../src/stm32f30x_spi.c ****              It is better to use the TXE and RXNE flags instead.
1169:../src/stm32f30x_spi.c ****     [..] In this Mode it is advised to use the following functions:
1170:../src/stm32f30x_spi.c ****          (+) FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1171:../src/stm32f30x_spi.c ****          (+) void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1172:../src/stm32f30x_spi.c **** 
1173:../src/stm32f30x_spi.c ****   *** Interrupt Mode ***
1174:../src/stm32f30x_spi.c ****   ======================
1175:../src/stm32f30x_spi.c ****     [..] In Interrupt Mode, the SPI/I2S communication can be managed by 3 interrupt sources
1176:../src/stm32f30x_spi.c ****          and 5 pending bits: 
1177:../src/stm32f30x_spi.c ****     [..] Pending Bits:
1178:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register.
1179:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register.
1180:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_OVR : to indicate if an Overrun error occur.
1181:../src/stm32f30x_spi.c ****          (#) I2S_IT_UDR : to indicate an Underrun Error occurs.
1182:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_FRE : to indicate a Frame Format error occurs.
1183:../src/stm32f30x_spi.c ****     [..] Interrupt Source:
1184:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1185:../src/stm32f30x_spi.c ****              interrupt.  
1186:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1187:../src/stm32f30x_spi.c ****              empty interrupt.
1188:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1189:../src/stm32f30x_spi.c ****     [..] In this Mode it is advised to use the following functions:
1190:../src/stm32f30x_spi.c ****          (+) void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1191:../src/stm32f30x_spi.c ****          (+) ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1192:../src/stm32f30x_spi.c **** 
1193:../src/stm32f30x_spi.c ****   *** FIFO Status ***
1194:../src/stm32f30x_spi.c ****   ===================
1195:../src/stm32f30x_spi.c ****     [..] It is possible to monitor the FIFO status when a transfer is ongoing using the
1196:../src/stm32f30x_spi.c ****          following function:
1197:../src/stm32f30x_spi.c ****          (+) uint32_t SPI_GetFIFOStatus(uint8_t SPI_FIFO_Direction); 
1198:../src/stm32f30x_spi.c **** 
1199:../src/stm32f30x_spi.c ****   *** DMA Mode ***
1200:../src/stm32f30x_spi.c ****   ================
1201:../src/stm32f30x_spi.c ****     [..] In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1202:../src/stm32f30x_spi.c ****          (#) SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1203:../src/stm32f30x_spi.c ****          (#) SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1204:../src/stm32f30x_spi.c ****     [..] In this Mode it is advised to use the following function:
1205:../src/stm32f30x_spi.c ****          (+) void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewSta
1206:../src/stm32f30x_spi.c **** 
1207:../src/stm32f30x_spi.c **** @endverbatim
1208:../src/stm32f30x_spi.c ****   * @{
1209:../src/stm32f30x_spi.c ****   */
1210:../src/stm32f30x_spi.c **** 
1211:../src/stm32f30x_spi.c **** /**
1212:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1213:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1214:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1215:../src/stm32f30x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1216:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
1217:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1218:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1219:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_ERR: Error interrupt mask
1220:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1221:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
1222:../src/stm32f30x_spi.c ****   * @retval None
1223:../src/stm32f30x_spi.c ****   */
1224:../src/stm32f30x_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1225:../src/stm32f30x_spi.c **** {
 1749              		.loc 1 1225 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 16
 1752              		@ frame_needed = 1, uses_anonymous_args = 0
 1753              		@ link register save eliminated.
 1754 08c4 80B4     		push	{r7}
 1755              	.LCFI78:
 1756              		.cfi_def_cfa_offset 4
 1757              		.cfi_offset 7, -4
 1758 08c6 85B0     		sub	sp, sp, #20
 1759              	.LCFI79:
 1760              		.cfi_def_cfa_offset 24
 1761 08c8 00AF     		add	r7, sp, #0
 1762              	.LCFI80:
 1763              		.cfi_def_cfa_register 7
 1764 08ca 7860     		str	r0, [r7, #4]
 1765 08cc 1346     		mov	r3, r2
 1766 08ce 0A46     		mov	r2, r1
 1767 08d0 FA70     		strb	r2, [r7, #3]
 1768 08d2 BB70     		strb	r3, [r7, #2]
1226:../src/stm32f30x_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 1769              		.loc 1 1226 0
 1770 08d4 4FF00003 		mov	r3, #0
 1771 08d8 FB81     		strh	r3, [r7, #14]	@ movhi
 1772 08da 4FF00003 		mov	r3, #0
 1773 08de BB81     		strh	r3, [r7, #12]	@ movhi
1227:../src/stm32f30x_spi.c **** 
1228:../src/stm32f30x_spi.c ****   /* Check the parameters */
1229:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1230:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1231:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1232:../src/stm32f30x_spi.c **** 
1233:../src/stm32f30x_spi.c ****   /* Get the SPI IT index */
1234:../src/stm32f30x_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1774              		.loc 1 1234 0
 1775 08e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1776 08e2 4FEA1313 		lsr	r3, r3, #4
 1777 08e6 DBB2     		uxtb	r3, r3
 1778 08e8 FB81     		strh	r3, [r7, #14]	@ movhi
1235:../src/stm32f30x_spi.c **** 
1236:../src/stm32f30x_spi.c ****   /* Set the IT mask */
1237:../src/stm32f30x_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1779              		.loc 1 1237 0
 1780 08ea FB89     		ldrh	r3, [r7, #14]
 1781 08ec 4FF00102 		mov	r2, #1
 1782 08f0 02FA03F3 		lsl	r3, r2, r3
 1783 08f4 BB81     		strh	r3, [r7, #12]	@ movhi
1238:../src/stm32f30x_spi.c **** 
1239:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 1784              		.loc 1 1239 0
 1785 08f6 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1786 08f8 002B     		cmp	r3, #0
 1787 08fa 08D0     		beq	.L69
1240:../src/stm32f30x_spi.c ****   {
1241:../src/stm32f30x_spi.c ****     /* Enable the selected SPI interrupt */
1242:../src/stm32f30x_spi.c ****     SPIx->CR2 |= itmask;
 1788              		.loc 1 1242 0
 1789 08fc 7B68     		ldr	r3, [r7, #4]
 1790 08fe 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1791 0900 9AB2     		uxth	r2, r3
 1792 0902 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1793 0904 1343     		orrs	r3, r3, r2
 1794 0906 9AB2     		uxth	r2, r3
 1795 0908 7B68     		ldr	r3, [r7, #4]
 1796 090a 9A80     		strh	r2, [r3, #4]	@ movhi
 1797 090c 0AE0     		b	.L68
 1798              	.L69:
1243:../src/stm32f30x_spi.c ****   }
1244:../src/stm32f30x_spi.c ****   else
1245:../src/stm32f30x_spi.c ****   {
1246:../src/stm32f30x_spi.c ****     /* Disable the selected SPI interrupt */
1247:../src/stm32f30x_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1799              		.loc 1 1247 0
 1800 090e 7B68     		ldr	r3, [r7, #4]
 1801 0910 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1802 0912 9AB2     		uxth	r2, r3
 1803 0914 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1804 0916 6FEA0303 		mvn	r3, r3
 1805 091a 9BB2     		uxth	r3, r3
 1806 091c 1340     		ands	r3, r3, r2
 1807 091e 9AB2     		uxth	r2, r3
 1808 0920 7B68     		ldr	r3, [r7, #4]
 1809 0922 9A80     		strh	r2, [r3, #4]	@ movhi
 1810              	.L68:
1248:../src/stm32f30x_spi.c ****   }
1249:../src/stm32f30x_spi.c **** }
 1811              		.loc 1 1249 0
 1812 0924 07F11407 		add	r7, r7, #20
 1813 0928 BD46     		mov	sp, r7
 1814 092a 80BC     		pop	{r7}
 1815 092c 7047     		bx	lr
 1816              		.cfi_endproc
 1817              	.LFE137:
 1819 092e 00BF     		.align	2
 1820              		.global	SPI_GetTransmissionFIFOStatus
 1821              		.thumb
 1822              		.thumb_func
 1824              	SPI_GetTransmissionFIFOStatus:
 1825              	.LFB138:
1250:../src/stm32f30x_spi.c **** 
1251:../src/stm32f30x_spi.c **** /**
1252:../src/stm32f30x_spi.c ****   * @brief  Returns the current SPIx Transmission FIFO filled level.
1253:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1254:../src/stm32f30x_spi.c ****   * @retval The Transmission FIFO filling state.
1255:../src/stm32f30x_spi.c ****   *   - SPI_TransmissionFIFOStatus_Empty: when FIFO is empty
1256:../src/stm32f30x_spi.c ****   *   - SPI_TransmissionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
1257:../src/stm32f30x_spi.c ****   *   - SPI_TransmissionFIFOStatus_HalfFull: if more than 1 half-full.
1258:../src/stm32f30x_spi.c ****   *   - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
1259:../src/stm32f30x_spi.c ****   */
1260:../src/stm32f30x_spi.c **** uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
1261:../src/stm32f30x_spi.c **** {
 1826              		.loc 1 1261 0
 1827              		.cfi_startproc
 1828              		@ args = 0, pretend = 0, frame = 8
 1829              		@ frame_needed = 1, uses_anonymous_args = 0
 1830              		@ link register save eliminated.
 1831 0930 80B4     		push	{r7}
 1832              	.LCFI81:
 1833              		.cfi_def_cfa_offset 4
 1834              		.cfi_offset 7, -4
 1835 0932 83B0     		sub	sp, sp, #12
 1836              	.LCFI82:
 1837              		.cfi_def_cfa_offset 16
 1838 0934 00AF     		add	r7, sp, #0
 1839              	.LCFI83:
 1840              		.cfi_def_cfa_register 7
 1841 0936 7860     		str	r0, [r7, #4]
1262:../src/stm32f30x_spi.c ****   /* Get the SPIx Transmission FIFO level bits */
1263:../src/stm32f30x_spi.c ****   return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 1842              		.loc 1 1263 0
 1843 0938 7B68     		ldr	r3, [r7, #4]
 1844 093a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1845 093c 9BB2     		uxth	r3, r3
 1846 093e 03F4C053 		and	r3, r3, #6144
 1847 0942 9BB2     		uxth	r3, r3
1264:../src/stm32f30x_spi.c **** }
 1848              		.loc 1 1264 0
 1849 0944 1846     		mov	r0, r3
 1850 0946 07F10C07 		add	r7, r7, #12
 1851 094a BD46     		mov	sp, r7
 1852 094c 80BC     		pop	{r7}
 1853 094e 7047     		bx	lr
 1854              		.cfi_endproc
 1855              	.LFE138:
 1857              		.align	2
 1858              		.global	SPI_GetReceptionFIFOStatus
 1859              		.thumb
 1860              		.thumb_func
 1862              	SPI_GetReceptionFIFOStatus:
 1863              	.LFB139:
1265:../src/stm32f30x_spi.c **** 
1266:../src/stm32f30x_spi.c **** /**
1267:../src/stm32f30x_spi.c ****   * @brief  Returns the current SPIx Reception FIFO filled level.
1268:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1269:../src/stm32f30x_spi.c ****   * @retval The Reception FIFO filling state.
1270:../src/stm32f30x_spi.c ****   *   - SPI_ReceptionFIFOStatus_Empty: when FIFO is empty
1271:../src/stm32f30x_spi.c ****   *   - SPI_ReceptionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
1272:../src/stm32f30x_spi.c ****   *   - SPI_ReceptionFIFOStatus_HalfFull: if more than 1 half-full.
1273:../src/stm32f30x_spi.c ****   *   - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
1274:../src/stm32f30x_spi.c ****   */
1275:../src/stm32f30x_spi.c **** uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
1276:../src/stm32f30x_spi.c **** {
 1864              		.loc 1 1276 0
 1865              		.cfi_startproc
 1866              		@ args = 0, pretend = 0, frame = 8
 1867              		@ frame_needed = 1, uses_anonymous_args = 0
 1868              		@ link register save eliminated.
 1869 0950 80B4     		push	{r7}
 1870              	.LCFI84:
 1871              		.cfi_def_cfa_offset 4
 1872              		.cfi_offset 7, -4
 1873 0952 83B0     		sub	sp, sp, #12
 1874              	.LCFI85:
 1875              		.cfi_def_cfa_offset 16
 1876 0954 00AF     		add	r7, sp, #0
 1877              	.LCFI86:
 1878              		.cfi_def_cfa_register 7
 1879 0956 7860     		str	r0, [r7, #4]
1277:../src/stm32f30x_spi.c ****   /* Get the SPIx Reception FIFO level bits */
1278:../src/stm32f30x_spi.c ****   return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 1880              		.loc 1 1278 0
 1881 0958 7B68     		ldr	r3, [r7, #4]
 1882 095a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1883 095c 9BB2     		uxth	r3, r3
 1884 095e 03F4C063 		and	r3, r3, #1536
 1885 0962 9BB2     		uxth	r3, r3
1279:../src/stm32f30x_spi.c **** }
 1886              		.loc 1 1279 0
 1887 0964 1846     		mov	r0, r3
 1888 0966 07F10C07 		add	r7, r7, #12
 1889 096a BD46     		mov	sp, r7
 1890 096c 80BC     		pop	{r7}
 1891 096e 7047     		bx	lr
 1892              		.cfi_endproc
 1893              	.LFE139:
 1895              		.align	2
 1896              		.global	SPI_I2S_GetFlagStatus
 1897              		.thumb
 1898              		.thumb_func
 1900              	SPI_I2S_GetFlagStatus:
 1901              	.LFB140:
1280:../src/stm32f30x_spi.c **** 
1281:../src/stm32f30x_spi.c **** /**
1282:../src/stm32f30x_spi.c ****   * @brief  Checks whether the specified SPI flag is set or not.
1283:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1284:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1285:../src/stm32f30x_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1286:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
1287:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1288:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1289:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_BSY: Busy flag.
1290:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_OVR: Overrun flag.
1291:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_MODF: Mode Fault flag.
1292:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_CRCERR: CRC Error flag.
1293:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_FRE: TI frame format error flag.
1294:../src/stm32f30x_spi.c ****   *     @arg I2S_FLAG_UDR: Underrun Error flag.
1295:../src/stm32f30x_spi.c ****   *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
1296:../src/stm32f30x_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1297:../src/stm32f30x_spi.c ****   */
1298:../src/stm32f30x_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1299:../src/stm32f30x_spi.c **** {
 1902              		.loc 1 1299 0
 1903              		.cfi_startproc
 1904              		@ args = 0, pretend = 0, frame = 16
 1905              		@ frame_needed = 1, uses_anonymous_args = 0
 1906              		@ link register save eliminated.
 1907 0970 80B4     		push	{r7}
 1908              	.LCFI87:
 1909              		.cfi_def_cfa_offset 4
 1910              		.cfi_offset 7, -4
 1911 0972 85B0     		sub	sp, sp, #20
 1912              	.LCFI88:
 1913              		.cfi_def_cfa_offset 24
 1914 0974 00AF     		add	r7, sp, #0
 1915              	.LCFI89:
 1916              		.cfi_def_cfa_register 7
 1917 0976 7860     		str	r0, [r7, #4]
 1918 0978 0B46     		mov	r3, r1
 1919 097a 7B80     		strh	r3, [r7, #2]	@ movhi
1300:../src/stm32f30x_spi.c ****   FlagStatus bitstatus = RESET;
 1920              		.loc 1 1300 0
 1921 097c 4FF00003 		mov	r3, #0
 1922 0980 FB73     		strb	r3, [r7, #15]
1301:../src/stm32f30x_spi.c ****   /* Check the parameters */
1302:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1303:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1304:../src/stm32f30x_spi.c **** 
1305:../src/stm32f30x_spi.c ****   /* Check the status of the specified SPI flag */
1306:../src/stm32f30x_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1923              		.loc 1 1306 0
 1924 0982 7B68     		ldr	r3, [r7, #4]
 1925 0984 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1926 0986 9AB2     		uxth	r2, r3
 1927 0988 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1928 098a 1340     		ands	r3, r3, r2
 1929 098c 9BB2     		uxth	r3, r3
 1930 098e 002B     		cmp	r3, #0
 1931 0990 03D0     		beq	.L76
1307:../src/stm32f30x_spi.c ****   {
1308:../src/stm32f30x_spi.c ****     /* SPI_I2S_FLAG is set */
1309:../src/stm32f30x_spi.c ****     bitstatus = SET;
 1932              		.loc 1 1309 0
 1933 0992 4FF00103 		mov	r3, #1
 1934 0996 FB73     		strb	r3, [r7, #15]
 1935 0998 02E0     		b	.L77
 1936              	.L76:
1310:../src/stm32f30x_spi.c ****   }
1311:../src/stm32f30x_spi.c ****   else
1312:../src/stm32f30x_spi.c ****   {
1313:../src/stm32f30x_spi.c ****     /* SPI_I2S_FLAG is reset */
1314:../src/stm32f30x_spi.c ****     bitstatus = RESET;
 1937              		.loc 1 1314 0
 1938 099a 4FF00003 		mov	r3, #0
 1939 099e FB73     		strb	r3, [r7, #15]
 1940              	.L77:
1315:../src/stm32f30x_spi.c ****   }
1316:../src/stm32f30x_spi.c ****   /* Return the SPI_I2S_FLAG status */
1317:../src/stm32f30x_spi.c ****   return  bitstatus;
 1941              		.loc 1 1317 0
 1942 09a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1318:../src/stm32f30x_spi.c **** }
 1943              		.loc 1 1318 0
 1944 09a2 1846     		mov	r0, r3
 1945 09a4 07F11407 		add	r7, r7, #20
 1946 09a8 BD46     		mov	sp, r7
 1947 09aa 80BC     		pop	{r7}
 1948 09ac 7047     		bx	lr
 1949              		.cfi_endproc
 1950              	.LFE140:
 1952 09ae 00BF     		.align	2
 1953              		.global	SPI_I2S_ClearFlag
 1954              		.thumb
 1955              		.thumb_func
 1957              	SPI_I2S_ClearFlag:
 1958              	.LFB141:
1319:../src/stm32f30x_spi.c **** 
1320:../src/stm32f30x_spi.c **** /**
1321:../src/stm32f30x_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1322:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1323:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1324:../src/stm32f30x_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1325:../src/stm32f30x_spi.c ****   *   This function clears only CRCERR flag.
1326:../src/stm32f30x_spi.c ****   * @note OVR (OverRun error) flag is cleared by software sequence: a read 
1327:../src/stm32f30x_spi.c ****   *       operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1328:../src/stm32f30x_spi.c ****   *       operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1329:../src/stm32f30x_spi.c ****   * @note MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1330:../src/stm32f30x_spi.c ****   *       operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1331:../src/stm32f30x_spi.c ****   *       write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1332:../src/stm32f30x_spi.c ****   * @retval None
1333:../src/stm32f30x_spi.c ****   */
1334:../src/stm32f30x_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1335:../src/stm32f30x_spi.c **** {
 1959              		.loc 1 1335 0
 1960              		.cfi_startproc
 1961              		@ args = 0, pretend = 0, frame = 8
 1962              		@ frame_needed = 1, uses_anonymous_args = 0
 1963              		@ link register save eliminated.
 1964 09b0 80B4     		push	{r7}
 1965              	.LCFI90:
 1966              		.cfi_def_cfa_offset 4
 1967              		.cfi_offset 7, -4
 1968 09b2 83B0     		sub	sp, sp, #12
 1969              	.LCFI91:
 1970              		.cfi_def_cfa_offset 16
 1971 09b4 00AF     		add	r7, sp, #0
 1972              	.LCFI92:
 1973              		.cfi_def_cfa_register 7
 1974 09b6 7860     		str	r0, [r7, #4]
 1975 09b8 0B46     		mov	r3, r1
 1976 09ba 7B80     		strh	r3, [r7, #2]	@ movhi
1336:../src/stm32f30x_spi.c ****   /* Check the parameters */
1337:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1338:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));
1339:../src/stm32f30x_spi.c **** 
1340:../src/stm32f30x_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1341:../src/stm32f30x_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1977              		.loc 1 1341 0
 1978 09bc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1979 09be 6FEA0303 		mvn	r3, r3
 1980 09c2 9AB2     		uxth	r2, r3
 1981 09c4 7B68     		ldr	r3, [r7, #4]
 1982 09c6 1A81     		strh	r2, [r3, #8]	@ movhi
1342:../src/stm32f30x_spi.c **** }
 1983              		.loc 1 1342 0
 1984 09c8 07F10C07 		add	r7, r7, #12
 1985 09cc BD46     		mov	sp, r7
 1986 09ce 80BC     		pop	{r7}
 1987 09d0 7047     		bx	lr
 1988              		.cfi_endproc
 1989              	.LFE141:
 1991 09d2 00BF     		.align	2
 1992              		.global	SPI_I2S_GetITStatus
 1993              		.thumb
 1994              		.thumb_func
 1996              	SPI_I2S_GetITStatus:
 1997              	.LFB142:
1343:../src/stm32f30x_spi.c **** 
1344:../src/stm32f30x_spi.c **** /**
1345:../src/stm32f30x_spi.c ****   * @brief  Checks whether the specified SPI/I2S interrupt has occurred or not.
1346:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1347:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1348:../src/stm32f30x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1349:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
1350:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1351:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1352:../src/stm32f30x_spi.c ****   *     @arg SPI_IT_MODF: Mode Fault interrupt.
1353:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_OVR: Overrun interrupt.
1354:../src/stm32f30x_spi.c ****   *     @arg I2S_IT_UDR: Underrun interrupt.  
1355:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_FRE: Format Error interrupt.  
1356:../src/stm32f30x_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1357:../src/stm32f30x_spi.c ****   */
1358:../src/stm32f30x_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1359:../src/stm32f30x_spi.c **** {
 1998              		.loc 1 1359 0
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 16
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002              		@ link register save eliminated.
 2003 09d4 80B4     		push	{r7}
 2004              	.LCFI93:
 2005              		.cfi_def_cfa_offset 4
 2006              		.cfi_offset 7, -4
 2007 09d6 85B0     		sub	sp, sp, #20
 2008              	.LCFI94:
 2009              		.cfi_def_cfa_offset 24
 2010 09d8 00AF     		add	r7, sp, #0
 2011              	.LCFI95:
 2012              		.cfi_def_cfa_register 7
 2013 09da 7860     		str	r0, [r7, #4]
 2014 09dc 0B46     		mov	r3, r1
 2015 09de FB70     		strb	r3, [r7, #3]
1360:../src/stm32f30x_spi.c ****   ITStatus bitstatus = RESET;
 2016              		.loc 1 1360 0
 2017 09e0 4FF00003 		mov	r3, #0
 2018 09e4 FB73     		strb	r3, [r7, #15]
1361:../src/stm32f30x_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 2019              		.loc 1 1361 0
 2020 09e6 4FF00003 		mov	r3, #0
 2021 09ea BB81     		strh	r3, [r7, #12]	@ movhi
 2022 09ec 4FF00003 		mov	r3, #0
 2023 09f0 7B81     		strh	r3, [r7, #10]	@ movhi
 2024 09f2 4FF00003 		mov	r3, #0
 2025 09f6 3B81     		strh	r3, [r7, #8]	@ movhi
1362:../src/stm32f30x_spi.c **** 
1363:../src/stm32f30x_spi.c ****   /* Check the parameters */
1364:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1365:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1366:../src/stm32f30x_spi.c **** 
1367:../src/stm32f30x_spi.c ****   /* Get the SPI_I2S_IT index */
1368:../src/stm32f30x_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 2026              		.loc 1 1368 0
 2027 09f8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2028 09fa 03F00F03 		and	r3, r3, #15
 2029 09fe 4FF00102 		mov	r2, #1
 2030 0a02 02FA03F3 		lsl	r3, r2, r3
 2031 0a06 BB81     		strh	r3, [r7, #12]	@ movhi
1369:../src/stm32f30x_spi.c **** 
1370:../src/stm32f30x_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1371:../src/stm32f30x_spi.c ****   itmask = SPI_I2S_IT >> 4;
 2032              		.loc 1 1371 0
 2033 0a08 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2034 0a0a 4FEA1313 		lsr	r3, r3, #4
 2035 0a0e DBB2     		uxtb	r3, r3
 2036 0a10 7B81     		strh	r3, [r7, #10]	@ movhi
1372:../src/stm32f30x_spi.c **** 
1373:../src/stm32f30x_spi.c ****   /* Set the IT mask */
1374:../src/stm32f30x_spi.c ****   itmask = 0x01 << itmask;
 2037              		.loc 1 1374 0
 2038 0a12 7B89     		ldrh	r3, [r7, #10]
 2039 0a14 4FF00102 		mov	r2, #1
 2040 0a18 02FA03F3 		lsl	r3, r2, r3
 2041 0a1c 7B81     		strh	r3, [r7, #10]	@ movhi
1375:../src/stm32f30x_spi.c **** 
1376:../src/stm32f30x_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1377:../src/stm32f30x_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 2042              		.loc 1 1377 0
 2043 0a1e 7B68     		ldr	r3, [r7, #4]
 2044 0a20 9B88     		ldrh	r3, [r3, #4]	@ movhi
 2045 0a22 9AB2     		uxth	r2, r3
 2046 0a24 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2047 0a26 1340     		ands	r3, r3, r2
 2048 0a28 3B81     		strh	r3, [r7, #8]	@ movhi
1378:../src/stm32f30x_spi.c **** 
1379:../src/stm32f30x_spi.c ****   /* Check the status of the specified SPI interrupt */
1380:../src/stm32f30x_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 2049              		.loc 1 1380 0
 2050 0a2a 7B68     		ldr	r3, [r7, #4]
 2051 0a2c 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2052 0a2e 9AB2     		uxth	r2, r3
 2053 0a30 BB89     		ldrh	r3, [r7, #12]	@ movhi
 2054 0a32 1340     		ands	r3, r3, r2
 2055 0a34 9BB2     		uxth	r3, r3
 2056 0a36 002B     		cmp	r3, #0
 2057 0a38 06D0     		beq	.L81
 2058              		.loc 1 1380 0 is_stmt 0 discriminator 1
 2059 0a3a 3B89     		ldrh	r3, [r7, #8]
 2060 0a3c 002B     		cmp	r3, #0
 2061 0a3e 03D0     		beq	.L81
1381:../src/stm32f30x_spi.c ****   {
1382:../src/stm32f30x_spi.c ****     /* SPI_I2S_IT is set */
1383:../src/stm32f30x_spi.c ****     bitstatus = SET;
 2062              		.loc 1 1383 0 is_stmt 1
 2063 0a40 4FF00103 		mov	r3, #1
 2064 0a44 FB73     		strb	r3, [r7, #15]
 2065 0a46 02E0     		b	.L82
 2066              	.L81:
1384:../src/stm32f30x_spi.c ****   }
1385:../src/stm32f30x_spi.c ****   else
1386:../src/stm32f30x_spi.c ****   {
1387:../src/stm32f30x_spi.c ****     /* SPI_I2S_IT is reset */
1388:../src/stm32f30x_spi.c ****     bitstatus = RESET;
 2067              		.loc 1 1388 0
 2068 0a48 4FF00003 		mov	r3, #0
 2069 0a4c FB73     		strb	r3, [r7, #15]
 2070              	.L82:
1389:../src/stm32f30x_spi.c ****   }
1390:../src/stm32f30x_spi.c ****   /* Return the SPI_I2S_IT status */
1391:../src/stm32f30x_spi.c ****   return bitstatus;
 2071              		.loc 1 1391 0
 2072 0a4e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1392:../src/stm32f30x_spi.c **** }
 2073              		.loc 1 1392 0
 2074 0a50 1846     		mov	r0, r3
 2075 0a52 07F11407 		add	r7, r7, #20
 2076 0a56 BD46     		mov	sp, r7
 2077 0a58 80BC     		pop	{r7}
 2078 0a5a 7047     		bx	lr
 2079              		.cfi_endproc
 2080              	.LFE142:
 2082              	.Letext0:
 2083              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2084              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2085              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_rcc.h"
 2086              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_spi.h"
 2087              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f30x_spi.c
     /tmp/ccTJm0Yr.s:19     .text:00000000 $t
     /tmp/ccTJm0Yr.s:24     .text:00000000 SPI_I2S_DeInit
     /tmp/ccTJm0Yr.s:102    .text:00000088 SPI_StructInit
     /tmp/ccTJm0Yr.s:169    .text:000000e4 SPI_Init
     /tmp/ccTJm0Yr.s:357    .text:000001fc I2S_StructInit
     /tmp/ccTJm0Yr.s:412    .text:00000240 I2S_Init
     /tmp/ccTJm0Yr.s:627    .text:000003ec SPI_Cmd
     /tmp/ccTJm0Yr.s:683    .text:0000042c SPI_TIModeCmd
     /tmp/ccTJm0Yr.s:739    .text:0000046c I2S_Cmd
     /tmp/ccTJm0Yr.s:795    .text:000004ac SPI_DataSizeConfig
     /tmp/ccTJm0Yr.s:848    .text:000004e4 SPI_RxFIFOThresholdConfig
     /tmp/ccTJm0Yr.s:898    .text:0000051c SPI_BiDirectionalLineConfig
     /tmp/ccTJm0Yr.s:954    .text:0000055c SPI_NSSInternalSoftwareConfig
     /tmp/ccTJm0Yr.s:1011   .text:000005a0 I2S_FullDuplexConfig
     /tmp/ccTJm0Yr.s:1122   .text:00000644 SPI_SSOutputCmd
     /tmp/ccTJm0Yr.s:1178   .text:00000684 SPI_NSSPulseModeCmd
     /tmp/ccTJm0Yr.s:1234   .text:000006c4 SPI_SendData8
     /tmp/ccTJm0Yr.s:1281   .text:000006f4 SPI_I2S_SendData16
     /tmp/ccTJm0Yr.s:1318   .text:00000710 SPI_ReceiveData8
     /tmp/ccTJm0Yr.s:1364   .text:0000073c SPI_I2S_ReceiveData16
     /tmp/ccTJm0Yr.s:1400   .text:00000758 SPI_CRCLengthConfig
     /tmp/ccTJm0Yr.s:1450   .text:00000790 SPI_CalculateCRC
     /tmp/ccTJm0Yr.s:1506   .text:000007d0 SPI_TransmitCRC
     /tmp/ccTJm0Yr.s:1545   .text:000007f4 SPI_GetCRC
     /tmp/ccTJm0Yr.s:1599   .text:00000828 SPI_GetCRCPolynomial
     /tmp/ccTJm0Yr.s:1635   .text:00000844 SPI_I2S_DMACmd
     /tmp/ccTJm0Yr.s:1697   .text:0000088c SPI_LastDMATransferCmd
     /tmp/ccTJm0Yr.s:1747   .text:000008c4 SPI_I2S_ITConfig
     /tmp/ccTJm0Yr.s:1824   .text:00000930 SPI_GetTransmissionFIFOStatus
     /tmp/ccTJm0Yr.s:1862   .text:00000950 SPI_GetReceptionFIFOStatus
     /tmp/ccTJm0Yr.s:1900   .text:00000970 SPI_I2S_GetFlagStatus
     /tmp/ccTJm0Yr.s:1957   .text:000009b0 SPI_I2S_ClearFlag
     /tmp/ccTJm0Yr.s:1996   .text:000009d4 SPI_I2S_GetITStatus
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.323dce8664331a0daf4a2675e107c70c
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.cf7c793e178943e1bbf613f1b21cd51a
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
