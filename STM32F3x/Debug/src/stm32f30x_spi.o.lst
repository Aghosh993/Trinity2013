   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f30x_spi.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	2
  21              		.global	SPI_I2S_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	SPI_I2S_DeInit:
  26              	.LFB111:
  27              		.file 1 "../src/stm32f30x_spi.c"
   1:../src/stm32f30x_spi.c **** /**
   2:../src/stm32f30x_spi.c ****   ******************************************************************************
   3:../src/stm32f30x_spi.c ****   * @file    stm32f30x_spi.c
   4:../src/stm32f30x_spi.c ****   * @author  MCD Application Team
   5:../src/stm32f30x_spi.c ****   * @version V1.0.1
   6:../src/stm32f30x_spi.c ****   * @date    23-October-2012
   7:../src/stm32f30x_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../src/stm32f30x_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:../src/stm32f30x_spi.c ****   *           + Initialization and Configuration
  10:../src/stm32f30x_spi.c ****   *           + Data transfers functions
  11:../src/stm32f30x_spi.c ****   *           + Hardware CRC Calculation
  12:../src/stm32f30x_spi.c ****   *           + DMA transfers management
  13:../src/stm32f30x_spi.c ****   *           + Interrupts and flags management
  14:../src/stm32f30x_spi.c ****   *
  15:../src/stm32f30x_spi.c ****   *  @verbatim
  16:../src/stm32f30x_spi.c ****   
  17:../src/stm32f30x_spi.c ****   
  18:../src/stm32f30x_spi.c ****  ===============================================================================
  19:../src/stm32f30x_spi.c ****                       ##### How to use this driver #####
  20:../src/stm32f30x_spi.c ****  ===============================================================================
  21:../src/stm32f30x_spi.c ****     [..]
  22:../src/stm32f30x_spi.c ****         (#) Enable peripheral clock using RCC_APBPeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE)
  23:../src/stm32f30x_spi.c ****             function for SPI1 or using RCC_APBPeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE)
  24:../src/stm32f30x_spi.c ****             function for SPI2.
  25:../src/stm32f30x_spi.c ****         (#) Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHBPeriphClockCmd()
  26:../src/stm32f30x_spi.c ****             function. 
  27:../src/stm32f30x_spi.c ****         (#) Peripherals alternate function: 
  28:../src/stm32f30x_spi.c ****             (++) Connect the pin to the desired peripherals' Alternate 
  29:../src/stm32f30x_spi.c ****                  Function (AF) using GPIO_PinAFConfig() function.
  30:../src/stm32f30x_spi.c ****             (++) Configure the desired pin in alternate function by:
  31:../src/stm32f30x_spi.c ****                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF.
  32:../src/stm32f30x_spi.c ****             (++) Select the type, pull-up/pull-down and output speed via 
  33:../src/stm32f30x_spi.c ****                  GPIO_PuPd, GPIO_OType and GPIO_Speed members.
  34:../src/stm32f30x_spi.c ****             (++) Call GPIO_Init() function.
  35:../src/stm32f30x_spi.c ****         (#) Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  36:../src/stm32f30x_spi.c ****             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  37:../src/stm32f30x_spi.c ****             function in SPI mode. In I2S mode, program the Mode, Standard, Data Format,
  38:../src/stm32f30x_spi.c ****             MCLK Output, Audio frequency and Polarity using I2S_Init() function.
  39:../src/stm32f30x_spi.c ****         (#) Configure the FIFO threshold using SPI_RxFIFOThresholdConfig() to select 
  40:../src/stm32f30x_spi.c ****             at which threshold the RXNE event is generated.     
  41:../src/stm32f30x_spi.c ****         (#) Enable the NVIC and the corresponding interrupt using the function 
  42:../src/stm32f30x_spi.c ****             SPI_I2S_ITConfig() if you need to use interrupt mode. 
  43:../src/stm32f30x_spi.c ****         (#) When using the DMA mode 
  44:../src/stm32f30x_spi.c ****             (++) Configure the DMA using DMA_Init() function.
  45:../src/stm32f30x_spi.c ****             (++) Active the needed channel Request using SPI_I2S_DMACmd() function.
  46:../src/stm32f30x_spi.c ****         (#) Enable the SPI using the SPI_Cmd() function or enable the I2S using
  47:../src/stm32f30x_spi.c ****             I2S_Cmd().
  48:../src/stm32f30x_spi.c ****         (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  49:../src/stm32f30x_spi.c ****         (#) Optionally you can enable/configure the following parameters without
  50:../src/stm32f30x_spi.c ****             re-initialization (i.e there is no need to call again SPI_Init() function):
  51:../src/stm32f30x_spi.c ****             (++) When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  52:../src/stm32f30x_spi.c ****                  is programmed as Data direction parameter using the SPI_Init() function
  53:../src/stm32f30x_spi.c ****                  it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  54:../src/stm32f30x_spi.c ****                  using the SPI_BiDirectionalLineConfig() function.
  55:../src/stm32f30x_spi.c ****             (++) When SPI_NSS_Soft is selected as Slave Select Management parameter 
  56:../src/stm32f30x_spi.c ****                  using the SPI_Init() function it can be possible to manage the 
  57:../src/stm32f30x_spi.c ****                  NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  58:../src/stm32f30x_spi.c ****             (++) Reconfigure the data size using the SPI_DataSizeConfig() function.  
  59:../src/stm32f30x_spi.c ****             (++) Enable or disable the SS output using the SPI_SSOutputCmd() function.
  60:../src/stm32f30x_spi.c ****         (#) To use the CRC Hardware calculation feature refer to the Peripheral 
  61:../src/stm32f30x_spi.c ****             CRC hardware Calculation subsection.
  62:../src/stm32f30x_spi.c ****     [..] It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  63:../src/stm32f30x_spi.c ****          peripheral is able to manage sending and receiving data simultaneously
  64:../src/stm32f30x_spi.c ****          using two data lines. Each SPI peripheral has an extended block called I2Sxext
  65:../src/stm32f30x_spi.c ****          (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  66:../src/stm32f30x_spi.c ****          The extension block is not a full SPI IP, it is used only as I2S slave to
  67:../src/stm32f30x_spi.c ****          implement full duplex mode. The extension block uses the same clock sources
  68:../src/stm32f30x_spi.c ****          as its master.          
  69:../src/stm32f30x_spi.c ****          To configure I2S full duplex you have to:
  70:../src/stm32f30x_spi.c ****         (#) Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  71:../src/stm32f30x_spi.c ****         (#) Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  72:../src/stm32f30x_spi.c ****             I2S_Init() function.
  73:../src/stm32f30x_spi.c ****         (#) Call I2S_Cmd() for SPIx then for its extended block.
  74:../src/stm32f30x_spi.c ****         (#) Configure interrupts or DMA requests and to get/clear flag status, 
  75:../src/stm32f30x_spi.c ****             use I2Sxext instance for the extension block.
  76:../src/stm32f30x_spi.c ****         [..] Functions that can be called with I2Sxext instances are:
  77:../src/stm32f30x_spi.c ****              I2S_Cmd(), I2S_FullDuplexConfig(), SPI_I2S_ReceiveData16(), SPI_I2S_SendData16(), 
  78:../src/stm32f30x_spi.c ****              SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), SPI_I2S_ClearFlag(),
  79:../src/stm32f30x_spi.c ****              SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
  80:../src/stm32f30x_spi.c ****         [..] Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
  81:../src/stm32f30x_spi.c ****         [..] RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
  82:../src/stm32f30x_spi.c ****              I2S_StructInit(&I2SInitStruct);
  83:../src/stm32f30x_spi.c ****              I2SInitStruct.Mode = I2S_Mode_MasterTx;     
  84:../src/stm32f30x_spi.c ****              I2S_Init(SPI3, &I2SInitStruct);
  85:../src/stm32f30x_spi.c ****              I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
  86:../src/stm32f30x_spi.c ****              I2S_Cmd(SPI3, ENABLE);
  87:../src/stm32f30x_spi.c ****              I2S_Cmd(SPI3ext, ENABLE);
  88:../src/stm32f30x_spi.c ****              ...
  89:../src/stm32f30x_spi.c ****              while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
  90:../src/stm32f30x_spi.c ****              {}
  91:../src/stm32f30x_spi.c ****              SPI_I2S_SendData16(SPI3, txdata[i]);
  92:../src/stm32f30x_spi.c ****              ...  
  93:../src/stm32f30x_spi.c ****              while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
  94:../src/stm32f30x_spi.c ****              {}
  95:../src/stm32f30x_spi.c ****              rxdata[i] = SPI_I2S_ReceiveData16(I2S3ext);
  96:../src/stm32f30x_spi.c ****              ...          
  97:../src/stm32f30x_spi.c ****     [..]
  98:../src/stm32f30x_spi.c ****     (@) In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
  99:../src/stm32f30x_spi.c ****         just after calling the function SPI_Init().  
 100:../src/stm32f30x_spi.c ****               
 101:../src/stm32f30x_spi.c ****     @endverbatim
 102:../src/stm32f30x_spi.c ****   ******************************************************************************
 103:../src/stm32f30x_spi.c ****   * @attention
 104:../src/stm32f30x_spi.c ****   *
 105:../src/stm32f30x_spi.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
 106:../src/stm32f30x_spi.c ****   *
 107:../src/stm32f30x_spi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 108:../src/stm32f30x_spi.c ****   * You may not use this file except in compliance with the License.
 109:../src/stm32f30x_spi.c ****   * You may obtain a copy of the License at:
 110:../src/stm32f30x_spi.c ****   *
 111:../src/stm32f30x_spi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 112:../src/stm32f30x_spi.c ****   *
 113:../src/stm32f30x_spi.c ****   * Unless required by applicable law or agreed to in writing, software 
 114:../src/stm32f30x_spi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 115:../src/stm32f30x_spi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 116:../src/stm32f30x_spi.c ****   * See the License for the specific language governing permissions and
 117:../src/stm32f30x_spi.c ****   * limitations under the License.
 118:../src/stm32f30x_spi.c ****   *
 119:../src/stm32f30x_spi.c ****   ******************************************************************************
 120:../src/stm32f30x_spi.c ****   */
 121:../src/stm32f30x_spi.c **** 
 122:../src/stm32f30x_spi.c **** /* Includes ------------------------------------------------------------------*/
 123:../src/stm32f30x_spi.c **** #include "stm32f30x_spi.h"
 124:../src/stm32f30x_spi.c **** #include "stm32f30x_rcc.h"
 125:../src/stm32f30x_spi.c **** 
 126:../src/stm32f30x_spi.c **** /** @addtogroup STM32F30x_StdPeriph_Driver
 127:../src/stm32f30x_spi.c ****   * @{
 128:../src/stm32f30x_spi.c ****   */
 129:../src/stm32f30x_spi.c **** 
 130:../src/stm32f30x_spi.c **** /** @defgroup SPI
 131:../src/stm32f30x_spi.c ****   * @brief SPI driver modules
 132:../src/stm32f30x_spi.c ****   * @{
 133:../src/stm32f30x_spi.c ****   */
 134:../src/stm32f30x_spi.c **** 
 135:../src/stm32f30x_spi.c **** /* Private typedef -----------------------------------------------------------*/
 136:../src/stm32f30x_spi.c **** /* Private define ------------------------------------------------------------*/
 137:../src/stm32f30x_spi.c **** /* SPI registers Masks */
 138:../src/stm32f30x_spi.c **** #define CR1_CLEAR_MASK       ((uint16_t)0x3040)
 139:../src/stm32f30x_spi.c **** #define CR2_LDMA_MASK        ((uint16_t)0x9FFF)
 140:../src/stm32f30x_spi.c **** 
 141:../src/stm32f30x_spi.c **** #define I2SCFGR_CLEAR_MASK   ((uint16_t)0xF040)
 142:../src/stm32f30x_spi.c **** 
 143:../src/stm32f30x_spi.c **** /* Private macro -------------------------------------------------------------*/
 144:../src/stm32f30x_spi.c **** /* Private variables ---------------------------------------------------------*/
 145:../src/stm32f30x_spi.c **** /* Private function prototypes -----------------------------------------------*/
 146:../src/stm32f30x_spi.c **** /* Private functions ---------------------------------------------------------*/
 147:../src/stm32f30x_spi.c **** 
 148:../src/stm32f30x_spi.c **** /** @defgroup SPI_Private_Functions
 149:../src/stm32f30x_spi.c ****   * @{
 150:../src/stm32f30x_spi.c ****   */
 151:../src/stm32f30x_spi.c **** 
 152:../src/stm32f30x_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 153:../src/stm32f30x_spi.c ****  *  @brief   Initialization and Configuration functions 
 154:../src/stm32f30x_spi.c ****  *
 155:../src/stm32f30x_spi.c **** @verbatim   
 156:../src/stm32f30x_spi.c ****  ===============================================================================
 157:../src/stm32f30x_spi.c ****            ##### Initialization and Configuration functions #####
 158:../src/stm32f30x_spi.c ****  ===============================================================================  
 159:../src/stm32f30x_spi.c ****     [..] This section provides a set of functions allowing to initialize the SPI Direction,
 160:../src/stm32f30x_spi.c ****          SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 161:../src/stm32f30x_spi.c ****          Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 162:../src/stm32f30x_spi.c ****     [..] The SPI_Init() function follows the SPI configuration procedures for Master mode
 163:../src/stm32f30x_spi.c ****          and Slave mode (details for these procedures are available in reference manual).
 164:../src/stm32f30x_spi.c ****     [..] When the Software NSS management (SPI_InitStruct->SPI_NSS = SPI_NSS_Soft) is selected,
 165:../src/stm32f30x_spi.c ****          use the following function to manage the NSS bit:
 166:../src/stm32f30x_spi.c ****          void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft);
 167:../src/stm32f30x_spi.c ****     [..] In Master mode, when the Hardware NSS management (SPI_InitStruct->SPI_NSS = SPI_NSS_Hard)
 168:../src/stm32f30x_spi.c ****          is selected, use the follwoing function to enable the NSS output feature.
 169:../src/stm32f30x_spi.c ****          void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 170:../src/stm32f30x_spi.c ****     [..] The NSS pulse mode can be managed by the SPI TI mode when enabling it using the 
 171:../src/stm32f30x_spi.c ****          following function: void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 172:../src/stm32f30x_spi.c ****          And it can be managed by software in the SPI Motorola mode using this function: 
 173:../src/stm32f30x_spi.c ****          void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 174:../src/stm32f30x_spi.c ****     [..] This section provides also functions to initialize the I2S Mode, Standard, 
 175:../src/stm32f30x_spi.c ****          Data Format, MCLK Output, Audio frequency and Polarity.
 176:../src/stm32f30x_spi.c ****     [..] The I2S_Init() function follows the I2S configuration procedures for Master mode
 177:../src/stm32f30x_spi.c ****          and Slave mode.
 178:../src/stm32f30x_spi.c ****   
 179:../src/stm32f30x_spi.c **** @endverbatim
 180:../src/stm32f30x_spi.c ****   * @{
 181:../src/stm32f30x_spi.c ****   */
 182:../src/stm32f30x_spi.c **** 
 183:../src/stm32f30x_spi.c **** /**
 184:../src/stm32f30x_spi.c ****   * @brief  Deinitializes the SPIx peripheral registers to their default
 185:../src/stm32f30x_spi.c ****   *         reset values.
 186:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx peripheral, where x can be: 1, 2 or 3 
 187:../src/stm32f30x_spi.c ****   *         in SPI mode.
 188:../src/stm32f30x_spi.c ****   * @retval None
 189:../src/stm32f30x_spi.c ****   */
 190:../src/stm32f30x_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 191:../src/stm32f30x_spi.c **** {
  28              		.loc 1 191 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 192:../src/stm32f30x_spi.c ****   /* Check the parameters */
 193:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 194:../src/stm32f30x_spi.c **** 
 195:../src/stm32f30x_spi.c ****   if (SPIx == SPI1)
  44              		.loc 1 195 0
  45 0008 7A68     		ldr	r2, [r7, #4]
  46 000a 4FF44053 		mov	r3, #12288
  47 000e C4F20103 		movt	r3, 16385
  48 0012 9A42     		cmp	r2, r3
  49 0014 0CD1     		bne	.L2
 196:../src/stm32f30x_spi.c ****   {
 197:../src/stm32f30x_spi.c ****     /* Enable SPI1 reset state */
 198:../src/stm32f30x_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  50              		.loc 1 198 0
  51 0016 4FF48050 		mov	r0, #4096
  52 001a 4FF00101 		mov	r1, #1
  53 001e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 199:../src/stm32f30x_spi.c ****     /* Release SPI1 from reset state */
 200:../src/stm32f30x_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  54              		.loc 1 200 0
  55 0022 4FF48050 		mov	r0, #4096
  56 0026 4FF00001 		mov	r1, #0
  57 002a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  58 002e 26E0     		b	.L1
  59              	.L2:
 201:../src/stm32f30x_spi.c ****   }
 202:../src/stm32f30x_spi.c ****   else if (SPIx == SPI2)
  60              		.loc 1 202 0
  61 0030 7A68     		ldr	r2, [r7, #4]
  62 0032 4FF46053 		mov	r3, #14336
  63 0036 C4F20003 		movt	r3, 16384
  64 003a 9A42     		cmp	r2, r3
  65 003c 0CD1     		bne	.L4
 203:../src/stm32f30x_spi.c ****   {
 204:../src/stm32f30x_spi.c ****     /* Enable SPI2 reset state */
 205:../src/stm32f30x_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  66              		.loc 1 205 0
  67 003e 4FF48040 		mov	r0, #16384
  68 0042 4FF00101 		mov	r1, #1
  69 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:../src/stm32f30x_spi.c ****     /* Release SPI2 from reset state */
 207:../src/stm32f30x_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  70              		.loc 1 207 0
  71 004a 4FF48040 		mov	r0, #16384
  72 004e 4FF00001 		mov	r1, #0
  73 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  74 0056 12E0     		b	.L1
  75              	.L4:
 208:../src/stm32f30x_spi.c ****   }
 209:../src/stm32f30x_spi.c ****   else
 210:../src/stm32f30x_spi.c ****   {
 211:../src/stm32f30x_spi.c ****     if (SPIx == SPI3)
  76              		.loc 1 211 0
  77 0058 7A68     		ldr	r2, [r7, #4]
  78 005a 4FF47053 		mov	r3, #15360
  79 005e C4F20003 		movt	r3, 16384
  80 0062 9A42     		cmp	r2, r3
  81 0064 0BD1     		bne	.L1
 212:../src/stm32f30x_spi.c ****     {
 213:../src/stm32f30x_spi.c ****       /* Enable SPI3 reset state */
 214:../src/stm32f30x_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  82              		.loc 1 214 0
  83 0066 4FF40040 		mov	r0, #32768
  84 006a 4FF00101 		mov	r1, #1
  85 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 215:../src/stm32f30x_spi.c ****       /* Release SPI3 from reset state */
 216:../src/stm32f30x_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  86              		.loc 1 216 0
  87 0072 4FF40040 		mov	r0, #32768
  88 0076 4FF00001 		mov	r1, #0
  89 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  90              	.L1:
 217:../src/stm32f30x_spi.c ****     }
 218:../src/stm32f30x_spi.c ****   }
 219:../src/stm32f30x_spi.c **** }
  91              		.loc 1 219 0
  92 007e 07F10807 		add	r7, r7, #8
  93 0082 BD46     		mov	sp, r7
  94 0084 80BD     		pop	{r7, pc}
  95              		.cfi_endproc
  96              	.LFE111:
  98 0086 00BF     		.align	2
  99              		.global	SPI_StructInit
 100              		.thumb
 101              		.thumb_func
 103              	SPI_StructInit:
 104              	.LFB112:
 220:../src/stm32f30x_spi.c **** 
 221:../src/stm32f30x_spi.c **** /**
 222:../src/stm32f30x_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 223:../src/stm32f30x_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 224:../src/stm32f30x_spi.c ****   * @retval None
 225:../src/stm32f30x_spi.c ****   */
 226:../src/stm32f30x_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 227:../src/stm32f30x_spi.c **** {
 105              		.loc 1 227 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 8
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110 0088 80B4     		push	{r7}
 111              	.LCFI3:
 112              		.cfi_def_cfa_offset 4
 113              		.cfi_offset 7, -4
 114 008a 83B0     		sub	sp, sp, #12
 115              	.LCFI4:
 116              		.cfi_def_cfa_offset 16
 117 008c 00AF     		add	r7, sp, #0
 118              	.LCFI5:
 119              		.cfi_def_cfa_register 7
 120 008e 7860     		str	r0, [r7, #4]
 228:../src/stm32f30x_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 229:../src/stm32f30x_spi.c ****   /* Initialize the SPI_Direction member */
 230:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 121              		.loc 1 230 0
 122 0090 7B68     		ldr	r3, [r7, #4]
 123 0092 4FF00002 		mov	r2, #0
 124 0096 1A80     		strh	r2, [r3, #0]	@ movhi
 231:../src/stm32f30x_spi.c ****   /* Initialize the SPI_Mode member */
 232:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 125              		.loc 1 232 0
 126 0098 7B68     		ldr	r3, [r7, #4]
 127 009a 4FF00002 		mov	r2, #0
 128 009e 5A80     		strh	r2, [r3, #2]	@ movhi
 233:../src/stm32f30x_spi.c ****   /* Initialize the SPI_DataSize member */
 234:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 129              		.loc 1 234 0
 130 00a0 7B68     		ldr	r3, [r7, #4]
 131 00a2 4FF4E062 		mov	r2, #1792
 132 00a6 9A80     		strh	r2, [r3, #4]	@ movhi
 235:../src/stm32f30x_spi.c ****   /* Initialize the SPI_CPOL member */
 236:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 133              		.loc 1 236 0
 134 00a8 7B68     		ldr	r3, [r7, #4]
 135 00aa 4FF00002 		mov	r2, #0
 136 00ae DA80     		strh	r2, [r3, #6]	@ movhi
 237:../src/stm32f30x_spi.c ****   /* Initialize the SPI_CPHA member */
 238:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 137              		.loc 1 238 0
 138 00b0 7B68     		ldr	r3, [r7, #4]
 139 00b2 4FF00002 		mov	r2, #0
 140 00b6 1A81     		strh	r2, [r3, #8]	@ movhi
 239:../src/stm32f30x_spi.c ****   /* Initialize the SPI_NSS member */
 240:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 141              		.loc 1 240 0
 142 00b8 7B68     		ldr	r3, [r7, #4]
 143 00ba 4FF00002 		mov	r2, #0
 144 00be 5A81     		strh	r2, [r3, #10]	@ movhi
 241:../src/stm32f30x_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 242:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 145              		.loc 1 242 0
 146 00c0 7B68     		ldr	r3, [r7, #4]
 147 00c2 4FF00002 		mov	r2, #0
 148 00c6 9A81     		strh	r2, [r3, #12]	@ movhi
 243:../src/stm32f30x_spi.c ****   /* Initialize the SPI_FirstBit member */
 244:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 149              		.loc 1 244 0
 150 00c8 7B68     		ldr	r3, [r7, #4]
 151 00ca 4FF00002 		mov	r2, #0
 152 00ce DA81     		strh	r2, [r3, #14]	@ movhi
 245:../src/stm32f30x_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 246:../src/stm32f30x_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 153              		.loc 1 246 0
 154 00d0 7B68     		ldr	r3, [r7, #4]
 155 00d2 4FF00702 		mov	r2, #7
 156 00d6 1A82     		strh	r2, [r3, #16]	@ movhi
 247:../src/stm32f30x_spi.c **** }
 157              		.loc 1 247 0
 158 00d8 07F10C07 		add	r7, r7, #12
 159 00dc BD46     		mov	sp, r7
 160 00de 80BC     		pop	{r7}
 161 00e0 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE112:
 165 00e2 00BF     		.align	2
 166              		.global	SPI_Init
 167              		.thumb
 168              		.thumb_func
 170              	SPI_Init:
 171              	.LFB113:
 248:../src/stm32f30x_spi.c **** 
 249:../src/stm32f30x_spi.c **** /**
 250:../src/stm32f30x_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 251:../src/stm32f30x_spi.c ****   *         parameters in the SPI_InitStruct.
 252:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 253:../src/stm32f30x_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 254:../src/stm32f30x_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 255:../src/stm32f30x_spi.c ****   * @retval None
 256:../src/stm32f30x_spi.c ****   */
 257:../src/stm32f30x_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 258:../src/stm32f30x_spi.c **** {
 172              		.loc 1 258 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 16
 175              		@ frame_needed = 1, uses_anonymous_args = 0
 176              		@ link register save eliminated.
 177 00e4 80B4     		push	{r7}
 178              	.LCFI6:
 179              		.cfi_def_cfa_offset 4
 180              		.cfi_offset 7, -4
 181 00e6 85B0     		sub	sp, sp, #20
 182              	.LCFI7:
 183              		.cfi_def_cfa_offset 24
 184 00e8 00AF     		add	r7, sp, #0
 185              	.LCFI8:
 186              		.cfi_def_cfa_register 7
 187 00ea 7860     		str	r0, [r7, #4]
 188 00ec 3960     		str	r1, [r7, #0]
 259:../src/stm32f30x_spi.c ****   uint16_t tmpreg = 0;
 189              		.loc 1 259 0
 190 00ee 4FF00003 		mov	r3, #0
 191 00f2 FB81     		strh	r3, [r7, #14]	@ movhi
 260:../src/stm32f30x_spi.c **** 
 261:../src/stm32f30x_spi.c ****   /* check the parameters */
 262:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 263:../src/stm32f30x_spi.c **** 
 264:../src/stm32f30x_spi.c ****   /* Check the SPI parameters */
 265:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 266:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 267:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_DATA_SIZE(SPI_InitStruct->SPI_DataSize));
 268:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 269:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 270:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 271:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 272:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 273:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 274:../src/stm32f30x_spi.c **** 
 275:../src/stm32f30x_spi.c ****   /* Configuring the SPI in master mode */
 276:../src/stm32f30x_spi.c ****   if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
 192              		.loc 1 276 0
 193 00f4 3B68     		ldr	r3, [r7, #0]
 194 00f6 5B88     		ldrh	r3, [r3, #2]
 195 00f8 B3F5827F 		cmp	r3, #260
 196 00fc 36D1     		bne	.L7
 277:../src/stm32f30x_spi.c ****   {
 278:../src/stm32f30x_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 279:../src/stm32f30x_spi.c ****     /* Get the SPIx CR1 value */
 280:../src/stm32f30x_spi.c ****     tmpreg = SPIx->CR1;
 197              		.loc 1 280 0
 198 00fe 7B68     		ldr	r3, [r7, #4]
 199 0100 1B88     		ldrh	r3, [r3, #0]	@ movhi
 200 0102 FB81     		strh	r3, [r7, #14]	@ movhi
 281:../src/stm32f30x_spi.c ****     /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 282:../src/stm32f30x_spi.c ****     tmpreg &= CR1_CLEAR_MASK;
 201              		.loc 1 282 0
 202 0104 FB89     		ldrh	r3, [r7, #14]	@ movhi
 203 0106 03F44153 		and	r3, r3, #12352
 204 010a FB81     		strh	r3, [r7, #14]	@ movhi
 283:../src/stm32f30x_spi.c ****     /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 284:../src/stm32f30x_spi.c ****        master/slave mode, CPOL and CPHA */
 285:../src/stm32f30x_spi.c ****     /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 286:../src/stm32f30x_spi.c ****     /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 287:../src/stm32f30x_spi.c ****     /* Set LSBFirst bit according to SPI_FirstBit value */
 288:../src/stm32f30x_spi.c ****     /* Set BR bits according to SPI_BaudRatePrescaler value */
 289:../src/stm32f30x_spi.c ****     /* Set CPOL bit according to SPI_CPOL value */
 290:../src/stm32f30x_spi.c ****     /* Set CPHA bit according to SPI_CPHA value */
 291:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 205              		.loc 1 291 0
 206 010c 3B68     		ldr	r3, [r7, #0]
 207 010e 1A88     		ldrh	r2, [r3, #0]
 208 0110 3B68     		ldr	r3, [r7, #0]
 209 0112 5B88     		ldrh	r3, [r3, #2]
 210 0114 1343     		orrs	r3, r3, r2
 211 0116 9AB2     		uxth	r2, r3
 292:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA)
 212              		.loc 1 292 0
 213 0118 3B68     		ldr	r3, [r7, #0]
 214 011a D988     		ldrh	r1, [r3, #6]
 215 011c 3B68     		ldr	r3, [r7, #0]
 216 011e 1B89     		ldrh	r3, [r3, #8]
 217 0120 0B43     		orrs	r3, r3, r1
 218 0122 99B2     		uxth	r1, r3
 293:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRa
 219              		.loc 1 293 0
 220 0124 3B68     		ldr	r3, [r7, #0]
 221 0126 5889     		ldrh	r0, [r3, #10]
 222 0128 3B68     		ldr	r3, [r7, #0]
 223 012a 9B89     		ldrh	r3, [r3, #12]
 224 012c 0343     		orrs	r3, r3, r0
 225 012e 98B2     		uxth	r0, r3
 294:../src/stm32f30x_spi.c ****                          SPI_InitStruct->SPI_FirstBit)));
 226              		.loc 1 294 0
 227 0130 3B68     		ldr	r3, [r7, #0]
 228 0132 DB89     		ldrh	r3, [r3, #14]
 293:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRa
 229              		.loc 1 293 0
 230 0134 0343     		orrs	r3, r3, r0
 231 0136 9BB2     		uxth	r3, r3
 292:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA)
 232              		.loc 1 292 0
 233 0138 0B43     		orrs	r3, r3, r1
 234 013a 9BB2     		uxth	r3, r3
 291:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 235              		.loc 1 291 0
 236 013c 1343     		orrs	r3, r3, r2
 237 013e 9AB2     		uxth	r2, r3
 238 0140 FB89     		ldrh	r3, [r7, #14]	@ movhi
 239 0142 1343     		orrs	r3, r3, r2
 240 0144 FB81     		strh	r3, [r7, #14]	@ movhi
 295:../src/stm32f30x_spi.c ****     /* Write to SPIx CR1 */
 296:../src/stm32f30x_spi.c ****     SPIx->CR1 = tmpreg;
 241              		.loc 1 296 0
 242 0146 7B68     		ldr	r3, [r7, #4]
 243 0148 FA89     		ldrh	r2, [r7, #14]	@ movhi
 244 014a 1A80     		strh	r2, [r3, #0]	@ movhi
 297:../src/stm32f30x_spi.c ****     /*-------------------------Data Size Configuration -----------------------*/
 298:../src/stm32f30x_spi.c ****     /* Get the SPIx CR2 value */
 299:../src/stm32f30x_spi.c ****     tmpreg = SPIx->CR2;
 245              		.loc 1 299 0
 246 014c 7B68     		ldr	r3, [r7, #4]
 247 014e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 248 0150 FB81     		strh	r3, [r7, #14]	@ movhi
 300:../src/stm32f30x_spi.c ****     /* Clear DS[3:0] bits */
 301:../src/stm32f30x_spi.c ****     tmpreg &= (uint16_t)~SPI_CR2_DS;
 249              		.loc 1 301 0
 250 0152 FB89     		ldrh	r3, [r7, #14]	@ movhi
 251 0154 23F47063 		bic	r3, r3, #3840
 252 0158 FB81     		strh	r3, [r7, #14]	@ movhi
 302:../src/stm32f30x_spi.c ****     /* Configure SPIx: Data Size */
 303:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 253              		.loc 1 303 0
 254 015a 3B68     		ldr	r3, [r7, #0]
 255 015c 9A88     		ldrh	r2, [r3, #4]
 256 015e FB89     		ldrh	r3, [r7, #14]	@ movhi
 257 0160 1343     		orrs	r3, r3, r2
 258 0162 FB81     		strh	r3, [r7, #14]	@ movhi
 304:../src/stm32f30x_spi.c ****     /* Write to SPIx CR2 */
 305:../src/stm32f30x_spi.c ****     SPIx->CR2 = tmpreg;
 259              		.loc 1 305 0
 260 0164 7B68     		ldr	r3, [r7, #4]
 261 0166 FA89     		ldrh	r2, [r7, #14]	@ movhi
 262 0168 9A80     		strh	r2, [r3, #4]	@ movhi
 263 016a 35E0     		b	.L8
 264              	.L7:
 306:../src/stm32f30x_spi.c ****   }
 307:../src/stm32f30x_spi.c ****   /* Configuring the SPI in slave mode */
 308:../src/stm32f30x_spi.c ****   else
 309:../src/stm32f30x_spi.c ****   {
 310:../src/stm32f30x_spi.c **** /*---------------------------- Data size Configuration -----------------------*/
 311:../src/stm32f30x_spi.c ****     /* Get the SPIx CR2 value */
 312:../src/stm32f30x_spi.c ****     tmpreg = SPIx->CR2;
 265              		.loc 1 312 0
 266 016c 7B68     		ldr	r3, [r7, #4]
 267 016e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 268 0170 FB81     		strh	r3, [r7, #14]	@ movhi
 313:../src/stm32f30x_spi.c ****     /* Clear DS[3:0] bits */
 314:../src/stm32f30x_spi.c ****     tmpreg &= (uint16_t)~SPI_CR2_DS;
 269              		.loc 1 314 0
 270 0172 FB89     		ldrh	r3, [r7, #14]	@ movhi
 271 0174 23F47063 		bic	r3, r3, #3840
 272 0178 FB81     		strh	r3, [r7, #14]	@ movhi
 315:../src/stm32f30x_spi.c ****     /* Configure SPIx: Data Size */
 316:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 273              		.loc 1 316 0
 274 017a 3B68     		ldr	r3, [r7, #0]
 275 017c 9A88     		ldrh	r2, [r3, #4]
 276 017e FB89     		ldrh	r3, [r7, #14]	@ movhi
 277 0180 1343     		orrs	r3, r3, r2
 278 0182 FB81     		strh	r3, [r7, #14]	@ movhi
 317:../src/stm32f30x_spi.c ****     /* Write to SPIx CR2 */
 318:../src/stm32f30x_spi.c ****     SPIx->CR2 = tmpreg;
 279              		.loc 1 318 0
 280 0184 7B68     		ldr	r3, [r7, #4]
 281 0186 FA89     		ldrh	r2, [r7, #14]	@ movhi
 282 0188 9A80     		strh	r2, [r3, #4]	@ movhi
 319:../src/stm32f30x_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 320:../src/stm32f30x_spi.c ****     /* Get the SPIx CR1 value */
 321:../src/stm32f30x_spi.c ****     tmpreg = SPIx->CR1;
 283              		.loc 1 321 0
 284 018a 7B68     		ldr	r3, [r7, #4]
 285 018c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 286 018e FB81     		strh	r3, [r7, #14]	@ movhi
 322:../src/stm32f30x_spi.c ****     /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 323:../src/stm32f30x_spi.c ****     tmpreg &= CR1_CLEAR_MASK;
 287              		.loc 1 323 0
 288 0190 FB89     		ldrh	r3, [r7, #14]	@ movhi
 289 0192 03F44153 		and	r3, r3, #12352
 290 0196 FB81     		strh	r3, [r7, #14]	@ movhi
 324:../src/stm32f30x_spi.c ****     /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 325:../src/stm32f30x_spi.c ****        master/salve mode, CPOL and CPHA */
 326:../src/stm32f30x_spi.c ****     /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 327:../src/stm32f30x_spi.c ****     /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 328:../src/stm32f30x_spi.c ****     /* Set LSBFirst bit according to SPI_FirstBit value */
 329:../src/stm32f30x_spi.c ****     /* Set BR bits according to SPI_BaudRatePrescaler value */
 330:../src/stm32f30x_spi.c ****     /* Set CPOL bit according to SPI_CPOL value */
 331:../src/stm32f30x_spi.c ****     /* Set CPHA bit according to SPI_CPHA value */
 332:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 291              		.loc 1 332 0
 292 0198 3B68     		ldr	r3, [r7, #0]
 293 019a 1A88     		ldrh	r2, [r3, #0]
 294 019c 3B68     		ldr	r3, [r7, #0]
 295 019e 5B88     		ldrh	r3, [r3, #2]
 296 01a0 1343     		orrs	r3, r3, r2
 297 01a2 9AB2     		uxth	r2, r3
 333:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA)
 298              		.loc 1 333 0
 299 01a4 3B68     		ldr	r3, [r7, #0]
 300 01a6 D988     		ldrh	r1, [r3, #6]
 301 01a8 3B68     		ldr	r3, [r7, #0]
 302 01aa 1B89     		ldrh	r3, [r3, #8]
 303 01ac 0B43     		orrs	r3, r3, r1
 304 01ae 99B2     		uxth	r1, r3
 334:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRa
 305              		.loc 1 334 0
 306 01b0 3B68     		ldr	r3, [r7, #0]
 307 01b2 5889     		ldrh	r0, [r3, #10]
 308 01b4 3B68     		ldr	r3, [r7, #0]
 309 01b6 9B89     		ldrh	r3, [r3, #12]
 310 01b8 0343     		orrs	r3, r3, r0
 311 01ba 98B2     		uxth	r0, r3
 335:../src/stm32f30x_spi.c ****                          SPI_InitStruct->SPI_FirstBit)));
 312              		.loc 1 335 0
 313 01bc 3B68     		ldr	r3, [r7, #0]
 314 01be DB89     		ldrh	r3, [r3, #14]
 334:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRa
 315              		.loc 1 334 0
 316 01c0 0343     		orrs	r3, r3, r0
 317 01c2 9BB2     		uxth	r3, r3
 333:../src/stm32f30x_spi.c ****                          (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA)
 318              		.loc 1 333 0
 319 01c4 0B43     		orrs	r3, r3, r1
 320 01c6 9BB2     		uxth	r3, r3
 332:../src/stm32f30x_spi.c ****     tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 321              		.loc 1 332 0
 322 01c8 1343     		orrs	r3, r3, r2
 323 01ca 9AB2     		uxth	r2, r3
 324 01cc FB89     		ldrh	r3, [r7, #14]	@ movhi
 325 01ce 1343     		orrs	r3, r3, r2
 326 01d0 FB81     		strh	r3, [r7, #14]	@ movhi
 336:../src/stm32f30x_spi.c **** 
 337:../src/stm32f30x_spi.c ****     /* Write to SPIx CR1 */
 338:../src/stm32f30x_spi.c ****     SPIx->CR1 = tmpreg;
 327              		.loc 1 338 0
 328 01d2 7B68     		ldr	r3, [r7, #4]
 329 01d4 FA89     		ldrh	r2, [r7, #14]	@ movhi
 330 01d6 1A80     		strh	r2, [r3, #0]	@ movhi
 331              	.L8:
 339:../src/stm32f30x_spi.c ****   }
 340:../src/stm32f30x_spi.c **** 
 341:../src/stm32f30x_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 342:../src/stm32f30x_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 332              		.loc 1 342 0
 333 01d8 7B68     		ldr	r3, [r7, #4]
 334 01da 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 335 01dc 9BB2     		uxth	r3, r3
 336 01de 23F40063 		bic	r3, r3, #2048
 337 01e2 9AB2     		uxth	r2, r3
 338 01e4 7B68     		ldr	r3, [r7, #4]
 339 01e6 9A83     		strh	r2, [r3, #28]	@ movhi
 343:../src/stm32f30x_spi.c **** 
 344:../src/stm32f30x_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 345:../src/stm32f30x_spi.c ****   /* Write to SPIx CRCPOLY */
 346:../src/stm32f30x_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 340              		.loc 1 346 0
 341 01e8 3B68     		ldr	r3, [r7, #0]
 342 01ea 1A8A     		ldrh	r2, [r3, #16]
 343 01ec 7B68     		ldr	r3, [r7, #4]
 344 01ee 1A82     		strh	r2, [r3, #16]	@ movhi
 347:../src/stm32f30x_spi.c **** }
 345              		.loc 1 347 0
 346 01f0 07F11407 		add	r7, r7, #20
 347 01f4 BD46     		mov	sp, r7
 348 01f6 80BC     		pop	{r7}
 349 01f8 7047     		bx	lr
 350              		.cfi_endproc
 351              	.LFE113:
 353 01fa 00BF     		.align	2
 354              		.global	I2S_StructInit
 355              		.thumb
 356              		.thumb_func
 358              	I2S_StructInit:
 359              	.LFB114:
 348:../src/stm32f30x_spi.c **** 
 349:../src/stm32f30x_spi.c **** /**
 350:../src/stm32f30x_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 351:../src/stm32f30x_spi.c ****   * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
 352:../src/stm32f30x_spi.c ****   * @retval None
 353:../src/stm32f30x_spi.c ****   */
 354:../src/stm32f30x_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 355:../src/stm32f30x_spi.c **** {
 360              		.loc 1 355 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 8
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365 01fc 80B4     		push	{r7}
 366              	.LCFI9:
 367              		.cfi_def_cfa_offset 4
 368              		.cfi_offset 7, -4
 369 01fe 83B0     		sub	sp, sp, #12
 370              	.LCFI10:
 371              		.cfi_def_cfa_offset 16
 372 0200 00AF     		add	r7, sp, #0
 373              	.LCFI11:
 374              		.cfi_def_cfa_register 7
 375 0202 7860     		str	r0, [r7, #4]
 356:../src/stm32f30x_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 357:../src/stm32f30x_spi.c ****   /* Initialize the I2S_Mode member */
 358:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 376              		.loc 1 358 0
 377 0204 7B68     		ldr	r3, [r7, #4]
 378 0206 4FF00002 		mov	r2, #0
 379 020a 1A80     		strh	r2, [r3, #0]	@ movhi
 359:../src/stm32f30x_spi.c **** 
 360:../src/stm32f30x_spi.c ****   /* Initialize the I2S_Standard member */
 361:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 380              		.loc 1 361 0
 381 020c 7B68     		ldr	r3, [r7, #4]
 382 020e 4FF00002 		mov	r2, #0
 383 0212 5A80     		strh	r2, [r3, #2]	@ movhi
 362:../src/stm32f30x_spi.c **** 
 363:../src/stm32f30x_spi.c ****   /* Initialize the I2S_DataFormat member */
 364:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 384              		.loc 1 364 0
 385 0214 7B68     		ldr	r3, [r7, #4]
 386 0216 4FF00002 		mov	r2, #0
 387 021a 9A80     		strh	r2, [r3, #4]	@ movhi
 365:../src/stm32f30x_spi.c **** 
 366:../src/stm32f30x_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 367:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 388              		.loc 1 367 0
 389 021c 7B68     		ldr	r3, [r7, #4]
 390 021e 4FF00002 		mov	r2, #0
 391 0222 DA80     		strh	r2, [r3, #6]	@ movhi
 368:../src/stm32f30x_spi.c **** 
 369:../src/stm32f30x_spi.c ****   /* Initialize the I2S_AudioFreq member */
 370:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 392              		.loc 1 370 0
 393 0224 7B68     		ldr	r3, [r7, #4]
 394 0226 4FF00202 		mov	r2, #2
 395 022a 9A60     		str	r2, [r3, #8]
 371:../src/stm32f30x_spi.c **** 
 372:../src/stm32f30x_spi.c ****   /* Initialize the I2S_CPOL member */
 373:../src/stm32f30x_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 396              		.loc 1 373 0
 397 022c 7B68     		ldr	r3, [r7, #4]
 398 022e 4FF00002 		mov	r2, #0
 399 0232 9A81     		strh	r2, [r3, #12]	@ movhi
 374:../src/stm32f30x_spi.c **** }
 400              		.loc 1 374 0
 401 0234 07F10C07 		add	r7, r7, #12
 402 0238 BD46     		mov	sp, r7
 403 023a 80BC     		pop	{r7}
 404 023c 7047     		bx	lr
 405              		.cfi_endproc
 406              	.LFE114:
 408 023e 00BF     		.align	2
 409              		.global	I2S_Init
 410              		.thumb
 411              		.thumb_func
 413              	I2S_Init:
 414              	.LFB115:
 375:../src/stm32f30x_spi.c **** 
 376:../src/stm32f30x_spi.c **** /**
 377:../src/stm32f30x_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 378:../src/stm32f30x_spi.c ****   *   parameters in the I2S_InitStruct.
 379:../src/stm32f30x_spi.c ****   * @param  SPIx:To select the SPIx peripheral, where x can be: 2 or 3 
 380:../src/stm32f30x_spi.c ****   *         in I2S mode. 
 381:../src/stm32f30x_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 382:../src/stm32f30x_spi.c ****   *   contains the configuration information for the specified SPI peripheral
 383:../src/stm32f30x_spi.c ****   *   configured in I2S mode.
 384:../src/stm32f30x_spi.c ****   * @note
 385:../src/stm32f30x_spi.c ****   *  The function calculates the optimal prescaler needed to obtain the most 
 386:../src/stm32f30x_spi.c ****   *  accurate audio frequency (depending on the I2S clock source, the PLL values 
 387:../src/stm32f30x_spi.c ****   *  and the product configuration). But in case the prescaler value is greater 
 388:../src/stm32f30x_spi.c ****   *  than 511, the default value (0x02) will be configured instead.     
 389:../src/stm32f30x_spi.c ****   * @retval None
 390:../src/stm32f30x_spi.c ****   */
 391:../src/stm32f30x_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 392:../src/stm32f30x_spi.c **** {
 415              		.loc 1 392 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 88
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419 0240 80B5     		push	{r7, lr}
 420              	.LCFI12:
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 7, -8
 423              		.cfi_offset 14, -4
 424 0242 96B0     		sub	sp, sp, #88
 425              	.LCFI13:
 426              		.cfi_def_cfa_offset 96
 427 0244 00AF     		add	r7, sp, #0
 428              	.LCFI14:
 429              		.cfi_def_cfa_register 7
 430 0246 7860     		str	r0, [r7, #4]
 431 0248 3960     		str	r1, [r7, #0]
 393:../src/stm32f30x_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 432              		.loc 1 393 0
 433 024a 4FF00003 		mov	r3, #0
 434 024e A7F84A30 		strh	r3, [r7, #74]	@ movhi
 435 0252 4FF00203 		mov	r3, #2
 436 0256 A7F85630 		strh	r3, [r7, #86]	@ movhi
 437 025a 4FF00003 		mov	r3, #0
 438 025e A7F85430 		strh	r3, [r7, #84]	@ movhi
 439 0262 4FF00103 		mov	r3, #1
 440 0266 A7F85230 		strh	r3, [r7, #82]	@ movhi
 394:../src/stm32f30x_spi.c ****   uint32_t tmp = 0;
 441              		.loc 1 394 0
 442 026a 4FF00003 		mov	r3, #0
 443 026e FB64     		str	r3, [r7, #76]
 395:../src/stm32f30x_spi.c ****   RCC_ClocksTypeDef RCC_Clocks;
 396:../src/stm32f30x_spi.c ****   uint32_t sourceclock = 0;
 444              		.loc 1 396 0
 445 0270 4FF00003 		mov	r3, #0
 446 0274 7B64     		str	r3, [r7, #68]
 397:../src/stm32f30x_spi.c **** 
 398:../src/stm32f30x_spi.c ****   /* Check the I2S parameters */
 399:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 400:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 401:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 402:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 403:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 404:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 405:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 406:../src/stm32f30x_spi.c **** 
 407:../src/stm32f30x_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 408:../src/stm32f30x_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 409:../src/stm32f30x_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 447              		.loc 1 409 0
 448 0276 7B68     		ldr	r3, [r7, #4]
 449 0278 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 450 027a 9BB2     		uxth	r3, r3
 451 027c 23F47B63 		bic	r3, r3, #4016
 452 0280 23F00F03 		bic	r3, r3, #15
 453 0284 9AB2     		uxth	r2, r3
 454 0286 7B68     		ldr	r3, [r7, #4]
 455 0288 9A83     		strh	r2, [r3, #28]	@ movhi
 410:../src/stm32f30x_spi.c ****   SPIx->I2SPR = 0x0002;
 456              		.loc 1 410 0
 457 028a 7B68     		ldr	r3, [r7, #4]
 458 028c 4FF00202 		mov	r2, #2
 459 0290 1A84     		strh	r2, [r3, #32]	@ movhi
 411:../src/stm32f30x_spi.c **** 
 412:../src/stm32f30x_spi.c ****   /* Get the I2SCFGR register value */
 413:../src/stm32f30x_spi.c ****   tmpreg = SPIx->I2SCFGR;
 460              		.loc 1 413 0
 461 0292 7B68     		ldr	r3, [r7, #4]
 462 0294 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 463 0296 A7F84A30 		strh	r3, [r7, #74]	@ movhi
 414:../src/stm32f30x_spi.c **** 
 415:../src/stm32f30x_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 416:../src/stm32f30x_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 464              		.loc 1 416 0
 465 029a 3B68     		ldr	r3, [r7, #0]
 466 029c 9B68     		ldr	r3, [r3, #8]
 467 029e 022B     		cmp	r3, #2
 468 02a0 08D1     		bne	.L11
 417:../src/stm32f30x_spi.c ****   {
 418:../src/stm32f30x_spi.c ****     i2sodd = (uint16_t)0;
 469              		.loc 1 418 0
 470 02a2 4FF00003 		mov	r3, #0
 471 02a6 A7F85430 		strh	r3, [r7, #84]	@ movhi
 419:../src/stm32f30x_spi.c ****     i2sdiv = (uint16_t)2;   
 472              		.loc 1 419 0
 473 02aa 4FF00203 		mov	r3, #2
 474 02ae A7F85630 		strh	r3, [r7, #86]	@ movhi
 475 02b2 61E0     		b	.L12
 476              	.L11:
 420:../src/stm32f30x_spi.c ****   }
 421:../src/stm32f30x_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 422:../src/stm32f30x_spi.c ****   else
 423:../src/stm32f30x_spi.c ****   {
 424:../src/stm32f30x_spi.c ****     /* Check the frame length (For the Prescaler computing) */
 425:../src/stm32f30x_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 477              		.loc 1 425 0
 478 02b4 3B68     		ldr	r3, [r7, #0]
 479 02b6 9B88     		ldrh	r3, [r3, #4]
 480 02b8 002B     		cmp	r3, #0
 481 02ba 04D1     		bne	.L13
 426:../src/stm32f30x_spi.c ****     {
 427:../src/stm32f30x_spi.c ****       /* Packet length is 16 bits */
 428:../src/stm32f30x_spi.c ****       packetlength = 1;
 482              		.loc 1 428 0
 483 02bc 4FF00103 		mov	r3, #1
 484 02c0 A7F85230 		strh	r3, [r7, #82]	@ movhi
 485 02c4 03E0     		b	.L14
 486              	.L13:
 429:../src/stm32f30x_spi.c ****     }
 430:../src/stm32f30x_spi.c ****     else
 431:../src/stm32f30x_spi.c ****     {
 432:../src/stm32f30x_spi.c ****       /* Packet length is 32 bits */
 433:../src/stm32f30x_spi.c ****       packetlength = 2;
 487              		.loc 1 433 0
 488 02c6 4FF00203 		mov	r3, #2
 489 02ca A7F85230 		strh	r3, [r7, #82]	@ movhi
 490              	.L14:
 434:../src/stm32f30x_spi.c ****     }
 435:../src/stm32f30x_spi.c **** 
 436:../src/stm32f30x_spi.c ****     /* I2S Clock source is System clock: Get System Clock frequency */
 437:../src/stm32f30x_spi.c ****     RCC_GetClocksFreq(&RCC_Clocks);      
 491              		.loc 1 437 0
 492 02ce 07F10803 		add	r3, r7, #8
 493 02d2 1846     		mov	r0, r3
 494 02d4 FFF7FEFF 		bl	RCC_GetClocksFreq
 438:../src/stm32f30x_spi.c **** 
 439:../src/stm32f30x_spi.c ****     /* Get the source clock value: based on System Clock value */
 440:../src/stm32f30x_spi.c ****     sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 495              		.loc 1 440 0
 496 02d8 BB68     		ldr	r3, [r7, #8]
 497 02da 7B64     		str	r3, [r7, #68]
 441:../src/stm32f30x_spi.c **** 
 442:../src/stm32f30x_spi.c ****     /* Compute the Real divider depending on the MCLK output state with a floating point */
 443:../src/stm32f30x_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 498              		.loc 1 443 0
 499 02dc 3B68     		ldr	r3, [r7, #0]
 500 02de DB88     		ldrh	r3, [r3, #6]
 501 02e0 B3F5007F 		cmp	r3, #512
 502 02e4 13D1     		bne	.L15
 444:../src/stm32f30x_spi.c ****     {
 445:../src/stm32f30x_spi.c ****       /* MCLK output is enabled */
 446:../src/stm32f30x_spi.c ****       tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 503              		.loc 1 446 0
 504 02e6 7B6C     		ldr	r3, [r7, #68]
 505 02e8 4FEA1322 		lsr	r2, r3, #8
 506 02ec 1346     		mov	r3, r2
 507 02ee 4FEA8303 		lsl	r3, r3, #2
 508 02f2 9B18     		adds	r3, r3, r2
 509 02f4 4FEA4303 		lsl	r3, r3, #1
 510 02f8 1A46     		mov	r2, r3
 511 02fa 3B68     		ldr	r3, [r7, #0]
 512 02fc 9B68     		ldr	r3, [r3, #8]
 513 02fe B2FBF3F3 		udiv	r3, r2, r3
 514 0302 9BB2     		uxth	r3, r3
 515 0304 03F10503 		add	r3, r3, #5
 516 0308 9BB2     		uxth	r3, r3
 517 030a FB64     		str	r3, [r7, #76]
 518 030c 16E0     		b	.L16
 519              	.L15:
 447:../src/stm32f30x_spi.c ****     }
 448:../src/stm32f30x_spi.c ****     else
 449:../src/stm32f30x_spi.c ****     {
 450:../src/stm32f30x_spi.c ****       /* MCLK output is disabled */
 451:../src/stm32f30x_spi.c ****       tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq
 520              		.loc 1 451 0
 521 030e B7F85230 		ldrh	r3, [r7, #82]
 522 0312 4FEA4313 		lsl	r3, r3, #5
 523 0316 7A6C     		ldr	r2, [r7, #68]
 524 0318 B2FBF3F2 		udiv	r2, r2, r3
 525 031c 1346     		mov	r3, r2
 526 031e 4FEA8303 		lsl	r3, r3, #2
 527 0322 9B18     		adds	r3, r3, r2
 528 0324 4FEA4303 		lsl	r3, r3, #1
 529 0328 1A46     		mov	r2, r3
 530 032a 3B68     		ldr	r3, [r7, #0]
 531 032c 9B68     		ldr	r3, [r3, #8]
 532 032e B2FBF3F3 		udiv	r3, r2, r3
 533 0332 9BB2     		uxth	r3, r3
 534 0334 03F10503 		add	r3, r3, #5
 535 0338 9BB2     		uxth	r3, r3
 536 033a FB64     		str	r3, [r7, #76]
 537              	.L16:
 452:../src/stm32f30x_spi.c ****     }
 453:../src/stm32f30x_spi.c ****     
 454:../src/stm32f30x_spi.c ****     /* Remove the floating point */
 455:../src/stm32f30x_spi.c ****     tmp = tmp / 10;
 538              		.loc 1 455 0
 539 033c FA6C     		ldr	r2, [r7, #76]
 540 033e 4CF6CD43 		movw	r3, #52429
 541 0342 CCF6CC43 		movt	r3, 52428
 542 0346 A3FB0213 		umull	r1, r3, r3, r2
 543 034a 4FEAD303 		lsr	r3, r3, #3
 544 034e FB64     		str	r3, [r7, #76]
 456:../src/stm32f30x_spi.c **** 
 457:../src/stm32f30x_spi.c ****     /* Check the parity of the divider */
 458:../src/stm32f30x_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 545              		.loc 1 458 0
 546 0350 FB6C     		ldr	r3, [r7, #76]
 547 0352 9BB2     		uxth	r3, r3
 548 0354 03F00103 		and	r3, r3, #1
 549 0358 A7F85430 		strh	r3, [r7, #84]	@ movhi
 459:../src/stm32f30x_spi.c **** 
 460:../src/stm32f30x_spi.c ****     /* Compute the i2sdiv prescaler */
 461:../src/stm32f30x_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 550              		.loc 1 461 0
 551 035c B7F85430 		ldrh	r3, [r7, #84]
 552 0360 FA6C     		ldr	r2, [r7, #76]
 553 0362 D31A     		subs	r3, r2, r3
 554 0364 4FEA5303 		lsr	r3, r3, #1
 555 0368 A7F85630 		strh	r3, [r7, #86]	@ movhi
 462:../src/stm32f30x_spi.c **** 
 463:../src/stm32f30x_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 464:../src/stm32f30x_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 556              		.loc 1 464 0
 557 036c B7F85430 		ldrh	r3, [r7, #84]	@ movhi
 558 0370 4FEA0323 		lsl	r3, r3, #8
 559 0374 A7F85430 		strh	r3, [r7, #84]	@ movhi
 560              	.L12:
 465:../src/stm32f30x_spi.c ****   }
 466:../src/stm32f30x_spi.c **** 
 467:../src/stm32f30x_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 468:../src/stm32f30x_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 561              		.loc 1 468 0
 562 0378 B7F85630 		ldrh	r3, [r7, #86]
 563 037c 012B     		cmp	r3, #1
 564 037e 03D9     		bls	.L17
 565              		.loc 1 468 0 is_stmt 0 discriminator 1
 566 0380 B7F85630 		ldrh	r3, [r7, #86]
 567 0384 FF2B     		cmp	r3, #255
 568 0386 07D9     		bls	.L18
 569              	.L17:
 469:../src/stm32f30x_spi.c ****   {
 470:../src/stm32f30x_spi.c ****     /* Set the default values */
 471:../src/stm32f30x_spi.c ****     i2sdiv = 2;
 570              		.loc 1 471 0 is_stmt 1
 571 0388 4FF00203 		mov	r3, #2
 572 038c A7F85630 		strh	r3, [r7, #86]	@ movhi
 472:../src/stm32f30x_spi.c ****     i2sodd = 0;
 573              		.loc 1 472 0
 574 0390 4FF00003 		mov	r3, #0
 575 0394 A7F85430 		strh	r3, [r7, #84]	@ movhi
 576              	.L18:
 473:../src/stm32f30x_spi.c ****   }
 474:../src/stm32f30x_spi.c **** 
 475:../src/stm32f30x_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 476:../src/stm32f30x_spi.c ****   SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 577              		.loc 1 476 0
 578 0398 3B68     		ldr	r3, [r7, #0]
 579 039a DA88     		ldrh	r2, [r3, #6]
 580 039c B7F85430 		ldrh	r3, [r7, #84]	@ movhi
 581 03a0 1343     		orrs	r3, r3, r2
 582 03a2 9AB2     		uxth	r2, r3
 583 03a4 B7F85630 		ldrh	r3, [r7, #86]	@ movhi
 584 03a8 1343     		orrs	r3, r3, r2
 585 03aa 9AB2     		uxth	r2, r3
 586 03ac 7B68     		ldr	r3, [r7, #4]
 587 03ae 1A84     		strh	r2, [r3, #32]	@ movhi
 477:../src/stm32f30x_spi.c **** 
 478:../src/stm32f30x_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 479:../src/stm32f30x_spi.c ****   tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 588              		.loc 1 479 0
 589 03b0 3B68     		ldr	r3, [r7, #0]
 590 03b2 1A88     		ldrh	r2, [r3, #0]
 480:../src/stm32f30x_spi.c ****                        (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruc
 591              		.loc 1 480 0
 592 03b4 3B68     		ldr	r3, [r7, #0]
 593 03b6 5988     		ldrh	r1, [r3, #2]
 594 03b8 3B68     		ldr	r3, [r7, #0]
 595 03ba 9B88     		ldrh	r3, [r3, #4]
 596 03bc 0B43     		orrs	r3, r3, r1
 597 03be 99B2     		uxth	r1, r3
 481:../src/stm32f30x_spi.c ****                        I2S_InitStruct->I2S_CPOL)));
 598              		.loc 1 481 0
 599 03c0 3B68     		ldr	r3, [r7, #0]
 600 03c2 9B89     		ldrh	r3, [r3, #12]
 480:../src/stm32f30x_spi.c ****                        (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruc
 601              		.loc 1 480 0
 602 03c4 0B43     		orrs	r3, r3, r1
 603 03c6 9BB2     		uxth	r3, r3
 479:../src/stm32f30x_spi.c ****   tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 604              		.loc 1 479 0
 605 03c8 1343     		orrs	r3, r3, r2
 606 03ca 9AB2     		uxth	r2, r3
 607 03cc B7F84A30 		ldrh	r3, [r7, #74]	@ movhi
 608 03d0 1343     		orrs	r3, r3, r2
 609 03d2 9BB2     		uxth	r3, r3
 610 03d4 43F40063 		orr	r3, r3, #2048
 611 03d8 A7F84A30 		strh	r3, [r7, #74]	@ movhi
 482:../src/stm32f30x_spi.c **** 
 483:../src/stm32f30x_spi.c ****   /* Write to SPIx I2SCFGR */
 484:../src/stm32f30x_spi.c ****   SPIx->I2SCFGR = tmpreg;
 612              		.loc 1 484 0
 613 03dc 7B68     		ldr	r3, [r7, #4]
 614 03de B7F84A20 		ldrh	r2, [r7, #74]	@ movhi
 615 03e2 9A83     		strh	r2, [r3, #28]	@ movhi
 485:../src/stm32f30x_spi.c **** }
 616              		.loc 1 485 0
 617 03e4 07F15807 		add	r7, r7, #88
 618 03e8 BD46     		mov	sp, r7
 619 03ea 80BD     		pop	{r7, pc}
 620              		.cfi_endproc
 621              	.LFE115:
 623              		.align	2
 624              		.global	SPI_Cmd
 625              		.thumb
 626              		.thumb_func
 628              	SPI_Cmd:
 629              	.LFB116:
 486:../src/stm32f30x_spi.c **** 
 487:../src/stm32f30x_spi.c **** /**
 488:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 489:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 490:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 491:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 492:../src/stm32f30x_spi.c ****   * @retval None
 493:../src/stm32f30x_spi.c ****   */
 494:../src/stm32f30x_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 495:../src/stm32f30x_spi.c **** {
 630              		.loc 1 495 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 8
 633              		@ frame_needed = 1, uses_anonymous_args = 0
 634              		@ link register save eliminated.
 635 03ec 80B4     		push	{r7}
 636              	.LCFI15:
 637              		.cfi_def_cfa_offset 4
 638              		.cfi_offset 7, -4
 639 03ee 83B0     		sub	sp, sp, #12
 640              	.LCFI16:
 641              		.cfi_def_cfa_offset 16
 642 03f0 00AF     		add	r7, sp, #0
 643              	.LCFI17:
 644              		.cfi_def_cfa_register 7
 645 03f2 7860     		str	r0, [r7, #4]
 646 03f4 0B46     		mov	r3, r1
 647 03f6 FB70     		strb	r3, [r7, #3]
 496:../src/stm32f30x_spi.c ****   /* Check the parameters */
 497:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 498:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 499:../src/stm32f30x_spi.c **** 
 500:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 648              		.loc 1 500 0
 649 03f8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 650 03fa 002B     		cmp	r3, #0
 651 03fc 08D0     		beq	.L20
 501:../src/stm32f30x_spi.c ****   {
 502:../src/stm32f30x_spi.c ****     /* Enable the selected SPI peripheral */
 503:../src/stm32f30x_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 652              		.loc 1 503 0
 653 03fe 7B68     		ldr	r3, [r7, #4]
 654 0400 1B88     		ldrh	r3, [r3, #0]	@ movhi
 655 0402 9BB2     		uxth	r3, r3
 656 0404 43F04003 		orr	r3, r3, #64
 657 0408 9AB2     		uxth	r2, r3
 658 040a 7B68     		ldr	r3, [r7, #4]
 659 040c 1A80     		strh	r2, [r3, #0]	@ movhi
 660 040e 07E0     		b	.L19
 661              	.L20:
 504:../src/stm32f30x_spi.c ****   }
 505:../src/stm32f30x_spi.c ****   else
 506:../src/stm32f30x_spi.c ****   {
 507:../src/stm32f30x_spi.c ****     /* Disable the selected SPI peripheral */
 508:../src/stm32f30x_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 662              		.loc 1 508 0
 663 0410 7B68     		ldr	r3, [r7, #4]
 664 0412 1B88     		ldrh	r3, [r3, #0]	@ movhi
 665 0414 9BB2     		uxth	r3, r3
 666 0416 23F04003 		bic	r3, r3, #64
 667 041a 9AB2     		uxth	r2, r3
 668 041c 7B68     		ldr	r3, [r7, #4]
 669 041e 1A80     		strh	r2, [r3, #0]	@ movhi
 670              	.L19:
 509:../src/stm32f30x_spi.c ****   }
 510:../src/stm32f30x_spi.c **** }
 671              		.loc 1 510 0
 672 0420 07F10C07 		add	r7, r7, #12
 673 0424 BD46     		mov	sp, r7
 674 0426 80BC     		pop	{r7}
 675 0428 7047     		bx	lr
 676              		.cfi_endproc
 677              	.LFE116:
 679 042a 00BF     		.align	2
 680              		.global	SPI_TIModeCmd
 681              		.thumb
 682              		.thumb_func
 684              	SPI_TIModeCmd:
 685              	.LFB117:
 511:../src/stm32f30x_spi.c **** 
 512:../src/stm32f30x_spi.c **** /**
 513:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the TI Mode.
 514:../src/stm32f30x_spi.c ****   * @note    This function can be called only after the SPI_Init() function has 
 515:../src/stm32f30x_spi.c ****   *          been called. 
 516:../src/stm32f30x_spi.c ****   * @note    When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 517:../src/stm32f30x_spi.c ****   *          are not taken into consideration and are configured by hardware 
 518:../src/stm32f30x_spi.c ****   *          respectively to the TI mode requirements.  
 519:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.  
 520:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 521:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 522:../src/stm32f30x_spi.c ****   * @retval None
 523:../src/stm32f30x_spi.c ****   */
 524:../src/stm32f30x_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 525:../src/stm32f30x_spi.c **** {
 686              		.loc 1 525 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 8
 689              		@ frame_needed = 1, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 691 042c 80B4     		push	{r7}
 692              	.LCFI18:
 693              		.cfi_def_cfa_offset 4
 694              		.cfi_offset 7, -4
 695 042e 83B0     		sub	sp, sp, #12
 696              	.LCFI19:
 697              		.cfi_def_cfa_offset 16
 698 0430 00AF     		add	r7, sp, #0
 699              	.LCFI20:
 700              		.cfi_def_cfa_register 7
 701 0432 7860     		str	r0, [r7, #4]
 702 0434 0B46     		mov	r3, r1
 703 0436 FB70     		strb	r3, [r7, #3]
 526:../src/stm32f30x_spi.c ****   /* Check the parameters */
 527:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 528:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 529:../src/stm32f30x_spi.c **** 
 530:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 704              		.loc 1 530 0
 705 0438 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 706 043a 002B     		cmp	r3, #0
 707 043c 08D0     		beq	.L23
 531:../src/stm32f30x_spi.c ****   {
 532:../src/stm32f30x_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 533:../src/stm32f30x_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 708              		.loc 1 533 0
 709 043e 7B68     		ldr	r3, [r7, #4]
 710 0440 9B88     		ldrh	r3, [r3, #4]	@ movhi
 711 0442 9BB2     		uxth	r3, r3
 712 0444 43F01003 		orr	r3, r3, #16
 713 0448 9AB2     		uxth	r2, r3
 714 044a 7B68     		ldr	r3, [r7, #4]
 715 044c 9A80     		strh	r2, [r3, #4]	@ movhi
 716 044e 07E0     		b	.L22
 717              	.L23:
 534:../src/stm32f30x_spi.c ****   }
 535:../src/stm32f30x_spi.c ****   else
 536:../src/stm32f30x_spi.c ****   {
 537:../src/stm32f30x_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 538:../src/stm32f30x_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 718              		.loc 1 538 0
 719 0450 7B68     		ldr	r3, [r7, #4]
 720 0452 9B88     		ldrh	r3, [r3, #4]	@ movhi
 721 0454 9BB2     		uxth	r3, r3
 722 0456 23F01003 		bic	r3, r3, #16
 723 045a 9AB2     		uxth	r2, r3
 724 045c 7B68     		ldr	r3, [r7, #4]
 725 045e 9A80     		strh	r2, [r3, #4]	@ movhi
 726              	.L22:
 539:../src/stm32f30x_spi.c ****   }
 540:../src/stm32f30x_spi.c **** }
 727              		.loc 1 540 0
 728 0460 07F10C07 		add	r7, r7, #12
 729 0464 BD46     		mov	sp, r7
 730 0466 80BC     		pop	{r7}
 731 0468 7047     		bx	lr
 732              		.cfi_endproc
 733              	.LFE117:
 735 046a 00BF     		.align	2
 736              		.global	I2S_Cmd
 737              		.thumb
 738              		.thumb_func
 740              	I2S_Cmd:
 741              	.LFB118:
 541:../src/stm32f30x_spi.c **** 
 542:../src/stm32f30x_spi.c **** /**
 543:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 544:../src/stm32f30x_spi.c ****   * @param  SPIx:To select the SPIx peripheral, where x can be: 2 or 3 in 
 545:../src/stm32f30x_spi.c ****   *         I2S mode or I2Sxext for I2S full duplex mode. 
 546:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 547:../src/stm32f30x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 548:../src/stm32f30x_spi.c ****   * @retval None
 549:../src/stm32f30x_spi.c ****   */
 550:../src/stm32f30x_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 551:../src/stm32f30x_spi.c **** {
 742              		.loc 1 551 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 8
 745              		@ frame_needed = 1, uses_anonymous_args = 0
 746              		@ link register save eliminated.
 747 046c 80B4     		push	{r7}
 748              	.LCFI21:
 749              		.cfi_def_cfa_offset 4
 750              		.cfi_offset 7, -4
 751 046e 83B0     		sub	sp, sp, #12
 752              	.LCFI22:
 753              		.cfi_def_cfa_offset 16
 754 0470 00AF     		add	r7, sp, #0
 755              	.LCFI23:
 756              		.cfi_def_cfa_register 7
 757 0472 7860     		str	r0, [r7, #4]
 758 0474 0B46     		mov	r3, r1
 759 0476 FB70     		strb	r3, [r7, #3]
 552:../src/stm32f30x_spi.c ****   /* Check the parameters */
 553:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 554:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 555:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 760              		.loc 1 555 0
 761 0478 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 762 047a 002B     		cmp	r3, #0
 763 047c 08D0     		beq	.L26
 556:../src/stm32f30x_spi.c ****   {
 557:../src/stm32f30x_spi.c ****     /* Enable the selected SPI peripheral in I2S mode */
 558:../src/stm32f30x_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 764              		.loc 1 558 0
 765 047e 7B68     		ldr	r3, [r7, #4]
 766 0480 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 767 0482 9BB2     		uxth	r3, r3
 768 0484 43F48063 		orr	r3, r3, #1024
 769 0488 9AB2     		uxth	r2, r3
 770 048a 7B68     		ldr	r3, [r7, #4]
 771 048c 9A83     		strh	r2, [r3, #28]	@ movhi
 772 048e 07E0     		b	.L25
 773              	.L26:
 559:../src/stm32f30x_spi.c ****   }
 560:../src/stm32f30x_spi.c ****   else
 561:../src/stm32f30x_spi.c ****   {
 562:../src/stm32f30x_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 563:../src/stm32f30x_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 774              		.loc 1 563 0
 775 0490 7B68     		ldr	r3, [r7, #4]
 776 0492 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 777 0494 9BB2     		uxth	r3, r3
 778 0496 23F48063 		bic	r3, r3, #1024
 779 049a 9AB2     		uxth	r2, r3
 780 049c 7B68     		ldr	r3, [r7, #4]
 781 049e 9A83     		strh	r2, [r3, #28]	@ movhi
 782              	.L25:
 564:../src/stm32f30x_spi.c ****   }
 565:../src/stm32f30x_spi.c **** }
 783              		.loc 1 565 0
 784 04a0 07F10C07 		add	r7, r7, #12
 785 04a4 BD46     		mov	sp, r7
 786 04a6 80BC     		pop	{r7}
 787 04a8 7047     		bx	lr
 788              		.cfi_endproc
 789              	.LFE118:
 791 04aa 00BF     		.align	2
 792              		.global	SPI_DataSizeConfig
 793              		.thumb
 794              		.thumb_func
 796              	SPI_DataSizeConfig:
 797              	.LFB119:
 566:../src/stm32f30x_spi.c **** 
 567:../src/stm32f30x_spi.c **** /**
 568:../src/stm32f30x_spi.c ****   * @brief  Configures the data size for the selected SPI.
 569:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral. 
 570:../src/stm32f30x_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 571:../src/stm32f30x_spi.c ****   *   For the SPIx peripheral this parameter can be one of the following values:
 572:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_4b: Set data size to 4 bits
 573:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_5b: Set data size to 5 bits
 574:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_6b: Set data size to 6 bits
 575:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_7b: Set data size to 7 bits
 576:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_8b: Set data size to 8 bits
 577:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_9b: Set data size to 9 bits
 578:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_10b: Set data size to 10 bits
 579:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_11b: Set data size to 11 bits
 580:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_12b: Set data size to 12 bits
 581:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_13b: Set data size to 13 bits
 582:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_14b: Set data size to 14 bits
 583:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_15b: Set data size to 15 bits
 584:../src/stm32f30x_spi.c ****   *     @arg SPI_DataSize_16b: Set data size to 16 bits
 585:../src/stm32f30x_spi.c ****   * @retval None
 586:../src/stm32f30x_spi.c ****   */
 587:../src/stm32f30x_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 588:../src/stm32f30x_spi.c **** {
 798              		.loc 1 588 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 16
 801              		@ frame_needed = 1, uses_anonymous_args = 0
 802              		@ link register save eliminated.
 803 04ac 80B4     		push	{r7}
 804              	.LCFI24:
 805              		.cfi_def_cfa_offset 4
 806              		.cfi_offset 7, -4
 807 04ae 85B0     		sub	sp, sp, #20
 808              	.LCFI25:
 809              		.cfi_def_cfa_offset 24
 810 04b0 00AF     		add	r7, sp, #0
 811              	.LCFI26:
 812              		.cfi_def_cfa_register 7
 813 04b2 7860     		str	r0, [r7, #4]
 814 04b4 0B46     		mov	r3, r1
 815 04b6 7B80     		strh	r3, [r7, #2]	@ movhi
 589:../src/stm32f30x_spi.c ****   uint16_t tmpreg = 0;
 816              		.loc 1 589 0
 817 04b8 4FF00003 		mov	r3, #0
 818 04bc FB81     		strh	r3, [r7, #14]	@ movhi
 590:../src/stm32f30x_spi.c ****   
 591:../src/stm32f30x_spi.c ****   /* Check the parameters */
 592:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 593:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
 594:../src/stm32f30x_spi.c ****   /* Read the CR2 register */
 595:../src/stm32f30x_spi.c ****   tmpreg = SPIx->CR2;
 819              		.loc 1 595 0
 820 04be 7B68     		ldr	r3, [r7, #4]
 821 04c0 9B88     		ldrh	r3, [r3, #4]	@ movhi
 822 04c2 FB81     		strh	r3, [r7, #14]	@ movhi
 596:../src/stm32f30x_spi.c ****   /* Clear DS[3:0] bits */
 597:../src/stm32f30x_spi.c ****   tmpreg &= (uint16_t)~SPI_CR2_DS;
 823              		.loc 1 597 0
 824 04c4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 825 04c6 23F47063 		bic	r3, r3, #3840
 826 04ca FB81     		strh	r3, [r7, #14]	@ movhi
 598:../src/stm32f30x_spi.c ****   /* Set new DS[3:0] bits value */
 599:../src/stm32f30x_spi.c ****   tmpreg |= SPI_DataSize;
 827              		.loc 1 599 0
 828 04cc FA89     		ldrh	r2, [r7, #14]	@ movhi
 829 04ce 7B88     		ldrh	r3, [r7, #2]	@ movhi
 830 04d0 1343     		orrs	r3, r3, r2
 831 04d2 FB81     		strh	r3, [r7, #14]	@ movhi
 600:../src/stm32f30x_spi.c ****   SPIx->CR2 = tmpreg;
 832              		.loc 1 600 0
 833 04d4 7B68     		ldr	r3, [r7, #4]
 834 04d6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 835 04d8 9A80     		strh	r2, [r3, #4]	@ movhi
 601:../src/stm32f30x_spi.c **** }
 836              		.loc 1 601 0
 837 04da 07F11407 		add	r7, r7, #20
 838 04de BD46     		mov	sp, r7
 839 04e0 80BC     		pop	{r7}
 840 04e2 7047     		bx	lr
 841              		.cfi_endproc
 842              	.LFE119:
 844              		.align	2
 845              		.global	SPI_RxFIFOThresholdConfig
 846              		.thumb
 847              		.thumb_func
 849              	SPI_RxFIFOThresholdConfig:
 850              	.LFB120:
 602:../src/stm32f30x_spi.c **** 
 603:../src/stm32f30x_spi.c **** /**
 604:../src/stm32f30x_spi.c ****   * @brief  Configures the FIFO reception threshold for the selected SPI.
 605:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral. 
 606:../src/stm32f30x_spi.c ****   * @param  SPI_RxFIFOThreshold: specifies the FIFO reception threshold.
 607:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
 608:../src/stm32f30x_spi.c ****   *     @arg SPI_RxFIFOThreshold_HF: RXNE event is generated if the FIFO 
 609:../src/stm32f30x_spi.c ****   *          level is greater or equal to 1/2. 
 610:../src/stm32f30x_spi.c ****   *     @arg SPI_RxFIFOThreshold_QF: RXNE event is generated if the FIFO 
 611:../src/stm32f30x_spi.c ****   *          level is greater or equal to 1/4. 
 612:../src/stm32f30x_spi.c ****   * @retval None
 613:../src/stm32f30x_spi.c ****   */
 614:../src/stm32f30x_spi.c **** void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
 615:../src/stm32f30x_spi.c **** {
 851              		.loc 1 615 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 8
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855              		@ link register save eliminated.
 856 04e4 80B4     		push	{r7}
 857              	.LCFI27:
 858              		.cfi_def_cfa_offset 4
 859              		.cfi_offset 7, -4
 860 04e6 83B0     		sub	sp, sp, #12
 861              	.LCFI28:
 862              		.cfi_def_cfa_offset 16
 863 04e8 00AF     		add	r7, sp, #0
 864              	.LCFI29:
 865              		.cfi_def_cfa_register 7
 866 04ea 7860     		str	r0, [r7, #4]
 867 04ec 0B46     		mov	r3, r1
 868 04ee 7B80     		strh	r3, [r7, #2]	@ movhi
 616:../src/stm32f30x_spi.c ****   /* Check the parameters */
 617:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 618:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));
 619:../src/stm32f30x_spi.c **** 
 620:../src/stm32f30x_spi.c ****   /* Clear FRXTH bit */
 621:../src/stm32f30x_spi.c ****   SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 869              		.loc 1 621 0
 870 04f0 7B68     		ldr	r3, [r7, #4]
 871 04f2 9B88     		ldrh	r3, [r3, #4]	@ movhi
 872 04f4 9BB2     		uxth	r3, r3
 873 04f6 23F48053 		bic	r3, r3, #4096
 874 04fa 9AB2     		uxth	r2, r3
 875 04fc 7B68     		ldr	r3, [r7, #4]
 876 04fe 9A80     		strh	r2, [r3, #4]	@ movhi
 622:../src/stm32f30x_spi.c **** 
 623:../src/stm32f30x_spi.c ****   /* Set new FRXTH bit value */
 624:../src/stm32f30x_spi.c ****   SPIx->CR2 |= SPI_RxFIFOThreshold;
 877              		.loc 1 624 0
 878 0500 7B68     		ldr	r3, [r7, #4]
 879 0502 9B88     		ldrh	r3, [r3, #4]	@ movhi
 880 0504 9AB2     		uxth	r2, r3
 881 0506 7B88     		ldrh	r3, [r7, #2]	@ movhi
 882 0508 1343     		orrs	r3, r3, r2
 883 050a 9AB2     		uxth	r2, r3
 884 050c 7B68     		ldr	r3, [r7, #4]
 885 050e 9A80     		strh	r2, [r3, #4]	@ movhi
 625:../src/stm32f30x_spi.c **** }
 886              		.loc 1 625 0
 887 0510 07F10C07 		add	r7, r7, #12
 888 0514 BD46     		mov	sp, r7
 889 0516 80BC     		pop	{r7}
 890 0518 7047     		bx	lr
 891              		.cfi_endproc
 892              	.LFE120:
 894 051a 00BF     		.align	2
 895              		.global	SPI_BiDirectionalLineConfig
 896              		.thumb
 897              		.thumb_func
 899              	SPI_BiDirectionalLineConfig:
 900              	.LFB121:
 626:../src/stm32f30x_spi.c **** 
 627:../src/stm32f30x_spi.c **** /**
 628:../src/stm32f30x_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 629:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral. 
 630:../src/stm32f30x_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 631:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
 632:../src/stm32f30x_spi.c ****   *     @arg SPI_Direction_Tx: Selects Tx transmission direction
 633:../src/stm32f30x_spi.c ****   *     @arg SPI_Direction_Rx: Selects Rx receive direction
 634:../src/stm32f30x_spi.c ****   * @retval None
 635:../src/stm32f30x_spi.c ****   */
 636:../src/stm32f30x_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 637:../src/stm32f30x_spi.c **** {
 901              		.loc 1 637 0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 8
 904              		@ frame_needed = 1, uses_anonymous_args = 0
 905              		@ link register save eliminated.
 906 051c 80B4     		push	{r7}
 907              	.LCFI30:
 908              		.cfi_def_cfa_offset 4
 909              		.cfi_offset 7, -4
 910 051e 83B0     		sub	sp, sp, #12
 911              	.LCFI31:
 912              		.cfi_def_cfa_offset 16
 913 0520 00AF     		add	r7, sp, #0
 914              	.LCFI32:
 915              		.cfi_def_cfa_register 7
 916 0522 7860     		str	r0, [r7, #4]
 917 0524 0B46     		mov	r3, r1
 918 0526 7B80     		strh	r3, [r7, #2]	@ movhi
 638:../src/stm32f30x_spi.c ****   /* Check the parameters */
 639:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 640:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 641:../src/stm32f30x_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 919              		.loc 1 641 0
 920 0528 7B88     		ldrh	r3, [r7, #2]
 921 052a B3F5804F 		cmp	r3, #16384
 922 052e 08D1     		bne	.L31
 642:../src/stm32f30x_spi.c ****   {
 643:../src/stm32f30x_spi.c ****     /* Set the Tx only mode */
 644:../src/stm32f30x_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 923              		.loc 1 644 0
 924 0530 7B68     		ldr	r3, [r7, #4]
 925 0532 1B88     		ldrh	r3, [r3, #0]	@ movhi
 926 0534 9BB2     		uxth	r3, r3
 927 0536 43F48043 		orr	r3, r3, #16384
 928 053a 9AB2     		uxth	r2, r3
 929 053c 7B68     		ldr	r3, [r7, #4]
 930 053e 1A80     		strh	r2, [r3, #0]	@ movhi
 931 0540 07E0     		b	.L30
 932              	.L31:
 645:../src/stm32f30x_spi.c ****   }
 646:../src/stm32f30x_spi.c ****   else
 647:../src/stm32f30x_spi.c ****   {
 648:../src/stm32f30x_spi.c ****     /* Set the Rx only mode */
 649:../src/stm32f30x_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 933              		.loc 1 649 0
 934 0542 7B68     		ldr	r3, [r7, #4]
 935 0544 1B88     		ldrh	r3, [r3, #0]	@ movhi
 936 0546 9BB2     		uxth	r3, r3
 937 0548 23F48043 		bic	r3, r3, #16384
 938 054c 9AB2     		uxth	r2, r3
 939 054e 7B68     		ldr	r3, [r7, #4]
 940 0550 1A80     		strh	r2, [r3, #0]	@ movhi
 941              	.L30:
 650:../src/stm32f30x_spi.c ****   }
 651:../src/stm32f30x_spi.c **** }
 942              		.loc 1 651 0
 943 0552 07F10C07 		add	r7, r7, #12
 944 0556 BD46     		mov	sp, r7
 945 0558 80BC     		pop	{r7}
 946 055a 7047     		bx	lr
 947              		.cfi_endproc
 948              	.LFE121:
 950              		.align	2
 951              		.global	SPI_NSSInternalSoftwareConfig
 952              		.thumb
 953              		.thumb_func
 955              	SPI_NSSInternalSoftwareConfig:
 956              	.LFB122:
 652:../src/stm32f30x_spi.c **** 
 653:../src/stm32f30x_spi.c **** /**
 654:../src/stm32f30x_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 655:../src/stm32f30x_spi.c ****   * @note    This function can be called only after the SPI_Init() function has 
 656:../src/stm32f30x_spi.c ****   *          been called.  
 657:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 658:../src/stm32f30x_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 659:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
 660:../src/stm32f30x_spi.c ****   *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 661:../src/stm32f30x_spi.c ****   *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 662:../src/stm32f30x_spi.c ****   * @retval None
 663:../src/stm32f30x_spi.c ****   */
 664:../src/stm32f30x_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 665:../src/stm32f30x_spi.c **** {
 957              		.loc 1 665 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 8
 960              		@ frame_needed = 1, uses_anonymous_args = 0
 961              		@ link register save eliminated.
 962 055c 80B4     		push	{r7}
 963              	.LCFI33:
 964              		.cfi_def_cfa_offset 4
 965              		.cfi_offset 7, -4
 966 055e 83B0     		sub	sp, sp, #12
 967              	.LCFI34:
 968              		.cfi_def_cfa_offset 16
 969 0560 00AF     		add	r7, sp, #0
 970              	.LCFI35:
 971              		.cfi_def_cfa_register 7
 972 0562 7860     		str	r0, [r7, #4]
 973 0564 0B46     		mov	r3, r1
 974 0566 7B80     		strh	r3, [r7, #2]	@ movhi
 666:../src/stm32f30x_spi.c ****   /* Check the parameters */
 667:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 668:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 669:../src/stm32f30x_spi.c **** 
 670:../src/stm32f30x_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 975              		.loc 1 670 0
 976 0568 7A88     		ldrh	r2, [r7, #2]
 977 056a 4FF6FF63 		movw	r3, #65279
 978 056e 9A42     		cmp	r2, r3
 979 0570 08D0     		beq	.L34
 671:../src/stm32f30x_spi.c ****   {
 672:../src/stm32f30x_spi.c ****     /* Set NSS pin internally by software */
 673:../src/stm32f30x_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 980              		.loc 1 673 0
 981 0572 7B68     		ldr	r3, [r7, #4]
 982 0574 1B88     		ldrh	r3, [r3, #0]	@ movhi
 983 0576 9BB2     		uxth	r3, r3
 984 0578 43F48073 		orr	r3, r3, #256
 985 057c 9AB2     		uxth	r2, r3
 986 057e 7B68     		ldr	r3, [r7, #4]
 987 0580 1A80     		strh	r2, [r3, #0]	@ movhi
 988 0582 07E0     		b	.L33
 989              	.L34:
 674:../src/stm32f30x_spi.c ****   }
 675:../src/stm32f30x_spi.c ****   else
 676:../src/stm32f30x_spi.c ****   {
 677:../src/stm32f30x_spi.c ****     /* Reset NSS pin internally by software */
 678:../src/stm32f30x_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 990              		.loc 1 678 0
 991 0584 7B68     		ldr	r3, [r7, #4]
 992 0586 1B88     		ldrh	r3, [r3, #0]	@ movhi
 993 0588 9BB2     		uxth	r3, r3
 994 058a 23F48073 		bic	r3, r3, #256
 995 058e 9AB2     		uxth	r2, r3
 996 0590 7B68     		ldr	r3, [r7, #4]
 997 0592 1A80     		strh	r2, [r3, #0]	@ movhi
 998              	.L33:
 679:../src/stm32f30x_spi.c ****   }
 680:../src/stm32f30x_spi.c **** }
 999              		.loc 1 680 0
 1000 0594 07F10C07 		add	r7, r7, #12
 1001 0598 BD46     		mov	sp, r7
 1002 059a 80BC     		pop	{r7}
 1003 059c 7047     		bx	lr
 1004              		.cfi_endproc
 1005              	.LFE122:
 1007 059e 00BF     		.align	2
 1008              		.global	I2S_FullDuplexConfig
 1009              		.thumb
 1010              		.thumb_func
 1012              	I2S_FullDuplexConfig:
 1013              	.LFB123:
 681:../src/stm32f30x_spi.c **** 
 682:../src/stm32f30x_spi.c **** /**
 683:../src/stm32f30x_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 684:../src/stm32f30x_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 685:../src/stm32f30x_spi.c ****   *         I2S_InitStruct.
 686:../src/stm32f30x_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 687:../src/stm32f30x_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 688:../src/stm32f30x_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 689:../src/stm32f30x_spi.c ****   *         extension.
 690:../src/stm32f30x_spi.c ****   * 
 691:../src/stm32f30x_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 692:../src/stm32f30x_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 693:../src/stm32f30x_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 694:../src/stm32f30x_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 695:../src/stm32f30x_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 696:../src/stm32f30x_spi.c ****   *         
 697:../src/stm32f30x_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 698:../src/stm32f30x_spi.c ****   *  
 699:../src/stm32f30x_spi.c ****   * @retval None
 700:../src/stm32f30x_spi.c ****   */
 701:../src/stm32f30x_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 702:../src/stm32f30x_spi.c **** {
 1014              		.loc 1 702 0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 16
 1017              		@ frame_needed = 1, uses_anonymous_args = 0
 1018              		@ link register save eliminated.
 1019 05a0 80B4     		push	{r7}
 1020              	.LCFI36:
 1021              		.cfi_def_cfa_offset 4
 1022              		.cfi_offset 7, -4
 1023 05a2 85B0     		sub	sp, sp, #20
 1024              	.LCFI37:
 1025              		.cfi_def_cfa_offset 24
 1026 05a4 00AF     		add	r7, sp, #0
 1027              	.LCFI38:
 1028              		.cfi_def_cfa_register 7
 1029 05a6 7860     		str	r0, [r7, #4]
 1030 05a8 3960     		str	r1, [r7, #0]
 703:../src/stm32f30x_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 1031              		.loc 1 703 0
 1032 05aa 4FF00003 		mov	r3, #0
 1033 05ae BB81     		strh	r3, [r7, #12]	@ movhi
 1034 05b0 4FF00003 		mov	r3, #0
 1035 05b4 FB81     		strh	r3, [r7, #14]	@ movhi
 704:../src/stm32f30x_spi.c ****   
 705:../src/stm32f30x_spi.c ****   /* Check the I2S parameters */
 706:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 707:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 708:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 709:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 710:../src/stm32f30x_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 711:../src/stm32f30x_spi.c **** 
 712:../src/stm32f30x_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 713:../src/stm32f30x_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 714:../src/stm32f30x_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 1036              		.loc 1 714 0
 1037 05b6 7B68     		ldr	r3, [r7, #4]
 1038 05b8 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1039 05ba 9BB2     		uxth	r3, r3
 1040 05bc 23F47B63 		bic	r3, r3, #4016
 1041 05c0 23F00F03 		bic	r3, r3, #15
 1042 05c4 9AB2     		uxth	r2, r3
 1043 05c6 7B68     		ldr	r3, [r7, #4]
 1044 05c8 9A83     		strh	r2, [r3, #28]	@ movhi
 715:../src/stm32f30x_spi.c ****   I2Sxext->I2SPR = 0x0002;
 1045              		.loc 1 715 0
 1046 05ca 7B68     		ldr	r3, [r7, #4]
 1047 05cc 4FF00202 		mov	r2, #2
 1048 05d0 1A84     		strh	r2, [r3, #32]	@ movhi
 716:../src/stm32f30x_spi.c ****   
 717:../src/stm32f30x_spi.c ****   /* Get the I2SCFGR register value */
 718:../src/stm32f30x_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 1049              		.loc 1 718 0
 1050 05d2 7B68     		ldr	r3, [r7, #4]
 1051 05d4 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1052 05d6 BB81     		strh	r3, [r7, #12]	@ movhi
 719:../src/stm32f30x_spi.c ****   
 720:../src/stm32f30x_spi.c ****   /* Get the mode to be configured for the extended I2S */
 721:../src/stm32f30x_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 1053              		.loc 1 721 0
 1054 05d8 3B68     		ldr	r3, [r7, #0]
 1055 05da 1B88     		ldrh	r3, [r3, #0]
 1056 05dc B3F5007F 		cmp	r3, #512
 1057 05e0 03D0     		beq	.L37
 1058              		.loc 1 721 0 is_stmt 0 discriminator 1
 1059 05e2 3B68     		ldr	r3, [r7, #0]
 1060 05e4 1B88     		ldrh	r3, [r3, #0]
 1061 05e6 002B     		cmp	r3, #0
 1062 05e8 03D1     		bne	.L38
 1063              	.L37:
 722:../src/stm32f30x_spi.c ****   {
 723:../src/stm32f30x_spi.c ****     tmp = I2S_Mode_SlaveRx;
 1064              		.loc 1 723 0 is_stmt 1
 1065 05ea 4FF48073 		mov	r3, #256
 1066 05ee FB81     		strh	r3, [r7, #14]	@ movhi
 1067 05f0 0CE0     		b	.L39
 1068              	.L38:
 724:../src/stm32f30x_spi.c ****   }
 725:../src/stm32f30x_spi.c ****   else
 726:../src/stm32f30x_spi.c ****   {
 727:../src/stm32f30x_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 1069              		.loc 1 727 0
 1070 05f2 3B68     		ldr	r3, [r7, #0]
 1071 05f4 1B88     		ldrh	r3, [r3, #0]
 1072 05f6 B3F5407F 		cmp	r3, #768
 1073 05fa 04D0     		beq	.L40
 1074              		.loc 1 727 0 is_stmt 0 discriminator 1
 1075 05fc 3B68     		ldr	r3, [r7, #0]
 1076 05fe 1B88     		ldrh	r3, [r3, #0]
 1077 0600 B3F5807F 		cmp	r3, #256
 1078 0604 02D1     		bne	.L39
 1079              	.L40:
 728:../src/stm32f30x_spi.c ****     {
 729:../src/stm32f30x_spi.c ****       tmp = I2S_Mode_SlaveTx;
 1080              		.loc 1 729 0 is_stmt 1
 1081 0606 4FF00003 		mov	r3, #0
 1082 060a FB81     		strh	r3, [r7, #14]	@ movhi
 1083              	.L39:
 730:../src/stm32f30x_spi.c ****     }
 731:../src/stm32f30x_spi.c ****   }
 732:../src/stm32f30x_spi.c **** 
 733:../src/stm32f30x_spi.c ****  
 734:../src/stm32f30x_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 735:../src/stm32f30x_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 736:../src/stm32f30x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1084              		.loc 1 736 0
 1085 060c 3B68     		ldr	r3, [r7, #0]
 1086 060e 5A88     		ldrh	r2, [r3, #2]
 1087 0610 3B68     		ldr	r3, [r7, #0]
 1088 0612 9988     		ldrh	r1, [r3, #4]
 737:../src/stm32f30x_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1089              		.loc 1 737 0
 1090 0614 3B68     		ldr	r3, [r7, #0]
 1091 0616 9B89     		ldrh	r3, [r3, #12]
 736:../src/stm32f30x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1092              		.loc 1 736 0
 1093 0618 0B43     		orrs	r3, r3, r1
 1094 061a 9BB2     		uxth	r3, r3
 1095 061c 1343     		orrs	r3, r3, r2
 1096 061e 9AB2     		uxth	r2, r3
 735:../src/stm32f30x_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 1097              		.loc 1 735 0
 1098 0620 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1099 0622 1343     		orrs	r3, r3, r2
 1100 0624 9AB2     		uxth	r2, r3
 1101 0626 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1102 0628 1343     		orrs	r3, r3, r2
 1103 062a 9BB2     		uxth	r3, r3
 1104 062c 43F40063 		orr	r3, r3, #2048
 1105 0630 BB81     		strh	r3, [r7, #12]	@ movhi
 738:../src/stm32f30x_spi.c ****  
 739:../src/stm32f30x_spi.c ****   /* Write to SPIx I2SCFGR */  
 740:../src/stm32f30x_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 1106              		.loc 1 740 0
 1107 0632 7B68     		ldr	r3, [r7, #4]
 1108 0634 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1109 0636 9A83     		strh	r2, [r3, #28]	@ movhi
 741:../src/stm32f30x_spi.c **** }
 1110              		.loc 1 741 0
 1111 0638 07F11407 		add	r7, r7, #20
 1112 063c BD46     		mov	sp, r7
 1113 063e 80BC     		pop	{r7}
 1114 0640 7047     		bx	lr
 1115              		.cfi_endproc
 1116              	.LFE123:
 1118 0642 00BF     		.align	2
 1119              		.global	SPI_SSOutputCmd
 1120              		.thumb
 1121              		.thumb_func
 1123              	SPI_SSOutputCmd:
 1124              	.LFB124:
 742:../src/stm32f30x_spi.c **** 
 743:../src/stm32f30x_spi.c **** /**
 744:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 745:../src/stm32f30x_spi.c ****   * @note    This function can be called only after the SPI_Init() function has 
 746:../src/stm32f30x_spi.c ****   *          been called and the NSS hardware management mode is selected. 
 747:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 748:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 749:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 750:../src/stm32f30x_spi.c ****   * @retval None
 751:../src/stm32f30x_spi.c ****   */
 752:../src/stm32f30x_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 753:../src/stm32f30x_spi.c **** {
 1125              		.loc 1 753 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 8
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129              		@ link register save eliminated.
 1130 0644 80B4     		push	{r7}
 1131              	.LCFI39:
 1132              		.cfi_def_cfa_offset 4
 1133              		.cfi_offset 7, -4
 1134 0646 83B0     		sub	sp, sp, #12
 1135              	.LCFI40:
 1136              		.cfi_def_cfa_offset 16
 1137 0648 00AF     		add	r7, sp, #0
 1138              	.LCFI41:
 1139              		.cfi_def_cfa_register 7
 1140 064a 7860     		str	r0, [r7, #4]
 1141 064c 0B46     		mov	r3, r1
 1142 064e FB70     		strb	r3, [r7, #3]
 754:../src/stm32f30x_spi.c ****   /* Check the parameters */
 755:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 756:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 757:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 1143              		.loc 1 757 0
 1144 0650 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1145 0652 002B     		cmp	r3, #0
 1146 0654 08D0     		beq	.L42
 758:../src/stm32f30x_spi.c ****   {
 759:../src/stm32f30x_spi.c ****     /* Enable the selected SPI SS output */
 760:../src/stm32f30x_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 1147              		.loc 1 760 0
 1148 0656 7B68     		ldr	r3, [r7, #4]
 1149 0658 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1150 065a 9BB2     		uxth	r3, r3
 1151 065c 43F00403 		orr	r3, r3, #4
 1152 0660 9AB2     		uxth	r2, r3
 1153 0662 7B68     		ldr	r3, [r7, #4]
 1154 0664 9A80     		strh	r2, [r3, #4]	@ movhi
 1155 0666 07E0     		b	.L41
 1156              	.L42:
 761:../src/stm32f30x_spi.c ****   }
 762:../src/stm32f30x_spi.c ****   else
 763:../src/stm32f30x_spi.c ****   {
 764:../src/stm32f30x_spi.c ****     /* Disable the selected SPI SS output */
 765:../src/stm32f30x_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 1157              		.loc 1 765 0
 1158 0668 7B68     		ldr	r3, [r7, #4]
 1159 066a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1160 066c 9BB2     		uxth	r3, r3
 1161 066e 23F00403 		bic	r3, r3, #4
 1162 0672 9AB2     		uxth	r2, r3
 1163 0674 7B68     		ldr	r3, [r7, #4]
 1164 0676 9A80     		strh	r2, [r3, #4]	@ movhi
 1165              	.L41:
 766:../src/stm32f30x_spi.c ****   }
 767:../src/stm32f30x_spi.c **** }
 1166              		.loc 1 767 0
 1167 0678 07F10C07 		add	r7, r7, #12
 1168 067c BD46     		mov	sp, r7
 1169 067e 80BC     		pop	{r7}
 1170 0680 7047     		bx	lr
 1171              		.cfi_endproc
 1172              	.LFE124:
 1174 0682 00BF     		.align	2
 1175              		.global	SPI_NSSPulseModeCmd
 1176              		.thumb
 1177              		.thumb_func
 1179              	SPI_NSSPulseModeCmd:
 1180              	.LFB125:
 768:../src/stm32f30x_spi.c **** 
 769:../src/stm32f30x_spi.c **** /**
 770:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the NSS pulse management mode.
 771:../src/stm32f30x_spi.c ****   * @note    This function can be called only after the SPI_Init() function has 
 772:../src/stm32f30x_spi.c ****   *          been called. 
 773:../src/stm32f30x_spi.c ****   * @note    When TI mode is selected, the control bits NSSP is not taken into 
 774:../src/stm32f30x_spi.c ****   *          consideration and are configured by hardware respectively to the 
 775:../src/stm32f30x_spi.c ****   *          TI mode requirements. 
 776:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral. 
 777:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the NSS pulse management mode.
 778:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 779:../src/stm32f30x_spi.c ****   * @retval None
 780:../src/stm32f30x_spi.c ****   */
 781:../src/stm32f30x_spi.c **** void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 782:../src/stm32f30x_spi.c **** {
 1181              		.loc 1 782 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 8
 1184              		@ frame_needed = 1, uses_anonymous_args = 0
 1185              		@ link register save eliminated.
 1186 0684 80B4     		push	{r7}
 1187              	.LCFI42:
 1188              		.cfi_def_cfa_offset 4
 1189              		.cfi_offset 7, -4
 1190 0686 83B0     		sub	sp, sp, #12
 1191              	.LCFI43:
 1192              		.cfi_def_cfa_offset 16
 1193 0688 00AF     		add	r7, sp, #0
 1194              	.LCFI44:
 1195              		.cfi_def_cfa_register 7
 1196 068a 7860     		str	r0, [r7, #4]
 1197 068c 0B46     		mov	r3, r1
 1198 068e FB70     		strb	r3, [r7, #3]
 783:../src/stm32f30x_spi.c ****   /* Check the parameters */
 784:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 785:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 786:../src/stm32f30x_spi.c **** 
 787:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 1199              		.loc 1 787 0
 1200 0690 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1201 0692 002B     		cmp	r3, #0
 1202 0694 08D0     		beq	.L45
 788:../src/stm32f30x_spi.c ****   {
 789:../src/stm32f30x_spi.c ****     /* Enable the NSS pulse management mode */
 790:../src/stm32f30x_spi.c ****     SPIx->CR2 |= SPI_CR2_NSSP;
 1203              		.loc 1 790 0
 1204 0696 7B68     		ldr	r3, [r7, #4]
 1205 0698 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1206 069a 9BB2     		uxth	r3, r3
 1207 069c 43F00803 		orr	r3, r3, #8
 1208 06a0 9AB2     		uxth	r2, r3
 1209 06a2 7B68     		ldr	r3, [r7, #4]
 1210 06a4 9A80     		strh	r2, [r3, #4]	@ movhi
 1211 06a6 07E0     		b	.L44
 1212              	.L45:
 791:../src/stm32f30x_spi.c ****   }
 792:../src/stm32f30x_spi.c ****   else
 793:../src/stm32f30x_spi.c ****   {
 794:../src/stm32f30x_spi.c ****     /* Disable the NSS pulse management mode */
 795:../src/stm32f30x_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 1213              		.loc 1 795 0
 1214 06a8 7B68     		ldr	r3, [r7, #4]
 1215 06aa 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1216 06ac 9BB2     		uxth	r3, r3
 1217 06ae 23F00803 		bic	r3, r3, #8
 1218 06b2 9AB2     		uxth	r2, r3
 1219 06b4 7B68     		ldr	r3, [r7, #4]
 1220 06b6 9A80     		strh	r2, [r3, #4]	@ movhi
 1221              	.L44:
 796:../src/stm32f30x_spi.c ****   }
 797:../src/stm32f30x_spi.c **** }
 1222              		.loc 1 797 0
 1223 06b8 07F10C07 		add	r7, r7, #12
 1224 06bc BD46     		mov	sp, r7
 1225 06be 80BC     		pop	{r7}
 1226 06c0 7047     		bx	lr
 1227              		.cfi_endproc
 1228              	.LFE125:
 1230 06c2 00BF     		.align	2
 1231              		.global	SPI_SendData8
 1232              		.thumb
 1233              		.thumb_func
 1235              	SPI_SendData8:
 1236              	.LFB126:
 798:../src/stm32f30x_spi.c **** 
 799:../src/stm32f30x_spi.c **** /**
 800:../src/stm32f30x_spi.c ****   * @}
 801:../src/stm32f30x_spi.c ****   */
 802:../src/stm32f30x_spi.c **** 
 803:../src/stm32f30x_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 804:../src/stm32f30x_spi.c ****  *  @brief   Data transfers functions
 805:../src/stm32f30x_spi.c ****  *
 806:../src/stm32f30x_spi.c **** @verbatim
 807:../src/stm32f30x_spi.c ****  ===============================================================================
 808:../src/stm32f30x_spi.c ****                     ##### Data transfers functions #####
 809:../src/stm32f30x_spi.c ****  ===============================================================================  
 810:../src/stm32f30x_spi.c ****     [..] This section provides a set of functions allowing to manage the SPI or I2S 
 811:../src/stm32f30x_spi.c ****          data transfers.
 812:../src/stm32f30x_spi.c ****     [..] In reception, data are received and then stored into an internal Rx buffer while 
 813:../src/stm32f30x_spi.c ****          In transmission, data are first stored into an internal Tx buffer before being 
 814:../src/stm32f30x_spi.c ****          transmitted.
 815:../src/stm32f30x_spi.c ****     [..] The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 816:../src/stm32f30x_spi.c ****          function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 817:../src/stm32f30x_spi.c ****          can be done using SPI_I2S_SendData() function and stores the written data into 
 818:../src/stm32f30x_spi.c ****          Tx buffer.
 819:../src/stm32f30x_spi.c **** 
 820:../src/stm32f30x_spi.c **** @endverbatim
 821:../src/stm32f30x_spi.c ****   * @{
 822:../src/stm32f30x_spi.c ****   */
 823:../src/stm32f30x_spi.c **** 
 824:../src/stm32f30x_spi.c **** /**
 825:../src/stm32f30x_spi.c ****   * @brief  Transmits a Data through the SPIx peripheral.
 826:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 827:../src/stm32f30x_spi.c ****   * @param  Data: Data to be transmitted.
 828:../src/stm32f30x_spi.c ****   * @retval None
 829:../src/stm32f30x_spi.c ****   */
 830:../src/stm32f30x_spi.c **** void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
 831:../src/stm32f30x_spi.c **** {
 1237              		.loc 1 831 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 16
 1240              		@ frame_needed = 1, uses_anonymous_args = 0
 1241              		@ link register save eliminated.
 1242 06c4 80B4     		push	{r7}
 1243              	.LCFI45:
 1244              		.cfi_def_cfa_offset 4
 1245              		.cfi_offset 7, -4
 1246 06c6 85B0     		sub	sp, sp, #20
 1247              	.LCFI46:
 1248              		.cfi_def_cfa_offset 24
 1249 06c8 00AF     		add	r7, sp, #0
 1250              	.LCFI47:
 1251              		.cfi_def_cfa_register 7
 1252 06ca 7860     		str	r0, [r7, #4]
 1253 06cc 0B46     		mov	r3, r1
 1254 06ce FB70     		strb	r3, [r7, #3]
 832:../src/stm32f30x_spi.c ****   uint32_t spixbase = 0x00;
 1255              		.loc 1 832 0
 1256 06d0 4FF00003 		mov	r3, #0
 1257 06d4 FB60     		str	r3, [r7, #12]
 833:../src/stm32f30x_spi.c **** 
 834:../src/stm32f30x_spi.c ****   /* Check the parameters */
 835:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 836:../src/stm32f30x_spi.c **** 
 837:../src/stm32f30x_spi.c ****   spixbase = (uint32_t)SPIx; 
 1258              		.loc 1 837 0
 1259 06d6 7B68     		ldr	r3, [r7, #4]
 1260 06d8 FB60     		str	r3, [r7, #12]
 838:../src/stm32f30x_spi.c ****   spixbase += 0x0C;
 1261              		.loc 1 838 0
 1262 06da FB68     		ldr	r3, [r7, #12]
 1263 06dc 03F10C03 		add	r3, r3, #12
 1264 06e0 FB60     		str	r3, [r7, #12]
 839:../src/stm32f30x_spi.c ****   
 840:../src/stm32f30x_spi.c ****   *(__IO uint8_t *) spixbase = Data;
 1265              		.loc 1 840 0
 1266 06e2 FB68     		ldr	r3, [r7, #12]
 1267 06e4 FA78     		ldrb	r2, [r7, #3]
 1268 06e6 1A70     		strb	r2, [r3, #0]
 841:../src/stm32f30x_spi.c **** }
 1269              		.loc 1 841 0
 1270 06e8 07F11407 		add	r7, r7, #20
 1271 06ec BD46     		mov	sp, r7
 1272 06ee 80BC     		pop	{r7}
 1273 06f0 7047     		bx	lr
 1274              		.cfi_endproc
 1275              	.LFE126:
 1277 06f2 00BF     		.align	2
 1278              		.global	SPI_I2S_SendData16
 1279              		.thumb
 1280              		.thumb_func
 1282              	SPI_I2S_SendData16:
 1283              	.LFB127:
 842:../src/stm32f30x_spi.c **** 
 843:../src/stm32f30x_spi.c **** /**
 844:../src/stm32f30x_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 845:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 846:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
 847:../src/stm32f30x_spi.c ****   * @param  Data: Data to be transmitted.
 848:../src/stm32f30x_spi.c ****   * @retval None
 849:../src/stm32f30x_spi.c ****   */
 850:../src/stm32f30x_spi.c **** void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
 851:../src/stm32f30x_spi.c **** {
 1284              		.loc 1 851 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 8
 1287              		@ frame_needed = 1, uses_anonymous_args = 0
 1288              		@ link register save eliminated.
 1289 06f4 80B4     		push	{r7}
 1290              	.LCFI48:
 1291              		.cfi_def_cfa_offset 4
 1292              		.cfi_offset 7, -4
 1293 06f6 83B0     		sub	sp, sp, #12
 1294              	.LCFI49:
 1295              		.cfi_def_cfa_offset 16
 1296 06f8 00AF     		add	r7, sp, #0
 1297              	.LCFI50:
 1298              		.cfi_def_cfa_register 7
 1299 06fa 7860     		str	r0, [r7, #4]
 1300 06fc 0B46     		mov	r3, r1
 1301 06fe 7B80     		strh	r3, [r7, #2]	@ movhi
 852:../src/stm32f30x_spi.c ****   /* Check the parameters */
 853:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 854:../src/stm32f30x_spi.c ****   
 855:../src/stm32f30x_spi.c ****   SPIx->DR = (uint16_t)Data;
 1302              		.loc 1 855 0
 1303 0700 7B68     		ldr	r3, [r7, #4]
 1304 0702 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1305 0704 9A81     		strh	r2, [r3, #12]	@ movhi
 856:../src/stm32f30x_spi.c **** }
 1306              		.loc 1 856 0
 1307 0706 07F10C07 		add	r7, r7, #12
 1308 070a BD46     		mov	sp, r7
 1309 070c 80BC     		pop	{r7}
 1310 070e 7047     		bx	lr
 1311              		.cfi_endproc
 1312              	.LFE127:
 1314              		.align	2
 1315              		.global	SPI_ReceiveData8
 1316              		.thumb
 1317              		.thumb_func
 1319              	SPI_ReceiveData8:
 1320              	.LFB128:
 857:../src/stm32f30x_spi.c **** 
 858:../src/stm32f30x_spi.c **** /**
 859:../src/stm32f30x_spi.c ****   * @brief  Returns the most recent received data by the SPIx peripheral. 
 860:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 861:../src/stm32f30x_spi.c ****   * @retval The value of the received data.
 862:../src/stm32f30x_spi.c ****   */
 863:../src/stm32f30x_spi.c **** uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
 864:../src/stm32f30x_spi.c **** {
 1321              		.loc 1 864 0
 1322              		.cfi_startproc
 1323              		@ args = 0, pretend = 0, frame = 16
 1324              		@ frame_needed = 1, uses_anonymous_args = 0
 1325              		@ link register save eliminated.
 1326 0710 80B4     		push	{r7}
 1327              	.LCFI51:
 1328              		.cfi_def_cfa_offset 4
 1329              		.cfi_offset 7, -4
 1330 0712 85B0     		sub	sp, sp, #20
 1331              	.LCFI52:
 1332              		.cfi_def_cfa_offset 24
 1333 0714 00AF     		add	r7, sp, #0
 1334              	.LCFI53:
 1335              		.cfi_def_cfa_register 7
 1336 0716 7860     		str	r0, [r7, #4]
 865:../src/stm32f30x_spi.c ****   uint32_t spixbase = 0x00;
 1337              		.loc 1 865 0
 1338 0718 4FF00003 		mov	r3, #0
 1339 071c FB60     		str	r3, [r7, #12]
 866:../src/stm32f30x_spi.c ****   
 867:../src/stm32f30x_spi.c ****   /* Check the parameters */
 868:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 869:../src/stm32f30x_spi.c ****   
 870:../src/stm32f30x_spi.c ****   spixbase = (uint32_t)SPIx; 
 1340              		.loc 1 870 0
 1341 071e 7B68     		ldr	r3, [r7, #4]
 1342 0720 FB60     		str	r3, [r7, #12]
 871:../src/stm32f30x_spi.c ****   spixbase += 0x0C;
 1343              		.loc 1 871 0
 1344 0722 FB68     		ldr	r3, [r7, #12]
 1345 0724 03F10C03 		add	r3, r3, #12
 1346 0728 FB60     		str	r3, [r7, #12]
 872:../src/stm32f30x_spi.c ****   
 873:../src/stm32f30x_spi.c ****   return *(__IO uint8_t *) spixbase;
 1347              		.loc 1 873 0
 1348 072a FB68     		ldr	r3, [r7, #12]
 1349 072c 1B78     		ldrb	r3, [r3, #0]
 1350 072e DBB2     		uxtb	r3, r3
 874:../src/stm32f30x_spi.c **** }
 1351              		.loc 1 874 0
 1352 0730 1846     		mov	r0, r3
 1353 0732 07F11407 		add	r7, r7, #20
 1354 0736 BD46     		mov	sp, r7
 1355 0738 80BC     		pop	{r7}
 1356 073a 7047     		bx	lr
 1357              		.cfi_endproc
 1358              	.LFE128:
 1360              		.align	2
 1361              		.global	SPI_I2S_ReceiveData16
 1362              		.thumb
 1363              		.thumb_func
 1365              	SPI_I2S_ReceiveData16:
 1366              	.LFB129:
 875:../src/stm32f30x_spi.c **** 
 876:../src/stm32f30x_spi.c **** /**
 877:../src/stm32f30x_spi.c ****   * @brief  Returns the most recent received data by the SPIx peripheral. 
 878:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 879:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.
 880:../src/stm32f30x_spi.c ****   * @retval The value of the received data.
 881:../src/stm32f30x_spi.c ****   */
 882:../src/stm32f30x_spi.c **** uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
 883:../src/stm32f30x_spi.c **** {  
 1367              		.loc 1 883 0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 8
 1370              		@ frame_needed = 1, uses_anonymous_args = 0
 1371              		@ link register save eliminated.
 1372 073c 80B4     		push	{r7}
 1373              	.LCFI54:
 1374              		.cfi_def_cfa_offset 4
 1375              		.cfi_offset 7, -4
 1376 073e 83B0     		sub	sp, sp, #12
 1377              	.LCFI55:
 1378              		.cfi_def_cfa_offset 16
 1379 0740 00AF     		add	r7, sp, #0
 1380              	.LCFI56:
 1381              		.cfi_def_cfa_register 7
 1382 0742 7860     		str	r0, [r7, #4]
 884:../src/stm32f30x_spi.c ****   /* Check the parameters */
 885:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 886:../src/stm32f30x_spi.c ****   
 887:../src/stm32f30x_spi.c ****   return SPIx->DR;
 1383              		.loc 1 887 0
 1384 0744 7B68     		ldr	r3, [r7, #4]
 1385 0746 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1386 0748 9BB2     		uxth	r3, r3
 888:../src/stm32f30x_spi.c **** }
 1387              		.loc 1 888 0
 1388 074a 1846     		mov	r0, r3
 1389 074c 07F10C07 		add	r7, r7, #12
 1390 0750 BD46     		mov	sp, r7
 1391 0752 80BC     		pop	{r7}
 1392 0754 7047     		bx	lr
 1393              		.cfi_endproc
 1394              	.LFE129:
 1396 0756 00BF     		.align	2
 1397              		.global	SPI_CRCLengthConfig
 1398              		.thumb
 1399              		.thumb_func
 1401              	SPI_CRCLengthConfig:
 1402              	.LFB130:
 889:../src/stm32f30x_spi.c **** /**
 890:../src/stm32f30x_spi.c ****   * @}
 891:../src/stm32f30x_spi.c ****   */
 892:../src/stm32f30x_spi.c **** 
 893:../src/stm32f30x_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 894:../src/stm32f30x_spi.c ****  *  @brief   Hardware CRC Calculation functions
 895:../src/stm32f30x_spi.c ****  *
 896:../src/stm32f30x_spi.c **** @verbatim   
 897:../src/stm32f30x_spi.c ****  ===============================================================================
 898:../src/stm32f30x_spi.c ****                   ##### Hardware CRC Calculation functions #####
 899:../src/stm32f30x_spi.c ****  ===============================================================================  
 900:../src/stm32f30x_spi.c ****     [..] This section provides a set of functions allowing to manage the SPI CRC hardware 
 901:../src/stm32f30x_spi.c ****          calculation.
 902:../src/stm32f30x_spi.c ****     [..] SPI communication using CRC is possible through the following procedure:
 903:../src/stm32f30x_spi.c ****          (#) Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 904:../src/stm32f30x_spi.c ****              Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 905:../src/stm32f30x_spi.c ****              function.
 906:../src/stm32f30x_spi.c ****          (#) Enable the CRC calculation using the SPI_CalculateCRC() function.
 907:../src/stm32f30x_spi.c ****          (#) Enable the SPI using the SPI_Cmd() function
 908:../src/stm32f30x_spi.c ****          (#) Before writing the last data to the TX buffer, set the CRCNext bit using the 
 909:../src/stm32f30x_spi.c ****              SPI_TransmitCRC() function to indicate that after transmission of the last 
 910:../src/stm32f30x_spi.c ****              data, the CRC should be transmitted.
 911:../src/stm32f30x_spi.c ****          (#) After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 912:../src/stm32f30x_spi.c ****              bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 913:../src/stm32f30x_spi.c ****              value. 
 914:../src/stm32f30x_spi.c ****              If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 915:../src/stm32f30x_spi.c ****              can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 916:../src/stm32f30x_spi.c ****     [..]
 917:../src/stm32f30x_spi.c ****     (@)
 918:../src/stm32f30x_spi.c ****          (+@) It is advised to don't read the calculate CRC values during the communication.
 919:../src/stm32f30x_spi.c ****          (+@) When the SPI is in slave mode, be careful to enable CRC calculation only 
 920:../src/stm32f30x_spi.c ****               when the clock is stable, that is, when the clock is in the steady state. 
 921:../src/stm32f30x_spi.c ****               If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 922:../src/stm32f30x_spi.c ****               to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 923:../src/stm32f30x_spi.c ****               the value of the SPE bit.
 924:../src/stm32f30x_spi.c ****          (+@) With high bitrate frequencies, be careful when transmitting the CRC.
 925:../src/stm32f30x_spi.c ****               As the number of used CPU cycles has to be as low as possible in the CRC 
 926:../src/stm32f30x_spi.c ****               transfer phase, it is forbidden to call software functions in the CRC 
 927:../src/stm32f30x_spi.c ****               transmission sequence to avoid errors in the last data and CRC reception. 
 928:../src/stm32f30x_spi.c ****               In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 929:../src/stm32f30x_spi.c ****               of the last data.
 930:../src/stm32f30x_spi.c ****          (+@) For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 931:../src/stm32f30x_spi.c ****               degradation of the SPI speed performance due to CPU accesses impacting the 
 932:../src/stm32f30x_spi.c ****               SPI bandwidth.
 933:../src/stm32f30x_spi.c ****          (+@) When the STM32F30x are configured as slaves and the NSS hardware mode is 
 934:../src/stm32f30x_spi.c ****               used, the NSS pin needs to be kept low between the data phase and the CRC 
 935:../src/stm32f30x_spi.c ****               phase.
 936:../src/stm32f30x_spi.c ****          (+@) When the SPI is configured in slave mode with the CRC feature enabled, CRC
 937:../src/stm32f30x_spi.c ****               calculation takes place even if a high level is applied on the NSS pin. 
 938:../src/stm32f30x_spi.c ****               This may happen for example in case of a multislave environment where the 
 939:../src/stm32f30x_spi.c ****               communication master addresses slaves alternately.
 940:../src/stm32f30x_spi.c ****          (+@) Between a slave deselection (high level on NSS) and a new slave selection 
 941:../src/stm32f30x_spi.c ****               (low level on NSS), the CRC value should be cleared on both master and slave
 942:../src/stm32f30x_spi.c ****               sides in order to resynchronize the master and slave for their respective 
 943:../src/stm32f30x_spi.c ****               CRC calculation.
 944:../src/stm32f30x_spi.c ****     [..]          
 945:../src/stm32f30x_spi.c ****     (@) To clear the CRC, follow the procedure below:
 946:../src/stm32f30x_spi.c ****          (#@) Disable SPI using the SPI_Cmd() function.
 947:../src/stm32f30x_spi.c ****          (#@) Disable the CRC calculation using the SPI_CalculateCRC() function.
 948:../src/stm32f30x_spi.c ****          (#@) Enable the CRC calculation using the SPI_CalculateCRC() function.
 949:../src/stm32f30x_spi.c ****          (#@) Enable SPI using the SPI_Cmd() function.
 950:../src/stm32f30x_spi.c **** 
 951:../src/stm32f30x_spi.c **** @endverbatim
 952:../src/stm32f30x_spi.c ****   * @{
 953:../src/stm32f30x_spi.c ****   */
 954:../src/stm32f30x_spi.c **** 
 955:../src/stm32f30x_spi.c **** /**
 956:../src/stm32f30x_spi.c ****   * @brief  Configures the CRC calculation length for the selected SPI.
 957:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 958:../src/stm32f30x_spi.c ****   * @param  SPI_CRCLength: specifies the SPI CRC calculation length.
 959:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
 960:../src/stm32f30x_spi.c ****   *     @arg SPI_CRCLength_8b: Set CRC Calculation to 8 bits
 961:../src/stm32f30x_spi.c ****   *     @arg SPI_CRCLength_16b: Set CRC Calculation to 16 bits
 962:../src/stm32f30x_spi.c ****   * @retval None
 963:../src/stm32f30x_spi.c ****   */
 964:../src/stm32f30x_spi.c **** void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength)
 965:../src/stm32f30x_spi.c **** {
 1403              		.loc 1 965 0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 8
 1406              		@ frame_needed = 1, uses_anonymous_args = 0
 1407              		@ link register save eliminated.
 1408 0758 80B4     		push	{r7}
 1409              	.LCFI57:
 1410              		.cfi_def_cfa_offset 4
 1411              		.cfi_offset 7, -4
 1412 075a 83B0     		sub	sp, sp, #12
 1413              	.LCFI58:
 1414              		.cfi_def_cfa_offset 16
 1415 075c 00AF     		add	r7, sp, #0
 1416              	.LCFI59:
 1417              		.cfi_def_cfa_register 7
 1418 075e 7860     		str	r0, [r7, #4]
 1419 0760 0B46     		mov	r3, r1
 1420 0762 7B80     		strh	r3, [r7, #2]	@ movhi
 966:../src/stm32f30x_spi.c ****   /* Check the parameters */
 967:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 968:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));
 969:../src/stm32f30x_spi.c **** 
 970:../src/stm32f30x_spi.c ****   /* Clear CRCL bit */
 971:../src/stm32f30x_spi.c ****   SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 1421              		.loc 1 971 0
 1422 0764 7B68     		ldr	r3, [r7, #4]
 1423 0766 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1424 0768 9BB2     		uxth	r3, r3
 1425 076a 23F40063 		bic	r3, r3, #2048
 1426 076e 9AB2     		uxth	r2, r3
 1427 0770 7B68     		ldr	r3, [r7, #4]
 1428 0772 1A80     		strh	r2, [r3, #0]	@ movhi
 972:../src/stm32f30x_spi.c **** 
 973:../src/stm32f30x_spi.c ****   /* Set new CRCL bit value */
 974:../src/stm32f30x_spi.c ****   SPIx->CR1 |= SPI_CRCLength;
 1429              		.loc 1 974 0
 1430 0774 7B68     		ldr	r3, [r7, #4]
 1431 0776 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1432 0778 9AB2     		uxth	r2, r3
 1433 077a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1434 077c 1343     		orrs	r3, r3, r2
 1435 077e 9AB2     		uxth	r2, r3
 1436 0780 7B68     		ldr	r3, [r7, #4]
 1437 0782 1A80     		strh	r2, [r3, #0]	@ movhi
 975:../src/stm32f30x_spi.c **** }
 1438              		.loc 1 975 0
 1439 0784 07F10C07 		add	r7, r7, #12
 1440 0788 BD46     		mov	sp, r7
 1441 078a 80BC     		pop	{r7}
 1442 078c 7047     		bx	lr
 1443              		.cfi_endproc
 1444              	.LFE130:
 1446 078e 00BF     		.align	2
 1447              		.global	SPI_CalculateCRC
 1448              		.thumb
 1449              		.thumb_func
 1451              	SPI_CalculateCRC:
 1452              	.LFB131:
 976:../src/stm32f30x_spi.c **** 
 977:../src/stm32f30x_spi.c **** /**
 978:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 979:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 980:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 981:../src/stm32f30x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 982:../src/stm32f30x_spi.c ****   * @retval None
 983:../src/stm32f30x_spi.c ****   */
 984:../src/stm32f30x_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 985:../src/stm32f30x_spi.c **** {
 1453              		.loc 1 985 0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 8
 1456              		@ frame_needed = 1, uses_anonymous_args = 0
 1457              		@ link register save eliminated.
 1458 0790 80B4     		push	{r7}
 1459              	.LCFI60:
 1460              		.cfi_def_cfa_offset 4
 1461              		.cfi_offset 7, -4
 1462 0792 83B0     		sub	sp, sp, #12
 1463              	.LCFI61:
 1464              		.cfi_def_cfa_offset 16
 1465 0794 00AF     		add	r7, sp, #0
 1466              	.LCFI62:
 1467              		.cfi_def_cfa_register 7
 1468 0796 7860     		str	r0, [r7, #4]
 1469 0798 0B46     		mov	r3, r1
 1470 079a FB70     		strb	r3, [r7, #3]
 986:../src/stm32f30x_spi.c ****   /* Check the parameters */
 987:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 988:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 989:../src/stm32f30x_spi.c **** 
 990:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 1471              		.loc 1 990 0
 1472 079c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1473 079e 002B     		cmp	r3, #0
 1474 07a0 08D0     		beq	.L55
 991:../src/stm32f30x_spi.c ****   {
 992:../src/stm32f30x_spi.c ****     /* Enable the selected SPI CRC calculation */
 993:../src/stm32f30x_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 1475              		.loc 1 993 0
 1476 07a2 7B68     		ldr	r3, [r7, #4]
 1477 07a4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1478 07a6 9BB2     		uxth	r3, r3
 1479 07a8 43F40053 		orr	r3, r3, #8192
 1480 07ac 9AB2     		uxth	r2, r3
 1481 07ae 7B68     		ldr	r3, [r7, #4]
 1482 07b0 1A80     		strh	r2, [r3, #0]	@ movhi
 1483 07b2 07E0     		b	.L54
 1484              	.L55:
 994:../src/stm32f30x_spi.c ****   }
 995:../src/stm32f30x_spi.c ****   else
 996:../src/stm32f30x_spi.c ****   {
 997:../src/stm32f30x_spi.c ****     /* Disable the selected SPI CRC calculation */
 998:../src/stm32f30x_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 1485              		.loc 1 998 0
 1486 07b4 7B68     		ldr	r3, [r7, #4]
 1487 07b6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1488 07b8 9BB2     		uxth	r3, r3
 1489 07ba 23F40053 		bic	r3, r3, #8192
 1490 07be 9AB2     		uxth	r2, r3
 1491 07c0 7B68     		ldr	r3, [r7, #4]
 1492 07c2 1A80     		strh	r2, [r3, #0]	@ movhi
 1493              	.L54:
 999:../src/stm32f30x_spi.c ****   }
1000:../src/stm32f30x_spi.c **** }
 1494              		.loc 1 1000 0
 1495 07c4 07F10C07 		add	r7, r7, #12
 1496 07c8 BD46     		mov	sp, r7
 1497 07ca 80BC     		pop	{r7}
 1498 07cc 7047     		bx	lr
 1499              		.cfi_endproc
 1500              	.LFE131:
 1502 07ce 00BF     		.align	2
 1503              		.global	SPI_TransmitCRC
 1504              		.thumb
 1505              		.thumb_func
 1507              	SPI_TransmitCRC:
 1508              	.LFB132:
1001:../src/stm32f30x_spi.c **** 
1002:../src/stm32f30x_spi.c **** /**
1003:../src/stm32f30x_spi.c ****   * @brief  Transmits the SPIx CRC value.
1004:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1005:../src/stm32f30x_spi.c ****   * @retval None
1006:../src/stm32f30x_spi.c ****   */
1007:../src/stm32f30x_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
1008:../src/stm32f30x_spi.c **** {
 1509              		.loc 1 1008 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 8
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513              		@ link register save eliminated.
 1514 07d0 80B4     		push	{r7}
 1515              	.LCFI63:
 1516              		.cfi_def_cfa_offset 4
 1517              		.cfi_offset 7, -4
 1518 07d2 83B0     		sub	sp, sp, #12
 1519              	.LCFI64:
 1520              		.cfi_def_cfa_offset 16
 1521 07d4 00AF     		add	r7, sp, #0
 1522              	.LCFI65:
 1523              		.cfi_def_cfa_register 7
 1524 07d6 7860     		str	r0, [r7, #4]
1009:../src/stm32f30x_spi.c ****   /* Check the parameters */
1010:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1011:../src/stm32f30x_spi.c **** 
1012:../src/stm32f30x_spi.c ****   /* Enable the selected SPI CRC transmission */
1013:../src/stm32f30x_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 1525              		.loc 1 1013 0
 1526 07d8 7B68     		ldr	r3, [r7, #4]
 1527 07da 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1528 07dc 9BB2     		uxth	r3, r3
 1529 07de 43F48053 		orr	r3, r3, #4096
 1530 07e2 9AB2     		uxth	r2, r3
 1531 07e4 7B68     		ldr	r3, [r7, #4]
 1532 07e6 1A80     		strh	r2, [r3, #0]	@ movhi
1014:../src/stm32f30x_spi.c **** }
 1533              		.loc 1 1014 0
 1534 07e8 07F10C07 		add	r7, r7, #12
 1535 07ec BD46     		mov	sp, r7
 1536 07ee 80BC     		pop	{r7}
 1537 07f0 7047     		bx	lr
 1538              		.cfi_endproc
 1539              	.LFE132:
 1541 07f2 00BF     		.align	2
 1542              		.global	SPI_GetCRC
 1543              		.thumb
 1544              		.thumb_func
 1546              	SPI_GetCRC:
 1547              	.LFB133:
1015:../src/stm32f30x_spi.c **** 
1016:../src/stm32f30x_spi.c **** /**
1017:../src/stm32f30x_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
1018:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1019:../src/stm32f30x_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
1020:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
1021:../src/stm32f30x_spi.c ****   *     @arg SPI_CRC_Tx: Selects Tx CRC register
1022:../src/stm32f30x_spi.c ****   *     @arg SPI_CRC_Rx: Selects Rx CRC register
1023:../src/stm32f30x_spi.c ****   * @retval The selected CRC register value..
1024:../src/stm32f30x_spi.c ****   */
1025:../src/stm32f30x_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
1026:../src/stm32f30x_spi.c **** {
 1548              		.loc 1 1026 0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 16
 1551              		@ frame_needed = 1, uses_anonymous_args = 0
 1552              		@ link register save eliminated.
 1553 07f4 80B4     		push	{r7}
 1554              	.LCFI66:
 1555              		.cfi_def_cfa_offset 4
 1556              		.cfi_offset 7, -4
 1557 07f6 85B0     		sub	sp, sp, #20
 1558              	.LCFI67:
 1559              		.cfi_def_cfa_offset 24
 1560 07f8 00AF     		add	r7, sp, #0
 1561              	.LCFI68:
 1562              		.cfi_def_cfa_register 7
 1563 07fa 7860     		str	r0, [r7, #4]
 1564 07fc 0B46     		mov	r3, r1
 1565 07fe FB70     		strb	r3, [r7, #3]
1027:../src/stm32f30x_spi.c ****   uint16_t crcreg = 0;
 1566              		.loc 1 1027 0
 1567 0800 4FF00003 		mov	r3, #0
 1568 0804 FB81     		strh	r3, [r7, #14]	@ movhi
1028:../src/stm32f30x_spi.c ****   /* Check the parameters */
1029:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1030:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
1031:../src/stm32f30x_spi.c **** 
1032:../src/stm32f30x_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1569              		.loc 1 1032 0
 1570 0806 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1571 0808 012B     		cmp	r3, #1
 1572 080a 03D0     		beq	.L59
1033:../src/stm32f30x_spi.c ****   {
1034:../src/stm32f30x_spi.c ****     /* Get the Tx CRC register */
1035:../src/stm32f30x_spi.c ****     crcreg = SPIx->TXCRCR;
 1573              		.loc 1 1035 0
 1574 080c 7B68     		ldr	r3, [r7, #4]
 1575 080e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1576 0810 FB81     		strh	r3, [r7, #14]	@ movhi
 1577 0812 02E0     		b	.L60
 1578              	.L59:
1036:../src/stm32f30x_spi.c ****   }
1037:../src/stm32f30x_spi.c ****   else
1038:../src/stm32f30x_spi.c ****   {
1039:../src/stm32f30x_spi.c ****     /* Get the Rx CRC register */
1040:../src/stm32f30x_spi.c ****     crcreg = SPIx->RXCRCR;
 1579              		.loc 1 1040 0
 1580 0814 7B68     		ldr	r3, [r7, #4]
 1581 0816 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1582 0818 FB81     		strh	r3, [r7, #14]	@ movhi
 1583              	.L60:
1041:../src/stm32f30x_spi.c ****   }
1042:../src/stm32f30x_spi.c ****   /* Return the selected CRC register */
1043:../src/stm32f30x_spi.c ****   return crcreg;
 1584              		.loc 1 1043 0
 1585 081a FB89     		ldrh	r3, [r7, #14]
1044:../src/stm32f30x_spi.c **** }
 1586              		.loc 1 1044 0
 1587 081c 1846     		mov	r0, r3
 1588 081e 07F11407 		add	r7, r7, #20
 1589 0822 BD46     		mov	sp, r7
 1590 0824 80BC     		pop	{r7}
 1591 0826 7047     		bx	lr
 1592              		.cfi_endproc
 1593              	.LFE133:
 1595              		.align	2
 1596              		.global	SPI_GetCRCPolynomial
 1597              		.thumb
 1598              		.thumb_func
 1600              	SPI_GetCRCPolynomial:
 1601              	.LFB134:
1045:../src/stm32f30x_spi.c **** 
1046:../src/stm32f30x_spi.c **** /**
1047:../src/stm32f30x_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
1048:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1049:../src/stm32f30x_spi.c ****   * @retval The CRC Polynomial register value.
1050:../src/stm32f30x_spi.c ****   */
1051:../src/stm32f30x_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
1052:../src/stm32f30x_spi.c **** {
 1602              		.loc 1 1052 0
 1603              		.cfi_startproc
 1604              		@ args = 0, pretend = 0, frame = 8
 1605              		@ frame_needed = 1, uses_anonymous_args = 0
 1606              		@ link register save eliminated.
 1607 0828 80B4     		push	{r7}
 1608              	.LCFI69:
 1609              		.cfi_def_cfa_offset 4
 1610              		.cfi_offset 7, -4
 1611 082a 83B0     		sub	sp, sp, #12
 1612              	.LCFI70:
 1613              		.cfi_def_cfa_offset 16
 1614 082c 00AF     		add	r7, sp, #0
 1615              	.LCFI71:
 1616              		.cfi_def_cfa_register 7
 1617 082e 7860     		str	r0, [r7, #4]
1053:../src/stm32f30x_spi.c ****   /* Check the parameters */
1054:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1055:../src/stm32f30x_spi.c **** 
1056:../src/stm32f30x_spi.c ****   /* Return the CRC polynomial register */
1057:../src/stm32f30x_spi.c ****   return SPIx->CRCPR;
 1618              		.loc 1 1057 0
 1619 0830 7B68     		ldr	r3, [r7, #4]
 1620 0832 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1621 0834 9BB2     		uxth	r3, r3
1058:../src/stm32f30x_spi.c **** }
 1622              		.loc 1 1058 0
 1623 0836 1846     		mov	r0, r3
 1624 0838 07F10C07 		add	r7, r7, #12
 1625 083c BD46     		mov	sp, r7
 1626 083e 80BC     		pop	{r7}
 1627 0840 7047     		bx	lr
 1628              		.cfi_endproc
 1629              	.LFE134:
 1631 0842 00BF     		.align	2
 1632              		.global	SPI_I2S_DMACmd
 1633              		.thumb
 1634              		.thumb_func
 1636              	SPI_I2S_DMACmd:
 1637              	.LFB135:
1059:../src/stm32f30x_spi.c **** 
1060:../src/stm32f30x_spi.c **** /**
1061:../src/stm32f30x_spi.c ****   * @}
1062:../src/stm32f30x_spi.c ****   */
1063:../src/stm32f30x_spi.c **** 
1064:../src/stm32f30x_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
1065:../src/stm32f30x_spi.c ****  *  @brief   DMA transfers management functions
1066:../src/stm32f30x_spi.c ****   *
1067:../src/stm32f30x_spi.c **** @verbatim   
1068:../src/stm32f30x_spi.c ****  ===============================================================================
1069:../src/stm32f30x_spi.c ****                   ##### DMA transfers management functions #####
1070:../src/stm32f30x_spi.c ****  ===============================================================================
1071:../src/stm32f30x_spi.c **** 
1072:../src/stm32f30x_spi.c **** @endverbatim
1073:../src/stm32f30x_spi.c ****   * @{
1074:../src/stm32f30x_spi.c ****   */
1075:../src/stm32f30x_spi.c **** 
1076:../src/stm32f30x_spi.c **** /**
1077:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
1078:../src/stm32f30x_spi.c ****   * @param  SPIx:To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1079:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1080:../src/stm32f30x_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
1081:../src/stm32f30x_spi.c ****   *   This parameter can be any combination of the following values:
1082:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
1083:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
1084:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
1085:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
1086:../src/stm32f30x_spi.c ****   * @retval None
1087:../src/stm32f30x_spi.c ****   */
1088:../src/stm32f30x_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
1089:../src/stm32f30x_spi.c **** {
 1638              		.loc 1 1089 0
 1639              		.cfi_startproc
 1640              		@ args = 0, pretend = 0, frame = 8
 1641              		@ frame_needed = 1, uses_anonymous_args = 0
 1642              		@ link register save eliminated.
 1643 0844 80B4     		push	{r7}
 1644              	.LCFI72:
 1645              		.cfi_def_cfa_offset 4
 1646              		.cfi_offset 7, -4
 1647 0846 83B0     		sub	sp, sp, #12
 1648              	.LCFI73:
 1649              		.cfi_def_cfa_offset 16
 1650 0848 00AF     		add	r7, sp, #0
 1651              	.LCFI74:
 1652              		.cfi_def_cfa_register 7
 1653 084a 7860     		str	r0, [r7, #4]
 1654 084c 1346     		mov	r3, r2
 1655 084e 0A46     		mov	r2, r1	@ movhi
 1656 0850 7A80     		strh	r2, [r7, #2]	@ movhi
 1657 0852 7B70     		strb	r3, [r7, #1]
1090:../src/stm32f30x_spi.c ****   /* Check the parameters */
1091:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1092:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1093:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));
1094:../src/stm32f30x_spi.c **** 
1095:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 1658              		.loc 1 1095 0
 1659 0854 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1660 0856 002B     		cmp	r3, #0
 1661 0858 08D0     		beq	.L65
1096:../src/stm32f30x_spi.c ****   {
1097:../src/stm32f30x_spi.c ****     /* Enable the selected SPI DMA requests */
1098:../src/stm32f30x_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1662              		.loc 1 1098 0
 1663 085a 7B68     		ldr	r3, [r7, #4]
 1664 085c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1665 085e 9AB2     		uxth	r2, r3
 1666 0860 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1667 0862 1343     		orrs	r3, r3, r2
 1668 0864 9AB2     		uxth	r2, r3
 1669 0866 7B68     		ldr	r3, [r7, #4]
 1670 0868 9A80     		strh	r2, [r3, #4]	@ movhi
 1671 086a 0AE0     		b	.L64
 1672              	.L65:
1099:../src/stm32f30x_spi.c ****   }
1100:../src/stm32f30x_spi.c ****   else
1101:../src/stm32f30x_spi.c ****   {
1102:../src/stm32f30x_spi.c ****     /* Disable the selected SPI DMA requests */
1103:../src/stm32f30x_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1673              		.loc 1 1103 0
 1674 086c 7B68     		ldr	r3, [r7, #4]
 1675 086e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1676 0870 9AB2     		uxth	r2, r3
 1677 0872 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1678 0874 6FEA0303 		mvn	r3, r3
 1679 0878 9BB2     		uxth	r3, r3
 1680 087a 1340     		ands	r3, r3, r2
 1681 087c 9AB2     		uxth	r2, r3
 1682 087e 7B68     		ldr	r3, [r7, #4]
 1683 0880 9A80     		strh	r2, [r3, #4]	@ movhi
 1684              	.L64:
1104:../src/stm32f30x_spi.c ****   }
1105:../src/stm32f30x_spi.c **** }
 1685              		.loc 1 1105 0
 1686 0882 07F10C07 		add	r7, r7, #12
 1687 0886 BD46     		mov	sp, r7
 1688 0888 80BC     		pop	{r7}
 1689 088a 7047     		bx	lr
 1690              		.cfi_endproc
 1691              	.LFE135:
 1693              		.align	2
 1694              		.global	SPI_LastDMATransferCmd
 1695              		.thumb
 1696              		.thumb_func
 1698              	SPI_LastDMATransferCmd:
 1699              	.LFB136:
1106:../src/stm32f30x_spi.c **** 
1107:../src/stm32f30x_spi.c **** /**
1108:../src/stm32f30x_spi.c ****   * @brief  Configures the number of data to transfer type(Even/Odd) for the DMA
1109:../src/stm32f30x_spi.c ****   *         last transfers and for the selected SPI.
1110:../src/stm32f30x_spi.c ****   * @note   This function have a meaning only if DMA mode is selected and if 
1111:../src/stm32f30x_spi.c ****   *         the packing mode is used (data length <= 8 and DMA transfer size halfword)  
1112:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1113:../src/stm32f30x_spi.c ****   * @param  SPI_LastDMATransfer: specifies the SPI last DMA transfers state.
1114:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
1115:../src/stm32f30x_spi.c ****   *     @arg SPI_LastDMATransfer_TxEvenRxEven: Number of data for transmission Even
1116:../src/stm32f30x_spi.c ****   *          and number of data for reception Even.
1117:../src/stm32f30x_spi.c ****   *     @arg SPI_LastDMATransfer_TxOddRxEven: Number of data for transmission Odd
1118:../src/stm32f30x_spi.c ****   *          and number of data for reception Even.
1119:../src/stm32f30x_spi.c ****   *     @arg SPI_LastDMATransfer_TxEvenRxOdd: Number of data for transmission Even
1120:../src/stm32f30x_spi.c ****   *          and number of data for reception Odd.
1121:../src/stm32f30x_spi.c ****   *     @arg SPI_LastDMATransfer_TxOddRxOdd: RNumber of data for transmission Odd
1122:../src/stm32f30x_spi.c ****   *          and number of data for reception Odd.
1123:../src/stm32f30x_spi.c ****   * @retval None
1124:../src/stm32f30x_spi.c ****   */
1125:../src/stm32f30x_spi.c **** void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer)
1126:../src/stm32f30x_spi.c **** {
 1700              		.loc 1 1126 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 8
 1703              		@ frame_needed = 1, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
 1705 088c 80B4     		push	{r7}
 1706              	.LCFI75:
 1707              		.cfi_def_cfa_offset 4
 1708              		.cfi_offset 7, -4
 1709 088e 83B0     		sub	sp, sp, #12
 1710              	.LCFI76:
 1711              		.cfi_def_cfa_offset 16
 1712 0890 00AF     		add	r7, sp, #0
 1713              	.LCFI77:
 1714              		.cfi_def_cfa_register 7
 1715 0892 7860     		str	r0, [r7, #4]
 1716 0894 0B46     		mov	r3, r1
 1717 0896 7B80     		strh	r3, [r7, #2]	@ movhi
1127:../src/stm32f30x_spi.c ****   /* Check the parameters */
1128:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1129:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));
1130:../src/stm32f30x_spi.c **** 
1131:../src/stm32f30x_spi.c ****   /* Clear LDMA_TX and LDMA_RX bits */
1132:../src/stm32f30x_spi.c ****   SPIx->CR2 &= CR2_LDMA_MASK;
 1718              		.loc 1 1132 0
 1719 0898 7B68     		ldr	r3, [r7, #4]
 1720 089a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1721 089c 9BB2     		uxth	r3, r3
 1722 089e 23F4C043 		bic	r3, r3, #24576
 1723 08a2 9AB2     		uxth	r2, r3
 1724 08a4 7B68     		ldr	r3, [r7, #4]
 1725 08a6 9A80     		strh	r2, [r3, #4]	@ movhi
1133:../src/stm32f30x_spi.c **** 
1134:../src/stm32f30x_spi.c ****   /* Set new LDMA_TX and LDMA_RX bits value */
1135:../src/stm32f30x_spi.c ****   SPIx->CR2 |= SPI_LastDMATransfer; 
 1726              		.loc 1 1135 0
 1727 08a8 7B68     		ldr	r3, [r7, #4]
 1728 08aa 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1729 08ac 9AB2     		uxth	r2, r3
 1730 08ae 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1731 08b0 1343     		orrs	r3, r3, r2
 1732 08b2 9AB2     		uxth	r2, r3
 1733 08b4 7B68     		ldr	r3, [r7, #4]
 1734 08b6 9A80     		strh	r2, [r3, #4]	@ movhi
1136:../src/stm32f30x_spi.c **** }
 1735              		.loc 1 1136 0
 1736 08b8 07F10C07 		add	r7, r7, #12
 1737 08bc BD46     		mov	sp, r7
 1738 08be 80BC     		pop	{r7}
 1739 08c0 7047     		bx	lr
 1740              		.cfi_endproc
 1741              	.LFE136:
 1743 08c2 00BF     		.align	2
 1744              		.global	SPI_I2S_ITConfig
 1745              		.thumb
 1746              		.thumb_func
 1748              	SPI_I2S_ITConfig:
 1749              	.LFB137:
1137:../src/stm32f30x_spi.c **** 
1138:../src/stm32f30x_spi.c **** /**
1139:../src/stm32f30x_spi.c ****   * @}
1140:../src/stm32f30x_spi.c ****   */
1141:../src/stm32f30x_spi.c **** 
1142:../src/stm32f30x_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1143:../src/stm32f30x_spi.c ****  *  @brief   Interrupts and flags management functions
1144:../src/stm32f30x_spi.c ****   *
1145:../src/stm32f30x_spi.c **** @verbatim   
1146:../src/stm32f30x_spi.c ****  ===============================================================================
1147:../src/stm32f30x_spi.c ****               ##### Interrupts and flags management functions #####
1148:../src/stm32f30x_spi.c ****  ===============================================================================  
1149:../src/stm32f30x_spi.c ****     [..] This section provides a set of functions allowing to configure the SPI/I2S 
1150:../src/stm32f30x_spi.c ****          Interrupts sources and check or clear the flags or pending bits status.
1151:../src/stm32f30x_spi.c ****          The user should identify which mode will be used in his application to manage 
1152:../src/stm32f30x_spi.c ****          the communication: Polling mode, Interrupt mode or DMA mode. 
1153:../src/stm32f30x_spi.c ****     
1154:../src/stm32f30x_spi.c ****   *** Polling Mode ***
1155:../src/stm32f30x_spi.c ****   ====================
1156:../src/stm32f30x_spi.c ****     [..] In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1157:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register.
1158:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register.
1159:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1160:../src/stm32f30x_spi.c ****          (#) SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur.              
1161:../src/stm32f30x_spi.c ****          (#) SPI_FLAG_MODF : to indicate if a Mode Fault error occur.
1162:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur.
1163:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_FRE: to indicate a Frame Format error occurs.
1164:../src/stm32f30x_spi.c ****          (#) I2S_FLAG_UDR: to indicate an Underrun error occurs.
1165:../src/stm32f30x_spi.c ****          (#) I2S_FLAG_CHSIDE: to indicate Channel Side.
1166:../src/stm32f30x_spi.c ****     [..]
1167:../src/stm32f30x_spi.c ****          (@) Do not use the BSY flag to handle each data transmission or reception.
1168:../src/stm32f30x_spi.c ****              It is better to use the TXE and RXNE flags instead.
1169:../src/stm32f30x_spi.c ****     [..] In this Mode it is advised to use the following functions:
1170:../src/stm32f30x_spi.c ****          (+) FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1171:../src/stm32f30x_spi.c ****          (+) void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1172:../src/stm32f30x_spi.c **** 
1173:../src/stm32f30x_spi.c ****   *** Interrupt Mode ***
1174:../src/stm32f30x_spi.c ****   ======================
1175:../src/stm32f30x_spi.c ****     [..] In Interrupt Mode, the SPI/I2S communication can be managed by 3 interrupt sources
1176:../src/stm32f30x_spi.c ****          and 5 pending bits: 
1177:../src/stm32f30x_spi.c ****     [..] Pending Bits:
1178:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register.
1179:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register.
1180:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_OVR : to indicate if an Overrun error occur.
1181:../src/stm32f30x_spi.c ****          (#) I2S_IT_UDR : to indicate an Underrun Error occurs.
1182:../src/stm32f30x_spi.c ****          (#) SPI_I2S_FLAG_FRE : to indicate a Frame Format error occurs.
1183:../src/stm32f30x_spi.c ****     [..] Interrupt Source:
1184:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1185:../src/stm32f30x_spi.c ****              interrupt.  
1186:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1187:../src/stm32f30x_spi.c ****              empty interrupt.
1188:../src/stm32f30x_spi.c ****          (#) SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1189:../src/stm32f30x_spi.c ****     [..] In this Mode it is advised to use the following functions:
1190:../src/stm32f30x_spi.c ****          (+) void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1191:../src/stm32f30x_spi.c ****          (+) ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1192:../src/stm32f30x_spi.c **** 
1193:../src/stm32f30x_spi.c ****   *** FIFO Status ***
1194:../src/stm32f30x_spi.c ****   ===================
1195:../src/stm32f30x_spi.c ****     [..] It is possible to monitor the FIFO status when a transfer is ongoing using the
1196:../src/stm32f30x_spi.c ****          following function:
1197:../src/stm32f30x_spi.c ****          (+) uint32_t SPI_GetFIFOStatus(uint8_t SPI_FIFO_Direction); 
1198:../src/stm32f30x_spi.c **** 
1199:../src/stm32f30x_spi.c ****   *** DMA Mode ***
1200:../src/stm32f30x_spi.c ****   ================
1201:../src/stm32f30x_spi.c ****     [..] In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1202:../src/stm32f30x_spi.c ****          (#) SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1203:../src/stm32f30x_spi.c ****          (#) SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1204:../src/stm32f30x_spi.c ****     [..] In this Mode it is advised to use the following function:
1205:../src/stm32f30x_spi.c ****          (+) void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewSta
1206:../src/stm32f30x_spi.c **** 
1207:../src/stm32f30x_spi.c **** @endverbatim
1208:../src/stm32f30x_spi.c ****   * @{
1209:../src/stm32f30x_spi.c ****   */
1210:../src/stm32f30x_spi.c **** 
1211:../src/stm32f30x_spi.c **** /**
1212:../src/stm32f30x_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1213:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1214:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1215:../src/stm32f30x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1216:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
1217:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1218:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1219:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_ERR: Error interrupt mask
1220:../src/stm32f30x_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1221:../src/stm32f30x_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
1222:../src/stm32f30x_spi.c ****   * @retval None
1223:../src/stm32f30x_spi.c ****   */
1224:../src/stm32f30x_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1225:../src/stm32f30x_spi.c **** {
 1750              		.loc 1 1225 0
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 16
 1753              		@ frame_needed = 1, uses_anonymous_args = 0
 1754              		@ link register save eliminated.
 1755 08c4 80B4     		push	{r7}
 1756              	.LCFI78:
 1757              		.cfi_def_cfa_offset 4
 1758              		.cfi_offset 7, -4
 1759 08c6 85B0     		sub	sp, sp, #20
 1760              	.LCFI79:
 1761              		.cfi_def_cfa_offset 24
 1762 08c8 00AF     		add	r7, sp, #0
 1763              	.LCFI80:
 1764              		.cfi_def_cfa_register 7
 1765 08ca 7860     		str	r0, [r7, #4]
 1766 08cc 1346     		mov	r3, r2
 1767 08ce 0A46     		mov	r2, r1
 1768 08d0 FA70     		strb	r2, [r7, #3]
 1769 08d2 BB70     		strb	r3, [r7, #2]
1226:../src/stm32f30x_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 1770              		.loc 1 1226 0
 1771 08d4 4FF00003 		mov	r3, #0
 1772 08d8 FB81     		strh	r3, [r7, #14]	@ movhi
 1773 08da 4FF00003 		mov	r3, #0
 1774 08de BB81     		strh	r3, [r7, #12]	@ movhi
1227:../src/stm32f30x_spi.c **** 
1228:../src/stm32f30x_spi.c ****   /* Check the parameters */
1229:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1230:../src/stm32f30x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1231:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1232:../src/stm32f30x_spi.c **** 
1233:../src/stm32f30x_spi.c ****   /* Get the SPI IT index */
1234:../src/stm32f30x_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1775              		.loc 1 1234 0
 1776 08e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1777 08e2 4FEA1313 		lsr	r3, r3, #4
 1778 08e6 DBB2     		uxtb	r3, r3
 1779 08e8 FB81     		strh	r3, [r7, #14]	@ movhi
1235:../src/stm32f30x_spi.c **** 
1236:../src/stm32f30x_spi.c ****   /* Set the IT mask */
1237:../src/stm32f30x_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1780              		.loc 1 1237 0
 1781 08ea FB89     		ldrh	r3, [r7, #14]
 1782 08ec 4FF00102 		mov	r2, #1
 1783 08f0 02FA03F3 		lsl	r3, r2, r3
 1784 08f4 BB81     		strh	r3, [r7, #12]	@ movhi
1238:../src/stm32f30x_spi.c **** 
1239:../src/stm32f30x_spi.c ****   if (NewState != DISABLE)
 1785              		.loc 1 1239 0
 1786 08f6 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1787 08f8 002B     		cmp	r3, #0
 1788 08fa 08D0     		beq	.L69
1240:../src/stm32f30x_spi.c ****   {
1241:../src/stm32f30x_spi.c ****     /* Enable the selected SPI interrupt */
1242:../src/stm32f30x_spi.c ****     SPIx->CR2 |= itmask;
 1789              		.loc 1 1242 0
 1790 08fc 7B68     		ldr	r3, [r7, #4]
 1791 08fe 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1792 0900 9AB2     		uxth	r2, r3
 1793 0902 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1794 0904 1343     		orrs	r3, r3, r2
 1795 0906 9AB2     		uxth	r2, r3
 1796 0908 7B68     		ldr	r3, [r7, #4]
 1797 090a 9A80     		strh	r2, [r3, #4]	@ movhi
 1798 090c 0AE0     		b	.L68
 1799              	.L69:
1243:../src/stm32f30x_spi.c ****   }
1244:../src/stm32f30x_spi.c ****   else
1245:../src/stm32f30x_spi.c ****   {
1246:../src/stm32f30x_spi.c ****     /* Disable the selected SPI interrupt */
1247:../src/stm32f30x_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1800              		.loc 1 1247 0
 1801 090e 7B68     		ldr	r3, [r7, #4]
 1802 0910 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1803 0912 9AB2     		uxth	r2, r3
 1804 0914 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1805 0916 6FEA0303 		mvn	r3, r3
 1806 091a 9BB2     		uxth	r3, r3
 1807 091c 1340     		ands	r3, r3, r2
 1808 091e 9AB2     		uxth	r2, r3
 1809 0920 7B68     		ldr	r3, [r7, #4]
 1810 0922 9A80     		strh	r2, [r3, #4]	@ movhi
 1811              	.L68:
1248:../src/stm32f30x_spi.c ****   }
1249:../src/stm32f30x_spi.c **** }
 1812              		.loc 1 1249 0
 1813 0924 07F11407 		add	r7, r7, #20
 1814 0928 BD46     		mov	sp, r7
 1815 092a 80BC     		pop	{r7}
 1816 092c 7047     		bx	lr
 1817              		.cfi_endproc
 1818              	.LFE137:
 1820 092e 00BF     		.align	2
 1821              		.global	SPI_GetTransmissionFIFOStatus
 1822              		.thumb
 1823              		.thumb_func
 1825              	SPI_GetTransmissionFIFOStatus:
 1826              	.LFB138:
1250:../src/stm32f30x_spi.c **** 
1251:../src/stm32f30x_spi.c **** /**
1252:../src/stm32f30x_spi.c ****   * @brief  Returns the current SPIx Transmission FIFO filled level.
1253:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1254:../src/stm32f30x_spi.c ****   * @retval The Transmission FIFO filling state.
1255:../src/stm32f30x_spi.c ****   *   - SPI_TransmissionFIFOStatus_Empty: when FIFO is empty
1256:../src/stm32f30x_spi.c ****   *   - SPI_TransmissionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
1257:../src/stm32f30x_spi.c ****   *   - SPI_TransmissionFIFOStatus_HalfFull: if more than 1 half-full.
1258:../src/stm32f30x_spi.c ****   *   - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
1259:../src/stm32f30x_spi.c ****   */
1260:../src/stm32f30x_spi.c **** uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
1261:../src/stm32f30x_spi.c **** {
 1827              		.loc 1 1261 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 8
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832 0930 80B4     		push	{r7}
 1833              	.LCFI81:
 1834              		.cfi_def_cfa_offset 4
 1835              		.cfi_offset 7, -4
 1836 0932 83B0     		sub	sp, sp, #12
 1837              	.LCFI82:
 1838              		.cfi_def_cfa_offset 16
 1839 0934 00AF     		add	r7, sp, #0
 1840              	.LCFI83:
 1841              		.cfi_def_cfa_register 7
 1842 0936 7860     		str	r0, [r7, #4]
1262:../src/stm32f30x_spi.c ****   /* Get the SPIx Transmission FIFO level bits */
1263:../src/stm32f30x_spi.c ****   return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 1843              		.loc 1 1263 0
 1844 0938 7B68     		ldr	r3, [r7, #4]
 1845 093a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1846 093c 9BB2     		uxth	r3, r3
 1847 093e 03F4C053 		and	r3, r3, #6144
 1848 0942 9BB2     		uxth	r3, r3
1264:../src/stm32f30x_spi.c **** }
 1849              		.loc 1 1264 0
 1850 0944 1846     		mov	r0, r3
 1851 0946 07F10C07 		add	r7, r7, #12
 1852 094a BD46     		mov	sp, r7
 1853 094c 80BC     		pop	{r7}
 1854 094e 7047     		bx	lr
 1855              		.cfi_endproc
 1856              	.LFE138:
 1858              		.align	2
 1859              		.global	SPI_GetReceptionFIFOStatus
 1860              		.thumb
 1861              		.thumb_func
 1863              	SPI_GetReceptionFIFOStatus:
 1864              	.LFB139:
1265:../src/stm32f30x_spi.c **** 
1266:../src/stm32f30x_spi.c **** /**
1267:../src/stm32f30x_spi.c ****   * @brief  Returns the current SPIx Reception FIFO filled level.
1268:../src/stm32f30x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
1269:../src/stm32f30x_spi.c ****   * @retval The Reception FIFO filling state.
1270:../src/stm32f30x_spi.c ****   *   - SPI_ReceptionFIFOStatus_Empty: when FIFO is empty
1271:../src/stm32f30x_spi.c ****   *   - SPI_ReceptionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
1272:../src/stm32f30x_spi.c ****   *   - SPI_ReceptionFIFOStatus_HalfFull: if more than 1 half-full.
1273:../src/stm32f30x_spi.c ****   *   - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
1274:../src/stm32f30x_spi.c ****   */
1275:../src/stm32f30x_spi.c **** uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
1276:../src/stm32f30x_spi.c **** {
 1865              		.loc 1 1276 0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 8
 1868              		@ frame_needed = 1, uses_anonymous_args = 0
 1869              		@ link register save eliminated.
 1870 0950 80B4     		push	{r7}
 1871              	.LCFI84:
 1872              		.cfi_def_cfa_offset 4
 1873              		.cfi_offset 7, -4
 1874 0952 83B0     		sub	sp, sp, #12
 1875              	.LCFI85:
 1876              		.cfi_def_cfa_offset 16
 1877 0954 00AF     		add	r7, sp, #0
 1878              	.LCFI86:
 1879              		.cfi_def_cfa_register 7
 1880 0956 7860     		str	r0, [r7, #4]
1277:../src/stm32f30x_spi.c ****   /* Get the SPIx Reception FIFO level bits */
1278:../src/stm32f30x_spi.c ****   return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 1881              		.loc 1 1278 0
 1882 0958 7B68     		ldr	r3, [r7, #4]
 1883 095a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1884 095c 9BB2     		uxth	r3, r3
 1885 095e 03F4C063 		and	r3, r3, #1536
 1886 0962 9BB2     		uxth	r3, r3
1279:../src/stm32f30x_spi.c **** }
 1887              		.loc 1 1279 0
 1888 0964 1846     		mov	r0, r3
 1889 0966 07F10C07 		add	r7, r7, #12
 1890 096a BD46     		mov	sp, r7
 1891 096c 80BC     		pop	{r7}
 1892 096e 7047     		bx	lr
 1893              		.cfi_endproc
 1894              	.LFE139:
 1896              		.align	2
 1897              		.global	SPI_I2S_GetFlagStatus
 1898              		.thumb
 1899              		.thumb_func
 1901              	SPI_I2S_GetFlagStatus:
 1902              	.LFB140:
1280:../src/stm32f30x_spi.c **** 
1281:../src/stm32f30x_spi.c **** /**
1282:../src/stm32f30x_spi.c ****   * @brief  Checks whether the specified SPI flag is set or not.
1283:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1284:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1285:../src/stm32f30x_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1286:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
1287:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1288:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1289:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_BSY: Busy flag.
1290:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_OVR: Overrun flag.
1291:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_MODF: Mode Fault flag.
1292:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_CRCERR: CRC Error flag.
1293:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_FLAG_FRE: TI frame format error flag.
1294:../src/stm32f30x_spi.c ****   *     @arg I2S_FLAG_UDR: Underrun Error flag.
1295:../src/stm32f30x_spi.c ****   *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
1296:../src/stm32f30x_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1297:../src/stm32f30x_spi.c ****   */
1298:../src/stm32f30x_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1299:../src/stm32f30x_spi.c **** {
 1903              		.loc 1 1299 0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 16
 1906              		@ frame_needed = 1, uses_anonymous_args = 0
 1907              		@ link register save eliminated.
 1908 0970 80B4     		push	{r7}
 1909              	.LCFI87:
 1910              		.cfi_def_cfa_offset 4
 1911              		.cfi_offset 7, -4
 1912 0972 85B0     		sub	sp, sp, #20
 1913              	.LCFI88:
 1914              		.cfi_def_cfa_offset 24
 1915 0974 00AF     		add	r7, sp, #0
 1916              	.LCFI89:
 1917              		.cfi_def_cfa_register 7
 1918 0976 7860     		str	r0, [r7, #4]
 1919 0978 0B46     		mov	r3, r1
 1920 097a 7B80     		strh	r3, [r7, #2]	@ movhi
1300:../src/stm32f30x_spi.c ****   FlagStatus bitstatus = RESET;
 1921              		.loc 1 1300 0
 1922 097c 4FF00003 		mov	r3, #0
 1923 0980 FB73     		strb	r3, [r7, #15]
1301:../src/stm32f30x_spi.c ****   /* Check the parameters */
1302:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1303:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1304:../src/stm32f30x_spi.c **** 
1305:../src/stm32f30x_spi.c ****   /* Check the status of the specified SPI flag */
1306:../src/stm32f30x_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1924              		.loc 1 1306 0
 1925 0982 7B68     		ldr	r3, [r7, #4]
 1926 0984 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1927 0986 9AB2     		uxth	r2, r3
 1928 0988 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1929 098a 1340     		ands	r3, r3, r2
 1930 098c 9BB2     		uxth	r3, r3
 1931 098e 002B     		cmp	r3, #0
 1932 0990 03D0     		beq	.L76
1307:../src/stm32f30x_spi.c ****   {
1308:../src/stm32f30x_spi.c ****     /* SPI_I2S_FLAG is set */
1309:../src/stm32f30x_spi.c ****     bitstatus = SET;
 1933              		.loc 1 1309 0
 1934 0992 4FF00103 		mov	r3, #1
 1935 0996 FB73     		strb	r3, [r7, #15]
 1936 0998 02E0     		b	.L77
 1937              	.L76:
1310:../src/stm32f30x_spi.c ****   }
1311:../src/stm32f30x_spi.c ****   else
1312:../src/stm32f30x_spi.c ****   {
1313:../src/stm32f30x_spi.c ****     /* SPI_I2S_FLAG is reset */
1314:../src/stm32f30x_spi.c ****     bitstatus = RESET;
 1938              		.loc 1 1314 0
 1939 099a 4FF00003 		mov	r3, #0
 1940 099e FB73     		strb	r3, [r7, #15]
 1941              	.L77:
1315:../src/stm32f30x_spi.c ****   }
1316:../src/stm32f30x_spi.c ****   /* Return the SPI_I2S_FLAG status */
1317:../src/stm32f30x_spi.c ****   return  bitstatus;
 1942              		.loc 1 1317 0
 1943 09a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1318:../src/stm32f30x_spi.c **** }
 1944              		.loc 1 1318 0
 1945 09a2 1846     		mov	r0, r3
 1946 09a4 07F11407 		add	r7, r7, #20
 1947 09a8 BD46     		mov	sp, r7
 1948 09aa 80BC     		pop	{r7}
 1949 09ac 7047     		bx	lr
 1950              		.cfi_endproc
 1951              	.LFE140:
 1953 09ae 00BF     		.align	2
 1954              		.global	SPI_I2S_ClearFlag
 1955              		.thumb
 1956              		.thumb_func
 1958              	SPI_I2S_ClearFlag:
 1959              	.LFB141:
1319:../src/stm32f30x_spi.c **** 
1320:../src/stm32f30x_spi.c **** /**
1321:../src/stm32f30x_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1322:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1323:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1324:../src/stm32f30x_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1325:../src/stm32f30x_spi.c ****   *   This function clears only CRCERR flag.
1326:../src/stm32f30x_spi.c ****   * @note OVR (OverRun error) flag is cleared by software sequence: a read 
1327:../src/stm32f30x_spi.c ****   *       operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1328:../src/stm32f30x_spi.c ****   *       operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1329:../src/stm32f30x_spi.c ****   * @note MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1330:../src/stm32f30x_spi.c ****   *       operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1331:../src/stm32f30x_spi.c ****   *       write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1332:../src/stm32f30x_spi.c ****   * @retval None
1333:../src/stm32f30x_spi.c ****   */
1334:../src/stm32f30x_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1335:../src/stm32f30x_spi.c **** {
 1960              		.loc 1 1335 0
 1961              		.cfi_startproc
 1962              		@ args = 0, pretend = 0, frame = 8
 1963              		@ frame_needed = 1, uses_anonymous_args = 0
 1964              		@ link register save eliminated.
 1965 09b0 80B4     		push	{r7}
 1966              	.LCFI90:
 1967              		.cfi_def_cfa_offset 4
 1968              		.cfi_offset 7, -4
 1969 09b2 83B0     		sub	sp, sp, #12
 1970              	.LCFI91:
 1971              		.cfi_def_cfa_offset 16
 1972 09b4 00AF     		add	r7, sp, #0
 1973              	.LCFI92:
 1974              		.cfi_def_cfa_register 7
 1975 09b6 7860     		str	r0, [r7, #4]
 1976 09b8 0B46     		mov	r3, r1
 1977 09ba 7B80     		strh	r3, [r7, #2]	@ movhi
1336:../src/stm32f30x_spi.c ****   /* Check the parameters */
1337:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1338:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));
1339:../src/stm32f30x_spi.c **** 
1340:../src/stm32f30x_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1341:../src/stm32f30x_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1978              		.loc 1 1341 0
 1979 09bc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1980 09be 6FEA0303 		mvn	r3, r3
 1981 09c2 9AB2     		uxth	r2, r3
 1982 09c4 7B68     		ldr	r3, [r7, #4]
 1983 09c6 1A81     		strh	r2, [r3, #8]	@ movhi
1342:../src/stm32f30x_spi.c **** }
 1984              		.loc 1 1342 0
 1985 09c8 07F10C07 		add	r7, r7, #12
 1986 09cc BD46     		mov	sp, r7
 1987 09ce 80BC     		pop	{r7}
 1988 09d0 7047     		bx	lr
 1989              		.cfi_endproc
 1990              	.LFE141:
 1992 09d2 00BF     		.align	2
 1993              		.global	SPI_I2S_GetITStatus
 1994              		.thumb
 1995              		.thumb_func
 1997              	SPI_I2S_GetITStatus:
 1998              	.LFB142:
1343:../src/stm32f30x_spi.c **** 
1344:../src/stm32f30x_spi.c **** /**
1345:../src/stm32f30x_spi.c ****   * @brief  Checks whether the specified SPI/I2S interrupt has occurred or not.
1346:../src/stm32f30x_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1347:../src/stm32f30x_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1348:../src/stm32f30x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1349:../src/stm32f30x_spi.c ****   *   This parameter can be one of the following values:
1350:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1351:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1352:../src/stm32f30x_spi.c ****   *     @arg SPI_IT_MODF: Mode Fault interrupt.
1353:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_OVR: Overrun interrupt.
1354:../src/stm32f30x_spi.c ****   *     @arg I2S_IT_UDR: Underrun interrupt.  
1355:../src/stm32f30x_spi.c ****   *     @arg SPI_I2S_IT_FRE: Format Error interrupt.  
1356:../src/stm32f30x_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1357:../src/stm32f30x_spi.c ****   */
1358:../src/stm32f30x_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1359:../src/stm32f30x_spi.c **** {
 1999              		.loc 1 1359 0
 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 16
 2002              		@ frame_needed = 1, uses_anonymous_args = 0
 2003              		@ link register save eliminated.
 2004 09d4 80B4     		push	{r7}
 2005              	.LCFI93:
 2006              		.cfi_def_cfa_offset 4
 2007              		.cfi_offset 7, -4
 2008 09d6 85B0     		sub	sp, sp, #20
 2009              	.LCFI94:
 2010              		.cfi_def_cfa_offset 24
 2011 09d8 00AF     		add	r7, sp, #0
 2012              	.LCFI95:
 2013              		.cfi_def_cfa_register 7
 2014 09da 7860     		str	r0, [r7, #4]
 2015 09dc 0B46     		mov	r3, r1
 2016 09de FB70     		strb	r3, [r7, #3]
1360:../src/stm32f30x_spi.c ****   ITStatus bitstatus = RESET;
 2017              		.loc 1 1360 0
 2018 09e0 4FF00003 		mov	r3, #0
 2019 09e4 FB73     		strb	r3, [r7, #15]
1361:../src/stm32f30x_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 2020              		.loc 1 1361 0
 2021 09e6 4FF00003 		mov	r3, #0
 2022 09ea BB81     		strh	r3, [r7, #12]	@ movhi
 2023 09ec 4FF00003 		mov	r3, #0
 2024 09f0 7B81     		strh	r3, [r7, #10]	@ movhi
 2025 09f2 4FF00003 		mov	r3, #0
 2026 09f6 3B81     		strh	r3, [r7, #8]	@ movhi
1362:../src/stm32f30x_spi.c **** 
1363:../src/stm32f30x_spi.c ****   /* Check the parameters */
1364:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1365:../src/stm32f30x_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1366:../src/stm32f30x_spi.c **** 
1367:../src/stm32f30x_spi.c ****   /* Get the SPI_I2S_IT index */
1368:../src/stm32f30x_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 2027              		.loc 1 1368 0
 2028 09f8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2029 09fa 03F00F03 		and	r3, r3, #15
 2030 09fe 4FF00102 		mov	r2, #1
 2031 0a02 02FA03F3 		lsl	r3, r2, r3
 2032 0a06 BB81     		strh	r3, [r7, #12]	@ movhi
1369:../src/stm32f30x_spi.c **** 
1370:../src/stm32f30x_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1371:../src/stm32f30x_spi.c ****   itmask = SPI_I2S_IT >> 4;
 2033              		.loc 1 1371 0
 2034 0a08 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2035 0a0a 4FEA1313 		lsr	r3, r3, #4
 2036 0a0e DBB2     		uxtb	r3, r3
 2037 0a10 7B81     		strh	r3, [r7, #10]	@ movhi
1372:../src/stm32f30x_spi.c **** 
1373:../src/stm32f30x_spi.c ****   /* Set the IT mask */
1374:../src/stm32f30x_spi.c ****   itmask = 0x01 << itmask;
 2038              		.loc 1 1374 0
 2039 0a12 7B89     		ldrh	r3, [r7, #10]
 2040 0a14 4FF00102 		mov	r2, #1
 2041 0a18 02FA03F3 		lsl	r3, r2, r3
 2042 0a1c 7B81     		strh	r3, [r7, #10]	@ movhi
1375:../src/stm32f30x_spi.c **** 
1376:../src/stm32f30x_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1377:../src/stm32f30x_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 2043              		.loc 1 1377 0
 2044 0a1e 7B68     		ldr	r3, [r7, #4]
 2045 0a20 9B88     		ldrh	r3, [r3, #4]	@ movhi
 2046 0a22 9AB2     		uxth	r2, r3
 2047 0a24 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2048 0a26 1340     		ands	r3, r3, r2
 2049 0a28 3B81     		strh	r3, [r7, #8]	@ movhi
1378:../src/stm32f30x_spi.c **** 
1379:../src/stm32f30x_spi.c ****   /* Check the status of the specified SPI interrupt */
1380:../src/stm32f30x_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 2050              		.loc 1 1380 0
 2051 0a2a 7B68     		ldr	r3, [r7, #4]
 2052 0a2c 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2053 0a2e 9AB2     		uxth	r2, r3
 2054 0a30 BB89     		ldrh	r3, [r7, #12]	@ movhi
 2055 0a32 1340     		ands	r3, r3, r2
 2056 0a34 9BB2     		uxth	r3, r3
 2057 0a36 002B     		cmp	r3, #0
 2058 0a38 06D0     		beq	.L81
 2059              		.loc 1 1380 0 is_stmt 0 discriminator 1
 2060 0a3a 3B89     		ldrh	r3, [r7, #8]
 2061 0a3c 002B     		cmp	r3, #0
 2062 0a3e 03D0     		beq	.L81
1381:../src/stm32f30x_spi.c ****   {
1382:../src/stm32f30x_spi.c ****     /* SPI_I2S_IT is set */
1383:../src/stm32f30x_spi.c ****     bitstatus = SET;
 2063              		.loc 1 1383 0 is_stmt 1
 2064 0a40 4FF00103 		mov	r3, #1
 2065 0a44 FB73     		strb	r3, [r7, #15]
 2066 0a46 02E0     		b	.L82
 2067              	.L81:
1384:../src/stm32f30x_spi.c ****   }
1385:../src/stm32f30x_spi.c ****   else
1386:../src/stm32f30x_spi.c ****   {
1387:../src/stm32f30x_spi.c ****     /* SPI_I2S_IT is reset */
1388:../src/stm32f30x_spi.c ****     bitstatus = RESET;
 2068              		.loc 1 1388 0
 2069 0a48 4FF00003 		mov	r3, #0
 2070 0a4c FB73     		strb	r3, [r7, #15]
 2071              	.L82:
1389:../src/stm32f30x_spi.c ****   }
1390:../src/stm32f30x_spi.c ****   /* Return the SPI_I2S_IT status */
1391:../src/stm32f30x_spi.c ****   return bitstatus;
 2072              		.loc 1 1391 0
 2073 0a4e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1392:../src/stm32f30x_spi.c **** }
 2074              		.loc 1 1392 0
 2075 0a50 1846     		mov	r0, r3
 2076 0a52 07F11407 		add	r7, r7, #20
 2077 0a56 BD46     		mov	sp, r7
 2078 0a58 80BC     		pop	{r7}
 2079 0a5a 7047     		bx	lr
 2080              		.cfi_endproc
 2081              	.LFE142:
 2083              	.Letext0:
 2084              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2085              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2086              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_rcc.h"
 2087              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_spi.h"
 2088              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f30x_spi.c
     /tmp/ccGXjBSN.s:20     .text:00000000 $t
     /tmp/ccGXjBSN.s:25     .text:00000000 SPI_I2S_DeInit
     /tmp/ccGXjBSN.s:103    .text:00000088 SPI_StructInit
     /tmp/ccGXjBSN.s:170    .text:000000e4 SPI_Init
     /tmp/ccGXjBSN.s:358    .text:000001fc I2S_StructInit
     /tmp/ccGXjBSN.s:413    .text:00000240 I2S_Init
     /tmp/ccGXjBSN.s:628    .text:000003ec SPI_Cmd
     /tmp/ccGXjBSN.s:684    .text:0000042c SPI_TIModeCmd
     /tmp/ccGXjBSN.s:740    .text:0000046c I2S_Cmd
     /tmp/ccGXjBSN.s:796    .text:000004ac SPI_DataSizeConfig
     /tmp/ccGXjBSN.s:849    .text:000004e4 SPI_RxFIFOThresholdConfig
     /tmp/ccGXjBSN.s:899    .text:0000051c SPI_BiDirectionalLineConfig
     /tmp/ccGXjBSN.s:955    .text:0000055c SPI_NSSInternalSoftwareConfig
     /tmp/ccGXjBSN.s:1012   .text:000005a0 I2S_FullDuplexConfig
     /tmp/ccGXjBSN.s:1123   .text:00000644 SPI_SSOutputCmd
     /tmp/ccGXjBSN.s:1179   .text:00000684 SPI_NSSPulseModeCmd
     /tmp/ccGXjBSN.s:1235   .text:000006c4 SPI_SendData8
     /tmp/ccGXjBSN.s:1282   .text:000006f4 SPI_I2S_SendData16
     /tmp/ccGXjBSN.s:1319   .text:00000710 SPI_ReceiveData8
     /tmp/ccGXjBSN.s:1365   .text:0000073c SPI_I2S_ReceiveData16
     /tmp/ccGXjBSN.s:1401   .text:00000758 SPI_CRCLengthConfig
     /tmp/ccGXjBSN.s:1451   .text:00000790 SPI_CalculateCRC
     /tmp/ccGXjBSN.s:1507   .text:000007d0 SPI_TransmitCRC
     /tmp/ccGXjBSN.s:1546   .text:000007f4 SPI_GetCRC
     /tmp/ccGXjBSN.s:1600   .text:00000828 SPI_GetCRCPolynomial
     /tmp/ccGXjBSN.s:1636   .text:00000844 SPI_I2S_DMACmd
     /tmp/ccGXjBSN.s:1698   .text:0000088c SPI_LastDMATransferCmd
     /tmp/ccGXjBSN.s:1748   .text:000008c4 SPI_I2S_ITConfig
     /tmp/ccGXjBSN.s:1825   .text:00000930 SPI_GetTransmissionFIFOStatus
     /tmp/ccGXjBSN.s:1863   .text:00000950 SPI_GetReceptionFIFOStatus
     /tmp/ccGXjBSN.s:1901   .text:00000970 SPI_I2S_GetFlagStatus
     /tmp/ccGXjBSN.s:1958   .text:000009b0 SPI_I2S_ClearFlag
     /tmp/ccGXjBSN.s:1997   .text:000009d4 SPI_I2S_GetITStatus
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.743cd71370ebc432b539c5dba7924ecc
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.cf7c793e178943e1bbf613f1b21cd51a
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
