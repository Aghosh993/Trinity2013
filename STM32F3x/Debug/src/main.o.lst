   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.cpp"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	led_iter
  21              		.bss
  22              		.align	2
  25              	led_iter:
  26 0000 00000000 		.space	4
  27              		.global	led_matrix
  28              		.data
  29              		.align	2
  32              	led_matrix:
  33 0000 00020000 		.word	512
  34 0004 00010000 		.word	256
  35 0008 00800000 		.word	32768
  36 000c 00400000 		.word	16384
  37 0010 00200000 		.word	8192
  38 0014 00100000 		.word	4096
  39 0018 00080000 		.word	2048
  40 001c 00040000 		.word	1024
  41              		.global	left_enc
  42              		.bss
  43              		.align	2
  46              	left_enc:
  47 0004 00000000 		.space	40
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.global	right_enc
  49              		.align	2
  52              	right_enc:
  53 002c 00000000 		.space	40
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.global	gyro_angle_x
  55              		.align	2
  58              	gyro_angle_x:
  59 0054 00000000 		.space	4
  60              		.global	gyro_bias_x
  61              		.align	2
  64              	gyro_bias_x:
  65 0058 00000000 		.space	4
  66              		.global	adcval
  67              		.align	2
  70              	adcval:
  71 005c 00000000 		.space	4
  72              		.global	adcData
  73              		.align	2
  76              	adcData:
  77 0060 00000000 		.space	8
  77      00000000 
  78              		.global	new_data
  79              		.align	2
  82              	new_data:
  83 0068 00000000 		.space	4
  84              		.global	adc2_data
  85              		.align	2
  88              	adc2_data:
  89 006c 00000000 		.space	16
  89      00000000 
  89      00000000 
  89      00000000 
  90              		.global	adc2_new_data
  93              	adc2_new_data:
  94 007c 00       		.space	1
  95              		.global	adc3_awd1
  98              	adc3_awd1:
  99 007d 00       		.space	1
 100              		.global	adc3_awd2
 103              	adc3_awd2:
 104 007e 00       		.space	1
 105              		.global	count
 106 007f 00       		.align	2
 109              	count:
 110 0080 00000000 		.space	4
 111              		.global	stage
 112              		.align	2
 115              	stage:
 116 0084 00000000 		.space	4
 117              		.section	.rodata
 118              		.align	2
 119              	.LC0:
 120 0000 25642043 		.ascii	"%d Counter: %d\012\015\000"
 120      6F756E74 
 120      65723A20 
 120      25640A0D 
 120      00
 121              		.text
 122              		.align	2
 123              		.global	main
 124              		.thumb
 125              		.thumb_func
 127              	main:
 128              	.LFB111:
 129              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  18:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  19:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  20:../src/main.cpp ****  *
  21:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  22:../src/main.cpp ****  *
  23:../src/main.cpp ****  * TIM6: LED matrix ISR
  24:../src/main.cpp ****  * TIM7: Encoder update ISR
  25:../src/main.cpp ****  * TIM17: IMU update ISR
  26:../src/main.cpp ****  *
  27:../src/main.cpp ****  * Other pins/resources used:
  28:../src/main.cpp ****  *
  29:../src/main.cpp ****  * Analog: 	Channel 3 (PA2)
  30:../src/main.cpp ****  * 			Channel 4 (PA3)
  31:../src/main.cpp ****  * 			Channel 5 (PF4)
  32:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  33:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  34:../src/main.cpp ****  *
  35:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  36:../src/main.cpp ****  *
  37:../src/main.cpp ****  */
  38:../src/main.cpp **** 
  39:../src/main.cpp **** /*
  40:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  41:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  42:../src/main.cpp ****  */
  43:../src/main.cpp **** 
  44:../src/main.cpp **** volatile int led_iter;
  45:../src/main.cpp **** volatile int led_matrix[8] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_14, GPIO_Pin_13,
  46:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  47:../src/main.cpp **** 
  48:../src/main.cpp **** void imu_update_ISR_init(void);
  49:../src/main.cpp **** int16_t calc_gyro_bias(void);
  50:../src/main.cpp **** 
  51:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  52:../src/main.cpp **** 
  53:../src/main.cpp **** void adc1_init_DMA(void);
  54:../src/main.cpp **** void adc2_init_DMA(void);
  55:../src/main.cpp **** void battery_watchdog_init(void);
  56:../src/main.cpp **** void adc1_init(void);
  57:../src/main.cpp **** 
  58:../src/main.cpp **** void brake_pins_init(void);
  59:../src/main.cpp **** 
  60:../src/main.cpp **** void ping_pin_init(void);
  61:../src/main.cpp **** void timer2_timebase_init(void);
  62:../src/main.cpp **** 
  63:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  64:../src/main.cpp **** 
  65:../src/main.cpp **** encoderState left_enc, right_enc;
  66:../src/main.cpp **** 
  67:../src/main.cpp **** volatile float gyro_angle_x;
  68:../src/main.cpp **** int gyro_bias_x, adcval;
  69:../src/main.cpp **** 
  70:../src/main.cpp **** //__IO uint16_t adcData[3];
  71:../src/main.cpp **** __IO uint32_t adcData[2];
  72:../src/main.cpp **** int new_data;
  73:../src/main.cpp **** 
  74:../src/main.cpp **** __IO uint32_t adc2_data[4];
  75:../src/main.cpp **** uint8_t adc2_new_data;
  76:../src/main.cpp **** 
  77:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
  78:../src/main.cpp **** 
  79:../src/main.cpp **** int count, stage;
  80:../src/main.cpp **** 
  81:../src/main.cpp **** // Initialize all encoder data structures to zero:
  82:../src/main.cpp **** 
  83:../src/main.cpp **** int main(void)
  84:../src/main.cpp **** {
 130              		.loc 1 84 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 8
 133              		@ frame_needed = 1, uses_anonymous_args = 0
 134 0000 90B5     		push	{r4, r7, lr}
 135              	.LCFI0:
 136              		.cfi_def_cfa_offset 12
 137              		.cfi_offset 4, -12
 138              		.cfi_offset 7, -8
 139              		.cfi_offset 14, -4
 140 0002 83B0     		sub	sp, sp, #12
 141              	.LCFI1:
 142              		.cfi_def_cfa_offset 24
 143 0004 00AF     		add	r7, sp, #0
 144              	.LCFI2:
 145              		.cfi_def_cfa_register 7
 146              	.LBB2:
  85:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 147              		.loc 1 85 0
 148 0006 FFF7FEFF 		bl	SystemInit
  86:../src/main.cpp **** 
  87:../src/main.cpp **** 	UART1_init(); // Debug bridge
 149              		.loc 1 87 0
 150 000a FFF7FEFF 		bl	_Z10UART1_initv
  88:../src/main.cpp **** 
  89:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
  90:../src/main.cpp **** 
  91:../src/main.cpp **** 	adcData[0] = 0;
 151              		.loc 1 91 0
 152 000e 40F20003 		movw	r3, #:lower16:adcData
 153 0012 C0F20003 		movt	r3, #:upper16:adcData
 154 0016 4FF00002 		mov	r2, #0
 155 001a 1A60     		str	r2, [r3, #0]
  92:../src/main.cpp **** 	adcData[1] = 0;
 156              		.loc 1 92 0
 157 001c 40F20003 		movw	r3, #:lower16:adcData
 158 0020 C0F20003 		movt	r3, #:upper16:adcData
 159 0024 4FF00002 		mov	r2, #0
 160 0028 5A60     		str	r2, [r3, #4]
  93:../src/main.cpp **** 
  94:../src/main.cpp **** 	uint8_t iter = 0;
 161              		.loc 1 94 0
 162 002a 4FF00003 		mov	r3, #0
 163 002e FB71     		strb	r3, [r7, #7]
  95:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 164              		.loc 1 95 0
 165 0030 4FF00003 		mov	r3, #0
 166 0034 FB71     		strb	r3, [r7, #7]
 167 0036 0CE0     		b	.L2
 168              	.L3:
  96:../src/main.cpp **** 	{
  97:../src/main.cpp **** 		adc2_data[iter] = 0;
 169              		.loc 1 97 0 discriminator 2
 170 0038 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 171 003a 40F20003 		movw	r3, #:lower16:adc2_data
 172 003e C0F20003 		movt	r3, #:upper16:adc2_data
 173 0042 4FF00001 		mov	r1, #0
 174 0046 43F82210 		str	r1, [r3, r2, lsl #2]
  95:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 175              		.loc 1 95 0 discriminator 2
 176 004a FB79     		ldrb	r3, [r7, #7]
 177 004c 03F10103 		add	r3, r3, #1
 178 0050 FB71     		strb	r3, [r7, #7]
 179              	.L2:
  95:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 180              		.loc 1 95 0 is_stmt 0 discriminator 1
 181 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 182 0054 062B     		cmp	r3, #6
 183 0056 8CBF     		ite	hi
 184 0058 0023     		movhi	r3, #0
 185 005a 0123     		movls	r3, #1
 186 005c DBB2     		uxtb	r3, r3
 187 005e 002B     		cmp	r3, #0
 188 0060 EAD1     		bne	.L3
  98:../src/main.cpp **** 	}
  99:../src/main.cpp **** 
 100:../src/main.cpp **** 	adc3_awd1 = 0;
 189              		.loc 1 100 0 is_stmt 1
 190 0062 40F20003 		movw	r3, #:lower16:adc3_awd1
 191 0066 C0F20003 		movt	r3, #:upper16:adc3_awd1
 192 006a 4FF00002 		mov	r2, #0
 193 006e 1A70     		strb	r2, [r3, #0]
 101:../src/main.cpp **** 	adc3_awd2 = 0;
 194              		.loc 1 101 0
 195 0070 40F20003 		movw	r3, #:lower16:adc3_awd2
 196 0074 C0F20003 		movt	r3, #:upper16:adc3_awd2
 197 0078 4FF00002 		mov	r2, #0
 198 007c 1A70     		strb	r2, [r3, #0]
 102:../src/main.cpp **** 
 103:../src/main.cpp **** 	count = 0;
 199              		.loc 1 103 0
 200 007e 40F20003 		movw	r3, #:lower16:count
 201 0082 C0F20003 		movt	r3, #:upper16:count
 202 0086 4FF00002 		mov	r2, #0
 203 008a 1A60     		str	r2, [r3, #0]
 104:../src/main.cpp **** 	stage = 0;
 204              		.loc 1 104 0
 205 008c 40F20003 		movw	r3, #:lower16:stage
 206 0090 C0F20003 		movt	r3, #:upper16:stage
 207 0094 4FF00002 		mov	r2, #0
 208 0098 1A60     		str	r2, [r3, #0]
 105:../src/main.cpp **** 
 106:../src/main.cpp **** 	/*
 107:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 108:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 109:../src/main.cpp **** 	 */
 110:../src/main.cpp **** 
 111:../src/main.cpp **** 
 112:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 209              		.loc 1 112 0
 210 009a 40F20000 		movw	r0, #:lower16:left_enc
 211 009e C0F20000 		movt	r0, #:upper16:left_enc
 212 00a2 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 113:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 213              		.loc 1 113 0
 214 00a6 40F20000 		movw	r0, #:lower16:right_enc
 215 00aa C0F20000 		movt	r0, #:upper16:right_enc
 216 00ae FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 114:../src/main.cpp **** 
 115:../src/main.cpp **** 	right_enc.position_target = 8400;
 217              		.loc 1 115 0
 218 00b2 40F20003 		movw	r3, #:lower16:right_enc
 219 00b6 C0F20003 		movt	r3, #:upper16:right_enc
 220 00ba 42F2D002 		movw	r2, #8400
 221 00be DA60     		str	r2, [r3, #12]
 116:../src/main.cpp ****  //	right_enc.speed_target = 8400;
 117:../src/main.cpp **** 
 118:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 119:../src/main.cpp **** 
 120:../src/main.cpp **** 	brake_pins_init();
 222              		.loc 1 120 0
 223 00c0 FFF7FEFF 		bl	_Z15brake_pins_initv
 121:../src/main.cpp **** 	pwm_out1_init(1000);
 224              		.loc 1 121 0
 225 00c4 4FF47A70 		mov	r0, #1000
 226 00c8 FFF7FEFF 		bl	_Z13pwm_out1_initt
 122:../src/main.cpp **** 	pwm_out2_init(1000);
 227              		.loc 1 122 0
 228 00cc 4FF47A70 		mov	r0, #1000
 229 00d0 FFF7FEFF 		bl	_Z13pwm_out2_initt
 123:../src/main.cpp **** 
 124:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 125:../src/main.cpp **** 
 126:../src/main.cpp **** 	TIM8_init_encoder();
 230              		.loc 1 126 0
 231 00d4 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 127:../src/main.cpp **** 	TIM4_init_encoder();
 232              		.loc 1 127 0
 233 00d8 FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 128:../src/main.cpp **** 
 129:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 130:../src/main.cpp **** 
 131:../src/main.cpp **** 	new_data = 0;
 234              		.loc 1 131 0
 235 00dc 40F20003 		movw	r3, #:lower16:new_data
 236 00e0 C0F20003 		movt	r3, #:upper16:new_data
 237 00e4 4FF00002 		mov	r2, #0
 238 00e8 1A60     		str	r2, [r3, #0]
 132:../src/main.cpp **** 	adc2_new_data = 0;
 239              		.loc 1 132 0
 240 00ea 40F20003 		movw	r3, #:lower16:adc2_new_data
 241 00ee C0F20003 		movt	r3, #:upper16:adc2_new_data
 242 00f2 4FF00002 		mov	r2, #0
 243 00f6 1A70     		strb	r2, [r3, #0]
 133:../src/main.cpp **** 
 134:../src/main.cpp **** 	// Initialize ADC1 DMA:
 135:../src/main.cpp **** 	adc1_init_DMA();
 244              		.loc 1 135 0
 245 00f8 FFF7FEFF 		bl	_Z13adc1_init_DMAv
 136:../src/main.cpp **** 
 137:../src/main.cpp **** 	// Initialize ADC2 DMA:
 138:../src/main.cpp **** //	adc2_init_DMA();
 139:../src/main.cpp **** //	battery_watchdog_init();
 140:../src/main.cpp **** 
 141:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 246              		.loc 1 141 0
 247 00fc FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 142:../src/main.cpp **** //	imu_update_ISR_init(); 		//IMU (gyro/acclerometer/magnetometer ISR)
 143:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 248              		.loc 1 143 0
 249 0100 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 144:../src/main.cpp **** 
 145:../src/main.cpp **** 	// Ping Sensor Init:
 146:../src/main.cpp **** 
 147:../src/main.cpp **** 	ping_pin_init();
 250              		.loc 1 147 0
 251 0104 FFF7FEFF 		bl	_Z13ping_pin_initv
 148:../src/main.cpp **** 	timer2_timebase_init();
 252              		.loc 1 148 0
 253 0108 FFF7FEFF 		bl	_Z20timer2_timebase_initv
 149:../src/main.cpp **** 
 150:../src/main.cpp **** 	imu_update_ISR_init();
 254              		.loc 1 150 0
 255 010c FFF7FEFF 		bl	_Z19imu_update_ISR_initv
 151:../src/main.cpp **** 
 152:../src/main.cpp **** 	adcval = 0;
 256              		.loc 1 152 0
 257 0110 40F20003 		movw	r3, #:lower16:adcval
 258 0114 C0F20003 		movt	r3, #:upper16:adcval
 259 0118 4FF00002 		mov	r2, #0
 260 011c 1A60     		str	r2, [r3, #0]
 153:../src/main.cpp **** 	float mtr_out = 0;
 261              		.loc 1 153 0
 262 011e 4FF00003 		mov	r3, #0
 263 0122 3B60     		str	r3, [r7, #0]	@ float
 264              	.L4:
 154:../src/main.cpp **** 	char *mode;
 155:../src/main.cpp **** 
 156:../src/main.cpp **** //	right_enc.m = MODE_POSITION;
 157:../src/main.cpp **** 
 158:../src/main.cpp **** 	while(true)
 159:../src/main.cpp **** 	{
 160:../src/main.cpp **** //		pwm2_output(0.5f);						// Fixed 1 kHz, 50% duty output on PWM output #2
 161:../src/main.cpp **** 
 162:../src/main.cpp **** 		// Debug Statements:
 163:../src/main.cpp **** 
 164:../src/main.cpp **** //		printf("%d %d %d\n\r", adcData[0], adcData[1], adcval);
 165:../src/main.cpp **** //		printf("%d\n\r", adcval);
 166:../src/main.cpp **** //		if(right_enc.m == MODE_OPENLOOP)
 167:../src/main.cpp **** //		{
 168:../src/main.cpp **** //			pwm1_output(0.50f);
 169:../src/main.cpp **** //		}
 170:../src/main.cpp **** 
 171:../src/main.cpp **** //		mode = (right_enc.m == MODE_OPENLOOP) ? (char *)"Open" : ((right_enc.m == MODE_POSITION) ? (cha
 172:../src/main.cpp **** //		GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 173:../src/main.cpp **** //		GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 174:../src/main.cpp **** 		mtr_out = 0.6;//(float)adcData[0]/(float)4096;
 265              		.loc 1 174 0 discriminator 1
 266 0124 49F69A13 		movw	r3, #39322
 267 0128 C3F61973 		movt	r3, 16153
 268 012c 3B60     		str	r3, [r7, #0]	@ float
 175:../src/main.cpp **** 		pwm1_output(0.75);//mtr_out);
 269              		.loc 1 175 0 discriminator 1
 270 012e B6EE080A 		fconsts	s0, #104
 271 0132 FFF7FEFF 		bl	_Z11pwm1_outputf
 176:../src/main.cpp **** 		pwm2_output(0.25);//1-mtr_out);
 272              		.loc 1 176 0 discriminator 1
 273 0136 B5EE000A 		fconsts	s0, #80
 274 013a FFF7FEFF 		bl	_Z11pwm2_outputf
 177:../src/main.cpp **** //		printf("Left: %d | Right: %d\n\r", left_enc.position, right_enc.position);//, mode);
 178:../src/main.cpp **** 		printf("%d Counter: %d\n\r", count, TIM_GetCounter(TIM2));
 275              		.loc 1 178 0 discriminator 1
 276 013e 40F20003 		movw	r3, #:lower16:count
 277 0142 C0F20003 		movt	r3, #:upper16:count
 278 0146 1C68     		ldr	r4, [r3, #0]
 279 0148 4FF08040 		mov	r0, #1073741824
 280 014c FFF7FEFF 		bl	TIM_GetCounter
 281 0150 0346     		mov	r3, r0
 282 0152 40F20000 		movw	r0, #:lower16:.LC0
 283 0156 C0F20000 		movt	r0, #:upper16:.LC0
 284 015a 2146     		mov	r1, r4
 285 015c 1A46     		mov	r2, r3
 286 015e FFF7FEFF 		bl	printf
 158:../src/main.cpp **** 	while(true)
 287              		.loc 1 158 0 discriminator 1
 288 0162 DFE7     		b	.L4
 289              	.LBE2:
 290              		.cfi_endproc
 291              	.LFE111:
 293              		.align	2
 294              		.global	_Z19imu_update_ISR_initv
 295              		.thumb
 296              		.thumb_func
 298              	_Z19imu_update_ISR_initv:
 299              	.LFB112:
 179:../src/main.cpp **** 
 180:../src/main.cpp **** //		printf("Bias_x: %d | Theta_x: %5.2f | Left: %d | Right: %d\n\r", gyro_bias_x, gyro_angle_x, lef
 181:../src/main.cpp **** //		printf("ADC Value on Channel 3: %d || Theta_x: %5.2f\n\r", adcval, gyro_angle_x);
 182:../src/main.cpp **** //		while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) != SET);
 183:../src/main.cpp **** //		DMA_ClearFlag(DMA1_FLAG_GL1 | DMA1_FLAG_TC1);
 184:../src/main.cpp **** 
 185:../src/main.cpp **** 		/*
 186:../src/main.cpp **** 		while(new_data==0);
 187:../src/main.cpp **** 		printf("ADC1: %4d || ADC2: %4d\n\r", adcData[0], adcData[1]);//adcData, (uint32_t)&(ADC1->DR));//
 188:../src/main.cpp **** 		new_data = 0;
 189:../src/main.cpp **** 		*/
 190:../src/main.cpp **** 		/*
 191:../src/main.cpp **** 		printf("ADC1: ");
 192:../src/main.cpp **** 		while(new_data==0);
 193:../src/main.cpp **** 		for(iter=0;iter<2;++iter)
 194:../src/main.cpp **** 		{
 195:../src/main.cpp **** 			printf("%4d ", adcData[iter]);
 196:../src/main.cpp **** 		}
 197:../src/main.cpp **** 
 198:../src/main.cpp **** 		pwm1_output((float)adcData[0]/(float)4096);
 199:../src/main.cpp **** 
 200:../src/main.cpp **** 		printf("ADC2: ");
 201:../src/main.cpp **** 		while(adc2_new_data==0);
 202:../src/main.cpp **** 		for(iter=0;iter<4;++iter)
 203:../src/main.cpp **** 		{
 204:../src/main.cpp **** 			printf("%4d ", adc2_data[iter]);
 205:../src/main.cpp **** 		}
 206:../src/main.cpp **** 		printf("AWD1: %d, AWD2: %d, ADC: %d", adc3_awd1, adc3_awd2, ADC_GetConversionValue(ADC3));
 207:../src/main.cpp **** //		adc3_awd1 = 0;
 208:../src/main.cpp **** //		adc3_awd2 = 0;
 209:../src/main.cpp **** 		printf("\n\r");
 210:../src/main.cpp **** 		*/
 211:../src/main.cpp **** 	}
 212:../src/main.cpp **** 	return 0; // We should never manage to get here...
 213:../src/main.cpp **** }
 214:../src/main.cpp **** 
 215:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 216:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 217:../src/main.cpp **** 
 218:../src/main.cpp **** void imu_update_ISR_init(void)
 219:../src/main.cpp **** {
 300              		.loc 1 219 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 24
 303              		@ frame_needed = 1, uses_anonymous_args = 0
 304 0164 80B5     		push	{r7, lr}
 305              	.LCFI3:
 306              		.cfi_def_cfa_offset 8
 307              		.cfi_offset 7, -8
 308              		.cfi_offset 14, -4
 309 0166 86B0     		sub	sp, sp, #24
 310              	.LCFI4:
 311              		.cfi_def_cfa_offset 32
 312 0168 00AF     		add	r7, sp, #0
 313              	.LCFI5:
 314              		.cfi_def_cfa_register 7
 315              	.LBB3:
 220:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 221:../src/main.cpp **** 
 222:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 316              		.loc 1 222 0
 317 016a 4FF00703 		mov	r3, #7
 318 016e BB74     		strb	r3, [r7, #18]
 223:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 319              		.loc 1 223 0
 320 0170 4FF00003 		mov	r3, #0
 321 0174 FB74     		strb	r3, [r7, #19]
 224:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 322              		.loc 1 224 0
 323 0176 4FF00003 		mov	r3, #0
 324 017a 3B75     		strb	r3, [r7, #20]
 225:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 325              		.loc 1 225 0
 326 017c 4FF00003 		mov	r3, #0
 327 0180 7B75     		strb	r3, [r7, #21]
 226:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 328              		.loc 1 226 0
 329 0182 4FF00003 		mov	r3, #0
 330 0186 BB75     		strb	r3, [r7, #22]
 227:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 331              		.loc 1 227 0
 332 0188 4FF00003 		mov	r3, #0
 333 018c 7B74     		strb	r3, [r7, #17]
 228:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 334              		.loc 1 228 0
 335 018e 4FF00803 		mov	r3, #8
 336 0192 3B74     		strb	r3, [r7, #16]
 229:../src/main.cpp **** 
 230:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 337              		.loc 1 230 0
 338 0194 07F11003 		add	r3, r7, #16
 339 0198 1846     		mov	r0, r3
 340 019a FFF7FEFF 		bl	L3GD20_Init
 231:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 341              		.loc 1 231 0
 342 019e FFF7FEFF 		bl	_Z14calc_gyro_biasv
 343 01a2 0346     		mov	r3, r0
 344 01a4 1A46     		mov	r2, r3
 345 01a6 40F20003 		movw	r3, #:lower16:gyro_bias_x
 346 01aa C0F20003 		movt	r3, #:upper16:gyro_bias_x
 347 01ae 1A60     		str	r2, [r3, #0]
 232:../src/main.cpp **** 
 233:../src/main.cpp **** 	gyro_angle_x = 0;
 348              		.loc 1 233 0
 349 01b0 40F20003 		movw	r3, #:lower16:gyro_angle_x
 350 01b4 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 351 01b8 4FF00002 		mov	r2, #0
 352 01bc 1A60     		str	r2, [r3, #0]	@ float
 234:../src/main.cpp **** 
 235:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 236:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 237:../src/main.cpp **** 
 238:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 353              		.loc 1 238 0
 354 01be 4FF01A03 		mov	r3, #26
 355 01c2 3B73     		strb	r3, [r7, #12]
 239:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 356              		.loc 1 239 0
 357 01c4 4FF00003 		mov	r3, #0
 358 01c8 7B73     		strb	r3, [r7, #13]
 240:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 359              		.loc 1 240 0
 360 01ca 4FF00003 		mov	r3, #0
 361 01ce BB73     		strb	r3, [r7, #14]
 241:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 362              		.loc 1 241 0
 363 01d0 4FF00103 		mov	r3, #1
 364 01d4 FB73     		strb	r3, [r7, #15]
 242:../src/main.cpp **** 
 243:../src/main.cpp **** 	NVIC_Init(&nv);
 365              		.loc 1 243 0
 366 01d6 07F10C03 		add	r3, r7, #12
 367 01da 1846     		mov	r0, r3
 368 01dc FFF7FEFF 		bl	NVIC_Init
 244:../src/main.cpp **** 
 245:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 369              		.loc 1 245 0
 370 01e0 4FF48020 		mov	r0, #262144
 371 01e4 4FF00101 		mov	r1, #1
 372 01e8 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 246:../src/main.cpp **** 
 247:../src/main.cpp **** 	/*
 248:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 249:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 250:../src/main.cpp **** 	 * 	  Period -> ARR
 251:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 252:../src/main.cpp **** 	 */
 253:../src/main.cpp **** 
 254:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 373              		.loc 1 254 0
 374 01ec 40F28F13 		movw	r3, #399
 375 01f0 7B60     		str	r3, [r7, #4]
 255:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 376              		.loc 1 255 0
 377 01f2 41F61F43 		movw	r3, #7199
 378 01f6 3B80     		strh	r3, [r7, #0]	@ movhi
 256:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 379              		.loc 1 256 0
 380 01f8 4FF00003 		mov	r3, #0
 381 01fc BB72     		strb	r3, [r7, #10]
 257:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 382              		.loc 1 257 0
 383 01fe 4FF00003 		mov	r3, #0
 384 0202 3B81     		strh	r3, [r7, #8]	@ movhi
 258:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 385              		.loc 1 258 0
 386 0204 4FF00003 		mov	r3, #0
 387 0208 7B80     		strh	r3, [r7, #2]	@ movhi
 259:../src/main.cpp **** 
 260:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 388              		.loc 1 260 0
 389 020a 3B46     		mov	r3, r7
 390 020c 4FF49040 		mov	r0, #18432
 391 0210 C4F20100 		movt	r0, 16385
 392 0214 1946     		mov	r1, r3
 393 0216 FFF7FEFF 		bl	TIM_TimeBaseInit
 261:../src/main.cpp **** 
 262:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 394              		.loc 1 262 0
 395 021a 4FF49040 		mov	r0, #18432
 396 021e C4F20100 		movt	r0, 16385
 397 0222 4FF00101 		mov	r1, #1
 398 0226 4FF00102 		mov	r2, #1
 399 022a FFF7FEFF 		bl	TIM_ITConfig
 263:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 400              		.loc 1 263 0
 401 022e 4FF49040 		mov	r0, #18432
 402 0232 C4F20100 		movt	r0, 16385
 403 0236 4FF00101 		mov	r1, #1
 404 023a FFF7FEFF 		bl	TIM_Cmd
 405              	.LBE3:
 264:../src/main.cpp **** }
 406              		.loc 1 264 0
 407 023e 07F11807 		add	r7, r7, #24
 408 0242 BD46     		mov	sp, r7
 409 0244 80BD     		pop	{r7, pc}
 410              		.cfi_endproc
 411              	.LFE112:
 413              		.section	.rodata
 414 0011 000000   		.align	2
 415              	.LC1:
 416 0014 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 416      32302072 
 416      65616420 
 416      61747465 
 416      6D707420 
 417 0047 636F6465 		.ascii	"code!!!\012\015\000"
 417      2121210A 
 417      0D00
 418 0051 000000   		.text
 419 0246 00BF     		.align	2
 420              		.global	L3GD20_TIMEOUT_UserCallback
 421              		.thumb
 422              		.thumb_func
 424              	L3GD20_TIMEOUT_UserCallback:
 425              	.LFB113:
 265:../src/main.cpp **** 
 266:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 267:../src/main.cpp **** {
 426              		.loc 1 267 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 1, uses_anonymous_args = 0
 430 0248 80B5     		push	{r7, lr}
 431              	.LCFI6:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 024a 00AF     		add	r7, sp, #0
 436              	.LCFI7:
 437              		.cfi_def_cfa_register 7
 268:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 438              		.loc 1 268 0
 439 024c 40F20000 		movw	r0, #:lower16:.LC1
 440 0250 C0F20000 		movt	r0, #:upper16:.LC1
 441 0254 FFF7FEFF 		bl	printf
 269:../src/main.cpp **** 	return 0;
 442              		.loc 1 269 0
 443 0258 4FF00003 		mov	r3, #0
 270:../src/main.cpp **** }
 444              		.loc 1 270 0
 445 025c 1846     		mov	r0, r3
 446 025e 80BD     		pop	{r7, pc}
 447              		.cfi_endproc
 448              	.LFE113:
 450              		.align	2
 451              		.global	_Z15brake_pins_initv
 452              		.thumb
 453              		.thumb_func
 455              	_Z15brake_pins_initv:
 456              	.LFB114:
 271:../src/main.cpp **** 
 272:../src/main.cpp **** void brake_pins_init(void)
 273:../src/main.cpp **** {
 457              		.loc 1 273 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 8
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461 0260 80B5     		push	{r7, lr}
 462              	.LCFI8:
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 7, -8
 465              		.cfi_offset 14, -4
 466 0262 82B0     		sub	sp, sp, #8
 467              	.LCFI9:
 468              		.cfi_def_cfa_offset 16
 469 0264 00AF     		add	r7, sp, #0
 470              	.LCFI10:
 471              		.cfi_def_cfa_register 7
 472              	.LBB4:
 274:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 473              		.loc 1 274 0
 474 0266 4FF40010 		mov	r0, #2097152
 475 026a 4FF00101 		mov	r1, #1
 476 026e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 275:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 276:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 477              		.loc 1 276 0
 478 0272 3B46     		mov	r3, r7
 479 0274 1846     		mov	r0, r3
 480 0276 FFF7FEFF 		bl	GPIO_StructInit
 277:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 481              		.loc 1 277 0
 482 027a 4FF00C03 		mov	r3, #12
 483 027e 3B60     		str	r3, [r7, #0]
 278:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 484              		.loc 1 278 0
 485 0280 4FF00003 		mov	r3, #0
 486 0284 BB71     		strb	r3, [r7, #6]
 279:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 487              		.loc 1 279 0
 488 0286 4FF00103 		mov	r3, #1
 489 028a 3B71     		strb	r3, [r7, #4]
 280:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 490              		.loc 1 280 0
 491 028c 4FF00003 		mov	r3, #0
 492 0290 FB71     		strb	r3, [r7, #7]
 281:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 493              		.loc 1 281 0
 494 0292 4FF00203 		mov	r3, #2
 495 0296 7B71     		strb	r3, [r7, #5]
 282:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 496              		.loc 1 282 0
 497 0298 3B46     		mov	r3, r7
 498 029a 4FF48050 		mov	r0, #4096
 499 029e C4F60000 		movt	r0, 18432
 500 02a2 1946     		mov	r1, r3
 501 02a4 FFF7FEFF 		bl	GPIO_Init
 283:../src/main.cpp **** 
 284:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 502              		.loc 1 284 0
 503 02a8 4FF48050 		mov	r0, #4096
 504 02ac C4F60000 		movt	r0, 18432
 505 02b0 4FF00401 		mov	r1, #4
 506 02b4 4FF00002 		mov	r2, #0
 507 02b8 FFF7FEFF 		bl	GPIO_WriteBit
 285:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 508              		.loc 1 285 0
 509 02bc 4FF48050 		mov	r0, #4096
 510 02c0 C4F60000 		movt	r0, 18432
 511 02c4 4FF00801 		mov	r1, #8
 512 02c8 4FF00002 		mov	r2, #0
 513 02cc FFF7FEFF 		bl	GPIO_WriteBit
 514              	.LBE4:
 286:../src/main.cpp **** 
 287:../src/main.cpp **** 	/*
 288:../src/main.cpp **** 	 * 	a.GPIO_Mode = GPIO_Mode_OUT;
 289:../src/main.cpp **** 	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 290:../src/main.cpp **** 	a.GPIO_OType = GPIO_OType_PP;
 291:../src/main.cpp **** 	a.GPIO_Speed = GPIO_Speed_Level_2;
 292:../src/main.cpp **** 
 293:../src/main.cpp **** 	 */
 294:../src/main.cpp **** }
 515              		.loc 1 294 0
 516 02d0 07F10807 		add	r7, r7, #8
 517 02d4 BD46     		mov	sp, r7
 518 02d6 80BD     		pop	{r7, pc}
 519              		.cfi_endproc
 520              	.LFE114:
 522              		.align	2
 523              		.global	_Z13ping_pin_initv
 524              		.thumb
 525              		.thumb_func
 527              	_Z13ping_pin_initv:
 528              	.LFB115:
 295:../src/main.cpp **** /*
 296:../src/main.cpp ****  * PB0: OUTPUT
 297:../src/main.cpp ****  * PB1: INPUT
 298:../src/main.cpp ****  */
 299:../src/main.cpp **** void ping_pin_init(void)
 300:../src/main.cpp **** {
 529              		.loc 1 300 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 8
 532              		@ frame_needed = 1, uses_anonymous_args = 0
 533 02d8 80B5     		push	{r7, lr}
 534              	.LCFI11:
 535              		.cfi_def_cfa_offset 8
 536              		.cfi_offset 7, -8
 537              		.cfi_offset 14, -4
 538 02da 82B0     		sub	sp, sp, #8
 539              	.LCFI12:
 540              		.cfi_def_cfa_offset 16
 541 02dc 00AF     		add	r7, sp, #0
 542              	.LCFI13:
 543              		.cfi_def_cfa_register 7
 544              	.LBB5:
 301:../src/main.cpp **** 
 302:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 545              		.loc 1 302 0
 546 02de 4FF48020 		mov	r0, #262144
 547 02e2 4FF00101 		mov	r1, #1
 548 02e6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 303:../src/main.cpp **** 
 304:../src/main.cpp **** 	GPIO_InitTypeDef g;
 305:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 549              		.loc 1 305 0
 550 02ea 4FF00003 		mov	r3, #0
 551 02ee 3B71     		strb	r3, [r7, #4]
 306:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 552              		.loc 1 306 0
 553 02f0 4FF00103 		mov	r3, #1
 554 02f4 BB71     		strb	r3, [r7, #6]
 307:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1;
 555              		.loc 1 307 0
 556 02f6 4FF00203 		mov	r3, #2
 557 02fa 3B60     		str	r3, [r7, #0]
 308:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 558              		.loc 1 308 0
 559 02fc 4FF00003 		mov	r3, #0
 560 0300 FB71     		strb	r3, [r7, #7]
 309:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 561              		.loc 1 309 0
 562 0302 4FF00103 		mov	r3, #1
 563 0306 7B71     		strb	r3, [r7, #5]
 310:../src/main.cpp **** 
 311:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 564              		.loc 1 311 0
 565 0308 3B46     		mov	r3, r7
 566 030a 4FF48060 		mov	r0, #1024
 567 030e C4F60000 		movt	r0, 18432
 568 0312 1946     		mov	r1, r3
 569 0314 FFF7FEFF 		bl	GPIO_Init
 312:../src/main.cpp **** 
 313:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 570              		.loc 1 313 0
 571 0318 4FF00103 		mov	r3, #1
 572 031c 3B71     		strb	r3, [r7, #4]
 314:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 573              		.loc 1 314 0
 574 031e 4FF00003 		mov	r3, #0
 575 0322 BB71     		strb	r3, [r7, #6]
 315:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 576              		.loc 1 315 0
 577 0324 4FF00103 		mov	r3, #1
 578 0328 3B60     		str	r3, [r7, #0]
 316:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 579              		.loc 1 316 0
 580 032a 4FF00003 		mov	r3, #0
 581 032e FB71     		strb	r3, [r7, #7]
 317:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 582              		.loc 1 317 0
 583 0330 4FF00103 		mov	r3, #1
 584 0334 7B71     		strb	r3, [r7, #5]
 318:../src/main.cpp **** 
 319:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 585              		.loc 1 319 0
 586 0336 3B46     		mov	r3, r7
 587 0338 4FF48060 		mov	r0, #1024
 588 033c C4F60000 		movt	r0, 18432
 589 0340 1946     		mov	r1, r3
 590 0342 FFF7FEFF 		bl	GPIO_Init
 320:../src/main.cpp **** 
 321:../src/main.cpp **** //	EXTI_InitTypeDef e;
 322:../src/main.cpp **** 
 323:../src/main.cpp **** //	e.EXTI_Line = EXTI_Line1;
 324:../src/main.cpp **** //	e.EXTI_LineCmd = ENABLE;
 325:../src/main.cpp **** //	e.EXTI_Mode = EXTI_Mode_Interrupt;
 326:../src/main.cpp **** //	e.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //EXTI_Trigger_Rising;
 327:../src/main.cpp **** 
 328:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 591              		.loc 1 328 0
 592 0346 4FF00100 		mov	r0, #1
 593 034a 4FF00101 		mov	r1, #1
 594 034e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 329:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource1);
 595              		.loc 1 329 0
 596 0352 4FF00100 		mov	r0, #1
 597 0356 4FF00101 		mov	r1, #1
 598 035a FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 599              	.LBE5:
 330:../src/main.cpp **** 
 331:../src/main.cpp **** //	EXTI_Init(&e);
 332:../src/main.cpp **** 
 333:../src/main.cpp **** 	/*
 334:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 335:../src/main.cpp **** 
 336:../src/main.cpp **** 	nv.NVIC_IRQChannel = EXTI1_IRQn;
 337:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 338:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 339:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 340:../src/main.cpp **** 
 341:../src/main.cpp **** 	NVIC_Init(&nv);
 342:../src/main.cpp **** 	*/
 343:../src/main.cpp **** 
 344:../src/main.cpp **** }
 600              		.loc 1 344 0
 601 035e 07F10807 		add	r7, r7, #8
 602 0362 BD46     		mov	sp, r7
 603 0364 80BD     		pop	{r7, pc}
 604              		.cfi_endproc
 605              	.LFE115:
 607 0366 00BF     		.align	2
 608              		.global	_Z20timer2_timebase_initv
 609              		.thumb
 610              		.thumb_func
 612              	_Z20timer2_timebase_initv:
 613              	.LFB116:
 345:../src/main.cpp **** 
 346:../src/main.cpp **** void timer2_timebase_init(void)
 347:../src/main.cpp **** {
 614              		.loc 1 347 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 16
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618 0368 80B5     		push	{r7, lr}
 619              	.LCFI14:
 620              		.cfi_def_cfa_offset 8
 621              		.cfi_offset 7, -8
 622              		.cfi_offset 14, -4
 623 036a 84B0     		sub	sp, sp, #16
 624              	.LCFI15:
 625              		.cfi_def_cfa_offset 24
 626 036c 00AF     		add	r7, sp, #0
 627              	.LCFI16:
 628              		.cfi_def_cfa_register 7
 629              	.LBB6:
 348:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 349:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 630              		.loc 1 349 0
 631 036e 4FF00100 		mov	r0, #1
 632 0372 4FF00101 		mov	r1, #1
 633 0376 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 350:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 634              		.loc 1 350 0
 635 037a 40F26B73 		movw	r3, #1899
 636 037e BB60     		str	r3, [r7, #8]
 351:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 637              		.loc 1 351 0
 638 0380 4FF00003 		mov	r3, #0
 639 0384 BB73     		strb	r3, [r7, #14]
 352:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 640              		.loc 1 352 0
 641 0386 4FF04703 		mov	r3, #71
 642 038a BB80     		strh	r3, [r7, #4]	@ movhi
 353:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 643              		.loc 1 353 0
 644 038c 4FF00003 		mov	r3, #0
 645 0390 BB81     		strh	r3, [r7, #12]	@ movhi
 354:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 646              		.loc 1 354 0
 647 0392 4FF00003 		mov	r3, #0
 648 0396 FB80     		strh	r3, [r7, #6]	@ movhi
 355:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 649              		.loc 1 355 0
 650 0398 07F10403 		add	r3, r7, #4
 651 039c 4FF08040 		mov	r0, #1073741824
 652 03a0 1946     		mov	r1, r3
 653 03a2 FFF7FEFF 		bl	TIM_TimeBaseInit
 356:../src/main.cpp **** //	TIM_Cmd(TIM2, ENABLE);
 357:../src/main.cpp **** 
 358:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 654              		.loc 1 358 0
 655 03a6 4FF08040 		mov	r0, #1073741824
 656 03aa 4FF00001 		mov	r1, #0
 657 03ae FFF7FEFF 		bl	TIM_SetCounter
 658              	.LBE6:
 359:../src/main.cpp **** }
 659              		.loc 1 359 0
 660 03b2 07F11007 		add	r7, r7, #16
 661 03b6 BD46     		mov	sp, r7
 662 03b8 80BD     		pop	{r7, pc}
 663              		.cfi_endproc
 664              	.LFE116:
 666 03ba 00BF     		.align	2
 667              		.global	_Z14calc_gyro_biasv
 668              		.thumb
 669              		.thumb_func
 671              	_Z14calc_gyro_biasv:
 672              	.LFB117:
 360:../src/main.cpp **** 
 361:../src/main.cpp **** int16_t calc_gyro_bias(void)
 362:../src/main.cpp **** {
 673              		.loc 1 362 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 16
 676              		@ frame_needed = 1, uses_anonymous_args = 0
 677 03bc 80B5     		push	{r7, lr}
 678              	.LCFI17:
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 03be 84B0     		sub	sp, sp, #16
 683              	.LCFI18:
 684              		.cfi_def_cfa_offset 24
 685 03c0 00AF     		add	r7, sp, #0
 686              	.LCFI19:
 687              		.cfi_def_cfa_register 7
 688              	.LBB7:
 363:../src/main.cpp **** 	int i = 0;
 689              		.loc 1 363 0
 690 03c2 4FF00003 		mov	r3, #0
 691 03c6 FB60     		str	r3, [r7, #12]
 364:../src/main.cpp **** 	int accum_x = 0;
 692              		.loc 1 364 0
 693 03c8 4FF00003 		mov	r3, #0
 694 03cc BB60     		str	r3, [r7, #8]
 365:../src/main.cpp **** 
 366:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 367:../src/main.cpp **** 		uint16_t un_signed;
 368:../src/main.cpp **** 		int16_t output;
 369:../src/main.cpp **** 	} convert;
 370:../src/main.cpp **** 
 371:../src/main.cpp **** 	uint8_t bytes[2];
 372:../src/main.cpp **** 
 373:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 695              		.loc 1 373 0
 696 03ce 4FF00003 		mov	r3, #0
 697 03d2 FB60     		str	r3, [r7, #12]
 698 03d4 19E0     		b	.L12
 699              	.L13:
 374:../src/main.cpp **** 	{
 375:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 700              		.loc 1 375 0 discriminator 2
 701 03d6 3B46     		mov	r3, r7
 702 03d8 1846     		mov	r0, r3
 703 03da 4FF02801 		mov	r1, #40
 704 03de 4FF00202 		mov	r2, #2
 705 03e2 FFF7FEFF 		bl	L3GD20_Read
 376:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 706              		.loc 1 376 0 discriminator 2
 707 03e6 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 708 03e8 4FEA0323 		lsl	r3, r3, #8
 709 03ec 9AB2     		uxth	r2, r3
 710 03ee 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 711 03f0 1343     		orrs	r3, r3, r2
 712 03f2 9BB2     		uxth	r3, r3
 713 03f4 9BB2     		uxth	r3, r3
 714 03f6 BB80     		strh	r3, [r7, #4]	@ movhi
 377:../src/main.cpp **** 		accum_x += convert.output;
 715              		.loc 1 377 0 discriminator 2
 716 03f8 BB88     		ldrh	r3, [r7, #4]
 717 03fa 1BB2     		sxth	r3, r3
 718 03fc BA68     		ldr	r2, [r7, #8]
 719 03fe D318     		adds	r3, r2, r3
 720 0400 BB60     		str	r3, [r7, #8]
 373:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 721              		.loc 1 373 0 discriminator 2
 722 0402 FB68     		ldr	r3, [r7, #12]
 723 0404 03F10103 		add	r3, r3, #1
 724 0408 FB60     		str	r3, [r7, #12]
 725              	.L12:
 373:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 726              		.loc 1 373 0 is_stmt 0 discriminator 1
 727 040a FB68     		ldr	r3, [r7, #12]
 728 040c F92B     		cmp	r3, #249
 729 040e CCBF     		ite	gt
 730 0410 0023     		movgt	r3, #0
 731 0412 0123     		movle	r3, #1
 732 0414 DBB2     		uxtb	r3, r3
 733 0416 002B     		cmp	r3, #0
 734 0418 DDD1     		bne	.L13
 378:../src/main.cpp **** 	}
 379:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 735              		.loc 1 379 0 is_stmt 1
 736 041a D7ED027A 		flds	s15, [r7, #8]	@ int
 737 041e B8EEE77A 		fsitos	s14, s15
 738 0422 DFED077A 		flds	s15, .L15
 739 0426 C7EE277A 		fdivs	s15, s14, s15
 740 042a FDEEE77A 		ftosizs	s15, s15
 741 042e 17EE903A 		fmrs	r3, s15	@ int
 742 0432 9BB2     		uxth	r3, r3
 743 0434 1BB2     		sxth	r3, r3
 744              	.LBE7:
 380:../src/main.cpp **** }
 745              		.loc 1 380 0
 746 0436 1846     		mov	r0, r3
 747 0438 07F11007 		add	r7, r7, #16
 748 043c BD46     		mov	sp, r7
 749 043e 80BD     		pop	{r7, pc}
 750              	.L16:
 751              		.align	2
 752              	.L15:
 753 0440 00007A43 		.word	1132068864
 754              		.cfi_endproc
 755              	.LFE117:
 757              		.align	2
 758              		.global	_Z13adc1_init_DMAv
 759              		.thumb
 760              		.thumb_func
 762              	_Z13adc1_init_DMAv:
 763              	.LFB118:
 381:../src/main.cpp **** 
 382:../src/main.cpp **** /*
 383:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 384:../src/main.cpp ****  * a user-supplied location in memory
 385:../src/main.cpp ****  * @Args: None
 386:../src/main.cpp ****  * @Return Val: None
 387:../src/main.cpp ****  */
 388:../src/main.cpp **** 
 389:../src/main.cpp **** void adc1_init_DMA(void)
 390:../src/main.cpp **** {
 764              		.loc 1 390 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 112
 767              		@ frame_needed = 1, uses_anonymous_args = 0
 768 0444 80B5     		push	{r7, lr}
 769              	.LCFI20:
 770              		.cfi_def_cfa_offset 8
 771              		.cfi_offset 7, -8
 772              		.cfi_offset 14, -4
 773 0446 9CB0     		sub	sp, sp, #112
 774              	.LCFI21:
 775              		.cfi_def_cfa_offset 120
 776 0448 00AF     		add	r7, sp, #0
 777              	.LCFI22:
 778              		.cfi_def_cfa_register 7
 779              	.LBB8:
 391:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 392:../src/main.cpp **** 
 393:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 394:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 395:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 396:../src/main.cpp **** 
 397:../src/main.cpp **** 	/* Configure the ADC clock */
 398:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 780              		.loc 1 398 0
 781 044a 4FF48870 		mov	r0, #272
 782 044e FFF7FEFF 		bl	RCC_ADCCLKConfig
 399:../src/main.cpp **** 	/* Enable ADC1 clock */
 400:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 783              		.loc 1 400 0
 784 0452 4FF08050 		mov	r0, #268435456
 785 0456 4FF00101 		mov	r1, #1
 786 045a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 401:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 402:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 787              		.loc 1 402 0
 788 045e 4FF40030 		mov	r0, #131072
 789 0462 4FF00101 		mov	r1, #1
 790 0466 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 403:../src/main.cpp **** 
 404:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 405:../src/main.cpp **** 
 406:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 791              		.loc 1 406 0
 792 046a 07F15003 		add	r3, r7, #80
 793 046e 1846     		mov	r0, r3
 794 0470 FFF7FEFF 		bl	GPIO_StructInit
 407:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 795              		.loc 1 407 0
 796 0474 4FF00C03 		mov	r3, #12
 797 0478 3B65     		str	r3, [r7, #80]
 408:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 798              		.loc 1 408 0
 799 047a 4FF00303 		mov	r3, #3
 800 047e 87F85430 		strb	r3, [r7, #84]
 409:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 801              		.loc 1 409 0
 802 0482 4FF00003 		mov	r3, #0
 803 0486 87F85730 		strb	r3, [r7, #87]
 410:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 804              		.loc 1 410 0
 805 048a 07F15003 		add	r3, r7, #80
 806 048e 4FF09040 		mov	r0, #1207959552
 807 0492 1946     		mov	r1, r3
 808 0494 FFF7FEFF 		bl	GPIO_Init
 411:../src/main.cpp **** 
 412:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 809              		.loc 1 412 0
 810 0498 3B46     		mov	r3, r7
 811 049a 1846     		mov	r0, r3
 812 049c FFF7FEFF 		bl	ADC_StructInit
 413:../src/main.cpp **** 
 414:../src/main.cpp **** 	/* Calibration procedure */
 415:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 813              		.loc 1 415 0
 814 04a0 4FF0A040 		mov	r0, #1342177280
 815 04a4 4FF00101 		mov	r1, #1
 816 04a8 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 416:../src/main.cpp **** 
 417:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 418:../src/main.cpp **** 	int foo;
 419:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 817              		.loc 1 419 0
 818 04ac 4FF00003 		mov	r3, #0
 819 04b0 FB66     		str	r3, [r7, #108]
 820 04b2 07E0     		b	.L18
 821              	.L19:
 420:../src/main.cpp **** 	{
 421:../src/main.cpp **** 	  ++foo;
 822              		.loc 1 421 0 discriminator 2
 823 04b4 FB6E     		ldr	r3, [r7, #108]
 824 04b6 03F10103 		add	r3, r3, #1
 825 04ba FB66     		str	r3, [r7, #108]
 419:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 826              		.loc 1 419 0 discriminator 2
 827 04bc FB6E     		ldr	r3, [r7, #108]
 828 04be 03F10103 		add	r3, r3, #1
 829 04c2 FB66     		str	r3, [r7, #108]
 830              	.L18:
 419:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 831              		.loc 1 419 0 is_stmt 0 discriminator 1
 832 04c4 FA6E     		ldr	r2, [r7, #108]
 833 04c6 4FF6FF13 		movw	r3, #63999
 834 04ca 9A42     		cmp	r2, r3
 835 04cc CCBF     		ite	gt
 836 04ce 0023     		movgt	r3, #0
 837 04d0 0123     		movle	r3, #1
 838 04d2 DBB2     		uxtb	r3, r3
 839 04d4 002B     		cmp	r3, #0
 840 04d6 EDD1     		bne	.L19
 422:../src/main.cpp **** 	}
 423:../src/main.cpp **** 
 424:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 841              		.loc 1 424 0 is_stmt 1
 842 04d8 4FF0A040 		mov	r0, #1342177280
 843 04dc 4FF00001 		mov	r1, #0
 844 04e0 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 425:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 845              		.loc 1 425 0
 846 04e4 4FF0A040 		mov	r0, #1342177280
 847 04e8 FFF7FEFF 		bl	ADC_StartCalibration
 426:../src/main.cpp **** 
 427:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 848              		.loc 1 427 0
 849 04ec 00BF     		nop
 850              	.L20:
 851              		.loc 1 427 0 is_stmt 0 discriminator 1
 852 04ee 4FF0A040 		mov	r0, #1342177280
 853 04f2 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 854 04f6 0346     		mov	r3, r0
 855 04f8 002B     		cmp	r3, #0
 856 04fa 0CBF     		ite	eq
 857 04fc 0023     		moveq	r3, #0
 858 04fe 0123     		movne	r3, #1
 859 0500 DBB2     		uxtb	r3, r3
 860 0502 002B     		cmp	r3, #0
 861 0504 F3D1     		bne	.L20
 428:../src/main.cpp **** 
 429:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 862              		.loc 1 429 0 is_stmt 1
 863 0506 4FF00003 		mov	r3, #0
 864 050a BB65     		str	r3, [r7, #88]
 430:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 865              		.loc 1 430 0
 866 050c 4FF00003 		mov	r3, #0
 867 0510 FB65     		str	r3, [r7, #92]
 431:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 868              		.loc 1 431 0
 869 0512 4FF40043 		mov	r3, #32768
 870 0516 3B66     		str	r3, [r7, #96]
 432:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 871              		.loc 1 432 0
 872 0518 4FF00203 		mov	r3, #2
 873 051c 7B66     		str	r3, [r7, #100]
 433:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 874              		.loc 1 433 0
 875 051e 4FF00F03 		mov	r3, #15
 876 0522 87F86830 		strb	r3, [r7, #104]
 434:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 877              		.loc 1 434 0
 878 0526 07F15803 		add	r3, r7, #88
 879 052a 4FF0A040 		mov	r0, #1342177280
 880 052e 1946     		mov	r1, r3
 881 0530 FFF7FEFF 		bl	ADC_CommonInit
 435:../src/main.cpp **** 
 436:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 882              		.loc 1 436 0
 883 0534 4FF40053 		mov	r3, #8192
 884 0538 3B60     		str	r3, [r7, #0]
 437:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 885              		.loc 1 437 0
 886 053a 4FF00003 		mov	r3, #0
 887 053e 7B60     		str	r3, [r7, #4]
 438:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 888              		.loc 1 438 0
 889 0540 4FF00003 		mov	r3, #0
 890 0544 BB60     		str	r3, [r7, #8]
 439:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 891              		.loc 1 439 0
 892 0546 4FF00003 		mov	r3, #0
 893 054a FB60     		str	r3, [r7, #12]
 440:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 894              		.loc 1 440 0
 895 054c 4FF00003 		mov	r3, #0
 896 0550 3B61     		str	r3, [r7, #16]
 441:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 897              		.loc 1 441 0
 898 0552 4FF00003 		mov	r3, #0
 899 0556 7B61     		str	r3, [r7, #20]
 442:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 900              		.loc 1 442 0
 901 0558 4FF00003 		mov	r3, #0
 902 055c BB61     		str	r3, [r7, #24]
 443:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 903              		.loc 1 443 0
 904 055e 4FF00203 		mov	r3, #2
 905 0562 3B77     		strb	r3, [r7, #28]
 444:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 906              		.loc 1 444 0
 907 0564 3B46     		mov	r3, r7
 908 0566 4FF0A040 		mov	r0, #1342177280
 909 056a 1946     		mov	r1, r3
 910 056c FFF7FEFF 		bl	ADC_Init
 445:../src/main.cpp **** 
 446:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 447:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 911              		.loc 1 447 0
 912 0570 4FF0A040 		mov	r0, #1342177280
 913 0574 4FF00301 		mov	r1, #3
 914 0578 4FF00102 		mov	r2, #1
 915 057c 4FF00703 		mov	r3, #7
 916 0580 FFF7FEFF 		bl	ADC_RegularChannelConfig
 448:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 917              		.loc 1 448 0
 918 0584 4FF0A040 		mov	r0, #1342177280
 919 0588 4FF00401 		mov	r1, #4
 920 058c 4FF00202 		mov	r2, #2
 921 0590 4FF00703 		mov	r3, #7
 922 0594 FFF7FEFF 		bl	ADC_RegularChannelConfig
 449:../src/main.cpp **** 
 450:../src/main.cpp **** 	/* Enable ADC1 */
 451:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 923              		.loc 1 451 0
 924 0598 4FF0A040 		mov	r0, #1342177280
 925 059c 4FF00101 		mov	r1, #1
 926 05a0 FFF7FEFF 		bl	ADC_Cmd
 452:../src/main.cpp **** 
 453:../src/main.cpp **** 	/* wait for ADRDY */
 454:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 927              		.loc 1 454 0
 928 05a4 00BF     		nop
 929              	.L21:
 930              		.loc 1 454 0 is_stmt 0 discriminator 1
 931 05a6 4FF0A040 		mov	r0, #1342177280
 932 05aa 4FF00101 		mov	r1, #1
 933 05ae FFF7FEFF 		bl	ADC_GetFlagStatus
 934 05b2 0346     		mov	r3, r0
 935 05b4 002B     		cmp	r3, #0
 936 05b6 14BF     		ite	ne
 937 05b8 0023     		movne	r3, #0
 938 05ba 0123     		moveq	r3, #1
 939 05bc DBB2     		uxtb	r3, r3
 940 05be 002B     		cmp	r3, #0
 941 05c0 F1D1     		bne	.L21
 455:../src/main.cpp **** 
 456:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 457:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 942              		.loc 1 457 0 is_stmt 1
 943 05c2 4FF0A040 		mov	r0, #1342177280
 944 05c6 FFF7FEFF 		bl	ADC_StartConversion
 458:../src/main.cpp **** 
 459:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 945              		.loc 1 459 0
 946 05ca 4FF00100 		mov	r0, #1
 947 05ce 4FF00101 		mov	r1, #1
 948 05d2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 460:../src/main.cpp **** 
 461:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 462:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 949              		.loc 1 462 0
 950 05d6 07F12003 		add	r3, r7, #32
 951 05da 1846     		mov	r0, r3
 952 05dc FFF7FEFF 		bl	DMA_StructInit
 463:../src/main.cpp **** 
 464:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 953              		.loc 1 464 0
 954 05e0 4FF00800 		mov	r0, #8
 955 05e4 C4F20200 		movt	r0, 16386
 956 05e8 FFF7FEFF 		bl	DMA_DeInit
 465:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 957              		.loc 1 465 0
 958 05ec 4FF04003 		mov	r3, #64
 959 05f0 C5F20003 		movt	r3, 20480
 960 05f4 3B62     		str	r3, [r7, #32]
 466:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 961              		.loc 1 466 0
 962 05f6 40F20003 		movw	r3, #:lower16:adcData
 963 05fa C0F20003 		movt	r3, #:upper16:adcData
 964 05fe 7B62     		str	r3, [r7, #36]
 467:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 965              		.loc 1 467 0
 966 0600 4FF00003 		mov	r3, #0
 967 0604 BB62     		str	r3, [r7, #40]
 468:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 968              		.loc 1 468 0
 969 0606 4FF00203 		mov	r3, #2
 970 060a BB85     		strh	r3, [r7, #44]	@ movhi
 469:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 971              		.loc 1 469 0
 972 060c 4FF00003 		mov	r3, #0
 973 0610 3B63     		str	r3, [r7, #48]
 470:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 974              		.loc 1 470 0
 975 0612 4FF08003 		mov	r3, #128
 976 0616 7B63     		str	r3, [r7, #52]
 471:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 977              		.loc 1 471 0
 978 0618 4FF40073 		mov	r3, #512
 979 061c BB63     		str	r3, [r7, #56]
 472:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 980              		.loc 1 472 0
 981 061e 4FF40063 		mov	r3, #2048
 982 0622 FB63     		str	r3, [r7, #60]
 473:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 983              		.loc 1 473 0
 984 0624 4FF02003 		mov	r3, #32
 985 0628 3B64     		str	r3, [r7, #64]
 474:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 986              		.loc 1 474 0
 987 062a 4FF40053 		mov	r3, #8192
 988 062e 7B64     		str	r3, [r7, #68]
 475:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 989              		.loc 1 475 0
 990 0630 4FF00003 		mov	r3, #0
 991 0634 BB64     		str	r3, [r7, #72]
 476:../src/main.cpp **** 
 477:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 992              		.loc 1 477 0
 993 0636 07F12003 		add	r3, r7, #32
 994 063a 4FF00800 		mov	r0, #8
 995 063e C4F20200 		movt	r0, 16386
 996 0642 1946     		mov	r1, r3
 997 0644 FFF7FEFF 		bl	DMA_Init
 478:../src/main.cpp **** 
 479:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 480:../src/main.cpp **** 
 481:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 998              		.loc 1 481 0
 999 0648 4FF00B03 		mov	r3, #11
 1000 064c 87F84C30 		strb	r3, [r7, #76]
 482:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1001              		.loc 1 482 0
 1002 0650 4FF00203 		mov	r3, #2
 1003 0654 87F84D30 		strb	r3, [r7, #77]
 483:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1004              		.loc 1 483 0
 1005 0658 4FF00003 		mov	r3, #0
 1006 065c 87F84E30 		strb	r3, [r7, #78]
 484:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1007              		.loc 1 484 0
 1008 0660 4FF00103 		mov	r3, #1
 1009 0664 87F84F30 		strb	r3, [r7, #79]
 485:../src/main.cpp **** 
 486:../src/main.cpp **** 	NVIC_Init(&nv);
 1010              		.loc 1 486 0
 1011 0668 07F14C03 		add	r3, r7, #76
 1012 066c 1846     		mov	r0, r3
 1013 066e FFF7FEFF 		bl	NVIC_Init
 487:../src/main.cpp **** 
 488:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1014              		.loc 1 488 0
 1015 0672 4FF00800 		mov	r0, #8
 1016 0676 C4F20200 		movt	r0, 16386
 1017 067a 4FF00201 		mov	r1, #2
 1018 067e 4FF00102 		mov	r2, #1
 1019 0682 FFF7FEFF 		bl	DMA_ITConfig
 489:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1020              		.loc 1 489 0
 1021 0686 4FF00800 		mov	r0, #8
 1022 068a C4F20200 		movt	r0, 16386
 1023 068e 4FF00101 		mov	r1, #1
 1024 0692 FFF7FEFF 		bl	DMA_Cmd
 490:../src/main.cpp **** 
 491:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1025              		.loc 1 491 0
 1026 0696 4FF0A040 		mov	r0, #1342177280
 1027 069a 4FF00201 		mov	r1, #2
 1028 069e FFF7FEFF 		bl	ADC_DMAConfig
 492:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1029              		.loc 1 492 0
 1030 06a2 4FF0A040 		mov	r0, #1342177280
 1031 06a6 4FF00101 		mov	r1, #1
 1032 06aa FFF7FEFF 		bl	ADC_DMACmd
 1033              	.LBE8:
 493:../src/main.cpp **** }
 1034              		.loc 1 493 0
 1035 06ae 07F17007 		add	r7, r7, #112
 1036 06b2 BD46     		mov	sp, r7
 1037 06b4 80BD     		pop	{r7, pc}
 1038              		.cfi_endproc
 1039              	.LFE118:
 1041 06b6 00BF     		.align	2
 1042              		.global	_Z13adc2_init_DMAv
 1043              		.thumb
 1044              		.thumb_func
 1046              	_Z13adc2_init_DMAv:
 1047              	.LFB119:
 494:../src/main.cpp **** 
 495:../src/main.cpp **** void adc2_init_DMA(void)
 496:../src/main.cpp **** {
 1048              		.loc 1 496 0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 112
 1051              		@ frame_needed = 1, uses_anonymous_args = 0
 1052 06b8 80B5     		push	{r7, lr}
 1053              	.LCFI23:
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 7, -8
 1056              		.cfi_offset 14, -4
 1057 06ba 9CB0     		sub	sp, sp, #112
 1058              	.LCFI24:
 1059              		.cfi_def_cfa_offset 120
 1060 06bc 00AF     		add	r7, sp, #0
 1061              	.LCFI25:
 1062              		.cfi_def_cfa_register 7
 1063              	.LBB9:
 497:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 498:../src/main.cpp **** 
 499:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 500:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 501:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 502:../src/main.cpp **** 
 503:../src/main.cpp **** 	/* Configure the ADC clock */
 504:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1064              		.loc 1 504 0
 1065 06be 4FF48870 		mov	r0, #272
 1066 06c2 FFF7FEFF 		bl	RCC_ADCCLKConfig
 505:../src/main.cpp **** 	/* Enable ADC2 clock */
 506:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1067              		.loc 1 506 0
 1068 06c6 4FF08050 		mov	r0, #268435456
 1069 06ca 4FF00101 		mov	r1, #1
 1070 06ce FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 507:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 508:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1071              		.loc 1 508 0
 1072 06d2 4FF46020 		mov	r0, #917504
 1073 06d6 4FF00101 		mov	r1, #1
 1074 06da FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 509:../src/main.cpp **** 
 510:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 511:../src/main.cpp **** 
 512:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1075              		.loc 1 512 0
 1076 06de 07F15003 		add	r3, r7, #80
 1077 06e2 1846     		mov	r0, r3
 1078 06e4 FFF7FEFF 		bl	GPIO_StructInit
 513:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1079              		.loc 1 513 0
 1080 06e8 4FF01003 		mov	r3, #16
 1081 06ec 3B65     		str	r3, [r7, #80]
 514:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1082              		.loc 1 514 0
 1083 06ee 4FF00303 		mov	r3, #3
 1084 06f2 87F85430 		strb	r3, [r7, #84]
 515:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1085              		.loc 1 515 0
 1086 06f6 4FF00003 		mov	r3, #0
 1087 06fa 87F85730 		strb	r3, [r7, #87]
 516:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1088              		.loc 1 516 0
 1089 06fe 4FF00303 		mov	r3, #3
 1090 0702 87F85530 		strb	r3, [r7, #85]
 517:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1091              		.loc 1 517 0
 1092 0706 07F15003 		add	r3, r7, #80
 1093 070a 4FF09040 		mov	r0, #1207959552
 1094 070e 1946     		mov	r1, r3
 1095 0710 FFF7FEFF 		bl	GPIO_Init
 518:../src/main.cpp **** 
 519:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1096              		.loc 1 519 0
 1097 0714 07F15003 		add	r3, r7, #80
 1098 0718 1846     		mov	r0, r3
 1099 071a FFF7FEFF 		bl	GPIO_StructInit
 520:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1100              		.loc 1 520 0
 1101 071e 4FF00403 		mov	r3, #4
 1102 0722 3B65     		str	r3, [r7, #80]
 521:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1103              		.loc 1 521 0
 1104 0724 4FF00303 		mov	r3, #3
 1105 0728 87F85430 		strb	r3, [r7, #84]
 522:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1106              		.loc 1 522 0
 1107 072c 4FF00003 		mov	r3, #0
 1108 0730 87F85730 		strb	r3, [r7, #87]
 523:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1109              		.loc 1 523 0
 1110 0734 07F15003 		add	r3, r7, #80
 1111 0738 4FF48060 		mov	r0, #1024
 1112 073c C4F60000 		movt	r0, 18432
 1113 0740 1946     		mov	r1, r3
 1114 0742 FFF7FEFF 		bl	GPIO_Init
 524:../src/main.cpp **** 
 525:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1115              		.loc 1 525 0
 1116 0746 07F15003 		add	r3, r7, #80
 1117 074a 1846     		mov	r0, r3
 1118 074c FFF7FEFF 		bl	GPIO_StructInit
 526:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 1119              		.loc 1 526 0
 1120 0750 4FF03003 		mov	r3, #48
 1121 0754 3B65     		str	r3, [r7, #80]
 527:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1122              		.loc 1 527 0
 1123 0756 4FF00303 		mov	r3, #3
 1124 075a 87F85430 		strb	r3, [r7, #84]
 528:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1125              		.loc 1 528 0
 1126 075e 4FF00003 		mov	r3, #0
 1127 0762 87F85730 		strb	r3, [r7, #87]
 529:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 1128              		.loc 1 529 0
 1129 0766 07F15003 		add	r3, r7, #80
 1130 076a 4FF40060 		mov	r0, #2048
 1131 076e C4F60000 		movt	r0, 18432
 1132 0772 1946     		mov	r1, r3
 1133 0774 FFF7FEFF 		bl	GPIO_Init
 530:../src/main.cpp **** 
 531:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1134              		.loc 1 531 0
 1135 0778 3B46     		mov	r3, r7
 1136 077a 1846     		mov	r0, r3
 1137 077c FFF7FEFF 		bl	ADC_StructInit
 532:../src/main.cpp **** 
 533:../src/main.cpp **** 	/* Calibration procedure */
 534:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 1138              		.loc 1 534 0
 1139 0780 4FF48070 		mov	r0, #256
 1140 0784 C5F20000 		movt	r0, 20480
 1141 0788 4FF00101 		mov	r1, #1
 1142 078c FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 535:../src/main.cpp **** 
 536:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 537:../src/main.cpp **** 	int foo;
 538:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1143              		.loc 1 538 0
 1144 0790 4FF00003 		mov	r3, #0
 1145 0794 FB66     		str	r3, [r7, #108]
 1146 0796 07E0     		b	.L23
 1147              	.L24:
 539:../src/main.cpp **** 	{
 540:../src/main.cpp **** 	  ++foo;
 1148              		.loc 1 540 0 discriminator 2
 1149 0798 FB6E     		ldr	r3, [r7, #108]
 1150 079a 03F10103 		add	r3, r3, #1
 1151 079e FB66     		str	r3, [r7, #108]
 538:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1152              		.loc 1 538 0 discriminator 2
 1153 07a0 FB6E     		ldr	r3, [r7, #108]
 1154 07a2 03F10103 		add	r3, r3, #1
 1155 07a6 FB66     		str	r3, [r7, #108]
 1156              	.L23:
 538:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1157              		.loc 1 538 0 is_stmt 0 discriminator 1
 1158 07a8 FA6E     		ldr	r2, [r7, #108]
 1159 07aa 4FF6FF13 		movw	r3, #63999
 1160 07ae 9A42     		cmp	r2, r3
 1161 07b0 CCBF     		ite	gt
 1162 07b2 0023     		movgt	r3, #0
 1163 07b4 0123     		movle	r3, #1
 1164 07b6 DBB2     		uxtb	r3, r3
 1165 07b8 002B     		cmp	r3, #0
 1166 07ba EDD1     		bne	.L24
 541:../src/main.cpp **** 	}
 542:../src/main.cpp **** 
 543:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 1167              		.loc 1 543 0 is_stmt 1
 1168 07bc 4FF48070 		mov	r0, #256
 1169 07c0 C5F20000 		movt	r0, 20480
 1170 07c4 4FF00001 		mov	r1, #0
 1171 07c8 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 544:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 1172              		.loc 1 544 0
 1173 07cc 4FF48070 		mov	r0, #256
 1174 07d0 C5F20000 		movt	r0, 20480
 1175 07d4 FFF7FEFF 		bl	ADC_StartCalibration
 545:../src/main.cpp **** 
 546:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 1176              		.loc 1 546 0
 1177 07d8 00BF     		nop
 1178              	.L25:
 1179              		.loc 1 546 0 is_stmt 0 discriminator 1
 1180 07da 4FF48070 		mov	r0, #256
 1181 07de C5F20000 		movt	r0, 20480
 1182 07e2 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1183 07e6 0346     		mov	r3, r0
 1184 07e8 002B     		cmp	r3, #0
 1185 07ea 0CBF     		ite	eq
 1186 07ec 0023     		moveq	r3, #0
 1187 07ee 0123     		movne	r3, #1
 1188 07f0 DBB2     		uxtb	r3, r3
 1189 07f2 002B     		cmp	r3, #0
 1190 07f4 F1D1     		bne	.L25
 547:../src/main.cpp **** 
 548:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1191              		.loc 1 548 0 is_stmt 1
 1192 07f6 4FF00003 		mov	r3, #0
 1193 07fa BB65     		str	r3, [r7, #88]
 549:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1194              		.loc 1 549 0
 1195 07fc 4FF00003 		mov	r3, #0
 1196 0800 FB65     		str	r3, [r7, #92]
 550:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1197              		.loc 1 550 0
 1198 0802 4FF40043 		mov	r3, #32768
 1199 0806 3B66     		str	r3, [r7, #96]
 551:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1200              		.loc 1 551 0
 1201 0808 4FF00203 		mov	r3, #2
 1202 080c 7B66     		str	r3, [r7, #100]
 552:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 1203              		.loc 1 552 0
 1204 080e 4FF00F03 		mov	r3, #15
 1205 0812 87F86830 		strb	r3, [r7, #104]
 553:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 1206              		.loc 1 553 0
 1207 0816 07F15803 		add	r3, r7, #88
 1208 081a 4FF48070 		mov	r0, #256
 1209 081e C5F20000 		movt	r0, 20480
 1210 0822 1946     		mov	r1, r3
 1211 0824 FFF7FEFF 		bl	ADC_CommonInit
 554:../src/main.cpp **** 
 555:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1212              		.loc 1 555 0
 1213 0828 4FF40053 		mov	r3, #8192
 1214 082c 3B60     		str	r3, [r7, #0]
 556:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1215              		.loc 1 556 0
 1216 082e 4FF00003 		mov	r3, #0
 1217 0832 7B60     		str	r3, [r7, #4]
 557:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1218              		.loc 1 557 0
 1219 0834 4FF00003 		mov	r3, #0
 1220 0838 BB60     		str	r3, [r7, #8]
 558:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1221              		.loc 1 558 0
 1222 083a 4FF00003 		mov	r3, #0
 1223 083e FB60     		str	r3, [r7, #12]
 559:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1224              		.loc 1 559 0
 1225 0840 4FF00003 		mov	r3, #0
 1226 0844 3B61     		str	r3, [r7, #16]
 560:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1227              		.loc 1 560 0
 1228 0846 4FF00003 		mov	r3, #0
 1229 084a 7B61     		str	r3, [r7, #20]
 561:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1230              		.loc 1 561 0
 1231 084c 4FF00003 		mov	r3, #0
 1232 0850 BB61     		str	r3, [r7, #24]
 562:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 1233              		.loc 1 562 0
 1234 0852 4FF00403 		mov	r3, #4
 1235 0856 3B77     		strb	r3, [r7, #28]
 563:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 1236              		.loc 1 563 0
 1237 0858 3B46     		mov	r3, r7
 1238 085a 4FF48070 		mov	r0, #256
 1239 085e C5F20000 		movt	r0, 20480
 1240 0862 1946     		mov	r1, r3
 1241 0864 FFF7FEFF 		bl	ADC_Init
 564:../src/main.cpp **** 
 565:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 566:../src/main.cpp **** 
 567:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1242              		.loc 1 567 0
 1243 0868 4FF48070 		mov	r0, #256
 1244 086c C5F20000 		movt	r0, 20480
 1245 0870 4FF00101 		mov	r1, #1
 1246 0874 4FF00102 		mov	r2, #1
 1247 0878 4FF00703 		mov	r3, #7
 1248 087c FFF7FEFF 		bl	ADC_RegularChannelConfig
 568:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1249              		.loc 1 568 0
 1250 0880 4FF48070 		mov	r0, #256
 1251 0884 C5F20000 		movt	r0, 20480
 1252 0888 4FF00501 		mov	r1, #5
 1253 088c 4FF00202 		mov	r2, #2
 1254 0890 4FF00703 		mov	r3, #7
 1255 0894 FFF7FEFF 		bl	ADC_RegularChannelConfig
 569:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 1256              		.loc 1 569 0
 1257 0898 4FF48070 		mov	r0, #256
 1258 089c C5F20000 		movt	r0, 20480
 1259 08a0 4FF00B01 		mov	r1, #11
 1260 08a4 4FF00302 		mov	r2, #3
 1261 08a8 4FF00703 		mov	r3, #7
 1262 08ac FFF7FEFF 		bl	ADC_RegularChannelConfig
 570:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 1263              		.loc 1 570 0
 1264 08b0 4FF48070 		mov	r0, #256
 1265 08b4 C5F20000 		movt	r0, 20480
 1266 08b8 4FF00C01 		mov	r1, #12
 1267 08bc 4FF00402 		mov	r2, #4
 1268 08c0 4FF00703 		mov	r3, #7
 1269 08c4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 571:../src/main.cpp **** 
 572:../src/main.cpp **** 	/* Enable ADC2 */
 573:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 1270              		.loc 1 573 0
 1271 08c8 4FF48070 		mov	r0, #256
 1272 08cc C5F20000 		movt	r0, 20480
 1273 08d0 4FF00101 		mov	r1, #1
 1274 08d4 FFF7FEFF 		bl	ADC_Cmd
 574:../src/main.cpp **** 
 575:../src/main.cpp **** 	/* wait for ADRDY */
 576:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 1275              		.loc 1 576 0
 1276 08d8 00BF     		nop
 1277              	.L26:
 1278              		.loc 1 576 0 is_stmt 0 discriminator 1
 1279 08da 4FF48070 		mov	r0, #256
 1280 08de C5F20000 		movt	r0, 20480
 1281 08e2 4FF00101 		mov	r1, #1
 1282 08e6 FFF7FEFF 		bl	ADC_GetFlagStatus
 1283 08ea 0346     		mov	r3, r0
 1284 08ec 002B     		cmp	r3, #0
 1285 08ee 14BF     		ite	ne
 1286 08f0 0023     		movne	r3, #0
 1287 08f2 0123     		moveq	r3, #1
 1288 08f4 DBB2     		uxtb	r3, r3
 1289 08f6 002B     		cmp	r3, #0
 1290 08f8 EFD1     		bne	.L26
 577:../src/main.cpp **** 
 578:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 579:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 1291              		.loc 1 579 0 is_stmt 1
 1292 08fa 4FF48070 		mov	r0, #256
 1293 08fe C5F20000 		movt	r0, 20480
 1294 0902 FFF7FEFF 		bl	ADC_StartConversion
 580:../src/main.cpp **** 
 581:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 1295              		.loc 1 581 0
 1296 0906 4FF00200 		mov	r0, #2
 1297 090a 4FF00101 		mov	r1, #1
 1298 090e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 582:../src/main.cpp **** 
 583:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 584:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1299              		.loc 1 584 0
 1300 0912 07F12003 		add	r3, r7, #32
 1301 0916 1846     		mov	r0, r3
 1302 0918 FFF7FEFF 		bl	DMA_StructInit
 585:../src/main.cpp **** 
 586:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 1303              		.loc 1 586 0
 1304 091c 4FF48160 		mov	r0, #1032
 1305 0920 C4F20200 		movt	r0, 16386
 1306 0924 FFF7FEFF 		bl	DMA_DeInit
 587:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 1307              		.loc 1 587 0
 1308 0928 4FF4A073 		mov	r3, #320
 1309 092c C5F20003 		movt	r3, 20480
 1310 0930 3B62     		str	r3, [r7, #32]
 588:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 1311              		.loc 1 588 0
 1312 0932 40F20003 		movw	r3, #:lower16:adc2_data
 1313 0936 C0F20003 		movt	r3, #:upper16:adc2_data
 1314 093a 7B62     		str	r3, [r7, #36]
 589:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1315              		.loc 1 589 0
 1316 093c 4FF00003 		mov	r3, #0
 1317 0940 BB62     		str	r3, [r7, #40]
 590:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 1318              		.loc 1 590 0
 1319 0942 4FF00403 		mov	r3, #4
 1320 0946 BB85     		strh	r3, [r7, #44]	@ movhi
 591:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1321              		.loc 1 591 0
 1322 0948 4FF00003 		mov	r3, #0
 1323 094c 3B63     		str	r3, [r7, #48]
 592:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1324              		.loc 1 592 0
 1325 094e 4FF08003 		mov	r3, #128
 1326 0952 7B63     		str	r3, [r7, #52]
 593:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1327              		.loc 1 593 0
 1328 0954 4FF40073 		mov	r3, #512
 1329 0958 BB63     		str	r3, [r7, #56]
 594:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1330              		.loc 1 594 0
 1331 095a 4FF40063 		mov	r3, #2048
 1332 095e FB63     		str	r3, [r7, #60]
 595:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1333              		.loc 1 595 0
 1334 0960 4FF02003 		mov	r3, #32
 1335 0964 3B64     		str	r3, [r7, #64]
 596:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1336              		.loc 1 596 0
 1337 0966 4FF40053 		mov	r3, #8192
 1338 096a 7B64     		str	r3, [r7, #68]
 597:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1339              		.loc 1 597 0
 1340 096c 4FF00003 		mov	r3, #0
 1341 0970 BB64     		str	r3, [r7, #72]
 598:../src/main.cpp **** 
 599:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 1342              		.loc 1 599 0
 1343 0972 07F12003 		add	r3, r7, #32
 1344 0976 4FF48160 		mov	r0, #1032
 1345 097a C4F20200 		movt	r0, 16386
 1346 097e 1946     		mov	r1, r3
 1347 0980 FFF7FEFF 		bl	DMA_Init
 600:../src/main.cpp **** 
 601:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 602:../src/main.cpp **** 
 603:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 1348              		.loc 1 603 0
 1349 0984 4FF03803 		mov	r3, #56
 1350 0988 87F84C30 		strb	r3, [r7, #76]
 604:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1351              		.loc 1 604 0
 1352 098c 4FF00203 		mov	r3, #2
 1353 0990 87F84D30 		strb	r3, [r7, #77]
 605:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1354              		.loc 1 605 0
 1355 0994 4FF00003 		mov	r3, #0
 1356 0998 87F84E30 		strb	r3, [r7, #78]
 606:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1357              		.loc 1 606 0
 1358 099c 4FF00103 		mov	r3, #1
 1359 09a0 87F84F30 		strb	r3, [r7, #79]
 607:../src/main.cpp **** 
 608:../src/main.cpp **** 	NVIC_Init(&nv);
 1360              		.loc 1 608 0
 1361 09a4 07F14C03 		add	r3, r7, #76
 1362 09a8 1846     		mov	r0, r3
 1363 09aa FFF7FEFF 		bl	NVIC_Init
 609:../src/main.cpp **** 
 610:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 1364              		.loc 1 610 0
 1365 09ae 4FF48160 		mov	r0, #1032
 1366 09b2 C4F20200 		movt	r0, 16386
 1367 09b6 4FF00201 		mov	r1, #2
 1368 09ba 4FF00102 		mov	r2, #1
 1369 09be FFF7FEFF 		bl	DMA_ITConfig
 611:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 1370              		.loc 1 611 0
 1371 09c2 4FF48160 		mov	r0, #1032
 1372 09c6 C4F20200 		movt	r0, 16386
 1373 09ca 4FF00101 		mov	r1, #1
 1374 09ce FFF7FEFF 		bl	DMA_Cmd
 612:../src/main.cpp **** 
 613:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 1375              		.loc 1 613 0
 1376 09d2 4FF48070 		mov	r0, #256
 1377 09d6 C5F20000 		movt	r0, 20480
 1378 09da 4FF00201 		mov	r1, #2
 1379 09de FFF7FEFF 		bl	ADC_DMAConfig
 614:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 1380              		.loc 1 614 0
 1381 09e2 4FF48070 		mov	r0, #256
 1382 09e6 C5F20000 		movt	r0, 20480
 1383 09ea 4FF00101 		mov	r1, #1
 1384 09ee FFF7FEFF 		bl	ADC_DMACmd
 1385              	.LBE9:
 615:../src/main.cpp **** }
 1386              		.loc 1 615 0
 1387 09f2 07F17007 		add	r7, r7, #112
 1388 09f6 BD46     		mov	sp, r7
 1389 09f8 80BD     		pop	{r7, pc}
 1390              		.cfi_endproc
 1391              	.LFE119:
 1393 09fa 00BF     		.align	2
 1394              		.global	_Z21battery_watchdog_initv
 1395              		.thumb
 1396              		.thumb_func
 1398              	_Z21battery_watchdog_initv:
 1399              	.LFB120:
 616:../src/main.cpp **** 
 617:../src/main.cpp **** void battery_watchdog_init(void)
 618:../src/main.cpp **** {
 1400              		.loc 1 618 0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 72
 1403              		@ frame_needed = 1, uses_anonymous_args = 0
 1404 09fc 80B5     		push	{r7, lr}
 1405              	.LCFI26:
 1406              		.cfi_def_cfa_offset 8
 1407              		.cfi_offset 7, -8
 1408              		.cfi_offset 14, -4
 1409 09fe 92B0     		sub	sp, sp, #72
 1410              	.LCFI27:
 1411              		.cfi_def_cfa_offset 80
 1412 0a00 00AF     		add	r7, sp, #0
 1413              	.LCFI28:
 1414              		.cfi_def_cfa_register 7
 1415              	.LBB10:
 619:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 620:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 621:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 622:../src/main.cpp **** 	/* Configure the ADC clock */
 623:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 1416              		.loc 1 623 0
 1417 0a02 4FF45050 		mov	r0, #13312
 1418 0a06 C1F20000 		movt	r0, 4096
 1419 0a0a FFF7FEFF 		bl	RCC_ADCCLKConfig
 624:../src/main.cpp **** 
 625:../src/main.cpp **** 	/* Enable ADC1 clock */
 626:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 1420              		.loc 1 626 0
 1421 0a0e 4FF00050 		mov	r0, #536870912
 1422 0a12 4FF00101 		mov	r1, #1
 1423 0a16 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 627:../src/main.cpp **** 	/* ADC Channel configuration */
 628:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 629:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 1424              		.loc 1 629 0
 1425 0a1a 4FF41010 		mov	r0, #2359296
 1426 0a1e 4FF00101 		mov	r1, #1
 1427 0a22 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 630:../src/main.cpp **** 
 631:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 632:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1428              		.loc 1 632 0
 1429 0a26 07F12803 		add	r3, r7, #40
 1430 0a2a 1846     		mov	r0, r3
 1431 0a2c FFF7FEFF 		bl	GPIO_StructInit
 633:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 1432              		.loc 1 633 0
 1433 0a30 42F20203 		movw	r3, #8194
 1434 0a34 BB62     		str	r3, [r7, #40]
 634:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1435              		.loc 1 634 0
 1436 0a36 4FF00303 		mov	r3, #3
 1437 0a3a 87F82C30 		strb	r3, [r7, #44]
 635:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1438              		.loc 1 635 0
 1439 0a3e 4FF00003 		mov	r3, #0
 1440 0a42 87F82F30 		strb	r3, [r7, #47]
 636:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1441              		.loc 1 636 0
 1442 0a46 07F12803 		add	r3, r7, #40
 1443 0a4a 4FF48060 		mov	r0, #1024
 1444 0a4e C4F60000 		movt	r0, 18432
 1445 0a52 1946     		mov	r1, r3
 1446 0a54 FFF7FEFF 		bl	GPIO_Init
 637:../src/main.cpp **** /*
 638:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 639:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 640:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 641:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 642:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 643:../src/main.cpp **** */
 644:../src/main.cpp **** 
 645:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1447              		.loc 1 645 0
 1448 0a58 07F10403 		add	r3, r7, #4
 1449 0a5c 1846     		mov	r0, r3
 1450 0a5e FFF7FEFF 		bl	ADC_StructInit
 646:../src/main.cpp **** 
 647:../src/main.cpp **** 	/* Calibration procedure */
 648:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 1451              		.loc 1 648 0
 1452 0a62 4FF48060 		mov	r0, #1024
 1453 0a66 C5F20000 		movt	r0, 20480
 1454 0a6a 4FF00101 		mov	r1, #1
 1455 0a6e FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 649:../src/main.cpp **** 
 650:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 651:../src/main.cpp **** 	int foo;
 652:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1456              		.loc 1 652 0
 1457 0a72 4FF00003 		mov	r3, #0
 1458 0a76 7B64     		str	r3, [r7, #68]
 1459 0a78 07E0     		b	.L28
 1460              	.L29:
 653:../src/main.cpp **** 	{
 654:../src/main.cpp **** 	  ++foo;
 1461              		.loc 1 654 0 discriminator 2
 1462 0a7a 7B6C     		ldr	r3, [r7, #68]
 1463 0a7c 03F10103 		add	r3, r3, #1
 1464 0a80 7B64     		str	r3, [r7, #68]
 652:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1465              		.loc 1 652 0 discriminator 2
 1466 0a82 7B6C     		ldr	r3, [r7, #68]
 1467 0a84 03F10103 		add	r3, r3, #1
 1468 0a88 7B64     		str	r3, [r7, #68]
 1469              	.L28:
 652:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1470              		.loc 1 652 0 is_stmt 0 discriminator 1
 1471 0a8a 7A6C     		ldr	r2, [r7, #68]
 1472 0a8c 47F6FF43 		movw	r3, #31999
 1473 0a90 9A42     		cmp	r2, r3
 1474 0a92 CCBF     		ite	gt
 1475 0a94 0023     		movgt	r3, #0
 1476 0a96 0123     		movle	r3, #1
 1477 0a98 DBB2     		uxtb	r3, r3
 1478 0a9a 002B     		cmp	r3, #0
 1479 0a9c EDD1     		bne	.L29
 655:../src/main.cpp **** 	}
 656:../src/main.cpp **** 
 657:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 1480              		.loc 1 657 0 is_stmt 1
 1481 0a9e 4FF48060 		mov	r0, #1024
 1482 0aa2 C5F20000 		movt	r0, 20480
 1483 0aa6 4FF00001 		mov	r1, #0
 1484 0aaa FFF7FEFF 		bl	ADC_SelectCalibrationMode
 658:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 1485              		.loc 1 658 0
 1486 0aae 4FF48060 		mov	r0, #1024
 1487 0ab2 C5F20000 		movt	r0, 20480
 1488 0ab6 FFF7FEFF 		bl	ADC_StartCalibration
 659:../src/main.cpp **** 
 660:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 1489              		.loc 1 660 0
 1490 0aba 00BF     		nop
 1491              	.L30:
 1492              		.loc 1 660 0 is_stmt 0 discriminator 1
 1493 0abc 4FF48060 		mov	r0, #1024
 1494 0ac0 C5F20000 		movt	r0, 20480
 1495 0ac4 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1496 0ac8 0346     		mov	r3, r0
 1497 0aca 002B     		cmp	r3, #0
 1498 0acc 0CBF     		ite	eq
 1499 0ace 0023     		moveq	r3, #0
 1500 0ad0 0123     		movne	r3, #1
 1501 0ad2 DBB2     		uxtb	r3, r3
 1502 0ad4 002B     		cmp	r3, #0
 1503 0ad6 F1D1     		bne	.L30
 661:../src/main.cpp **** 
 662:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1504              		.loc 1 662 0 is_stmt 1
 1505 0ad8 4FF00003 		mov	r3, #0
 1506 0adc 3B63     		str	r3, [r7, #48]
 663:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 1507              		.loc 1 663 0
 1508 0ade 4FF44033 		mov	r3, #196608
 1509 0ae2 7B63     		str	r3, [r7, #52]
 664:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 1510              		.loc 1 664 0
 1511 0ae4 4FF00003 		mov	r3, #0
 1512 0ae8 BB63     		str	r3, [r7, #56]
 665:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 1513              		.loc 1 665 0
 1514 0aea 4FF00003 		mov	r3, #0
 1515 0aee FB63     		str	r3, [r7, #60]
 666:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 1516              		.loc 1 666 0
 1517 0af0 4FF00003 		mov	r3, #0
 1518 0af4 87F84030 		strb	r3, [r7, #64]
 667:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 1519              		.loc 1 667 0
 1520 0af8 07F13003 		add	r3, r7, #48
 1521 0afc 4FF48060 		mov	r0, #1024
 1522 0b00 C5F20000 		movt	r0, 20480
 1523 0b04 1946     		mov	r1, r3
 1524 0b06 FFF7FEFF 		bl	ADC_CommonInit
 668:../src/main.cpp **** 
 669:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1525              		.loc 1 669 0
 1526 0b0a 4FF40053 		mov	r3, #8192
 1527 0b0e 7B60     		str	r3, [r7, #4]
 670:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1528              		.loc 1 670 0
 1529 0b10 4FF00003 		mov	r3, #0
 1530 0b14 BB60     		str	r3, [r7, #8]
 671:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1531              		.loc 1 671 0
 1532 0b16 4FF00003 		mov	r3, #0
 1533 0b1a FB60     		str	r3, [r7, #12]
 672:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1534              		.loc 1 672 0
 1535 0b1c 4FF00003 		mov	r3, #0
 1536 0b20 3B61     		str	r3, [r7, #16]
 673:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1537              		.loc 1 673 0
 1538 0b22 4FF00003 		mov	r3, #0
 1539 0b26 7B61     		str	r3, [r7, #20]
 674:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1540              		.loc 1 674 0
 1541 0b28 4FF00003 		mov	r3, #0
 1542 0b2c BB61     		str	r3, [r7, #24]
 675:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1543              		.loc 1 675 0
 1544 0b2e 4FF00003 		mov	r3, #0
 1545 0b32 FB61     		str	r3, [r7, #28]
 676:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1546              		.loc 1 676 0
 1547 0b34 4FF00203 		mov	r3, #2
 1548 0b38 87F82030 		strb	r3, [r7, #32]
 677:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 1549              		.loc 1 677 0
 1550 0b3c 07F10403 		add	r3, r7, #4
 1551 0b40 4FF48060 		mov	r0, #1024
 1552 0b44 C5F20000 		movt	r0, 20480
 1553 0b48 1946     		mov	r1, r3
 1554 0b4a FFF7FEFF 		bl	ADC_Init
 678:../src/main.cpp **** 
 679:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 680:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1555              		.loc 1 680 0
 1556 0b4e 4FF48060 		mov	r0, #1024
 1557 0b52 C5F20000 		movt	r0, 20480
 1558 0b56 4FF00101 		mov	r1, #1
 1559 0b5a 4FF00102 		mov	r2, #1
 1560 0b5e 4FF00703 		mov	r3, #7
 1561 0b62 FFF7FEFF 		bl	ADC_RegularChannelConfig
 681:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1562              		.loc 1 681 0
 1563 0b66 4FF48060 		mov	r0, #1024
 1564 0b6a C5F20000 		movt	r0, 20480
 1565 0b6e 4FF00501 		mov	r1, #5
 1566 0b72 4FF00202 		mov	r2, #2
 1567 0b76 4FF00703 		mov	r3, #7
 1568 0b7a FFF7FEFF 		bl	ADC_RegularChannelConfig
 682:../src/main.cpp **** 
 683:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 1569              		.loc 1 683 0
 1570 0b7e 4FF48060 		mov	r0, #1024
 1571 0b82 C5F20000 		movt	r0, 20480
 1572 0b86 4FF00101 		mov	r1, #1
 1573 0b8a FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 684:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 1574              		.loc 1 684 0
 1575 0b8e 4FF48060 		mov	r0, #1024
 1576 0b92 C5F20000 		movt	r0, 20480
 1577 0b96 4FF00501 		mov	r1, #5
 1578 0b9a FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 685:../src/main.cpp **** 
 686:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 687:../src/main.cpp **** 
 688:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 1579              		.loc 1 688 0
 1580 0b9e 4FF48060 		mov	r0, #1024
 1581 0ba2 C5F20000 		movt	r0, 20480
 1582 0ba6 4FF40061 		mov	r1, #2048
 1583 0baa 4FF00A02 		mov	r2, #10
 1584 0bae FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 689:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 1585              		.loc 1 689 0
 1586 0bb2 4FF48060 		mov	r0, #1024
 1587 0bb6 C5F20000 		movt	r0, 20480
 1588 0bba 4FF08001 		mov	r1, #128
 1589 0bbe 4FF00002 		mov	r2, #0
 1590 0bc2 FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 690:../src/main.cpp **** 
 691:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 1591              		.loc 1 691 0
 1592 0bc6 4FF48060 		mov	r0, #1024
 1593 0bca C5F20000 		movt	r0, 20480
 1594 0bce 4FF44001 		mov	r1, #12582912
 1595 0bd2 FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 692:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 693:../src/main.cpp **** 
 694:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 695:../src/main.cpp **** 
 696:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 697:../src/main.cpp **** 
 698:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 1596              		.loc 1 698 0
 1597 0bd6 4FF02F03 		mov	r3, #47
 1598 0bda 87F82430 		strb	r3, [r7, #36]
 699:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 1599              		.loc 1 699 0
 1600 0bde 4FF00003 		mov	r3, #0
 1601 0be2 87F82530 		strb	r3, [r7, #37]
 700:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1602              		.loc 1 700 0
 1603 0be6 4FF00003 		mov	r3, #0
 1604 0bea 87F82630 		strb	r3, [r7, #38]
 701:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1605              		.loc 1 701 0
 1606 0bee 4FF00103 		mov	r3, #1
 1607 0bf2 87F82730 		strb	r3, [r7, #39]
 702:../src/main.cpp **** 
 703:../src/main.cpp **** 	NVIC_Init(&nv);
 1608              		.loc 1 703 0
 1609 0bf6 07F12403 		add	r3, r7, #36
 1610 0bfa 1846     		mov	r0, r3
 1611 0bfc FFF7FEFF 		bl	NVIC_Init
 704:../src/main.cpp **** 
 705:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 706:../src/main.cpp **** 
 707:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 1612              		.loc 1 707 0
 1613 0c00 4FF48060 		mov	r0, #1024
 1614 0c04 C5F20000 		movt	r0, 20480
 1615 0c08 4FF4C071 		mov	r1, #384
 1616 0c0c 4FF00102 		mov	r2, #1
 1617 0c10 FFF7FEFF 		bl	ADC_ITConfig
 708:../src/main.cpp **** 
 709:../src/main.cpp **** 	/* Enable ADC3 */
 710:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 1618              		.loc 1 710 0
 1619 0c14 4FF48060 		mov	r0, #1024
 1620 0c18 C5F20000 		movt	r0, 20480
 1621 0c1c 4FF00101 		mov	r1, #1
 1622 0c20 FFF7FEFF 		bl	ADC_Cmd
 711:../src/main.cpp **** 
 712:../src/main.cpp **** 	/* wait for ADRDY */
 713:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 1623              		.loc 1 713 0
 1624 0c24 00BF     		nop
 1625              	.L31:
 1626              		.loc 1 713 0 is_stmt 0 discriminator 1
 1627 0c26 4FF48060 		mov	r0, #1024
 1628 0c2a C5F20000 		movt	r0, 20480
 1629 0c2e 4FF00101 		mov	r1, #1
 1630 0c32 FFF7FEFF 		bl	ADC_GetFlagStatus
 1631 0c36 0346     		mov	r3, r0
 1632 0c38 002B     		cmp	r3, #0
 1633 0c3a 14BF     		ite	ne
 1634 0c3c 0023     		movne	r3, #0
 1635 0c3e 0123     		moveq	r3, #1
 1636 0c40 DBB2     		uxtb	r3, r3
 1637 0c42 002B     		cmp	r3, #0
 1638 0c44 EFD1     		bne	.L31
 714:../src/main.cpp **** 
 715:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 716:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 1639              		.loc 1 716 0 is_stmt 1
 1640 0c46 4FF48060 		mov	r0, #1024
 1641 0c4a C5F20000 		movt	r0, 20480
 1642 0c4e FFF7FEFF 		bl	ADC_StartConversion
 1643              	.LBE10:
 717:../src/main.cpp **** }
 1644              		.loc 1 717 0
 1645 0c52 07F14807 		add	r7, r7, #72
 1646 0c56 BD46     		mov	sp, r7
 1647 0c58 80BD     		pop	{r7, pc}
 1648              		.cfi_endproc
 1649              	.LFE120:
 1651 0c5a 00BF     		.align	2
 1652              		.global	_Z9adc1_initv
 1653              		.thumb
 1654              		.thumb_func
 1656              	_Z9adc1_initv:
 1657              	.LFB121:
 718:../src/main.cpp **** 
 719:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 720:../src/main.cpp ****  * @Args: Nothing
 721:../src/main.cpp ****  * @Return Val: Nothing
 722:../src/main.cpp ****  */
 723:../src/main.cpp **** 
 724:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 725:../src/main.cpp **** {
 1658              		.loc 1 725 0
 1659              		.cfi_startproc
 1660              		@ args = 0, pretend = 0, frame = 72
 1661              		@ frame_needed = 1, uses_anonymous_args = 0
 1662 0c5c 80B5     		push	{r7, lr}
 1663              	.LCFI29:
 1664              		.cfi_def_cfa_offset 8
 1665              		.cfi_offset 7, -8
 1666              		.cfi_offset 14, -4
 1667 0c5e 92B0     		sub	sp, sp, #72
 1668              	.LCFI30:
 1669              		.cfi_def_cfa_offset 80
 1670 0c60 00AF     		add	r7, sp, #0
 1671              	.LCFI31:
 1672              		.cfi_def_cfa_register 7
 1673              	.LBB11:
 726:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 727:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 728:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 729:../src/main.cpp **** 	/* Configure the ADC clock */
 730:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1674              		.loc 1 730 0
 1675 0c62 4FF48870 		mov	r0, #272
 1676 0c66 FFF7FEFF 		bl	RCC_ADCCLKConfig
 731:../src/main.cpp **** 
 732:../src/main.cpp **** 	/* Enable ADC1 clock */
 733:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1677              		.loc 1 733 0
 1678 0c6a 4FF08050 		mov	r0, #268435456
 1679 0c6e 4FF00101 		mov	r1, #1
 1680 0c72 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 734:../src/main.cpp **** 	/* ADC Channel configuration */
 735:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 736:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1681              		.loc 1 736 0
 1682 0c76 4FF40030 		mov	r0, #131072
 1683 0c7a 4FF00101 		mov	r1, #1
 1684 0c7e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 737:../src/main.cpp **** 
 738:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 739:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1685              		.loc 1 739 0
 1686 0c82 4FF00403 		mov	r3, #4
 1687 0c86 BB62     		str	r3, [r7, #40]
 740:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1688              		.loc 1 740 0
 1689 0c88 4FF00303 		mov	r3, #3
 1690 0c8c 87F82C30 		strb	r3, [r7, #44]
 741:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1691              		.loc 1 741 0
 1692 0c90 4FF00003 		mov	r3, #0
 1693 0c94 87F82F30 		strb	r3, [r7, #47]
 742:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1694              		.loc 1 742 0
 1695 0c98 07F12803 		add	r3, r7, #40
 1696 0c9c 4FF09040 		mov	r0, #1207959552
 1697 0ca0 1946     		mov	r1, r3
 1698 0ca2 FFF7FEFF 		bl	GPIO_Init
 743:../src/main.cpp **** 
 744:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1699              		.loc 1 744 0
 1700 0ca6 07F10403 		add	r3, r7, #4
 1701 0caa 1846     		mov	r0, r3
 1702 0cac FFF7FEFF 		bl	ADC_StructInit
 745:../src/main.cpp **** 
 746:../src/main.cpp **** 	/* Calibration procedure */
 747:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1703              		.loc 1 747 0
 1704 0cb0 4FF0A040 		mov	r0, #1342177280
 1705 0cb4 4FF00101 		mov	r1, #1
 1706 0cb8 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 748:../src/main.cpp **** 
 749:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 750:../src/main.cpp **** 	int foo;
 751:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1707              		.loc 1 751 0
 1708 0cbc 4FF00003 		mov	r3, #0
 1709 0cc0 7B64     		str	r3, [r7, #68]
 1710 0cc2 07E0     		b	.L33
 1711              	.L34:
 752:../src/main.cpp **** 	{
 753:../src/main.cpp **** 	  ++foo;
 1712              		.loc 1 753 0 discriminator 2
 1713 0cc4 7B6C     		ldr	r3, [r7, #68]
 1714 0cc6 03F10103 		add	r3, r3, #1
 1715 0cca 7B64     		str	r3, [r7, #68]
 751:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1716              		.loc 1 751 0 discriminator 2
 1717 0ccc 7B6C     		ldr	r3, [r7, #68]
 1718 0cce 03F10103 		add	r3, r3, #1
 1719 0cd2 7B64     		str	r3, [r7, #68]
 1720              	.L33:
 751:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1721              		.loc 1 751 0 is_stmt 0 discriminator 1
 1722 0cd4 7A6C     		ldr	r2, [r7, #68]
 1723 0cd6 47F6FF43 		movw	r3, #31999
 1724 0cda 9A42     		cmp	r2, r3
 1725 0cdc CCBF     		ite	gt
 1726 0cde 0023     		movgt	r3, #0
 1727 0ce0 0123     		movle	r3, #1
 1728 0ce2 DBB2     		uxtb	r3, r3
 1729 0ce4 002B     		cmp	r3, #0
 1730 0ce6 EDD1     		bne	.L34
 754:../src/main.cpp **** 	}
 755:../src/main.cpp **** 
 756:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1731              		.loc 1 756 0 is_stmt 1
 1732 0ce8 4FF0A040 		mov	r0, #1342177280
 1733 0cec 4FF00001 		mov	r1, #0
 1734 0cf0 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 757:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1735              		.loc 1 757 0
 1736 0cf4 4FF0A040 		mov	r0, #1342177280
 1737 0cf8 FFF7FEFF 		bl	ADC_StartCalibration
 758:../src/main.cpp **** 
 759:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1738              		.loc 1 759 0
 1739 0cfc 00BF     		nop
 1740              	.L35:
 1741              		.loc 1 759 0 is_stmt 0 discriminator 1
 1742 0cfe 4FF0A040 		mov	r0, #1342177280
 1743 0d02 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1744 0d06 0346     		mov	r3, r0
 1745 0d08 002B     		cmp	r3, #0
 1746 0d0a 0CBF     		ite	eq
 1747 0d0c 0023     		moveq	r3, #0
 1748 0d0e 0123     		movne	r3, #1
 1749 0d10 DBB2     		uxtb	r3, r3
 1750 0d12 002B     		cmp	r3, #0
 1751 0d14 F3D1     		bne	.L35
 760:../src/main.cpp **** 
 761:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1752              		.loc 1 761 0 is_stmt 1
 1753 0d16 4FF00003 		mov	r3, #0
 1754 0d1a 3B63     		str	r3, [r7, #48]
 762:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1755              		.loc 1 762 0
 1756 0d1c 4FF00003 		mov	r3, #0
 1757 0d20 7B63     		str	r3, [r7, #52]
 763:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 1758              		.loc 1 763 0
 1759 0d22 4FF00003 		mov	r3, #0
 1760 0d26 BB63     		str	r3, [r7, #56]
 764:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 1761              		.loc 1 764 0
 1762 0d28 4FF00003 		mov	r3, #0
 1763 0d2c FB63     		str	r3, [r7, #60]
 765:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 1764              		.loc 1 765 0
 1765 0d2e 4FF00003 		mov	r3, #0
 1766 0d32 87F84030 		strb	r3, [r7, #64]
 766:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1767              		.loc 1 766 0
 1768 0d36 07F13003 		add	r3, r7, #48
 1769 0d3a 4FF0A040 		mov	r0, #1342177280
 1770 0d3e 1946     		mov	r1, r3
 1771 0d40 FFF7FEFF 		bl	ADC_CommonInit
 767:../src/main.cpp **** 
 768:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1772              		.loc 1 768 0
 1773 0d44 4FF40053 		mov	r3, #8192
 1774 0d48 7B60     		str	r3, [r7, #4]
 769:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1775              		.loc 1 769 0
 1776 0d4a 4FF00003 		mov	r3, #0
 1777 0d4e BB60     		str	r3, [r7, #8]
 770:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1778              		.loc 1 770 0
 1779 0d50 4FF00003 		mov	r3, #0
 1780 0d54 FB60     		str	r3, [r7, #12]
 771:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1781              		.loc 1 771 0
 1782 0d56 4FF00003 		mov	r3, #0
 1783 0d5a 3B61     		str	r3, [r7, #16]
 772:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1784              		.loc 1 772 0
 1785 0d5c 4FF00003 		mov	r3, #0
 1786 0d60 7B61     		str	r3, [r7, #20]
 773:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1787              		.loc 1 773 0
 1788 0d62 4FF00003 		mov	r3, #0
 1789 0d66 BB61     		str	r3, [r7, #24]
 774:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1790              		.loc 1 774 0
 1791 0d68 4FF00003 		mov	r3, #0
 1792 0d6c FB61     		str	r3, [r7, #28]
 775:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 1793              		.loc 1 775 0
 1794 0d6e 4FF00103 		mov	r3, #1
 1795 0d72 87F82030 		strb	r3, [r7, #32]
 776:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1796              		.loc 1 776 0
 1797 0d76 07F10403 		add	r3, r7, #4
 1798 0d7a 4FF0A040 		mov	r0, #1342177280
 1799 0d7e 1946     		mov	r1, r3
 1800 0d80 FFF7FEFF 		bl	ADC_Init
 777:../src/main.cpp **** 
 778:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 779:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1801              		.loc 1 779 0
 1802 0d84 4FF0A040 		mov	r0, #1342177280
 1803 0d88 4FF00301 		mov	r1, #3
 1804 0d8c 4FF00102 		mov	r2, #1
 1805 0d90 4FF00703 		mov	r3, #7
 1806 0d94 FFF7FEFF 		bl	ADC_RegularChannelConfig
 780:../src/main.cpp **** 
 781:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 782:../src/main.cpp **** 
 783:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 784:../src/main.cpp **** 
 785:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 1807              		.loc 1 785 0
 1808 0d98 4FF01203 		mov	r3, #18
 1809 0d9c 87F82430 		strb	r3, [r7, #36]
 786:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1810              		.loc 1 786 0
 1811 0da0 4FF00203 		mov	r3, #2
 1812 0da4 87F82530 		strb	r3, [r7, #37]
 787:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1813              		.loc 1 787 0
 1814 0da8 4FF00003 		mov	r3, #0
 1815 0dac 87F82630 		strb	r3, [r7, #38]
 788:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1816              		.loc 1 788 0
 1817 0db0 4FF00103 		mov	r3, #1
 1818 0db4 87F82730 		strb	r3, [r7, #39]
 789:../src/main.cpp **** 
 790:../src/main.cpp **** 	NVIC_Init(&nv);
 1819              		.loc 1 790 0
 1820 0db8 07F12403 		add	r3, r7, #36
 1821 0dbc 1846     		mov	r0, r3
 1822 0dbe FFF7FEFF 		bl	NVIC_Init
 791:../src/main.cpp **** 
 792:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 793:../src/main.cpp **** 
 794:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 1823              		.loc 1 794 0
 1824 0dc2 4FF0A040 		mov	r0, #1342177280
 1825 0dc6 4FF00401 		mov	r1, #4
 1826 0dca 4FF00102 		mov	r2, #1
 1827 0dce FFF7FEFF 		bl	ADC_ITConfig
 795:../src/main.cpp **** 
 796:../src/main.cpp **** 	/* Enable ADC1 */
 797:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1828              		.loc 1 797 0
 1829 0dd2 4FF0A040 		mov	r0, #1342177280
 1830 0dd6 4FF00101 		mov	r1, #1
 1831 0dda FFF7FEFF 		bl	ADC_Cmd
 798:../src/main.cpp **** 
 799:../src/main.cpp **** 	/* wait for ADRDY */
 800:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1832              		.loc 1 800 0
 1833 0dde 00BF     		nop
 1834              	.L36:
 1835              		.loc 1 800 0 is_stmt 0 discriminator 1
 1836 0de0 4FF0A040 		mov	r0, #1342177280
 1837 0de4 4FF00101 		mov	r1, #1
 1838 0de8 FFF7FEFF 		bl	ADC_GetFlagStatus
 1839 0dec 0346     		mov	r3, r0
 1840 0dee 002B     		cmp	r3, #0
 1841 0df0 14BF     		ite	ne
 1842 0df2 0023     		movne	r3, #0
 1843 0df4 0123     		moveq	r3, #1
 1844 0df6 DBB2     		uxtb	r3, r3
 1845 0df8 002B     		cmp	r3, #0
 1846 0dfa F1D1     		bne	.L36
 801:../src/main.cpp **** 
 802:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 803:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1847              		.loc 1 803 0 is_stmt 1
 1848 0dfc 4FF0A040 		mov	r0, #1342177280
 1849 0e00 FFF7FEFF 		bl	ADC_StartConversion
 1850              	.LBE11:
 804:../src/main.cpp **** }
 1851              		.loc 1 804 0
 1852 0e04 07F14807 		add	r7, r7, #72
 1853 0e08 BD46     		mov	sp, r7
 1854 0e0a 80BD     		pop	{r7, pc}
 1855              		.cfi_endproc
 1856              	.LFE121:
 1858              	.Letext0:
 1859              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 1860              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 1861              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 1862              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 1863              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 1864              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 1865              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 1866              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 1867              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 1868              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/cctDQ00D.s:25     .bss:00000000 led_iter
     /tmp/cctDQ00D.s:22     .bss:00000000 $d
     /tmp/cctDQ00D.s:32     .data:00000000 led_matrix
     /tmp/cctDQ00D.s:29     .data:00000000 $d
     /tmp/cctDQ00D.s:46     .bss:00000004 left_enc
     /tmp/cctDQ00D.s:52     .bss:0000002c right_enc
     /tmp/cctDQ00D.s:58     .bss:00000054 gyro_angle_x
     /tmp/cctDQ00D.s:64     .bss:00000058 gyro_bias_x
     /tmp/cctDQ00D.s:70     .bss:0000005c adcval
     /tmp/cctDQ00D.s:76     .bss:00000060 adcData
     /tmp/cctDQ00D.s:82     .bss:00000068 new_data
     /tmp/cctDQ00D.s:88     .bss:0000006c adc2_data
     /tmp/cctDQ00D.s:93     .bss:0000007c adc2_new_data
     /tmp/cctDQ00D.s:98     .bss:0000007d adc3_awd1
     /tmp/cctDQ00D.s:103    .bss:0000007e adc3_awd2
     /tmp/cctDQ00D.s:109    .bss:00000080 count
     /tmp/cctDQ00D.s:115    .bss:00000084 stage
     /tmp/cctDQ00D.s:118    .rodata:00000000 $d
     /tmp/cctDQ00D.s:119    .rodata:00000000 .LC0
     /tmp/cctDQ00D.s:122    .text:00000000 $t
     /tmp/cctDQ00D.s:127    .text:00000000 main
     /tmp/cctDQ00D.s:455    .text:00000260 _Z15brake_pins_initv
     /tmp/cctDQ00D.s:762    .text:00000444 _Z13adc1_init_DMAv
     /tmp/cctDQ00D.s:527    .text:000002d8 _Z13ping_pin_initv
     /tmp/cctDQ00D.s:612    .text:00000368 _Z20timer2_timebase_initv
     /tmp/cctDQ00D.s:298    .text:00000164 _Z19imu_update_ISR_initv
     /tmp/cctDQ00D.s:671    .text:000003bc _Z14calc_gyro_biasv
     /tmp/cctDQ00D.s:415    .rodata:00000014 .LC1
     /tmp/cctDQ00D.s:424    .text:00000248 L3GD20_TIMEOUT_UserCallback
     /tmp/cctDQ00D.s:753    .text:00000440 $d
     /tmp/cctDQ00D.s:757    .text:00000444 $t
     /tmp/cctDQ00D.s:1046   .text:000006b8 _Z13adc2_init_DMAv
     /tmp/cctDQ00D.s:1398   .text:000009fc _Z21battery_watchdog_initv
     /tmp/cctDQ00D.s:1656   .text:00000c5c _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.50a79f075d1434c9a8bd8ee500f78677
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.669975762de5793e6d2436455cef4d0e
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
_Z19LED_MATRIX_ISR_initv
_Z11pwm1_outputf
_Z11pwm2_outputf
TIM_GetCounter
printf
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
RCC_AHBPeriphClockCmd
GPIO_StructInit
GPIO_Init
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
