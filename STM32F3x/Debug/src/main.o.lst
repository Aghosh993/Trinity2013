   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.cpp"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	led_iter
  21              		.bss
  22              		.align	2
  25              	led_iter:
  26 0000 00000000 		.space	4
  27              		.global	led_matrix
  28              		.data
  29              		.align	2
  32              	led_matrix:
  33 0000 00020000 		.word	512
  34 0004 00010000 		.word	256
  35 0008 00800000 		.word	32768
  36 000c 00400000 		.word	16384
  37 0010 00200000 		.word	8192
  38 0014 00100000 		.word	4096
  39 0018 00080000 		.word	2048
  40 001c 00040000 		.word	1024
  41              		.global	left_enc
  42              		.bss
  43              		.align	2
  46              	left_enc:
  47 0004 00000000 		.space	40
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.global	right_enc
  49              		.align	2
  52              	right_enc:
  53 002c 00000000 		.space	40
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.global	gyro_angle_x
  55              		.align	2
  58              	gyro_angle_x:
  59 0054 00000000 		.space	4
  60              		.global	gyro_bias_x
  61              		.align	2
  64              	gyro_bias_x:
  65 0058 00000000 		.space	4
  66              		.global	adcval
  67              		.align	2
  70              	adcval:
  71 005c 00000000 		.space	4
  72              		.global	adcData
  73              		.align	2
  76              	adcData:
  77 0060 00000000 		.space	8
  77      00000000 
  78              		.global	new_data
  79              		.align	2
  82              	new_data:
  83 0068 00000000 		.space	4
  84              		.global	adc2_data
  85              		.align	2
  88              	adc2_data:
  89 006c 00000000 		.space	16
  89      00000000 
  89      00000000 
  89      00000000 
  90              		.global	adc2_new_data
  93              	adc2_new_data:
  94 007c 00       		.space	1
  95              		.global	adc3_awd1
  98              	adc3_awd1:
  99 007d 00       		.space	1
 100              		.global	adc3_awd2
 103              	adc3_awd2:
 104 007e 00       		.space	1
 105              		.global	count
 106 007f 00       		.align	2
 109              	count:
 110 0080 00000000 		.space	4
 111              		.global	stage
 112              		.align	2
 115              	stage:
 116 0084 00000000 		.space	4
 117              		.section	.rodata
 118              		.align	2
 119              	.LC0:
 120 0000 434F4D50 		.ascii	"COMP7 %d\012\015\000"
 120      37202564 
 120      0A0D00
 121              		.text
 122              		.align	2
 123              		.global	main
 124              		.thumb
 125              		.thumb_func
 127              	main:
 128              	.LFB111:
 129              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  18:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  19:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  20:../src/main.cpp ****  *
  21:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  22:../src/main.cpp ****  *
  23:../src/main.cpp ****  * TIM6: LED matrix ISR
  24:../src/main.cpp ****  * TIM7: Encoder update ISR
  25:../src/main.cpp ****  * TIM17: IMU update ISR
  26:../src/main.cpp ****  *
  27:../src/main.cpp ****  * Other pins/resources used:
  28:../src/main.cpp ****  *
  29:../src/main.cpp ****  * Analog: 	Channel 3 (PA2)
  30:../src/main.cpp ****  * 			Channel 4 (PA3)
  31:../src/main.cpp ****  * 			Channel 5 (PF4)
  32:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  33:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  34:../src/main.cpp ****  *
  35:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  36:../src/main.cpp ****  *
  37:../src/main.cpp ****  */
  38:../src/main.cpp **** 
  39:../src/main.cpp **** /*
  40:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  41:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  42:../src/main.cpp ****  */
  43:../src/main.cpp **** 
  44:../src/main.cpp **** volatile int led_iter;
  45:../src/main.cpp **** volatile int led_matrix[8] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_14, GPIO_Pin_13,
  46:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  47:../src/main.cpp **** 
  48:../src/main.cpp **** void imu_update_ISR_init(void);
  49:../src/main.cpp **** int16_t calc_gyro_bias(void);
  50:../src/main.cpp **** 
  51:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  52:../src/main.cpp **** 
  53:../src/main.cpp **** void adc1_init_DMA(void);
  54:../src/main.cpp **** void adc2_init_DMA(void);
  55:../src/main.cpp **** void battery_watchdog_init(void);
  56:../src/main.cpp **** void adc1_init(void);
  57:../src/main.cpp **** 
  58:../src/main.cpp **** void brake_pins_init(void);
  59:../src/main.cpp **** 
  60:../src/main.cpp **** void ping_pin_init(void);
  61:../src/main.cpp **** void timer2_timebase_init(void);
  62:../src/main.cpp **** 
  63:../src/main.cpp **** void comp_init(void);
  64:../src/main.cpp **** 
  65:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  66:../src/main.cpp **** 
  67:../src/main.cpp **** encoderState left_enc, right_enc;
  68:../src/main.cpp **** 
  69:../src/main.cpp **** volatile float gyro_angle_x;
  70:../src/main.cpp **** int gyro_bias_x, adcval;
  71:../src/main.cpp **** 
  72:../src/main.cpp **** //__IO uint16_t adcData[3];
  73:../src/main.cpp **** __IO uint32_t adcData[2];
  74:../src/main.cpp **** int new_data;
  75:../src/main.cpp **** 
  76:../src/main.cpp **** __IO uint32_t adc2_data[4];
  77:../src/main.cpp **** uint8_t adc2_new_data;
  78:../src/main.cpp **** 
  79:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
  80:../src/main.cpp **** 
  81:../src/main.cpp **** int count, stage;
  82:../src/main.cpp **** #define K_ULTRASONIC 0.001130f
  83:../src/main.cpp **** 
  84:../src/main.cpp **** // Initialize all encoder data structures to zero:
  85:../src/main.cpp **** 
  86:../src/main.cpp **** int main(void)
  87:../src/main.cpp **** {
 130              		.loc 1 87 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 8
 133              		@ frame_needed = 1, uses_anonymous_args = 0
 134 0000 80B5     		push	{r7, lr}
 135              	.LCFI0:
 136              		.cfi_def_cfa_offset 8
 137              		.cfi_offset 7, -8
 138              		.cfi_offset 14, -4
 139 0002 82B0     		sub	sp, sp, #8
 140              	.LCFI1:
 141              		.cfi_def_cfa_offset 16
 142 0004 00AF     		add	r7, sp, #0
 143              	.LCFI2:
 144              		.cfi_def_cfa_register 7
 145              	.LBB2:
  88:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 146              		.loc 1 88 0
 147 0006 FFF7FEFF 		bl	SystemInit
  89:../src/main.cpp **** 
  90:../src/main.cpp **** 	UART1_init(); // Debug bridge
 148              		.loc 1 90 0
 149 000a FFF7FEFF 		bl	_Z10UART1_initv
  91:../src/main.cpp **** 
  92:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
  93:../src/main.cpp **** 
  94:../src/main.cpp **** 	adcData[0] = 0;
 150              		.loc 1 94 0
 151 000e 40F20003 		movw	r3, #:lower16:adcData
 152 0012 C0F20003 		movt	r3, #:upper16:adcData
 153 0016 4FF00002 		mov	r2, #0
 154 001a 1A60     		str	r2, [r3, #0]
  95:../src/main.cpp **** 	adcData[1] = 0;
 155              		.loc 1 95 0
 156 001c 40F20003 		movw	r3, #:lower16:adcData
 157 0020 C0F20003 		movt	r3, #:upper16:adcData
 158 0024 4FF00002 		mov	r2, #0
 159 0028 5A60     		str	r2, [r3, #4]
  96:../src/main.cpp **** 
  97:../src/main.cpp **** 	uint8_t iter = 0;
 160              		.loc 1 97 0
 161 002a 4FF00003 		mov	r3, #0
 162 002e FB71     		strb	r3, [r7, #7]
  98:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 163              		.loc 1 98 0
 164 0030 4FF00003 		mov	r3, #0
 165 0034 FB71     		strb	r3, [r7, #7]
 166 0036 0CE0     		b	.L2
 167              	.L3:
  99:../src/main.cpp **** 	{
 100:../src/main.cpp **** 		adc2_data[iter] = 0;
 168              		.loc 1 100 0 discriminator 2
 169 0038 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 170 003a 40F20003 		movw	r3, #:lower16:adc2_data
 171 003e C0F20003 		movt	r3, #:upper16:adc2_data
 172 0042 4FF00001 		mov	r1, #0
 173 0046 43F82210 		str	r1, [r3, r2, lsl #2]
  98:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 174              		.loc 1 98 0 discriminator 2
 175 004a FB79     		ldrb	r3, [r7, #7]
 176 004c 03F10103 		add	r3, r3, #1
 177 0050 FB71     		strb	r3, [r7, #7]
 178              	.L2:
  98:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 179              		.loc 1 98 0 is_stmt 0 discriminator 1
 180 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 181 0054 062B     		cmp	r3, #6
 182 0056 8CBF     		ite	hi
 183 0058 0023     		movhi	r3, #0
 184 005a 0123     		movls	r3, #1
 185 005c DBB2     		uxtb	r3, r3
 186 005e 002B     		cmp	r3, #0
 187 0060 EAD1     		bne	.L3
 101:../src/main.cpp **** 	}
 102:../src/main.cpp **** 
 103:../src/main.cpp **** 	adc3_awd1 = 0;
 188              		.loc 1 103 0 is_stmt 1
 189 0062 40F20003 		movw	r3, #:lower16:adc3_awd1
 190 0066 C0F20003 		movt	r3, #:upper16:adc3_awd1
 191 006a 4FF00002 		mov	r2, #0
 192 006e 1A70     		strb	r2, [r3, #0]
 104:../src/main.cpp **** 	adc3_awd2 = 0;
 193              		.loc 1 104 0
 194 0070 40F20003 		movw	r3, #:lower16:adc3_awd2
 195 0074 C0F20003 		movt	r3, #:upper16:adc3_awd2
 196 0078 4FF00002 		mov	r2, #0
 197 007c 1A70     		strb	r2, [r3, #0]
 105:../src/main.cpp **** 
 106:../src/main.cpp **** 	count = 0;
 198              		.loc 1 106 0
 199 007e 40F20003 		movw	r3, #:lower16:count
 200 0082 C0F20003 		movt	r3, #:upper16:count
 201 0086 4FF00002 		mov	r2, #0
 202 008a 1A60     		str	r2, [r3, #0]
 107:../src/main.cpp **** 	stage = 0;
 203              		.loc 1 107 0
 204 008c 40F20003 		movw	r3, #:lower16:stage
 205 0090 C0F20003 		movt	r3, #:upper16:stage
 206 0094 4FF00002 		mov	r2, #0
 207 0098 1A60     		str	r2, [r3, #0]
 108:../src/main.cpp **** 
 109:../src/main.cpp **** 	/*
 110:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 111:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 112:../src/main.cpp **** 	 */
 113:../src/main.cpp **** 
 114:../src/main.cpp **** 
 115:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 208              		.loc 1 115 0
 209 009a 40F20000 		movw	r0, #:lower16:left_enc
 210 009e C0F20000 		movt	r0, #:upper16:left_enc
 211 00a2 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 116:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 212              		.loc 1 116 0
 213 00a6 40F20000 		movw	r0, #:lower16:right_enc
 214 00aa C0F20000 		movt	r0, #:upper16:right_enc
 215 00ae FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 117:../src/main.cpp **** 
 118:../src/main.cpp **** 	right_enc.position_target = 8400;
 216              		.loc 1 118 0
 217 00b2 40F20003 		movw	r3, #:lower16:right_enc
 218 00b6 C0F20003 		movt	r3, #:upper16:right_enc
 219 00ba 42F2D002 		movw	r2, #8400
 220 00be DA60     		str	r2, [r3, #12]
 119:../src/main.cpp ****  //	right_enc.speed_target = 8400;
 120:../src/main.cpp **** 
 121:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 122:../src/main.cpp **** 
 123:../src/main.cpp **** 	brake_pins_init();
 221              		.loc 1 123 0
 222 00c0 FFF7FEFF 		bl	_Z15brake_pins_initv
 124:../src/main.cpp **** 	pwm_out1_init(2000);
 223              		.loc 1 124 0
 224 00c4 4FF4FA60 		mov	r0, #2000
 225 00c8 FFF7FEFF 		bl	_Z13pwm_out1_initt
 125:../src/main.cpp **** 	pwm_out2_init(2000);
 226              		.loc 1 125 0
 227 00cc 4FF4FA60 		mov	r0, #2000
 228 00d0 FFF7FEFF 		bl	_Z13pwm_out2_initt
 126:../src/main.cpp **** 
 127:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 128:../src/main.cpp **** 
 129:../src/main.cpp **** 	TIM8_init_encoder();
 229              		.loc 1 129 0
 230 00d4 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 130:../src/main.cpp **** 	TIM4_init_encoder();
 231              		.loc 1 130 0
 232 00d8 FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 131:../src/main.cpp **** 
 132:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 133:../src/main.cpp **** 
 134:../src/main.cpp **** 	new_data = 0;
 233              		.loc 1 134 0
 234 00dc 40F20003 		movw	r3, #:lower16:new_data
 235 00e0 C0F20003 		movt	r3, #:upper16:new_data
 236 00e4 4FF00002 		mov	r2, #0
 237 00e8 1A60     		str	r2, [r3, #0]
 135:../src/main.cpp **** 	adc2_new_data = 0;
 238              		.loc 1 135 0
 239 00ea 40F20003 		movw	r3, #:lower16:adc2_new_data
 240 00ee C0F20003 		movt	r3, #:upper16:adc2_new_data
 241 00f2 4FF00002 		mov	r2, #0
 242 00f6 1A70     		strb	r2, [r3, #0]
 136:../src/main.cpp **** 
 137:../src/main.cpp **** 	// Initialize ADC1 DMA:
 138:../src/main.cpp **** 	adc1_init_DMA();
 243              		.loc 1 138 0
 244 00f8 FFF7FEFF 		bl	_Z13adc1_init_DMAv
 139:../src/main.cpp **** 
 140:../src/main.cpp **** 	// Initialize ADC2 DMA:
 141:../src/main.cpp **** 	adc2_init_DMA();
 245              		.loc 1 141 0
 246 00fc FFF7FEFF 		bl	_Z13adc2_init_DMAv
 142:../src/main.cpp **** //	battery_watchdog_init();
 143:../src/main.cpp **** 
 144:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 247              		.loc 1 144 0
 248 0100 FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 145:../src/main.cpp **** //	imu_update_ISR_init(); 		//IMU (gyro/acclerometer/magnetometer ISR)
 146:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 249              		.loc 1 146 0
 250 0104 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 147:../src/main.cpp **** 
 148:../src/main.cpp **** 	// Ping Sensor Init:
 149:../src/main.cpp **** 
 150:../src/main.cpp **** //	ping_pin_init();
 151:../src/main.cpp **** //	timer2_timebase_init();
 152:../src/main.cpp **** 
 153:../src/main.cpp **** //	imu_update_ISR_init();
 154:../src/main.cpp **** 
 155:../src/main.cpp **** 	comp_init();
 251              		.loc 1 155 0
 252 0108 FFF7FEFF 		bl	_Z9comp_initv
 156:../src/main.cpp **** 
 157:../src/main.cpp **** 	adcval = 0;
 253              		.loc 1 157 0
 254 010c 40F20003 		movw	r3, #:lower16:adcval
 255 0110 C0F20003 		movt	r3, #:upper16:adcval
 256 0114 4FF00002 		mov	r2, #0
 257 0118 1A60     		str	r2, [r3, #0]
 158:../src/main.cpp **** 	float mtr_out = 0;
 258              		.loc 1 158 0
 259 011a 4FF00003 		mov	r3, #0
 260 011e 3B60     		str	r3, [r7, #0]	@ float
 261              	.L4:
 159:../src/main.cpp **** 	char *mode;
 160:../src/main.cpp **** 
 161:../src/main.cpp **** //	right_enc.m = MODE_POSITION;
 162:../src/main.cpp **** 
 163:../src/main.cpp **** 	while(true)
 164:../src/main.cpp **** 	{
 165:../src/main.cpp **** //		pwm2_output(0.5f);						// Fixed 1 kHz, 50% duty output on PWM output #2
 166:../src/main.cpp **** 
 167:../src/main.cpp **** 		// Debug Statements:
 168:../src/main.cpp **** 
 169:../src/main.cpp **** //		printf("%d %d %d\n\r", adcData[0], adcData[1], adcval);
 170:../src/main.cpp **** //		printf("%d\n\r", adcval);
 171:../src/main.cpp **** //		if(right_enc.m == MODE_OPENLOOP)
 172:../src/main.cpp **** //		{
 173:../src/main.cpp **** //			pwm1_output(0.50f);
 174:../src/main.cpp **** //		}
 175:../src/main.cpp **** 
 176:../src/main.cpp **** //		mode = (right_enc.m == MODE_OPENLOOP) ? (char *)"Open" : ((right_enc.m == MODE_POSITION) ? (cha
 177:../src/main.cpp **** //		GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 178:../src/main.cpp **** //		GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 179:../src/main.cpp **** 		mtr_out = 0.6;//(float)adcData[0]/(float)4096;
 262              		.loc 1 179 0 discriminator 1
 263 0120 49F69A13 		movw	r3, #39322
 264 0124 C3F61973 		movt	r3, 16153
 265 0128 3B60     		str	r3, [r7, #0]	@ float
 180:../src/main.cpp **** 		pwm1_output(0.75);//mtr_out);
 266              		.loc 1 180 0 discriminator 1
 267 012a B6EE080A 		fconsts	s0, #104
 268 012e FFF7FEFF 		bl	_Z11pwm1_outputf
 181:../src/main.cpp **** 		pwm2_output(0.25);//1-mtr_out);
 269              		.loc 1 181 0 discriminator 1
 270 0132 B5EE000A 		fconsts	s0, #80
 271 0136 FFF7FEFF 		bl	_Z11pwm2_outputf
 182:../src/main.cpp **** 		printf("COMP7 %d\n\r", (int)COMP_GetOutputLevel(COMP_Selection_COMP7));
 272              		.loc 1 182 0 discriminator 1
 273 013a 4FF01800 		mov	r0, #24
 274 013e FFF7FEFF 		bl	COMP_GetOutputLevel
 275 0142 0346     		mov	r3, r0
 276 0144 40F20000 		movw	r0, #:lower16:.LC0
 277 0148 C0F20000 		movt	r0, #:upper16:.LC0
 278 014c 1946     		mov	r1, r3
 279 014e FFF7FEFF 		bl	printf
 163:../src/main.cpp **** 	while(true)
 280              		.loc 1 163 0 discriminator 1
 281 0152 E5E7     		b	.L4
 282              	.LBE2:
 283              		.cfi_endproc
 284              	.LFE111:
 286              		.align	2
 287              		.global	_Z19imu_update_ISR_initv
 288              		.thumb
 289              		.thumb_func
 291              	_Z19imu_update_ISR_initv:
 292              	.LFB112:
 183:../src/main.cpp **** //		printf("Left: %d | Right: %d\n\r", left_enc.position, right_enc.position);//, mode);
 184:../src/main.cpp **** //		printf("%3.3f Counter: %d\n\r", ((float)count*(float)0.5*(float)K_ULTRASONIC), TIM_GetCounter(T
 185:../src/main.cpp **** 
 186:../src/main.cpp **** //		printf("Bias_x: %d | Theta_x: %5.2f | Left: %d | Right: %d\n\r", gyro_bias_x, gyro_angle_x, lef
 187:../src/main.cpp **** //		printf("ADC Value on Channel 3: %d || Theta_x: %5.2f\n\r", adcval, gyro_angle_x);
 188:../src/main.cpp **** //		while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) != SET);
 189:../src/main.cpp **** //		DMA_ClearFlag(DMA1_FLAG_GL1 | DMA1_FLAG_TC1);
 190:../src/main.cpp **** 
 191:../src/main.cpp **** 		/*
 192:../src/main.cpp **** 		while(new_data==0);
 193:../src/main.cpp **** 		printf("ADC1: %4d || ADC2: %4d\n\r", adcData[0], adcData[1]);//adcData, (uint32_t)&(ADC1->DR));//
 194:../src/main.cpp **** 		new_data = 0;
 195:../src/main.cpp **** 
 196:../src/main.cpp **** 		*/
 197:../src/main.cpp **** 		/*
 198:../src/main.cpp **** 		printf("ADC1: ");
 199:../src/main.cpp **** 		while(new_data==0);
 200:../src/main.cpp **** 		for(iter=0;iter<2;++iter)
 201:../src/main.cpp **** 		{
 202:../src/main.cpp **** 			printf("%4d ", adcData[iter]);
 203:../src/main.cpp **** 		}
 204:../src/main.cpp **** 
 205:../src/main.cpp **** 		pwm1_output((float)adcData[0]/(float)4096);
 206:../src/main.cpp **** 
 207:../src/main.cpp **** 		printf("ADC2: ");
 208:../src/main.cpp **** 		while(adc2_new_data==0);
 209:../src/main.cpp **** 		for(iter=0;iter<4;++iter)
 210:../src/main.cpp **** 		{
 211:../src/main.cpp **** 			printf("%4d ", adc2_data[iter]);
 212:../src/main.cpp **** 		}
 213:../src/main.cpp **** 		*/
 214:../src/main.cpp **** //		printf("AWD1: %d, AWD2: %d, ADC: %d", adc3_awd1, adc3_awd2, ADC_GetConversionValue(ADC3));
 215:../src/main.cpp **** //		adc3_awd1 = 0;
 216:../src/main.cpp **** //		adc3_awd2 = 0;
 217:../src/main.cpp **** //		printf("\n\r");
 218:../src/main.cpp **** 
 219:../src/main.cpp **** 	}
 220:../src/main.cpp **** 	return 0; // We should never manage to get here...
 221:../src/main.cpp **** }
 222:../src/main.cpp **** 
 223:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 224:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 225:../src/main.cpp **** 
 226:../src/main.cpp **** void imu_update_ISR_init(void)
 227:../src/main.cpp **** {
 293              		.loc 1 227 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 24
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 0154 80B5     		push	{r7, lr}
 298              	.LCFI3:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 0156 86B0     		sub	sp, sp, #24
 303              	.LCFI4:
 304              		.cfi_def_cfa_offset 32
 305 0158 00AF     		add	r7, sp, #0
 306              	.LCFI5:
 307              		.cfi_def_cfa_register 7
 308              	.LBB3:
 228:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 229:../src/main.cpp **** 
 230:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 309              		.loc 1 230 0
 310 015a 4FF00703 		mov	r3, #7
 311 015e BB74     		strb	r3, [r7, #18]
 231:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 312              		.loc 1 231 0
 313 0160 4FF00003 		mov	r3, #0
 314 0164 FB74     		strb	r3, [r7, #19]
 232:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 315              		.loc 1 232 0
 316 0166 4FF00003 		mov	r3, #0
 317 016a 3B75     		strb	r3, [r7, #20]
 233:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 318              		.loc 1 233 0
 319 016c 4FF00003 		mov	r3, #0
 320 0170 7B75     		strb	r3, [r7, #21]
 234:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 321              		.loc 1 234 0
 322 0172 4FF00003 		mov	r3, #0
 323 0176 BB75     		strb	r3, [r7, #22]
 235:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 324              		.loc 1 235 0
 325 0178 4FF00003 		mov	r3, #0
 326 017c 7B74     		strb	r3, [r7, #17]
 236:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 327              		.loc 1 236 0
 328 017e 4FF00803 		mov	r3, #8
 329 0182 3B74     		strb	r3, [r7, #16]
 237:../src/main.cpp **** 
 238:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 330              		.loc 1 238 0
 331 0184 07F11003 		add	r3, r7, #16
 332 0188 1846     		mov	r0, r3
 333 018a FFF7FEFF 		bl	L3GD20_Init
 239:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 334              		.loc 1 239 0
 335 018e FFF7FEFF 		bl	_Z14calc_gyro_biasv
 336 0192 0346     		mov	r3, r0
 337 0194 1A46     		mov	r2, r3
 338 0196 40F20003 		movw	r3, #:lower16:gyro_bias_x
 339 019a C0F20003 		movt	r3, #:upper16:gyro_bias_x
 340 019e 1A60     		str	r2, [r3, #0]
 240:../src/main.cpp **** 
 241:../src/main.cpp **** 	gyro_angle_x = 0;
 341              		.loc 1 241 0
 342 01a0 40F20003 		movw	r3, #:lower16:gyro_angle_x
 343 01a4 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 344 01a8 4FF00002 		mov	r2, #0
 345 01ac 1A60     		str	r2, [r3, #0]	@ float
 242:../src/main.cpp **** 
 243:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 244:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 245:../src/main.cpp **** 
 246:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 346              		.loc 1 246 0
 347 01ae 4FF01A03 		mov	r3, #26
 348 01b2 3B73     		strb	r3, [r7, #12]
 247:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 349              		.loc 1 247 0
 350 01b4 4FF00003 		mov	r3, #0
 351 01b8 7B73     		strb	r3, [r7, #13]
 248:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 352              		.loc 1 248 0
 353 01ba 4FF00003 		mov	r3, #0
 354 01be BB73     		strb	r3, [r7, #14]
 249:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 355              		.loc 1 249 0
 356 01c0 4FF00103 		mov	r3, #1
 357 01c4 FB73     		strb	r3, [r7, #15]
 250:../src/main.cpp **** 
 251:../src/main.cpp **** 	NVIC_Init(&nv);
 358              		.loc 1 251 0
 359 01c6 07F10C03 		add	r3, r7, #12
 360 01ca 1846     		mov	r0, r3
 361 01cc FFF7FEFF 		bl	NVIC_Init
 252:../src/main.cpp **** 
 253:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 362              		.loc 1 253 0
 363 01d0 4FF48020 		mov	r0, #262144
 364 01d4 4FF00101 		mov	r1, #1
 365 01d8 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 254:../src/main.cpp **** 
 255:../src/main.cpp **** 	/*
 256:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 257:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 258:../src/main.cpp **** 	 * 	  Period -> ARR
 259:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 260:../src/main.cpp **** 	 */
 261:../src/main.cpp **** 
 262:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 366              		.loc 1 262 0
 367 01dc 40F28F13 		movw	r3, #399
 368 01e0 7B60     		str	r3, [r7, #4]
 263:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 369              		.loc 1 263 0
 370 01e2 41F61F43 		movw	r3, #7199
 371 01e6 3B80     		strh	r3, [r7, #0]	@ movhi
 264:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 372              		.loc 1 264 0
 373 01e8 4FF00003 		mov	r3, #0
 374 01ec BB72     		strb	r3, [r7, #10]
 265:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 375              		.loc 1 265 0
 376 01ee 4FF00003 		mov	r3, #0
 377 01f2 3B81     		strh	r3, [r7, #8]	@ movhi
 266:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 378              		.loc 1 266 0
 379 01f4 4FF00003 		mov	r3, #0
 380 01f8 7B80     		strh	r3, [r7, #2]	@ movhi
 267:../src/main.cpp **** 
 268:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 381              		.loc 1 268 0
 382 01fa 3B46     		mov	r3, r7
 383 01fc 4FF49040 		mov	r0, #18432
 384 0200 C4F20100 		movt	r0, 16385
 385 0204 1946     		mov	r1, r3
 386 0206 FFF7FEFF 		bl	TIM_TimeBaseInit
 269:../src/main.cpp **** 
 270:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 387              		.loc 1 270 0
 388 020a 4FF49040 		mov	r0, #18432
 389 020e C4F20100 		movt	r0, 16385
 390 0212 4FF00101 		mov	r1, #1
 391 0216 4FF00102 		mov	r2, #1
 392 021a FFF7FEFF 		bl	TIM_ITConfig
 271:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 393              		.loc 1 271 0
 394 021e 4FF49040 		mov	r0, #18432
 395 0222 C4F20100 		movt	r0, 16385
 396 0226 4FF00101 		mov	r1, #1
 397 022a FFF7FEFF 		bl	TIM_Cmd
 398              	.LBE3:
 272:../src/main.cpp **** }
 399              		.loc 1 272 0
 400 022e 07F11807 		add	r7, r7, #24
 401 0232 BD46     		mov	sp, r7
 402 0234 80BD     		pop	{r7, pc}
 403              		.cfi_endproc
 404              	.LFE112:
 406              		.section	.rodata
 407 000b 00       		.align	2
 408              	.LC1:
 409 000c 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 409      32302072 
 409      65616420 
 409      61747465 
 409      6D707420 
 410 003f 636F6465 		.ascii	"code!!!\012\015\000"
 410      2121210A 
 410      0D00
 411 0049 000000   		.text
 412 0236 00BF     		.align	2
 413              		.global	L3GD20_TIMEOUT_UserCallback
 414              		.thumb
 415              		.thumb_func
 417              	L3GD20_TIMEOUT_UserCallback:
 418              	.LFB113:
 273:../src/main.cpp **** 
 274:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 275:../src/main.cpp **** {
 419              		.loc 1 275 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 1, uses_anonymous_args = 0
 423 0238 80B5     		push	{r7, lr}
 424              	.LCFI6:
 425              		.cfi_def_cfa_offset 8
 426              		.cfi_offset 7, -8
 427              		.cfi_offset 14, -4
 428 023a 00AF     		add	r7, sp, #0
 429              	.LCFI7:
 430              		.cfi_def_cfa_register 7
 276:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 431              		.loc 1 276 0
 432 023c 40F20000 		movw	r0, #:lower16:.LC1
 433 0240 C0F20000 		movt	r0, #:upper16:.LC1
 434 0244 FFF7FEFF 		bl	printf
 277:../src/main.cpp **** 	return 0;
 435              		.loc 1 277 0
 436 0248 4FF00003 		mov	r3, #0
 278:../src/main.cpp **** }
 437              		.loc 1 278 0
 438 024c 1846     		mov	r0, r3
 439 024e 80BD     		pop	{r7, pc}
 440              		.cfi_endproc
 441              	.LFE113:
 443              		.align	2
 444              		.global	_Z15brake_pins_initv
 445              		.thumb
 446              		.thumb_func
 448              	_Z15brake_pins_initv:
 449              	.LFB114:
 279:../src/main.cpp **** 
 280:../src/main.cpp **** void brake_pins_init(void)
 281:../src/main.cpp **** {
 450              		.loc 1 281 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 8
 453              		@ frame_needed = 1, uses_anonymous_args = 0
 454 0250 80B5     		push	{r7, lr}
 455              	.LCFI8:
 456              		.cfi_def_cfa_offset 8
 457              		.cfi_offset 7, -8
 458              		.cfi_offset 14, -4
 459 0252 82B0     		sub	sp, sp, #8
 460              	.LCFI9:
 461              		.cfi_def_cfa_offset 16
 462 0254 00AF     		add	r7, sp, #0
 463              	.LCFI10:
 464              		.cfi_def_cfa_register 7
 465              	.LBB4:
 282:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 466              		.loc 1 282 0
 467 0256 4FF40010 		mov	r0, #2097152
 468 025a 4FF00101 		mov	r1, #1
 469 025e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 283:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 284:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 470              		.loc 1 284 0
 471 0262 3B46     		mov	r3, r7
 472 0264 1846     		mov	r0, r3
 473 0266 FFF7FEFF 		bl	GPIO_StructInit
 285:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 474              		.loc 1 285 0
 475 026a 4FF00C03 		mov	r3, #12
 476 026e 3B60     		str	r3, [r7, #0]
 286:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 477              		.loc 1 286 0
 478 0270 4FF00003 		mov	r3, #0
 479 0274 BB71     		strb	r3, [r7, #6]
 287:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 480              		.loc 1 287 0
 481 0276 4FF00103 		mov	r3, #1
 482 027a 3B71     		strb	r3, [r7, #4]
 288:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 483              		.loc 1 288 0
 484 027c 4FF00003 		mov	r3, #0
 485 0280 FB71     		strb	r3, [r7, #7]
 289:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 486              		.loc 1 289 0
 487 0282 4FF00203 		mov	r3, #2
 488 0286 7B71     		strb	r3, [r7, #5]
 290:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 489              		.loc 1 290 0
 490 0288 3B46     		mov	r3, r7
 491 028a 4FF48050 		mov	r0, #4096
 492 028e C4F60000 		movt	r0, 18432
 493 0292 1946     		mov	r1, r3
 494 0294 FFF7FEFF 		bl	GPIO_Init
 291:../src/main.cpp **** 
 292:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 495              		.loc 1 292 0
 496 0298 4FF48050 		mov	r0, #4096
 497 029c C4F60000 		movt	r0, 18432
 498 02a0 4FF00401 		mov	r1, #4
 499 02a4 4FF00002 		mov	r2, #0
 500 02a8 FFF7FEFF 		bl	GPIO_WriteBit
 293:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 501              		.loc 1 293 0
 502 02ac 4FF48050 		mov	r0, #4096
 503 02b0 C4F60000 		movt	r0, 18432
 504 02b4 4FF00801 		mov	r1, #8
 505 02b8 4FF00002 		mov	r2, #0
 506 02bc FFF7FEFF 		bl	GPIO_WriteBit
 507              	.LBE4:
 294:../src/main.cpp **** 
 295:../src/main.cpp **** 	/*
 296:../src/main.cpp **** 	 * 	a.GPIO_Mode = GPIO_Mode_OUT;
 297:../src/main.cpp **** 	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 298:../src/main.cpp **** 	a.GPIO_OType = GPIO_OType_PP;
 299:../src/main.cpp **** 	a.GPIO_Speed = GPIO_Speed_Level_2;
 300:../src/main.cpp **** 
 301:../src/main.cpp **** 	 */
 302:../src/main.cpp **** }
 508              		.loc 1 302 0
 509 02c0 07F10807 		add	r7, r7, #8
 510 02c4 BD46     		mov	sp, r7
 511 02c6 80BD     		pop	{r7, pc}
 512              		.cfi_endproc
 513              	.LFE114:
 515              		.align	2
 516              		.global	_Z13ping_pin_initv
 517              		.thumb
 518              		.thumb_func
 520              	_Z13ping_pin_initv:
 521              	.LFB115:
 303:../src/main.cpp **** /*
 304:../src/main.cpp ****  * PB0: OUTPUT
 305:../src/main.cpp ****  * PB1: INPUT
 306:../src/main.cpp ****  */
 307:../src/main.cpp **** void ping_pin_init(void)
 308:../src/main.cpp **** {
 522              		.loc 1 308 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 8
 525              		@ frame_needed = 1, uses_anonymous_args = 0
 526 02c8 80B5     		push	{r7, lr}
 527              	.LCFI11:
 528              		.cfi_def_cfa_offset 8
 529              		.cfi_offset 7, -8
 530              		.cfi_offset 14, -4
 531 02ca 82B0     		sub	sp, sp, #8
 532              	.LCFI12:
 533              		.cfi_def_cfa_offset 16
 534 02cc 00AF     		add	r7, sp, #0
 535              	.LCFI13:
 536              		.cfi_def_cfa_register 7
 537              	.LBB5:
 309:../src/main.cpp **** 
 310:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 538              		.loc 1 310 0
 539 02ce 4FF48020 		mov	r0, #262144
 540 02d2 4FF00101 		mov	r1, #1
 541 02d6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 311:../src/main.cpp **** 
 312:../src/main.cpp **** 	GPIO_InitTypeDef g;
 313:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 542              		.loc 1 313 0
 543 02da 4FF00003 		mov	r3, #0
 544 02de 3B71     		strb	r3, [r7, #4]
 314:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 545              		.loc 1 314 0
 546 02e0 4FF00103 		mov	r3, #1
 547 02e4 BB71     		strb	r3, [r7, #6]
 315:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1;
 548              		.loc 1 315 0
 549 02e6 4FF00203 		mov	r3, #2
 550 02ea 3B60     		str	r3, [r7, #0]
 316:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 551              		.loc 1 316 0
 552 02ec 4FF00003 		mov	r3, #0
 553 02f0 FB71     		strb	r3, [r7, #7]
 317:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 554              		.loc 1 317 0
 555 02f2 4FF00103 		mov	r3, #1
 556 02f6 7B71     		strb	r3, [r7, #5]
 318:../src/main.cpp **** 
 319:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 557              		.loc 1 319 0
 558 02f8 3B46     		mov	r3, r7
 559 02fa 4FF48060 		mov	r0, #1024
 560 02fe C4F60000 		movt	r0, 18432
 561 0302 1946     		mov	r1, r3
 562 0304 FFF7FEFF 		bl	GPIO_Init
 320:../src/main.cpp **** 
 321:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 563              		.loc 1 321 0
 564 0308 4FF00103 		mov	r3, #1
 565 030c 3B71     		strb	r3, [r7, #4]
 322:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 566              		.loc 1 322 0
 567 030e 4FF00003 		mov	r3, #0
 568 0312 BB71     		strb	r3, [r7, #6]
 323:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 569              		.loc 1 323 0
 570 0314 4FF00103 		mov	r3, #1
 571 0318 3B60     		str	r3, [r7, #0]
 324:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 572              		.loc 1 324 0
 573 031a 4FF00003 		mov	r3, #0
 574 031e FB71     		strb	r3, [r7, #7]
 325:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 575              		.loc 1 325 0
 576 0320 4FF00103 		mov	r3, #1
 577 0324 7B71     		strb	r3, [r7, #5]
 326:../src/main.cpp **** 
 327:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 578              		.loc 1 327 0
 579 0326 3B46     		mov	r3, r7
 580 0328 4FF48060 		mov	r0, #1024
 581 032c C4F60000 		movt	r0, 18432
 582 0330 1946     		mov	r1, r3
 583 0332 FFF7FEFF 		bl	GPIO_Init
 328:../src/main.cpp **** 
 329:../src/main.cpp **** //	EXTI_InitTypeDef e;
 330:../src/main.cpp **** 
 331:../src/main.cpp **** //	e.EXTI_Line = EXTI_Line1;
 332:../src/main.cpp **** //	e.EXTI_LineCmd = ENABLE;
 333:../src/main.cpp **** //	e.EXTI_Mode = EXTI_Mode_Interrupt;
 334:../src/main.cpp **** //	e.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //EXTI_Trigger_Rising;
 335:../src/main.cpp **** 
 336:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 584              		.loc 1 336 0
 585 0336 4FF00100 		mov	r0, #1
 586 033a 4FF00101 		mov	r1, #1
 587 033e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 337:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource1);
 588              		.loc 1 337 0
 589 0342 4FF00100 		mov	r0, #1
 590 0346 4FF00101 		mov	r1, #1
 591 034a FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 592              	.LBE5:
 338:../src/main.cpp **** 
 339:../src/main.cpp **** //	EXTI_Init(&e);
 340:../src/main.cpp **** 
 341:../src/main.cpp **** 	/*
 342:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 343:../src/main.cpp **** 
 344:../src/main.cpp **** 	nv.NVIC_IRQChannel = EXTI1_IRQn;
 345:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 346:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 347:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 348:../src/main.cpp **** 
 349:../src/main.cpp **** 	NVIC_Init(&nv);
 350:../src/main.cpp **** 	*/
 351:../src/main.cpp **** 
 352:../src/main.cpp **** }
 593              		.loc 1 352 0
 594 034e 07F10807 		add	r7, r7, #8
 595 0352 BD46     		mov	sp, r7
 596 0354 80BD     		pop	{r7, pc}
 597              		.cfi_endproc
 598              	.LFE115:
 600 0356 00BF     		.align	2
 601              		.global	_Z20timer2_timebase_initv
 602              		.thumb
 603              		.thumb_func
 605              	_Z20timer2_timebase_initv:
 606              	.LFB116:
 353:../src/main.cpp **** 
 354:../src/main.cpp **** void timer2_timebase_init(void)
 355:../src/main.cpp **** {
 607              		.loc 1 355 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 16
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611 0358 80B5     		push	{r7, lr}
 612              	.LCFI14:
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 7, -8
 615              		.cfi_offset 14, -4
 616 035a 84B0     		sub	sp, sp, #16
 617              	.LCFI15:
 618              		.cfi_def_cfa_offset 24
 619 035c 00AF     		add	r7, sp, #0
 620              	.LCFI16:
 621              		.cfi_def_cfa_register 7
 622              	.LBB6:
 356:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 357:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 623              		.loc 1 357 0
 624 035e 4FF00100 		mov	r0, #1
 625 0362 4FF00101 		mov	r1, #1
 626 0366 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 358:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 627              		.loc 1 358 0
 628 036a 44F24F63 		movw	r3, #17999
 629 036e BB60     		str	r3, [r7, #8]
 359:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 630              		.loc 1 359 0
 631 0370 4FF00003 		mov	r3, #0
 632 0374 BB73     		strb	r3, [r7, #14]
 360:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 633              		.loc 1 360 0
 634 0376 4FF04703 		mov	r3, #71
 635 037a BB80     		strh	r3, [r7, #4]	@ movhi
 361:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 636              		.loc 1 361 0
 637 037c 4FF00003 		mov	r3, #0
 638 0380 BB81     		strh	r3, [r7, #12]	@ movhi
 362:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 639              		.loc 1 362 0
 640 0382 4FF00003 		mov	r3, #0
 641 0386 FB80     		strh	r3, [r7, #6]	@ movhi
 363:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 642              		.loc 1 363 0
 643 0388 07F10403 		add	r3, r7, #4
 644 038c 4FF08040 		mov	r0, #1073741824
 645 0390 1946     		mov	r1, r3
 646 0392 FFF7FEFF 		bl	TIM_TimeBaseInit
 364:../src/main.cpp **** //	TIM_Cmd(TIM2, ENABLE);
 365:../src/main.cpp **** 
 366:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 647              		.loc 1 366 0
 648 0396 4FF08040 		mov	r0, #1073741824
 649 039a 4FF00001 		mov	r1, #0
 650 039e FFF7FEFF 		bl	TIM_SetCounter
 651              	.LBE6:
 367:../src/main.cpp **** }
 652              		.loc 1 367 0
 653 03a2 07F11007 		add	r7, r7, #16
 654 03a6 BD46     		mov	sp, r7
 655 03a8 80BD     		pop	{r7, pc}
 656              		.cfi_endproc
 657              	.LFE116:
 659 03aa 00BF     		.align	2
 660              		.global	_Z9comp_initv
 661              		.thumb
 662              		.thumb_func
 664              	_Z9comp_initv:
 665              	.LFB117:
 368:../src/main.cpp **** 
 369:../src/main.cpp **** /*
 370:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 371:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 372:../src/main.cpp ****  * 			Output->	PB9
 373:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 374:../src/main.cpp ****  * 			Output->	PA8
 375:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 376:../src/main.cpp ****  * 			Output->	PB1
 377:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 378:../src/main.cpp ****  * 			Output->	PC2
 379:../src/main.cpp ****  */
 380:../src/main.cpp **** 
 381:../src/main.cpp **** void comp_init(void)
 382:../src/main.cpp **** {
 666              		.loc 1 382 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 40
 669              		@ frame_needed = 1, uses_anonymous_args = 0
 670 03ac 80B5     		push	{r7, lr}
 671              	.LCFI17:
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 7, -8
 674              		.cfi_offset 14, -4
 675 03ae 8AB0     		sub	sp, sp, #40
 676              	.LCFI18:
 677              		.cfi_def_cfa_offset 48
 678 03b0 00AF     		add	r7, sp, #0
 679              	.LCFI19:
 680              		.cfi_def_cfa_register 7
 681              	.LBB7:
 383:../src/main.cpp **** 	//COMP2 Init:
 384:../src/main.cpp **** 
 385:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 682              		.loc 1 385 0
 683 03b2 4FF00100 		mov	r0, #1
 684 03b6 4FF00101 		mov	r1, #1
 685 03ba FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 386:../src/main.cpp **** 
 387:../src/main.cpp **** 	GPIO_InitTypeDef g;
 388:../src/main.cpp **** 
 389:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 686              		.loc 1 389 0
 687 03be 4FF00303 		mov	r3, #3
 688 03c2 87F82430 		strb	r3, [r7, #36]
 390:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 689              		.loc 1 390 0
 690 03c6 4FF00003 		mov	r3, #0
 691 03ca 87F82730 		strb	r3, [r7, #39]
 391:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 692              		.loc 1 391 0
 693 03ce 4FF08003 		mov	r3, #128
 694 03d2 3B62     		str	r3, [r7, #32]
 392:../src/main.cpp **** 
 393:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 695              		.loc 1 393 0
 696 03d4 4FF40030 		mov	r0, #131072
 697 03d8 4FF00101 		mov	r1, #1
 698 03dc FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 394:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 699              		.loc 1 394 0
 700 03e0 07F12003 		add	r3, r7, #32
 701 03e4 4FF09040 		mov	r0, #1207959552
 702 03e8 1946     		mov	r1, r3
 703 03ea FFF7FEFF 		bl	GPIO_Init
 395:../src/main.cpp **** 
 396:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 704              		.loc 1 396 0
 705 03ee 4FF00203 		mov	r3, #2
 706 03f2 87F82430 		strb	r3, [r7, #36]
 397:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 707              		.loc 1 397 0
 708 03f6 4FF00003 		mov	r3, #0
 709 03fa 87F82630 		strb	r3, [r7, #38]
 398:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 710              		.loc 1 398 0
 711 03fe 4FF00003 		mov	r3, #0
 712 0402 87F82730 		strb	r3, [r7, #39]
 399:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 713              		.loc 1 399 0
 714 0406 4FF40073 		mov	r3, #512
 715 040a 3B62     		str	r3, [r7, #32]
 400:../src/main.cpp **** 
 401:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 716              		.loc 1 401 0
 717 040c 4FF48060 		mov	r0, #1024
 718 0410 C4F60000 		movt	r0, 18432
 719 0414 4FF00901 		mov	r1, #9
 720 0418 4FF00802 		mov	r2, #8
 721 041c FFF7FEFF 		bl	GPIO_PinAFConfig
 402:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 722              		.loc 1 402 0
 723 0420 07F12003 		add	r3, r7, #32
 724 0424 4FF48060 		mov	r0, #1024
 725 0428 C4F60000 		movt	r0, 18432
 726 042c 1946     		mov	r1, r3
 727 042e FFF7FEFF 		bl	GPIO_Init
 403:../src/main.cpp **** 
 404:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 728              		.loc 1 404 0
 729 0432 4FF00000 		mov	r0, #0
 730 0436 FFF7FEFF 		bl	RCC_PCLK2Config
 405:../src/main.cpp **** 
 406:../src/main.cpp **** 	COMP_InitTypeDef c;
 407:../src/main.cpp **** 
 408:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 731              		.loc 1 408 0
 732 043a 4FF03003 		mov	r3, #48
 733 043e 7B60     		str	r3, [r7, #4]
 409:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 734              		.loc 1 409 0
 735 0440 4FF00003 		mov	r3, #0
 736 0444 BB60     		str	r3, [r7, #8]
 410:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 737              		.loc 1 410 0
 738 0446 4FF00403 		mov	r3, #4
 739 044a FB61     		str	r3, [r7, #28]
 411:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 740              		.loc 1 411 0
 741 044c 4FF00003 		mov	r3, #0
 742 0450 FB60     		str	r3, [r7, #12]
 412:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 743              		.loc 1 412 0
 744 0452 4FF00003 		mov	r3, #0
 745 0456 7B61     		str	r3, [r7, #20]
 413:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 746              		.loc 1 413 0
 747 0458 4FF48033 		mov	r3, #65536
 748 045c BB61     		str	r3, [r7, #24]
 414:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 749              		.loc 1 414 0
 750 045e 4FF00003 		mov	r3, #0
 751 0462 3B61     		str	r3, [r7, #16]
 415:../src/main.cpp **** 
 416:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 752              		.loc 1 416 0
 753 0464 07F10403 		add	r3, r7, #4
 754 0468 4FF00400 		mov	r0, #4
 755 046c 1946     		mov	r1, r3
 756 046e FFF7FEFF 		bl	COMP_Init
 417:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 757              		.loc 1 417 0
 758 0472 4FF00400 		mov	r0, #4
 759 0476 4FF00101 		mov	r1, #1
 760 047a FFF7FEFF 		bl	COMP_Cmd
 418:../src/main.cpp **** 
 419:../src/main.cpp **** 	//COMP3 Init:
 420:../src/main.cpp **** 
 421:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 761              		.loc 1 421 0
 762 047e 4FF00100 		mov	r0, #1
 763 0482 4FF00101 		mov	r1, #1
 764 0486 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 422:../src/main.cpp **** 
 423:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 765              		.loc 1 423 0
 766 048a 4FF00303 		mov	r3, #3
 767 048e 87F82430 		strb	r3, [r7, #36]
 424:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 768              		.loc 1 424 0
 769 0492 4FF00003 		mov	r3, #0
 770 0496 87F82730 		strb	r3, [r7, #39]
 425:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 771              		.loc 1 425 0
 772 049a 4FF48043 		mov	r3, #16384
 773 049e 3B62     		str	r3, [r7, #32]
 426:../src/main.cpp **** 
 427:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 774              		.loc 1 427 0
 775 04a0 4FF4C020 		mov	r0, #393216
 776 04a4 4FF00101 		mov	r1, #1
 777 04a8 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 428:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 778              		.loc 1 428 0
 779 04ac 07F12003 		add	r3, r7, #32
 780 04b0 4FF48060 		mov	r0, #1024
 781 04b4 C4F60000 		movt	r0, 18432
 782 04b8 1946     		mov	r1, r3
 783 04ba FFF7FEFF 		bl	GPIO_Init
 429:../src/main.cpp **** 
 430:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 784              		.loc 1 430 0
 785 04be 4FF00203 		mov	r3, #2
 786 04c2 87F82430 		strb	r3, [r7, #36]
 431:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 787              		.loc 1 431 0
 788 04c6 4FF00003 		mov	r3, #0
 789 04ca 87F82630 		strb	r3, [r7, #38]
 432:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 790              		.loc 1 432 0
 791 04ce 4FF00003 		mov	r3, #0
 792 04d2 87F82730 		strb	r3, [r7, #39]
 433:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 793              		.loc 1 433 0
 794 04d6 4FF48073 		mov	r3, #256
 795 04da 3B62     		str	r3, [r7, #32]
 434:../src/main.cpp **** 
 435:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 796              		.loc 1 435 0
 797 04dc 4FF40060 		mov	r0, #2048
 798 04e0 C4F60000 		movt	r0, 18432
 799 04e4 4FF00801 		mov	r1, #8
 800 04e8 4FF00702 		mov	r2, #7
 801 04ec FFF7FEFF 		bl	GPIO_PinAFConfig
 436:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 802              		.loc 1 436 0
 803 04f0 07F12003 		add	r3, r7, #32
 804 04f4 4FF40060 		mov	r0, #2048
 805 04f8 C4F60000 		movt	r0, 18432
 806 04fc 1946     		mov	r1, r3
 807 04fe FFF7FEFF 		bl	GPIO_Init
 437:../src/main.cpp **** 
 438:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 808              		.loc 1 438 0
 809 0502 4FF00000 		mov	r0, #0
 810 0506 FFF7FEFF 		bl	RCC_PCLK2Config
 439:../src/main.cpp **** 
 440:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 811              		.loc 1 440 0
 812 050a 4FF03003 		mov	r3, #48
 813 050e 7B60     		str	r3, [r7, #4]
 441:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 814              		.loc 1 441 0
 815 0510 4FF00003 		mov	r3, #0
 816 0514 BB60     		str	r3, [r7, #8]
 442:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 817              		.loc 1 442 0
 818 0516 4FF00403 		mov	r3, #4
 819 051a FB61     		str	r3, [r7, #28]
 443:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 820              		.loc 1 443 0
 821 051c 4FF00003 		mov	r3, #0
 822 0520 FB60     		str	r3, [r7, #12]
 444:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 823              		.loc 1 444 0
 824 0522 4FF00003 		mov	r3, #0
 825 0526 7B61     		str	r3, [r7, #20]
 445:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 826              		.loc 1 445 0
 827 0528 4FF48033 		mov	r3, #65536
 828 052c BB61     		str	r3, [r7, #24]
 446:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 829              		.loc 1 446 0
 830 052e 4FF00003 		mov	r3, #0
 831 0532 3B61     		str	r3, [r7, #16]
 447:../src/main.cpp **** 
 448:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 832              		.loc 1 448 0
 833 0534 07F10403 		add	r3, r7, #4
 834 0538 4FF00800 		mov	r0, #8
 835 053c 1946     		mov	r1, r3
 836 053e FFF7FEFF 		bl	COMP_Init
 449:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 837              		.loc 1 449 0
 838 0542 4FF00800 		mov	r0, #8
 839 0546 4FF00101 		mov	r1, #1
 840 054a FFF7FEFF 		bl	COMP_Cmd
 450:../src/main.cpp **** 
 451:../src/main.cpp **** 	//COMP4 Init:
 452:../src/main.cpp **** 
 453:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 841              		.loc 1 453 0
 842 054e 4FF00100 		mov	r0, #1
 843 0552 4FF00101 		mov	r1, #1
 844 0556 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 454:../src/main.cpp **** 
 455:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 845              		.loc 1 455 0
 846 055a 4FF00303 		mov	r3, #3
 847 055e 87F82430 		strb	r3, [r7, #36]
 456:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 848              		.loc 1 456 0
 849 0562 4FF00003 		mov	r3, #0
 850 0566 87F82730 		strb	r3, [r7, #39]
 457:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 851              		.loc 1 457 0
 852 056a 4FF08003 		mov	r3, #128
 853 056e 3B62     		str	r3, [r7, #32]
 458:../src/main.cpp **** 
 459:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 854              		.loc 1 459 0
 855 0570 4FF41010 		mov	r0, #2359296
 856 0574 4FF00101 		mov	r1, #1
 857 0578 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 460:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 858              		.loc 1 460 0
 859 057c 07F12003 		add	r3, r7, #32
 860 0580 4FF48050 		mov	r0, #4096
 861 0584 C4F60000 		movt	r0, 18432
 862 0588 1946     		mov	r1, r3
 863 058a FFF7FEFF 		bl	GPIO_Init
 461:../src/main.cpp **** 
 462:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 864              		.loc 1 462 0
 865 058e 4FF00203 		mov	r3, #2
 866 0592 87F82430 		strb	r3, [r7, #36]
 463:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 867              		.loc 1 463 0
 868 0596 4FF00003 		mov	r3, #0
 869 059a 87F82630 		strb	r3, [r7, #38]
 464:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 870              		.loc 1 464 0
 871 059e 4FF00003 		mov	r3, #0
 872 05a2 87F82730 		strb	r3, [r7, #39]
 465:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 873              		.loc 1 465 0
 874 05a6 4FF00203 		mov	r3, #2
 875 05aa 3B62     		str	r3, [r7, #32]
 466:../src/main.cpp **** 
 467:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 876              		.loc 1 467 0
 877 05ac 4FF48060 		mov	r0, #1024
 878 05b0 C4F60000 		movt	r0, 18432
 879 05b4 4FF00101 		mov	r1, #1
 880 05b8 4FF00802 		mov	r2, #8
 881 05bc FFF7FEFF 		bl	GPIO_PinAFConfig
 468:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 882              		.loc 1 468 0
 883 05c0 07F12003 		add	r3, r7, #32
 884 05c4 4FF48060 		mov	r0, #1024
 885 05c8 C4F60000 		movt	r0, 18432
 886 05cc 1946     		mov	r1, r3
 887 05ce FFF7FEFF 		bl	GPIO_Init
 469:../src/main.cpp **** 
 470:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 888              		.loc 1 470 0
 889 05d2 4FF00000 		mov	r0, #0
 890 05d6 FFF7FEFF 		bl	RCC_PCLK2Config
 471:../src/main.cpp **** 
 472:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 891              		.loc 1 472 0
 892 05da 4FF03003 		mov	r3, #48
 893 05de 7B60     		str	r3, [r7, #4]
 473:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 894              		.loc 1 473 0
 895 05e0 4FF08003 		mov	r3, #128
 896 05e4 BB60     		str	r3, [r7, #8]
 474:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 897              		.loc 1 474 0
 898 05e6 4FF00403 		mov	r3, #4
 899 05ea FB61     		str	r3, [r7, #28]
 475:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 900              		.loc 1 475 0
 901 05ec 4FF00003 		mov	r3, #0
 902 05f0 FB60     		str	r3, [r7, #12]
 476:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 903              		.loc 1 476 0
 904 05f2 4FF00003 		mov	r3, #0
 905 05f6 7B61     		str	r3, [r7, #20]
 477:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 906              		.loc 1 477 0
 907 05f8 4FF48033 		mov	r3, #65536
 908 05fc BB61     		str	r3, [r7, #24]
 478:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 909              		.loc 1 478 0
 910 05fe 4FF00003 		mov	r3, #0
 911 0602 3B61     		str	r3, [r7, #16]
 479:../src/main.cpp **** 
 480:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 912              		.loc 1 480 0
 913 0604 07F10403 		add	r3, r7, #4
 914 0608 4FF00C00 		mov	r0, #12
 915 060c 1946     		mov	r1, r3
 916 060e FFF7FEFF 		bl	COMP_Init
 481:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 917              		.loc 1 481 0
 918 0612 4FF00C00 		mov	r0, #12
 919 0616 4FF00101 		mov	r1, #1
 920 061a FFF7FEFF 		bl	COMP_Cmd
 482:../src/main.cpp **** 
 483:../src/main.cpp **** 	//COMP7 Init:
 484:../src/main.cpp **** 
 485:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 921              		.loc 1 485 0
 922 061e 4FF00100 		mov	r0, #1
 923 0622 4FF00101 		mov	r1, #1
 924 0626 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 486:../src/main.cpp **** 
 487:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 925              		.loc 1 487 0
 926 062a 4FF00303 		mov	r3, #3
 927 062e 87F82430 		strb	r3, [r7, #36]
 488:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 928              		.loc 1 488 0
 929 0632 4FF00003 		mov	r3, #0
 930 0636 87F82730 		strb	r3, [r7, #39]
 489:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 931              		.loc 1 489 0
 932 063a 4FF00203 		mov	r3, #2
 933 063e 3B62     		str	r3, [r7, #32]
 490:../src/main.cpp **** 
 491:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 934              		.loc 1 491 0
 935 0640 4FF40020 		mov	r0, #524288
 936 0644 4FF00101 		mov	r1, #1
 937 0648 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 492:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 938              		.loc 1 492 0
 939 064c 07F12003 		add	r3, r7, #32
 940 0650 4FF40060 		mov	r0, #2048
 941 0654 C4F60000 		movt	r0, 18432
 942 0658 1946     		mov	r1, r3
 943 065a FFF7FEFF 		bl	GPIO_Init
 493:../src/main.cpp **** 
 494:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 944              		.loc 1 494 0
 945 065e 4FF00203 		mov	r3, #2
 946 0662 87F82430 		strb	r3, [r7, #36]
 495:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 947              		.loc 1 495 0
 948 0666 4FF00003 		mov	r3, #0
 949 066a 87F82630 		strb	r3, [r7, #38]
 496:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 950              		.loc 1 496 0
 951 066e 4FF00003 		mov	r3, #0
 952 0672 87F82730 		strb	r3, [r7, #39]
 497:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 953              		.loc 1 497 0
 954 0676 4FF00403 		mov	r3, #4
 955 067a 3B62     		str	r3, [r7, #32]
 498:../src/main.cpp **** 
 499:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 956              		.loc 1 499 0
 957 067c 4FF40060 		mov	r0, #2048
 958 0680 C4F60000 		movt	r0, 18432
 959 0684 4FF00201 		mov	r1, #2
 960 0688 4FF00302 		mov	r2, #3
 961 068c FFF7FEFF 		bl	GPIO_PinAFConfig
 500:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 962              		.loc 1 500 0
 963 0690 07F12003 		add	r3, r7, #32
 964 0694 4FF40060 		mov	r0, #2048
 965 0698 C4F60000 		movt	r0, 18432
 966 069c 1946     		mov	r1, r3
 967 069e FFF7FEFF 		bl	GPIO_Init
 501:../src/main.cpp **** 
 502:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 968              		.loc 1 502 0
 969 06a2 4FF00000 		mov	r0, #0
 970 06a6 FFF7FEFF 		bl	RCC_PCLK2Config
 503:../src/main.cpp **** 
 504:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 971              		.loc 1 504 0
 972 06aa 4FF03003 		mov	r3, #48
 973 06ae 7B60     		str	r3, [r7, #4]
 505:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 974              		.loc 1 505 0
 975 06b0 4FF08003 		mov	r3, #128
 976 06b4 BB60     		str	r3, [r7, #8]
 506:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 977              		.loc 1 506 0
 978 06b6 4FF00403 		mov	r3, #4
 979 06ba FB61     		str	r3, [r7, #28]
 507:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 980              		.loc 1 507 0
 981 06bc 4FF00003 		mov	r3, #0
 982 06c0 FB60     		str	r3, [r7, #12]
 508:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 983              		.loc 1 508 0
 984 06c2 4FF00003 		mov	r3, #0
 985 06c6 7B61     		str	r3, [r7, #20]
 509:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 986              		.loc 1 509 0
 987 06c8 4FF48033 		mov	r3, #65536
 988 06cc BB61     		str	r3, [r7, #24]
 510:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 989              		.loc 1 510 0
 990 06ce 4FF00003 		mov	r3, #0
 991 06d2 3B61     		str	r3, [r7, #16]
 511:../src/main.cpp **** 
 512:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 992              		.loc 1 512 0
 993 06d4 07F10403 		add	r3, r7, #4
 994 06d8 4FF01800 		mov	r0, #24
 995 06dc 1946     		mov	r1, r3
 996 06de FFF7FEFF 		bl	COMP_Init
 513:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 997              		.loc 1 513 0
 998 06e2 4FF01800 		mov	r0, #24
 999 06e6 4FF00101 		mov	r1, #1
 1000 06ea FFF7FEFF 		bl	COMP_Cmd
 1001              	.LBE7:
 514:../src/main.cpp **** }
 1002              		.loc 1 514 0
 1003 06ee 07F12807 		add	r7, r7, #40
 1004 06f2 BD46     		mov	sp, r7
 1005 06f4 80BD     		pop	{r7, pc}
 1006              		.cfi_endproc
 1007              	.LFE117:
 1009 06f6 00BF     		.align	2
 1010              		.global	_Z14calc_gyro_biasv
 1011              		.thumb
 1012              		.thumb_func
 1014              	_Z14calc_gyro_biasv:
 1015              	.LFB118:
 515:../src/main.cpp **** 
 516:../src/main.cpp **** int16_t calc_gyro_bias(void)
 517:../src/main.cpp **** {
 1016              		.loc 1 517 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 16
 1019              		@ frame_needed = 1, uses_anonymous_args = 0
 1020 06f8 80B5     		push	{r7, lr}
 1021              	.LCFI20:
 1022              		.cfi_def_cfa_offset 8
 1023              		.cfi_offset 7, -8
 1024              		.cfi_offset 14, -4
 1025 06fa 84B0     		sub	sp, sp, #16
 1026              	.LCFI21:
 1027              		.cfi_def_cfa_offset 24
 1028 06fc 00AF     		add	r7, sp, #0
 1029              	.LCFI22:
 1030              		.cfi_def_cfa_register 7
 1031              	.LBB8:
 518:../src/main.cpp **** 	int i = 0;
 1032              		.loc 1 518 0
 1033 06fe 4FF00003 		mov	r3, #0
 1034 0702 FB60     		str	r3, [r7, #12]
 519:../src/main.cpp **** 	int accum_x = 0;
 1035              		.loc 1 519 0
 1036 0704 4FF00003 		mov	r3, #0
 1037 0708 BB60     		str	r3, [r7, #8]
 520:../src/main.cpp **** 
 521:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 522:../src/main.cpp **** 		uint16_t un_signed;
 523:../src/main.cpp **** 		int16_t output;
 524:../src/main.cpp **** 	} convert;
 525:../src/main.cpp **** 
 526:../src/main.cpp **** 	uint8_t bytes[2];
 527:../src/main.cpp **** 
 528:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1038              		.loc 1 528 0
 1039 070a 4FF00003 		mov	r3, #0
 1040 070e FB60     		str	r3, [r7, #12]
 1041 0710 19E0     		b	.L13
 1042              	.L14:
 529:../src/main.cpp **** 	{
 530:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1043              		.loc 1 530 0 discriminator 2
 1044 0712 3B46     		mov	r3, r7
 1045 0714 1846     		mov	r0, r3
 1046 0716 4FF02801 		mov	r1, #40
 1047 071a 4FF00202 		mov	r2, #2
 1048 071e FFF7FEFF 		bl	L3GD20_Read
 531:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1049              		.loc 1 531 0 discriminator 2
 1050 0722 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1051 0724 4FEA0323 		lsl	r3, r3, #8
 1052 0728 9AB2     		uxth	r2, r3
 1053 072a 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1054 072c 1343     		orrs	r3, r3, r2
 1055 072e 9BB2     		uxth	r3, r3
 1056 0730 9BB2     		uxth	r3, r3
 1057 0732 BB80     		strh	r3, [r7, #4]	@ movhi
 532:../src/main.cpp **** 		accum_x += convert.output;
 1058              		.loc 1 532 0 discriminator 2
 1059 0734 BB88     		ldrh	r3, [r7, #4]
 1060 0736 1BB2     		sxth	r3, r3
 1061 0738 BA68     		ldr	r2, [r7, #8]
 1062 073a D318     		adds	r3, r2, r3
 1063 073c BB60     		str	r3, [r7, #8]
 528:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1064              		.loc 1 528 0 discriminator 2
 1065 073e FB68     		ldr	r3, [r7, #12]
 1066 0740 03F10103 		add	r3, r3, #1
 1067 0744 FB60     		str	r3, [r7, #12]
 1068              	.L13:
 528:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1069              		.loc 1 528 0 is_stmt 0 discriminator 1
 1070 0746 FB68     		ldr	r3, [r7, #12]
 1071 0748 F92B     		cmp	r3, #249
 1072 074a CCBF     		ite	gt
 1073 074c 0023     		movgt	r3, #0
 1074 074e 0123     		movle	r3, #1
 1075 0750 DBB2     		uxtb	r3, r3
 1076 0752 002B     		cmp	r3, #0
 1077 0754 DDD1     		bne	.L14
 533:../src/main.cpp **** 	}
 534:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1078              		.loc 1 534 0 is_stmt 1
 1079 0756 D7ED027A 		flds	s15, [r7, #8]	@ int
 1080 075a B8EEE77A 		fsitos	s14, s15
 1081 075e DFED077A 		flds	s15, .L16
 1082 0762 C7EE277A 		fdivs	s15, s14, s15
 1083 0766 FDEEE77A 		ftosizs	s15, s15
 1084 076a 17EE903A 		fmrs	r3, s15	@ int
 1085 076e 9BB2     		uxth	r3, r3
 1086 0770 1BB2     		sxth	r3, r3
 1087              	.LBE8:
 535:../src/main.cpp **** }
 1088              		.loc 1 535 0
 1089 0772 1846     		mov	r0, r3
 1090 0774 07F11007 		add	r7, r7, #16
 1091 0778 BD46     		mov	sp, r7
 1092 077a 80BD     		pop	{r7, pc}
 1093              	.L17:
 1094              		.align	2
 1095              	.L16:
 1096 077c 00007A43 		.word	1132068864
 1097              		.cfi_endproc
 1098              	.LFE118:
 1100              		.align	2
 1101              		.global	_Z13adc1_init_DMAv
 1102              		.thumb
 1103              		.thumb_func
 1105              	_Z13adc1_init_DMAv:
 1106              	.LFB119:
 536:../src/main.cpp **** 
 537:../src/main.cpp **** /*
 538:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 539:../src/main.cpp ****  * a user-supplied location in memory
 540:../src/main.cpp ****  * @Args: None
 541:../src/main.cpp ****  * @Return Val: None
 542:../src/main.cpp ****  */
 543:../src/main.cpp **** 
 544:../src/main.cpp **** void adc1_init_DMA(void)
 545:../src/main.cpp **** {
 1107              		.loc 1 545 0
 1108              		.cfi_startproc
 1109              		@ args = 0, pretend = 0, frame = 112
 1110              		@ frame_needed = 1, uses_anonymous_args = 0
 1111 0780 80B5     		push	{r7, lr}
 1112              	.LCFI23:
 1113              		.cfi_def_cfa_offset 8
 1114              		.cfi_offset 7, -8
 1115              		.cfi_offset 14, -4
 1116 0782 9CB0     		sub	sp, sp, #112
 1117              	.LCFI24:
 1118              		.cfi_def_cfa_offset 120
 1119 0784 00AF     		add	r7, sp, #0
 1120              	.LCFI25:
 1121              		.cfi_def_cfa_register 7
 1122              	.LBB9:
 546:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 547:../src/main.cpp **** 
 548:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 549:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 550:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 551:../src/main.cpp **** 
 552:../src/main.cpp **** 	/* Configure the ADC clock */
 553:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1123              		.loc 1 553 0
 1124 0786 4FF48870 		mov	r0, #272
 1125 078a FFF7FEFF 		bl	RCC_ADCCLKConfig
 554:../src/main.cpp **** 	/* Enable ADC1 clock */
 555:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1126              		.loc 1 555 0
 1127 078e 4FF08050 		mov	r0, #268435456
 1128 0792 4FF00101 		mov	r1, #1
 1129 0796 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 556:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 557:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1130              		.loc 1 557 0
 1131 079a 4FF40030 		mov	r0, #131072
 1132 079e 4FF00101 		mov	r1, #1
 1133 07a2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 558:../src/main.cpp **** 
 559:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 560:../src/main.cpp **** 
 561:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1134              		.loc 1 561 0
 1135 07a6 07F15003 		add	r3, r7, #80
 1136 07aa 1846     		mov	r0, r3
 1137 07ac FFF7FEFF 		bl	GPIO_StructInit
 562:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1138              		.loc 1 562 0
 1139 07b0 4FF00C03 		mov	r3, #12
 1140 07b4 3B65     		str	r3, [r7, #80]
 563:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1141              		.loc 1 563 0
 1142 07b6 4FF00303 		mov	r3, #3
 1143 07ba 87F85430 		strb	r3, [r7, #84]
 564:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1144              		.loc 1 564 0
 1145 07be 4FF00003 		mov	r3, #0
 1146 07c2 87F85730 		strb	r3, [r7, #87]
 565:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1147              		.loc 1 565 0
 1148 07c6 07F15003 		add	r3, r7, #80
 1149 07ca 4FF09040 		mov	r0, #1207959552
 1150 07ce 1946     		mov	r1, r3
 1151 07d0 FFF7FEFF 		bl	GPIO_Init
 566:../src/main.cpp **** 
 567:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1152              		.loc 1 567 0
 1153 07d4 3B46     		mov	r3, r7
 1154 07d6 1846     		mov	r0, r3
 1155 07d8 FFF7FEFF 		bl	ADC_StructInit
 568:../src/main.cpp **** 
 569:../src/main.cpp **** 	/* Calibration procedure */
 570:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1156              		.loc 1 570 0
 1157 07dc 4FF0A040 		mov	r0, #1342177280
 1158 07e0 4FF00101 		mov	r1, #1
 1159 07e4 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 571:../src/main.cpp **** 
 572:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 573:../src/main.cpp **** 	int foo;
 574:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1160              		.loc 1 574 0
 1161 07e8 4FF00003 		mov	r3, #0
 1162 07ec FB66     		str	r3, [r7, #108]
 1163 07ee 07E0     		b	.L19
 1164              	.L20:
 575:../src/main.cpp **** 	{
 576:../src/main.cpp **** 	  ++foo;
 1165              		.loc 1 576 0 discriminator 2
 1166 07f0 FB6E     		ldr	r3, [r7, #108]
 1167 07f2 03F10103 		add	r3, r3, #1
 1168 07f6 FB66     		str	r3, [r7, #108]
 574:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1169              		.loc 1 574 0 discriminator 2
 1170 07f8 FB6E     		ldr	r3, [r7, #108]
 1171 07fa 03F10103 		add	r3, r3, #1
 1172 07fe FB66     		str	r3, [r7, #108]
 1173              	.L19:
 574:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1174              		.loc 1 574 0 is_stmt 0 discriminator 1
 1175 0800 FA6E     		ldr	r2, [r7, #108]
 1176 0802 4FF6FF13 		movw	r3, #63999
 1177 0806 9A42     		cmp	r2, r3
 1178 0808 CCBF     		ite	gt
 1179 080a 0023     		movgt	r3, #0
 1180 080c 0123     		movle	r3, #1
 1181 080e DBB2     		uxtb	r3, r3
 1182 0810 002B     		cmp	r3, #0
 1183 0812 EDD1     		bne	.L20
 577:../src/main.cpp **** 	}
 578:../src/main.cpp **** 
 579:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1184              		.loc 1 579 0 is_stmt 1
 1185 0814 4FF0A040 		mov	r0, #1342177280
 1186 0818 4FF00001 		mov	r1, #0
 1187 081c FFF7FEFF 		bl	ADC_SelectCalibrationMode
 580:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1188              		.loc 1 580 0
 1189 0820 4FF0A040 		mov	r0, #1342177280
 1190 0824 FFF7FEFF 		bl	ADC_StartCalibration
 581:../src/main.cpp **** 
 582:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1191              		.loc 1 582 0
 1192 0828 00BF     		nop
 1193              	.L21:
 1194              		.loc 1 582 0 is_stmt 0 discriminator 1
 1195 082a 4FF0A040 		mov	r0, #1342177280
 1196 082e FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1197 0832 0346     		mov	r3, r0
 1198 0834 002B     		cmp	r3, #0
 1199 0836 0CBF     		ite	eq
 1200 0838 0023     		moveq	r3, #0
 1201 083a 0123     		movne	r3, #1
 1202 083c DBB2     		uxtb	r3, r3
 1203 083e 002B     		cmp	r3, #0
 1204 0840 F3D1     		bne	.L21
 583:../src/main.cpp **** 
 584:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1205              		.loc 1 584 0 is_stmt 1
 1206 0842 4FF00003 		mov	r3, #0
 1207 0846 BB65     		str	r3, [r7, #88]
 585:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 1208              		.loc 1 585 0
 1209 0848 4FF00003 		mov	r3, #0
 1210 084c FB65     		str	r3, [r7, #92]
 586:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1211              		.loc 1 586 0
 1212 084e 4FF40043 		mov	r3, #32768
 1213 0852 3B66     		str	r3, [r7, #96]
 587:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1214              		.loc 1 587 0
 1215 0854 4FF00203 		mov	r3, #2
 1216 0858 7B66     		str	r3, [r7, #100]
 588:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1217              		.loc 1 588 0
 1218 085a 4FF00F03 		mov	r3, #15
 1219 085e 87F86830 		strb	r3, [r7, #104]
 589:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1220              		.loc 1 589 0
 1221 0862 07F15803 		add	r3, r7, #88
 1222 0866 4FF0A040 		mov	r0, #1342177280
 1223 086a 1946     		mov	r1, r3
 1224 086c FFF7FEFF 		bl	ADC_CommonInit
 590:../src/main.cpp **** 
 591:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1225              		.loc 1 591 0
 1226 0870 4FF40053 		mov	r3, #8192
 1227 0874 3B60     		str	r3, [r7, #0]
 592:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1228              		.loc 1 592 0
 1229 0876 4FF00003 		mov	r3, #0
 1230 087a 7B60     		str	r3, [r7, #4]
 593:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1231              		.loc 1 593 0
 1232 087c 4FF00003 		mov	r3, #0
 1233 0880 BB60     		str	r3, [r7, #8]
 594:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1234              		.loc 1 594 0
 1235 0882 4FF00003 		mov	r3, #0
 1236 0886 FB60     		str	r3, [r7, #12]
 595:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1237              		.loc 1 595 0
 1238 0888 4FF00003 		mov	r3, #0
 1239 088c 3B61     		str	r3, [r7, #16]
 596:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1240              		.loc 1 596 0
 1241 088e 4FF00003 		mov	r3, #0
 1242 0892 7B61     		str	r3, [r7, #20]
 597:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1243              		.loc 1 597 0
 1244 0894 4FF00003 		mov	r3, #0
 1245 0898 BB61     		str	r3, [r7, #24]
 598:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1246              		.loc 1 598 0
 1247 089a 4FF00203 		mov	r3, #2
 1248 089e 3B77     		strb	r3, [r7, #28]
 599:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1249              		.loc 1 599 0
 1250 08a0 3B46     		mov	r3, r7
 1251 08a2 4FF0A040 		mov	r0, #1342177280
 1252 08a6 1946     		mov	r1, r3
 1253 08a8 FFF7FEFF 		bl	ADC_Init
 600:../src/main.cpp **** 
 601:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 602:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1254              		.loc 1 602 0
 1255 08ac 4FF0A040 		mov	r0, #1342177280
 1256 08b0 4FF00301 		mov	r1, #3
 1257 08b4 4FF00102 		mov	r2, #1
 1258 08b8 4FF00703 		mov	r3, #7
 1259 08bc FFF7FEFF 		bl	ADC_RegularChannelConfig
 603:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1260              		.loc 1 603 0
 1261 08c0 4FF0A040 		mov	r0, #1342177280
 1262 08c4 4FF00401 		mov	r1, #4
 1263 08c8 4FF00202 		mov	r2, #2
 1264 08cc 4FF00703 		mov	r3, #7
 1265 08d0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 604:../src/main.cpp **** 
 605:../src/main.cpp **** 	/* Enable ADC1 */
 606:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1266              		.loc 1 606 0
 1267 08d4 4FF0A040 		mov	r0, #1342177280
 1268 08d8 4FF00101 		mov	r1, #1
 1269 08dc FFF7FEFF 		bl	ADC_Cmd
 607:../src/main.cpp **** 
 608:../src/main.cpp **** 	/* wait for ADRDY */
 609:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1270              		.loc 1 609 0
 1271 08e0 00BF     		nop
 1272              	.L22:
 1273              		.loc 1 609 0 is_stmt 0 discriminator 1
 1274 08e2 4FF0A040 		mov	r0, #1342177280
 1275 08e6 4FF00101 		mov	r1, #1
 1276 08ea FFF7FEFF 		bl	ADC_GetFlagStatus
 1277 08ee 0346     		mov	r3, r0
 1278 08f0 002B     		cmp	r3, #0
 1279 08f2 14BF     		ite	ne
 1280 08f4 0023     		movne	r3, #0
 1281 08f6 0123     		moveq	r3, #1
 1282 08f8 DBB2     		uxtb	r3, r3
 1283 08fa 002B     		cmp	r3, #0
 1284 08fc F1D1     		bne	.L22
 610:../src/main.cpp **** 
 611:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 612:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1285              		.loc 1 612 0 is_stmt 1
 1286 08fe 4FF0A040 		mov	r0, #1342177280
 1287 0902 FFF7FEFF 		bl	ADC_StartConversion
 613:../src/main.cpp **** 
 614:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1288              		.loc 1 614 0
 1289 0906 4FF00100 		mov	r0, #1
 1290 090a 4FF00101 		mov	r1, #1
 1291 090e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 615:../src/main.cpp **** 
 616:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 617:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1292              		.loc 1 617 0
 1293 0912 07F12003 		add	r3, r7, #32
 1294 0916 1846     		mov	r0, r3
 1295 0918 FFF7FEFF 		bl	DMA_StructInit
 618:../src/main.cpp **** 
 619:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1296              		.loc 1 619 0
 1297 091c 4FF00800 		mov	r0, #8
 1298 0920 C4F20200 		movt	r0, 16386
 1299 0924 FFF7FEFF 		bl	DMA_DeInit
 620:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1300              		.loc 1 620 0
 1301 0928 4FF04003 		mov	r3, #64
 1302 092c C5F20003 		movt	r3, 20480
 1303 0930 3B62     		str	r3, [r7, #32]
 621:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1304              		.loc 1 621 0
 1305 0932 40F20003 		movw	r3, #:lower16:adcData
 1306 0936 C0F20003 		movt	r3, #:upper16:adcData
 1307 093a 7B62     		str	r3, [r7, #36]
 622:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1308              		.loc 1 622 0
 1309 093c 4FF00003 		mov	r3, #0
 1310 0940 BB62     		str	r3, [r7, #40]
 623:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1311              		.loc 1 623 0
 1312 0942 4FF00203 		mov	r3, #2
 1313 0946 BB85     		strh	r3, [r7, #44]	@ movhi
 624:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1314              		.loc 1 624 0
 1315 0948 4FF00003 		mov	r3, #0
 1316 094c 3B63     		str	r3, [r7, #48]
 625:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1317              		.loc 1 625 0
 1318 094e 4FF08003 		mov	r3, #128
 1319 0952 7B63     		str	r3, [r7, #52]
 626:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1320              		.loc 1 626 0
 1321 0954 4FF40073 		mov	r3, #512
 1322 0958 BB63     		str	r3, [r7, #56]
 627:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1323              		.loc 1 627 0
 1324 095a 4FF40063 		mov	r3, #2048
 1325 095e FB63     		str	r3, [r7, #60]
 628:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1326              		.loc 1 628 0
 1327 0960 4FF02003 		mov	r3, #32
 1328 0964 3B64     		str	r3, [r7, #64]
 629:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1329              		.loc 1 629 0
 1330 0966 4FF40053 		mov	r3, #8192
 1331 096a 7B64     		str	r3, [r7, #68]
 630:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1332              		.loc 1 630 0
 1333 096c 4FF00003 		mov	r3, #0
 1334 0970 BB64     		str	r3, [r7, #72]
 631:../src/main.cpp **** 
 632:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1335              		.loc 1 632 0
 1336 0972 07F12003 		add	r3, r7, #32
 1337 0976 4FF00800 		mov	r0, #8
 1338 097a C4F20200 		movt	r0, 16386
 1339 097e 1946     		mov	r1, r3
 1340 0980 FFF7FEFF 		bl	DMA_Init
 633:../src/main.cpp **** 
 634:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 635:../src/main.cpp **** 
 636:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1341              		.loc 1 636 0
 1342 0984 4FF00B03 		mov	r3, #11
 1343 0988 87F84C30 		strb	r3, [r7, #76]
 637:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1344              		.loc 1 637 0
 1345 098c 4FF00203 		mov	r3, #2
 1346 0990 87F84D30 		strb	r3, [r7, #77]
 638:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1347              		.loc 1 638 0
 1348 0994 4FF00003 		mov	r3, #0
 1349 0998 87F84E30 		strb	r3, [r7, #78]
 639:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1350              		.loc 1 639 0
 1351 099c 4FF00103 		mov	r3, #1
 1352 09a0 87F84F30 		strb	r3, [r7, #79]
 640:../src/main.cpp **** 
 641:../src/main.cpp **** 	NVIC_Init(&nv);
 1353              		.loc 1 641 0
 1354 09a4 07F14C03 		add	r3, r7, #76
 1355 09a8 1846     		mov	r0, r3
 1356 09aa FFF7FEFF 		bl	NVIC_Init
 642:../src/main.cpp **** 
 643:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1357              		.loc 1 643 0
 1358 09ae 4FF00800 		mov	r0, #8
 1359 09b2 C4F20200 		movt	r0, 16386
 1360 09b6 4FF00201 		mov	r1, #2
 1361 09ba 4FF00102 		mov	r2, #1
 1362 09be FFF7FEFF 		bl	DMA_ITConfig
 644:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1363              		.loc 1 644 0
 1364 09c2 4FF00800 		mov	r0, #8
 1365 09c6 C4F20200 		movt	r0, 16386
 1366 09ca 4FF00101 		mov	r1, #1
 1367 09ce FFF7FEFF 		bl	DMA_Cmd
 645:../src/main.cpp **** 
 646:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1368              		.loc 1 646 0
 1369 09d2 4FF0A040 		mov	r0, #1342177280
 1370 09d6 4FF00201 		mov	r1, #2
 1371 09da FFF7FEFF 		bl	ADC_DMAConfig
 647:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1372              		.loc 1 647 0
 1373 09de 4FF0A040 		mov	r0, #1342177280
 1374 09e2 4FF00101 		mov	r1, #1
 1375 09e6 FFF7FEFF 		bl	ADC_DMACmd
 1376              	.LBE9:
 648:../src/main.cpp **** }
 1377              		.loc 1 648 0
 1378 09ea 07F17007 		add	r7, r7, #112
 1379 09ee BD46     		mov	sp, r7
 1380 09f0 80BD     		pop	{r7, pc}
 1381              		.cfi_endproc
 1382              	.LFE119:
 1384 09f2 00BF     		.align	2
 1385              		.global	_Z13adc2_init_DMAv
 1386              		.thumb
 1387              		.thumb_func
 1389              	_Z13adc2_init_DMAv:
 1390              	.LFB120:
 649:../src/main.cpp **** 
 650:../src/main.cpp **** void adc2_init_DMA(void)
 651:../src/main.cpp **** {
 1391              		.loc 1 651 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 112
 1394              		@ frame_needed = 1, uses_anonymous_args = 0
 1395 09f4 80B5     		push	{r7, lr}
 1396              	.LCFI26:
 1397              		.cfi_def_cfa_offset 8
 1398              		.cfi_offset 7, -8
 1399              		.cfi_offset 14, -4
 1400 09f6 9CB0     		sub	sp, sp, #112
 1401              	.LCFI27:
 1402              		.cfi_def_cfa_offset 120
 1403 09f8 00AF     		add	r7, sp, #0
 1404              	.LCFI28:
 1405              		.cfi_def_cfa_register 7
 1406              	.LBB10:
 652:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 653:../src/main.cpp **** 
 654:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 655:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 656:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 657:../src/main.cpp **** 
 658:../src/main.cpp **** 	/* Configure the ADC clock */
 659:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1407              		.loc 1 659 0
 1408 09fa 4FF48870 		mov	r0, #272
 1409 09fe FFF7FEFF 		bl	RCC_ADCCLKConfig
 660:../src/main.cpp **** 	/* Enable ADC2 clock */
 661:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1410              		.loc 1 661 0
 1411 0a02 4FF08050 		mov	r0, #268435456
 1412 0a06 4FF00101 		mov	r1, #1
 1413 0a0a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 662:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 663:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1414              		.loc 1 663 0
 1415 0a0e 4FF46020 		mov	r0, #917504
 1416 0a12 4FF00101 		mov	r1, #1
 1417 0a16 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 664:../src/main.cpp **** 
 665:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 666:../src/main.cpp **** 
 667:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1418              		.loc 1 667 0
 1419 0a1a 07F15003 		add	r3, r7, #80
 1420 0a1e 1846     		mov	r0, r3
 1421 0a20 FFF7FEFF 		bl	GPIO_StructInit
 668:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1422              		.loc 1 668 0
 1423 0a24 4FF01003 		mov	r3, #16
 1424 0a28 3B65     		str	r3, [r7, #80]
 669:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1425              		.loc 1 669 0
 1426 0a2a 4FF00303 		mov	r3, #3
 1427 0a2e 87F85430 		strb	r3, [r7, #84]
 670:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1428              		.loc 1 670 0
 1429 0a32 4FF00003 		mov	r3, #0
 1430 0a36 87F85730 		strb	r3, [r7, #87]
 671:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1431              		.loc 1 671 0
 1432 0a3a 4FF00303 		mov	r3, #3
 1433 0a3e 87F85530 		strb	r3, [r7, #85]
 672:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1434              		.loc 1 672 0
 1435 0a42 07F15003 		add	r3, r7, #80
 1436 0a46 4FF09040 		mov	r0, #1207959552
 1437 0a4a 1946     		mov	r1, r3
 1438 0a4c FFF7FEFF 		bl	GPIO_Init
 673:../src/main.cpp **** 
 674:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1439              		.loc 1 674 0
 1440 0a50 07F15003 		add	r3, r7, #80
 1441 0a54 1846     		mov	r0, r3
 1442 0a56 FFF7FEFF 		bl	GPIO_StructInit
 675:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1443              		.loc 1 675 0
 1444 0a5a 4FF00403 		mov	r3, #4
 1445 0a5e 3B65     		str	r3, [r7, #80]
 676:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1446              		.loc 1 676 0
 1447 0a60 4FF00303 		mov	r3, #3
 1448 0a64 87F85430 		strb	r3, [r7, #84]
 677:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1449              		.loc 1 677 0
 1450 0a68 4FF00003 		mov	r3, #0
 1451 0a6c 87F85730 		strb	r3, [r7, #87]
 678:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1452              		.loc 1 678 0
 1453 0a70 07F15003 		add	r3, r7, #80
 1454 0a74 4FF48060 		mov	r0, #1024
 1455 0a78 C4F60000 		movt	r0, 18432
 1456 0a7c 1946     		mov	r1, r3
 1457 0a7e FFF7FEFF 		bl	GPIO_Init
 679:../src/main.cpp **** 
 680:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1458              		.loc 1 680 0
 1459 0a82 07F15003 		add	r3, r7, #80
 1460 0a86 1846     		mov	r0, r3
 1461 0a88 FFF7FEFF 		bl	GPIO_StructInit
 681:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 1462              		.loc 1 681 0
 1463 0a8c 4FF03003 		mov	r3, #48
 1464 0a90 3B65     		str	r3, [r7, #80]
 682:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1465              		.loc 1 682 0
 1466 0a92 4FF00303 		mov	r3, #3
 1467 0a96 87F85430 		strb	r3, [r7, #84]
 683:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1468              		.loc 1 683 0
 1469 0a9a 4FF00003 		mov	r3, #0
 1470 0a9e 87F85730 		strb	r3, [r7, #87]
 684:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 1471              		.loc 1 684 0
 1472 0aa2 07F15003 		add	r3, r7, #80
 1473 0aa6 4FF40060 		mov	r0, #2048
 1474 0aaa C4F60000 		movt	r0, 18432
 1475 0aae 1946     		mov	r1, r3
 1476 0ab0 FFF7FEFF 		bl	GPIO_Init
 685:../src/main.cpp **** 
 686:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1477              		.loc 1 686 0
 1478 0ab4 3B46     		mov	r3, r7
 1479 0ab6 1846     		mov	r0, r3
 1480 0ab8 FFF7FEFF 		bl	ADC_StructInit
 687:../src/main.cpp **** 
 688:../src/main.cpp **** 	/* Calibration procedure */
 689:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 1481              		.loc 1 689 0
 1482 0abc 4FF48070 		mov	r0, #256
 1483 0ac0 C5F20000 		movt	r0, 20480
 1484 0ac4 4FF00101 		mov	r1, #1
 1485 0ac8 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 690:../src/main.cpp **** 
 691:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 692:../src/main.cpp **** 	int foo;
 693:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1486              		.loc 1 693 0
 1487 0acc 4FF00003 		mov	r3, #0
 1488 0ad0 FB66     		str	r3, [r7, #108]
 1489 0ad2 07E0     		b	.L24
 1490              	.L25:
 694:../src/main.cpp **** 	{
 695:../src/main.cpp **** 	  ++foo;
 1491              		.loc 1 695 0 discriminator 2
 1492 0ad4 FB6E     		ldr	r3, [r7, #108]
 1493 0ad6 03F10103 		add	r3, r3, #1
 1494 0ada FB66     		str	r3, [r7, #108]
 693:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1495              		.loc 1 693 0 discriminator 2
 1496 0adc FB6E     		ldr	r3, [r7, #108]
 1497 0ade 03F10103 		add	r3, r3, #1
 1498 0ae2 FB66     		str	r3, [r7, #108]
 1499              	.L24:
 693:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1500              		.loc 1 693 0 is_stmt 0 discriminator 1
 1501 0ae4 FA6E     		ldr	r2, [r7, #108]
 1502 0ae6 4FF6FF13 		movw	r3, #63999
 1503 0aea 9A42     		cmp	r2, r3
 1504 0aec CCBF     		ite	gt
 1505 0aee 0023     		movgt	r3, #0
 1506 0af0 0123     		movle	r3, #1
 1507 0af2 DBB2     		uxtb	r3, r3
 1508 0af4 002B     		cmp	r3, #0
 1509 0af6 EDD1     		bne	.L25
 696:../src/main.cpp **** 	}
 697:../src/main.cpp **** 
 698:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 1510              		.loc 1 698 0 is_stmt 1
 1511 0af8 4FF48070 		mov	r0, #256
 1512 0afc C5F20000 		movt	r0, 20480
 1513 0b00 4FF00001 		mov	r1, #0
 1514 0b04 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 699:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 1515              		.loc 1 699 0
 1516 0b08 4FF48070 		mov	r0, #256
 1517 0b0c C5F20000 		movt	r0, 20480
 1518 0b10 FFF7FEFF 		bl	ADC_StartCalibration
 700:../src/main.cpp **** 
 701:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 1519              		.loc 1 701 0
 1520 0b14 00BF     		nop
 1521              	.L26:
 1522              		.loc 1 701 0 is_stmt 0 discriminator 1
 1523 0b16 4FF48070 		mov	r0, #256
 1524 0b1a C5F20000 		movt	r0, 20480
 1525 0b1e FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1526 0b22 0346     		mov	r3, r0
 1527 0b24 002B     		cmp	r3, #0
 1528 0b26 0CBF     		ite	eq
 1529 0b28 0023     		moveq	r3, #0
 1530 0b2a 0123     		movne	r3, #1
 1531 0b2c DBB2     		uxtb	r3, r3
 1532 0b2e 002B     		cmp	r3, #0
 1533 0b30 F1D1     		bne	.L26
 702:../src/main.cpp **** 
 703:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1534              		.loc 1 703 0 is_stmt 1
 1535 0b32 4FF00003 		mov	r3, #0
 1536 0b36 BB65     		str	r3, [r7, #88]
 704:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1537              		.loc 1 704 0
 1538 0b38 4FF00003 		mov	r3, #0
 1539 0b3c FB65     		str	r3, [r7, #92]
 705:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1540              		.loc 1 705 0
 1541 0b3e 4FF40043 		mov	r3, #32768
 1542 0b42 3B66     		str	r3, [r7, #96]
 706:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1543              		.loc 1 706 0
 1544 0b44 4FF00203 		mov	r3, #2
 1545 0b48 7B66     		str	r3, [r7, #100]
 707:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 1546              		.loc 1 707 0
 1547 0b4a 4FF00F03 		mov	r3, #15
 1548 0b4e 87F86830 		strb	r3, [r7, #104]
 708:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 1549              		.loc 1 708 0
 1550 0b52 07F15803 		add	r3, r7, #88
 1551 0b56 4FF48070 		mov	r0, #256
 1552 0b5a C5F20000 		movt	r0, 20480
 1553 0b5e 1946     		mov	r1, r3
 1554 0b60 FFF7FEFF 		bl	ADC_CommonInit
 709:../src/main.cpp **** 
 710:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1555              		.loc 1 710 0
 1556 0b64 4FF40053 		mov	r3, #8192
 1557 0b68 3B60     		str	r3, [r7, #0]
 711:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1558              		.loc 1 711 0
 1559 0b6a 4FF00003 		mov	r3, #0
 1560 0b6e 7B60     		str	r3, [r7, #4]
 712:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1561              		.loc 1 712 0
 1562 0b70 4FF00003 		mov	r3, #0
 1563 0b74 BB60     		str	r3, [r7, #8]
 713:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1564              		.loc 1 713 0
 1565 0b76 4FF00003 		mov	r3, #0
 1566 0b7a FB60     		str	r3, [r7, #12]
 714:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1567              		.loc 1 714 0
 1568 0b7c 4FF00003 		mov	r3, #0
 1569 0b80 3B61     		str	r3, [r7, #16]
 715:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1570              		.loc 1 715 0
 1571 0b82 4FF00003 		mov	r3, #0
 1572 0b86 7B61     		str	r3, [r7, #20]
 716:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1573              		.loc 1 716 0
 1574 0b88 4FF00003 		mov	r3, #0
 1575 0b8c BB61     		str	r3, [r7, #24]
 717:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 1576              		.loc 1 717 0
 1577 0b8e 4FF00403 		mov	r3, #4
 1578 0b92 3B77     		strb	r3, [r7, #28]
 718:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 1579              		.loc 1 718 0
 1580 0b94 3B46     		mov	r3, r7
 1581 0b96 4FF48070 		mov	r0, #256
 1582 0b9a C5F20000 		movt	r0, 20480
 1583 0b9e 1946     		mov	r1, r3
 1584 0ba0 FFF7FEFF 		bl	ADC_Init
 719:../src/main.cpp **** 
 720:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 721:../src/main.cpp **** 
 722:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1585              		.loc 1 722 0
 1586 0ba4 4FF48070 		mov	r0, #256
 1587 0ba8 C5F20000 		movt	r0, 20480
 1588 0bac 4FF00101 		mov	r1, #1
 1589 0bb0 4FF00102 		mov	r2, #1
 1590 0bb4 4FF00703 		mov	r3, #7
 1591 0bb8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 723:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1592              		.loc 1 723 0
 1593 0bbc 4FF48070 		mov	r0, #256
 1594 0bc0 C5F20000 		movt	r0, 20480
 1595 0bc4 4FF00501 		mov	r1, #5
 1596 0bc8 4FF00202 		mov	r2, #2
 1597 0bcc 4FF00703 		mov	r3, #7
 1598 0bd0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 724:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 1599              		.loc 1 724 0
 1600 0bd4 4FF48070 		mov	r0, #256
 1601 0bd8 C5F20000 		movt	r0, 20480
 1602 0bdc 4FF00B01 		mov	r1, #11
 1603 0be0 4FF00302 		mov	r2, #3
 1604 0be4 4FF00703 		mov	r3, #7
 1605 0be8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 725:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 1606              		.loc 1 725 0
 1607 0bec 4FF48070 		mov	r0, #256
 1608 0bf0 C5F20000 		movt	r0, 20480
 1609 0bf4 4FF00C01 		mov	r1, #12
 1610 0bf8 4FF00402 		mov	r2, #4
 1611 0bfc 4FF00703 		mov	r3, #7
 1612 0c00 FFF7FEFF 		bl	ADC_RegularChannelConfig
 726:../src/main.cpp **** 
 727:../src/main.cpp **** 	/* Enable ADC2 */
 728:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 1613              		.loc 1 728 0
 1614 0c04 4FF48070 		mov	r0, #256
 1615 0c08 C5F20000 		movt	r0, 20480
 1616 0c0c 4FF00101 		mov	r1, #1
 1617 0c10 FFF7FEFF 		bl	ADC_Cmd
 729:../src/main.cpp **** 
 730:../src/main.cpp **** 	/* wait for ADRDY */
 731:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 1618              		.loc 1 731 0
 1619 0c14 00BF     		nop
 1620              	.L27:
 1621              		.loc 1 731 0 is_stmt 0 discriminator 1
 1622 0c16 4FF48070 		mov	r0, #256
 1623 0c1a C5F20000 		movt	r0, 20480
 1624 0c1e 4FF00101 		mov	r1, #1
 1625 0c22 FFF7FEFF 		bl	ADC_GetFlagStatus
 1626 0c26 0346     		mov	r3, r0
 1627 0c28 002B     		cmp	r3, #0
 1628 0c2a 14BF     		ite	ne
 1629 0c2c 0023     		movne	r3, #0
 1630 0c2e 0123     		moveq	r3, #1
 1631 0c30 DBB2     		uxtb	r3, r3
 1632 0c32 002B     		cmp	r3, #0
 1633 0c34 EFD1     		bne	.L27
 732:../src/main.cpp **** 
 733:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 734:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 1634              		.loc 1 734 0 is_stmt 1
 1635 0c36 4FF48070 		mov	r0, #256
 1636 0c3a C5F20000 		movt	r0, 20480
 1637 0c3e FFF7FEFF 		bl	ADC_StartConversion
 735:../src/main.cpp **** 
 736:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 1638              		.loc 1 736 0
 1639 0c42 4FF00200 		mov	r0, #2
 1640 0c46 4FF00101 		mov	r1, #1
 1641 0c4a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 737:../src/main.cpp **** 
 738:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 739:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1642              		.loc 1 739 0
 1643 0c4e 07F12003 		add	r3, r7, #32
 1644 0c52 1846     		mov	r0, r3
 1645 0c54 FFF7FEFF 		bl	DMA_StructInit
 740:../src/main.cpp **** 
 741:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 1646              		.loc 1 741 0
 1647 0c58 4FF48160 		mov	r0, #1032
 1648 0c5c C4F20200 		movt	r0, 16386
 1649 0c60 FFF7FEFF 		bl	DMA_DeInit
 742:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 1650              		.loc 1 742 0
 1651 0c64 4FF4A073 		mov	r3, #320
 1652 0c68 C5F20003 		movt	r3, 20480
 1653 0c6c 3B62     		str	r3, [r7, #32]
 743:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 1654              		.loc 1 743 0
 1655 0c6e 40F20003 		movw	r3, #:lower16:adc2_data
 1656 0c72 C0F20003 		movt	r3, #:upper16:adc2_data
 1657 0c76 7B62     		str	r3, [r7, #36]
 744:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1658              		.loc 1 744 0
 1659 0c78 4FF00003 		mov	r3, #0
 1660 0c7c BB62     		str	r3, [r7, #40]
 745:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 1661              		.loc 1 745 0
 1662 0c7e 4FF00403 		mov	r3, #4
 1663 0c82 BB85     		strh	r3, [r7, #44]	@ movhi
 746:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1664              		.loc 1 746 0
 1665 0c84 4FF00003 		mov	r3, #0
 1666 0c88 3B63     		str	r3, [r7, #48]
 747:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1667              		.loc 1 747 0
 1668 0c8a 4FF08003 		mov	r3, #128
 1669 0c8e 7B63     		str	r3, [r7, #52]
 748:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1670              		.loc 1 748 0
 1671 0c90 4FF40073 		mov	r3, #512
 1672 0c94 BB63     		str	r3, [r7, #56]
 749:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1673              		.loc 1 749 0
 1674 0c96 4FF40063 		mov	r3, #2048
 1675 0c9a FB63     		str	r3, [r7, #60]
 750:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1676              		.loc 1 750 0
 1677 0c9c 4FF02003 		mov	r3, #32
 1678 0ca0 3B64     		str	r3, [r7, #64]
 751:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1679              		.loc 1 751 0
 1680 0ca2 4FF40053 		mov	r3, #8192
 1681 0ca6 7B64     		str	r3, [r7, #68]
 752:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1682              		.loc 1 752 0
 1683 0ca8 4FF00003 		mov	r3, #0
 1684 0cac BB64     		str	r3, [r7, #72]
 753:../src/main.cpp **** 
 754:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 1685              		.loc 1 754 0
 1686 0cae 07F12003 		add	r3, r7, #32
 1687 0cb2 4FF48160 		mov	r0, #1032
 1688 0cb6 C4F20200 		movt	r0, 16386
 1689 0cba 1946     		mov	r1, r3
 1690 0cbc FFF7FEFF 		bl	DMA_Init
 755:../src/main.cpp **** 
 756:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 757:../src/main.cpp **** 
 758:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 1691              		.loc 1 758 0
 1692 0cc0 4FF03803 		mov	r3, #56
 1693 0cc4 87F84C30 		strb	r3, [r7, #76]
 759:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1694              		.loc 1 759 0
 1695 0cc8 4FF00203 		mov	r3, #2
 1696 0ccc 87F84D30 		strb	r3, [r7, #77]
 760:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1697              		.loc 1 760 0
 1698 0cd0 4FF00003 		mov	r3, #0
 1699 0cd4 87F84E30 		strb	r3, [r7, #78]
 761:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1700              		.loc 1 761 0
 1701 0cd8 4FF00103 		mov	r3, #1
 1702 0cdc 87F84F30 		strb	r3, [r7, #79]
 762:../src/main.cpp **** 
 763:../src/main.cpp **** 	NVIC_Init(&nv);
 1703              		.loc 1 763 0
 1704 0ce0 07F14C03 		add	r3, r7, #76
 1705 0ce4 1846     		mov	r0, r3
 1706 0ce6 FFF7FEFF 		bl	NVIC_Init
 764:../src/main.cpp **** 
 765:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 1707              		.loc 1 765 0
 1708 0cea 4FF48160 		mov	r0, #1032
 1709 0cee C4F20200 		movt	r0, 16386
 1710 0cf2 4FF00201 		mov	r1, #2
 1711 0cf6 4FF00102 		mov	r2, #1
 1712 0cfa FFF7FEFF 		bl	DMA_ITConfig
 766:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 1713              		.loc 1 766 0
 1714 0cfe 4FF48160 		mov	r0, #1032
 1715 0d02 C4F20200 		movt	r0, 16386
 1716 0d06 4FF00101 		mov	r1, #1
 1717 0d0a FFF7FEFF 		bl	DMA_Cmd
 767:../src/main.cpp **** 
 768:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 1718              		.loc 1 768 0
 1719 0d0e 4FF48070 		mov	r0, #256
 1720 0d12 C5F20000 		movt	r0, 20480
 1721 0d16 4FF00201 		mov	r1, #2
 1722 0d1a FFF7FEFF 		bl	ADC_DMAConfig
 769:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 1723              		.loc 1 769 0
 1724 0d1e 4FF48070 		mov	r0, #256
 1725 0d22 C5F20000 		movt	r0, 20480
 1726 0d26 4FF00101 		mov	r1, #1
 1727 0d2a FFF7FEFF 		bl	ADC_DMACmd
 1728              	.LBE10:
 770:../src/main.cpp **** }
 1729              		.loc 1 770 0
 1730 0d2e 07F17007 		add	r7, r7, #112
 1731 0d32 BD46     		mov	sp, r7
 1732 0d34 80BD     		pop	{r7, pc}
 1733              		.cfi_endproc
 1734              	.LFE120:
 1736 0d36 00BF     		.align	2
 1737              		.global	_Z21battery_watchdog_initv
 1738              		.thumb
 1739              		.thumb_func
 1741              	_Z21battery_watchdog_initv:
 1742              	.LFB121:
 771:../src/main.cpp **** 
 772:../src/main.cpp **** void battery_watchdog_init(void)
 773:../src/main.cpp **** {
 1743              		.loc 1 773 0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 72
 1746              		@ frame_needed = 1, uses_anonymous_args = 0
 1747 0d38 80B5     		push	{r7, lr}
 1748              	.LCFI29:
 1749              		.cfi_def_cfa_offset 8
 1750              		.cfi_offset 7, -8
 1751              		.cfi_offset 14, -4
 1752 0d3a 92B0     		sub	sp, sp, #72
 1753              	.LCFI30:
 1754              		.cfi_def_cfa_offset 80
 1755 0d3c 00AF     		add	r7, sp, #0
 1756              	.LCFI31:
 1757              		.cfi_def_cfa_register 7
 1758              	.LBB11:
 774:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 775:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 776:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 777:../src/main.cpp **** 	/* Configure the ADC clock */
 778:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 1759              		.loc 1 778 0
 1760 0d3e 4FF45050 		mov	r0, #13312
 1761 0d42 C1F20000 		movt	r0, 4096
 1762 0d46 FFF7FEFF 		bl	RCC_ADCCLKConfig
 779:../src/main.cpp **** 
 780:../src/main.cpp **** 	/* Enable ADC1 clock */
 781:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 1763              		.loc 1 781 0
 1764 0d4a 4FF00050 		mov	r0, #536870912
 1765 0d4e 4FF00101 		mov	r1, #1
 1766 0d52 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 782:../src/main.cpp **** 	/* ADC Channel configuration */
 783:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 784:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 1767              		.loc 1 784 0
 1768 0d56 4FF41010 		mov	r0, #2359296
 1769 0d5a 4FF00101 		mov	r1, #1
 1770 0d5e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 785:../src/main.cpp **** 
 786:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 787:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1771              		.loc 1 787 0
 1772 0d62 07F12803 		add	r3, r7, #40
 1773 0d66 1846     		mov	r0, r3
 1774 0d68 FFF7FEFF 		bl	GPIO_StructInit
 788:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 1775              		.loc 1 788 0
 1776 0d6c 42F20203 		movw	r3, #8194
 1777 0d70 BB62     		str	r3, [r7, #40]
 789:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1778              		.loc 1 789 0
 1779 0d72 4FF00303 		mov	r3, #3
 1780 0d76 87F82C30 		strb	r3, [r7, #44]
 790:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1781              		.loc 1 790 0
 1782 0d7a 4FF00003 		mov	r3, #0
 1783 0d7e 87F82F30 		strb	r3, [r7, #47]
 791:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1784              		.loc 1 791 0
 1785 0d82 07F12803 		add	r3, r7, #40
 1786 0d86 4FF48060 		mov	r0, #1024
 1787 0d8a C4F60000 		movt	r0, 18432
 1788 0d8e 1946     		mov	r1, r3
 1789 0d90 FFF7FEFF 		bl	GPIO_Init
 792:../src/main.cpp **** /*
 793:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 794:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 795:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 796:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 797:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 798:../src/main.cpp **** */
 799:../src/main.cpp **** 
 800:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1790              		.loc 1 800 0
 1791 0d94 07F10403 		add	r3, r7, #4
 1792 0d98 1846     		mov	r0, r3
 1793 0d9a FFF7FEFF 		bl	ADC_StructInit
 801:../src/main.cpp **** 
 802:../src/main.cpp **** 	/* Calibration procedure */
 803:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 1794              		.loc 1 803 0
 1795 0d9e 4FF48060 		mov	r0, #1024
 1796 0da2 C5F20000 		movt	r0, 20480
 1797 0da6 4FF00101 		mov	r1, #1
 1798 0daa FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 804:../src/main.cpp **** 
 805:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 806:../src/main.cpp **** 	int foo;
 807:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1799              		.loc 1 807 0
 1800 0dae 4FF00003 		mov	r3, #0
 1801 0db2 7B64     		str	r3, [r7, #68]
 1802 0db4 07E0     		b	.L29
 1803              	.L30:
 808:../src/main.cpp **** 	{
 809:../src/main.cpp **** 	  ++foo;
 1804              		.loc 1 809 0 discriminator 2
 1805 0db6 7B6C     		ldr	r3, [r7, #68]
 1806 0db8 03F10103 		add	r3, r3, #1
 1807 0dbc 7B64     		str	r3, [r7, #68]
 807:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1808              		.loc 1 807 0 discriminator 2
 1809 0dbe 7B6C     		ldr	r3, [r7, #68]
 1810 0dc0 03F10103 		add	r3, r3, #1
 1811 0dc4 7B64     		str	r3, [r7, #68]
 1812              	.L29:
 807:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1813              		.loc 1 807 0 is_stmt 0 discriminator 1
 1814 0dc6 7A6C     		ldr	r2, [r7, #68]
 1815 0dc8 47F6FF43 		movw	r3, #31999
 1816 0dcc 9A42     		cmp	r2, r3
 1817 0dce CCBF     		ite	gt
 1818 0dd0 0023     		movgt	r3, #0
 1819 0dd2 0123     		movle	r3, #1
 1820 0dd4 DBB2     		uxtb	r3, r3
 1821 0dd6 002B     		cmp	r3, #0
 1822 0dd8 EDD1     		bne	.L30
 810:../src/main.cpp **** 	}
 811:../src/main.cpp **** 
 812:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 1823              		.loc 1 812 0 is_stmt 1
 1824 0dda 4FF48060 		mov	r0, #1024
 1825 0dde C5F20000 		movt	r0, 20480
 1826 0de2 4FF00001 		mov	r1, #0
 1827 0de6 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 813:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 1828              		.loc 1 813 0
 1829 0dea 4FF48060 		mov	r0, #1024
 1830 0dee C5F20000 		movt	r0, 20480
 1831 0df2 FFF7FEFF 		bl	ADC_StartCalibration
 814:../src/main.cpp **** 
 815:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 1832              		.loc 1 815 0
 1833 0df6 00BF     		nop
 1834              	.L31:
 1835              		.loc 1 815 0 is_stmt 0 discriminator 1
 1836 0df8 4FF48060 		mov	r0, #1024
 1837 0dfc C5F20000 		movt	r0, 20480
 1838 0e00 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1839 0e04 0346     		mov	r3, r0
 1840 0e06 002B     		cmp	r3, #0
 1841 0e08 0CBF     		ite	eq
 1842 0e0a 0023     		moveq	r3, #0
 1843 0e0c 0123     		movne	r3, #1
 1844 0e0e DBB2     		uxtb	r3, r3
 1845 0e10 002B     		cmp	r3, #0
 1846 0e12 F1D1     		bne	.L31
 816:../src/main.cpp **** 
 817:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1847              		.loc 1 817 0 is_stmt 1
 1848 0e14 4FF00003 		mov	r3, #0
 1849 0e18 3B63     		str	r3, [r7, #48]
 818:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 1850              		.loc 1 818 0
 1851 0e1a 4FF44033 		mov	r3, #196608
 1852 0e1e 7B63     		str	r3, [r7, #52]
 819:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 1853              		.loc 1 819 0
 1854 0e20 4FF00003 		mov	r3, #0
 1855 0e24 BB63     		str	r3, [r7, #56]
 820:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 1856              		.loc 1 820 0
 1857 0e26 4FF00003 		mov	r3, #0
 1858 0e2a FB63     		str	r3, [r7, #60]
 821:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 1859              		.loc 1 821 0
 1860 0e2c 4FF00003 		mov	r3, #0
 1861 0e30 87F84030 		strb	r3, [r7, #64]
 822:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 1862              		.loc 1 822 0
 1863 0e34 07F13003 		add	r3, r7, #48
 1864 0e38 4FF48060 		mov	r0, #1024
 1865 0e3c C5F20000 		movt	r0, 20480
 1866 0e40 1946     		mov	r1, r3
 1867 0e42 FFF7FEFF 		bl	ADC_CommonInit
 823:../src/main.cpp **** 
 824:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1868              		.loc 1 824 0
 1869 0e46 4FF40053 		mov	r3, #8192
 1870 0e4a 7B60     		str	r3, [r7, #4]
 825:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1871              		.loc 1 825 0
 1872 0e4c 4FF00003 		mov	r3, #0
 1873 0e50 BB60     		str	r3, [r7, #8]
 826:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1874              		.loc 1 826 0
 1875 0e52 4FF00003 		mov	r3, #0
 1876 0e56 FB60     		str	r3, [r7, #12]
 827:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1877              		.loc 1 827 0
 1878 0e58 4FF00003 		mov	r3, #0
 1879 0e5c 3B61     		str	r3, [r7, #16]
 828:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1880              		.loc 1 828 0
 1881 0e5e 4FF00003 		mov	r3, #0
 1882 0e62 7B61     		str	r3, [r7, #20]
 829:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1883              		.loc 1 829 0
 1884 0e64 4FF00003 		mov	r3, #0
 1885 0e68 BB61     		str	r3, [r7, #24]
 830:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1886              		.loc 1 830 0
 1887 0e6a 4FF00003 		mov	r3, #0
 1888 0e6e FB61     		str	r3, [r7, #28]
 831:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1889              		.loc 1 831 0
 1890 0e70 4FF00203 		mov	r3, #2
 1891 0e74 87F82030 		strb	r3, [r7, #32]
 832:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 1892              		.loc 1 832 0
 1893 0e78 07F10403 		add	r3, r7, #4
 1894 0e7c 4FF48060 		mov	r0, #1024
 1895 0e80 C5F20000 		movt	r0, 20480
 1896 0e84 1946     		mov	r1, r3
 1897 0e86 FFF7FEFF 		bl	ADC_Init
 833:../src/main.cpp **** 
 834:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 835:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1898              		.loc 1 835 0
 1899 0e8a 4FF48060 		mov	r0, #1024
 1900 0e8e C5F20000 		movt	r0, 20480
 1901 0e92 4FF00101 		mov	r1, #1
 1902 0e96 4FF00102 		mov	r2, #1
 1903 0e9a 4FF00703 		mov	r3, #7
 1904 0e9e FFF7FEFF 		bl	ADC_RegularChannelConfig
 836:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1905              		.loc 1 836 0
 1906 0ea2 4FF48060 		mov	r0, #1024
 1907 0ea6 C5F20000 		movt	r0, 20480
 1908 0eaa 4FF00501 		mov	r1, #5
 1909 0eae 4FF00202 		mov	r2, #2
 1910 0eb2 4FF00703 		mov	r3, #7
 1911 0eb6 FFF7FEFF 		bl	ADC_RegularChannelConfig
 837:../src/main.cpp **** 
 838:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 1912              		.loc 1 838 0
 1913 0eba 4FF48060 		mov	r0, #1024
 1914 0ebe C5F20000 		movt	r0, 20480
 1915 0ec2 4FF00101 		mov	r1, #1
 1916 0ec6 FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 839:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 1917              		.loc 1 839 0
 1918 0eca 4FF48060 		mov	r0, #1024
 1919 0ece C5F20000 		movt	r0, 20480
 1920 0ed2 4FF00501 		mov	r1, #5
 1921 0ed6 FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 840:../src/main.cpp **** 
 841:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 842:../src/main.cpp **** 
 843:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 1922              		.loc 1 843 0
 1923 0eda 4FF48060 		mov	r0, #1024
 1924 0ede C5F20000 		movt	r0, 20480
 1925 0ee2 4FF40061 		mov	r1, #2048
 1926 0ee6 4FF00A02 		mov	r2, #10
 1927 0eea FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 844:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 1928              		.loc 1 844 0
 1929 0eee 4FF48060 		mov	r0, #1024
 1930 0ef2 C5F20000 		movt	r0, 20480
 1931 0ef6 4FF08001 		mov	r1, #128
 1932 0efa 4FF00002 		mov	r2, #0
 1933 0efe FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 845:../src/main.cpp **** 
 846:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 1934              		.loc 1 846 0
 1935 0f02 4FF48060 		mov	r0, #1024
 1936 0f06 C5F20000 		movt	r0, 20480
 1937 0f0a 4FF44001 		mov	r1, #12582912
 1938 0f0e FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 847:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 848:../src/main.cpp **** 
 849:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 850:../src/main.cpp **** 
 851:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 852:../src/main.cpp **** 
 853:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 1939              		.loc 1 853 0
 1940 0f12 4FF02F03 		mov	r3, #47
 1941 0f16 87F82430 		strb	r3, [r7, #36]
 854:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 1942              		.loc 1 854 0
 1943 0f1a 4FF00003 		mov	r3, #0
 1944 0f1e 87F82530 		strb	r3, [r7, #37]
 855:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1945              		.loc 1 855 0
 1946 0f22 4FF00003 		mov	r3, #0
 1947 0f26 87F82630 		strb	r3, [r7, #38]
 856:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1948              		.loc 1 856 0
 1949 0f2a 4FF00103 		mov	r3, #1
 1950 0f2e 87F82730 		strb	r3, [r7, #39]
 857:../src/main.cpp **** 
 858:../src/main.cpp **** 	NVIC_Init(&nv);
 1951              		.loc 1 858 0
 1952 0f32 07F12403 		add	r3, r7, #36
 1953 0f36 1846     		mov	r0, r3
 1954 0f38 FFF7FEFF 		bl	NVIC_Init
 859:../src/main.cpp **** 
 860:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 861:../src/main.cpp **** 
 862:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 1955              		.loc 1 862 0
 1956 0f3c 4FF48060 		mov	r0, #1024
 1957 0f40 C5F20000 		movt	r0, 20480
 1958 0f44 4FF4C071 		mov	r1, #384
 1959 0f48 4FF00102 		mov	r2, #1
 1960 0f4c FFF7FEFF 		bl	ADC_ITConfig
 863:../src/main.cpp **** 
 864:../src/main.cpp **** 	/* Enable ADC3 */
 865:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 1961              		.loc 1 865 0
 1962 0f50 4FF48060 		mov	r0, #1024
 1963 0f54 C5F20000 		movt	r0, 20480
 1964 0f58 4FF00101 		mov	r1, #1
 1965 0f5c FFF7FEFF 		bl	ADC_Cmd
 866:../src/main.cpp **** 
 867:../src/main.cpp **** 	/* wait for ADRDY */
 868:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 1966              		.loc 1 868 0
 1967 0f60 00BF     		nop
 1968              	.L32:
 1969              		.loc 1 868 0 is_stmt 0 discriminator 1
 1970 0f62 4FF48060 		mov	r0, #1024
 1971 0f66 C5F20000 		movt	r0, 20480
 1972 0f6a 4FF00101 		mov	r1, #1
 1973 0f6e FFF7FEFF 		bl	ADC_GetFlagStatus
 1974 0f72 0346     		mov	r3, r0
 1975 0f74 002B     		cmp	r3, #0
 1976 0f76 14BF     		ite	ne
 1977 0f78 0023     		movne	r3, #0
 1978 0f7a 0123     		moveq	r3, #1
 1979 0f7c DBB2     		uxtb	r3, r3
 1980 0f7e 002B     		cmp	r3, #0
 1981 0f80 EFD1     		bne	.L32
 869:../src/main.cpp **** 
 870:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 871:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 1982              		.loc 1 871 0 is_stmt 1
 1983 0f82 4FF48060 		mov	r0, #1024
 1984 0f86 C5F20000 		movt	r0, 20480
 1985 0f8a FFF7FEFF 		bl	ADC_StartConversion
 1986              	.LBE11:
 872:../src/main.cpp **** }
 1987              		.loc 1 872 0
 1988 0f8e 07F14807 		add	r7, r7, #72
 1989 0f92 BD46     		mov	sp, r7
 1990 0f94 80BD     		pop	{r7, pc}
 1991              		.cfi_endproc
 1992              	.LFE121:
 1994 0f96 00BF     		.align	2
 1995              		.global	_Z9adc1_initv
 1996              		.thumb
 1997              		.thumb_func
 1999              	_Z9adc1_initv:
 2000              	.LFB122:
 873:../src/main.cpp **** 
 874:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 875:../src/main.cpp ****  * @Args: Nothing
 876:../src/main.cpp ****  * @Return Val: Nothing
 877:../src/main.cpp ****  */
 878:../src/main.cpp **** 
 879:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 880:../src/main.cpp **** {
 2001              		.loc 1 880 0
 2002              		.cfi_startproc
 2003              		@ args = 0, pretend = 0, frame = 72
 2004              		@ frame_needed = 1, uses_anonymous_args = 0
 2005 0f98 80B5     		push	{r7, lr}
 2006              	.LCFI32:
 2007              		.cfi_def_cfa_offset 8
 2008              		.cfi_offset 7, -8
 2009              		.cfi_offset 14, -4
 2010 0f9a 92B0     		sub	sp, sp, #72
 2011              	.LCFI33:
 2012              		.cfi_def_cfa_offset 80
 2013 0f9c 00AF     		add	r7, sp, #0
 2014              	.LCFI34:
 2015              		.cfi_def_cfa_register 7
 2016              	.LBB12:
 881:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 882:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 883:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 884:../src/main.cpp **** 	/* Configure the ADC clock */
 885:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2017              		.loc 1 885 0
 2018 0f9e 4FF48870 		mov	r0, #272
 2019 0fa2 FFF7FEFF 		bl	RCC_ADCCLKConfig
 886:../src/main.cpp **** 
 887:../src/main.cpp **** 	/* Enable ADC1 clock */
 888:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2020              		.loc 1 888 0
 2021 0fa6 4FF08050 		mov	r0, #268435456
 2022 0faa 4FF00101 		mov	r1, #1
 2023 0fae FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 889:../src/main.cpp **** 	/* ADC Channel configuration */
 890:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 891:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2024              		.loc 1 891 0
 2025 0fb2 4FF40030 		mov	r0, #131072
 2026 0fb6 4FF00101 		mov	r1, #1
 2027 0fba FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 892:../src/main.cpp **** 
 893:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 894:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2028              		.loc 1 894 0
 2029 0fbe 4FF00403 		mov	r3, #4
 2030 0fc2 BB62     		str	r3, [r7, #40]
 895:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2031              		.loc 1 895 0
 2032 0fc4 4FF00303 		mov	r3, #3
 2033 0fc8 87F82C30 		strb	r3, [r7, #44]
 896:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2034              		.loc 1 896 0
 2035 0fcc 4FF00003 		mov	r3, #0
 2036 0fd0 87F82F30 		strb	r3, [r7, #47]
 897:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2037              		.loc 1 897 0
 2038 0fd4 07F12803 		add	r3, r7, #40
 2039 0fd8 4FF09040 		mov	r0, #1207959552
 2040 0fdc 1946     		mov	r1, r3
 2041 0fde FFF7FEFF 		bl	GPIO_Init
 898:../src/main.cpp **** 
 899:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2042              		.loc 1 899 0
 2043 0fe2 07F10403 		add	r3, r7, #4
 2044 0fe6 1846     		mov	r0, r3
 2045 0fe8 FFF7FEFF 		bl	ADC_StructInit
 900:../src/main.cpp **** 
 901:../src/main.cpp **** 	/* Calibration procedure */
 902:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2046              		.loc 1 902 0
 2047 0fec 4FF0A040 		mov	r0, #1342177280
 2048 0ff0 4FF00101 		mov	r1, #1
 2049 0ff4 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 903:../src/main.cpp **** 
 904:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 905:../src/main.cpp **** 	int foo;
 906:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2050              		.loc 1 906 0
 2051 0ff8 4FF00003 		mov	r3, #0
 2052 0ffc 7B64     		str	r3, [r7, #68]
 2053 0ffe 07E0     		b	.L34
 2054              	.L35:
 907:../src/main.cpp **** 	{
 908:../src/main.cpp **** 	  ++foo;
 2055              		.loc 1 908 0 discriminator 2
 2056 1000 7B6C     		ldr	r3, [r7, #68]
 2057 1002 03F10103 		add	r3, r3, #1
 2058 1006 7B64     		str	r3, [r7, #68]
 906:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2059              		.loc 1 906 0 discriminator 2
 2060 1008 7B6C     		ldr	r3, [r7, #68]
 2061 100a 03F10103 		add	r3, r3, #1
 2062 100e 7B64     		str	r3, [r7, #68]
 2063              	.L34:
 906:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2064              		.loc 1 906 0 is_stmt 0 discriminator 1
 2065 1010 7A6C     		ldr	r2, [r7, #68]
 2066 1012 47F6FF43 		movw	r3, #31999
 2067 1016 9A42     		cmp	r2, r3
 2068 1018 CCBF     		ite	gt
 2069 101a 0023     		movgt	r3, #0
 2070 101c 0123     		movle	r3, #1
 2071 101e DBB2     		uxtb	r3, r3
 2072 1020 002B     		cmp	r3, #0
 2073 1022 EDD1     		bne	.L35
 909:../src/main.cpp **** 	}
 910:../src/main.cpp **** 
 911:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2074              		.loc 1 911 0 is_stmt 1
 2075 1024 4FF0A040 		mov	r0, #1342177280
 2076 1028 4FF00001 		mov	r1, #0
 2077 102c FFF7FEFF 		bl	ADC_SelectCalibrationMode
 912:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2078              		.loc 1 912 0
 2079 1030 4FF0A040 		mov	r0, #1342177280
 2080 1034 FFF7FEFF 		bl	ADC_StartCalibration
 913:../src/main.cpp **** 
 914:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2081              		.loc 1 914 0
 2082 1038 00BF     		nop
 2083              	.L36:
 2084              		.loc 1 914 0 is_stmt 0 discriminator 1
 2085 103a 4FF0A040 		mov	r0, #1342177280
 2086 103e FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2087 1042 0346     		mov	r3, r0
 2088 1044 002B     		cmp	r3, #0
 2089 1046 0CBF     		ite	eq
 2090 1048 0023     		moveq	r3, #0
 2091 104a 0123     		movne	r3, #1
 2092 104c DBB2     		uxtb	r3, r3
 2093 104e 002B     		cmp	r3, #0
 2094 1050 F3D1     		bne	.L36
 915:../src/main.cpp **** 
 916:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2095              		.loc 1 916 0 is_stmt 1
 2096 1052 4FF00003 		mov	r3, #0
 2097 1056 3B63     		str	r3, [r7, #48]
 917:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2098              		.loc 1 917 0
 2099 1058 4FF00003 		mov	r3, #0
 2100 105c 7B63     		str	r3, [r7, #52]
 918:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2101              		.loc 1 918 0
 2102 105e 4FF00003 		mov	r3, #0
 2103 1062 BB63     		str	r3, [r7, #56]
 919:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2104              		.loc 1 919 0
 2105 1064 4FF00003 		mov	r3, #0
 2106 1068 FB63     		str	r3, [r7, #60]
 920:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2107              		.loc 1 920 0
 2108 106a 4FF00003 		mov	r3, #0
 2109 106e 87F84030 		strb	r3, [r7, #64]
 921:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2110              		.loc 1 921 0
 2111 1072 07F13003 		add	r3, r7, #48
 2112 1076 4FF0A040 		mov	r0, #1342177280
 2113 107a 1946     		mov	r1, r3
 2114 107c FFF7FEFF 		bl	ADC_CommonInit
 922:../src/main.cpp **** 
 923:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2115              		.loc 1 923 0
 2116 1080 4FF40053 		mov	r3, #8192
 2117 1084 7B60     		str	r3, [r7, #4]
 924:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2118              		.loc 1 924 0
 2119 1086 4FF00003 		mov	r3, #0
 2120 108a BB60     		str	r3, [r7, #8]
 925:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2121              		.loc 1 925 0
 2122 108c 4FF00003 		mov	r3, #0
 2123 1090 FB60     		str	r3, [r7, #12]
 926:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2124              		.loc 1 926 0
 2125 1092 4FF00003 		mov	r3, #0
 2126 1096 3B61     		str	r3, [r7, #16]
 927:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2127              		.loc 1 927 0
 2128 1098 4FF00003 		mov	r3, #0
 2129 109c 7B61     		str	r3, [r7, #20]
 928:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2130              		.loc 1 928 0
 2131 109e 4FF00003 		mov	r3, #0
 2132 10a2 BB61     		str	r3, [r7, #24]
 929:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2133              		.loc 1 929 0
 2134 10a4 4FF00003 		mov	r3, #0
 2135 10a8 FB61     		str	r3, [r7, #28]
 930:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2136              		.loc 1 930 0
 2137 10aa 4FF00103 		mov	r3, #1
 2138 10ae 87F82030 		strb	r3, [r7, #32]
 931:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2139              		.loc 1 931 0
 2140 10b2 07F10403 		add	r3, r7, #4
 2141 10b6 4FF0A040 		mov	r0, #1342177280
 2142 10ba 1946     		mov	r1, r3
 2143 10bc FFF7FEFF 		bl	ADC_Init
 932:../src/main.cpp **** 
 933:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 934:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2144              		.loc 1 934 0
 2145 10c0 4FF0A040 		mov	r0, #1342177280
 2146 10c4 4FF00301 		mov	r1, #3
 2147 10c8 4FF00102 		mov	r2, #1
 2148 10cc 4FF00703 		mov	r3, #7
 2149 10d0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 935:../src/main.cpp **** 
 936:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 937:../src/main.cpp **** 
 938:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 939:../src/main.cpp **** 
 940:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2150              		.loc 1 940 0
 2151 10d4 4FF01203 		mov	r3, #18
 2152 10d8 87F82430 		strb	r3, [r7, #36]
 941:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2153              		.loc 1 941 0
 2154 10dc 4FF00203 		mov	r3, #2
 2155 10e0 87F82530 		strb	r3, [r7, #37]
 942:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2156              		.loc 1 942 0
 2157 10e4 4FF00003 		mov	r3, #0
 2158 10e8 87F82630 		strb	r3, [r7, #38]
 943:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2159              		.loc 1 943 0
 2160 10ec 4FF00103 		mov	r3, #1
 2161 10f0 87F82730 		strb	r3, [r7, #39]
 944:../src/main.cpp **** 
 945:../src/main.cpp **** 	NVIC_Init(&nv);
 2162              		.loc 1 945 0
 2163 10f4 07F12403 		add	r3, r7, #36
 2164 10f8 1846     		mov	r0, r3
 2165 10fa FFF7FEFF 		bl	NVIC_Init
 946:../src/main.cpp **** 
 947:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 948:../src/main.cpp **** 
 949:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2166              		.loc 1 949 0
 2167 10fe 4FF0A040 		mov	r0, #1342177280
 2168 1102 4FF00401 		mov	r1, #4
 2169 1106 4FF00102 		mov	r2, #1
 2170 110a FFF7FEFF 		bl	ADC_ITConfig
 950:../src/main.cpp **** 
 951:../src/main.cpp **** 	/* Enable ADC1 */
 952:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2171              		.loc 1 952 0
 2172 110e 4FF0A040 		mov	r0, #1342177280
 2173 1112 4FF00101 		mov	r1, #1
 2174 1116 FFF7FEFF 		bl	ADC_Cmd
 953:../src/main.cpp **** 
 954:../src/main.cpp **** 	/* wait for ADRDY */
 955:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2175              		.loc 1 955 0
 2176 111a 00BF     		nop
 2177              	.L37:
 2178              		.loc 1 955 0 is_stmt 0 discriminator 1
 2179 111c 4FF0A040 		mov	r0, #1342177280
 2180 1120 4FF00101 		mov	r1, #1
 2181 1124 FFF7FEFF 		bl	ADC_GetFlagStatus
 2182 1128 0346     		mov	r3, r0
 2183 112a 002B     		cmp	r3, #0
 2184 112c 14BF     		ite	ne
 2185 112e 0023     		movne	r3, #0
 2186 1130 0123     		moveq	r3, #1
 2187 1132 DBB2     		uxtb	r3, r3
 2188 1134 002B     		cmp	r3, #0
 2189 1136 F1D1     		bne	.L37
 956:../src/main.cpp **** 
 957:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 958:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2190              		.loc 1 958 0 is_stmt 1
 2191 1138 4FF0A040 		mov	r0, #1342177280
 2192 113c FFF7FEFF 		bl	ADC_StartConversion
 2193              	.LBE12:
 959:../src/main.cpp **** }
 2194              		.loc 1 959 0
 2195 1140 07F14807 		add	r7, r7, #72
 2196 1144 BD46     		mov	sp, r7
 2197 1146 80BD     		pop	{r7, pc}
 2198              		.cfi_endproc
 2199              	.LFE122:
 2201              	.Letext0:
 2202              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2203              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2204              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 2205              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 2206              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 2207              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 2208              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 2209              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 2210              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 2211              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 2212              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/ccRbHdxZ.s:25     .bss:00000000 led_iter
     /tmp/ccRbHdxZ.s:22     .bss:00000000 $d
     /tmp/ccRbHdxZ.s:32     .data:00000000 led_matrix
     /tmp/ccRbHdxZ.s:29     .data:00000000 $d
     /tmp/ccRbHdxZ.s:46     .bss:00000004 left_enc
     /tmp/ccRbHdxZ.s:52     .bss:0000002c right_enc
     /tmp/ccRbHdxZ.s:58     .bss:00000054 gyro_angle_x
     /tmp/ccRbHdxZ.s:64     .bss:00000058 gyro_bias_x
     /tmp/ccRbHdxZ.s:70     .bss:0000005c adcval
     /tmp/ccRbHdxZ.s:76     .bss:00000060 adcData
     /tmp/ccRbHdxZ.s:82     .bss:00000068 new_data
     /tmp/ccRbHdxZ.s:88     .bss:0000006c adc2_data
     /tmp/ccRbHdxZ.s:93     .bss:0000007c adc2_new_data
     /tmp/ccRbHdxZ.s:98     .bss:0000007d adc3_awd1
     /tmp/ccRbHdxZ.s:103    .bss:0000007e adc3_awd2
     /tmp/ccRbHdxZ.s:109    .bss:00000080 count
     /tmp/ccRbHdxZ.s:115    .bss:00000084 stage
     /tmp/ccRbHdxZ.s:118    .rodata:00000000 $d
     /tmp/ccRbHdxZ.s:119    .rodata:00000000 .LC0
     /tmp/ccRbHdxZ.s:122    .text:00000000 $t
     /tmp/ccRbHdxZ.s:127    .text:00000000 main
     /tmp/ccRbHdxZ.s:448    .text:00000250 _Z15brake_pins_initv
     /tmp/ccRbHdxZ.s:1105   .text:00000780 _Z13adc1_init_DMAv
     /tmp/ccRbHdxZ.s:1389   .text:000009f4 _Z13adc2_init_DMAv
     /tmp/ccRbHdxZ.s:664    .text:000003ac _Z9comp_initv
     /tmp/ccRbHdxZ.s:291    .text:00000154 _Z19imu_update_ISR_initv
     /tmp/ccRbHdxZ.s:1014   .text:000006f8 _Z14calc_gyro_biasv
     /tmp/ccRbHdxZ.s:408    .rodata:0000000c .LC1
     /tmp/ccRbHdxZ.s:417    .text:00000238 L3GD20_TIMEOUT_UserCallback
     /tmp/ccRbHdxZ.s:520    .text:000002c8 _Z13ping_pin_initv
     /tmp/ccRbHdxZ.s:605    .text:00000358 _Z20timer2_timebase_initv
     /tmp/ccRbHdxZ.s:1096   .text:0000077c $d
     /tmp/ccRbHdxZ.s:1100   .text:00000780 $t
     /tmp/ccRbHdxZ.s:1741   .text:00000d38 _Z21battery_watchdog_initv
     /tmp/ccRbHdxZ.s:1999   .text:00000f98 _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.50a79f075d1434c9a8bd8ee500f78677
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.669975762de5793e6d2436455cef4d0e
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
_Z19LED_MATRIX_ISR_initv
_Z11pwm1_outputf
_Z11pwm2_outputf
COMP_GetOutputLevel
printf
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
RCC_AHBPeriphClockCmd
GPIO_StructInit
GPIO_Init
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
