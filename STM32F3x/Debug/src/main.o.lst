   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.cpp"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	led_iter
  21              		.bss
  22              		.align	2
  25              	led_iter:
  26 0000 00000000 		.space	4
  27              		.global	led_matrix
  28              		.data
  29              		.align	2
  32              	led_matrix:
  33 0000 00020000 		.word	512
  34 0004 00010000 		.word	256
  35 0008 00800000 		.word	32768
  36 000c 00400000 		.word	16384
  37 0010 00200000 		.word	8192
  38 0014 00100000 		.word	4096
  39 0018 00080000 		.word	2048
  40 001c 00040000 		.word	1024
  41              		.global	left_enc
  42              		.bss
  43              		.align	2
  46              	left_enc:
  47 0004 00000000 		.space	40
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.global	right_enc
  49              		.align	2
  52              	right_enc:
  53 002c 00000000 		.space	40
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.global	gyro_angle_x
  55              		.align	2
  58              	gyro_angle_x:
  59 0054 00000000 		.space	4
  60              		.global	gyro_bias_x
  61              		.align	2
  64              	gyro_bias_x:
  65 0058 00000000 		.space	4
  66              		.global	adcval
  67              		.align	2
  70              	adcval:
  71 005c 00000000 		.space	4
  72              		.global	adcData
  73              		.align	2
  76              	adcData:
  77 0060 00000000 		.space	8
  77      00000000 
  78              		.global	new_data
  79              		.align	2
  82              	new_data:
  83 0068 00000000 		.space	4
  84              		.global	adc2_data
  85              		.align	2
  88              	adc2_data:
  89 006c 00000000 		.space	16
  89      00000000 
  89      00000000 
  89      00000000 
  90              		.global	adc2_new_data
  93              	adc2_new_data:
  94 007c 00       		.space	1
  95              		.global	adc3_awd1
  98              	adc3_awd1:
  99 007d 00       		.space	1
 100              		.global	adc3_awd2
 103              	adc3_awd2:
 104 007e 00       		.space	1
 105              		.global	count
 106 007f 00       		.align	2
 109              	count:
 110 0080 00000000 		.space	4
 111              		.global	stage
 112              		.align	2
 115              	stage:
 116 0084 00000000 		.space	4
 117              		.global	__aeabi_f2d
 118              		.section	.rodata
 119              		.align	2
 120              	.LC0:
 121 0000 25332E33 		.ascii	"%3.3f Counter: %d\012\015\000"
 121      6620436F 
 121      756E7465 
 121      723A2025 
 121      640A0D00 
 122              		.text
 123              		.align	2
 124              		.global	main
 125              		.thumb
 126              		.thumb_func
 128              	main:
 129              	.LFB111:
 130              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  18:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  19:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  20:../src/main.cpp ****  *
  21:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  22:../src/main.cpp ****  *
  23:../src/main.cpp ****  * TIM6: LED matrix ISR
  24:../src/main.cpp ****  * TIM7: Encoder update ISR
  25:../src/main.cpp ****  * TIM17: IMU update ISR
  26:../src/main.cpp ****  *
  27:../src/main.cpp ****  * Other pins/resources used:
  28:../src/main.cpp ****  *
  29:../src/main.cpp ****  * Analog: 	Channel 3 (PA2)
  30:../src/main.cpp ****  * 			Channel 4 (PA3)
  31:../src/main.cpp ****  * 			Channel 5 (PF4)
  32:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  33:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  34:../src/main.cpp ****  *
  35:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  36:../src/main.cpp ****  *
  37:../src/main.cpp ****  */
  38:../src/main.cpp **** 
  39:../src/main.cpp **** /*
  40:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  41:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  42:../src/main.cpp ****  */
  43:../src/main.cpp **** 
  44:../src/main.cpp **** volatile int led_iter;
  45:../src/main.cpp **** volatile int led_matrix[8] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_14, GPIO_Pin_13,
  46:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  47:../src/main.cpp **** 
  48:../src/main.cpp **** void imu_update_ISR_init(void);
  49:../src/main.cpp **** int16_t calc_gyro_bias(void);
  50:../src/main.cpp **** 
  51:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  52:../src/main.cpp **** 
  53:../src/main.cpp **** void adc1_init_DMA(void);
  54:../src/main.cpp **** void adc2_init_DMA(void);
  55:../src/main.cpp **** void battery_watchdog_init(void);
  56:../src/main.cpp **** void adc1_init(void);
  57:../src/main.cpp **** 
  58:../src/main.cpp **** void brake_pins_init(void);
  59:../src/main.cpp **** 
  60:../src/main.cpp **** void ping_pin_init(void);
  61:../src/main.cpp **** void timer2_timebase_init(void);
  62:../src/main.cpp **** 
  63:../src/main.cpp **** void comp_init(void);
  64:../src/main.cpp **** 
  65:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  66:../src/main.cpp **** 
  67:../src/main.cpp **** encoderState left_enc, right_enc;
  68:../src/main.cpp **** 
  69:../src/main.cpp **** volatile float gyro_angle_x;
  70:../src/main.cpp **** int gyro_bias_x, adcval;
  71:../src/main.cpp **** 
  72:../src/main.cpp **** //__IO uint16_t adcData[3];
  73:../src/main.cpp **** __IO uint32_t adcData[2];
  74:../src/main.cpp **** int new_data;
  75:../src/main.cpp **** 
  76:../src/main.cpp **** __IO uint32_t adc2_data[4];
  77:../src/main.cpp **** uint8_t adc2_new_data;
  78:../src/main.cpp **** 
  79:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
  80:../src/main.cpp **** 
  81:../src/main.cpp **** int count, stage;
  82:../src/main.cpp **** #define K_ULTRASONIC 0.001130f
  83:../src/main.cpp **** 
  84:../src/main.cpp **** // Initialize all encoder data structures to zero:
  85:../src/main.cpp **** 
  86:../src/main.cpp **** int main(void)
  87:../src/main.cpp **** {
 131              		.loc 1 87 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 8
 134              		@ frame_needed = 1, uses_anonymous_args = 0
 135 0000 B0B5     		push	{r4, r5, r7, lr}
 136              	.LCFI0:
 137              		.cfi_def_cfa_offset 16
 138              		.cfi_offset 4, -16
 139              		.cfi_offset 5, -12
 140              		.cfi_offset 7, -8
 141              		.cfi_offset 14, -4
 142 0002 84B0     		sub	sp, sp, #16
 143              	.LCFI1:
 144              		.cfi_def_cfa_offset 32
 145 0004 02AF     		add	r7, sp, #8
 146              	.LCFI2:
 147              		.cfi_def_cfa 7, 24
 148              	.LBB2:
  88:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 149              		.loc 1 88 0
 150 0006 FFF7FEFF 		bl	SystemInit
  89:../src/main.cpp **** 
  90:../src/main.cpp **** 	UART1_init(); // Debug bridge
 151              		.loc 1 90 0
 152 000a FFF7FEFF 		bl	_Z10UART1_initv
  91:../src/main.cpp **** 
  92:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
  93:../src/main.cpp **** 
  94:../src/main.cpp **** 	adcData[0] = 0;
 153              		.loc 1 94 0
 154 000e 40F20003 		movw	r3, #:lower16:adcData
 155 0012 C0F20003 		movt	r3, #:upper16:adcData
 156 0016 4FF00002 		mov	r2, #0
 157 001a 1A60     		str	r2, [r3, #0]
  95:../src/main.cpp **** 	adcData[1] = 0;
 158              		.loc 1 95 0
 159 001c 40F20003 		movw	r3, #:lower16:adcData
 160 0020 C0F20003 		movt	r3, #:upper16:adcData
 161 0024 4FF00002 		mov	r2, #0
 162 0028 5A60     		str	r2, [r3, #4]
  96:../src/main.cpp **** 
  97:../src/main.cpp **** 	uint8_t iter = 0;
 163              		.loc 1 97 0
 164 002a 4FF00003 		mov	r3, #0
 165 002e FB71     		strb	r3, [r7, #7]
  98:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 166              		.loc 1 98 0
 167 0030 4FF00003 		mov	r3, #0
 168 0034 FB71     		strb	r3, [r7, #7]
 169 0036 0CE0     		b	.L2
 170              	.L3:
  99:../src/main.cpp **** 	{
 100:../src/main.cpp **** 		adc2_data[iter] = 0;
 171              		.loc 1 100 0 discriminator 2
 172 0038 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 173 003a 40F20003 		movw	r3, #:lower16:adc2_data
 174 003e C0F20003 		movt	r3, #:upper16:adc2_data
 175 0042 4FF00001 		mov	r1, #0
 176 0046 43F82210 		str	r1, [r3, r2, lsl #2]
  98:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 177              		.loc 1 98 0 discriminator 2
 178 004a FB79     		ldrb	r3, [r7, #7]
 179 004c 03F10103 		add	r3, r3, #1
 180 0050 FB71     		strb	r3, [r7, #7]
 181              	.L2:
  98:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 182              		.loc 1 98 0 is_stmt 0 discriminator 1
 183 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 184 0054 062B     		cmp	r3, #6
 185 0056 8CBF     		ite	hi
 186 0058 0023     		movhi	r3, #0
 187 005a 0123     		movls	r3, #1
 188 005c DBB2     		uxtb	r3, r3
 189 005e 002B     		cmp	r3, #0
 190 0060 EAD1     		bne	.L3
 101:../src/main.cpp **** 	}
 102:../src/main.cpp **** 
 103:../src/main.cpp **** 	adc3_awd1 = 0;
 191              		.loc 1 103 0 is_stmt 1
 192 0062 40F20003 		movw	r3, #:lower16:adc3_awd1
 193 0066 C0F20003 		movt	r3, #:upper16:adc3_awd1
 194 006a 4FF00002 		mov	r2, #0
 195 006e 1A70     		strb	r2, [r3, #0]
 104:../src/main.cpp **** 	adc3_awd2 = 0;
 196              		.loc 1 104 0
 197 0070 40F20003 		movw	r3, #:lower16:adc3_awd2
 198 0074 C0F20003 		movt	r3, #:upper16:adc3_awd2
 199 0078 4FF00002 		mov	r2, #0
 200 007c 1A70     		strb	r2, [r3, #0]
 105:../src/main.cpp **** 
 106:../src/main.cpp **** 	count = 0;
 201              		.loc 1 106 0
 202 007e 40F20003 		movw	r3, #:lower16:count
 203 0082 C0F20003 		movt	r3, #:upper16:count
 204 0086 4FF00002 		mov	r2, #0
 205 008a 1A60     		str	r2, [r3, #0]
 107:../src/main.cpp **** 	stage = 0;
 206              		.loc 1 107 0
 207 008c 40F20003 		movw	r3, #:lower16:stage
 208 0090 C0F20003 		movt	r3, #:upper16:stage
 209 0094 4FF00002 		mov	r2, #0
 210 0098 1A60     		str	r2, [r3, #0]
 108:../src/main.cpp **** 
 109:../src/main.cpp **** 	/*
 110:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 111:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 112:../src/main.cpp **** 	 */
 113:../src/main.cpp **** 
 114:../src/main.cpp **** 
 115:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 211              		.loc 1 115 0
 212 009a 40F20000 		movw	r0, #:lower16:left_enc
 213 009e C0F20000 		movt	r0, #:upper16:left_enc
 214 00a2 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 116:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 215              		.loc 1 116 0
 216 00a6 40F20000 		movw	r0, #:lower16:right_enc
 217 00aa C0F20000 		movt	r0, #:upper16:right_enc
 218 00ae FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 117:../src/main.cpp **** 
 118:../src/main.cpp **** 	right_enc.position_target = 8400;
 219              		.loc 1 118 0
 220 00b2 40F20003 		movw	r3, #:lower16:right_enc
 221 00b6 C0F20003 		movt	r3, #:upper16:right_enc
 222 00ba 42F2D002 		movw	r2, #8400
 223 00be DA60     		str	r2, [r3, #12]
 119:../src/main.cpp ****  //	right_enc.speed_target = 8400;
 120:../src/main.cpp **** 
 121:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 122:../src/main.cpp **** 
 123:../src/main.cpp **** 	brake_pins_init();
 224              		.loc 1 123 0
 225 00c0 FFF7FEFF 		bl	_Z15brake_pins_initv
 124:../src/main.cpp **** 	pwm_out1_init(2000);
 226              		.loc 1 124 0
 227 00c4 4FF4FA60 		mov	r0, #2000
 228 00c8 FFF7FEFF 		bl	_Z13pwm_out1_initt
 125:../src/main.cpp **** 	pwm_out2_init(2000);
 229              		.loc 1 125 0
 230 00cc 4FF4FA60 		mov	r0, #2000
 231 00d0 FFF7FEFF 		bl	_Z13pwm_out2_initt
 126:../src/main.cpp **** 
 127:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 128:../src/main.cpp **** 
 129:../src/main.cpp **** 	TIM8_init_encoder();
 232              		.loc 1 129 0
 233 00d4 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 130:../src/main.cpp **** 	TIM4_init_encoder();
 234              		.loc 1 130 0
 235 00d8 FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 131:../src/main.cpp **** 
 132:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 133:../src/main.cpp **** 
 134:../src/main.cpp **** 	new_data = 0;
 236              		.loc 1 134 0
 237 00dc 40F20003 		movw	r3, #:lower16:new_data
 238 00e0 C0F20003 		movt	r3, #:upper16:new_data
 239 00e4 4FF00002 		mov	r2, #0
 240 00e8 1A60     		str	r2, [r3, #0]
 135:../src/main.cpp **** 	adc2_new_data = 0;
 241              		.loc 1 135 0
 242 00ea 40F20003 		movw	r3, #:lower16:adc2_new_data
 243 00ee C0F20003 		movt	r3, #:upper16:adc2_new_data
 244 00f2 4FF00002 		mov	r2, #0
 245 00f6 1A70     		strb	r2, [r3, #0]
 136:../src/main.cpp **** 
 137:../src/main.cpp **** 	// Initialize ADC1 DMA:
 138:../src/main.cpp **** 	adc1_init_DMA();
 246              		.loc 1 138 0
 247 00f8 FFF7FEFF 		bl	_Z13adc1_init_DMAv
 139:../src/main.cpp **** 
 140:../src/main.cpp **** 	// Initialize ADC2 DMA:
 141:../src/main.cpp **** 	adc2_init_DMA();
 248              		.loc 1 141 0
 249 00fc FFF7FEFF 		bl	_Z13adc2_init_DMAv
 142:../src/main.cpp **** //	battery_watchdog_init();
 143:../src/main.cpp **** 
 144:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 250              		.loc 1 144 0
 251 0100 FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 145:../src/main.cpp **** //	imu_update_ISR_init(); 		//IMU (gyro/acclerometer/magnetometer ISR)
 146:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 252              		.loc 1 146 0
 253 0104 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 147:../src/main.cpp **** 
 148:../src/main.cpp **** 	// Ping Sensor Init:
 149:../src/main.cpp **** 
 150:../src/main.cpp **** 	ping_pin_init();
 254              		.loc 1 150 0
 255 0108 FFF7FEFF 		bl	_Z13ping_pin_initv
 151:../src/main.cpp **** 	timer2_timebase_init();
 256              		.loc 1 151 0
 257 010c FFF7FEFF 		bl	_Z20timer2_timebase_initv
 152:../src/main.cpp **** 
 153:../src/main.cpp **** 	imu_update_ISR_init();
 258              		.loc 1 153 0
 259 0110 FFF7FEFF 		bl	_Z19imu_update_ISR_initv
 154:../src/main.cpp **** 
 155:../src/main.cpp **** 	comp_init();
 260              		.loc 1 155 0
 261 0114 FFF7FEFF 		bl	_Z9comp_initv
 156:../src/main.cpp **** 
 157:../src/main.cpp **** 	adcval = 0;
 262              		.loc 1 157 0
 263 0118 40F20003 		movw	r3, #:lower16:adcval
 264 011c C0F20003 		movt	r3, #:upper16:adcval
 265 0120 4FF00002 		mov	r2, #0
 266 0124 1A60     		str	r2, [r3, #0]
 158:../src/main.cpp **** 	float mtr_out = 0;
 267              		.loc 1 158 0
 268 0126 4FF00003 		mov	r3, #0
 269 012a 3B60     		str	r3, [r7, #0]	@ float
 270              	.L4:
 159:../src/main.cpp **** 	char *mode;
 160:../src/main.cpp **** 
 161:../src/main.cpp **** //	right_enc.m = MODE_POSITION;
 162:../src/main.cpp **** 
 163:../src/main.cpp **** 	while(true)
 164:../src/main.cpp **** 	{
 165:../src/main.cpp **** //		pwm2_output(0.5f);						// Fixed 1 kHz, 50% duty output on PWM output #2
 166:../src/main.cpp **** 
 167:../src/main.cpp **** 		// Debug Statements:
 168:../src/main.cpp **** 
 169:../src/main.cpp **** //		printf("%d %d %d\n\r", adcData[0], adcData[1], adcval);
 170:../src/main.cpp **** //		printf("%d\n\r", adcval);
 171:../src/main.cpp **** //		if(right_enc.m == MODE_OPENLOOP)
 172:../src/main.cpp **** //		{
 173:../src/main.cpp **** //			pwm1_output(0.50f);
 174:../src/main.cpp **** //		}
 175:../src/main.cpp **** 
 176:../src/main.cpp **** //		mode = (right_enc.m == MODE_OPENLOOP) ? (char *)"Open" : ((right_enc.m == MODE_POSITION) ? (cha
 177:../src/main.cpp **** //		GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 178:../src/main.cpp **** //		GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 179:../src/main.cpp **** 		mtr_out = 0.6;//(float)adcData[0]/(float)4096;
 271              		.loc 1 179 0 discriminator 1
 272 012c 49F69A13 		movw	r3, #39322
 273 0130 C3F61973 		movt	r3, 16153
 274 0134 3B60     		str	r3, [r7, #0]	@ float
 180:../src/main.cpp **** 		pwm1_output(0.75);//mtr_out);
 275              		.loc 1 180 0 discriminator 1
 276 0136 B6EE080A 		fconsts	s0, #104
 277 013a FFF7FEFF 		bl	_Z11pwm1_outputf
 181:../src/main.cpp **** 		pwm2_output(0.25);//1-mtr_out);
 278              		.loc 1 181 0 discriminator 1
 279 013e B5EE000A 		fconsts	s0, #80
 280 0142 FFF7FEFF 		bl	_Z11pwm2_outputf
 182:../src/main.cpp **** //		printf("%d\n\r", COMP_GetOutputLevel(COMP_Selection_COMP2));
 183:../src/main.cpp **** //		printf("Left: %d | Right: %d\n\r", left_enc.position, right_enc.position);//, mode);
 184:../src/main.cpp **** 		printf("%3.3f Counter: %d\n\r", ((float)count*(float)0.5*(float)K_ULTRASONIC), TIM_GetCounter(TIM
 281              		.loc 1 184 0 discriminator 1
 282 0146 40F20003 		movw	r3, #:lower16:count
 283 014a C0F20003 		movt	r3, #:upper16:count
 284 014e D3ED007A 		flds	s15, [r3, #0]	@ int
 285 0152 B8EEE77A 		fsitos	s14, s15
 286 0156 F6EE007A 		fconsts	s15, #96
 287 015a 27EE277A 		fmuls	s14, s14, s15
 288 015e DFED0C7A 		flds	s15, .L5
 289 0162 67EE277A 		fmuls	s15, s14, s15
 290 0166 17EE900A 		fmrs	r0, s15
 291 016a FFF7FEFF 		bl	__aeabi_f2d
 292 016e 0446     		mov	r4, r0
 293 0170 0D46     		mov	r5, r1
 294 0172 4FF08040 		mov	r0, #1073741824
 295 0176 FFF7FEFF 		bl	TIM_GetCounter
 296 017a 0346     		mov	r3, r0
 297 017c 0093     		str	r3, [sp, #0]
 298 017e 40F20000 		movw	r0, #:lower16:.LC0
 299 0182 C0F20000 		movt	r0, #:upper16:.LC0
 300 0186 2246     		mov	r2, r4
 301 0188 2B46     		mov	r3, r5
 302 018a FFF7FEFF 		bl	printf
 163:../src/main.cpp **** 	while(true)
 303              		.loc 1 163 0 discriminator 1
 304 018e CDE7     		b	.L4
 305              	.L6:
 306              		.align	2
 307              	.L5:
 308 0190 821C943A 		.word	982785154
 309              	.LBE2:
 310              		.cfi_endproc
 311              	.LFE111:
 313              		.align	2
 314              		.global	_Z19imu_update_ISR_initv
 315              		.thumb
 316              		.thumb_func
 318              	_Z19imu_update_ISR_initv:
 319              	.LFB112:
 185:../src/main.cpp **** 
 186:../src/main.cpp **** //		printf("Bias_x: %d | Theta_x: %5.2f | Left: %d | Right: %d\n\r", gyro_bias_x, gyro_angle_x, lef
 187:../src/main.cpp **** //		printf("ADC Value on Channel 3: %d || Theta_x: %5.2f\n\r", adcval, gyro_angle_x);
 188:../src/main.cpp **** //		while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) != SET);
 189:../src/main.cpp **** //		DMA_ClearFlag(DMA1_FLAG_GL1 | DMA1_FLAG_TC1);
 190:../src/main.cpp **** 
 191:../src/main.cpp **** 		/*
 192:../src/main.cpp **** 		while(new_data==0);
 193:../src/main.cpp **** 		printf("ADC1: %4d || ADC2: %4d\n\r", adcData[0], adcData[1]);//adcData, (uint32_t)&(ADC1->DR));//
 194:../src/main.cpp **** 		new_data = 0;
 195:../src/main.cpp **** 
 196:../src/main.cpp **** 		*/
 197:../src/main.cpp **** 		/*
 198:../src/main.cpp **** 		printf("ADC1: ");
 199:../src/main.cpp **** 		while(new_data==0);
 200:../src/main.cpp **** 		for(iter=0;iter<2;++iter)
 201:../src/main.cpp **** 		{
 202:../src/main.cpp **** 			printf("%4d ", adcData[iter]);
 203:../src/main.cpp **** 		}
 204:../src/main.cpp **** 
 205:../src/main.cpp **** 		pwm1_output((float)adcData[0]/(float)4096);
 206:../src/main.cpp **** 
 207:../src/main.cpp **** 		printf("ADC2: ");
 208:../src/main.cpp **** 		while(adc2_new_data==0);
 209:../src/main.cpp **** 		for(iter=0;iter<4;++iter)
 210:../src/main.cpp **** 		{
 211:../src/main.cpp **** 			printf("%4d ", adc2_data[iter]);
 212:../src/main.cpp **** 		}
 213:../src/main.cpp **** 		*/
 214:../src/main.cpp **** //		printf("AWD1: %d, AWD2: %d, ADC: %d", adc3_awd1, adc3_awd2, ADC_GetConversionValue(ADC3));
 215:../src/main.cpp **** //		adc3_awd1 = 0;
 216:../src/main.cpp **** //		adc3_awd2 = 0;
 217:../src/main.cpp **** //		printf("\n\r");
 218:../src/main.cpp **** 
 219:../src/main.cpp **** 	}
 220:../src/main.cpp **** 	return 0; // We should never manage to get here...
 221:../src/main.cpp **** }
 222:../src/main.cpp **** 
 223:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 224:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 225:../src/main.cpp **** 
 226:../src/main.cpp **** void imu_update_ISR_init(void)
 227:../src/main.cpp **** {
 320              		.loc 1 227 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 24
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324 0194 80B5     		push	{r7, lr}
 325              	.LCFI3:
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 7, -8
 328              		.cfi_offset 14, -4
 329 0196 86B0     		sub	sp, sp, #24
 330              	.LCFI4:
 331              		.cfi_def_cfa_offset 32
 332 0198 00AF     		add	r7, sp, #0
 333              	.LCFI5:
 334              		.cfi_def_cfa_register 7
 335              	.LBB3:
 228:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 229:../src/main.cpp **** 
 230:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 336              		.loc 1 230 0
 337 019a 4FF00703 		mov	r3, #7
 338 019e BB74     		strb	r3, [r7, #18]
 231:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 339              		.loc 1 231 0
 340 01a0 4FF00003 		mov	r3, #0
 341 01a4 FB74     		strb	r3, [r7, #19]
 232:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 342              		.loc 1 232 0
 343 01a6 4FF00003 		mov	r3, #0
 344 01aa 3B75     		strb	r3, [r7, #20]
 233:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 345              		.loc 1 233 0
 346 01ac 4FF00003 		mov	r3, #0
 347 01b0 7B75     		strb	r3, [r7, #21]
 234:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 348              		.loc 1 234 0
 349 01b2 4FF00003 		mov	r3, #0
 350 01b6 BB75     		strb	r3, [r7, #22]
 235:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 351              		.loc 1 235 0
 352 01b8 4FF00003 		mov	r3, #0
 353 01bc 7B74     		strb	r3, [r7, #17]
 236:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 354              		.loc 1 236 0
 355 01be 4FF00803 		mov	r3, #8
 356 01c2 3B74     		strb	r3, [r7, #16]
 237:../src/main.cpp **** 
 238:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 357              		.loc 1 238 0
 358 01c4 07F11003 		add	r3, r7, #16
 359 01c8 1846     		mov	r0, r3
 360 01ca FFF7FEFF 		bl	L3GD20_Init
 239:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 361              		.loc 1 239 0
 362 01ce FFF7FEFF 		bl	_Z14calc_gyro_biasv
 363 01d2 0346     		mov	r3, r0
 364 01d4 1A46     		mov	r2, r3
 365 01d6 40F20003 		movw	r3, #:lower16:gyro_bias_x
 366 01da C0F20003 		movt	r3, #:upper16:gyro_bias_x
 367 01de 1A60     		str	r2, [r3, #0]
 240:../src/main.cpp **** 
 241:../src/main.cpp **** 	gyro_angle_x = 0;
 368              		.loc 1 241 0
 369 01e0 40F20003 		movw	r3, #:lower16:gyro_angle_x
 370 01e4 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 371 01e8 4FF00002 		mov	r2, #0
 372 01ec 1A60     		str	r2, [r3, #0]	@ float
 242:../src/main.cpp **** 
 243:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 244:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 245:../src/main.cpp **** 
 246:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 373              		.loc 1 246 0
 374 01ee 4FF01A03 		mov	r3, #26
 375 01f2 3B73     		strb	r3, [r7, #12]
 247:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 376              		.loc 1 247 0
 377 01f4 4FF00003 		mov	r3, #0
 378 01f8 7B73     		strb	r3, [r7, #13]
 248:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 379              		.loc 1 248 0
 380 01fa 4FF00003 		mov	r3, #0
 381 01fe BB73     		strb	r3, [r7, #14]
 249:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 382              		.loc 1 249 0
 383 0200 4FF00103 		mov	r3, #1
 384 0204 FB73     		strb	r3, [r7, #15]
 250:../src/main.cpp **** 
 251:../src/main.cpp **** 	NVIC_Init(&nv);
 385              		.loc 1 251 0
 386 0206 07F10C03 		add	r3, r7, #12
 387 020a 1846     		mov	r0, r3
 388 020c FFF7FEFF 		bl	NVIC_Init
 252:../src/main.cpp **** 
 253:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 389              		.loc 1 253 0
 390 0210 4FF48020 		mov	r0, #262144
 391 0214 4FF00101 		mov	r1, #1
 392 0218 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 254:../src/main.cpp **** 
 255:../src/main.cpp **** 	/*
 256:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 257:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 258:../src/main.cpp **** 	 * 	  Period -> ARR
 259:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 260:../src/main.cpp **** 	 */
 261:../src/main.cpp **** 
 262:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 393              		.loc 1 262 0
 394 021c 40F28F13 		movw	r3, #399
 395 0220 7B60     		str	r3, [r7, #4]
 263:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 396              		.loc 1 263 0
 397 0222 41F61F43 		movw	r3, #7199
 398 0226 3B80     		strh	r3, [r7, #0]	@ movhi
 264:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 399              		.loc 1 264 0
 400 0228 4FF00003 		mov	r3, #0
 401 022c BB72     		strb	r3, [r7, #10]
 265:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 402              		.loc 1 265 0
 403 022e 4FF00003 		mov	r3, #0
 404 0232 3B81     		strh	r3, [r7, #8]	@ movhi
 266:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 405              		.loc 1 266 0
 406 0234 4FF00003 		mov	r3, #0
 407 0238 7B80     		strh	r3, [r7, #2]	@ movhi
 267:../src/main.cpp **** 
 268:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 408              		.loc 1 268 0
 409 023a 3B46     		mov	r3, r7
 410 023c 4FF49040 		mov	r0, #18432
 411 0240 C4F20100 		movt	r0, 16385
 412 0244 1946     		mov	r1, r3
 413 0246 FFF7FEFF 		bl	TIM_TimeBaseInit
 269:../src/main.cpp **** 
 270:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 414              		.loc 1 270 0
 415 024a 4FF49040 		mov	r0, #18432
 416 024e C4F20100 		movt	r0, 16385
 417 0252 4FF00101 		mov	r1, #1
 418 0256 4FF00102 		mov	r2, #1
 419 025a FFF7FEFF 		bl	TIM_ITConfig
 271:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 420              		.loc 1 271 0
 421 025e 4FF49040 		mov	r0, #18432
 422 0262 C4F20100 		movt	r0, 16385
 423 0266 4FF00101 		mov	r1, #1
 424 026a FFF7FEFF 		bl	TIM_Cmd
 425              	.LBE3:
 272:../src/main.cpp **** }
 426              		.loc 1 272 0
 427 026e 07F11807 		add	r7, r7, #24
 428 0272 BD46     		mov	sp, r7
 429 0274 80BD     		pop	{r7, pc}
 430              		.cfi_endproc
 431              	.LFE112:
 433              		.section	.rodata
 434              		.align	2
 435              	.LC1:
 436 0014 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 436      32302072 
 436      65616420 
 436      61747465 
 436      6D707420 
 437 0047 636F6465 		.ascii	"code!!!\012\015\000"
 437      2121210A 
 437      0D00
 438 0051 000000   		.text
 439 0276 00BF     		.align	2
 440              		.global	L3GD20_TIMEOUT_UserCallback
 441              		.thumb
 442              		.thumb_func
 444              	L3GD20_TIMEOUT_UserCallback:
 445              	.LFB113:
 273:../src/main.cpp **** 
 274:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 275:../src/main.cpp **** {
 446              		.loc 1 275 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450 0278 80B5     		push	{r7, lr}
 451              	.LCFI6:
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 7, -8
 454              		.cfi_offset 14, -4
 455 027a 00AF     		add	r7, sp, #0
 456              	.LCFI7:
 457              		.cfi_def_cfa_register 7
 276:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 458              		.loc 1 276 0
 459 027c 40F20000 		movw	r0, #:lower16:.LC1
 460 0280 C0F20000 		movt	r0, #:upper16:.LC1
 461 0284 FFF7FEFF 		bl	printf
 277:../src/main.cpp **** 	return 0;
 462              		.loc 1 277 0
 463 0288 4FF00003 		mov	r3, #0
 278:../src/main.cpp **** }
 464              		.loc 1 278 0
 465 028c 1846     		mov	r0, r3
 466 028e 80BD     		pop	{r7, pc}
 467              		.cfi_endproc
 468              	.LFE113:
 470              		.align	2
 471              		.global	_Z15brake_pins_initv
 472              		.thumb
 473              		.thumb_func
 475              	_Z15brake_pins_initv:
 476              	.LFB114:
 279:../src/main.cpp **** 
 280:../src/main.cpp **** void brake_pins_init(void)
 281:../src/main.cpp **** {
 477              		.loc 1 281 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 8
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481 0290 80B5     		push	{r7, lr}
 482              	.LCFI8:
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0292 82B0     		sub	sp, sp, #8
 487              	.LCFI9:
 488              		.cfi_def_cfa_offset 16
 489 0294 00AF     		add	r7, sp, #0
 490              	.LCFI10:
 491              		.cfi_def_cfa_register 7
 492              	.LBB4:
 282:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 493              		.loc 1 282 0
 494 0296 4FF40010 		mov	r0, #2097152
 495 029a 4FF00101 		mov	r1, #1
 496 029e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 283:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 284:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 497              		.loc 1 284 0
 498 02a2 3B46     		mov	r3, r7
 499 02a4 1846     		mov	r0, r3
 500 02a6 FFF7FEFF 		bl	GPIO_StructInit
 285:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 501              		.loc 1 285 0
 502 02aa 4FF00C03 		mov	r3, #12
 503 02ae 3B60     		str	r3, [r7, #0]
 286:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 504              		.loc 1 286 0
 505 02b0 4FF00003 		mov	r3, #0
 506 02b4 BB71     		strb	r3, [r7, #6]
 287:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 507              		.loc 1 287 0
 508 02b6 4FF00103 		mov	r3, #1
 509 02ba 3B71     		strb	r3, [r7, #4]
 288:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 510              		.loc 1 288 0
 511 02bc 4FF00003 		mov	r3, #0
 512 02c0 FB71     		strb	r3, [r7, #7]
 289:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 513              		.loc 1 289 0
 514 02c2 4FF00203 		mov	r3, #2
 515 02c6 7B71     		strb	r3, [r7, #5]
 290:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 516              		.loc 1 290 0
 517 02c8 3B46     		mov	r3, r7
 518 02ca 4FF48050 		mov	r0, #4096
 519 02ce C4F60000 		movt	r0, 18432
 520 02d2 1946     		mov	r1, r3
 521 02d4 FFF7FEFF 		bl	GPIO_Init
 291:../src/main.cpp **** 
 292:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 522              		.loc 1 292 0
 523 02d8 4FF48050 		mov	r0, #4096
 524 02dc C4F60000 		movt	r0, 18432
 525 02e0 4FF00401 		mov	r1, #4
 526 02e4 4FF00002 		mov	r2, #0
 527 02e8 FFF7FEFF 		bl	GPIO_WriteBit
 293:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 528              		.loc 1 293 0
 529 02ec 4FF48050 		mov	r0, #4096
 530 02f0 C4F60000 		movt	r0, 18432
 531 02f4 4FF00801 		mov	r1, #8
 532 02f8 4FF00002 		mov	r2, #0
 533 02fc FFF7FEFF 		bl	GPIO_WriteBit
 534              	.LBE4:
 294:../src/main.cpp **** 
 295:../src/main.cpp **** 	/*
 296:../src/main.cpp **** 	 * 	a.GPIO_Mode = GPIO_Mode_OUT;
 297:../src/main.cpp **** 	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 298:../src/main.cpp **** 	a.GPIO_OType = GPIO_OType_PP;
 299:../src/main.cpp **** 	a.GPIO_Speed = GPIO_Speed_Level_2;
 300:../src/main.cpp **** 
 301:../src/main.cpp **** 	 */
 302:../src/main.cpp **** }
 535              		.loc 1 302 0
 536 0300 07F10807 		add	r7, r7, #8
 537 0304 BD46     		mov	sp, r7
 538 0306 80BD     		pop	{r7, pc}
 539              		.cfi_endproc
 540              	.LFE114:
 542              		.align	2
 543              		.global	_Z13ping_pin_initv
 544              		.thumb
 545              		.thumb_func
 547              	_Z13ping_pin_initv:
 548              	.LFB115:
 303:../src/main.cpp **** /*
 304:../src/main.cpp ****  * PB0: OUTPUT
 305:../src/main.cpp ****  * PB1: INPUT
 306:../src/main.cpp ****  */
 307:../src/main.cpp **** void ping_pin_init(void)
 308:../src/main.cpp **** {
 549              		.loc 1 308 0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 8
 552              		@ frame_needed = 1, uses_anonymous_args = 0
 553 0308 80B5     		push	{r7, lr}
 554              	.LCFI11:
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 7, -8
 557              		.cfi_offset 14, -4
 558 030a 82B0     		sub	sp, sp, #8
 559              	.LCFI12:
 560              		.cfi_def_cfa_offset 16
 561 030c 00AF     		add	r7, sp, #0
 562              	.LCFI13:
 563              		.cfi_def_cfa_register 7
 564              	.LBB5:
 309:../src/main.cpp **** 
 310:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 565              		.loc 1 310 0
 566 030e 4FF48020 		mov	r0, #262144
 567 0312 4FF00101 		mov	r1, #1
 568 0316 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 311:../src/main.cpp **** 
 312:../src/main.cpp **** 	GPIO_InitTypeDef g;
 313:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 569              		.loc 1 313 0
 570 031a 4FF00003 		mov	r3, #0
 571 031e 3B71     		strb	r3, [r7, #4]
 314:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 572              		.loc 1 314 0
 573 0320 4FF00103 		mov	r3, #1
 574 0324 BB71     		strb	r3, [r7, #6]
 315:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1;
 575              		.loc 1 315 0
 576 0326 4FF00203 		mov	r3, #2
 577 032a 3B60     		str	r3, [r7, #0]
 316:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 578              		.loc 1 316 0
 579 032c 4FF00003 		mov	r3, #0
 580 0330 FB71     		strb	r3, [r7, #7]
 317:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 581              		.loc 1 317 0
 582 0332 4FF00103 		mov	r3, #1
 583 0336 7B71     		strb	r3, [r7, #5]
 318:../src/main.cpp **** 
 319:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 584              		.loc 1 319 0
 585 0338 3B46     		mov	r3, r7
 586 033a 4FF48060 		mov	r0, #1024
 587 033e C4F60000 		movt	r0, 18432
 588 0342 1946     		mov	r1, r3
 589 0344 FFF7FEFF 		bl	GPIO_Init
 320:../src/main.cpp **** 
 321:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 590              		.loc 1 321 0
 591 0348 4FF00103 		mov	r3, #1
 592 034c 3B71     		strb	r3, [r7, #4]
 322:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 593              		.loc 1 322 0
 594 034e 4FF00003 		mov	r3, #0
 595 0352 BB71     		strb	r3, [r7, #6]
 323:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 596              		.loc 1 323 0
 597 0354 4FF00103 		mov	r3, #1
 598 0358 3B60     		str	r3, [r7, #0]
 324:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 599              		.loc 1 324 0
 600 035a 4FF00003 		mov	r3, #0
 601 035e FB71     		strb	r3, [r7, #7]
 325:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 602              		.loc 1 325 0
 603 0360 4FF00103 		mov	r3, #1
 604 0364 7B71     		strb	r3, [r7, #5]
 326:../src/main.cpp **** 
 327:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 605              		.loc 1 327 0
 606 0366 3B46     		mov	r3, r7
 607 0368 4FF48060 		mov	r0, #1024
 608 036c C4F60000 		movt	r0, 18432
 609 0370 1946     		mov	r1, r3
 610 0372 FFF7FEFF 		bl	GPIO_Init
 328:../src/main.cpp **** 
 329:../src/main.cpp **** //	EXTI_InitTypeDef e;
 330:../src/main.cpp **** 
 331:../src/main.cpp **** //	e.EXTI_Line = EXTI_Line1;
 332:../src/main.cpp **** //	e.EXTI_LineCmd = ENABLE;
 333:../src/main.cpp **** //	e.EXTI_Mode = EXTI_Mode_Interrupt;
 334:../src/main.cpp **** //	e.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //EXTI_Trigger_Rising;
 335:../src/main.cpp **** 
 336:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 611              		.loc 1 336 0
 612 0376 4FF00100 		mov	r0, #1
 613 037a 4FF00101 		mov	r1, #1
 614 037e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 337:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource1);
 615              		.loc 1 337 0
 616 0382 4FF00100 		mov	r0, #1
 617 0386 4FF00101 		mov	r1, #1
 618 038a FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 619              	.LBE5:
 338:../src/main.cpp **** 
 339:../src/main.cpp **** //	EXTI_Init(&e);
 340:../src/main.cpp **** 
 341:../src/main.cpp **** 	/*
 342:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 343:../src/main.cpp **** 
 344:../src/main.cpp **** 	nv.NVIC_IRQChannel = EXTI1_IRQn;
 345:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 346:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 347:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 348:../src/main.cpp **** 
 349:../src/main.cpp **** 	NVIC_Init(&nv);
 350:../src/main.cpp **** 	*/
 351:../src/main.cpp **** 
 352:../src/main.cpp **** }
 620              		.loc 1 352 0
 621 038e 07F10807 		add	r7, r7, #8
 622 0392 BD46     		mov	sp, r7
 623 0394 80BD     		pop	{r7, pc}
 624              		.cfi_endproc
 625              	.LFE115:
 627 0396 00BF     		.align	2
 628              		.global	_Z20timer2_timebase_initv
 629              		.thumb
 630              		.thumb_func
 632              	_Z20timer2_timebase_initv:
 633              	.LFB116:
 353:../src/main.cpp **** 
 354:../src/main.cpp **** void timer2_timebase_init(void)
 355:../src/main.cpp **** {
 634              		.loc 1 355 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 16
 637              		@ frame_needed = 1, uses_anonymous_args = 0
 638 0398 80B5     		push	{r7, lr}
 639              	.LCFI14:
 640              		.cfi_def_cfa_offset 8
 641              		.cfi_offset 7, -8
 642              		.cfi_offset 14, -4
 643 039a 84B0     		sub	sp, sp, #16
 644              	.LCFI15:
 645              		.cfi_def_cfa_offset 24
 646 039c 00AF     		add	r7, sp, #0
 647              	.LCFI16:
 648              		.cfi_def_cfa_register 7
 649              	.LBB6:
 356:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 357:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 650              		.loc 1 357 0
 651 039e 4FF00100 		mov	r0, #1
 652 03a2 4FF00101 		mov	r1, #1
 653 03a6 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 358:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 654              		.loc 1 358 0
 655 03aa 44F24F63 		movw	r3, #17999
 656 03ae BB60     		str	r3, [r7, #8]
 359:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 657              		.loc 1 359 0
 658 03b0 4FF00003 		mov	r3, #0
 659 03b4 BB73     		strb	r3, [r7, #14]
 360:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 660              		.loc 1 360 0
 661 03b6 4FF04703 		mov	r3, #71
 662 03ba BB80     		strh	r3, [r7, #4]	@ movhi
 361:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 663              		.loc 1 361 0
 664 03bc 4FF00003 		mov	r3, #0
 665 03c0 BB81     		strh	r3, [r7, #12]	@ movhi
 362:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 666              		.loc 1 362 0
 667 03c2 4FF00003 		mov	r3, #0
 668 03c6 FB80     		strh	r3, [r7, #6]	@ movhi
 363:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 669              		.loc 1 363 0
 670 03c8 07F10403 		add	r3, r7, #4
 671 03cc 4FF08040 		mov	r0, #1073741824
 672 03d0 1946     		mov	r1, r3
 673 03d2 FFF7FEFF 		bl	TIM_TimeBaseInit
 364:../src/main.cpp **** //	TIM_Cmd(TIM2, ENABLE);
 365:../src/main.cpp **** 
 366:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 674              		.loc 1 366 0
 675 03d6 4FF08040 		mov	r0, #1073741824
 676 03da 4FF00001 		mov	r1, #0
 677 03de FFF7FEFF 		bl	TIM_SetCounter
 678              	.LBE6:
 367:../src/main.cpp **** }
 679              		.loc 1 367 0
 680 03e2 07F11007 		add	r7, r7, #16
 681 03e6 BD46     		mov	sp, r7
 682 03e8 80BD     		pop	{r7, pc}
 683              		.cfi_endproc
 684              	.LFE116:
 686 03ea 00BF     		.align	2
 687              		.global	_Z9comp_initv
 688              		.thumb
 689              		.thumb_func
 691              	_Z9comp_initv:
 692              	.LFB117:
 368:../src/main.cpp **** 
 369:../src/main.cpp **** /*
 370:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP5
 371:../src/main.cpp ****  */
 372:../src/main.cpp **** 
 373:../src/main.cpp **** void comp_init(void)
 374:../src/main.cpp **** {
 693              		.loc 1 374 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 40
 696              		@ frame_needed = 1, uses_anonymous_args = 0
 697 03ec 80B5     		push	{r7, lr}
 698              	.LCFI17:
 699              		.cfi_def_cfa_offset 8
 700              		.cfi_offset 7, -8
 701              		.cfi_offset 14, -4
 702 03ee 8AB0     		sub	sp, sp, #40
 703              	.LCFI18:
 704              		.cfi_def_cfa_offset 48
 705 03f0 00AF     		add	r7, sp, #0
 706              	.LCFI19:
 707              		.cfi_def_cfa_register 7
 708              	.LBB7:
 375:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 709              		.loc 1 375 0
 710 03f2 4FF00100 		mov	r0, #1
 711 03f6 4FF00101 		mov	r1, #1
 712 03fa FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 376:../src/main.cpp **** 
 377:../src/main.cpp **** 	GPIO_InitTypeDef g;
 378:../src/main.cpp **** 
 379:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 713              		.loc 1 379 0
 714 03fe 4FF00303 		mov	r3, #3
 715 0402 87F82430 		strb	r3, [r7, #36]
 380:../src/main.cpp **** //	g.GPIO_OType = GPIO_OType_OD;
 381:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 716              		.loc 1 381 0
 717 0406 4FF00003 		mov	r3, #0
 718 040a 87F82730 		strb	r3, [r7, #39]
 382:../src/main.cpp **** //	g.GPIO_Speed = GPIO_Speed_Level_3;
 383:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 719              		.loc 1 383 0
 720 040e 4FF08003 		mov	r3, #128
 721 0412 3B62     		str	r3, [r7, #32]
 384:../src/main.cpp **** 
 385:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 722              		.loc 1 385 0
 723 0414 4FF40030 		mov	r0, #131072
 724 0418 4FF00101 		mov	r1, #1
 725 041c FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 386:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 726              		.loc 1 386 0
 727 0420 07F12003 		add	r3, r7, #32
 728 0424 4FF09040 		mov	r0, #1207959552
 729 0428 1946     		mov	r1, r3
 730 042a FFF7FEFF 		bl	GPIO_Init
 387:../src/main.cpp **** 
 388:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 731              		.loc 1 388 0
 732 042e 4FF00203 		mov	r3, #2
 733 0432 87F82430 		strb	r3, [r7, #36]
 389:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 734              		.loc 1 389 0
 735 0436 4FF00003 		mov	r3, #0
 736 043a 87F82630 		strb	r3, [r7, #38]
 390:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 737              		.loc 1 390 0
 738 043e 4FF00003 		mov	r3, #0
 739 0442 87F82730 		strb	r3, [r7, #39]
 391:../src/main.cpp **** //	g.GPIO_Speed = GPIO_Speed_Level_3;
 392:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 740              		.loc 1 392 0
 741 0446 4FF40073 		mov	r3, #512
 742 044a 3B62     		str	r3, [r7, #32]
 393:../src/main.cpp **** 
 394:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 743              		.loc 1 394 0
 744 044c 4FF48060 		mov	r0, #1024
 745 0450 C4F60000 		movt	r0, 18432
 746 0454 4FF00901 		mov	r1, #9
 747 0458 4FF00802 		mov	r2, #8
 748 045c FFF7FEFF 		bl	GPIO_PinAFConfig
 395:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 749              		.loc 1 395 0
 750 0460 07F12003 		add	r3, r7, #32
 751 0464 4FF48060 		mov	r0, #1024
 752 0468 C4F60000 		movt	r0, 18432
 753 046c 1946     		mov	r1, r3
 754 046e FFF7FEFF 		bl	GPIO_Init
 396:../src/main.cpp **** 
 397:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 755              		.loc 1 397 0
 756 0472 4FF00000 		mov	r0, #0
 757 0476 FFF7FEFF 		bl	RCC_PCLK2Config
 398:../src/main.cpp **** 
 399:../src/main.cpp **** 	COMP_InitTypeDef c;
 400:../src/main.cpp **** 
 401:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 758              		.loc 1 401 0
 759 047a 4FF03003 		mov	r3, #48
 760 047e 7B60     		str	r3, [r7, #4]
 402:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 761              		.loc 1 402 0
 762 0480 4FF00003 		mov	r3, #0
 763 0484 BB60     		str	r3, [r7, #8]
 403:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 764              		.loc 1 403 0
 765 0486 4FF00403 		mov	r3, #4
 766 048a FB61     		str	r3, [r7, #28]
 404:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 767              		.loc 1 404 0
 768 048c 4FF00003 		mov	r3, #0
 769 0490 FB60     		str	r3, [r7, #12]
 405:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 770              		.loc 1 405 0
 771 0492 4FF00003 		mov	r3, #0
 772 0496 7B61     		str	r3, [r7, #20]
 406:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 773              		.loc 1 406 0
 774 0498 4FF48033 		mov	r3, #65536
 775 049c BB61     		str	r3, [r7, #24]
 407:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 776              		.loc 1 407 0
 777 049e 4FF00003 		mov	r3, #0
 778 04a2 3B61     		str	r3, [r7, #16]
 408:../src/main.cpp **** 
 409:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 779              		.loc 1 409 0
 780 04a4 07F10403 		add	r3, r7, #4
 781 04a8 4FF00400 		mov	r0, #4
 782 04ac 1946     		mov	r1, r3
 783 04ae FFF7FEFF 		bl	COMP_Init
 410:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 784              		.loc 1 410 0
 785 04b2 4FF00400 		mov	r0, #4
 786 04b6 4FF00101 		mov	r1, #1
 787 04ba FFF7FEFF 		bl	COMP_Cmd
 788              	.LBE7:
 411:../src/main.cpp **** }
 789              		.loc 1 411 0
 790 04be 07F12807 		add	r7, r7, #40
 791 04c2 BD46     		mov	sp, r7
 792 04c4 80BD     		pop	{r7, pc}
 793              		.cfi_endproc
 794              	.LFE117:
 796 04c6 00BF     		.align	2
 797              		.global	_Z14calc_gyro_biasv
 798              		.thumb
 799              		.thumb_func
 801              	_Z14calc_gyro_biasv:
 802              	.LFB118:
 412:../src/main.cpp **** 
 413:../src/main.cpp **** int16_t calc_gyro_bias(void)
 414:../src/main.cpp **** {
 803              		.loc 1 414 0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 16
 806              		@ frame_needed = 1, uses_anonymous_args = 0
 807 04c8 80B5     		push	{r7, lr}
 808              	.LCFI20:
 809              		.cfi_def_cfa_offset 8
 810              		.cfi_offset 7, -8
 811              		.cfi_offset 14, -4
 812 04ca 84B0     		sub	sp, sp, #16
 813              	.LCFI21:
 814              		.cfi_def_cfa_offset 24
 815 04cc 00AF     		add	r7, sp, #0
 816              	.LCFI22:
 817              		.cfi_def_cfa_register 7
 818              	.LBB8:
 415:../src/main.cpp **** 	int i = 0;
 819              		.loc 1 415 0
 820 04ce 4FF00003 		mov	r3, #0
 821 04d2 FB60     		str	r3, [r7, #12]
 416:../src/main.cpp **** 	int accum_x = 0;
 822              		.loc 1 416 0
 823 04d4 4FF00003 		mov	r3, #0
 824 04d8 BB60     		str	r3, [r7, #8]
 417:../src/main.cpp **** 
 418:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 419:../src/main.cpp **** 		uint16_t un_signed;
 420:../src/main.cpp **** 		int16_t output;
 421:../src/main.cpp **** 	} convert;
 422:../src/main.cpp **** 
 423:../src/main.cpp **** 	uint8_t bytes[2];
 424:../src/main.cpp **** 
 425:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 825              		.loc 1 425 0
 826 04da 4FF00003 		mov	r3, #0
 827 04de FB60     		str	r3, [r7, #12]
 828 04e0 19E0     		b	.L15
 829              	.L16:
 426:../src/main.cpp **** 	{
 427:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 830              		.loc 1 427 0 discriminator 2
 831 04e2 3B46     		mov	r3, r7
 832 04e4 1846     		mov	r0, r3
 833 04e6 4FF02801 		mov	r1, #40
 834 04ea 4FF00202 		mov	r2, #2
 835 04ee FFF7FEFF 		bl	L3GD20_Read
 428:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 836              		.loc 1 428 0 discriminator 2
 837 04f2 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 838 04f4 4FEA0323 		lsl	r3, r3, #8
 839 04f8 9AB2     		uxth	r2, r3
 840 04fa 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 841 04fc 1343     		orrs	r3, r3, r2
 842 04fe 9BB2     		uxth	r3, r3
 843 0500 9BB2     		uxth	r3, r3
 844 0502 BB80     		strh	r3, [r7, #4]	@ movhi
 429:../src/main.cpp **** 		accum_x += convert.output;
 845              		.loc 1 429 0 discriminator 2
 846 0504 BB88     		ldrh	r3, [r7, #4]
 847 0506 1BB2     		sxth	r3, r3
 848 0508 BA68     		ldr	r2, [r7, #8]
 849 050a D318     		adds	r3, r2, r3
 850 050c BB60     		str	r3, [r7, #8]
 425:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 851              		.loc 1 425 0 discriminator 2
 852 050e FB68     		ldr	r3, [r7, #12]
 853 0510 03F10103 		add	r3, r3, #1
 854 0514 FB60     		str	r3, [r7, #12]
 855              	.L15:
 425:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 856              		.loc 1 425 0 is_stmt 0 discriminator 1
 857 0516 FB68     		ldr	r3, [r7, #12]
 858 0518 F92B     		cmp	r3, #249
 859 051a CCBF     		ite	gt
 860 051c 0023     		movgt	r3, #0
 861 051e 0123     		movle	r3, #1
 862 0520 DBB2     		uxtb	r3, r3
 863 0522 002B     		cmp	r3, #0
 864 0524 DDD1     		bne	.L16
 430:../src/main.cpp **** 	}
 431:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 865              		.loc 1 431 0 is_stmt 1
 866 0526 D7ED027A 		flds	s15, [r7, #8]	@ int
 867 052a B8EEE77A 		fsitos	s14, s15
 868 052e DFED077A 		flds	s15, .L18
 869 0532 C7EE277A 		fdivs	s15, s14, s15
 870 0536 FDEEE77A 		ftosizs	s15, s15
 871 053a 17EE903A 		fmrs	r3, s15	@ int
 872 053e 9BB2     		uxth	r3, r3
 873 0540 1BB2     		sxth	r3, r3
 874              	.LBE8:
 432:../src/main.cpp **** }
 875              		.loc 1 432 0
 876 0542 1846     		mov	r0, r3
 877 0544 07F11007 		add	r7, r7, #16
 878 0548 BD46     		mov	sp, r7
 879 054a 80BD     		pop	{r7, pc}
 880              	.L19:
 881              		.align	2
 882              	.L18:
 883 054c 00007A43 		.word	1132068864
 884              		.cfi_endproc
 885              	.LFE118:
 887              		.align	2
 888              		.global	_Z13adc1_init_DMAv
 889              		.thumb
 890              		.thumb_func
 892              	_Z13adc1_init_DMAv:
 893              	.LFB119:
 433:../src/main.cpp **** 
 434:../src/main.cpp **** /*
 435:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 436:../src/main.cpp ****  * a user-supplied location in memory
 437:../src/main.cpp ****  * @Args: None
 438:../src/main.cpp ****  * @Return Val: None
 439:../src/main.cpp ****  */
 440:../src/main.cpp **** 
 441:../src/main.cpp **** void adc1_init_DMA(void)
 442:../src/main.cpp **** {
 894              		.loc 1 442 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 112
 897              		@ frame_needed = 1, uses_anonymous_args = 0
 898 0550 80B5     		push	{r7, lr}
 899              	.LCFI23:
 900              		.cfi_def_cfa_offset 8
 901              		.cfi_offset 7, -8
 902              		.cfi_offset 14, -4
 903 0552 9CB0     		sub	sp, sp, #112
 904              	.LCFI24:
 905              		.cfi_def_cfa_offset 120
 906 0554 00AF     		add	r7, sp, #0
 907              	.LCFI25:
 908              		.cfi_def_cfa_register 7
 909              	.LBB9:
 443:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 444:../src/main.cpp **** 
 445:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 446:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 447:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 448:../src/main.cpp **** 
 449:../src/main.cpp **** 	/* Configure the ADC clock */
 450:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 910              		.loc 1 450 0
 911 0556 4FF48870 		mov	r0, #272
 912 055a FFF7FEFF 		bl	RCC_ADCCLKConfig
 451:../src/main.cpp **** 	/* Enable ADC1 clock */
 452:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 913              		.loc 1 452 0
 914 055e 4FF08050 		mov	r0, #268435456
 915 0562 4FF00101 		mov	r1, #1
 916 0566 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 453:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 454:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 917              		.loc 1 454 0
 918 056a 4FF40030 		mov	r0, #131072
 919 056e 4FF00101 		mov	r1, #1
 920 0572 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 455:../src/main.cpp **** 
 456:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 457:../src/main.cpp **** 
 458:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 921              		.loc 1 458 0
 922 0576 07F15003 		add	r3, r7, #80
 923 057a 1846     		mov	r0, r3
 924 057c FFF7FEFF 		bl	GPIO_StructInit
 459:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 925              		.loc 1 459 0
 926 0580 4FF00C03 		mov	r3, #12
 927 0584 3B65     		str	r3, [r7, #80]
 460:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 928              		.loc 1 460 0
 929 0586 4FF00303 		mov	r3, #3
 930 058a 87F85430 		strb	r3, [r7, #84]
 461:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 931              		.loc 1 461 0
 932 058e 4FF00003 		mov	r3, #0
 933 0592 87F85730 		strb	r3, [r7, #87]
 462:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 934              		.loc 1 462 0
 935 0596 07F15003 		add	r3, r7, #80
 936 059a 4FF09040 		mov	r0, #1207959552
 937 059e 1946     		mov	r1, r3
 938 05a0 FFF7FEFF 		bl	GPIO_Init
 463:../src/main.cpp **** 
 464:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 939              		.loc 1 464 0
 940 05a4 3B46     		mov	r3, r7
 941 05a6 1846     		mov	r0, r3
 942 05a8 FFF7FEFF 		bl	ADC_StructInit
 465:../src/main.cpp **** 
 466:../src/main.cpp **** 	/* Calibration procedure */
 467:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 943              		.loc 1 467 0
 944 05ac 4FF0A040 		mov	r0, #1342177280
 945 05b0 4FF00101 		mov	r1, #1
 946 05b4 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 468:../src/main.cpp **** 
 469:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 470:../src/main.cpp **** 	int foo;
 471:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 947              		.loc 1 471 0
 948 05b8 4FF00003 		mov	r3, #0
 949 05bc FB66     		str	r3, [r7, #108]
 950 05be 07E0     		b	.L21
 951              	.L22:
 472:../src/main.cpp **** 	{
 473:../src/main.cpp **** 	  ++foo;
 952              		.loc 1 473 0 discriminator 2
 953 05c0 FB6E     		ldr	r3, [r7, #108]
 954 05c2 03F10103 		add	r3, r3, #1
 955 05c6 FB66     		str	r3, [r7, #108]
 471:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 956              		.loc 1 471 0 discriminator 2
 957 05c8 FB6E     		ldr	r3, [r7, #108]
 958 05ca 03F10103 		add	r3, r3, #1
 959 05ce FB66     		str	r3, [r7, #108]
 960              	.L21:
 471:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 961              		.loc 1 471 0 is_stmt 0 discriminator 1
 962 05d0 FA6E     		ldr	r2, [r7, #108]
 963 05d2 4FF6FF13 		movw	r3, #63999
 964 05d6 9A42     		cmp	r2, r3
 965 05d8 CCBF     		ite	gt
 966 05da 0023     		movgt	r3, #0
 967 05dc 0123     		movle	r3, #1
 968 05de DBB2     		uxtb	r3, r3
 969 05e0 002B     		cmp	r3, #0
 970 05e2 EDD1     		bne	.L22
 474:../src/main.cpp **** 	}
 475:../src/main.cpp **** 
 476:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 971              		.loc 1 476 0 is_stmt 1
 972 05e4 4FF0A040 		mov	r0, #1342177280
 973 05e8 4FF00001 		mov	r1, #0
 974 05ec FFF7FEFF 		bl	ADC_SelectCalibrationMode
 477:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 975              		.loc 1 477 0
 976 05f0 4FF0A040 		mov	r0, #1342177280
 977 05f4 FFF7FEFF 		bl	ADC_StartCalibration
 478:../src/main.cpp **** 
 479:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 978              		.loc 1 479 0
 979 05f8 00BF     		nop
 980              	.L23:
 981              		.loc 1 479 0 is_stmt 0 discriminator 1
 982 05fa 4FF0A040 		mov	r0, #1342177280
 983 05fe FFF7FEFF 		bl	ADC_GetCalibrationStatus
 984 0602 0346     		mov	r3, r0
 985 0604 002B     		cmp	r3, #0
 986 0606 0CBF     		ite	eq
 987 0608 0023     		moveq	r3, #0
 988 060a 0123     		movne	r3, #1
 989 060c DBB2     		uxtb	r3, r3
 990 060e 002B     		cmp	r3, #0
 991 0610 F3D1     		bne	.L23
 480:../src/main.cpp **** 
 481:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 992              		.loc 1 481 0 is_stmt 1
 993 0612 4FF00003 		mov	r3, #0
 994 0616 BB65     		str	r3, [r7, #88]
 482:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 995              		.loc 1 482 0
 996 0618 4FF00003 		mov	r3, #0
 997 061c FB65     		str	r3, [r7, #92]
 483:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 998              		.loc 1 483 0
 999 061e 4FF40043 		mov	r3, #32768
 1000 0622 3B66     		str	r3, [r7, #96]
 484:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1001              		.loc 1 484 0
 1002 0624 4FF00203 		mov	r3, #2
 1003 0628 7B66     		str	r3, [r7, #100]
 485:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1004              		.loc 1 485 0
 1005 062a 4FF00F03 		mov	r3, #15
 1006 062e 87F86830 		strb	r3, [r7, #104]
 486:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1007              		.loc 1 486 0
 1008 0632 07F15803 		add	r3, r7, #88
 1009 0636 4FF0A040 		mov	r0, #1342177280
 1010 063a 1946     		mov	r1, r3
 1011 063c FFF7FEFF 		bl	ADC_CommonInit
 487:../src/main.cpp **** 
 488:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1012              		.loc 1 488 0
 1013 0640 4FF40053 		mov	r3, #8192
 1014 0644 3B60     		str	r3, [r7, #0]
 489:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1015              		.loc 1 489 0
 1016 0646 4FF00003 		mov	r3, #0
 1017 064a 7B60     		str	r3, [r7, #4]
 490:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1018              		.loc 1 490 0
 1019 064c 4FF00003 		mov	r3, #0
 1020 0650 BB60     		str	r3, [r7, #8]
 491:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1021              		.loc 1 491 0
 1022 0652 4FF00003 		mov	r3, #0
 1023 0656 FB60     		str	r3, [r7, #12]
 492:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1024              		.loc 1 492 0
 1025 0658 4FF00003 		mov	r3, #0
 1026 065c 3B61     		str	r3, [r7, #16]
 493:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1027              		.loc 1 493 0
 1028 065e 4FF00003 		mov	r3, #0
 1029 0662 7B61     		str	r3, [r7, #20]
 494:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1030              		.loc 1 494 0
 1031 0664 4FF00003 		mov	r3, #0
 1032 0668 BB61     		str	r3, [r7, #24]
 495:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1033              		.loc 1 495 0
 1034 066a 4FF00203 		mov	r3, #2
 1035 066e 3B77     		strb	r3, [r7, #28]
 496:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1036              		.loc 1 496 0
 1037 0670 3B46     		mov	r3, r7
 1038 0672 4FF0A040 		mov	r0, #1342177280
 1039 0676 1946     		mov	r1, r3
 1040 0678 FFF7FEFF 		bl	ADC_Init
 497:../src/main.cpp **** 
 498:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 499:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1041              		.loc 1 499 0
 1042 067c 4FF0A040 		mov	r0, #1342177280
 1043 0680 4FF00301 		mov	r1, #3
 1044 0684 4FF00102 		mov	r2, #1
 1045 0688 4FF00703 		mov	r3, #7
 1046 068c FFF7FEFF 		bl	ADC_RegularChannelConfig
 500:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1047              		.loc 1 500 0
 1048 0690 4FF0A040 		mov	r0, #1342177280
 1049 0694 4FF00401 		mov	r1, #4
 1050 0698 4FF00202 		mov	r2, #2
 1051 069c 4FF00703 		mov	r3, #7
 1052 06a0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 501:../src/main.cpp **** 
 502:../src/main.cpp **** 	/* Enable ADC1 */
 503:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1053              		.loc 1 503 0
 1054 06a4 4FF0A040 		mov	r0, #1342177280
 1055 06a8 4FF00101 		mov	r1, #1
 1056 06ac FFF7FEFF 		bl	ADC_Cmd
 504:../src/main.cpp **** 
 505:../src/main.cpp **** 	/* wait for ADRDY */
 506:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1057              		.loc 1 506 0
 1058 06b0 00BF     		nop
 1059              	.L24:
 1060              		.loc 1 506 0 is_stmt 0 discriminator 1
 1061 06b2 4FF0A040 		mov	r0, #1342177280
 1062 06b6 4FF00101 		mov	r1, #1
 1063 06ba FFF7FEFF 		bl	ADC_GetFlagStatus
 1064 06be 0346     		mov	r3, r0
 1065 06c0 002B     		cmp	r3, #0
 1066 06c2 14BF     		ite	ne
 1067 06c4 0023     		movne	r3, #0
 1068 06c6 0123     		moveq	r3, #1
 1069 06c8 DBB2     		uxtb	r3, r3
 1070 06ca 002B     		cmp	r3, #0
 1071 06cc F1D1     		bne	.L24
 507:../src/main.cpp **** 
 508:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 509:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1072              		.loc 1 509 0 is_stmt 1
 1073 06ce 4FF0A040 		mov	r0, #1342177280
 1074 06d2 FFF7FEFF 		bl	ADC_StartConversion
 510:../src/main.cpp **** 
 511:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1075              		.loc 1 511 0
 1076 06d6 4FF00100 		mov	r0, #1
 1077 06da 4FF00101 		mov	r1, #1
 1078 06de FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 512:../src/main.cpp **** 
 513:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 514:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1079              		.loc 1 514 0
 1080 06e2 07F12003 		add	r3, r7, #32
 1081 06e6 1846     		mov	r0, r3
 1082 06e8 FFF7FEFF 		bl	DMA_StructInit
 515:../src/main.cpp **** 
 516:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1083              		.loc 1 516 0
 1084 06ec 4FF00800 		mov	r0, #8
 1085 06f0 C4F20200 		movt	r0, 16386
 1086 06f4 FFF7FEFF 		bl	DMA_DeInit
 517:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1087              		.loc 1 517 0
 1088 06f8 4FF04003 		mov	r3, #64
 1089 06fc C5F20003 		movt	r3, 20480
 1090 0700 3B62     		str	r3, [r7, #32]
 518:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1091              		.loc 1 518 0
 1092 0702 40F20003 		movw	r3, #:lower16:adcData
 1093 0706 C0F20003 		movt	r3, #:upper16:adcData
 1094 070a 7B62     		str	r3, [r7, #36]
 519:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1095              		.loc 1 519 0
 1096 070c 4FF00003 		mov	r3, #0
 1097 0710 BB62     		str	r3, [r7, #40]
 520:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1098              		.loc 1 520 0
 1099 0712 4FF00203 		mov	r3, #2
 1100 0716 BB85     		strh	r3, [r7, #44]	@ movhi
 521:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1101              		.loc 1 521 0
 1102 0718 4FF00003 		mov	r3, #0
 1103 071c 3B63     		str	r3, [r7, #48]
 522:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1104              		.loc 1 522 0
 1105 071e 4FF08003 		mov	r3, #128
 1106 0722 7B63     		str	r3, [r7, #52]
 523:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1107              		.loc 1 523 0
 1108 0724 4FF40073 		mov	r3, #512
 1109 0728 BB63     		str	r3, [r7, #56]
 524:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1110              		.loc 1 524 0
 1111 072a 4FF40063 		mov	r3, #2048
 1112 072e FB63     		str	r3, [r7, #60]
 525:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1113              		.loc 1 525 0
 1114 0730 4FF02003 		mov	r3, #32
 1115 0734 3B64     		str	r3, [r7, #64]
 526:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1116              		.loc 1 526 0
 1117 0736 4FF40053 		mov	r3, #8192
 1118 073a 7B64     		str	r3, [r7, #68]
 527:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1119              		.loc 1 527 0
 1120 073c 4FF00003 		mov	r3, #0
 1121 0740 BB64     		str	r3, [r7, #72]
 528:../src/main.cpp **** 
 529:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1122              		.loc 1 529 0
 1123 0742 07F12003 		add	r3, r7, #32
 1124 0746 4FF00800 		mov	r0, #8
 1125 074a C4F20200 		movt	r0, 16386
 1126 074e 1946     		mov	r1, r3
 1127 0750 FFF7FEFF 		bl	DMA_Init
 530:../src/main.cpp **** 
 531:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 532:../src/main.cpp **** 
 533:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1128              		.loc 1 533 0
 1129 0754 4FF00B03 		mov	r3, #11
 1130 0758 87F84C30 		strb	r3, [r7, #76]
 534:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1131              		.loc 1 534 0
 1132 075c 4FF00203 		mov	r3, #2
 1133 0760 87F84D30 		strb	r3, [r7, #77]
 535:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1134              		.loc 1 535 0
 1135 0764 4FF00003 		mov	r3, #0
 1136 0768 87F84E30 		strb	r3, [r7, #78]
 536:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1137              		.loc 1 536 0
 1138 076c 4FF00103 		mov	r3, #1
 1139 0770 87F84F30 		strb	r3, [r7, #79]
 537:../src/main.cpp **** 
 538:../src/main.cpp **** 	NVIC_Init(&nv);
 1140              		.loc 1 538 0
 1141 0774 07F14C03 		add	r3, r7, #76
 1142 0778 1846     		mov	r0, r3
 1143 077a FFF7FEFF 		bl	NVIC_Init
 539:../src/main.cpp **** 
 540:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1144              		.loc 1 540 0
 1145 077e 4FF00800 		mov	r0, #8
 1146 0782 C4F20200 		movt	r0, 16386
 1147 0786 4FF00201 		mov	r1, #2
 1148 078a 4FF00102 		mov	r2, #1
 1149 078e FFF7FEFF 		bl	DMA_ITConfig
 541:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1150              		.loc 1 541 0
 1151 0792 4FF00800 		mov	r0, #8
 1152 0796 C4F20200 		movt	r0, 16386
 1153 079a 4FF00101 		mov	r1, #1
 1154 079e FFF7FEFF 		bl	DMA_Cmd
 542:../src/main.cpp **** 
 543:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1155              		.loc 1 543 0
 1156 07a2 4FF0A040 		mov	r0, #1342177280
 1157 07a6 4FF00201 		mov	r1, #2
 1158 07aa FFF7FEFF 		bl	ADC_DMAConfig
 544:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1159              		.loc 1 544 0
 1160 07ae 4FF0A040 		mov	r0, #1342177280
 1161 07b2 4FF00101 		mov	r1, #1
 1162 07b6 FFF7FEFF 		bl	ADC_DMACmd
 1163              	.LBE9:
 545:../src/main.cpp **** }
 1164              		.loc 1 545 0
 1165 07ba 07F17007 		add	r7, r7, #112
 1166 07be BD46     		mov	sp, r7
 1167 07c0 80BD     		pop	{r7, pc}
 1168              		.cfi_endproc
 1169              	.LFE119:
 1171 07c2 00BF     		.align	2
 1172              		.global	_Z13adc2_init_DMAv
 1173              		.thumb
 1174              		.thumb_func
 1176              	_Z13adc2_init_DMAv:
 1177              	.LFB120:
 546:../src/main.cpp **** 
 547:../src/main.cpp **** void adc2_init_DMA(void)
 548:../src/main.cpp **** {
 1178              		.loc 1 548 0
 1179              		.cfi_startproc
 1180              		@ args = 0, pretend = 0, frame = 112
 1181              		@ frame_needed = 1, uses_anonymous_args = 0
 1182 07c4 80B5     		push	{r7, lr}
 1183              	.LCFI26:
 1184              		.cfi_def_cfa_offset 8
 1185              		.cfi_offset 7, -8
 1186              		.cfi_offset 14, -4
 1187 07c6 9CB0     		sub	sp, sp, #112
 1188              	.LCFI27:
 1189              		.cfi_def_cfa_offset 120
 1190 07c8 00AF     		add	r7, sp, #0
 1191              	.LCFI28:
 1192              		.cfi_def_cfa_register 7
 1193              	.LBB10:
 549:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 550:../src/main.cpp **** 
 551:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 552:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 553:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 554:../src/main.cpp **** 
 555:../src/main.cpp **** 	/* Configure the ADC clock */
 556:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1194              		.loc 1 556 0
 1195 07ca 4FF48870 		mov	r0, #272
 1196 07ce FFF7FEFF 		bl	RCC_ADCCLKConfig
 557:../src/main.cpp **** 	/* Enable ADC2 clock */
 558:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1197              		.loc 1 558 0
 1198 07d2 4FF08050 		mov	r0, #268435456
 1199 07d6 4FF00101 		mov	r1, #1
 1200 07da FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 559:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 560:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1201              		.loc 1 560 0
 1202 07de 4FF46020 		mov	r0, #917504
 1203 07e2 4FF00101 		mov	r1, #1
 1204 07e6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 561:../src/main.cpp **** 
 562:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 563:../src/main.cpp **** 
 564:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1205              		.loc 1 564 0
 1206 07ea 07F15003 		add	r3, r7, #80
 1207 07ee 1846     		mov	r0, r3
 1208 07f0 FFF7FEFF 		bl	GPIO_StructInit
 565:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1209              		.loc 1 565 0
 1210 07f4 4FF01003 		mov	r3, #16
 1211 07f8 3B65     		str	r3, [r7, #80]
 566:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1212              		.loc 1 566 0
 1213 07fa 4FF00303 		mov	r3, #3
 1214 07fe 87F85430 		strb	r3, [r7, #84]
 567:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1215              		.loc 1 567 0
 1216 0802 4FF00003 		mov	r3, #0
 1217 0806 87F85730 		strb	r3, [r7, #87]
 568:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1218              		.loc 1 568 0
 1219 080a 4FF00303 		mov	r3, #3
 1220 080e 87F85530 		strb	r3, [r7, #85]
 569:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1221              		.loc 1 569 0
 1222 0812 07F15003 		add	r3, r7, #80
 1223 0816 4FF09040 		mov	r0, #1207959552
 1224 081a 1946     		mov	r1, r3
 1225 081c FFF7FEFF 		bl	GPIO_Init
 570:../src/main.cpp **** 
 571:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1226              		.loc 1 571 0
 1227 0820 07F15003 		add	r3, r7, #80
 1228 0824 1846     		mov	r0, r3
 1229 0826 FFF7FEFF 		bl	GPIO_StructInit
 572:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1230              		.loc 1 572 0
 1231 082a 4FF00403 		mov	r3, #4
 1232 082e 3B65     		str	r3, [r7, #80]
 573:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1233              		.loc 1 573 0
 1234 0830 4FF00303 		mov	r3, #3
 1235 0834 87F85430 		strb	r3, [r7, #84]
 574:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1236              		.loc 1 574 0
 1237 0838 4FF00003 		mov	r3, #0
 1238 083c 87F85730 		strb	r3, [r7, #87]
 575:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1239              		.loc 1 575 0
 1240 0840 07F15003 		add	r3, r7, #80
 1241 0844 4FF48060 		mov	r0, #1024
 1242 0848 C4F60000 		movt	r0, 18432
 1243 084c 1946     		mov	r1, r3
 1244 084e FFF7FEFF 		bl	GPIO_Init
 576:../src/main.cpp **** 
 577:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1245              		.loc 1 577 0
 1246 0852 07F15003 		add	r3, r7, #80
 1247 0856 1846     		mov	r0, r3
 1248 0858 FFF7FEFF 		bl	GPIO_StructInit
 578:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 1249              		.loc 1 578 0
 1250 085c 4FF03003 		mov	r3, #48
 1251 0860 3B65     		str	r3, [r7, #80]
 579:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1252              		.loc 1 579 0
 1253 0862 4FF00303 		mov	r3, #3
 1254 0866 87F85430 		strb	r3, [r7, #84]
 580:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1255              		.loc 1 580 0
 1256 086a 4FF00003 		mov	r3, #0
 1257 086e 87F85730 		strb	r3, [r7, #87]
 581:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 1258              		.loc 1 581 0
 1259 0872 07F15003 		add	r3, r7, #80
 1260 0876 4FF40060 		mov	r0, #2048
 1261 087a C4F60000 		movt	r0, 18432
 1262 087e 1946     		mov	r1, r3
 1263 0880 FFF7FEFF 		bl	GPIO_Init
 582:../src/main.cpp **** 
 583:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1264              		.loc 1 583 0
 1265 0884 3B46     		mov	r3, r7
 1266 0886 1846     		mov	r0, r3
 1267 0888 FFF7FEFF 		bl	ADC_StructInit
 584:../src/main.cpp **** 
 585:../src/main.cpp **** 	/* Calibration procedure */
 586:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 1268              		.loc 1 586 0
 1269 088c 4FF48070 		mov	r0, #256
 1270 0890 C5F20000 		movt	r0, 20480
 1271 0894 4FF00101 		mov	r1, #1
 1272 0898 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 587:../src/main.cpp **** 
 588:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 589:../src/main.cpp **** 	int foo;
 590:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1273              		.loc 1 590 0
 1274 089c 4FF00003 		mov	r3, #0
 1275 08a0 FB66     		str	r3, [r7, #108]
 1276 08a2 07E0     		b	.L26
 1277              	.L27:
 591:../src/main.cpp **** 	{
 592:../src/main.cpp **** 	  ++foo;
 1278              		.loc 1 592 0 discriminator 2
 1279 08a4 FB6E     		ldr	r3, [r7, #108]
 1280 08a6 03F10103 		add	r3, r3, #1
 1281 08aa FB66     		str	r3, [r7, #108]
 590:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1282              		.loc 1 590 0 discriminator 2
 1283 08ac FB6E     		ldr	r3, [r7, #108]
 1284 08ae 03F10103 		add	r3, r3, #1
 1285 08b2 FB66     		str	r3, [r7, #108]
 1286              	.L26:
 590:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1287              		.loc 1 590 0 is_stmt 0 discriminator 1
 1288 08b4 FA6E     		ldr	r2, [r7, #108]
 1289 08b6 4FF6FF13 		movw	r3, #63999
 1290 08ba 9A42     		cmp	r2, r3
 1291 08bc CCBF     		ite	gt
 1292 08be 0023     		movgt	r3, #0
 1293 08c0 0123     		movle	r3, #1
 1294 08c2 DBB2     		uxtb	r3, r3
 1295 08c4 002B     		cmp	r3, #0
 1296 08c6 EDD1     		bne	.L27
 593:../src/main.cpp **** 	}
 594:../src/main.cpp **** 
 595:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 1297              		.loc 1 595 0 is_stmt 1
 1298 08c8 4FF48070 		mov	r0, #256
 1299 08cc C5F20000 		movt	r0, 20480
 1300 08d0 4FF00001 		mov	r1, #0
 1301 08d4 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 596:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 1302              		.loc 1 596 0
 1303 08d8 4FF48070 		mov	r0, #256
 1304 08dc C5F20000 		movt	r0, 20480
 1305 08e0 FFF7FEFF 		bl	ADC_StartCalibration
 597:../src/main.cpp **** 
 598:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 1306              		.loc 1 598 0
 1307 08e4 00BF     		nop
 1308              	.L28:
 1309              		.loc 1 598 0 is_stmt 0 discriminator 1
 1310 08e6 4FF48070 		mov	r0, #256
 1311 08ea C5F20000 		movt	r0, 20480
 1312 08ee FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1313 08f2 0346     		mov	r3, r0
 1314 08f4 002B     		cmp	r3, #0
 1315 08f6 0CBF     		ite	eq
 1316 08f8 0023     		moveq	r3, #0
 1317 08fa 0123     		movne	r3, #1
 1318 08fc DBB2     		uxtb	r3, r3
 1319 08fe 002B     		cmp	r3, #0
 1320 0900 F1D1     		bne	.L28
 599:../src/main.cpp **** 
 600:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1321              		.loc 1 600 0 is_stmt 1
 1322 0902 4FF00003 		mov	r3, #0
 1323 0906 BB65     		str	r3, [r7, #88]
 601:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1324              		.loc 1 601 0
 1325 0908 4FF00003 		mov	r3, #0
 1326 090c FB65     		str	r3, [r7, #92]
 602:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1327              		.loc 1 602 0
 1328 090e 4FF40043 		mov	r3, #32768
 1329 0912 3B66     		str	r3, [r7, #96]
 603:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1330              		.loc 1 603 0
 1331 0914 4FF00203 		mov	r3, #2
 1332 0918 7B66     		str	r3, [r7, #100]
 604:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 1333              		.loc 1 604 0
 1334 091a 4FF00F03 		mov	r3, #15
 1335 091e 87F86830 		strb	r3, [r7, #104]
 605:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 1336              		.loc 1 605 0
 1337 0922 07F15803 		add	r3, r7, #88
 1338 0926 4FF48070 		mov	r0, #256
 1339 092a C5F20000 		movt	r0, 20480
 1340 092e 1946     		mov	r1, r3
 1341 0930 FFF7FEFF 		bl	ADC_CommonInit
 606:../src/main.cpp **** 
 607:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1342              		.loc 1 607 0
 1343 0934 4FF40053 		mov	r3, #8192
 1344 0938 3B60     		str	r3, [r7, #0]
 608:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1345              		.loc 1 608 0
 1346 093a 4FF00003 		mov	r3, #0
 1347 093e 7B60     		str	r3, [r7, #4]
 609:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1348              		.loc 1 609 0
 1349 0940 4FF00003 		mov	r3, #0
 1350 0944 BB60     		str	r3, [r7, #8]
 610:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1351              		.loc 1 610 0
 1352 0946 4FF00003 		mov	r3, #0
 1353 094a FB60     		str	r3, [r7, #12]
 611:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1354              		.loc 1 611 0
 1355 094c 4FF00003 		mov	r3, #0
 1356 0950 3B61     		str	r3, [r7, #16]
 612:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1357              		.loc 1 612 0
 1358 0952 4FF00003 		mov	r3, #0
 1359 0956 7B61     		str	r3, [r7, #20]
 613:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1360              		.loc 1 613 0
 1361 0958 4FF00003 		mov	r3, #0
 1362 095c BB61     		str	r3, [r7, #24]
 614:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 1363              		.loc 1 614 0
 1364 095e 4FF00403 		mov	r3, #4
 1365 0962 3B77     		strb	r3, [r7, #28]
 615:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 1366              		.loc 1 615 0
 1367 0964 3B46     		mov	r3, r7
 1368 0966 4FF48070 		mov	r0, #256
 1369 096a C5F20000 		movt	r0, 20480
 1370 096e 1946     		mov	r1, r3
 1371 0970 FFF7FEFF 		bl	ADC_Init
 616:../src/main.cpp **** 
 617:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 618:../src/main.cpp **** 
 619:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1372              		.loc 1 619 0
 1373 0974 4FF48070 		mov	r0, #256
 1374 0978 C5F20000 		movt	r0, 20480
 1375 097c 4FF00101 		mov	r1, #1
 1376 0980 4FF00102 		mov	r2, #1
 1377 0984 4FF00703 		mov	r3, #7
 1378 0988 FFF7FEFF 		bl	ADC_RegularChannelConfig
 620:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1379              		.loc 1 620 0
 1380 098c 4FF48070 		mov	r0, #256
 1381 0990 C5F20000 		movt	r0, 20480
 1382 0994 4FF00501 		mov	r1, #5
 1383 0998 4FF00202 		mov	r2, #2
 1384 099c 4FF00703 		mov	r3, #7
 1385 09a0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 621:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 1386              		.loc 1 621 0
 1387 09a4 4FF48070 		mov	r0, #256
 1388 09a8 C5F20000 		movt	r0, 20480
 1389 09ac 4FF00B01 		mov	r1, #11
 1390 09b0 4FF00302 		mov	r2, #3
 1391 09b4 4FF00703 		mov	r3, #7
 1392 09b8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 622:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 1393              		.loc 1 622 0
 1394 09bc 4FF48070 		mov	r0, #256
 1395 09c0 C5F20000 		movt	r0, 20480
 1396 09c4 4FF00C01 		mov	r1, #12
 1397 09c8 4FF00402 		mov	r2, #4
 1398 09cc 4FF00703 		mov	r3, #7
 1399 09d0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 623:../src/main.cpp **** 
 624:../src/main.cpp **** 	/* Enable ADC2 */
 625:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 1400              		.loc 1 625 0
 1401 09d4 4FF48070 		mov	r0, #256
 1402 09d8 C5F20000 		movt	r0, 20480
 1403 09dc 4FF00101 		mov	r1, #1
 1404 09e0 FFF7FEFF 		bl	ADC_Cmd
 626:../src/main.cpp **** 
 627:../src/main.cpp **** 	/* wait for ADRDY */
 628:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 1405              		.loc 1 628 0
 1406 09e4 00BF     		nop
 1407              	.L29:
 1408              		.loc 1 628 0 is_stmt 0 discriminator 1
 1409 09e6 4FF48070 		mov	r0, #256
 1410 09ea C5F20000 		movt	r0, 20480
 1411 09ee 4FF00101 		mov	r1, #1
 1412 09f2 FFF7FEFF 		bl	ADC_GetFlagStatus
 1413 09f6 0346     		mov	r3, r0
 1414 09f8 002B     		cmp	r3, #0
 1415 09fa 14BF     		ite	ne
 1416 09fc 0023     		movne	r3, #0
 1417 09fe 0123     		moveq	r3, #1
 1418 0a00 DBB2     		uxtb	r3, r3
 1419 0a02 002B     		cmp	r3, #0
 1420 0a04 EFD1     		bne	.L29
 629:../src/main.cpp **** 
 630:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 631:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 1421              		.loc 1 631 0 is_stmt 1
 1422 0a06 4FF48070 		mov	r0, #256
 1423 0a0a C5F20000 		movt	r0, 20480
 1424 0a0e FFF7FEFF 		bl	ADC_StartConversion
 632:../src/main.cpp **** 
 633:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 1425              		.loc 1 633 0
 1426 0a12 4FF00200 		mov	r0, #2
 1427 0a16 4FF00101 		mov	r1, #1
 1428 0a1a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 634:../src/main.cpp **** 
 635:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 636:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1429              		.loc 1 636 0
 1430 0a1e 07F12003 		add	r3, r7, #32
 1431 0a22 1846     		mov	r0, r3
 1432 0a24 FFF7FEFF 		bl	DMA_StructInit
 637:../src/main.cpp **** 
 638:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 1433              		.loc 1 638 0
 1434 0a28 4FF48160 		mov	r0, #1032
 1435 0a2c C4F20200 		movt	r0, 16386
 1436 0a30 FFF7FEFF 		bl	DMA_DeInit
 639:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 1437              		.loc 1 639 0
 1438 0a34 4FF4A073 		mov	r3, #320
 1439 0a38 C5F20003 		movt	r3, 20480
 1440 0a3c 3B62     		str	r3, [r7, #32]
 640:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 1441              		.loc 1 640 0
 1442 0a3e 40F20003 		movw	r3, #:lower16:adc2_data
 1443 0a42 C0F20003 		movt	r3, #:upper16:adc2_data
 1444 0a46 7B62     		str	r3, [r7, #36]
 641:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1445              		.loc 1 641 0
 1446 0a48 4FF00003 		mov	r3, #0
 1447 0a4c BB62     		str	r3, [r7, #40]
 642:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 1448              		.loc 1 642 0
 1449 0a4e 4FF00403 		mov	r3, #4
 1450 0a52 BB85     		strh	r3, [r7, #44]	@ movhi
 643:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1451              		.loc 1 643 0
 1452 0a54 4FF00003 		mov	r3, #0
 1453 0a58 3B63     		str	r3, [r7, #48]
 644:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1454              		.loc 1 644 0
 1455 0a5a 4FF08003 		mov	r3, #128
 1456 0a5e 7B63     		str	r3, [r7, #52]
 645:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1457              		.loc 1 645 0
 1458 0a60 4FF40073 		mov	r3, #512
 1459 0a64 BB63     		str	r3, [r7, #56]
 646:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1460              		.loc 1 646 0
 1461 0a66 4FF40063 		mov	r3, #2048
 1462 0a6a FB63     		str	r3, [r7, #60]
 647:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1463              		.loc 1 647 0
 1464 0a6c 4FF02003 		mov	r3, #32
 1465 0a70 3B64     		str	r3, [r7, #64]
 648:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1466              		.loc 1 648 0
 1467 0a72 4FF40053 		mov	r3, #8192
 1468 0a76 7B64     		str	r3, [r7, #68]
 649:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1469              		.loc 1 649 0
 1470 0a78 4FF00003 		mov	r3, #0
 1471 0a7c BB64     		str	r3, [r7, #72]
 650:../src/main.cpp **** 
 651:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 1472              		.loc 1 651 0
 1473 0a7e 07F12003 		add	r3, r7, #32
 1474 0a82 4FF48160 		mov	r0, #1032
 1475 0a86 C4F20200 		movt	r0, 16386
 1476 0a8a 1946     		mov	r1, r3
 1477 0a8c FFF7FEFF 		bl	DMA_Init
 652:../src/main.cpp **** 
 653:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 654:../src/main.cpp **** 
 655:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 1478              		.loc 1 655 0
 1479 0a90 4FF03803 		mov	r3, #56
 1480 0a94 87F84C30 		strb	r3, [r7, #76]
 656:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1481              		.loc 1 656 0
 1482 0a98 4FF00203 		mov	r3, #2
 1483 0a9c 87F84D30 		strb	r3, [r7, #77]
 657:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1484              		.loc 1 657 0
 1485 0aa0 4FF00003 		mov	r3, #0
 1486 0aa4 87F84E30 		strb	r3, [r7, #78]
 658:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1487              		.loc 1 658 0
 1488 0aa8 4FF00103 		mov	r3, #1
 1489 0aac 87F84F30 		strb	r3, [r7, #79]
 659:../src/main.cpp **** 
 660:../src/main.cpp **** 	NVIC_Init(&nv);
 1490              		.loc 1 660 0
 1491 0ab0 07F14C03 		add	r3, r7, #76
 1492 0ab4 1846     		mov	r0, r3
 1493 0ab6 FFF7FEFF 		bl	NVIC_Init
 661:../src/main.cpp **** 
 662:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 1494              		.loc 1 662 0
 1495 0aba 4FF48160 		mov	r0, #1032
 1496 0abe C4F20200 		movt	r0, 16386
 1497 0ac2 4FF00201 		mov	r1, #2
 1498 0ac6 4FF00102 		mov	r2, #1
 1499 0aca FFF7FEFF 		bl	DMA_ITConfig
 663:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 1500              		.loc 1 663 0
 1501 0ace 4FF48160 		mov	r0, #1032
 1502 0ad2 C4F20200 		movt	r0, 16386
 1503 0ad6 4FF00101 		mov	r1, #1
 1504 0ada FFF7FEFF 		bl	DMA_Cmd
 664:../src/main.cpp **** 
 665:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 1505              		.loc 1 665 0
 1506 0ade 4FF48070 		mov	r0, #256
 1507 0ae2 C5F20000 		movt	r0, 20480
 1508 0ae6 4FF00201 		mov	r1, #2
 1509 0aea FFF7FEFF 		bl	ADC_DMAConfig
 666:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 1510              		.loc 1 666 0
 1511 0aee 4FF48070 		mov	r0, #256
 1512 0af2 C5F20000 		movt	r0, 20480
 1513 0af6 4FF00101 		mov	r1, #1
 1514 0afa FFF7FEFF 		bl	ADC_DMACmd
 1515              	.LBE10:
 667:../src/main.cpp **** }
 1516              		.loc 1 667 0
 1517 0afe 07F17007 		add	r7, r7, #112
 1518 0b02 BD46     		mov	sp, r7
 1519 0b04 80BD     		pop	{r7, pc}
 1520              		.cfi_endproc
 1521              	.LFE120:
 1523 0b06 00BF     		.align	2
 1524              		.global	_Z21battery_watchdog_initv
 1525              		.thumb
 1526              		.thumb_func
 1528              	_Z21battery_watchdog_initv:
 1529              	.LFB121:
 668:../src/main.cpp **** 
 669:../src/main.cpp **** void battery_watchdog_init(void)
 670:../src/main.cpp **** {
 1530              		.loc 1 670 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 72
 1533              		@ frame_needed = 1, uses_anonymous_args = 0
 1534 0b08 80B5     		push	{r7, lr}
 1535              	.LCFI29:
 1536              		.cfi_def_cfa_offset 8
 1537              		.cfi_offset 7, -8
 1538              		.cfi_offset 14, -4
 1539 0b0a 92B0     		sub	sp, sp, #72
 1540              	.LCFI30:
 1541              		.cfi_def_cfa_offset 80
 1542 0b0c 00AF     		add	r7, sp, #0
 1543              	.LCFI31:
 1544              		.cfi_def_cfa_register 7
 1545              	.LBB11:
 671:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 672:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 673:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 674:../src/main.cpp **** 	/* Configure the ADC clock */
 675:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 1546              		.loc 1 675 0
 1547 0b0e 4FF45050 		mov	r0, #13312
 1548 0b12 C1F20000 		movt	r0, 4096
 1549 0b16 FFF7FEFF 		bl	RCC_ADCCLKConfig
 676:../src/main.cpp **** 
 677:../src/main.cpp **** 	/* Enable ADC1 clock */
 678:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 1550              		.loc 1 678 0
 1551 0b1a 4FF00050 		mov	r0, #536870912
 1552 0b1e 4FF00101 		mov	r1, #1
 1553 0b22 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 679:../src/main.cpp **** 	/* ADC Channel configuration */
 680:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 681:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 1554              		.loc 1 681 0
 1555 0b26 4FF41010 		mov	r0, #2359296
 1556 0b2a 4FF00101 		mov	r1, #1
 1557 0b2e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 682:../src/main.cpp **** 
 683:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 684:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1558              		.loc 1 684 0
 1559 0b32 07F12803 		add	r3, r7, #40
 1560 0b36 1846     		mov	r0, r3
 1561 0b38 FFF7FEFF 		bl	GPIO_StructInit
 685:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 1562              		.loc 1 685 0
 1563 0b3c 42F20203 		movw	r3, #8194
 1564 0b40 BB62     		str	r3, [r7, #40]
 686:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1565              		.loc 1 686 0
 1566 0b42 4FF00303 		mov	r3, #3
 1567 0b46 87F82C30 		strb	r3, [r7, #44]
 687:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1568              		.loc 1 687 0
 1569 0b4a 4FF00003 		mov	r3, #0
 1570 0b4e 87F82F30 		strb	r3, [r7, #47]
 688:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1571              		.loc 1 688 0
 1572 0b52 07F12803 		add	r3, r7, #40
 1573 0b56 4FF48060 		mov	r0, #1024
 1574 0b5a C4F60000 		movt	r0, 18432
 1575 0b5e 1946     		mov	r1, r3
 1576 0b60 FFF7FEFF 		bl	GPIO_Init
 689:../src/main.cpp **** /*
 690:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 691:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 692:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 693:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 694:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 695:../src/main.cpp **** */
 696:../src/main.cpp **** 
 697:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1577              		.loc 1 697 0
 1578 0b64 07F10403 		add	r3, r7, #4
 1579 0b68 1846     		mov	r0, r3
 1580 0b6a FFF7FEFF 		bl	ADC_StructInit
 698:../src/main.cpp **** 
 699:../src/main.cpp **** 	/* Calibration procedure */
 700:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 1581              		.loc 1 700 0
 1582 0b6e 4FF48060 		mov	r0, #1024
 1583 0b72 C5F20000 		movt	r0, 20480
 1584 0b76 4FF00101 		mov	r1, #1
 1585 0b7a FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 701:../src/main.cpp **** 
 702:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 703:../src/main.cpp **** 	int foo;
 704:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1586              		.loc 1 704 0
 1587 0b7e 4FF00003 		mov	r3, #0
 1588 0b82 7B64     		str	r3, [r7, #68]
 1589 0b84 07E0     		b	.L31
 1590              	.L32:
 705:../src/main.cpp **** 	{
 706:../src/main.cpp **** 	  ++foo;
 1591              		.loc 1 706 0 discriminator 2
 1592 0b86 7B6C     		ldr	r3, [r7, #68]
 1593 0b88 03F10103 		add	r3, r3, #1
 1594 0b8c 7B64     		str	r3, [r7, #68]
 704:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1595              		.loc 1 704 0 discriminator 2
 1596 0b8e 7B6C     		ldr	r3, [r7, #68]
 1597 0b90 03F10103 		add	r3, r3, #1
 1598 0b94 7B64     		str	r3, [r7, #68]
 1599              	.L31:
 704:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1600              		.loc 1 704 0 is_stmt 0 discriminator 1
 1601 0b96 7A6C     		ldr	r2, [r7, #68]
 1602 0b98 47F6FF43 		movw	r3, #31999
 1603 0b9c 9A42     		cmp	r2, r3
 1604 0b9e CCBF     		ite	gt
 1605 0ba0 0023     		movgt	r3, #0
 1606 0ba2 0123     		movle	r3, #1
 1607 0ba4 DBB2     		uxtb	r3, r3
 1608 0ba6 002B     		cmp	r3, #0
 1609 0ba8 EDD1     		bne	.L32
 707:../src/main.cpp **** 	}
 708:../src/main.cpp **** 
 709:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 1610              		.loc 1 709 0 is_stmt 1
 1611 0baa 4FF48060 		mov	r0, #1024
 1612 0bae C5F20000 		movt	r0, 20480
 1613 0bb2 4FF00001 		mov	r1, #0
 1614 0bb6 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 710:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 1615              		.loc 1 710 0
 1616 0bba 4FF48060 		mov	r0, #1024
 1617 0bbe C5F20000 		movt	r0, 20480
 1618 0bc2 FFF7FEFF 		bl	ADC_StartCalibration
 711:../src/main.cpp **** 
 712:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 1619              		.loc 1 712 0
 1620 0bc6 00BF     		nop
 1621              	.L33:
 1622              		.loc 1 712 0 is_stmt 0 discriminator 1
 1623 0bc8 4FF48060 		mov	r0, #1024
 1624 0bcc C5F20000 		movt	r0, 20480
 1625 0bd0 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1626 0bd4 0346     		mov	r3, r0
 1627 0bd6 002B     		cmp	r3, #0
 1628 0bd8 0CBF     		ite	eq
 1629 0bda 0023     		moveq	r3, #0
 1630 0bdc 0123     		movne	r3, #1
 1631 0bde DBB2     		uxtb	r3, r3
 1632 0be0 002B     		cmp	r3, #0
 1633 0be2 F1D1     		bne	.L33
 713:../src/main.cpp **** 
 714:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1634              		.loc 1 714 0 is_stmt 1
 1635 0be4 4FF00003 		mov	r3, #0
 1636 0be8 3B63     		str	r3, [r7, #48]
 715:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 1637              		.loc 1 715 0
 1638 0bea 4FF44033 		mov	r3, #196608
 1639 0bee 7B63     		str	r3, [r7, #52]
 716:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 1640              		.loc 1 716 0
 1641 0bf0 4FF00003 		mov	r3, #0
 1642 0bf4 BB63     		str	r3, [r7, #56]
 717:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 1643              		.loc 1 717 0
 1644 0bf6 4FF00003 		mov	r3, #0
 1645 0bfa FB63     		str	r3, [r7, #60]
 718:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 1646              		.loc 1 718 0
 1647 0bfc 4FF00003 		mov	r3, #0
 1648 0c00 87F84030 		strb	r3, [r7, #64]
 719:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 1649              		.loc 1 719 0
 1650 0c04 07F13003 		add	r3, r7, #48
 1651 0c08 4FF48060 		mov	r0, #1024
 1652 0c0c C5F20000 		movt	r0, 20480
 1653 0c10 1946     		mov	r1, r3
 1654 0c12 FFF7FEFF 		bl	ADC_CommonInit
 720:../src/main.cpp **** 
 721:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1655              		.loc 1 721 0
 1656 0c16 4FF40053 		mov	r3, #8192
 1657 0c1a 7B60     		str	r3, [r7, #4]
 722:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1658              		.loc 1 722 0
 1659 0c1c 4FF00003 		mov	r3, #0
 1660 0c20 BB60     		str	r3, [r7, #8]
 723:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1661              		.loc 1 723 0
 1662 0c22 4FF00003 		mov	r3, #0
 1663 0c26 FB60     		str	r3, [r7, #12]
 724:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1664              		.loc 1 724 0
 1665 0c28 4FF00003 		mov	r3, #0
 1666 0c2c 3B61     		str	r3, [r7, #16]
 725:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1667              		.loc 1 725 0
 1668 0c2e 4FF00003 		mov	r3, #0
 1669 0c32 7B61     		str	r3, [r7, #20]
 726:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1670              		.loc 1 726 0
 1671 0c34 4FF00003 		mov	r3, #0
 1672 0c38 BB61     		str	r3, [r7, #24]
 727:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1673              		.loc 1 727 0
 1674 0c3a 4FF00003 		mov	r3, #0
 1675 0c3e FB61     		str	r3, [r7, #28]
 728:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1676              		.loc 1 728 0
 1677 0c40 4FF00203 		mov	r3, #2
 1678 0c44 87F82030 		strb	r3, [r7, #32]
 729:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 1679              		.loc 1 729 0
 1680 0c48 07F10403 		add	r3, r7, #4
 1681 0c4c 4FF48060 		mov	r0, #1024
 1682 0c50 C5F20000 		movt	r0, 20480
 1683 0c54 1946     		mov	r1, r3
 1684 0c56 FFF7FEFF 		bl	ADC_Init
 730:../src/main.cpp **** 
 731:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 732:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1685              		.loc 1 732 0
 1686 0c5a 4FF48060 		mov	r0, #1024
 1687 0c5e C5F20000 		movt	r0, 20480
 1688 0c62 4FF00101 		mov	r1, #1
 1689 0c66 4FF00102 		mov	r2, #1
 1690 0c6a 4FF00703 		mov	r3, #7
 1691 0c6e FFF7FEFF 		bl	ADC_RegularChannelConfig
 733:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1692              		.loc 1 733 0
 1693 0c72 4FF48060 		mov	r0, #1024
 1694 0c76 C5F20000 		movt	r0, 20480
 1695 0c7a 4FF00501 		mov	r1, #5
 1696 0c7e 4FF00202 		mov	r2, #2
 1697 0c82 4FF00703 		mov	r3, #7
 1698 0c86 FFF7FEFF 		bl	ADC_RegularChannelConfig
 734:../src/main.cpp **** 
 735:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 1699              		.loc 1 735 0
 1700 0c8a 4FF48060 		mov	r0, #1024
 1701 0c8e C5F20000 		movt	r0, 20480
 1702 0c92 4FF00101 		mov	r1, #1
 1703 0c96 FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 736:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 1704              		.loc 1 736 0
 1705 0c9a 4FF48060 		mov	r0, #1024
 1706 0c9e C5F20000 		movt	r0, 20480
 1707 0ca2 4FF00501 		mov	r1, #5
 1708 0ca6 FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 737:../src/main.cpp **** 
 738:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 739:../src/main.cpp **** 
 740:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 1709              		.loc 1 740 0
 1710 0caa 4FF48060 		mov	r0, #1024
 1711 0cae C5F20000 		movt	r0, 20480
 1712 0cb2 4FF40061 		mov	r1, #2048
 1713 0cb6 4FF00A02 		mov	r2, #10
 1714 0cba FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 741:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 1715              		.loc 1 741 0
 1716 0cbe 4FF48060 		mov	r0, #1024
 1717 0cc2 C5F20000 		movt	r0, 20480
 1718 0cc6 4FF08001 		mov	r1, #128
 1719 0cca 4FF00002 		mov	r2, #0
 1720 0cce FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 742:../src/main.cpp **** 
 743:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 1721              		.loc 1 743 0
 1722 0cd2 4FF48060 		mov	r0, #1024
 1723 0cd6 C5F20000 		movt	r0, 20480
 1724 0cda 4FF44001 		mov	r1, #12582912
 1725 0cde FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 744:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 745:../src/main.cpp **** 
 746:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 747:../src/main.cpp **** 
 748:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 749:../src/main.cpp **** 
 750:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 1726              		.loc 1 750 0
 1727 0ce2 4FF02F03 		mov	r3, #47
 1728 0ce6 87F82430 		strb	r3, [r7, #36]
 751:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 1729              		.loc 1 751 0
 1730 0cea 4FF00003 		mov	r3, #0
 1731 0cee 87F82530 		strb	r3, [r7, #37]
 752:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1732              		.loc 1 752 0
 1733 0cf2 4FF00003 		mov	r3, #0
 1734 0cf6 87F82630 		strb	r3, [r7, #38]
 753:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1735              		.loc 1 753 0
 1736 0cfa 4FF00103 		mov	r3, #1
 1737 0cfe 87F82730 		strb	r3, [r7, #39]
 754:../src/main.cpp **** 
 755:../src/main.cpp **** 	NVIC_Init(&nv);
 1738              		.loc 1 755 0
 1739 0d02 07F12403 		add	r3, r7, #36
 1740 0d06 1846     		mov	r0, r3
 1741 0d08 FFF7FEFF 		bl	NVIC_Init
 756:../src/main.cpp **** 
 757:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 758:../src/main.cpp **** 
 759:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 1742              		.loc 1 759 0
 1743 0d0c 4FF48060 		mov	r0, #1024
 1744 0d10 C5F20000 		movt	r0, 20480
 1745 0d14 4FF4C071 		mov	r1, #384
 1746 0d18 4FF00102 		mov	r2, #1
 1747 0d1c FFF7FEFF 		bl	ADC_ITConfig
 760:../src/main.cpp **** 
 761:../src/main.cpp **** 	/* Enable ADC3 */
 762:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 1748              		.loc 1 762 0
 1749 0d20 4FF48060 		mov	r0, #1024
 1750 0d24 C5F20000 		movt	r0, 20480
 1751 0d28 4FF00101 		mov	r1, #1
 1752 0d2c FFF7FEFF 		bl	ADC_Cmd
 763:../src/main.cpp **** 
 764:../src/main.cpp **** 	/* wait for ADRDY */
 765:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 1753              		.loc 1 765 0
 1754 0d30 00BF     		nop
 1755              	.L34:
 1756              		.loc 1 765 0 is_stmt 0 discriminator 1
 1757 0d32 4FF48060 		mov	r0, #1024
 1758 0d36 C5F20000 		movt	r0, 20480
 1759 0d3a 4FF00101 		mov	r1, #1
 1760 0d3e FFF7FEFF 		bl	ADC_GetFlagStatus
 1761 0d42 0346     		mov	r3, r0
 1762 0d44 002B     		cmp	r3, #0
 1763 0d46 14BF     		ite	ne
 1764 0d48 0023     		movne	r3, #0
 1765 0d4a 0123     		moveq	r3, #1
 1766 0d4c DBB2     		uxtb	r3, r3
 1767 0d4e 002B     		cmp	r3, #0
 1768 0d50 EFD1     		bne	.L34
 766:../src/main.cpp **** 
 767:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 768:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 1769              		.loc 1 768 0 is_stmt 1
 1770 0d52 4FF48060 		mov	r0, #1024
 1771 0d56 C5F20000 		movt	r0, 20480
 1772 0d5a FFF7FEFF 		bl	ADC_StartConversion
 1773              	.LBE11:
 769:../src/main.cpp **** }
 1774              		.loc 1 769 0
 1775 0d5e 07F14807 		add	r7, r7, #72
 1776 0d62 BD46     		mov	sp, r7
 1777 0d64 80BD     		pop	{r7, pc}
 1778              		.cfi_endproc
 1779              	.LFE121:
 1781 0d66 00BF     		.align	2
 1782              		.global	_Z9adc1_initv
 1783              		.thumb
 1784              		.thumb_func
 1786              	_Z9adc1_initv:
 1787              	.LFB122:
 770:../src/main.cpp **** 
 771:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 772:../src/main.cpp ****  * @Args: Nothing
 773:../src/main.cpp ****  * @Return Val: Nothing
 774:../src/main.cpp ****  */
 775:../src/main.cpp **** 
 776:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 777:../src/main.cpp **** {
 1788              		.loc 1 777 0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 72
 1791              		@ frame_needed = 1, uses_anonymous_args = 0
 1792 0d68 80B5     		push	{r7, lr}
 1793              	.LCFI32:
 1794              		.cfi_def_cfa_offset 8
 1795              		.cfi_offset 7, -8
 1796              		.cfi_offset 14, -4
 1797 0d6a 92B0     		sub	sp, sp, #72
 1798              	.LCFI33:
 1799              		.cfi_def_cfa_offset 80
 1800 0d6c 00AF     		add	r7, sp, #0
 1801              	.LCFI34:
 1802              		.cfi_def_cfa_register 7
 1803              	.LBB12:
 778:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 779:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 780:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 781:../src/main.cpp **** 	/* Configure the ADC clock */
 782:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1804              		.loc 1 782 0
 1805 0d6e 4FF48870 		mov	r0, #272
 1806 0d72 FFF7FEFF 		bl	RCC_ADCCLKConfig
 783:../src/main.cpp **** 
 784:../src/main.cpp **** 	/* Enable ADC1 clock */
 785:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1807              		.loc 1 785 0
 1808 0d76 4FF08050 		mov	r0, #268435456
 1809 0d7a 4FF00101 		mov	r1, #1
 1810 0d7e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 786:../src/main.cpp **** 	/* ADC Channel configuration */
 787:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 788:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1811              		.loc 1 788 0
 1812 0d82 4FF40030 		mov	r0, #131072
 1813 0d86 4FF00101 		mov	r1, #1
 1814 0d8a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 789:../src/main.cpp **** 
 790:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 791:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1815              		.loc 1 791 0
 1816 0d8e 4FF00403 		mov	r3, #4
 1817 0d92 BB62     		str	r3, [r7, #40]
 792:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1818              		.loc 1 792 0
 1819 0d94 4FF00303 		mov	r3, #3
 1820 0d98 87F82C30 		strb	r3, [r7, #44]
 793:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1821              		.loc 1 793 0
 1822 0d9c 4FF00003 		mov	r3, #0
 1823 0da0 87F82F30 		strb	r3, [r7, #47]
 794:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1824              		.loc 1 794 0
 1825 0da4 07F12803 		add	r3, r7, #40
 1826 0da8 4FF09040 		mov	r0, #1207959552
 1827 0dac 1946     		mov	r1, r3
 1828 0dae FFF7FEFF 		bl	GPIO_Init
 795:../src/main.cpp **** 
 796:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1829              		.loc 1 796 0
 1830 0db2 07F10403 		add	r3, r7, #4
 1831 0db6 1846     		mov	r0, r3
 1832 0db8 FFF7FEFF 		bl	ADC_StructInit
 797:../src/main.cpp **** 
 798:../src/main.cpp **** 	/* Calibration procedure */
 799:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1833              		.loc 1 799 0
 1834 0dbc 4FF0A040 		mov	r0, #1342177280
 1835 0dc0 4FF00101 		mov	r1, #1
 1836 0dc4 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 800:../src/main.cpp **** 
 801:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 802:../src/main.cpp **** 	int foo;
 803:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1837              		.loc 1 803 0
 1838 0dc8 4FF00003 		mov	r3, #0
 1839 0dcc 7B64     		str	r3, [r7, #68]
 1840 0dce 07E0     		b	.L36
 1841              	.L37:
 804:../src/main.cpp **** 	{
 805:../src/main.cpp **** 	  ++foo;
 1842              		.loc 1 805 0 discriminator 2
 1843 0dd0 7B6C     		ldr	r3, [r7, #68]
 1844 0dd2 03F10103 		add	r3, r3, #1
 1845 0dd6 7B64     		str	r3, [r7, #68]
 803:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1846              		.loc 1 803 0 discriminator 2
 1847 0dd8 7B6C     		ldr	r3, [r7, #68]
 1848 0dda 03F10103 		add	r3, r3, #1
 1849 0dde 7B64     		str	r3, [r7, #68]
 1850              	.L36:
 803:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1851              		.loc 1 803 0 is_stmt 0 discriminator 1
 1852 0de0 7A6C     		ldr	r2, [r7, #68]
 1853 0de2 47F6FF43 		movw	r3, #31999
 1854 0de6 9A42     		cmp	r2, r3
 1855 0de8 CCBF     		ite	gt
 1856 0dea 0023     		movgt	r3, #0
 1857 0dec 0123     		movle	r3, #1
 1858 0dee DBB2     		uxtb	r3, r3
 1859 0df0 002B     		cmp	r3, #0
 1860 0df2 EDD1     		bne	.L37
 806:../src/main.cpp **** 	}
 807:../src/main.cpp **** 
 808:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1861              		.loc 1 808 0 is_stmt 1
 1862 0df4 4FF0A040 		mov	r0, #1342177280
 1863 0df8 4FF00001 		mov	r1, #0
 1864 0dfc FFF7FEFF 		bl	ADC_SelectCalibrationMode
 809:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1865              		.loc 1 809 0
 1866 0e00 4FF0A040 		mov	r0, #1342177280
 1867 0e04 FFF7FEFF 		bl	ADC_StartCalibration
 810:../src/main.cpp **** 
 811:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1868              		.loc 1 811 0
 1869 0e08 00BF     		nop
 1870              	.L38:
 1871              		.loc 1 811 0 is_stmt 0 discriminator 1
 1872 0e0a 4FF0A040 		mov	r0, #1342177280
 1873 0e0e FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1874 0e12 0346     		mov	r3, r0
 1875 0e14 002B     		cmp	r3, #0
 1876 0e16 0CBF     		ite	eq
 1877 0e18 0023     		moveq	r3, #0
 1878 0e1a 0123     		movne	r3, #1
 1879 0e1c DBB2     		uxtb	r3, r3
 1880 0e1e 002B     		cmp	r3, #0
 1881 0e20 F3D1     		bne	.L38
 812:../src/main.cpp **** 
 813:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1882              		.loc 1 813 0 is_stmt 1
 1883 0e22 4FF00003 		mov	r3, #0
 1884 0e26 3B63     		str	r3, [r7, #48]
 814:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1885              		.loc 1 814 0
 1886 0e28 4FF00003 		mov	r3, #0
 1887 0e2c 7B63     		str	r3, [r7, #52]
 815:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 1888              		.loc 1 815 0
 1889 0e2e 4FF00003 		mov	r3, #0
 1890 0e32 BB63     		str	r3, [r7, #56]
 816:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 1891              		.loc 1 816 0
 1892 0e34 4FF00003 		mov	r3, #0
 1893 0e38 FB63     		str	r3, [r7, #60]
 817:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 1894              		.loc 1 817 0
 1895 0e3a 4FF00003 		mov	r3, #0
 1896 0e3e 87F84030 		strb	r3, [r7, #64]
 818:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1897              		.loc 1 818 0
 1898 0e42 07F13003 		add	r3, r7, #48
 1899 0e46 4FF0A040 		mov	r0, #1342177280
 1900 0e4a 1946     		mov	r1, r3
 1901 0e4c FFF7FEFF 		bl	ADC_CommonInit
 819:../src/main.cpp **** 
 820:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1902              		.loc 1 820 0
 1903 0e50 4FF40053 		mov	r3, #8192
 1904 0e54 7B60     		str	r3, [r7, #4]
 821:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1905              		.loc 1 821 0
 1906 0e56 4FF00003 		mov	r3, #0
 1907 0e5a BB60     		str	r3, [r7, #8]
 822:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1908              		.loc 1 822 0
 1909 0e5c 4FF00003 		mov	r3, #0
 1910 0e60 FB60     		str	r3, [r7, #12]
 823:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1911              		.loc 1 823 0
 1912 0e62 4FF00003 		mov	r3, #0
 1913 0e66 3B61     		str	r3, [r7, #16]
 824:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1914              		.loc 1 824 0
 1915 0e68 4FF00003 		mov	r3, #0
 1916 0e6c 7B61     		str	r3, [r7, #20]
 825:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1917              		.loc 1 825 0
 1918 0e6e 4FF00003 		mov	r3, #0
 1919 0e72 BB61     		str	r3, [r7, #24]
 826:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1920              		.loc 1 826 0
 1921 0e74 4FF00003 		mov	r3, #0
 1922 0e78 FB61     		str	r3, [r7, #28]
 827:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 1923              		.loc 1 827 0
 1924 0e7a 4FF00103 		mov	r3, #1
 1925 0e7e 87F82030 		strb	r3, [r7, #32]
 828:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1926              		.loc 1 828 0
 1927 0e82 07F10403 		add	r3, r7, #4
 1928 0e86 4FF0A040 		mov	r0, #1342177280
 1929 0e8a 1946     		mov	r1, r3
 1930 0e8c FFF7FEFF 		bl	ADC_Init
 829:../src/main.cpp **** 
 830:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 831:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1931              		.loc 1 831 0
 1932 0e90 4FF0A040 		mov	r0, #1342177280
 1933 0e94 4FF00301 		mov	r1, #3
 1934 0e98 4FF00102 		mov	r2, #1
 1935 0e9c 4FF00703 		mov	r3, #7
 1936 0ea0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 832:../src/main.cpp **** 
 833:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 834:../src/main.cpp **** 
 835:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 836:../src/main.cpp **** 
 837:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 1937              		.loc 1 837 0
 1938 0ea4 4FF01203 		mov	r3, #18
 1939 0ea8 87F82430 		strb	r3, [r7, #36]
 838:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1940              		.loc 1 838 0
 1941 0eac 4FF00203 		mov	r3, #2
 1942 0eb0 87F82530 		strb	r3, [r7, #37]
 839:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1943              		.loc 1 839 0
 1944 0eb4 4FF00003 		mov	r3, #0
 1945 0eb8 87F82630 		strb	r3, [r7, #38]
 840:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1946              		.loc 1 840 0
 1947 0ebc 4FF00103 		mov	r3, #1
 1948 0ec0 87F82730 		strb	r3, [r7, #39]
 841:../src/main.cpp **** 
 842:../src/main.cpp **** 	NVIC_Init(&nv);
 1949              		.loc 1 842 0
 1950 0ec4 07F12403 		add	r3, r7, #36
 1951 0ec8 1846     		mov	r0, r3
 1952 0eca FFF7FEFF 		bl	NVIC_Init
 843:../src/main.cpp **** 
 844:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 845:../src/main.cpp **** 
 846:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 1953              		.loc 1 846 0
 1954 0ece 4FF0A040 		mov	r0, #1342177280
 1955 0ed2 4FF00401 		mov	r1, #4
 1956 0ed6 4FF00102 		mov	r2, #1
 1957 0eda FFF7FEFF 		bl	ADC_ITConfig
 847:../src/main.cpp **** 
 848:../src/main.cpp **** 	/* Enable ADC1 */
 849:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1958              		.loc 1 849 0
 1959 0ede 4FF0A040 		mov	r0, #1342177280
 1960 0ee2 4FF00101 		mov	r1, #1
 1961 0ee6 FFF7FEFF 		bl	ADC_Cmd
 850:../src/main.cpp **** 
 851:../src/main.cpp **** 	/* wait for ADRDY */
 852:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1962              		.loc 1 852 0
 1963 0eea 00BF     		nop
 1964              	.L39:
 1965              		.loc 1 852 0 is_stmt 0 discriminator 1
 1966 0eec 4FF0A040 		mov	r0, #1342177280
 1967 0ef0 4FF00101 		mov	r1, #1
 1968 0ef4 FFF7FEFF 		bl	ADC_GetFlagStatus
 1969 0ef8 0346     		mov	r3, r0
 1970 0efa 002B     		cmp	r3, #0
 1971 0efc 14BF     		ite	ne
 1972 0efe 0023     		movne	r3, #0
 1973 0f00 0123     		moveq	r3, #1
 1974 0f02 DBB2     		uxtb	r3, r3
 1975 0f04 002B     		cmp	r3, #0
 1976 0f06 F1D1     		bne	.L39
 853:../src/main.cpp **** 
 854:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 855:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1977              		.loc 1 855 0 is_stmt 1
 1978 0f08 4FF0A040 		mov	r0, #1342177280
 1979 0f0c FFF7FEFF 		bl	ADC_StartConversion
 1980              	.LBE12:
 856:../src/main.cpp **** }
 1981              		.loc 1 856 0
 1982 0f10 07F14807 		add	r7, r7, #72
 1983 0f14 BD46     		mov	sp, r7
 1984 0f16 80BD     		pop	{r7, pc}
 1985              		.cfi_endproc
 1986              	.LFE122:
 1988              	.Letext0:
 1989              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 1990              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 1991              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 1992              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 1993              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 1994              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 1995              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 1996              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 1997              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 1998              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 1999              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/cc7z6VwN.s:25     .bss:00000000 led_iter
     /tmp/cc7z6VwN.s:22     .bss:00000000 $d
     /tmp/cc7z6VwN.s:32     .data:00000000 led_matrix
     /tmp/cc7z6VwN.s:29     .data:00000000 $d
     /tmp/cc7z6VwN.s:46     .bss:00000004 left_enc
     /tmp/cc7z6VwN.s:52     .bss:0000002c right_enc
     /tmp/cc7z6VwN.s:58     .bss:00000054 gyro_angle_x
     /tmp/cc7z6VwN.s:64     .bss:00000058 gyro_bias_x
     /tmp/cc7z6VwN.s:70     .bss:0000005c adcval
     /tmp/cc7z6VwN.s:76     .bss:00000060 adcData
     /tmp/cc7z6VwN.s:82     .bss:00000068 new_data
     /tmp/cc7z6VwN.s:88     .bss:0000006c adc2_data
     /tmp/cc7z6VwN.s:93     .bss:0000007c adc2_new_data
     /tmp/cc7z6VwN.s:98     .bss:0000007d adc3_awd1
     /tmp/cc7z6VwN.s:103    .bss:0000007e adc3_awd2
     /tmp/cc7z6VwN.s:109    .bss:00000080 count
     /tmp/cc7z6VwN.s:115    .bss:00000084 stage
     /tmp/cc7z6VwN.s:119    .rodata:00000000 $d
     /tmp/cc7z6VwN.s:120    .rodata:00000000 .LC0
     /tmp/cc7z6VwN.s:123    .text:00000000 $t
     /tmp/cc7z6VwN.s:128    .text:00000000 main
     /tmp/cc7z6VwN.s:475    .text:00000290 _Z15brake_pins_initv
     /tmp/cc7z6VwN.s:892    .text:00000550 _Z13adc1_init_DMAv
     /tmp/cc7z6VwN.s:1176   .text:000007c4 _Z13adc2_init_DMAv
     /tmp/cc7z6VwN.s:547    .text:00000308 _Z13ping_pin_initv
     /tmp/cc7z6VwN.s:632    .text:00000398 _Z20timer2_timebase_initv
     /tmp/cc7z6VwN.s:318    .text:00000194 _Z19imu_update_ISR_initv
     /tmp/cc7z6VwN.s:691    .text:000003ec _Z9comp_initv
     /tmp/cc7z6VwN.s:308    .text:00000190 $d
     /tmp/cc7z6VwN.s:313    .text:00000194 $t
     /tmp/cc7z6VwN.s:801    .text:000004c8 _Z14calc_gyro_biasv
     /tmp/cc7z6VwN.s:435    .rodata:00000014 .LC1
     /tmp/cc7z6VwN.s:444    .text:00000278 L3GD20_TIMEOUT_UserCallback
     /tmp/cc7z6VwN.s:883    .text:0000054c $d
     /tmp/cc7z6VwN.s:887    .text:00000550 $t
     /tmp/cc7z6VwN.s:1528   .text:00000b08 _Z21battery_watchdog_initv
     /tmp/cc7z6VwN.s:1786   .text:00000d68 _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.50a79f075d1434c9a8bd8ee500f78677
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.669975762de5793e6d2436455cef4d0e
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
__aeabi_f2d
SystemInit
_Z10UART1_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
_Z19LED_MATRIX_ISR_initv
_Z11pwm1_outputf
_Z11pwm2_outputf
TIM_GetCounter
printf
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
RCC_AHBPeriphClockCmd
GPIO_StructInit
GPIO_Init
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
