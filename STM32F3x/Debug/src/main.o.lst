   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	led_iter
  20              		.bss
  21              		.align	2
  24              	led_iter:
  25 0000 00000000 		.space	4
  26              		.global	led_matrix
  27              		.data
  28              		.align	2
  31              	led_matrix:
  32 0000 00020000 		.word	512
  33 0004 00010000 		.word	256
  34 0008 00800000 		.word	32768
  35 000c 00400000 		.word	16384
  36 0010 00200000 		.word	8192
  37 0014 00100000 		.word	4096
  38 0018 00080000 		.word	2048
  39 001c 00040000 		.word	1024
  40              		.global	left_enc
  41              		.bss
  42              		.align	2
  45              	left_enc:
  46 0004 00000000 		.space	40
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	right_enc
  48              		.align	2
  51              	right_enc:
  52 002c 00000000 		.space	40
  52      00000000 
  52      00000000 
  52      00000000 
  52      00000000 
  53              		.global	gyro_angle_x
  54              		.align	2
  57              	gyro_angle_x:
  58 0054 00000000 		.space	4
  59              		.global	gyro_bias_x
  60              		.align	2
  63              	gyro_bias_x:
  64 0058 00000000 		.space	4
  65              		.global	adcval
  66              		.align	2
  69              	adcval:
  70 005c 00000000 		.space	4
  71              		.global	adcData
  72              		.align	2
  75              	adcData:
  76 0060 00000000 		.space	8
  76      00000000 
  77              		.global	new_data
  78              		.align	2
  81              	new_data:
  82 0068 00000000 		.space	4
  83              		.global	adc2_data
  84              		.align	2
  87              	adc2_data:
  88 006c 00000000 		.space	16
  88      00000000 
  88      00000000 
  88      00000000 
  89              		.global	adc2_new_data
  92              	adc2_new_data:
  93 007c 00       		.space	1
  94              		.global	adc3_awd1
  97              	adc3_awd1:
  98 007d 00       		.space	1
  99              		.global	adc3_awd2
 102              	adc3_awd2:
 103 007e 00       		.space	1
 104              		.global	count
 105 007f 00       		.align	2
 108              	count:
 109 0080 00000000 		.space	4
 110              		.global	stage
 111              		.align	2
 114              	stage:
 115 0084 00000000 		.space	4
 116              		.global	drive_cmd
 117              		.align	2
 120              	drive_cmd:
 121 0088 00000000 		.space	4
 122              		.global	err
 123              		.align	2
 126              	err:
 127 008c 00000000 		.space	4
 128              		.global	last_err
 129              		.align	2
 132              	last_err:
 133 0090 00000000 		.space	4
 134              		.global	diff_err
 135              		.align	2
 138              	diff_err:
 139 0094 00000000 		.space	4
 140              		.global	rt
 141              		.align	2
 144              	rt:
 145 0098 00000000 		.space	4
 146              		.global	d_front
 147              		.align	2
 150              	d_front:
 151 009c 00000000 		.space	4
 152              		.global	left
 153              		.align	2
 156              	left:
 157 00a0 00000000 		.space	4
 158              		.global	right
 159              		.align	2
 162              	right:
 163 00a4 00000000 		.space	4
 164              		.global	__aeabi_f2d
 165              		.section	.rodata
 166              		.align	2
 167              	.LC0:
 168 0000 46726F6E 		.ascii	"Front: %1.3f, Front left:%1.4f, Front back:%1.4f\012"
 168      743A2025 
 168      312E3366 
 168      2C204672 
 168      6F6E7420 
 169 0031 0D00     		.ascii	"\015\000"
 170              		.text
 171              		.align	2
 172              		.global	main
 173              		.thumb
 174              		.thumb_func
 176              	main:
 177              	.LFB111:
 178              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  18:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  19:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  20:../src/main.cpp ****  *
  21:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  22:../src/main.cpp ****  *
  23:../src/main.cpp ****  * TIM6: LED matrix ISR
  24:../src/main.cpp ****  * TIM7: Encoder update ISR
  25:../src/main.cpp ****  * TIM17: IMU update ISR
  26:../src/main.cpp ****  *
  27:../src/main.cpp ****  * Other pins/resources used:
  28:../src/main.cpp ****  *
  29:../src/main.cpp ****  * Analog: 	Channel 3 (PA2)
  30:../src/main.cpp ****  * 			Channel 4 (PA3)
  31:../src/main.cpp ****  * 			Channel 5 (PF4)
  32:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  33:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  34:../src/main.cpp ****  *
  35:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  36:../src/main.cpp ****  *
  37:../src/main.cpp ****  */
  38:../src/main.cpp **** 
  39:../src/main.cpp **** /*
  40:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  41:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  42:../src/main.cpp ****  */
  43:../src/main.cpp **** 
  44:../src/main.cpp **** volatile int led_iter;
  45:../src/main.cpp **** volatile int led_matrix[8] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_14, GPIO_Pin_13,
  46:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  47:../src/main.cpp **** 
  48:../src/main.cpp **** void imu_update_ISR_init(void);
  49:../src/main.cpp **** int16_t calc_gyro_bias(void);
  50:../src/main.cpp **** 
  51:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  52:../src/main.cpp **** 
  53:../src/main.cpp **** void adc1_init_DMA(void);
  54:../src/main.cpp **** void adc2_init_DMA(void);
  55:../src/main.cpp **** void battery_watchdog_init(void);
  56:../src/main.cpp **** void adc1_init(void);
  57:../src/main.cpp **** 
  58:../src/main.cpp **** void brake_pins_init(void);
  59:../src/main.cpp **** 
  60:../src/main.cpp **** void ping_pin_init(void);
  61:../src/main.cpp **** void timer2_timebase_init(void);
  62:../src/main.cpp **** 
  63:../src/main.cpp **** void comp_init(void);
  64:../src/main.cpp **** 
  65:../src/main.cpp **** float IR_distance(int IR_ADC_VAL);
  66:../src/main.cpp **** 
  67:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  68:../src/main.cpp **** 
  69:../src/main.cpp **** encoderState left_enc, right_enc;
  70:../src/main.cpp **** 
  71:../src/main.cpp **** volatile float gyro_angle_x;
  72:../src/main.cpp **** int gyro_bias_x, adcval;
  73:../src/main.cpp **** 
  74:../src/main.cpp **** __IO uint32_t adcData[2];
  75:../src/main.cpp **** int new_data;
  76:../src/main.cpp **** 
  77:../src/main.cpp **** __IO uint32_t adc2_data[4];
  78:../src/main.cpp **** uint8_t adc2_new_data;
  79:../src/main.cpp **** 
  80:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
  81:../src/main.cpp **** 
  82:../src/main.cpp **** int count, stage;
  83:../src/main.cpp **** 
  84:../src/main.cpp **** float drive_cmd;// = 0.0f;
  85:../src/main.cpp **** float err;// = 0.0f;
  86:../src/main.cpp **** float last_err;// = 0.0f;
  87:../src/main.cpp **** float diff_err;
  88:../src/main.cpp **** float rt;// = 0.0f;
  89:../src/main.cpp **** float d_front;// = 1.0f;
  90:../src/main.cpp **** 
  91:../src/main.cpp **** float left, right;
  92:../src/main.cpp **** 
  93:../src/main.cpp **** // Initialize all encoder data structures to zero:
  94:../src/main.cpp **** 
  95:../src/main.cpp **** int main(void)
  96:../src/main.cpp **** {
 179              		.loc 1 96 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 8
 182              		@ frame_needed = 1, uses_anonymous_args = 0
 183 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 184              	.LCFI0:
 185              		.cfi_def_cfa_offset 24
 186              		.cfi_offset 4, -24
 187              		.cfi_offset 5, -20
 188              		.cfi_offset 7, -16
 189              		.cfi_offset 8, -12
 190              		.cfi_offset 9, -8
 191              		.cfi_offset 14, -4
 192 0004 86B0     		sub	sp, sp, #24
 193              	.LCFI1:
 194              		.cfi_def_cfa_offset 48
 195 0006 04AF     		add	r7, sp, #16
 196              	.LCFI2:
 197              		.cfi_def_cfa 7, 32
 198              	.LBB2:
  97:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 199              		.loc 1 97 0
 200 0008 FFF7FEFF 		bl	SystemInit
  98:../src/main.cpp **** 
  99:../src/main.cpp **** 	UART1_init(); // Debug bridge
 201              		.loc 1 99 0
 202 000c FFF7FEFF 		bl	_Z10UART1_initv
 100:../src/main.cpp **** 
 101:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
 102:../src/main.cpp **** 
 103:../src/main.cpp **** 	adcData[0] = 0;
 203              		.loc 1 103 0
 204 0010 40F20003 		movw	r3, #:lower16:adcData
 205 0014 C0F20003 		movt	r3, #:upper16:adcData
 206 0018 4FF00002 		mov	r2, #0
 207 001c 1A60     		str	r2, [r3, #0]
 104:../src/main.cpp **** 	adcData[1] = 0;
 208              		.loc 1 104 0
 209 001e 40F20003 		movw	r3, #:lower16:adcData
 210 0022 C0F20003 		movt	r3, #:upper16:adcData
 211 0026 4FF00002 		mov	r2, #0
 212 002a 5A60     		str	r2, [r3, #4]
 105:../src/main.cpp **** 
 106:../src/main.cpp **** 	uint8_t iter = 0;
 213              		.loc 1 106 0
 214 002c 4FF00003 		mov	r3, #0
 215 0030 FB71     		strb	r3, [r7, #7]
 107:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 216              		.loc 1 107 0
 217 0032 4FF00003 		mov	r3, #0
 218 0036 FB71     		strb	r3, [r7, #7]
 219 0038 0CE0     		b	.L2
 220              	.L3:
 108:../src/main.cpp **** 	{
 109:../src/main.cpp **** 		adc2_data[iter] = 0;
 221              		.loc 1 109 0 discriminator 2
 222 003a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 223 003c 40F20003 		movw	r3, #:lower16:adc2_data
 224 0040 C0F20003 		movt	r3, #:upper16:adc2_data
 225 0044 4FF00001 		mov	r1, #0
 226 0048 43F82210 		str	r1, [r3, r2, lsl #2]
 107:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 227              		.loc 1 107 0 discriminator 2
 228 004c FB79     		ldrb	r3, [r7, #7]
 229 004e 03F10103 		add	r3, r3, #1
 230 0052 FB71     		strb	r3, [r7, #7]
 231              	.L2:
 107:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 232              		.loc 1 107 0 is_stmt 0 discriminator 1
 233 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 234 0056 062B     		cmp	r3, #6
 235 0058 8CBF     		ite	hi
 236 005a 0023     		movhi	r3, #0
 237 005c 0123     		movls	r3, #1
 238 005e DBB2     		uxtb	r3, r3
 239 0060 002B     		cmp	r3, #0
 240 0062 EAD1     		bne	.L3
 110:../src/main.cpp **** 	}
 111:../src/main.cpp **** 
 112:../src/main.cpp **** 	adc3_awd1 = 0;
 241              		.loc 1 112 0 is_stmt 1
 242 0064 40F20003 		movw	r3, #:lower16:adc3_awd1
 243 0068 C0F20003 		movt	r3, #:upper16:adc3_awd1
 244 006c 4FF00002 		mov	r2, #0
 245 0070 1A70     		strb	r2, [r3, #0]
 113:../src/main.cpp **** 	adc3_awd2 = 0;
 246              		.loc 1 113 0
 247 0072 40F20003 		movw	r3, #:lower16:adc3_awd2
 248 0076 C0F20003 		movt	r3, #:upper16:adc3_awd2
 249 007a 4FF00002 		mov	r2, #0
 250 007e 1A70     		strb	r2, [r3, #0]
 114:../src/main.cpp **** 
 115:../src/main.cpp **** 	count = 0;
 251              		.loc 1 115 0
 252 0080 40F20003 		movw	r3, #:lower16:count
 253 0084 C0F20003 		movt	r3, #:upper16:count
 254 0088 4FF00002 		mov	r2, #0
 255 008c 1A60     		str	r2, [r3, #0]
 116:../src/main.cpp **** 	stage = 0;
 256              		.loc 1 116 0
 257 008e 40F20003 		movw	r3, #:lower16:stage
 258 0092 C0F20003 		movt	r3, #:upper16:stage
 259 0096 4FF00002 		mov	r2, #0
 260 009a 1A60     		str	r2, [r3, #0]
 117:../src/main.cpp **** 
 118:../src/main.cpp **** 	/*
 119:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 120:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 121:../src/main.cpp **** 	 */
 122:../src/main.cpp **** 
 123:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 261              		.loc 1 123 0
 262 009c 40F20000 		movw	r0, #:lower16:left_enc
 263 00a0 C0F20000 		movt	r0, #:upper16:left_enc
 264 00a4 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 124:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 265              		.loc 1 124 0
 266 00a8 40F20000 		movw	r0, #:lower16:right_enc
 267 00ac C0F20000 		movt	r0, #:upper16:right_enc
 268 00b0 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 125:../src/main.cpp **** 
 126:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 127:../src/main.cpp **** 
 128:../src/main.cpp **** 	brake_pins_init();
 269              		.loc 1 128 0
 270 00b4 FFF7FEFF 		bl	_Z15brake_pins_initv
 129:../src/main.cpp **** 	pwm_out1_init(2000);
 271              		.loc 1 129 0
 272 00b8 4FF4FA60 		mov	r0, #2000
 273 00bc FFF7FEFF 		bl	_Z13pwm_out1_initt
 130:../src/main.cpp **** 	pwm_out2_init(2000);
 274              		.loc 1 130 0
 275 00c0 4FF4FA60 		mov	r0, #2000
 276 00c4 FFF7FEFF 		bl	_Z13pwm_out2_initt
 131:../src/main.cpp **** 
 132:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 133:../src/main.cpp **** 
 134:../src/main.cpp **** 	TIM8_init_encoder();
 277              		.loc 1 134 0
 278 00c8 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 135:../src/main.cpp **** 	TIM4_init_encoder();
 279              		.loc 1 135 0
 280 00cc FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 136:../src/main.cpp **** 
 137:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 138:../src/main.cpp **** 
 139:../src/main.cpp **** 	new_data = 0;
 281              		.loc 1 139 0
 282 00d0 40F20003 		movw	r3, #:lower16:new_data
 283 00d4 C0F20003 		movt	r3, #:upper16:new_data
 284 00d8 4FF00002 		mov	r2, #0
 285 00dc 1A60     		str	r2, [r3, #0]
 140:../src/main.cpp **** 	adc2_new_data = 0;
 286              		.loc 1 140 0
 287 00de 40F20003 		movw	r3, #:lower16:adc2_new_data
 288 00e2 C0F20003 		movt	r3, #:upper16:adc2_new_data
 289 00e6 4FF00002 		mov	r2, #0
 290 00ea 1A70     		strb	r2, [r3, #0]
 141:../src/main.cpp **** 
 142:../src/main.cpp **** 	// Initialize ADC1 DMA:
 143:../src/main.cpp **** 	adc1_init_DMA();
 291              		.loc 1 143 0
 292 00ec FFF7FEFF 		bl	_Z13adc1_init_DMAv
 144:../src/main.cpp **** 
 145:../src/main.cpp **** 	// Initialize ADC2 DMA:
 146:../src/main.cpp **** 	adc2_init_DMA();
 293              		.loc 1 146 0
 294 00f0 FFF7FEFF 		bl	_Z13adc2_init_DMAv
 147:../src/main.cpp **** //	battery_watchdog_init();
 148:../src/main.cpp **** 
 149:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 295              		.loc 1 149 0
 296 00f4 FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 150:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 297              		.loc 1 150 0
 298 00f8 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 151:../src/main.cpp **** 
 152:../src/main.cpp **** 	// Ping Sensor Init:
 153:../src/main.cpp **** 
 154:../src/main.cpp **** 	ping_pin_init();
 299              		.loc 1 154 0
 300 00fc FFF7FEFF 		bl	_Z13ping_pin_initv
 155:../src/main.cpp **** 	timer2_timebase_init();
 301              		.loc 1 155 0
 302 0100 FFF7FEFF 		bl	_Z20timer2_timebase_initv
 156:../src/main.cpp **** 	imu_update_ISR_init();
 303              		.loc 1 156 0
 304 0104 FFF7FEFF 		bl	_Z19imu_update_ISR_initv
 157:../src/main.cpp **** 
 158:../src/main.cpp **** 	// Encoder comparator init for noise debounce:
 159:../src/main.cpp **** 	comp_init();
 305              		.loc 1 159 0
 306 0108 FFF7FEFF 		bl	_Z9comp_initv
 160:../src/main.cpp **** 
 161:../src/main.cpp **** 	adcval = 0;
 307              		.loc 1 161 0
 308 010c 40F20003 		movw	r3, #:lower16:adcval
 309 0110 C0F20003 		movt	r3, #:upper16:adcval
 310 0114 4FF00002 		mov	r2, #0
 311 0118 1A60     		str	r2, [r3, #0]
 162:../src/main.cpp **** //	mtr_out = 0;
 163:../src/main.cpp **** 
 164:../src/main.cpp **** 	drive_cmd = 0.0f;
 312              		.loc 1 164 0
 313 011a 40F20003 		movw	r3, #:lower16:drive_cmd
 314 011e C0F20003 		movt	r3, #:upper16:drive_cmd
 315 0122 4FF00002 		mov	r2, #0
 316 0126 1A60     		str	r2, [r3, #0]	@ float
 165:../src/main.cpp **** 	err = 0.0f;
 317              		.loc 1 165 0
 318 0128 40F20003 		movw	r3, #:lower16:err
 319 012c C0F20003 		movt	r3, #:upper16:err
 320 0130 4FF00002 		mov	r2, #0
 321 0134 1A60     		str	r2, [r3, #0]	@ float
 166:../src/main.cpp **** 	last_err = 0.0f;
 322              		.loc 1 166 0
 323 0136 40F20003 		movw	r3, #:lower16:last_err
 324 013a C0F20003 		movt	r3, #:upper16:last_err
 325 013e 4FF00002 		mov	r2, #0
 326 0142 1A60     		str	r2, [r3, #0]	@ float
 167:../src/main.cpp **** 	diff_err = 0.0f;
 327              		.loc 1 167 0
 328 0144 40F20003 		movw	r3, #:lower16:diff_err
 329 0148 C0F20003 		movt	r3, #:upper16:diff_err
 330 014c 4FF00002 		mov	r2, #0
 331 0150 1A60     		str	r2, [r3, #0]	@ float
 168:../src/main.cpp **** 	rt = 0.0f;
 332              		.loc 1 168 0
 333 0152 40F20003 		movw	r3, #:lower16:rt
 334 0156 C0F20003 		movt	r3, #:upper16:rt
 335 015a 4FF00002 		mov	r2, #0
 336 015e 1A60     		str	r2, [r3, #0]	@ float
 169:../src/main.cpp **** 	d_front = 1.0f;
 337              		.loc 1 169 0
 338 0160 40F20003 		movw	r3, #:lower16:d_front
 339 0164 C0F20003 		movt	r3, #:upper16:d_front
 340 0168 4FF07E52 		mov	r2, #1065353216
 341 016c 1A60     		str	r2, [r3, #0]	@ float
 342              	.L4:
 170:../src/main.cpp **** 
 171:../src/main.cpp **** //	float left, right;
 172:../src/main.cpp **** 
 173:../src/main.cpp **** 	while(true)
 174:../src/main.cpp **** 	{
 175:../src/main.cpp **** 		printf("Front: %1.3f, Front left:%1.4f, Front back:%1.4f\n\r", d_front, IR_distance(adc2_data[0])
 343              		.loc 1 175 0 discriminator 1
 344 016e 40F20003 		movw	r3, #:lower16:d_front
 345 0172 C0F20003 		movt	r3, #:upper16:d_front
 346 0176 1B68     		ldr	r3, [r3, #0]	@ float
 347 0178 1846     		mov	r0, r3	@ float
 348 017a FFF7FEFF 		bl	__aeabi_f2d
 349 017e 0446     		mov	r4, r0
 350 0180 0D46     		mov	r5, r1
 351 0182 40F20003 		movw	r3, #:lower16:adc2_data
 352 0186 C0F20003 		movt	r3, #:upper16:adc2_data
 353 018a 1B68     		ldr	r3, [r3, #0]
 354 018c 1846     		mov	r0, r3
 355 018e FFF7FEFF 		bl	_Z11IR_distancei
 356 0192 0346     		mov	r3, r0	@ float
 357 0194 1846     		mov	r0, r3	@ float
 358 0196 FFF7FEFF 		bl	__aeabi_f2d
 359 019a 8046     		mov	r8, r0
 360 019c 8946     		mov	r9, r1
 361 019e 40F20003 		movw	r3, #:lower16:adcData
 362 01a2 C0F20003 		movt	r3, #:upper16:adcData
 363 01a6 5B68     		ldr	r3, [r3, #4]
 364 01a8 1846     		mov	r0, r3
 365 01aa FFF7FEFF 		bl	_Z11IR_distancei
 366 01ae 0346     		mov	r3, r0	@ float
 367 01b0 1846     		mov	r0, r3	@ float
 368 01b2 FFF7FEFF 		bl	__aeabi_f2d
 369 01b6 0246     		mov	r2, r0
 370 01b8 0B46     		mov	r3, r1
 371 01ba CDE90089 		strd	r8, [sp]
 372 01be CDE90223 		strd	r2, [sp, #8]
 373 01c2 40F20000 		movw	r0, #:lower16:.LC0
 374 01c6 C0F20000 		movt	r0, #:upper16:.LC0
 375 01ca 2246     		mov	r2, r4
 376 01cc 2B46     		mov	r3, r5
 377 01ce FFF7FEFF 		bl	printf
 173:../src/main.cpp **** 	while(true)
 378              		.loc 1 173 0 discriminator 1
 379 01d2 CCE7     		b	.L4
 380              	.LBE2:
 381              		.cfi_endproc
 382              	.LFE111:
 384              		.global	__aeabi_d2f
 385              		.align	2
 386              		.global	_Z11IR_distancei
 387              		.thumb
 388              		.thumb_func
 390              	_Z11IR_distancei:
 391              	.LFB112:
 176:../src/main.cpp **** 
 177:../src/main.cpp **** 	}
 178:../src/main.cpp **** 	return 0; // We should never manage to get here...
 179:../src/main.cpp **** }
 180:../src/main.cpp **** 
 181:../src/main.cpp **** float IR_distance(int IR_ADC_VAL)
 182:../src/main.cpp **** {
 392              		.loc 1 182 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 16
 395              		@ frame_needed = 1, uses_anonymous_args = 0
 396 01d4 80B5     		push	{r7, lr}
 397              	.LCFI3:
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 7, -8
 400              		.cfi_offset 14, -4
 401 01d6 2DED028B 		fstmfdd	sp!, {d8}
 402              	.LCFI4:
 403              		.cfi_def_cfa_offset 16
 404              		.cfi_offset 80, -16
 405 01da 84B0     		sub	sp, sp, #16
 406              	.LCFI5:
 407              		.cfi_def_cfa_offset 32
 408 01dc 00AF     		add	r7, sp, #0
 409              	.LCFI6:
 410              		.cfi_def_cfa_register 7
 411 01de 7860     		str	r0, [r7, #4]
 412              	.LBB3:
 183:../src/main.cpp **** 	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 413              		.loc 1 183 0
 414 01e0 D7ED017A 		flds	s15, [r7, #4]	@ int
 415 01e4 B8EEE77A 		fsitos	s14, s15
 416 01e8 DFED537A 		flds	s15, .L7
 417 01ec 67EE277A 		fmuls	s15, s14, s15
 418 01f0 C7ED037A 		fsts	s15, [r7, #12]
 184:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 419              		.loc 1 184 0
 420 01f4 F868     		ldr	r0, [r7, #12]	@ float
 421 01f6 FFF7FEFF 		bl	__aeabi_f2d
 422 01fa 0246     		mov	r2, r0
 423 01fc 0B46     		mov	r3, r1
 424 01fe 1046     		mov	r0, r2
 425 0200 1946     		mov	r1, r3
 426 0202 4FF00002 		mov	r2, #0
 427 0206 4FF00003 		mov	r3, #0
 428 020a C4F21803 		movt	r3, 16408
 429 020e FFF7FEFF 		bl	pow
 430 0212 0246     		mov	r2, r0
 431 0214 0B46     		mov	r3, r1
 185:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 186:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 187:../src/main.cpp **** 			+ (float)60.24);
 432              		.loc 1 187 0
 433 0216 1046     		mov	r0, r2
 434 0218 1946     		mov	r1, r3
 435 021a FFF7FEFF 		bl	__aeabi_d2f
 436 021e 07EE100A 		fmsr	s14, r0
 437 0222 DFED467A 		flds	s15, .L7+4
 438 0226 27EE278A 		fmuls	s16, s14, s15
 184:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 439              		.loc 1 184 0
 440 022a F868     		ldr	r0, [r7, #12]	@ float
 441 022c FFF7FEFF 		bl	__aeabi_f2d
 442 0230 0246     		mov	r2, r0
 443 0232 0B46     		mov	r3, r1
 444 0234 1046     		mov	r0, r2
 445 0236 1946     		mov	r1, r3
 446 0238 4FF00002 		mov	r2, #0
 447 023c 4FF00003 		mov	r3, #0
 448 0240 C4F21403 		movt	r3, 16404
 449 0244 FFF7FEFF 		bl	pow
 450 0248 0246     		mov	r2, r0
 451 024a 0B46     		mov	r3, r1
 452              		.loc 1 187 0
 453 024c 1046     		mov	r0, r2
 454 024e 1946     		mov	r1, r3
 455 0250 FFF7FEFF 		bl	__aeabi_d2f
 456 0254 07EE100A 		fmsr	s14, r0
 457 0258 DFED397A 		flds	s15, .L7+8
 458 025c 67EE277A 		fmuls	s15, s14, s15
 459 0260 38EE678A 		fsubs	s16, s16, s15
 185:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 460              		.loc 1 185 0
 461 0264 F868     		ldr	r0, [r7, #12]	@ float
 462 0266 FFF7FEFF 		bl	__aeabi_f2d
 463 026a 0246     		mov	r2, r0
 464 026c 0B46     		mov	r3, r1
 465 026e 1046     		mov	r0, r2
 466 0270 1946     		mov	r1, r3
 467 0272 4FF00002 		mov	r2, #0
 468 0276 4FF00003 		mov	r3, #0
 469 027a C4F21003 		movt	r3, 16400
 470 027e FFF7FEFF 		bl	pow
 471 0282 0246     		mov	r2, r0
 472 0284 0B46     		mov	r3, r1
 473              		.loc 1 187 0
 474 0286 1046     		mov	r0, r2
 475 0288 1946     		mov	r1, r3
 476 028a FFF7FEFF 		bl	__aeabi_d2f
 477 028e 07EE100A 		fmsr	s14, r0
 478 0292 DFED2C7A 		flds	s15, .L7+12
 479 0296 67EE277A 		fmuls	s15, s14, s15
 480 029a 38EE278A 		fadds	s16, s16, s15
 185:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 481              		.loc 1 185 0
 482 029e F868     		ldr	r0, [r7, #12]	@ float
 483 02a0 FFF7FEFF 		bl	__aeabi_f2d
 484 02a4 0246     		mov	r2, r0
 485 02a6 0B46     		mov	r3, r1
 486 02a8 1046     		mov	r0, r2
 487 02aa 1946     		mov	r1, r3
 488 02ac 4FF00002 		mov	r2, #0
 489 02b0 4FF00003 		mov	r3, #0
 490 02b4 C4F20803 		movt	r3, 16392
 491 02b8 FFF7FEFF 		bl	pow
 492 02bc 0246     		mov	r2, r0
 493 02be 0B46     		mov	r3, r1
 494              		.loc 1 187 0
 495 02c0 1046     		mov	r0, r2
 496 02c2 1946     		mov	r1, r3
 497 02c4 FFF7FEFF 		bl	__aeabi_d2f
 498 02c8 07EE100A 		fmsr	s14, r0
 499 02cc DFED1E7A 		flds	s15, .L7+16
 500 02d0 67EE277A 		fmuls	s15, s14, s15
 501 02d4 38EE678A 		fsubs	s16, s16, s15
 186:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 502              		.loc 1 186 0
 503 02d8 F868     		ldr	r0, [r7, #12]	@ float
 504 02da FFF7FEFF 		bl	__aeabi_f2d
 505 02de 0246     		mov	r2, r0
 506 02e0 0B46     		mov	r3, r1
 507 02e2 1046     		mov	r0, r2
 508 02e4 1946     		mov	r1, r3
 509 02e6 4FF00002 		mov	r2, #0
 510 02ea 4FF08043 		mov	r3, #1073741824
 511 02ee FFF7FEFF 		bl	pow
 512 02f2 0246     		mov	r2, r0
 513 02f4 0B46     		mov	r3, r1
 514              		.loc 1 187 0
 515 02f6 1046     		mov	r0, r2
 516 02f8 1946     		mov	r1, r3
 517 02fa FFF7FEFF 		bl	__aeabi_d2f
 518 02fe 07EE100A 		fmsr	s14, r0
 519 0302 DFED127A 		flds	s15, .L7+20
 520 0306 67EE277A 		fmuls	s15, s14, s15
 521 030a 38EE277A 		fadds	s14, s16, s15
 522 030e D7ED036A 		flds	s13, [r7, #12]
 523 0312 DFED0F7A 		flds	s15, .L7+24
 524 0316 66EEA77A 		fmuls	s15, s13, s15
 525 031a 37EE677A 		fsubs	s14, s14, s15
 526 031e DFED0D7A 		flds	s15, .L7+28
 527 0322 77EE277A 		fadds	s15, s14, s15
 528 0326 17EE903A 		fmrs	r3, s15
 529              	.LBE3:
 188:../src/main.cpp **** }
 530              		.loc 1 188 0
 531 032a 1846     		mov	r0, r3	@ float
 532 032c 07F11007 		add	r7, r7, #16
 533 0330 BD46     		mov	sp, r7
 534 0332 BDEC028B 		fldmfdd	sp!, {d8}
 535 0336 80BD     		pop	{r7, pc}
 536              	.L8:
 537              		.align	2
 538              	.L7:
 539 0338 4A03643A 		.word	979632970
 540 033c C1CA213F 		.word	1059179201
 541 0340 27310041 		.word	1090531623
 542 0344 33332442 		.word	1109668659
 543 0348 6666DB42 		.word	1121674854
 544 034c 33B32443 		.word	1126478643
 545 0350 CDCC0A43 		.word	1124781261
 546 0354 C3F57042 		.word	1114699203
 547              		.cfi_endproc
 548              	.LFE112:
 550              		.align	2
 551              		.global	_Z19imu_update_ISR_initv
 552              		.thumb
 553              		.thumb_func
 555              	_Z19imu_update_ISR_initv:
 556              	.LFB113:
 189:../src/main.cpp **** 
 190:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 191:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 192:../src/main.cpp **** 
 193:../src/main.cpp **** void imu_update_ISR_init(void)
 194:../src/main.cpp **** {
 557              		.loc 1 194 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 24
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561 0358 80B5     		push	{r7, lr}
 562              	.LCFI7:
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 035a 86B0     		sub	sp, sp, #24
 567              	.LCFI8:
 568              		.cfi_def_cfa_offset 32
 569 035c 00AF     		add	r7, sp, #0
 570              	.LCFI9:
 571              		.cfi_def_cfa_register 7
 572              	.LBB4:
 195:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 196:../src/main.cpp **** 
 197:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 573              		.loc 1 197 0
 574 035e 4FF00703 		mov	r3, #7
 575 0362 BB74     		strb	r3, [r7, #18]
 198:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 576              		.loc 1 198 0
 577 0364 4FF00003 		mov	r3, #0
 578 0368 FB74     		strb	r3, [r7, #19]
 199:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 579              		.loc 1 199 0
 580 036a 4FF00003 		mov	r3, #0
 581 036e 3B75     		strb	r3, [r7, #20]
 200:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 582              		.loc 1 200 0
 583 0370 4FF00003 		mov	r3, #0
 584 0374 7B75     		strb	r3, [r7, #21]
 201:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 585              		.loc 1 201 0
 586 0376 4FF00003 		mov	r3, #0
 587 037a BB75     		strb	r3, [r7, #22]
 202:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 588              		.loc 1 202 0
 589 037c 4FF00003 		mov	r3, #0
 590 0380 7B74     		strb	r3, [r7, #17]
 203:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 591              		.loc 1 203 0
 592 0382 4FF00803 		mov	r3, #8
 593 0386 3B74     		strb	r3, [r7, #16]
 204:../src/main.cpp **** 
 205:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 594              		.loc 1 205 0
 595 0388 07F11003 		add	r3, r7, #16
 596 038c 1846     		mov	r0, r3
 597 038e FFF7FEFF 		bl	L3GD20_Init
 206:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 598              		.loc 1 206 0
 599 0392 FFF7FEFF 		bl	_Z14calc_gyro_biasv
 600 0396 0346     		mov	r3, r0
 601 0398 1A46     		mov	r2, r3
 602 039a 40F20003 		movw	r3, #:lower16:gyro_bias_x
 603 039e C0F20003 		movt	r3, #:upper16:gyro_bias_x
 604 03a2 1A60     		str	r2, [r3, #0]
 207:../src/main.cpp **** 
 208:../src/main.cpp **** 	gyro_angle_x = 0;
 605              		.loc 1 208 0
 606 03a4 40F20003 		movw	r3, #:lower16:gyro_angle_x
 607 03a8 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 608 03ac 4FF00002 		mov	r2, #0
 609 03b0 1A60     		str	r2, [r3, #0]	@ float
 209:../src/main.cpp **** 
 210:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 211:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 212:../src/main.cpp **** 
 213:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 610              		.loc 1 213 0
 611 03b2 4FF01A03 		mov	r3, #26
 612 03b6 3B73     		strb	r3, [r7, #12]
 214:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 613              		.loc 1 214 0
 614 03b8 4FF00003 		mov	r3, #0
 615 03bc 7B73     		strb	r3, [r7, #13]
 215:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 616              		.loc 1 215 0
 617 03be 4FF00003 		mov	r3, #0
 618 03c2 BB73     		strb	r3, [r7, #14]
 216:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 619              		.loc 1 216 0
 620 03c4 4FF00103 		mov	r3, #1
 621 03c8 FB73     		strb	r3, [r7, #15]
 217:../src/main.cpp **** 
 218:../src/main.cpp **** 	NVIC_Init(&nv);
 622              		.loc 1 218 0
 623 03ca 07F10C03 		add	r3, r7, #12
 624 03ce 1846     		mov	r0, r3
 625 03d0 FFF7FEFF 		bl	NVIC_Init
 219:../src/main.cpp **** 
 220:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 626              		.loc 1 220 0
 627 03d4 4FF48020 		mov	r0, #262144
 628 03d8 4FF00101 		mov	r1, #1
 629 03dc FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 221:../src/main.cpp **** 
 222:../src/main.cpp **** 	/*
 223:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 224:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 225:../src/main.cpp **** 	 * 	  Period -> ARR
 226:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 227:../src/main.cpp **** 	 */
 228:../src/main.cpp **** 
 229:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 630              		.loc 1 229 0
 631 03e0 40F28F13 		movw	r3, #399
 632 03e4 7B60     		str	r3, [r7, #4]
 230:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 633              		.loc 1 230 0
 634 03e6 41F61F43 		movw	r3, #7199
 635 03ea 3B80     		strh	r3, [r7, #0]	@ movhi
 231:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 636              		.loc 1 231 0
 637 03ec 4FF00003 		mov	r3, #0
 638 03f0 BB72     		strb	r3, [r7, #10]
 232:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 639              		.loc 1 232 0
 640 03f2 4FF00003 		mov	r3, #0
 641 03f6 3B81     		strh	r3, [r7, #8]	@ movhi
 233:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 642              		.loc 1 233 0
 643 03f8 4FF00003 		mov	r3, #0
 644 03fc 7B80     		strh	r3, [r7, #2]	@ movhi
 234:../src/main.cpp **** 
 235:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 645              		.loc 1 235 0
 646 03fe 3B46     		mov	r3, r7
 647 0400 4FF49040 		mov	r0, #18432
 648 0404 C4F20100 		movt	r0, 16385
 649 0408 1946     		mov	r1, r3
 650 040a FFF7FEFF 		bl	TIM_TimeBaseInit
 236:../src/main.cpp **** 
 237:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 651              		.loc 1 237 0
 652 040e 4FF49040 		mov	r0, #18432
 653 0412 C4F20100 		movt	r0, 16385
 654 0416 4FF00101 		mov	r1, #1
 655 041a 4FF00102 		mov	r2, #1
 656 041e FFF7FEFF 		bl	TIM_ITConfig
 238:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 657              		.loc 1 238 0
 658 0422 4FF49040 		mov	r0, #18432
 659 0426 C4F20100 		movt	r0, 16385
 660 042a 4FF00101 		mov	r1, #1
 661 042e FFF7FEFF 		bl	TIM_Cmd
 662              	.LBE4:
 239:../src/main.cpp **** }
 663              		.loc 1 239 0
 664 0432 07F11807 		add	r7, r7, #24
 665 0436 BD46     		mov	sp, r7
 666 0438 80BD     		pop	{r7, pc}
 667              		.cfi_endproc
 668              	.LFE113:
 670              		.section	.rodata
 671 0033 00       		.align	2
 672              	.LC1:
 673 0034 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 673      32302072 
 673      65616420 
 673      61747465 
 673      6D707420 
 674 0067 636F6465 		.ascii	"code!!!\012\015\000"
 674      2121210A 
 674      0D00
 675 0071 000000   		.text
 676 043a 00BF     		.align	2
 677              		.global	L3GD20_TIMEOUT_UserCallback
 678              		.thumb
 679              		.thumb_func
 681              	L3GD20_TIMEOUT_UserCallback:
 682              	.LFB114:
 240:../src/main.cpp **** 
 241:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 242:../src/main.cpp **** {
 683              		.loc 1 242 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687 043c 80B5     		push	{r7, lr}
 688              	.LCFI10:
 689              		.cfi_def_cfa_offset 8
 690              		.cfi_offset 7, -8
 691              		.cfi_offset 14, -4
 692 043e 00AF     		add	r7, sp, #0
 693              	.LCFI11:
 694              		.cfi_def_cfa_register 7
 243:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 695              		.loc 1 243 0
 696 0440 40F20000 		movw	r0, #:lower16:.LC1
 697 0444 C0F20000 		movt	r0, #:upper16:.LC1
 698 0448 FFF7FEFF 		bl	printf
 244:../src/main.cpp **** 	return 0;
 699              		.loc 1 244 0
 700 044c 4FF00003 		mov	r3, #0
 245:../src/main.cpp **** }
 701              		.loc 1 245 0
 702 0450 1846     		mov	r0, r3
 703 0452 80BD     		pop	{r7, pc}
 704              		.cfi_endproc
 705              	.LFE114:
 707              		.align	2
 708              		.global	_Z15brake_pins_initv
 709              		.thumb
 710              		.thumb_func
 712              	_Z15brake_pins_initv:
 713              	.LFB115:
 246:../src/main.cpp **** 
 247:../src/main.cpp **** void brake_pins_init(void)
 248:../src/main.cpp **** {
 714              		.loc 1 248 0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 8
 717              		@ frame_needed = 1, uses_anonymous_args = 0
 718 0454 80B5     		push	{r7, lr}
 719              	.LCFI12:
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 7, -8
 722              		.cfi_offset 14, -4
 723 0456 82B0     		sub	sp, sp, #8
 724              	.LCFI13:
 725              		.cfi_def_cfa_offset 16
 726 0458 00AF     		add	r7, sp, #0
 727              	.LCFI14:
 728              		.cfi_def_cfa_register 7
 729              	.LBB5:
 249:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 730              		.loc 1 249 0
 731 045a 4FF40010 		mov	r0, #2097152
 732 045e 4FF00101 		mov	r1, #1
 733 0462 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 250:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 251:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 734              		.loc 1 251 0
 735 0466 3B46     		mov	r3, r7
 736 0468 1846     		mov	r0, r3
 737 046a FFF7FEFF 		bl	GPIO_StructInit
 252:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 738              		.loc 1 252 0
 739 046e 4FF00C03 		mov	r3, #12
 740 0472 3B60     		str	r3, [r7, #0]
 253:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 741              		.loc 1 253 0
 742 0474 4FF00003 		mov	r3, #0
 743 0478 BB71     		strb	r3, [r7, #6]
 254:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 744              		.loc 1 254 0
 745 047a 4FF00103 		mov	r3, #1
 746 047e 3B71     		strb	r3, [r7, #4]
 255:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 747              		.loc 1 255 0
 748 0480 4FF00003 		mov	r3, #0
 749 0484 FB71     		strb	r3, [r7, #7]
 256:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 750              		.loc 1 256 0
 751 0486 4FF00203 		mov	r3, #2
 752 048a 7B71     		strb	r3, [r7, #5]
 257:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 753              		.loc 1 257 0
 754 048c 3B46     		mov	r3, r7
 755 048e 4FF48050 		mov	r0, #4096
 756 0492 C4F60000 		movt	r0, 18432
 757 0496 1946     		mov	r1, r3
 758 0498 FFF7FEFF 		bl	GPIO_Init
 258:../src/main.cpp **** 
 259:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 759              		.loc 1 259 0
 760 049c 4FF48050 		mov	r0, #4096
 761 04a0 C4F60000 		movt	r0, 18432
 762 04a4 4FF00401 		mov	r1, #4
 763 04a8 4FF00002 		mov	r2, #0
 764 04ac FFF7FEFF 		bl	GPIO_WriteBit
 260:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 765              		.loc 1 260 0
 766 04b0 4FF48050 		mov	r0, #4096
 767 04b4 C4F60000 		movt	r0, 18432
 768 04b8 4FF00801 		mov	r1, #8
 769 04bc 4FF00002 		mov	r2, #0
 770 04c0 FFF7FEFF 		bl	GPIO_WriteBit
 771              	.LBE5:
 261:../src/main.cpp **** 
 262:../src/main.cpp **** 	/*
 263:../src/main.cpp **** 	 * 	a.GPIO_Mode = GPIO_Mode_OUT;
 264:../src/main.cpp **** 	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 265:../src/main.cpp **** 	a.GPIO_OType = GPIO_OType_PP;
 266:../src/main.cpp **** 	a.GPIO_Speed = GPIO_Speed_Level_2;
 267:../src/main.cpp **** 
 268:../src/main.cpp **** 	 */
 269:../src/main.cpp **** }
 772              		.loc 1 269 0
 773 04c4 07F10807 		add	r7, r7, #8
 774 04c8 BD46     		mov	sp, r7
 775 04ca 80BD     		pop	{r7, pc}
 776              		.cfi_endproc
 777              	.LFE115:
 779              		.align	2
 780              		.global	_Z13ping_pin_initv
 781              		.thumb
 782              		.thumb_func
 784              	_Z13ping_pin_initv:
 785              	.LFB116:
 270:../src/main.cpp **** /*
 271:../src/main.cpp ****  * PB0: OUTPUT
 272:../src/main.cpp ****  * PC1: INPUT
 273:../src/main.cpp ****  */
 274:../src/main.cpp **** void ping_pin_init(void)
 275:../src/main.cpp **** {
 786              		.loc 1 275 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 8
 789              		@ frame_needed = 1, uses_anonymous_args = 0
 790 04cc 80B5     		push	{r7, lr}
 791              	.LCFI15:
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 7, -8
 794              		.cfi_offset 14, -4
 795 04ce 82B0     		sub	sp, sp, #8
 796              	.LCFI16:
 797              		.cfi_def_cfa_offset 16
 798 04d0 00AF     		add	r7, sp, #0
 799              	.LCFI17:
 800              		.cfi_def_cfa_register 7
 801              	.LBB6:
 276:../src/main.cpp **** 
 277:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 802              		.loc 1 277 0
 803 04d2 4FF48800 		mov	r0, #4456448
 804 04d6 4FF00101 		mov	r1, #1
 805 04da FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 278:../src/main.cpp **** 
 279:../src/main.cpp **** 	GPIO_InitTypeDef g;
 280:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 806              		.loc 1 280 0
 807 04de 4FF00003 		mov	r3, #0
 808 04e2 3B71     		strb	r3, [r7, #4]
 281:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 809              		.loc 1 281 0
 810 04e4 4FF00103 		mov	r3, #1
 811 04e8 BB71     		strb	r3, [r7, #6]
 282:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 812              		.loc 1 282 0
 813 04ea 4FF40073 		mov	r3, #512
 814 04ee 3B60     		str	r3, [r7, #0]
 283:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 815              		.loc 1 283 0
 816 04f0 4FF00003 		mov	r3, #0
 817 04f4 FB71     		strb	r3, [r7, #7]
 284:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 818              		.loc 1 284 0
 819 04f6 4FF00103 		mov	r3, #1
 820 04fa 7B71     		strb	r3, [r7, #5]
 285:../src/main.cpp **** 
 286:../src/main.cpp **** 	GPIO_Init(GPIOF, &g);
 821              		.loc 1 286 0
 822 04fc 3B46     		mov	r3, r7
 823 04fe 4FF4A050 		mov	r0, #5120
 824 0502 C4F60000 		movt	r0, 18432
 825 0506 1946     		mov	r1, r3
 826 0508 FFF7FEFF 		bl	GPIO_Init
 287:../src/main.cpp **** 
 288:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 827              		.loc 1 288 0
 828 050c 4FF00103 		mov	r3, #1
 829 0510 3B71     		strb	r3, [r7, #4]
 289:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 830              		.loc 1 289 0
 831 0512 4FF00003 		mov	r3, #0
 832 0516 BB71     		strb	r3, [r7, #6]
 290:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 833              		.loc 1 290 0
 834 0518 4FF00103 		mov	r3, #1
 835 051c 3B60     		str	r3, [r7, #0]
 291:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 836              		.loc 1 291 0
 837 051e 4FF00003 		mov	r3, #0
 838 0522 FB71     		strb	r3, [r7, #7]
 292:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 839              		.loc 1 292 0
 840 0524 4FF00103 		mov	r3, #1
 841 0528 7B71     		strb	r3, [r7, #5]
 293:../src/main.cpp **** 
 294:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 842              		.loc 1 294 0
 843 052a 3B46     		mov	r3, r7
 844 052c 4FF48060 		mov	r0, #1024
 845 0530 C4F60000 		movt	r0, 18432
 846 0534 1946     		mov	r1, r3
 847 0536 FFF7FEFF 		bl	GPIO_Init
 295:../src/main.cpp **** 
 296:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 848              		.loc 1 296 0
 849 053a 4FF00100 		mov	r0, #1
 850 053e 4FF00101 		mov	r1, #1
 851 0542 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 297:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 852              		.loc 1 297 0
 853 0546 4FF00500 		mov	r0, #5
 854 054a 4FF00901 		mov	r1, #9
 855 054e FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 856              	.LBE6:
 298:../src/main.cpp **** 
 299:../src/main.cpp **** }
 857              		.loc 1 299 0
 858 0552 07F10807 		add	r7, r7, #8
 859 0556 BD46     		mov	sp, r7
 860 0558 80BD     		pop	{r7, pc}
 861              		.cfi_endproc
 862              	.LFE116:
 864 055a 00BF     		.align	2
 865              		.global	_Z20timer2_timebase_initv
 866              		.thumb
 867              		.thumb_func
 869              	_Z20timer2_timebase_initv:
 870              	.LFB117:
 300:../src/main.cpp **** 
 301:../src/main.cpp **** void timer2_timebase_init(void)
 302:../src/main.cpp **** {
 871              		.loc 1 302 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 16
 874              		@ frame_needed = 1, uses_anonymous_args = 0
 875 055c 80B5     		push	{r7, lr}
 876              	.LCFI18:
 877              		.cfi_def_cfa_offset 8
 878              		.cfi_offset 7, -8
 879              		.cfi_offset 14, -4
 880 055e 84B0     		sub	sp, sp, #16
 881              	.LCFI19:
 882              		.cfi_def_cfa_offset 24
 883 0560 00AF     		add	r7, sp, #0
 884              	.LCFI20:
 885              		.cfi_def_cfa_register 7
 886              	.LBB7:
 303:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 304:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 887              		.loc 1 304 0
 888 0562 4FF00100 		mov	r0, #1
 889 0566 4FF00101 		mov	r1, #1
 890 056a FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 305:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 891              		.loc 1 305 0
 892 056e 44F24F63 		movw	r3, #17999
 893 0572 BB60     		str	r3, [r7, #8]
 306:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 894              		.loc 1 306 0
 895 0574 4FF00003 		mov	r3, #0
 896 0578 BB73     		strb	r3, [r7, #14]
 307:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 897              		.loc 1 307 0
 898 057a 4FF04703 		mov	r3, #71
 899 057e BB80     		strh	r3, [r7, #4]	@ movhi
 308:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 900              		.loc 1 308 0
 901 0580 4FF00003 		mov	r3, #0
 902 0584 BB81     		strh	r3, [r7, #12]	@ movhi
 309:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 903              		.loc 1 309 0
 904 0586 4FF00003 		mov	r3, #0
 905 058a FB80     		strh	r3, [r7, #6]	@ movhi
 310:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 906              		.loc 1 310 0
 907 058c 07F10403 		add	r3, r7, #4
 908 0590 4FF08040 		mov	r0, #1073741824
 909 0594 1946     		mov	r1, r3
 910 0596 FFF7FEFF 		bl	TIM_TimeBaseInit
 311:../src/main.cpp **** //	TIM_Cmd(TIM2, ENABLE);
 312:../src/main.cpp **** 
 313:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 911              		.loc 1 313 0
 912 059a 4FF08040 		mov	r0, #1073741824
 913 059e 4FF00001 		mov	r1, #0
 914 05a2 FFF7FEFF 		bl	TIM_SetCounter
 915              	.LBE7:
 314:../src/main.cpp **** }
 916              		.loc 1 314 0
 917 05a6 07F11007 		add	r7, r7, #16
 918 05aa BD46     		mov	sp, r7
 919 05ac 80BD     		pop	{r7, pc}
 920              		.cfi_endproc
 921              	.LFE117:
 923 05ae 00BF     		.align	2
 924              		.global	_Z9comp_initv
 925              		.thumb
 926              		.thumb_func
 928              	_Z9comp_initv:
 929              	.LFB118:
 315:../src/main.cpp **** 
 316:../src/main.cpp **** /*
 317:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 318:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 319:../src/main.cpp ****  * 			Output->	PB9
 320:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 321:../src/main.cpp ****  * 			Output->	PA8
 322:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 323:../src/main.cpp ****  * 			Output->	PB1
 324:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 325:../src/main.cpp ****  * 			Output->	PC2
 326:../src/main.cpp ****  */
 327:../src/main.cpp **** 
 328:../src/main.cpp **** void comp_init(void)
 329:../src/main.cpp **** {
 930              		.loc 1 329 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 40
 933              		@ frame_needed = 1, uses_anonymous_args = 0
 934 05b0 80B5     		push	{r7, lr}
 935              	.LCFI21:
 936              		.cfi_def_cfa_offset 8
 937              		.cfi_offset 7, -8
 938              		.cfi_offset 14, -4
 939 05b2 8AB0     		sub	sp, sp, #40
 940              	.LCFI22:
 941              		.cfi_def_cfa_offset 48
 942 05b4 00AF     		add	r7, sp, #0
 943              	.LCFI23:
 944              		.cfi_def_cfa_register 7
 945              	.LBB8:
 330:../src/main.cpp **** 	//COMP2 Init:
 331:../src/main.cpp **** 
 332:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 946              		.loc 1 332 0
 947 05b6 4FF00100 		mov	r0, #1
 948 05ba 4FF00101 		mov	r1, #1
 949 05be FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 333:../src/main.cpp **** 
 334:../src/main.cpp **** 	GPIO_InitTypeDef g;
 335:../src/main.cpp **** 
 336:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 950              		.loc 1 336 0
 951 05c2 4FF00303 		mov	r3, #3
 952 05c6 87F82430 		strb	r3, [r7, #36]
 337:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 953              		.loc 1 337 0
 954 05ca 4FF00003 		mov	r3, #0
 955 05ce 87F82730 		strb	r3, [r7, #39]
 338:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 956              		.loc 1 338 0
 957 05d2 4FF08003 		mov	r3, #128
 958 05d6 3B62     		str	r3, [r7, #32]
 339:../src/main.cpp **** 
 340:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 959              		.loc 1 340 0
 960 05d8 4FF40030 		mov	r0, #131072
 961 05dc 4FF00101 		mov	r1, #1
 962 05e0 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 341:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 963              		.loc 1 341 0
 964 05e4 07F12003 		add	r3, r7, #32
 965 05e8 4FF09040 		mov	r0, #1207959552
 966 05ec 1946     		mov	r1, r3
 967 05ee FFF7FEFF 		bl	GPIO_Init
 342:../src/main.cpp **** 
 343:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 968              		.loc 1 343 0
 969 05f2 4FF00203 		mov	r3, #2
 970 05f6 87F82430 		strb	r3, [r7, #36]
 344:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 971              		.loc 1 344 0
 972 05fa 4FF00003 		mov	r3, #0
 973 05fe 87F82630 		strb	r3, [r7, #38]
 345:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 974              		.loc 1 345 0
 975 0602 4FF00003 		mov	r3, #0
 976 0606 87F82730 		strb	r3, [r7, #39]
 346:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 977              		.loc 1 346 0
 978 060a 4FF40073 		mov	r3, #512
 979 060e 3B62     		str	r3, [r7, #32]
 347:../src/main.cpp **** 
 348:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 980              		.loc 1 348 0
 981 0610 4FF48060 		mov	r0, #1024
 982 0614 C4F60000 		movt	r0, 18432
 983 0618 4FF00901 		mov	r1, #9
 984 061c 4FF00802 		mov	r2, #8
 985 0620 FFF7FEFF 		bl	GPIO_PinAFConfig
 349:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 986              		.loc 1 349 0
 987 0624 07F12003 		add	r3, r7, #32
 988 0628 4FF48060 		mov	r0, #1024
 989 062c C4F60000 		movt	r0, 18432
 990 0630 1946     		mov	r1, r3
 991 0632 FFF7FEFF 		bl	GPIO_Init
 350:../src/main.cpp **** 
 351:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 992              		.loc 1 351 0
 993 0636 4FF00000 		mov	r0, #0
 994 063a FFF7FEFF 		bl	RCC_PCLK2Config
 352:../src/main.cpp **** 
 353:../src/main.cpp **** 	COMP_InitTypeDef c;
 354:../src/main.cpp **** 
 355:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 995              		.loc 1 355 0
 996 063e 4FF03003 		mov	r3, #48
 997 0642 7B60     		str	r3, [r7, #4]
 356:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 998              		.loc 1 356 0
 999 0644 4FF00003 		mov	r3, #0
 1000 0648 BB60     		str	r3, [r7, #8]
 357:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1001              		.loc 1 357 0
 1002 064a 4FF00403 		mov	r3, #4
 1003 064e FB61     		str	r3, [r7, #28]
 358:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1004              		.loc 1 358 0
 1005 0650 4FF00003 		mov	r3, #0
 1006 0654 FB60     		str	r3, [r7, #12]
 359:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1007              		.loc 1 359 0
 1008 0656 4FF00003 		mov	r3, #0
 1009 065a 7B61     		str	r3, [r7, #20]
 360:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1010              		.loc 1 360 0
 1011 065c 4FF48033 		mov	r3, #65536
 1012 0660 BB61     		str	r3, [r7, #24]
 361:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1013              		.loc 1 361 0
 1014 0662 4FF00003 		mov	r3, #0
 1015 0666 3B61     		str	r3, [r7, #16]
 362:../src/main.cpp **** 
 363:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 1016              		.loc 1 363 0
 1017 0668 07F10403 		add	r3, r7, #4
 1018 066c 4FF00400 		mov	r0, #4
 1019 0670 1946     		mov	r1, r3
 1020 0672 FFF7FEFF 		bl	COMP_Init
 364:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 1021              		.loc 1 364 0
 1022 0676 4FF00400 		mov	r0, #4
 1023 067a 4FF00101 		mov	r1, #1
 1024 067e FFF7FEFF 		bl	COMP_Cmd
 365:../src/main.cpp **** 
 366:../src/main.cpp **** 	//COMP3 Init:
 367:../src/main.cpp **** 
 368:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1025              		.loc 1 368 0
 1026 0682 4FF00100 		mov	r0, #1
 1027 0686 4FF00101 		mov	r1, #1
 1028 068a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 369:../src/main.cpp **** 
 370:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1029              		.loc 1 370 0
 1030 068e 4FF00303 		mov	r3, #3
 1031 0692 87F82430 		strb	r3, [r7, #36]
 371:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1032              		.loc 1 371 0
 1033 0696 4FF00003 		mov	r3, #0
 1034 069a 87F82730 		strb	r3, [r7, #39]
 372:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 1035              		.loc 1 372 0
 1036 069e 4FF48043 		mov	r3, #16384
 1037 06a2 3B62     		str	r3, [r7, #32]
 373:../src/main.cpp **** 
 374:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 1038              		.loc 1 374 0
 1039 06a4 4FF4C020 		mov	r0, #393216
 1040 06a8 4FF00101 		mov	r1, #1
 1041 06ac FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 375:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1042              		.loc 1 375 0
 1043 06b0 07F12003 		add	r3, r7, #32
 1044 06b4 4FF48060 		mov	r0, #1024
 1045 06b8 C4F60000 		movt	r0, 18432
 1046 06bc 1946     		mov	r1, r3
 1047 06be FFF7FEFF 		bl	GPIO_Init
 376:../src/main.cpp **** 
 377:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1048              		.loc 1 377 0
 1049 06c2 4FF00203 		mov	r3, #2
 1050 06c6 87F82430 		strb	r3, [r7, #36]
 378:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1051              		.loc 1 378 0
 1052 06ca 4FF00003 		mov	r3, #0
 1053 06ce 87F82630 		strb	r3, [r7, #38]
 379:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1054              		.loc 1 379 0
 1055 06d2 4FF00003 		mov	r3, #0
 1056 06d6 87F82730 		strb	r3, [r7, #39]
 380:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 1057              		.loc 1 380 0
 1058 06da 4FF48073 		mov	r3, #256
 1059 06de 3B62     		str	r3, [r7, #32]
 381:../src/main.cpp **** 
 382:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 1060              		.loc 1 382 0
 1061 06e0 4FF40060 		mov	r0, #2048
 1062 06e4 C4F60000 		movt	r0, 18432
 1063 06e8 4FF00801 		mov	r1, #8
 1064 06ec 4FF00702 		mov	r2, #7
 1065 06f0 FFF7FEFF 		bl	GPIO_PinAFConfig
 383:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1066              		.loc 1 383 0
 1067 06f4 07F12003 		add	r3, r7, #32
 1068 06f8 4FF40060 		mov	r0, #2048
 1069 06fc C4F60000 		movt	r0, 18432
 1070 0700 1946     		mov	r1, r3
 1071 0702 FFF7FEFF 		bl	GPIO_Init
 384:../src/main.cpp **** 
 385:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1072              		.loc 1 385 0
 1073 0706 4FF00000 		mov	r0, #0
 1074 070a FFF7FEFF 		bl	RCC_PCLK2Config
 386:../src/main.cpp **** 
 387:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1075              		.loc 1 387 0
 1076 070e 4FF03003 		mov	r3, #48
 1077 0712 7B60     		str	r3, [r7, #4]
 388:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1078              		.loc 1 388 0
 1079 0714 4FF00003 		mov	r3, #0
 1080 0718 BB60     		str	r3, [r7, #8]
 389:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1081              		.loc 1 389 0
 1082 071a 4FF00403 		mov	r3, #4
 1083 071e FB61     		str	r3, [r7, #28]
 390:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1084              		.loc 1 390 0
 1085 0720 4FF00003 		mov	r3, #0
 1086 0724 FB60     		str	r3, [r7, #12]
 391:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1087              		.loc 1 391 0
 1088 0726 4FF00003 		mov	r3, #0
 1089 072a 7B61     		str	r3, [r7, #20]
 392:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1090              		.loc 1 392 0
 1091 072c 4FF48033 		mov	r3, #65536
 1092 0730 BB61     		str	r3, [r7, #24]
 393:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1093              		.loc 1 393 0
 1094 0732 4FF00003 		mov	r3, #0
 1095 0736 3B61     		str	r3, [r7, #16]
 394:../src/main.cpp **** 
 395:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 1096              		.loc 1 395 0
 1097 0738 07F10403 		add	r3, r7, #4
 1098 073c 4FF00800 		mov	r0, #8
 1099 0740 1946     		mov	r1, r3
 1100 0742 FFF7FEFF 		bl	COMP_Init
 396:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 1101              		.loc 1 396 0
 1102 0746 4FF00800 		mov	r0, #8
 1103 074a 4FF00101 		mov	r1, #1
 1104 074e FFF7FEFF 		bl	COMP_Cmd
 397:../src/main.cpp **** 
 398:../src/main.cpp **** 	//COMP4 Init:
 399:../src/main.cpp **** 
 400:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1105              		.loc 1 400 0
 1106 0752 4FF00100 		mov	r0, #1
 1107 0756 4FF00101 		mov	r1, #1
 1108 075a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 401:../src/main.cpp **** 
 402:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1109              		.loc 1 402 0
 1110 075e 4FF00303 		mov	r3, #3
 1111 0762 87F82430 		strb	r3, [r7, #36]
 403:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1112              		.loc 1 403 0
 1113 0766 4FF00003 		mov	r3, #0
 1114 076a 87F82730 		strb	r3, [r7, #39]
 404:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 1115              		.loc 1 404 0
 1116 076e 4FF08003 		mov	r3, #128
 1117 0772 3B62     		str	r3, [r7, #32]
 405:../src/main.cpp **** 
 406:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 1118              		.loc 1 406 0
 1119 0774 4FF41010 		mov	r0, #2359296
 1120 0778 4FF00101 		mov	r1, #1
 1121 077c FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 407:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 1122              		.loc 1 407 0
 1123 0780 07F12003 		add	r3, r7, #32
 1124 0784 4FF48050 		mov	r0, #4096
 1125 0788 C4F60000 		movt	r0, 18432
 1126 078c 1946     		mov	r1, r3
 1127 078e FFF7FEFF 		bl	GPIO_Init
 408:../src/main.cpp **** 
 409:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1128              		.loc 1 409 0
 1129 0792 4FF00203 		mov	r3, #2
 1130 0796 87F82430 		strb	r3, [r7, #36]
 410:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1131              		.loc 1 410 0
 1132 079a 4FF00003 		mov	r3, #0
 1133 079e 87F82630 		strb	r3, [r7, #38]
 411:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1134              		.loc 1 411 0
 1135 07a2 4FF00003 		mov	r3, #0
 1136 07a6 87F82730 		strb	r3, [r7, #39]
 412:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 1137              		.loc 1 412 0
 1138 07aa 4FF00203 		mov	r3, #2
 1139 07ae 3B62     		str	r3, [r7, #32]
 413:../src/main.cpp **** 
 414:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 1140              		.loc 1 414 0
 1141 07b0 4FF48060 		mov	r0, #1024
 1142 07b4 C4F60000 		movt	r0, 18432
 1143 07b8 4FF00101 		mov	r1, #1
 1144 07bc 4FF00802 		mov	r2, #8
 1145 07c0 FFF7FEFF 		bl	GPIO_PinAFConfig
 415:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1146              		.loc 1 415 0
 1147 07c4 07F12003 		add	r3, r7, #32
 1148 07c8 4FF48060 		mov	r0, #1024
 1149 07cc C4F60000 		movt	r0, 18432
 1150 07d0 1946     		mov	r1, r3
 1151 07d2 FFF7FEFF 		bl	GPIO_Init
 416:../src/main.cpp **** 
 417:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1152              		.loc 1 417 0
 1153 07d6 4FF00000 		mov	r0, #0
 1154 07da FFF7FEFF 		bl	RCC_PCLK2Config
 418:../src/main.cpp **** 
 419:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1155              		.loc 1 419 0
 1156 07de 4FF03003 		mov	r3, #48
 1157 07e2 7B60     		str	r3, [r7, #4]
 420:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1158              		.loc 1 420 0
 1159 07e4 4FF08003 		mov	r3, #128
 1160 07e8 BB60     		str	r3, [r7, #8]
 421:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1161              		.loc 1 421 0
 1162 07ea 4FF00403 		mov	r3, #4
 1163 07ee FB61     		str	r3, [r7, #28]
 422:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1164              		.loc 1 422 0
 1165 07f0 4FF00003 		mov	r3, #0
 1166 07f4 FB60     		str	r3, [r7, #12]
 423:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1167              		.loc 1 423 0
 1168 07f6 4FF00003 		mov	r3, #0
 1169 07fa 7B61     		str	r3, [r7, #20]
 424:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1170              		.loc 1 424 0
 1171 07fc 4FF48033 		mov	r3, #65536
 1172 0800 BB61     		str	r3, [r7, #24]
 425:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1173              		.loc 1 425 0
 1174 0802 4FF00003 		mov	r3, #0
 1175 0806 3B61     		str	r3, [r7, #16]
 426:../src/main.cpp **** 
 427:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 1176              		.loc 1 427 0
 1177 0808 07F10403 		add	r3, r7, #4
 1178 080c 4FF00C00 		mov	r0, #12
 1179 0810 1946     		mov	r1, r3
 1180 0812 FFF7FEFF 		bl	COMP_Init
 428:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 1181              		.loc 1 428 0
 1182 0816 4FF00C00 		mov	r0, #12
 1183 081a 4FF00101 		mov	r1, #1
 1184 081e FFF7FEFF 		bl	COMP_Cmd
 429:../src/main.cpp **** 
 430:../src/main.cpp **** 	//COMP7 Init:
 431:../src/main.cpp **** 
 432:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1185              		.loc 1 432 0
 1186 0822 4FF00100 		mov	r0, #1
 1187 0826 4FF00101 		mov	r1, #1
 1188 082a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 433:../src/main.cpp **** 
 434:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1189              		.loc 1 434 0
 1190 082e 4FF00303 		mov	r3, #3
 1191 0832 87F82430 		strb	r3, [r7, #36]
 435:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1192              		.loc 1 435 0
 1193 0836 4FF00003 		mov	r3, #0
 1194 083a 87F82730 		strb	r3, [r7, #39]
 436:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 1195              		.loc 1 436 0
 1196 083e 4FF00203 		mov	r3, #2
 1197 0842 3B62     		str	r3, [r7, #32]
 437:../src/main.cpp **** 
 438:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 1198              		.loc 1 438 0
 1199 0844 4FF40020 		mov	r0, #524288
 1200 0848 4FF00101 		mov	r1, #1
 1201 084c FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 439:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1202              		.loc 1 439 0
 1203 0850 07F12003 		add	r3, r7, #32
 1204 0854 4FF40060 		mov	r0, #2048
 1205 0858 C4F60000 		movt	r0, 18432
 1206 085c 1946     		mov	r1, r3
 1207 085e FFF7FEFF 		bl	GPIO_Init
 440:../src/main.cpp **** 
 441:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1208              		.loc 1 441 0
 1209 0862 4FF00203 		mov	r3, #2
 1210 0866 87F82430 		strb	r3, [r7, #36]
 442:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1211              		.loc 1 442 0
 1212 086a 4FF00003 		mov	r3, #0
 1213 086e 87F82630 		strb	r3, [r7, #38]
 443:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1214              		.loc 1 443 0
 1215 0872 4FF00003 		mov	r3, #0
 1216 0876 87F82730 		strb	r3, [r7, #39]
 444:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 1217              		.loc 1 444 0
 1218 087a 4FF00403 		mov	r3, #4
 1219 087e 3B62     		str	r3, [r7, #32]
 445:../src/main.cpp **** 
 446:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 1220              		.loc 1 446 0
 1221 0880 4FF40060 		mov	r0, #2048
 1222 0884 C4F60000 		movt	r0, 18432
 1223 0888 4FF00201 		mov	r1, #2
 1224 088c 4FF00302 		mov	r2, #3
 1225 0890 FFF7FEFF 		bl	GPIO_PinAFConfig
 447:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1226              		.loc 1 447 0
 1227 0894 07F12003 		add	r3, r7, #32
 1228 0898 4FF40060 		mov	r0, #2048
 1229 089c C4F60000 		movt	r0, 18432
 1230 08a0 1946     		mov	r1, r3
 1231 08a2 FFF7FEFF 		bl	GPIO_Init
 448:../src/main.cpp **** 
 449:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1232              		.loc 1 449 0
 1233 08a6 4FF00000 		mov	r0, #0
 1234 08aa FFF7FEFF 		bl	RCC_PCLK2Config
 450:../src/main.cpp **** 
 451:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1235              		.loc 1 451 0
 1236 08ae 4FF03003 		mov	r3, #48
 1237 08b2 7B60     		str	r3, [r7, #4]
 452:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1238              		.loc 1 452 0
 1239 08b4 4FF08003 		mov	r3, #128
 1240 08b8 BB60     		str	r3, [r7, #8]
 453:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1241              		.loc 1 453 0
 1242 08ba 4FF00403 		mov	r3, #4
 1243 08be FB61     		str	r3, [r7, #28]
 454:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1244              		.loc 1 454 0
 1245 08c0 4FF00003 		mov	r3, #0
 1246 08c4 FB60     		str	r3, [r7, #12]
 455:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1247              		.loc 1 455 0
 1248 08c6 4FF00003 		mov	r3, #0
 1249 08ca 7B61     		str	r3, [r7, #20]
 456:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1250              		.loc 1 456 0
 1251 08cc 4FF48033 		mov	r3, #65536
 1252 08d0 BB61     		str	r3, [r7, #24]
 457:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1253              		.loc 1 457 0
 1254 08d2 4FF00003 		mov	r3, #0
 1255 08d6 3B61     		str	r3, [r7, #16]
 458:../src/main.cpp **** 
 459:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 1256              		.loc 1 459 0
 1257 08d8 07F10403 		add	r3, r7, #4
 1258 08dc 4FF01800 		mov	r0, #24
 1259 08e0 1946     		mov	r1, r3
 1260 08e2 FFF7FEFF 		bl	COMP_Init
 460:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 1261              		.loc 1 460 0
 1262 08e6 4FF01800 		mov	r0, #24
 1263 08ea 4FF00101 		mov	r1, #1
 1264 08ee FFF7FEFF 		bl	COMP_Cmd
 1265              	.LBE8:
 461:../src/main.cpp **** }
 1266              		.loc 1 461 0
 1267 08f2 07F12807 		add	r7, r7, #40
 1268 08f6 BD46     		mov	sp, r7
 1269 08f8 80BD     		pop	{r7, pc}
 1270              		.cfi_endproc
 1271              	.LFE118:
 1273 08fa 00BF     		.align	2
 1274              		.global	_Z14calc_gyro_biasv
 1275              		.thumb
 1276              		.thumb_func
 1278              	_Z14calc_gyro_biasv:
 1279              	.LFB119:
 462:../src/main.cpp **** 
 463:../src/main.cpp **** int16_t calc_gyro_bias(void)
 464:../src/main.cpp **** {
 1280              		.loc 1 464 0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 16
 1283              		@ frame_needed = 1, uses_anonymous_args = 0
 1284 08fc 80B5     		push	{r7, lr}
 1285              	.LCFI24:
 1286              		.cfi_def_cfa_offset 8
 1287              		.cfi_offset 7, -8
 1288              		.cfi_offset 14, -4
 1289 08fe 84B0     		sub	sp, sp, #16
 1290              	.LCFI25:
 1291              		.cfi_def_cfa_offset 24
 1292 0900 00AF     		add	r7, sp, #0
 1293              	.LCFI26:
 1294              		.cfi_def_cfa_register 7
 1295              	.LBB9:
 465:../src/main.cpp **** 	int i = 0;
 1296              		.loc 1 465 0
 1297 0902 4FF00003 		mov	r3, #0
 1298 0906 FB60     		str	r3, [r7, #12]
 466:../src/main.cpp **** 	int accum_x = 0;
 1299              		.loc 1 466 0
 1300 0908 4FF00003 		mov	r3, #0
 1301 090c BB60     		str	r3, [r7, #8]
 467:../src/main.cpp **** 
 468:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 469:../src/main.cpp **** 		uint16_t un_signed;
 470:../src/main.cpp **** 		int16_t output;
 471:../src/main.cpp **** 	} convert;
 472:../src/main.cpp **** 
 473:../src/main.cpp **** 	uint8_t bytes[2];
 474:../src/main.cpp **** 
 475:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1302              		.loc 1 475 0
 1303 090e 4FF00003 		mov	r3, #0
 1304 0912 FB60     		str	r3, [r7, #12]
 1305 0914 19E0     		b	.L17
 1306              	.L18:
 476:../src/main.cpp **** 	{
 477:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1307              		.loc 1 477 0 discriminator 2
 1308 0916 3B46     		mov	r3, r7
 1309 0918 1846     		mov	r0, r3
 1310 091a 4FF02801 		mov	r1, #40
 1311 091e 4FF00202 		mov	r2, #2
 1312 0922 FFF7FEFF 		bl	L3GD20_Read
 478:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1313              		.loc 1 478 0 discriminator 2
 1314 0926 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1315 0928 4FEA0323 		lsl	r3, r3, #8
 1316 092c 9AB2     		uxth	r2, r3
 1317 092e 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1318 0930 1343     		orrs	r3, r3, r2
 1319 0932 9BB2     		uxth	r3, r3
 1320 0934 9BB2     		uxth	r3, r3
 1321 0936 BB80     		strh	r3, [r7, #4]	@ movhi
 479:../src/main.cpp **** 		accum_x += convert.output;
 1322              		.loc 1 479 0 discriminator 2
 1323 0938 BB88     		ldrh	r3, [r7, #4]
 1324 093a 1BB2     		sxth	r3, r3
 1325 093c BA68     		ldr	r2, [r7, #8]
 1326 093e D318     		adds	r3, r2, r3
 1327 0940 BB60     		str	r3, [r7, #8]
 475:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1328              		.loc 1 475 0 discriminator 2
 1329 0942 FB68     		ldr	r3, [r7, #12]
 1330 0944 03F10103 		add	r3, r3, #1
 1331 0948 FB60     		str	r3, [r7, #12]
 1332              	.L17:
 475:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1333              		.loc 1 475 0 is_stmt 0 discriminator 1
 1334 094a FB68     		ldr	r3, [r7, #12]
 1335 094c F92B     		cmp	r3, #249
 1336 094e CCBF     		ite	gt
 1337 0950 0023     		movgt	r3, #0
 1338 0952 0123     		movle	r3, #1
 1339 0954 DBB2     		uxtb	r3, r3
 1340 0956 002B     		cmp	r3, #0
 1341 0958 DDD1     		bne	.L18
 480:../src/main.cpp **** 	}
 481:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1342              		.loc 1 481 0 is_stmt 1
 1343 095a D7ED027A 		flds	s15, [r7, #8]	@ int
 1344 095e B8EEE77A 		fsitos	s14, s15
 1345 0962 DFED077A 		flds	s15, .L20
 1346 0966 C7EE277A 		fdivs	s15, s14, s15
 1347 096a FDEEE77A 		ftosizs	s15, s15
 1348 096e 17EE903A 		fmrs	r3, s15	@ int
 1349 0972 9BB2     		uxth	r3, r3
 1350 0974 1BB2     		sxth	r3, r3
 1351              	.LBE9:
 482:../src/main.cpp **** }
 1352              		.loc 1 482 0
 1353 0976 1846     		mov	r0, r3
 1354 0978 07F11007 		add	r7, r7, #16
 1355 097c BD46     		mov	sp, r7
 1356 097e 80BD     		pop	{r7, pc}
 1357              	.L21:
 1358              		.align	2
 1359              	.L20:
 1360 0980 00007A43 		.word	1132068864
 1361              		.cfi_endproc
 1362              	.LFE119:
 1364              		.align	2
 1365              		.global	_Z13adc1_init_DMAv
 1366              		.thumb
 1367              		.thumb_func
 1369              	_Z13adc1_init_DMAv:
 1370              	.LFB120:
 483:../src/main.cpp **** 
 484:../src/main.cpp **** /*
 485:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 486:../src/main.cpp ****  * a user-supplied location in memory
 487:../src/main.cpp ****  * @Args: None
 488:../src/main.cpp ****  * @Return Val: None
 489:../src/main.cpp ****  */
 490:../src/main.cpp **** 
 491:../src/main.cpp **** void adc1_init_DMA(void)
 492:../src/main.cpp **** {
 1371              		.loc 1 492 0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 112
 1374              		@ frame_needed = 1, uses_anonymous_args = 0
 1375 0984 80B5     		push	{r7, lr}
 1376              	.LCFI27:
 1377              		.cfi_def_cfa_offset 8
 1378              		.cfi_offset 7, -8
 1379              		.cfi_offset 14, -4
 1380 0986 9CB0     		sub	sp, sp, #112
 1381              	.LCFI28:
 1382              		.cfi_def_cfa_offset 120
 1383 0988 00AF     		add	r7, sp, #0
 1384              	.LCFI29:
 1385              		.cfi_def_cfa_register 7
 1386              	.LBB10:
 493:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 494:../src/main.cpp **** 
 495:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 496:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 497:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 498:../src/main.cpp **** 
 499:../src/main.cpp **** 	/* Configure the ADC clock */
 500:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1387              		.loc 1 500 0
 1388 098a 4FF48870 		mov	r0, #272
 1389 098e FFF7FEFF 		bl	RCC_ADCCLKConfig
 501:../src/main.cpp **** 	/* Enable ADC1 clock */
 502:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1390              		.loc 1 502 0
 1391 0992 4FF08050 		mov	r0, #268435456
 1392 0996 4FF00101 		mov	r1, #1
 1393 099a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 503:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 504:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1394              		.loc 1 504 0
 1395 099e 4FF40030 		mov	r0, #131072
 1396 09a2 4FF00101 		mov	r1, #1
 1397 09a6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 505:../src/main.cpp **** 
 506:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 507:../src/main.cpp **** 
 508:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1398              		.loc 1 508 0
 1399 09aa 07F15003 		add	r3, r7, #80
 1400 09ae 1846     		mov	r0, r3
 1401 09b0 FFF7FEFF 		bl	GPIO_StructInit
 509:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1402              		.loc 1 509 0
 1403 09b4 4FF00C03 		mov	r3, #12
 1404 09b8 3B65     		str	r3, [r7, #80]
 510:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1405              		.loc 1 510 0
 1406 09ba 4FF00303 		mov	r3, #3
 1407 09be 87F85430 		strb	r3, [r7, #84]
 511:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1408              		.loc 1 511 0
 1409 09c2 4FF00003 		mov	r3, #0
 1410 09c6 87F85730 		strb	r3, [r7, #87]
 512:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1411              		.loc 1 512 0
 1412 09ca 07F15003 		add	r3, r7, #80
 1413 09ce 4FF09040 		mov	r0, #1207959552
 1414 09d2 1946     		mov	r1, r3
 1415 09d4 FFF7FEFF 		bl	GPIO_Init
 513:../src/main.cpp **** 
 514:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1416              		.loc 1 514 0
 1417 09d8 3B46     		mov	r3, r7
 1418 09da 1846     		mov	r0, r3
 1419 09dc FFF7FEFF 		bl	ADC_StructInit
 515:../src/main.cpp **** 
 516:../src/main.cpp **** 	/* Calibration procedure */
 517:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1420              		.loc 1 517 0
 1421 09e0 4FF0A040 		mov	r0, #1342177280
 1422 09e4 4FF00101 		mov	r1, #1
 1423 09e8 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 518:../src/main.cpp **** 
 519:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 520:../src/main.cpp **** 	int foo;
 521:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1424              		.loc 1 521 0
 1425 09ec 4FF00003 		mov	r3, #0
 1426 09f0 FB66     		str	r3, [r7, #108]
 1427 09f2 07E0     		b	.L23
 1428              	.L24:
 522:../src/main.cpp **** 	{
 523:../src/main.cpp **** 	  ++foo;
 1429              		.loc 1 523 0 discriminator 2
 1430 09f4 FB6E     		ldr	r3, [r7, #108]
 1431 09f6 03F10103 		add	r3, r3, #1
 1432 09fa FB66     		str	r3, [r7, #108]
 521:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1433              		.loc 1 521 0 discriminator 2
 1434 09fc FB6E     		ldr	r3, [r7, #108]
 1435 09fe 03F10103 		add	r3, r3, #1
 1436 0a02 FB66     		str	r3, [r7, #108]
 1437              	.L23:
 521:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1438              		.loc 1 521 0 is_stmt 0 discriminator 1
 1439 0a04 FA6E     		ldr	r2, [r7, #108]
 1440 0a06 4FF6FF13 		movw	r3, #63999
 1441 0a0a 9A42     		cmp	r2, r3
 1442 0a0c CCBF     		ite	gt
 1443 0a0e 0023     		movgt	r3, #0
 1444 0a10 0123     		movle	r3, #1
 1445 0a12 DBB2     		uxtb	r3, r3
 1446 0a14 002B     		cmp	r3, #0
 1447 0a16 EDD1     		bne	.L24
 524:../src/main.cpp **** 	}
 525:../src/main.cpp **** 
 526:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1448              		.loc 1 526 0 is_stmt 1
 1449 0a18 4FF0A040 		mov	r0, #1342177280
 1450 0a1c 4FF00001 		mov	r1, #0
 1451 0a20 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 527:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1452              		.loc 1 527 0
 1453 0a24 4FF0A040 		mov	r0, #1342177280
 1454 0a28 FFF7FEFF 		bl	ADC_StartCalibration
 528:../src/main.cpp **** 
 529:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1455              		.loc 1 529 0
 1456 0a2c 00BF     		nop
 1457              	.L25:
 1458              		.loc 1 529 0 is_stmt 0 discriminator 1
 1459 0a2e 4FF0A040 		mov	r0, #1342177280
 1460 0a32 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1461 0a36 0346     		mov	r3, r0
 1462 0a38 002B     		cmp	r3, #0
 1463 0a3a 0CBF     		ite	eq
 1464 0a3c 0023     		moveq	r3, #0
 1465 0a3e 0123     		movne	r3, #1
 1466 0a40 DBB2     		uxtb	r3, r3
 1467 0a42 002B     		cmp	r3, #0
 1468 0a44 F3D1     		bne	.L25
 530:../src/main.cpp **** 
 531:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1469              		.loc 1 531 0 is_stmt 1
 1470 0a46 4FF00003 		mov	r3, #0
 1471 0a4a BB65     		str	r3, [r7, #88]
 532:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 1472              		.loc 1 532 0
 1473 0a4c 4FF00003 		mov	r3, #0
 1474 0a50 FB65     		str	r3, [r7, #92]
 533:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1475              		.loc 1 533 0
 1476 0a52 4FF40043 		mov	r3, #32768
 1477 0a56 3B66     		str	r3, [r7, #96]
 534:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1478              		.loc 1 534 0
 1479 0a58 4FF00203 		mov	r3, #2
 1480 0a5c 7B66     		str	r3, [r7, #100]
 535:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1481              		.loc 1 535 0
 1482 0a5e 4FF00F03 		mov	r3, #15
 1483 0a62 87F86830 		strb	r3, [r7, #104]
 536:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1484              		.loc 1 536 0
 1485 0a66 07F15803 		add	r3, r7, #88
 1486 0a6a 4FF0A040 		mov	r0, #1342177280
 1487 0a6e 1946     		mov	r1, r3
 1488 0a70 FFF7FEFF 		bl	ADC_CommonInit
 537:../src/main.cpp **** 
 538:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1489              		.loc 1 538 0
 1490 0a74 4FF40053 		mov	r3, #8192
 1491 0a78 3B60     		str	r3, [r7, #0]
 539:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1492              		.loc 1 539 0
 1493 0a7a 4FF00003 		mov	r3, #0
 1494 0a7e 7B60     		str	r3, [r7, #4]
 540:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1495              		.loc 1 540 0
 1496 0a80 4FF00003 		mov	r3, #0
 1497 0a84 BB60     		str	r3, [r7, #8]
 541:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1498              		.loc 1 541 0
 1499 0a86 4FF00003 		mov	r3, #0
 1500 0a8a FB60     		str	r3, [r7, #12]
 542:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1501              		.loc 1 542 0
 1502 0a8c 4FF00003 		mov	r3, #0
 1503 0a90 3B61     		str	r3, [r7, #16]
 543:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1504              		.loc 1 543 0
 1505 0a92 4FF00003 		mov	r3, #0
 1506 0a96 7B61     		str	r3, [r7, #20]
 544:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1507              		.loc 1 544 0
 1508 0a98 4FF00003 		mov	r3, #0
 1509 0a9c BB61     		str	r3, [r7, #24]
 545:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1510              		.loc 1 545 0
 1511 0a9e 4FF00203 		mov	r3, #2
 1512 0aa2 3B77     		strb	r3, [r7, #28]
 546:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1513              		.loc 1 546 0
 1514 0aa4 3B46     		mov	r3, r7
 1515 0aa6 4FF0A040 		mov	r0, #1342177280
 1516 0aaa 1946     		mov	r1, r3
 1517 0aac FFF7FEFF 		bl	ADC_Init
 547:../src/main.cpp **** 
 548:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 549:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1518              		.loc 1 549 0
 1519 0ab0 4FF0A040 		mov	r0, #1342177280
 1520 0ab4 4FF00301 		mov	r1, #3
 1521 0ab8 4FF00102 		mov	r2, #1
 1522 0abc 4FF00703 		mov	r3, #7
 1523 0ac0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 550:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1524              		.loc 1 550 0
 1525 0ac4 4FF0A040 		mov	r0, #1342177280
 1526 0ac8 4FF00401 		mov	r1, #4
 1527 0acc 4FF00202 		mov	r2, #2
 1528 0ad0 4FF00703 		mov	r3, #7
 1529 0ad4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 551:../src/main.cpp **** 
 552:../src/main.cpp **** 	/* Enable ADC1 */
 553:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1530              		.loc 1 553 0
 1531 0ad8 4FF0A040 		mov	r0, #1342177280
 1532 0adc 4FF00101 		mov	r1, #1
 1533 0ae0 FFF7FEFF 		bl	ADC_Cmd
 554:../src/main.cpp **** 
 555:../src/main.cpp **** 	/* wait for ADRDY */
 556:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1534              		.loc 1 556 0
 1535 0ae4 00BF     		nop
 1536              	.L26:
 1537              		.loc 1 556 0 is_stmt 0 discriminator 1
 1538 0ae6 4FF0A040 		mov	r0, #1342177280
 1539 0aea 4FF00101 		mov	r1, #1
 1540 0aee FFF7FEFF 		bl	ADC_GetFlagStatus
 1541 0af2 0346     		mov	r3, r0
 1542 0af4 002B     		cmp	r3, #0
 1543 0af6 14BF     		ite	ne
 1544 0af8 0023     		movne	r3, #0
 1545 0afa 0123     		moveq	r3, #1
 1546 0afc DBB2     		uxtb	r3, r3
 1547 0afe 002B     		cmp	r3, #0
 1548 0b00 F1D1     		bne	.L26
 557:../src/main.cpp **** 
 558:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 559:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1549              		.loc 1 559 0 is_stmt 1
 1550 0b02 4FF0A040 		mov	r0, #1342177280
 1551 0b06 FFF7FEFF 		bl	ADC_StartConversion
 560:../src/main.cpp **** 
 561:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1552              		.loc 1 561 0
 1553 0b0a 4FF00100 		mov	r0, #1
 1554 0b0e 4FF00101 		mov	r1, #1
 1555 0b12 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 562:../src/main.cpp **** 
 563:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 564:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1556              		.loc 1 564 0
 1557 0b16 07F12003 		add	r3, r7, #32
 1558 0b1a 1846     		mov	r0, r3
 1559 0b1c FFF7FEFF 		bl	DMA_StructInit
 565:../src/main.cpp **** 
 566:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1560              		.loc 1 566 0
 1561 0b20 4FF00800 		mov	r0, #8
 1562 0b24 C4F20200 		movt	r0, 16386
 1563 0b28 FFF7FEFF 		bl	DMA_DeInit
 567:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1564              		.loc 1 567 0
 1565 0b2c 4FF04003 		mov	r3, #64
 1566 0b30 C5F20003 		movt	r3, 20480
 1567 0b34 3B62     		str	r3, [r7, #32]
 568:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1568              		.loc 1 568 0
 1569 0b36 40F20003 		movw	r3, #:lower16:adcData
 1570 0b3a C0F20003 		movt	r3, #:upper16:adcData
 1571 0b3e 7B62     		str	r3, [r7, #36]
 569:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1572              		.loc 1 569 0
 1573 0b40 4FF00003 		mov	r3, #0
 1574 0b44 BB62     		str	r3, [r7, #40]
 570:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1575              		.loc 1 570 0
 1576 0b46 4FF00203 		mov	r3, #2
 1577 0b4a BB85     		strh	r3, [r7, #44]	@ movhi
 571:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1578              		.loc 1 571 0
 1579 0b4c 4FF00003 		mov	r3, #0
 1580 0b50 3B63     		str	r3, [r7, #48]
 572:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1581              		.loc 1 572 0
 1582 0b52 4FF08003 		mov	r3, #128
 1583 0b56 7B63     		str	r3, [r7, #52]
 573:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1584              		.loc 1 573 0
 1585 0b58 4FF40073 		mov	r3, #512
 1586 0b5c BB63     		str	r3, [r7, #56]
 574:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1587              		.loc 1 574 0
 1588 0b5e 4FF40063 		mov	r3, #2048
 1589 0b62 FB63     		str	r3, [r7, #60]
 575:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1590              		.loc 1 575 0
 1591 0b64 4FF02003 		mov	r3, #32
 1592 0b68 3B64     		str	r3, [r7, #64]
 576:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1593              		.loc 1 576 0
 1594 0b6a 4FF40053 		mov	r3, #8192
 1595 0b6e 7B64     		str	r3, [r7, #68]
 577:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1596              		.loc 1 577 0
 1597 0b70 4FF00003 		mov	r3, #0
 1598 0b74 BB64     		str	r3, [r7, #72]
 578:../src/main.cpp **** 
 579:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1599              		.loc 1 579 0
 1600 0b76 07F12003 		add	r3, r7, #32
 1601 0b7a 4FF00800 		mov	r0, #8
 1602 0b7e C4F20200 		movt	r0, 16386
 1603 0b82 1946     		mov	r1, r3
 1604 0b84 FFF7FEFF 		bl	DMA_Init
 580:../src/main.cpp **** 
 581:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 582:../src/main.cpp **** 
 583:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1605              		.loc 1 583 0
 1606 0b88 4FF00B03 		mov	r3, #11
 1607 0b8c 87F84C30 		strb	r3, [r7, #76]
 584:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1608              		.loc 1 584 0
 1609 0b90 4FF00203 		mov	r3, #2
 1610 0b94 87F84D30 		strb	r3, [r7, #77]
 585:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1611              		.loc 1 585 0
 1612 0b98 4FF00003 		mov	r3, #0
 1613 0b9c 87F84E30 		strb	r3, [r7, #78]
 586:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1614              		.loc 1 586 0
 1615 0ba0 4FF00103 		mov	r3, #1
 1616 0ba4 87F84F30 		strb	r3, [r7, #79]
 587:../src/main.cpp **** 
 588:../src/main.cpp **** 	NVIC_Init(&nv);
 1617              		.loc 1 588 0
 1618 0ba8 07F14C03 		add	r3, r7, #76
 1619 0bac 1846     		mov	r0, r3
 1620 0bae FFF7FEFF 		bl	NVIC_Init
 589:../src/main.cpp **** 
 590:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1621              		.loc 1 590 0
 1622 0bb2 4FF00800 		mov	r0, #8
 1623 0bb6 C4F20200 		movt	r0, 16386
 1624 0bba 4FF00201 		mov	r1, #2
 1625 0bbe 4FF00102 		mov	r2, #1
 1626 0bc2 FFF7FEFF 		bl	DMA_ITConfig
 591:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1627              		.loc 1 591 0
 1628 0bc6 4FF00800 		mov	r0, #8
 1629 0bca C4F20200 		movt	r0, 16386
 1630 0bce 4FF00101 		mov	r1, #1
 1631 0bd2 FFF7FEFF 		bl	DMA_Cmd
 592:../src/main.cpp **** 
 593:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1632              		.loc 1 593 0
 1633 0bd6 4FF0A040 		mov	r0, #1342177280
 1634 0bda 4FF00201 		mov	r1, #2
 1635 0bde FFF7FEFF 		bl	ADC_DMAConfig
 594:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1636              		.loc 1 594 0
 1637 0be2 4FF0A040 		mov	r0, #1342177280
 1638 0be6 4FF00101 		mov	r1, #1
 1639 0bea FFF7FEFF 		bl	ADC_DMACmd
 1640              	.LBE10:
 595:../src/main.cpp **** }
 1641              		.loc 1 595 0
 1642 0bee 07F17007 		add	r7, r7, #112
 1643 0bf2 BD46     		mov	sp, r7
 1644 0bf4 80BD     		pop	{r7, pc}
 1645              		.cfi_endproc
 1646              	.LFE120:
 1648 0bf6 00BF     		.align	2
 1649              		.global	_Z13adc2_init_DMAv
 1650              		.thumb
 1651              		.thumb_func
 1653              	_Z13adc2_init_DMAv:
 1654              	.LFB121:
 596:../src/main.cpp **** 
 597:../src/main.cpp **** void adc2_init_DMA(void)
 598:../src/main.cpp **** {
 1655              		.loc 1 598 0
 1656              		.cfi_startproc
 1657              		@ args = 0, pretend = 0, frame = 112
 1658              		@ frame_needed = 1, uses_anonymous_args = 0
 1659 0bf8 80B5     		push	{r7, lr}
 1660              	.LCFI30:
 1661              		.cfi_def_cfa_offset 8
 1662              		.cfi_offset 7, -8
 1663              		.cfi_offset 14, -4
 1664 0bfa 9CB0     		sub	sp, sp, #112
 1665              	.LCFI31:
 1666              		.cfi_def_cfa_offset 120
 1667 0bfc 00AF     		add	r7, sp, #0
 1668              	.LCFI32:
 1669              		.cfi_def_cfa_register 7
 1670              	.LBB11:
 599:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 600:../src/main.cpp **** 
 601:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 602:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 603:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 604:../src/main.cpp **** 
 605:../src/main.cpp **** 	/* Configure the ADC clock */
 606:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1671              		.loc 1 606 0
 1672 0bfe 4FF48870 		mov	r0, #272
 1673 0c02 FFF7FEFF 		bl	RCC_ADCCLKConfig
 607:../src/main.cpp **** 	/* Enable ADC2 clock */
 608:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1674              		.loc 1 608 0
 1675 0c06 4FF08050 		mov	r0, #268435456
 1676 0c0a 4FF00101 		mov	r1, #1
 1677 0c0e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 609:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 610:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1678              		.loc 1 610 0
 1679 0c12 4FF46020 		mov	r0, #917504
 1680 0c16 4FF00101 		mov	r1, #1
 1681 0c1a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 611:../src/main.cpp **** 
 612:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 613:../src/main.cpp **** 
 614:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1682              		.loc 1 614 0
 1683 0c1e 07F15003 		add	r3, r7, #80
 1684 0c22 1846     		mov	r0, r3
 1685 0c24 FFF7FEFF 		bl	GPIO_StructInit
 615:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1686              		.loc 1 615 0
 1687 0c28 4FF01003 		mov	r3, #16
 1688 0c2c 3B65     		str	r3, [r7, #80]
 616:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1689              		.loc 1 616 0
 1690 0c2e 4FF00303 		mov	r3, #3
 1691 0c32 87F85430 		strb	r3, [r7, #84]
 617:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1692              		.loc 1 617 0
 1693 0c36 4FF00003 		mov	r3, #0
 1694 0c3a 87F85730 		strb	r3, [r7, #87]
 618:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1695              		.loc 1 618 0
 1696 0c3e 4FF00303 		mov	r3, #3
 1697 0c42 87F85530 		strb	r3, [r7, #85]
 619:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1698              		.loc 1 619 0
 1699 0c46 07F15003 		add	r3, r7, #80
 1700 0c4a 4FF09040 		mov	r0, #1207959552
 1701 0c4e 1946     		mov	r1, r3
 1702 0c50 FFF7FEFF 		bl	GPIO_Init
 620:../src/main.cpp **** 
 621:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1703              		.loc 1 621 0
 1704 0c54 07F15003 		add	r3, r7, #80
 1705 0c58 1846     		mov	r0, r3
 1706 0c5a FFF7FEFF 		bl	GPIO_StructInit
 622:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1707              		.loc 1 622 0
 1708 0c5e 4FF00403 		mov	r3, #4
 1709 0c62 3B65     		str	r3, [r7, #80]
 623:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1710              		.loc 1 623 0
 1711 0c64 4FF00303 		mov	r3, #3
 1712 0c68 87F85430 		strb	r3, [r7, #84]
 624:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1713              		.loc 1 624 0
 1714 0c6c 4FF00003 		mov	r3, #0
 1715 0c70 87F85730 		strb	r3, [r7, #87]
 625:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1716              		.loc 1 625 0
 1717 0c74 07F15003 		add	r3, r7, #80
 1718 0c78 4FF48060 		mov	r0, #1024
 1719 0c7c C4F60000 		movt	r0, 18432
 1720 0c80 1946     		mov	r1, r3
 1721 0c82 FFF7FEFF 		bl	GPIO_Init
 626:../src/main.cpp **** 
 627:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1722              		.loc 1 627 0
 1723 0c86 07F15003 		add	r3, r7, #80
 1724 0c8a 1846     		mov	r0, r3
 1725 0c8c FFF7FEFF 		bl	GPIO_StructInit
 628:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 1726              		.loc 1 628 0
 1727 0c90 4FF03003 		mov	r3, #48
 1728 0c94 3B65     		str	r3, [r7, #80]
 629:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1729              		.loc 1 629 0
 1730 0c96 4FF00303 		mov	r3, #3
 1731 0c9a 87F85430 		strb	r3, [r7, #84]
 630:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1732              		.loc 1 630 0
 1733 0c9e 4FF00003 		mov	r3, #0
 1734 0ca2 87F85730 		strb	r3, [r7, #87]
 631:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 1735              		.loc 1 631 0
 1736 0ca6 07F15003 		add	r3, r7, #80
 1737 0caa 4FF40060 		mov	r0, #2048
 1738 0cae C4F60000 		movt	r0, 18432
 1739 0cb2 1946     		mov	r1, r3
 1740 0cb4 FFF7FEFF 		bl	GPIO_Init
 632:../src/main.cpp **** 
 633:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1741              		.loc 1 633 0
 1742 0cb8 3B46     		mov	r3, r7
 1743 0cba 1846     		mov	r0, r3
 1744 0cbc FFF7FEFF 		bl	ADC_StructInit
 634:../src/main.cpp **** 
 635:../src/main.cpp **** 	/* Calibration procedure */
 636:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 1745              		.loc 1 636 0
 1746 0cc0 4FF48070 		mov	r0, #256
 1747 0cc4 C5F20000 		movt	r0, 20480
 1748 0cc8 4FF00101 		mov	r1, #1
 1749 0ccc FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 637:../src/main.cpp **** 
 638:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 639:../src/main.cpp **** 	int foo;
 640:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1750              		.loc 1 640 0
 1751 0cd0 4FF00003 		mov	r3, #0
 1752 0cd4 FB66     		str	r3, [r7, #108]
 1753 0cd6 07E0     		b	.L28
 1754              	.L29:
 641:../src/main.cpp **** 	{
 642:../src/main.cpp **** 	  ++foo;
 1755              		.loc 1 642 0 discriminator 2
 1756 0cd8 FB6E     		ldr	r3, [r7, #108]
 1757 0cda 03F10103 		add	r3, r3, #1
 1758 0cde FB66     		str	r3, [r7, #108]
 640:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1759              		.loc 1 640 0 discriminator 2
 1760 0ce0 FB6E     		ldr	r3, [r7, #108]
 1761 0ce2 03F10103 		add	r3, r3, #1
 1762 0ce6 FB66     		str	r3, [r7, #108]
 1763              	.L28:
 640:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1764              		.loc 1 640 0 is_stmt 0 discriminator 1
 1765 0ce8 FA6E     		ldr	r2, [r7, #108]
 1766 0cea 4FF6FF13 		movw	r3, #63999
 1767 0cee 9A42     		cmp	r2, r3
 1768 0cf0 CCBF     		ite	gt
 1769 0cf2 0023     		movgt	r3, #0
 1770 0cf4 0123     		movle	r3, #1
 1771 0cf6 DBB2     		uxtb	r3, r3
 1772 0cf8 002B     		cmp	r3, #0
 1773 0cfa EDD1     		bne	.L29
 643:../src/main.cpp **** 	}
 644:../src/main.cpp **** 
 645:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 1774              		.loc 1 645 0 is_stmt 1
 1775 0cfc 4FF48070 		mov	r0, #256
 1776 0d00 C5F20000 		movt	r0, 20480
 1777 0d04 4FF00001 		mov	r1, #0
 1778 0d08 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 646:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 1779              		.loc 1 646 0
 1780 0d0c 4FF48070 		mov	r0, #256
 1781 0d10 C5F20000 		movt	r0, 20480
 1782 0d14 FFF7FEFF 		bl	ADC_StartCalibration
 647:../src/main.cpp **** 
 648:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 1783              		.loc 1 648 0
 1784 0d18 00BF     		nop
 1785              	.L30:
 1786              		.loc 1 648 0 is_stmt 0 discriminator 1
 1787 0d1a 4FF48070 		mov	r0, #256
 1788 0d1e C5F20000 		movt	r0, 20480
 1789 0d22 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1790 0d26 0346     		mov	r3, r0
 1791 0d28 002B     		cmp	r3, #0
 1792 0d2a 0CBF     		ite	eq
 1793 0d2c 0023     		moveq	r3, #0
 1794 0d2e 0123     		movne	r3, #1
 1795 0d30 DBB2     		uxtb	r3, r3
 1796 0d32 002B     		cmp	r3, #0
 1797 0d34 F1D1     		bne	.L30
 649:../src/main.cpp **** 
 650:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1798              		.loc 1 650 0 is_stmt 1
 1799 0d36 4FF00003 		mov	r3, #0
 1800 0d3a BB65     		str	r3, [r7, #88]
 651:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1801              		.loc 1 651 0
 1802 0d3c 4FF00003 		mov	r3, #0
 1803 0d40 FB65     		str	r3, [r7, #92]
 652:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1804              		.loc 1 652 0
 1805 0d42 4FF40043 		mov	r3, #32768
 1806 0d46 3B66     		str	r3, [r7, #96]
 653:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1807              		.loc 1 653 0
 1808 0d48 4FF00203 		mov	r3, #2
 1809 0d4c 7B66     		str	r3, [r7, #100]
 654:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 1810              		.loc 1 654 0
 1811 0d4e 4FF00F03 		mov	r3, #15
 1812 0d52 87F86830 		strb	r3, [r7, #104]
 655:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 1813              		.loc 1 655 0
 1814 0d56 07F15803 		add	r3, r7, #88
 1815 0d5a 4FF48070 		mov	r0, #256
 1816 0d5e C5F20000 		movt	r0, 20480
 1817 0d62 1946     		mov	r1, r3
 1818 0d64 FFF7FEFF 		bl	ADC_CommonInit
 656:../src/main.cpp **** 
 657:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1819              		.loc 1 657 0
 1820 0d68 4FF40053 		mov	r3, #8192
 1821 0d6c 3B60     		str	r3, [r7, #0]
 658:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1822              		.loc 1 658 0
 1823 0d6e 4FF00003 		mov	r3, #0
 1824 0d72 7B60     		str	r3, [r7, #4]
 659:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1825              		.loc 1 659 0
 1826 0d74 4FF00003 		mov	r3, #0
 1827 0d78 BB60     		str	r3, [r7, #8]
 660:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1828              		.loc 1 660 0
 1829 0d7a 4FF00003 		mov	r3, #0
 1830 0d7e FB60     		str	r3, [r7, #12]
 661:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1831              		.loc 1 661 0
 1832 0d80 4FF00003 		mov	r3, #0
 1833 0d84 3B61     		str	r3, [r7, #16]
 662:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1834              		.loc 1 662 0
 1835 0d86 4FF00003 		mov	r3, #0
 1836 0d8a 7B61     		str	r3, [r7, #20]
 663:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1837              		.loc 1 663 0
 1838 0d8c 4FF00003 		mov	r3, #0
 1839 0d90 BB61     		str	r3, [r7, #24]
 664:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 1840              		.loc 1 664 0
 1841 0d92 4FF00403 		mov	r3, #4
 1842 0d96 3B77     		strb	r3, [r7, #28]
 665:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 1843              		.loc 1 665 0
 1844 0d98 3B46     		mov	r3, r7
 1845 0d9a 4FF48070 		mov	r0, #256
 1846 0d9e C5F20000 		movt	r0, 20480
 1847 0da2 1946     		mov	r1, r3
 1848 0da4 FFF7FEFF 		bl	ADC_Init
 666:../src/main.cpp **** 
 667:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 668:../src/main.cpp **** 
 669:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1849              		.loc 1 669 0
 1850 0da8 4FF48070 		mov	r0, #256
 1851 0dac C5F20000 		movt	r0, 20480
 1852 0db0 4FF00101 		mov	r1, #1
 1853 0db4 4FF00102 		mov	r2, #1
 1854 0db8 4FF00703 		mov	r3, #7
 1855 0dbc FFF7FEFF 		bl	ADC_RegularChannelConfig
 670:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1856              		.loc 1 670 0
 1857 0dc0 4FF48070 		mov	r0, #256
 1858 0dc4 C5F20000 		movt	r0, 20480
 1859 0dc8 4FF00501 		mov	r1, #5
 1860 0dcc 4FF00202 		mov	r2, #2
 1861 0dd0 4FF00703 		mov	r3, #7
 1862 0dd4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 671:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 1863              		.loc 1 671 0
 1864 0dd8 4FF48070 		mov	r0, #256
 1865 0ddc C5F20000 		movt	r0, 20480
 1866 0de0 4FF00B01 		mov	r1, #11
 1867 0de4 4FF00302 		mov	r2, #3
 1868 0de8 4FF00703 		mov	r3, #7
 1869 0dec FFF7FEFF 		bl	ADC_RegularChannelConfig
 672:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 1870              		.loc 1 672 0
 1871 0df0 4FF48070 		mov	r0, #256
 1872 0df4 C5F20000 		movt	r0, 20480
 1873 0df8 4FF00C01 		mov	r1, #12
 1874 0dfc 4FF00402 		mov	r2, #4
 1875 0e00 4FF00703 		mov	r3, #7
 1876 0e04 FFF7FEFF 		bl	ADC_RegularChannelConfig
 673:../src/main.cpp **** 
 674:../src/main.cpp **** 	/* Enable ADC2 */
 675:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 1877              		.loc 1 675 0
 1878 0e08 4FF48070 		mov	r0, #256
 1879 0e0c C5F20000 		movt	r0, 20480
 1880 0e10 4FF00101 		mov	r1, #1
 1881 0e14 FFF7FEFF 		bl	ADC_Cmd
 676:../src/main.cpp **** 
 677:../src/main.cpp **** 	/* wait for ADRDY */
 678:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 1882              		.loc 1 678 0
 1883 0e18 00BF     		nop
 1884              	.L31:
 1885              		.loc 1 678 0 is_stmt 0 discriminator 1
 1886 0e1a 4FF48070 		mov	r0, #256
 1887 0e1e C5F20000 		movt	r0, 20480
 1888 0e22 4FF00101 		mov	r1, #1
 1889 0e26 FFF7FEFF 		bl	ADC_GetFlagStatus
 1890 0e2a 0346     		mov	r3, r0
 1891 0e2c 002B     		cmp	r3, #0
 1892 0e2e 14BF     		ite	ne
 1893 0e30 0023     		movne	r3, #0
 1894 0e32 0123     		moveq	r3, #1
 1895 0e34 DBB2     		uxtb	r3, r3
 1896 0e36 002B     		cmp	r3, #0
 1897 0e38 EFD1     		bne	.L31
 679:../src/main.cpp **** 
 680:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 681:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 1898              		.loc 1 681 0 is_stmt 1
 1899 0e3a 4FF48070 		mov	r0, #256
 1900 0e3e C5F20000 		movt	r0, 20480
 1901 0e42 FFF7FEFF 		bl	ADC_StartConversion
 682:../src/main.cpp **** 
 683:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 1902              		.loc 1 683 0
 1903 0e46 4FF00200 		mov	r0, #2
 1904 0e4a 4FF00101 		mov	r1, #1
 1905 0e4e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 684:../src/main.cpp **** 
 685:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 686:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1906              		.loc 1 686 0
 1907 0e52 07F12003 		add	r3, r7, #32
 1908 0e56 1846     		mov	r0, r3
 1909 0e58 FFF7FEFF 		bl	DMA_StructInit
 687:../src/main.cpp **** 
 688:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 1910              		.loc 1 688 0
 1911 0e5c 4FF48160 		mov	r0, #1032
 1912 0e60 C4F20200 		movt	r0, 16386
 1913 0e64 FFF7FEFF 		bl	DMA_DeInit
 689:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 1914              		.loc 1 689 0
 1915 0e68 4FF4A073 		mov	r3, #320
 1916 0e6c C5F20003 		movt	r3, 20480
 1917 0e70 3B62     		str	r3, [r7, #32]
 690:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 1918              		.loc 1 690 0
 1919 0e72 40F20003 		movw	r3, #:lower16:adc2_data
 1920 0e76 C0F20003 		movt	r3, #:upper16:adc2_data
 1921 0e7a 7B62     		str	r3, [r7, #36]
 691:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1922              		.loc 1 691 0
 1923 0e7c 4FF00003 		mov	r3, #0
 1924 0e80 BB62     		str	r3, [r7, #40]
 692:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 1925              		.loc 1 692 0
 1926 0e82 4FF00403 		mov	r3, #4
 1927 0e86 BB85     		strh	r3, [r7, #44]	@ movhi
 693:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1928              		.loc 1 693 0
 1929 0e88 4FF00003 		mov	r3, #0
 1930 0e8c 3B63     		str	r3, [r7, #48]
 694:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1931              		.loc 1 694 0
 1932 0e8e 4FF08003 		mov	r3, #128
 1933 0e92 7B63     		str	r3, [r7, #52]
 695:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1934              		.loc 1 695 0
 1935 0e94 4FF40073 		mov	r3, #512
 1936 0e98 BB63     		str	r3, [r7, #56]
 696:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1937              		.loc 1 696 0
 1938 0e9a 4FF40063 		mov	r3, #2048
 1939 0e9e FB63     		str	r3, [r7, #60]
 697:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1940              		.loc 1 697 0
 1941 0ea0 4FF02003 		mov	r3, #32
 1942 0ea4 3B64     		str	r3, [r7, #64]
 698:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1943              		.loc 1 698 0
 1944 0ea6 4FF40053 		mov	r3, #8192
 1945 0eaa 7B64     		str	r3, [r7, #68]
 699:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1946              		.loc 1 699 0
 1947 0eac 4FF00003 		mov	r3, #0
 1948 0eb0 BB64     		str	r3, [r7, #72]
 700:../src/main.cpp **** 
 701:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 1949              		.loc 1 701 0
 1950 0eb2 07F12003 		add	r3, r7, #32
 1951 0eb6 4FF48160 		mov	r0, #1032
 1952 0eba C4F20200 		movt	r0, 16386
 1953 0ebe 1946     		mov	r1, r3
 1954 0ec0 FFF7FEFF 		bl	DMA_Init
 702:../src/main.cpp **** 
 703:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 704:../src/main.cpp **** 
 705:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 1955              		.loc 1 705 0
 1956 0ec4 4FF03803 		mov	r3, #56
 1957 0ec8 87F84C30 		strb	r3, [r7, #76]
 706:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1958              		.loc 1 706 0
 1959 0ecc 4FF00203 		mov	r3, #2
 1960 0ed0 87F84D30 		strb	r3, [r7, #77]
 707:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1961              		.loc 1 707 0
 1962 0ed4 4FF00003 		mov	r3, #0
 1963 0ed8 87F84E30 		strb	r3, [r7, #78]
 708:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1964              		.loc 1 708 0
 1965 0edc 4FF00103 		mov	r3, #1
 1966 0ee0 87F84F30 		strb	r3, [r7, #79]
 709:../src/main.cpp **** 
 710:../src/main.cpp **** 	NVIC_Init(&nv);
 1967              		.loc 1 710 0
 1968 0ee4 07F14C03 		add	r3, r7, #76
 1969 0ee8 1846     		mov	r0, r3
 1970 0eea FFF7FEFF 		bl	NVIC_Init
 711:../src/main.cpp **** 
 712:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 1971              		.loc 1 712 0
 1972 0eee 4FF48160 		mov	r0, #1032
 1973 0ef2 C4F20200 		movt	r0, 16386
 1974 0ef6 4FF00201 		mov	r1, #2
 1975 0efa 4FF00102 		mov	r2, #1
 1976 0efe FFF7FEFF 		bl	DMA_ITConfig
 713:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 1977              		.loc 1 713 0
 1978 0f02 4FF48160 		mov	r0, #1032
 1979 0f06 C4F20200 		movt	r0, 16386
 1980 0f0a 4FF00101 		mov	r1, #1
 1981 0f0e FFF7FEFF 		bl	DMA_Cmd
 714:../src/main.cpp **** 
 715:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 1982              		.loc 1 715 0
 1983 0f12 4FF48070 		mov	r0, #256
 1984 0f16 C5F20000 		movt	r0, 20480
 1985 0f1a 4FF00201 		mov	r1, #2
 1986 0f1e FFF7FEFF 		bl	ADC_DMAConfig
 716:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 1987              		.loc 1 716 0
 1988 0f22 4FF48070 		mov	r0, #256
 1989 0f26 C5F20000 		movt	r0, 20480
 1990 0f2a 4FF00101 		mov	r1, #1
 1991 0f2e FFF7FEFF 		bl	ADC_DMACmd
 1992              	.LBE11:
 717:../src/main.cpp **** }
 1993              		.loc 1 717 0
 1994 0f32 07F17007 		add	r7, r7, #112
 1995 0f36 BD46     		mov	sp, r7
 1996 0f38 80BD     		pop	{r7, pc}
 1997              		.cfi_endproc
 1998              	.LFE121:
 2000 0f3a 00BF     		.align	2
 2001              		.global	_Z21battery_watchdog_initv
 2002              		.thumb
 2003              		.thumb_func
 2005              	_Z21battery_watchdog_initv:
 2006              	.LFB122:
 718:../src/main.cpp **** 
 719:../src/main.cpp **** void battery_watchdog_init(void)
 720:../src/main.cpp **** {
 2007              		.loc 1 720 0
 2008              		.cfi_startproc
 2009              		@ args = 0, pretend = 0, frame = 72
 2010              		@ frame_needed = 1, uses_anonymous_args = 0
 2011 0f3c 80B5     		push	{r7, lr}
 2012              	.LCFI33:
 2013              		.cfi_def_cfa_offset 8
 2014              		.cfi_offset 7, -8
 2015              		.cfi_offset 14, -4
 2016 0f3e 92B0     		sub	sp, sp, #72
 2017              	.LCFI34:
 2018              		.cfi_def_cfa_offset 80
 2019 0f40 00AF     		add	r7, sp, #0
 2020              	.LCFI35:
 2021              		.cfi_def_cfa_register 7
 2022              	.LBB12:
 721:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 722:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 723:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 724:../src/main.cpp **** 	/* Configure the ADC clock */
 725:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 2023              		.loc 1 725 0
 2024 0f42 4FF45050 		mov	r0, #13312
 2025 0f46 C1F20000 		movt	r0, 4096
 2026 0f4a FFF7FEFF 		bl	RCC_ADCCLKConfig
 726:../src/main.cpp **** 
 727:../src/main.cpp **** 	/* Enable ADC1 clock */
 728:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 2027              		.loc 1 728 0
 2028 0f4e 4FF00050 		mov	r0, #536870912
 2029 0f52 4FF00101 		mov	r1, #1
 2030 0f56 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 729:../src/main.cpp **** 	/* ADC Channel configuration */
 730:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 731:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 2031              		.loc 1 731 0
 2032 0f5a 4FF41010 		mov	r0, #2359296
 2033 0f5e 4FF00101 		mov	r1, #1
 2034 0f62 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 732:../src/main.cpp **** 
 733:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 734:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2035              		.loc 1 734 0
 2036 0f66 07F12803 		add	r3, r7, #40
 2037 0f6a 1846     		mov	r0, r3
 2038 0f6c FFF7FEFF 		bl	GPIO_StructInit
 735:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 2039              		.loc 1 735 0
 2040 0f70 42F20203 		movw	r3, #8194
 2041 0f74 BB62     		str	r3, [r7, #40]
 736:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2042              		.loc 1 736 0
 2043 0f76 4FF00303 		mov	r3, #3
 2044 0f7a 87F82C30 		strb	r3, [r7, #44]
 737:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2045              		.loc 1 737 0
 2046 0f7e 4FF00003 		mov	r3, #0
 2047 0f82 87F82F30 		strb	r3, [r7, #47]
 738:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2048              		.loc 1 738 0
 2049 0f86 07F12803 		add	r3, r7, #40
 2050 0f8a 4FF48060 		mov	r0, #1024
 2051 0f8e C4F60000 		movt	r0, 18432
 2052 0f92 1946     		mov	r1, r3
 2053 0f94 FFF7FEFF 		bl	GPIO_Init
 739:../src/main.cpp **** /*
 740:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 741:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 742:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 743:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 744:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 745:../src/main.cpp **** */
 746:../src/main.cpp **** 
 747:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2054              		.loc 1 747 0
 2055 0f98 07F10403 		add	r3, r7, #4
 2056 0f9c 1846     		mov	r0, r3
 2057 0f9e FFF7FEFF 		bl	ADC_StructInit
 748:../src/main.cpp **** 
 749:../src/main.cpp **** 	/* Calibration procedure */
 750:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 2058              		.loc 1 750 0
 2059 0fa2 4FF48060 		mov	r0, #1024
 2060 0fa6 C5F20000 		movt	r0, 20480
 2061 0faa 4FF00101 		mov	r1, #1
 2062 0fae FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 751:../src/main.cpp **** 
 752:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 753:../src/main.cpp **** 	int foo;
 754:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2063              		.loc 1 754 0
 2064 0fb2 4FF00003 		mov	r3, #0
 2065 0fb6 7B64     		str	r3, [r7, #68]
 2066 0fb8 07E0     		b	.L33
 2067              	.L34:
 755:../src/main.cpp **** 	{
 756:../src/main.cpp **** 	  ++foo;
 2068              		.loc 1 756 0 discriminator 2
 2069 0fba 7B6C     		ldr	r3, [r7, #68]
 2070 0fbc 03F10103 		add	r3, r3, #1
 2071 0fc0 7B64     		str	r3, [r7, #68]
 754:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2072              		.loc 1 754 0 discriminator 2
 2073 0fc2 7B6C     		ldr	r3, [r7, #68]
 2074 0fc4 03F10103 		add	r3, r3, #1
 2075 0fc8 7B64     		str	r3, [r7, #68]
 2076              	.L33:
 754:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2077              		.loc 1 754 0 is_stmt 0 discriminator 1
 2078 0fca 7A6C     		ldr	r2, [r7, #68]
 2079 0fcc 47F6FF43 		movw	r3, #31999
 2080 0fd0 9A42     		cmp	r2, r3
 2081 0fd2 CCBF     		ite	gt
 2082 0fd4 0023     		movgt	r3, #0
 2083 0fd6 0123     		movle	r3, #1
 2084 0fd8 DBB2     		uxtb	r3, r3
 2085 0fda 002B     		cmp	r3, #0
 2086 0fdc EDD1     		bne	.L34
 757:../src/main.cpp **** 	}
 758:../src/main.cpp **** 
 759:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 2087              		.loc 1 759 0 is_stmt 1
 2088 0fde 4FF48060 		mov	r0, #1024
 2089 0fe2 C5F20000 		movt	r0, 20480
 2090 0fe6 4FF00001 		mov	r1, #0
 2091 0fea FFF7FEFF 		bl	ADC_SelectCalibrationMode
 760:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 2092              		.loc 1 760 0
 2093 0fee 4FF48060 		mov	r0, #1024
 2094 0ff2 C5F20000 		movt	r0, 20480
 2095 0ff6 FFF7FEFF 		bl	ADC_StartCalibration
 761:../src/main.cpp **** 
 762:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 2096              		.loc 1 762 0
 2097 0ffa 00BF     		nop
 2098              	.L35:
 2099              		.loc 1 762 0 is_stmt 0 discriminator 1
 2100 0ffc 4FF48060 		mov	r0, #1024
 2101 1000 C5F20000 		movt	r0, 20480
 2102 1004 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2103 1008 0346     		mov	r3, r0
 2104 100a 002B     		cmp	r3, #0
 2105 100c 0CBF     		ite	eq
 2106 100e 0023     		moveq	r3, #0
 2107 1010 0123     		movne	r3, #1
 2108 1012 DBB2     		uxtb	r3, r3
 2109 1014 002B     		cmp	r3, #0
 2110 1016 F1D1     		bne	.L35
 763:../src/main.cpp **** 
 764:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2111              		.loc 1 764 0 is_stmt 1
 2112 1018 4FF00003 		mov	r3, #0
 2113 101c 3B63     		str	r3, [r7, #48]
 765:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 2114              		.loc 1 765 0
 2115 101e 4FF44033 		mov	r3, #196608
 2116 1022 7B63     		str	r3, [r7, #52]
 766:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2117              		.loc 1 766 0
 2118 1024 4FF00003 		mov	r3, #0
 2119 1028 BB63     		str	r3, [r7, #56]
 767:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2120              		.loc 1 767 0
 2121 102a 4FF00003 		mov	r3, #0
 2122 102e FB63     		str	r3, [r7, #60]
 768:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2123              		.loc 1 768 0
 2124 1030 4FF00003 		mov	r3, #0
 2125 1034 87F84030 		strb	r3, [r7, #64]
 769:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 2126              		.loc 1 769 0
 2127 1038 07F13003 		add	r3, r7, #48
 2128 103c 4FF48060 		mov	r0, #1024
 2129 1040 C5F20000 		movt	r0, 20480
 2130 1044 1946     		mov	r1, r3
 2131 1046 FFF7FEFF 		bl	ADC_CommonInit
 770:../src/main.cpp **** 
 771:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2132              		.loc 1 771 0
 2133 104a 4FF40053 		mov	r3, #8192
 2134 104e 7B60     		str	r3, [r7, #4]
 772:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2135              		.loc 1 772 0
 2136 1050 4FF00003 		mov	r3, #0
 2137 1054 BB60     		str	r3, [r7, #8]
 773:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2138              		.loc 1 773 0
 2139 1056 4FF00003 		mov	r3, #0
 2140 105a FB60     		str	r3, [r7, #12]
 774:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2141              		.loc 1 774 0
 2142 105c 4FF00003 		mov	r3, #0
 2143 1060 3B61     		str	r3, [r7, #16]
 775:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2144              		.loc 1 775 0
 2145 1062 4FF00003 		mov	r3, #0
 2146 1066 7B61     		str	r3, [r7, #20]
 776:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2147              		.loc 1 776 0
 2148 1068 4FF00003 		mov	r3, #0
 2149 106c BB61     		str	r3, [r7, #24]
 777:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2150              		.loc 1 777 0
 2151 106e 4FF00003 		mov	r3, #0
 2152 1072 FB61     		str	r3, [r7, #28]
 778:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2153              		.loc 1 778 0
 2154 1074 4FF00203 		mov	r3, #2
 2155 1078 87F82030 		strb	r3, [r7, #32]
 779:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 2156              		.loc 1 779 0
 2157 107c 07F10403 		add	r3, r7, #4
 2158 1080 4FF48060 		mov	r0, #1024
 2159 1084 C5F20000 		movt	r0, 20480
 2160 1088 1946     		mov	r1, r3
 2161 108a FFF7FEFF 		bl	ADC_Init
 780:../src/main.cpp **** 
 781:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 782:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2162              		.loc 1 782 0
 2163 108e 4FF48060 		mov	r0, #1024
 2164 1092 C5F20000 		movt	r0, 20480
 2165 1096 4FF00101 		mov	r1, #1
 2166 109a 4FF00102 		mov	r2, #1
 2167 109e 4FF00703 		mov	r3, #7
 2168 10a2 FFF7FEFF 		bl	ADC_RegularChannelConfig
 783:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2169              		.loc 1 783 0
 2170 10a6 4FF48060 		mov	r0, #1024
 2171 10aa C5F20000 		movt	r0, 20480
 2172 10ae 4FF00501 		mov	r1, #5
 2173 10b2 4FF00202 		mov	r2, #2
 2174 10b6 4FF00703 		mov	r3, #7
 2175 10ba FFF7FEFF 		bl	ADC_RegularChannelConfig
 784:../src/main.cpp **** 
 785:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 2176              		.loc 1 785 0
 2177 10be 4FF48060 		mov	r0, #1024
 2178 10c2 C5F20000 		movt	r0, 20480
 2179 10c6 4FF00101 		mov	r1, #1
 2180 10ca FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 786:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 2181              		.loc 1 786 0
 2182 10ce 4FF48060 		mov	r0, #1024
 2183 10d2 C5F20000 		movt	r0, 20480
 2184 10d6 4FF00501 		mov	r1, #5
 2185 10da FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 787:../src/main.cpp **** 
 788:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 789:../src/main.cpp **** 
 790:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 2186              		.loc 1 790 0
 2187 10de 4FF48060 		mov	r0, #1024
 2188 10e2 C5F20000 		movt	r0, 20480
 2189 10e6 4FF40061 		mov	r1, #2048
 2190 10ea 4FF00A02 		mov	r2, #10
 2191 10ee FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 791:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 2192              		.loc 1 791 0
 2193 10f2 4FF48060 		mov	r0, #1024
 2194 10f6 C5F20000 		movt	r0, 20480
 2195 10fa 4FF08001 		mov	r1, #128
 2196 10fe 4FF00002 		mov	r2, #0
 2197 1102 FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 792:../src/main.cpp **** 
 793:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 2198              		.loc 1 793 0
 2199 1106 4FF48060 		mov	r0, #1024
 2200 110a C5F20000 		movt	r0, 20480
 2201 110e 4FF44001 		mov	r1, #12582912
 2202 1112 FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 794:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 795:../src/main.cpp **** 
 796:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 797:../src/main.cpp **** 
 798:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 799:../src/main.cpp **** 
 800:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 2203              		.loc 1 800 0
 2204 1116 4FF02F03 		mov	r3, #47
 2205 111a 87F82430 		strb	r3, [r7, #36]
 801:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 2206              		.loc 1 801 0
 2207 111e 4FF00003 		mov	r3, #0
 2208 1122 87F82530 		strb	r3, [r7, #37]
 802:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2209              		.loc 1 802 0
 2210 1126 4FF00003 		mov	r3, #0
 2211 112a 87F82630 		strb	r3, [r7, #38]
 803:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2212              		.loc 1 803 0
 2213 112e 4FF00103 		mov	r3, #1
 2214 1132 87F82730 		strb	r3, [r7, #39]
 804:../src/main.cpp **** 
 805:../src/main.cpp **** 	NVIC_Init(&nv);
 2215              		.loc 1 805 0
 2216 1136 07F12403 		add	r3, r7, #36
 2217 113a 1846     		mov	r0, r3
 2218 113c FFF7FEFF 		bl	NVIC_Init
 806:../src/main.cpp **** 
 807:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 808:../src/main.cpp **** 
 809:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 2219              		.loc 1 809 0
 2220 1140 4FF48060 		mov	r0, #1024
 2221 1144 C5F20000 		movt	r0, 20480
 2222 1148 4FF4C071 		mov	r1, #384
 2223 114c 4FF00102 		mov	r2, #1
 2224 1150 FFF7FEFF 		bl	ADC_ITConfig
 810:../src/main.cpp **** 
 811:../src/main.cpp **** 	/* Enable ADC3 */
 812:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 2225              		.loc 1 812 0
 2226 1154 4FF48060 		mov	r0, #1024
 2227 1158 C5F20000 		movt	r0, 20480
 2228 115c 4FF00101 		mov	r1, #1
 2229 1160 FFF7FEFF 		bl	ADC_Cmd
 813:../src/main.cpp **** 
 814:../src/main.cpp **** 	/* wait for ADRDY */
 815:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 2230              		.loc 1 815 0
 2231 1164 00BF     		nop
 2232              	.L36:
 2233              		.loc 1 815 0 is_stmt 0 discriminator 1
 2234 1166 4FF48060 		mov	r0, #1024
 2235 116a C5F20000 		movt	r0, 20480
 2236 116e 4FF00101 		mov	r1, #1
 2237 1172 FFF7FEFF 		bl	ADC_GetFlagStatus
 2238 1176 0346     		mov	r3, r0
 2239 1178 002B     		cmp	r3, #0
 2240 117a 14BF     		ite	ne
 2241 117c 0023     		movne	r3, #0
 2242 117e 0123     		moveq	r3, #1
 2243 1180 DBB2     		uxtb	r3, r3
 2244 1182 002B     		cmp	r3, #0
 2245 1184 EFD1     		bne	.L36
 816:../src/main.cpp **** 
 817:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 818:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 2246              		.loc 1 818 0 is_stmt 1
 2247 1186 4FF48060 		mov	r0, #1024
 2248 118a C5F20000 		movt	r0, 20480
 2249 118e FFF7FEFF 		bl	ADC_StartConversion
 2250              	.LBE12:
 819:../src/main.cpp **** }
 2251              		.loc 1 819 0
 2252 1192 07F14807 		add	r7, r7, #72
 2253 1196 BD46     		mov	sp, r7
 2254 1198 80BD     		pop	{r7, pc}
 2255              		.cfi_endproc
 2256              	.LFE122:
 2258 119a 00BF     		.align	2
 2259              		.global	_Z9adc1_initv
 2260              		.thumb
 2261              		.thumb_func
 2263              	_Z9adc1_initv:
 2264              	.LFB123:
 820:../src/main.cpp **** 
 821:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 822:../src/main.cpp ****  * @Args: Nothing
 823:../src/main.cpp ****  * @Return Val: Nothing
 824:../src/main.cpp ****  */
 825:../src/main.cpp **** 
 826:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 827:../src/main.cpp **** {
 2265              		.loc 1 827 0
 2266              		.cfi_startproc
 2267              		@ args = 0, pretend = 0, frame = 72
 2268              		@ frame_needed = 1, uses_anonymous_args = 0
 2269 119c 80B5     		push	{r7, lr}
 2270              	.LCFI36:
 2271              		.cfi_def_cfa_offset 8
 2272              		.cfi_offset 7, -8
 2273              		.cfi_offset 14, -4
 2274 119e 92B0     		sub	sp, sp, #72
 2275              	.LCFI37:
 2276              		.cfi_def_cfa_offset 80
 2277 11a0 00AF     		add	r7, sp, #0
 2278              	.LCFI38:
 2279              		.cfi_def_cfa_register 7
 2280              	.LBB13:
 828:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 829:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 830:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 831:../src/main.cpp **** 	/* Configure the ADC clock */
 832:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2281              		.loc 1 832 0
 2282 11a2 4FF48870 		mov	r0, #272
 2283 11a6 FFF7FEFF 		bl	RCC_ADCCLKConfig
 833:../src/main.cpp **** 
 834:../src/main.cpp **** 	/* Enable ADC1 clock */
 835:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2284              		.loc 1 835 0
 2285 11aa 4FF08050 		mov	r0, #268435456
 2286 11ae 4FF00101 		mov	r1, #1
 2287 11b2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 836:../src/main.cpp **** 	/* ADC Channel configuration */
 837:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 838:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2288              		.loc 1 838 0
 2289 11b6 4FF40030 		mov	r0, #131072
 2290 11ba 4FF00101 		mov	r1, #1
 2291 11be FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 839:../src/main.cpp **** 
 840:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 841:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2292              		.loc 1 841 0
 2293 11c2 4FF00403 		mov	r3, #4
 2294 11c6 BB62     		str	r3, [r7, #40]
 842:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2295              		.loc 1 842 0
 2296 11c8 4FF00303 		mov	r3, #3
 2297 11cc 87F82C30 		strb	r3, [r7, #44]
 843:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2298              		.loc 1 843 0
 2299 11d0 4FF00003 		mov	r3, #0
 2300 11d4 87F82F30 		strb	r3, [r7, #47]
 844:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2301              		.loc 1 844 0
 2302 11d8 07F12803 		add	r3, r7, #40
 2303 11dc 4FF09040 		mov	r0, #1207959552
 2304 11e0 1946     		mov	r1, r3
 2305 11e2 FFF7FEFF 		bl	GPIO_Init
 845:../src/main.cpp **** 
 846:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2306              		.loc 1 846 0
 2307 11e6 07F10403 		add	r3, r7, #4
 2308 11ea 1846     		mov	r0, r3
 2309 11ec FFF7FEFF 		bl	ADC_StructInit
 847:../src/main.cpp **** 
 848:../src/main.cpp **** 	/* Calibration procedure */
 849:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2310              		.loc 1 849 0
 2311 11f0 4FF0A040 		mov	r0, #1342177280
 2312 11f4 4FF00101 		mov	r1, #1
 2313 11f8 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 850:../src/main.cpp **** 
 851:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 852:../src/main.cpp **** 	int foo;
 853:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2314              		.loc 1 853 0
 2315 11fc 4FF00003 		mov	r3, #0
 2316 1200 7B64     		str	r3, [r7, #68]
 2317 1202 07E0     		b	.L38
 2318              	.L39:
 854:../src/main.cpp **** 	{
 855:../src/main.cpp **** 	  ++foo;
 2319              		.loc 1 855 0 discriminator 2
 2320 1204 7B6C     		ldr	r3, [r7, #68]
 2321 1206 03F10103 		add	r3, r3, #1
 2322 120a 7B64     		str	r3, [r7, #68]
 853:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2323              		.loc 1 853 0 discriminator 2
 2324 120c 7B6C     		ldr	r3, [r7, #68]
 2325 120e 03F10103 		add	r3, r3, #1
 2326 1212 7B64     		str	r3, [r7, #68]
 2327              	.L38:
 853:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2328              		.loc 1 853 0 is_stmt 0 discriminator 1
 2329 1214 7A6C     		ldr	r2, [r7, #68]
 2330 1216 47F6FF43 		movw	r3, #31999
 2331 121a 9A42     		cmp	r2, r3
 2332 121c CCBF     		ite	gt
 2333 121e 0023     		movgt	r3, #0
 2334 1220 0123     		movle	r3, #1
 2335 1222 DBB2     		uxtb	r3, r3
 2336 1224 002B     		cmp	r3, #0
 2337 1226 EDD1     		bne	.L39
 856:../src/main.cpp **** 	}
 857:../src/main.cpp **** 
 858:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2338              		.loc 1 858 0 is_stmt 1
 2339 1228 4FF0A040 		mov	r0, #1342177280
 2340 122c 4FF00001 		mov	r1, #0
 2341 1230 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 859:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2342              		.loc 1 859 0
 2343 1234 4FF0A040 		mov	r0, #1342177280
 2344 1238 FFF7FEFF 		bl	ADC_StartCalibration
 860:../src/main.cpp **** 
 861:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2345              		.loc 1 861 0
 2346 123c 00BF     		nop
 2347              	.L40:
 2348              		.loc 1 861 0 is_stmt 0 discriminator 1
 2349 123e 4FF0A040 		mov	r0, #1342177280
 2350 1242 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2351 1246 0346     		mov	r3, r0
 2352 1248 002B     		cmp	r3, #0
 2353 124a 0CBF     		ite	eq
 2354 124c 0023     		moveq	r3, #0
 2355 124e 0123     		movne	r3, #1
 2356 1250 DBB2     		uxtb	r3, r3
 2357 1252 002B     		cmp	r3, #0
 2358 1254 F3D1     		bne	.L40
 862:../src/main.cpp **** 
 863:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2359              		.loc 1 863 0 is_stmt 1
 2360 1256 4FF00003 		mov	r3, #0
 2361 125a 3B63     		str	r3, [r7, #48]
 864:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2362              		.loc 1 864 0
 2363 125c 4FF00003 		mov	r3, #0
 2364 1260 7B63     		str	r3, [r7, #52]
 865:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2365              		.loc 1 865 0
 2366 1262 4FF00003 		mov	r3, #0
 2367 1266 BB63     		str	r3, [r7, #56]
 866:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2368              		.loc 1 866 0
 2369 1268 4FF00003 		mov	r3, #0
 2370 126c FB63     		str	r3, [r7, #60]
 867:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2371              		.loc 1 867 0
 2372 126e 4FF00003 		mov	r3, #0
 2373 1272 87F84030 		strb	r3, [r7, #64]
 868:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2374              		.loc 1 868 0
 2375 1276 07F13003 		add	r3, r7, #48
 2376 127a 4FF0A040 		mov	r0, #1342177280
 2377 127e 1946     		mov	r1, r3
 2378 1280 FFF7FEFF 		bl	ADC_CommonInit
 869:../src/main.cpp **** 
 870:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2379              		.loc 1 870 0
 2380 1284 4FF40053 		mov	r3, #8192
 2381 1288 7B60     		str	r3, [r7, #4]
 871:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2382              		.loc 1 871 0
 2383 128a 4FF00003 		mov	r3, #0
 2384 128e BB60     		str	r3, [r7, #8]
 872:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2385              		.loc 1 872 0
 2386 1290 4FF00003 		mov	r3, #0
 2387 1294 FB60     		str	r3, [r7, #12]
 873:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2388              		.loc 1 873 0
 2389 1296 4FF00003 		mov	r3, #0
 2390 129a 3B61     		str	r3, [r7, #16]
 874:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2391              		.loc 1 874 0
 2392 129c 4FF00003 		mov	r3, #0
 2393 12a0 7B61     		str	r3, [r7, #20]
 875:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2394              		.loc 1 875 0
 2395 12a2 4FF00003 		mov	r3, #0
 2396 12a6 BB61     		str	r3, [r7, #24]
 876:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2397              		.loc 1 876 0
 2398 12a8 4FF00003 		mov	r3, #0
 2399 12ac FB61     		str	r3, [r7, #28]
 877:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2400              		.loc 1 877 0
 2401 12ae 4FF00103 		mov	r3, #1
 2402 12b2 87F82030 		strb	r3, [r7, #32]
 878:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2403              		.loc 1 878 0
 2404 12b6 07F10403 		add	r3, r7, #4
 2405 12ba 4FF0A040 		mov	r0, #1342177280
 2406 12be 1946     		mov	r1, r3
 2407 12c0 FFF7FEFF 		bl	ADC_Init
 879:../src/main.cpp **** 
 880:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 881:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2408              		.loc 1 881 0
 2409 12c4 4FF0A040 		mov	r0, #1342177280
 2410 12c8 4FF00301 		mov	r1, #3
 2411 12cc 4FF00102 		mov	r2, #1
 2412 12d0 4FF00703 		mov	r3, #7
 2413 12d4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 882:../src/main.cpp **** 
 883:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 884:../src/main.cpp **** 
 885:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 886:../src/main.cpp **** 
 887:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2414              		.loc 1 887 0
 2415 12d8 4FF01203 		mov	r3, #18
 2416 12dc 87F82430 		strb	r3, [r7, #36]
 888:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2417              		.loc 1 888 0
 2418 12e0 4FF00203 		mov	r3, #2
 2419 12e4 87F82530 		strb	r3, [r7, #37]
 889:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2420              		.loc 1 889 0
 2421 12e8 4FF00003 		mov	r3, #0
 2422 12ec 87F82630 		strb	r3, [r7, #38]
 890:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2423              		.loc 1 890 0
 2424 12f0 4FF00103 		mov	r3, #1
 2425 12f4 87F82730 		strb	r3, [r7, #39]
 891:../src/main.cpp **** 
 892:../src/main.cpp **** 	NVIC_Init(&nv);
 2426              		.loc 1 892 0
 2427 12f8 07F12403 		add	r3, r7, #36
 2428 12fc 1846     		mov	r0, r3
 2429 12fe FFF7FEFF 		bl	NVIC_Init
 893:../src/main.cpp **** 
 894:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 895:../src/main.cpp **** 
 896:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2430              		.loc 1 896 0
 2431 1302 4FF0A040 		mov	r0, #1342177280
 2432 1306 4FF00401 		mov	r1, #4
 2433 130a 4FF00102 		mov	r2, #1
 2434 130e FFF7FEFF 		bl	ADC_ITConfig
 897:../src/main.cpp **** 
 898:../src/main.cpp **** 	/* Enable ADC1 */
 899:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2435              		.loc 1 899 0
 2436 1312 4FF0A040 		mov	r0, #1342177280
 2437 1316 4FF00101 		mov	r1, #1
 2438 131a FFF7FEFF 		bl	ADC_Cmd
 900:../src/main.cpp **** 
 901:../src/main.cpp **** 	/* wait for ADRDY */
 902:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2439              		.loc 1 902 0
 2440 131e 00BF     		nop
 2441              	.L41:
 2442              		.loc 1 902 0 is_stmt 0 discriminator 1
 2443 1320 4FF0A040 		mov	r0, #1342177280
 2444 1324 4FF00101 		mov	r1, #1
 2445 1328 FFF7FEFF 		bl	ADC_GetFlagStatus
 2446 132c 0346     		mov	r3, r0
 2447 132e 002B     		cmp	r3, #0
 2448 1330 14BF     		ite	ne
 2449 1332 0023     		movne	r3, #0
 2450 1334 0123     		moveq	r3, #1
 2451 1336 DBB2     		uxtb	r3, r3
 2452 1338 002B     		cmp	r3, #0
 2453 133a F1D1     		bne	.L41
 903:../src/main.cpp **** 
 904:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 905:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2454              		.loc 1 905 0 is_stmt 1
 2455 133c 4FF0A040 		mov	r0, #1342177280
 2456 1340 FFF7FEFF 		bl	ADC_StartConversion
 2457              	.LBE13:
 906:../src/main.cpp **** }
 2458              		.loc 1 906 0
 2459 1344 07F14807 		add	r7, r7, #72
 2460 1348 BD46     		mov	sp, r7
 2461 134a 80BD     		pop	{r7, pc}
 2462              		.cfi_endproc
 2463              	.LFE123:
 2465              	.Letext0:
 2466              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2467              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2468              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 2469              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 2470              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 2471              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 2472              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 2473              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 2474              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 2475              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 2476              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/ccOkv4We.s:24     .bss:00000000 led_iter
     /tmp/ccOkv4We.s:21     .bss:00000000 $d
     /tmp/ccOkv4We.s:31     .data:00000000 led_matrix
     /tmp/ccOkv4We.s:28     .data:00000000 $d
     /tmp/ccOkv4We.s:45     .bss:00000004 left_enc
     /tmp/ccOkv4We.s:51     .bss:0000002c right_enc
     /tmp/ccOkv4We.s:57     .bss:00000054 gyro_angle_x
     /tmp/ccOkv4We.s:63     .bss:00000058 gyro_bias_x
     /tmp/ccOkv4We.s:69     .bss:0000005c adcval
     /tmp/ccOkv4We.s:75     .bss:00000060 adcData
     /tmp/ccOkv4We.s:81     .bss:00000068 new_data
     /tmp/ccOkv4We.s:87     .bss:0000006c adc2_data
     /tmp/ccOkv4We.s:92     .bss:0000007c adc2_new_data
     /tmp/ccOkv4We.s:97     .bss:0000007d adc3_awd1
     /tmp/ccOkv4We.s:102    .bss:0000007e adc3_awd2
     /tmp/ccOkv4We.s:108    .bss:00000080 count
     /tmp/ccOkv4We.s:114    .bss:00000084 stage
     /tmp/ccOkv4We.s:120    .bss:00000088 drive_cmd
     /tmp/ccOkv4We.s:126    .bss:0000008c err
     /tmp/ccOkv4We.s:132    .bss:00000090 last_err
     /tmp/ccOkv4We.s:138    .bss:00000094 diff_err
     /tmp/ccOkv4We.s:144    .bss:00000098 rt
     /tmp/ccOkv4We.s:150    .bss:0000009c d_front
     /tmp/ccOkv4We.s:156    .bss:000000a0 left
     /tmp/ccOkv4We.s:162    .bss:000000a4 right
     /tmp/ccOkv4We.s:166    .rodata:00000000 $d
     /tmp/ccOkv4We.s:167    .rodata:00000000 .LC0
     /tmp/ccOkv4We.s:171    .text:00000000 $t
     /tmp/ccOkv4We.s:176    .text:00000000 main
     /tmp/ccOkv4We.s:712    .text:00000454 _Z15brake_pins_initv
     /tmp/ccOkv4We.s:1369   .text:00000984 _Z13adc1_init_DMAv
     /tmp/ccOkv4We.s:1653   .text:00000bf8 _Z13adc2_init_DMAv
     /tmp/ccOkv4We.s:784    .text:000004cc _Z13ping_pin_initv
     /tmp/ccOkv4We.s:869    .text:0000055c _Z20timer2_timebase_initv
     /tmp/ccOkv4We.s:555    .text:00000358 _Z19imu_update_ISR_initv
     /tmp/ccOkv4We.s:928    .text:000005b0 _Z9comp_initv
     /tmp/ccOkv4We.s:390    .text:000001d4 _Z11IR_distancei
     /tmp/ccOkv4We.s:539    .text:00000338 $d
     /tmp/ccOkv4We.s:550    .text:00000358 $t
     /tmp/ccOkv4We.s:1278   .text:000008fc _Z14calc_gyro_biasv
     /tmp/ccOkv4We.s:672    .rodata:00000034 .LC1
     /tmp/ccOkv4We.s:681    .text:0000043c L3GD20_TIMEOUT_UserCallback
     /tmp/ccOkv4We.s:1360   .text:00000980 $d
     /tmp/ccOkv4We.s:1364   .text:00000984 $t
     /tmp/ccOkv4We.s:2005   .text:00000f3c _Z21battery_watchdog_initv
     /tmp/ccOkv4We.s:2263   .text:0000119c _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.8e587b4e25369b5c8e89ee518c5d2e90
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
__aeabi_f2d
SystemInit
_Z10UART1_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
_Z19LED_MATRIX_ISR_initv
printf
__aeabi_d2f
pow
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
RCC_AHBPeriphClockCmd
GPIO_StructInit
GPIO_Init
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
