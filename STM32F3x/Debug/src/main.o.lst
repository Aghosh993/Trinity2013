   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.cpp"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	led_iter
  21              		.bss
  22              		.align	2
  25              	led_iter:
  26 0000 00000000 		.space	4
  27              		.global	led_matrix
  28              		.data
  29              		.align	2
  32              	led_matrix:
  33 0000 00020000 		.word	512
  34 0004 00010000 		.word	256
  35 0008 00800000 		.word	32768
  36 000c 00400000 		.word	16384
  37 0010 00200000 		.word	8192
  38 0014 00100000 		.word	4096
  39 0018 00080000 		.word	2048
  40 001c 00040000 		.word	1024
  41              		.global	left_enc
  42              		.bss
  43              		.align	2
  46              	left_enc:
  47 0004 00000000 		.space	40
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.global	right_enc
  49              		.align	2
  52              	right_enc:
  53 002c 00000000 		.space	40
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.global	gyro_angle_x
  55              		.align	2
  58              	gyro_angle_x:
  59 0054 00000000 		.space	4
  60              		.global	gyro_bias_x
  61              		.align	2
  64              	gyro_bias_x:
  65 0058 00000000 		.space	4
  66              		.global	adcval
  67              		.align	2
  70              	adcval:
  71 005c 00000000 		.space	4
  72              		.global	adcData
  73              		.align	2
  76              	adcData:
  77 0060 00000000 		.space	8
  77      00000000 
  78              		.global	new_data
  79              		.align	2
  82              	new_data:
  83 0068 00000000 		.space	4
  84              		.section	.rodata
  85              		.align	2
  86              	.LC0:
  87 0000 41444331 		.ascii	"ADC1: %4d || ADC2: %4d\012\015\000"
  87      3A202534 
  87      64207C7C 
  87      20414443 
  87      323A2025 
  88              		.text
  89              		.align	2
  90              		.global	main
  91              		.thumb
  92              		.thumb_func
  94              	main:
  95              	.LFB111:
  96              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7)
  18:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  19:../src/main.cpp ****  *
  20:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  21:../src/main.cpp ****  *
  22:../src/main.cpp ****  * TIM6: LED matrix ISR
  23:../src/main.cpp ****  * TIM7: Encoder update ISR
  24:../src/main.cpp ****  * TIM17: IMU update ISR
  25:../src/main.cpp ****  *
  26:../src/main.cpp ****  * Other pins/resources used:
  27:../src/main.cpp ****  *
  28:../src/main.cpp ****  * Analog: 	Channel 3 (PA2)
  29:../src/main.cpp ****  * 			Channel 4 (PA3)
  30:../src/main.cpp ****  * 			Channel 5 (PF4)
  31:../src/main.cpp ****  */
  32:../src/main.cpp **** 
  33:../src/main.cpp **** volatile int led_iter;
  34:../src/main.cpp **** volatile int led_matrix[8] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_14, GPIO_Pin_13,
  35:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  36:../src/main.cpp **** 
  37:../src/main.cpp **** void imu_update_ISR_init(void);
  38:../src/main.cpp **** int16_t calc_gyro_bias(void);
  39:../src/main.cpp **** 
  40:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  41:../src/main.cpp **** 
  42:../src/main.cpp **** void adc1_init_other(void);
  43:../src/main.cpp **** void adc1_init(void);
  44:../src/main.cpp **** void adc1_dma_init(void);
  45:../src/main.cpp **** 
  46:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  47:../src/main.cpp **** 
  48:../src/main.cpp **** encoderState left_enc, right_enc;
  49:../src/main.cpp **** 
  50:../src/main.cpp **** volatile float gyro_angle_x;
  51:../src/main.cpp **** int gyro_bias_x, adcval;
  52:../src/main.cpp **** 
  53:../src/main.cpp **** //__IO uint16_t adcData[3];
  54:../src/main.cpp **** __IO uint32_t adcData[2];
  55:../src/main.cpp **** int new_data;
  56:../src/main.cpp **** 
  57:../src/main.cpp **** // Initialize all encoder data structures to zero:
  58:../src/main.cpp **** 
  59:../src/main.cpp **** int main(void)
  60:../src/main.cpp **** {
  97              		.loc 1 60 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 8
 100              		@ frame_needed = 1, uses_anonymous_args = 0
 101 0000 80B5     		push	{r7, lr}
 102              	.LCFI0:
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 7, -8
 105              		.cfi_offset 14, -4
 106 0002 82B0     		sub	sp, sp, #8
 107              	.LCFI1:
 108              		.cfi_def_cfa_offset 16
 109 0004 00AF     		add	r7, sp, #0
 110              	.LCFI2:
 111              		.cfi_def_cfa_register 7
 112              	.LBB2:
  61:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 113              		.loc 1 61 0
 114 0006 FFF7FEFF 		bl	SystemInit
  62:../src/main.cpp **** 
  63:../src/main.cpp **** 	UART1_init(); // Debug bridge
 115              		.loc 1 63 0
 116 000a FFF7FEFF 		bl	_Z10UART1_initv
  64:../src/main.cpp **** 
  65:../src/main.cpp **** //	adcData = 0;
  66:../src/main.cpp **** 	adcData[0] = 0;
 117              		.loc 1 66 0
 118 000e 40F20003 		movw	r3, #:lower16:adcData
 119 0012 C0F20003 		movt	r3, #:upper16:adcData
 120 0016 4FF00002 		mov	r2, #0
 121 001a 1A60     		str	r2, [r3, #0]
  67:../src/main.cpp **** 	adcData[1] = 0;
 122              		.loc 1 67 0
 123 001c 40F20003 		movw	r3, #:lower16:adcData
 124 0020 C0F20003 		movt	r3, #:upper16:adcData
 125 0024 4FF00002 		mov	r2, #0
 126 0028 5A60     		str	r2, [r3, #4]
  68:../src/main.cpp **** 
  69:../src/main.cpp **** 	// Initialize global encoder data structure for left and right encoders:
  70:../src/main.cpp **** 
  71:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 127              		.loc 1 71 0
 128 002a 40F20000 		movw	r0, #:lower16:left_enc
 129 002e C0F20000 		movt	r0, #:upper16:left_enc
 130 0032 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
  72:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 131              		.loc 1 72 0
 132 0036 40F20000 		movw	r0, #:lower16:right_enc
 133 003a C0F20000 		movt	r0, #:upper16:right_enc
 134 003e FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
  73:../src/main.cpp **** 
  74:../src/main.cpp **** 	right_enc.position_target = 8400;
 135              		.loc 1 74 0
 136 0042 40F20003 		movw	r3, #:lower16:right_enc
 137 0046 C0F20003 		movt	r3, #:upper16:right_enc
 138 004a 42F2D002 		movw	r2, #8400
 139 004e DA60     		str	r2, [r3, #12]
  75:../src/main.cpp **** //	right_enc.speed_target = 8400;
  76:../src/main.cpp **** 
  77:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
  78:../src/main.cpp **** 
  79:../src/main.cpp **** 	pwm_out1_init(5000);
 140              		.loc 1 79 0
 141 0050 41F28830 		movw	r0, #5000
 142 0054 FFF7FEFF 		bl	_Z13pwm_out1_initt
  80:../src/main.cpp **** 	pwm_out2_init(5000);
 143              		.loc 1 80 0
 144 0058 41F28830 		movw	r0, #5000
 145 005c FFF7FEFF 		bl	_Z13pwm_out2_initt
  81:../src/main.cpp **** 
  82:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
  83:../src/main.cpp **** 
  84:../src/main.cpp **** 	TIM8_init_encoder();
 146              		.loc 1 84 0
 147 0060 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
  85:../src/main.cpp **** 	TIM2_init_encoder();
 148              		.loc 1 85 0
 149 0064 FFF7FEFF 		bl	_Z17TIM2_init_encoderv
  86:../src/main.cpp **** 
  87:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
  88:../src/main.cpp **** 
  89:../src/main.cpp **** 	new_data = 0;
 150              		.loc 1 89 0
 151 0068 40F20003 		movw	r3, #:lower16:new_data
 152 006c C0F20003 		movt	r3, #:upper16:new_data
 153 0070 4FF00002 		mov	r2, #0
 154 0074 1A60     		str	r2, [r3, #0]
  90:../src/main.cpp **** 	adc1_init_other();
 155              		.loc 1 90 0
 156 0076 FFF7FEFF 		bl	_Z15adc1_init_otherv
  91:../src/main.cpp **** //	adc1_init();
  92:../src/main.cpp **** //	adc1_dma_init();
  93:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 157              		.loc 1 93 0
 158 007a FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
  94:../src/main.cpp **** 	imu_update_ISR_init(); 		//IMU (gyro/acclerometer/magnetometer ISR)
 159              		.loc 1 94 0
 160 007e FFF7FEFF 		bl	_Z19imu_update_ISR_initv
  95:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 161              		.loc 1 95 0
 162 0082 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
  96:../src/main.cpp **** 
  97:../src/main.cpp **** 	adcval = 0;
 163              		.loc 1 97 0
 164 0086 40F20003 		movw	r3, #:lower16:adcval
 165 008a C0F20003 		movt	r3, #:upper16:adcval
 166 008e 4FF00002 		mov	r2, #0
 167 0092 1A60     		str	r2, [r3, #0]
  98:../src/main.cpp **** 	float mtr_out = 0;
 168              		.loc 1 98 0
 169 0094 4FF00003 		mov	r3, #0
 170 0098 7B60     		str	r3, [r7, #4]	@ float
  99:../src/main.cpp **** 	char *mode;
 100:../src/main.cpp **** 
 101:../src/main.cpp **** 	right_enc.m = MODE_POSITION;
 171              		.loc 1 101 0
 172 009a 40F20003 		movw	r3, #:lower16:right_enc
 173 009e C0F20003 		movt	r3, #:upper16:right_enc
 174 00a2 4FF00102 		mov	r2, #1
 175 00a6 83F82420 		strb	r2, [r3, #36]
 176              	.L3:
 102:../src/main.cpp **** //	right_enc.m = MODE_SPEED;
 103:../src/main.cpp **** 
 104:../src/main.cpp **** 	while(true)
 105:../src/main.cpp **** 	{
 106:../src/main.cpp **** //		adcval = ADC_GetConversionValue(ADC1);
 107:../src/main.cpp **** //		pwm1_output((float)adcval/(float)4096); // Read potentiometer on PA2 and output its value on
 108:../src/main.cpp **** 												// PWM channel #1
 109:../src/main.cpp **** 		pwm2_output(0.5f);						// Fixed 1 kHz, 50% duty output on PWM output #2
 177              		.loc 1 109 0
 178 00aa B6EE000A 		fconsts	s0, #96
 179 00ae FFF7FEFF 		bl	_Z11pwm2_outputf
 180              	.L2:
 110:../src/main.cpp **** //		mtr_out = (float)adcval/(float)4096;
 111:../src/main.cpp **** //		mtr_out = (adcval >= 4013) ? 0.97 : mtr_out;
 112:../src/main.cpp **** //		pwm1_output(mtr_out);
 113:../src/main.cpp **** //		right_enc.position_target = 15000;
 114:../src/main.cpp **** 
 115:../src/main.cpp **** 		// Debug Statements:
 116:../src/main.cpp **** 
 117:../src/main.cpp **** //		printf("%d %d %d\n\r", adcData[0], adcData[1], adcval);
 118:../src/main.cpp **** //		printf("%d\n\r", adcval);
 119:../src/main.cpp **** //		if(right_enc.m == MODE_OPENLOOP)
 120:../src/main.cpp **** //		{
 121:../src/main.cpp **** //			pwm1_output(0.50f);
 122:../src/main.cpp **** //		}
 123:../src/main.cpp **** 
 124:../src/main.cpp **** //		mode = (right_enc.m == MODE_OPENLOOP) ? (char *)"Open" : ((right_enc.m == MODE_POSITION) ? (cha
 125:../src/main.cpp **** 	//	pwm1_output(0.50f);
 126:../src/main.cpp **** //		printf("Left: %d | Right: %d | Mode: %s\n\r", left_enc.position, right_enc.position, mode);
 127:../src/main.cpp **** 
 128:../src/main.cpp **** //		printf("Bias_x: %d | Theta_x: %5.2f | Left: %d | Right: %d\n\r", gyro_bias_x, gyro_angle_x, lef
 129:../src/main.cpp **** //		printf("ADC Value on Channel 3: %d || Theta_x: %5.2f\n\r", adcval, gyro_angle_x);
 130:../src/main.cpp **** //		while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) != SET);
 131:../src/main.cpp **** //		DMA_ClearFlag(DMA1_FLAG_GL1 | DMA1_FLAG_TC1);
 132:../src/main.cpp **** 		while(new_data==0);
 181              		.loc 1 132 0 discriminator 1
 182 00b2 40F20003 		movw	r3, #:lower16:new_data
 183 00b6 C0F20003 		movt	r3, #:upper16:new_data
 184 00ba 1B68     		ldr	r3, [r3, #0]
 185 00bc 002B     		cmp	r3, #0
 186 00be 14BF     		ite	ne
 187 00c0 0023     		movne	r3, #0
 188 00c2 0123     		moveq	r3, #1
 189 00c4 DBB2     		uxtb	r3, r3
 190 00c6 002B     		cmp	r3, #0
 191 00c8 F3D1     		bne	.L2
 133:../src/main.cpp **** //		printf("ADC: %d\n\r", adcData);
 134:../src/main.cpp **** 		printf("ADC1: %4d || ADC2: %4d\n\r", adcData[0], adcData[1]);//adcData, (uint32_t)&(ADC1->DR));//
 192              		.loc 1 134 0
 193 00ca 40F20003 		movw	r3, #:lower16:adcData
 194 00ce C0F20003 		movt	r3, #:upper16:adcData
 195 00d2 1A68     		ldr	r2, [r3, #0]
 196 00d4 40F20003 		movw	r3, #:lower16:adcData
 197 00d8 C0F20003 		movt	r3, #:upper16:adcData
 198 00dc 5B68     		ldr	r3, [r3, #4]
 199 00de 40F20000 		movw	r0, #:lower16:.LC0
 200 00e2 C0F20000 		movt	r0, #:upper16:.LC0
 201 00e6 1146     		mov	r1, r2
 202 00e8 1A46     		mov	r2, r3
 203 00ea FFF7FEFF 		bl	printf
 135:../src/main.cpp **** 		new_data = 0;
 204              		.loc 1 135 0
 205 00ee 40F20003 		movw	r3, #:lower16:new_data
 206 00f2 C0F20003 		movt	r3, #:upper16:new_data
 207 00f6 4FF00002 		mov	r2, #0
 208 00fa 1A60     		str	r2, [r3, #0]
 104:../src/main.cpp **** 	while(true)
 209              		.loc 1 104 0
 210 00fc D5E7     		b	.L3
 211              	.LBE2:
 212              		.cfi_endproc
 213              	.LFE111:
 215 00fe 00BF     		.align	2
 216              		.global	_Z19imu_update_ISR_initv
 217              		.thumb
 218              		.thumb_func
 220              	_Z19imu_update_ISR_initv:
 221              	.LFB112:
 136:../src/main.cpp **** 
 137:../src/main.cpp **** //		printf("Hello World!!\n\r");
 138:../src/main.cpp **** 	}
 139:../src/main.cpp **** 	return 0; // We should never manage to get here...
 140:../src/main.cpp **** }
 141:../src/main.cpp **** 
 142:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 143:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 144:../src/main.cpp **** 
 145:../src/main.cpp **** void imu_update_ISR_init(void)
 146:../src/main.cpp **** {
 222              		.loc 1 146 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 24
 225              		@ frame_needed = 1, uses_anonymous_args = 0
 226 0100 80B5     		push	{r7, lr}
 227              	.LCFI3:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 7, -8
 230              		.cfi_offset 14, -4
 231 0102 86B0     		sub	sp, sp, #24
 232              	.LCFI4:
 233              		.cfi_def_cfa_offset 32
 234 0104 00AF     		add	r7, sp, #0
 235              	.LCFI5:
 236              		.cfi_def_cfa_register 7
 237              	.LBB3:
 147:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 148:../src/main.cpp **** 
 149:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 238              		.loc 1 149 0
 239 0106 4FF00703 		mov	r3, #7
 240 010a BB74     		strb	r3, [r7, #18]
 150:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 241              		.loc 1 150 0
 242 010c 4FF00003 		mov	r3, #0
 243 0110 FB74     		strb	r3, [r7, #19]
 151:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 244              		.loc 1 151 0
 245 0112 4FF00003 		mov	r3, #0
 246 0116 3B75     		strb	r3, [r7, #20]
 152:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 247              		.loc 1 152 0
 248 0118 4FF00003 		mov	r3, #0
 249 011c 7B75     		strb	r3, [r7, #21]
 153:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 250              		.loc 1 153 0
 251 011e 4FF00003 		mov	r3, #0
 252 0122 BB75     		strb	r3, [r7, #22]
 154:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 253              		.loc 1 154 0
 254 0124 4FF00003 		mov	r3, #0
 255 0128 7B74     		strb	r3, [r7, #17]
 155:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 256              		.loc 1 155 0
 257 012a 4FF00803 		mov	r3, #8
 258 012e 3B74     		strb	r3, [r7, #16]
 156:../src/main.cpp **** 
 157:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 259              		.loc 1 157 0
 260 0130 07F11003 		add	r3, r7, #16
 261 0134 1846     		mov	r0, r3
 262 0136 FFF7FEFF 		bl	L3GD20_Init
 158:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 263              		.loc 1 158 0
 264 013a FFF7FEFF 		bl	_Z14calc_gyro_biasv
 265 013e 0346     		mov	r3, r0
 266 0140 1A46     		mov	r2, r3
 267 0142 40F20003 		movw	r3, #:lower16:gyro_bias_x
 268 0146 C0F20003 		movt	r3, #:upper16:gyro_bias_x
 269 014a 1A60     		str	r2, [r3, #0]
 159:../src/main.cpp **** 
 160:../src/main.cpp **** 	gyro_angle_x = 0;
 270              		.loc 1 160 0
 271 014c 40F20003 		movw	r3, #:lower16:gyro_angle_x
 272 0150 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 273 0154 4FF00002 		mov	r2, #0
 274 0158 1A60     		str	r2, [r3, #0]	@ float
 161:../src/main.cpp **** 
 162:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 163:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 164:../src/main.cpp **** 
 165:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;//TIM3_IRQn;	//TIM2_IRQn;
 275              		.loc 1 165 0
 276 015a 4FF01A03 		mov	r3, #26
 277 015e 3B73     		strb	r3, [r7, #12]
 166:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 278              		.loc 1 166 0
 279 0160 4FF00003 		mov	r3, #0
 280 0164 7B73     		strb	r3, [r7, #13]
 167:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 281              		.loc 1 167 0
 282 0166 4FF00003 		mov	r3, #0
 283 016a BB73     		strb	r3, [r7, #14]
 168:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 284              		.loc 1 168 0
 285 016c 4FF00103 		mov	r3, #1
 286 0170 FB73     		strb	r3, [r7, #15]
 169:../src/main.cpp **** 
 170:../src/main.cpp **** 	NVIC_Init(&nv);
 287              		.loc 1 170 0
 288 0172 07F10C03 		add	r3, r7, #12
 289 0176 1846     		mov	r0, r3
 290 0178 FFF7FEFF 		bl	NVIC_Init
 171:../src/main.cpp **** 
 172:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE); //TIM3 on APB1
 291              		.loc 1 172 0
 292 017c 4FF48020 		mov	r0, #262144
 293 0180 4FF00101 		mov	r1, #1
 294 0184 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 173:../src/main.cpp **** 
 174:../src/main.cpp **** 	/*
 175:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 176:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 177:../src/main.cpp **** 	 * 	  Period -> ARR
 178:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 179:../src/main.cpp **** 	 */
 180:../src/main.cpp **** 
 181:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 295              		.loc 1 181 0
 296 0188 4FF0F903 		mov	r3, #249
 297 018c 7B60     		str	r3, [r7, #4]
 182:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 298              		.loc 1 182 0
 299 018e 41F61F43 		movw	r3, #7199
 300 0192 3B80     		strh	r3, [r7, #0]	@ movhi
 183:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 301              		.loc 1 183 0
 302 0194 4FF00003 		mov	r3, #0
 303 0198 BB72     		strb	r3, [r7, #10]
 184:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 304              		.loc 1 184 0
 305 019a 4FF00003 		mov	r3, #0
 306 019e 3B81     		strh	r3, [r7, #8]	@ movhi
 185:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 307              		.loc 1 185 0
 308 01a0 4FF00003 		mov	r3, #0
 309 01a4 7B80     		strh	r3, [r7, #2]	@ movhi
 186:../src/main.cpp **** 
 187:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 310              		.loc 1 187 0
 311 01a6 3B46     		mov	r3, r7
 312 01a8 4FF49040 		mov	r0, #18432
 313 01ac C4F20100 		movt	r0, 16385
 314 01b0 1946     		mov	r1, r3
 315 01b2 FFF7FEFF 		bl	TIM_TimeBaseInit
 188:../src/main.cpp **** 
 189:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 316              		.loc 1 189 0
 317 01b6 4FF49040 		mov	r0, #18432
 318 01ba C4F20100 		movt	r0, 16385
 319 01be 4FF00101 		mov	r1, #1
 320 01c2 4FF00102 		mov	r2, #1
 321 01c6 FFF7FEFF 		bl	TIM_ITConfig
 190:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 322              		.loc 1 190 0
 323 01ca 4FF49040 		mov	r0, #18432
 324 01ce C4F20100 		movt	r0, 16385
 325 01d2 4FF00101 		mov	r1, #1
 326 01d6 FFF7FEFF 		bl	TIM_Cmd
 327              	.LBE3:
 191:../src/main.cpp **** }
 328              		.loc 1 191 0
 329 01da 07F11807 		add	r7, r7, #24
 330 01de BD46     		mov	sp, r7
 331 01e0 80BD     		pop	{r7, pc}
 332              		.cfi_endproc
 333              	.LFE112:
 335              		.section	.rodata
 336 0019 000000   		.align	2
 337              	.LC1:
 338 001c 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 338      32302072 
 338      65616420 
 338      61747465 
 338      6D707420 
 339 004f 636F6465 		.ascii	"code!!!\012\015\000"
 339      2121210A 
 339      0D00
 340 0059 000000   		.text
 341 01e2 00BF     		.align	2
 342              		.global	L3GD20_TIMEOUT_UserCallback
 343              		.thumb
 344              		.thumb_func
 346              	L3GD20_TIMEOUT_UserCallback:
 347              	.LFB113:
 192:../src/main.cpp **** 
 193:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 194:../src/main.cpp **** {
 348              		.loc 1 194 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352 01e4 80B5     		push	{r7, lr}
 353              	.LCFI6:
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 7, -8
 356              		.cfi_offset 14, -4
 357 01e6 00AF     		add	r7, sp, #0
 358              	.LCFI7:
 359              		.cfi_def_cfa_register 7
 195:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 360              		.loc 1 195 0
 361 01e8 40F20000 		movw	r0, #:lower16:.LC1
 362 01ec C0F20000 		movt	r0, #:upper16:.LC1
 363 01f0 FFF7FEFF 		bl	printf
 196:../src/main.cpp **** 	return 0;
 364              		.loc 1 196 0
 365 01f4 4FF00003 		mov	r3, #0
 197:../src/main.cpp **** }
 366              		.loc 1 197 0
 367 01f8 1846     		mov	r0, r3
 368 01fa 80BD     		pop	{r7, pc}
 369              		.cfi_endproc
 370              	.LFE113:
 372              		.align	2
 373              		.global	_Z14calc_gyro_biasv
 374              		.thumb
 375              		.thumb_func
 377              	_Z14calc_gyro_biasv:
 378              	.LFB114:
 198:../src/main.cpp **** 
 199:../src/main.cpp **** int16_t calc_gyro_bias(void)
 200:../src/main.cpp **** {
 379              		.loc 1 200 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 16
 382              		@ frame_needed = 1, uses_anonymous_args = 0
 383 01fc 80B5     		push	{r7, lr}
 384              	.LCFI8:
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 7, -8
 387              		.cfi_offset 14, -4
 388 01fe 84B0     		sub	sp, sp, #16
 389              	.LCFI9:
 390              		.cfi_def_cfa_offset 24
 391 0200 00AF     		add	r7, sp, #0
 392              	.LCFI10:
 393              		.cfi_def_cfa_register 7
 394              	.LBB4:
 201:../src/main.cpp **** 	int i = 0;
 395              		.loc 1 201 0
 396 0202 4FF00003 		mov	r3, #0
 397 0206 FB60     		str	r3, [r7, #12]
 202:../src/main.cpp **** 	int accum_x = 0;
 398              		.loc 1 202 0
 399 0208 4FF00003 		mov	r3, #0
 400 020c BB60     		str	r3, [r7, #8]
 203:../src/main.cpp **** 
 204:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 205:../src/main.cpp **** 		uint16_t un_signed;
 206:../src/main.cpp **** 		int16_t output;
 207:../src/main.cpp **** 	} convert;
 208:../src/main.cpp **** 
 209:../src/main.cpp **** 	uint8_t bytes[2];
 210:../src/main.cpp **** 
 211:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 401              		.loc 1 211 0
 402 020e 4FF00003 		mov	r3, #0
 403 0212 FB60     		str	r3, [r7, #12]
 404 0214 19E0     		b	.L8
 405              	.L9:
 212:../src/main.cpp **** 	{
 213:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 406              		.loc 1 213 0 discriminator 2
 407 0216 3B46     		mov	r3, r7
 408 0218 1846     		mov	r0, r3
 409 021a 4FF02801 		mov	r1, #40
 410 021e 4FF00202 		mov	r2, #2
 411 0222 FFF7FEFF 		bl	L3GD20_Read
 214:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 412              		.loc 1 214 0 discriminator 2
 413 0226 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 414 0228 4FEA0323 		lsl	r3, r3, #8
 415 022c 9AB2     		uxth	r2, r3
 416 022e 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 417 0230 1343     		orrs	r3, r3, r2
 418 0232 9BB2     		uxth	r3, r3
 419 0234 9BB2     		uxth	r3, r3
 420 0236 BB80     		strh	r3, [r7, #4]	@ movhi
 215:../src/main.cpp **** 		accum_x += convert.output;
 421              		.loc 1 215 0 discriminator 2
 422 0238 BB88     		ldrh	r3, [r7, #4]
 423 023a 1BB2     		sxth	r3, r3
 424 023c BA68     		ldr	r2, [r7, #8]
 425 023e D318     		adds	r3, r2, r3
 426 0240 BB60     		str	r3, [r7, #8]
 211:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 427              		.loc 1 211 0 discriminator 2
 428 0242 FB68     		ldr	r3, [r7, #12]
 429 0244 03F10103 		add	r3, r3, #1
 430 0248 FB60     		str	r3, [r7, #12]
 431              	.L8:
 211:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 432              		.loc 1 211 0 is_stmt 0 discriminator 1
 433 024a FB68     		ldr	r3, [r7, #12]
 434 024c F92B     		cmp	r3, #249
 435 024e CCBF     		ite	gt
 436 0250 0023     		movgt	r3, #0
 437 0252 0123     		movle	r3, #1
 438 0254 DBB2     		uxtb	r3, r3
 439 0256 002B     		cmp	r3, #0
 440 0258 DDD1     		bne	.L9
 216:../src/main.cpp **** 	}
 217:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 441              		.loc 1 217 0 is_stmt 1
 442 025a D7ED027A 		flds	s15, [r7, #8]	@ int
 443 025e B8EEE77A 		fsitos	s14, s15
 444 0262 DFED077A 		flds	s15, .L11
 445 0266 C7EE277A 		fdivs	s15, s14, s15
 446 026a FDEEE77A 		ftosizs	s15, s15
 447 026e 17EE903A 		fmrs	r3, s15	@ int
 448 0272 9BB2     		uxth	r3, r3
 449 0274 1BB2     		sxth	r3, r3
 450              	.LBE4:
 218:../src/main.cpp **** }
 451              		.loc 1 218 0
 452 0276 1846     		mov	r0, r3
 453 0278 07F11007 		add	r7, r7, #16
 454 027c BD46     		mov	sp, r7
 455 027e 80BD     		pop	{r7, pc}
 456              	.L12:
 457              		.align	2
 458              	.L11:
 459 0280 00007A43 		.word	1132068864
 460              		.cfi_endproc
 461              	.LFE114:
 463              		.align	2
 464              		.global	_Z15adc1_init_otherv
 465              		.thumb
 466              		.thumb_func
 468              	_Z15adc1_init_otherv:
 469              	.LFB115:
 219:../src/main.cpp **** 
 220:../src/main.cpp **** void adc1_init_other(void) //PA2 -> Channel 3 on ADC1
 221:../src/main.cpp **** {
 470              		.loc 1 221 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 112
 473              		@ frame_needed = 1, uses_anonymous_args = 0
 474 0284 80B5     		push	{r7, lr}
 475              	.LCFI11:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 7, -8
 478              		.cfi_offset 14, -4
 479 0286 9CB0     		sub	sp, sp, #112
 480              	.LCFI12:
 481              		.cfi_def_cfa_offset 120
 482 0288 00AF     		add	r7, sp, #0
 483              	.LCFI13:
 484              		.cfi_def_cfa_register 7
 485              	.LBB5:
 222:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 223:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 224:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 225:../src/main.cpp **** 	/* Configure the ADC clock */
 226:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 486              		.loc 1 226 0
 487 028a 4FF48870 		mov	r0, #272
 488 028e FFF7FEFF 		bl	RCC_ADCCLKConfig
 227:../src/main.cpp **** 
 228:../src/main.cpp **** 	/* Enable ADC1 clock */
 229:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 489              		.loc 1 229 0
 490 0292 4FF08050 		mov	r0, #268435456
 491 0296 4FF00101 		mov	r1, #1
 492 029a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 230:../src/main.cpp **** 	/* ADC Channel configuration */
 231:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 232:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 493              		.loc 1 232 0
 494 029e 4FF40030 		mov	r0, #131072
 495 02a2 4FF00101 		mov	r1, #1
 496 02a6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 233:../src/main.cpp **** 
 234:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 235:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 497              		.loc 1 235 0
 498 02aa 4FF00C03 		mov	r3, #12
 499 02ae 3B65     		str	r3, [r7, #80]
 236:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 500              		.loc 1 236 0
 501 02b0 4FF00303 		mov	r3, #3
 502 02b4 87F85430 		strb	r3, [r7, #84]
 237:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 503              		.loc 1 237 0
 504 02b8 4FF00003 		mov	r3, #0
 505 02bc 87F85730 		strb	r3, [r7, #87]
 238:../src/main.cpp **** //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;		//
 239:../src/main.cpp **** //	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;			//
 240:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 506              		.loc 1 240 0
 507 02c0 07F15003 		add	r3, r7, #80
 508 02c4 4FF09040 		mov	r0, #1207959552
 509 02c8 1946     		mov	r1, r3
 510 02ca FFF7FEFF 		bl	GPIO_Init
 241:../src/main.cpp **** 
 242:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 511              		.loc 1 242 0
 512 02ce 3B46     		mov	r3, r7
 513 02d0 1846     		mov	r0, r3
 514 02d2 FFF7FEFF 		bl	ADC_StructInit
 243:../src/main.cpp **** 
 244:../src/main.cpp **** 	/* Calibration procedure */
 245:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 515              		.loc 1 245 0
 516 02d6 4FF0A040 		mov	r0, #1342177280
 517 02da 4FF00101 		mov	r1, #1
 518 02de FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 246:../src/main.cpp **** 
 247:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 248:../src/main.cpp **** 	int foo;
 249:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 519              		.loc 1 249 0
 520 02e2 4FF00003 		mov	r3, #0
 521 02e6 FB66     		str	r3, [r7, #108]
 522 02e8 07E0     		b	.L14
 523              	.L15:
 250:../src/main.cpp **** 	{
 251:../src/main.cpp **** 	  ++foo;
 524              		.loc 1 251 0 discriminator 2
 525 02ea FB6E     		ldr	r3, [r7, #108]
 526 02ec 03F10103 		add	r3, r3, #1
 527 02f0 FB66     		str	r3, [r7, #108]
 249:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 528              		.loc 1 249 0 discriminator 2
 529 02f2 FB6E     		ldr	r3, [r7, #108]
 530 02f4 03F10103 		add	r3, r3, #1
 531 02f8 FB66     		str	r3, [r7, #108]
 532              	.L14:
 249:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 533              		.loc 1 249 0 is_stmt 0 discriminator 1
 534 02fa FA6E     		ldr	r2, [r7, #108]
 535 02fc 4FF6FF13 		movw	r3, #63999
 536 0300 9A42     		cmp	r2, r3
 537 0302 CCBF     		ite	gt
 538 0304 0023     		movgt	r3, #0
 539 0306 0123     		movle	r3, #1
 540 0308 DBB2     		uxtb	r3, r3
 541 030a 002B     		cmp	r3, #0
 542 030c EDD1     		bne	.L15
 252:../src/main.cpp **** 	}
 253:../src/main.cpp **** 
 254:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 543              		.loc 1 254 0 is_stmt 1
 544 030e 4FF0A040 		mov	r0, #1342177280
 545 0312 4FF00001 		mov	r1, #0
 546 0316 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 255:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 547              		.loc 1 255 0
 548 031a 4FF0A040 		mov	r0, #1342177280
 549 031e FFF7FEFF 		bl	ADC_StartCalibration
 256:../src/main.cpp **** 
 257:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 550              		.loc 1 257 0
 551 0322 00BF     		nop
 552              	.L16:
 553              		.loc 1 257 0 is_stmt 0 discriminator 1
 554 0324 4FF0A040 		mov	r0, #1342177280
 555 0328 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 556 032c 0346     		mov	r3, r0
 557 032e 002B     		cmp	r3, #0
 558 0330 0CBF     		ite	eq
 559 0332 0023     		moveq	r3, #0
 560 0334 0123     		movne	r3, #1
 561 0336 DBB2     		uxtb	r3, r3
 562 0338 002B     		cmp	r3, #0
 563 033a F3D1     		bne	.L16
 258:../src/main.cpp **** 
 259:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 564              		.loc 1 259 0 is_stmt 1
 565 033c 4FF00003 		mov	r3, #0
 566 0340 BB65     		str	r3, [r7, #88]
 260:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 567              		.loc 1 260 0
 568 0342 4FF00003 		mov	r3, #0
 569 0346 FB65     		str	r3, [r7, #92]
 261:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 570              		.loc 1 261 0
 571 0348 4FF40043 		mov	r3, #32768
 572 034c 3B66     		str	r3, [r7, #96]
 262:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 573              		.loc 1 262 0
 574 034e 4FF00203 		mov	r3, #2
 575 0352 7B66     		str	r3, [r7, #100]
 263:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 576              		.loc 1 263 0
 577 0354 4FF00F03 		mov	r3, #15
 578 0358 87F86830 		strb	r3, [r7, #104]
 264:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 579              		.loc 1 264 0
 580 035c 07F15803 		add	r3, r7, #88
 581 0360 4FF0A040 		mov	r0, #1342177280
 582 0364 1946     		mov	r1, r3
 583 0366 FFF7FEFF 		bl	ADC_CommonInit
 265:../src/main.cpp **** 
 266:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 584              		.loc 1 266 0
 585 036a 4FF40053 		mov	r3, #8192
 586 036e 3B60     		str	r3, [r7, #0]
 267:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 587              		.loc 1 267 0
 588 0370 4FF00003 		mov	r3, #0
 589 0374 7B60     		str	r3, [r7, #4]
 268:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 590              		.loc 1 268 0
 591 0376 4FF00003 		mov	r3, #0
 592 037a BB60     		str	r3, [r7, #8]
 269:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 593              		.loc 1 269 0
 594 037c 4FF00003 		mov	r3, #0
 595 0380 FB60     		str	r3, [r7, #12]
 270:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 596              		.loc 1 270 0
 597 0382 4FF00003 		mov	r3, #0
 598 0386 3B61     		str	r3, [r7, #16]
 271:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 599              		.loc 1 271 0
 600 0388 4FF00003 		mov	r3, #0
 601 038c 7B61     		str	r3, [r7, #20]
 272:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 602              		.loc 1 272 0
 603 038e 4FF00003 		mov	r3, #0
 604 0392 BB61     		str	r3, [r7, #24]
 273:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 605              		.loc 1 273 0
 606 0394 4FF00203 		mov	r3, #2
 607 0398 3B77     		strb	r3, [r7, #28]
 274:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 608              		.loc 1 274 0
 609 039a 3B46     		mov	r3, r7
 610 039c 4FF0A040 		mov	r0, #1342177280
 611 03a0 1946     		mov	r1, r3
 612 03a2 FFF7FEFF 		bl	ADC_Init
 275:../src/main.cpp **** 
 276:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 277:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 613              		.loc 1 277 0
 614 03a6 4FF0A040 		mov	r0, #1342177280
 615 03aa 4FF00301 		mov	r1, #3
 616 03ae 4FF00102 		mov	r2, #1
 617 03b2 4FF00703 		mov	r3, #7
 618 03b6 FFF7FEFF 		bl	ADC_RegularChannelConfig
 278:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 619              		.loc 1 278 0
 620 03ba 4FF0A040 		mov	r0, #1342177280
 621 03be 4FF00401 		mov	r1, #4
 622 03c2 4FF00202 		mov	r2, #2
 623 03c6 4FF00703 		mov	r3, #7
 624 03ca FFF7FEFF 		bl	ADC_RegularChannelConfig
 279:../src/main.cpp **** 
 280:../src/main.cpp **** //	ADC_RegularChannelSequencerLengthConfig(ADC1, 2);
 281:../src/main.cpp **** 
 282:../src/main.cpp **** 	/* Enable ADC1 */
 283:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 625              		.loc 1 283 0
 626 03ce 4FF0A040 		mov	r0, #1342177280
 627 03d2 4FF00101 		mov	r1, #1
 628 03d6 FFF7FEFF 		bl	ADC_Cmd
 284:../src/main.cpp **** 
 285:../src/main.cpp **** 	/* wait for ADRDY */
 286:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 629              		.loc 1 286 0
 630 03da 00BF     		nop
 631              	.L17:
 632              		.loc 1 286 0 is_stmt 0 discriminator 1
 633 03dc 4FF0A040 		mov	r0, #1342177280
 634 03e0 4FF00101 		mov	r1, #1
 635 03e4 FFF7FEFF 		bl	ADC_GetFlagStatus
 636 03e8 0346     		mov	r3, r0
 637 03ea 002B     		cmp	r3, #0
 638 03ec 14BF     		ite	ne
 639 03ee 0023     		movne	r3, #0
 640 03f0 0123     		moveq	r3, #1
 641 03f2 DBB2     		uxtb	r3, r3
 642 03f4 002B     		cmp	r3, #0
 643 03f6 F1D1     		bne	.L17
 287:../src/main.cpp **** 
 288:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 289:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 644              		.loc 1 289 0 is_stmt 1
 645 03f8 4FF0A040 		mov	r0, #1342177280
 646 03fc FFF7FEFF 		bl	ADC_StartConversion
 290:../src/main.cpp **** 
 291:../src/main.cpp **** 	///////////////////
 292:../src/main.cpp **** 
 293:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 647              		.loc 1 293 0
 648 0400 4FF00100 		mov	r0, #1
 649 0404 4FF00101 		mov	r1, #1
 650 0408 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 294:../src/main.cpp **** 
 295:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 296:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 651              		.loc 1 296 0
 652 040c 07F12003 		add	r3, r7, #32
 653 0410 1846     		mov	r0, r3
 654 0412 FFF7FEFF 		bl	DMA_StructInit
 297:../src/main.cpp **** 
 298:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); //Set DMA registers to default values
 655              		.loc 1 298 0
 656 0416 4FF00800 		mov	r0, #8
 657 041a C4F20200 		movt	r0, 16386
 658 041e FFF7FEFF 		bl	DMA_DeInit
 299:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); //0x50000040; //Address of perip
 659              		.loc 1 299 0
 660 0422 4FF04003 		mov	r3, #64
 661 0426 C5F20003 		movt	r3, 20480
 662 042a 3B62     		str	r3, [r7, #32]
 300:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; //Variable to which ADC values will be
 663              		.loc 1 300 0
 664 042c 40F20003 		movw	r3, #:lower16:adcData
 665 0430 C0F20003 		movt	r3, #:upper16:adcData
 666 0434 7B62     		str	r3, [r7, #36]
 301:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 667              		.loc 1 301 0
 668 0436 4FF00003 		mov	r3, #0
 669 043a BB62     		str	r3, [r7, #40]
 302:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 670              		.loc 1 302 0
 671 043c 4FF00203 		mov	r3, #2
 672 0440 BB85     		strh	r3, [r7, #44]	@ movhi
 303:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 673              		.loc 1 303 0
 674 0442 4FF00003 		mov	r3, #0
 675 0446 3B63     		str	r3, [r7, #48]
 304:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 676              		.loc 1 304 0
 677 0448 4FF08003 		mov	r3, #128
 678 044c 7B63     		str	r3, [r7, #52]
 305:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 679              		.loc 1 305 0
 680 044e 4FF40073 		mov	r3, #512
 681 0452 BB63     		str	r3, [r7, #56]
 306:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 682              		.loc 1 306 0
 683 0454 4FF40063 		mov	r3, #2048
 684 0458 FB63     		str	r3, [r7, #60]
 307:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 685              		.loc 1 307 0
 686 045a 4FF02003 		mov	r3, #32
 687 045e 3B64     		str	r3, [r7, #64]
 308:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 688              		.loc 1 308 0
 689 0460 4FF40053 		mov	r3, #8192
 690 0464 7B64     		str	r3, [r7, #68]
 309:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 691              		.loc 1 309 0
 692 0466 4FF00003 		mov	r3, #0
 693 046a BB64     		str	r3, [r7, #72]
 310:../src/main.cpp **** 
 311:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 694              		.loc 1 311 0
 695 046c 07F12003 		add	r3, r7, #32
 696 0470 4FF00800 		mov	r0, #8
 697 0474 C4F20200 		movt	r0, 16386
 698 0478 1946     		mov	r1, r3
 699 047a FFF7FEFF 		bl	DMA_Init
 312:../src/main.cpp **** 
 313:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 314:../src/main.cpp **** 
 315:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 700              		.loc 1 315 0
 701 047e 4FF00B03 		mov	r3, #11
 702 0482 87F84C30 		strb	r3, [r7, #76]
 316:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 703              		.loc 1 316 0
 704 0486 4FF00203 		mov	r3, #2
 705 048a 87F84D30 		strb	r3, [r7, #77]
 317:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 706              		.loc 1 317 0
 707 048e 4FF00003 		mov	r3, #0
 708 0492 87F84E30 		strb	r3, [r7, #78]
 318:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 709              		.loc 1 318 0
 710 0496 4FF00103 		mov	r3, #1
 711 049a 87F84F30 		strb	r3, [r7, #79]
 319:../src/main.cpp **** 
 320:../src/main.cpp **** 	NVIC_Init(&nv);
 712              		.loc 1 320 0
 713 049e 07F14C03 		add	r3, r7, #76
 714 04a2 1846     		mov	r0, r3
 715 04a4 FFF7FEFF 		bl	NVIC_Init
 321:../src/main.cpp **** 
 322:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 716              		.loc 1 322 0
 717 04a8 4FF00800 		mov	r0, #8
 718 04ac C4F20200 		movt	r0, 16386
 719 04b0 4FF00201 		mov	r1, #2
 720 04b4 4FF00102 		mov	r2, #1
 721 04b8 FFF7FEFF 		bl	DMA_ITConfig
 323:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 722              		.loc 1 323 0
 723 04bc 4FF00800 		mov	r0, #8
 724 04c0 C4F20200 		movt	r0, 16386
 725 04c4 4FF00101 		mov	r1, #1
 726 04c8 FFF7FEFF 		bl	DMA_Cmd
 324:../src/main.cpp **** 
 325:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 727              		.loc 1 325 0
 728 04cc 4FF0A040 		mov	r0, #1342177280
 729 04d0 4FF00201 		mov	r1, #2
 730 04d4 FFF7FEFF 		bl	ADC_DMAConfig
 326:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 731              		.loc 1 326 0
 732 04d8 4FF0A040 		mov	r0, #1342177280
 733 04dc 4FF00101 		mov	r1, #1
 734 04e0 FFF7FEFF 		bl	ADC_DMACmd
 735              	.LBE5:
 327:../src/main.cpp **** }
 736              		.loc 1 327 0
 737 04e4 07F17007 		add	r7, r7, #112
 738 04e8 BD46     		mov	sp, r7
 739 04ea 80BD     		pop	{r7, pc}
 740              		.cfi_endproc
 741              	.LFE115:
 743              		.align	2
 744              		.global	_Z9adc1_initv
 745              		.thumb
 746              		.thumb_func
 748              	_Z9adc1_initv:
 749              	.LFB116:
 328:../src/main.cpp **** 
 329:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 330:../src/main.cpp **** {
 750              		.loc 1 330 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 72
 753              		@ frame_needed = 1, uses_anonymous_args = 0
 754 04ec 80B5     		push	{r7, lr}
 755              	.LCFI14:
 756              		.cfi_def_cfa_offset 8
 757              		.cfi_offset 7, -8
 758              		.cfi_offset 14, -4
 759 04ee 92B0     		sub	sp, sp, #72
 760              	.LCFI15:
 761              		.cfi_def_cfa_offset 80
 762 04f0 00AF     		add	r7, sp, #0
 763              	.LCFI16:
 764              		.cfi_def_cfa_register 7
 765              	.LBB6:
 331:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 332:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 333:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 334:../src/main.cpp **** 	/* Configure the ADC clock */
 335:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 766              		.loc 1 335 0
 767 04f2 4FF48870 		mov	r0, #272
 768 04f6 FFF7FEFF 		bl	RCC_ADCCLKConfig
 336:../src/main.cpp **** 
 337:../src/main.cpp **** 	/* Enable ADC1 clock */
 338:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 769              		.loc 1 338 0
 770 04fa 4FF08050 		mov	r0, #268435456
 771 04fe 4FF00101 		mov	r1, #1
 772 0502 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 339:../src/main.cpp **** 	/* ADC Channel configuration */
 340:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 341:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 773              		.loc 1 341 0
 774 0506 4FF40030 		mov	r0, #131072
 775 050a 4FF00101 		mov	r1, #1
 776 050e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 342:../src/main.cpp **** 
 343:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 344:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 777              		.loc 1 344 0
 778 0512 4FF00403 		mov	r3, #4
 779 0516 BB62     		str	r3, [r7, #40]
 345:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 780              		.loc 1 345 0
 781 0518 4FF00303 		mov	r3, #3
 782 051c 87F82C30 		strb	r3, [r7, #44]
 346:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 783              		.loc 1 346 0
 784 0520 4FF00003 		mov	r3, #0
 785 0524 87F82F30 		strb	r3, [r7, #47]
 347:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 786              		.loc 1 347 0
 787 0528 07F12803 		add	r3, r7, #40
 788 052c 4FF09040 		mov	r0, #1207959552
 789 0530 1946     		mov	r1, r3
 790 0532 FFF7FEFF 		bl	GPIO_Init
 348:../src/main.cpp **** 
 349:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 791              		.loc 1 349 0
 792 0536 07F10403 		add	r3, r7, #4
 793 053a 1846     		mov	r0, r3
 794 053c FFF7FEFF 		bl	ADC_StructInit
 350:../src/main.cpp **** 
 351:../src/main.cpp **** 	/* Calibration procedure */
 352:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 795              		.loc 1 352 0
 796 0540 4FF0A040 		mov	r0, #1342177280
 797 0544 4FF00101 		mov	r1, #1
 798 0548 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 353:../src/main.cpp **** 
 354:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 355:../src/main.cpp **** 	int foo;
 356:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 799              		.loc 1 356 0
 800 054c 4FF00003 		mov	r3, #0
 801 0550 7B64     		str	r3, [r7, #68]
 802 0552 07E0     		b	.L19
 803              	.L20:
 357:../src/main.cpp **** 	{
 358:../src/main.cpp **** 	  ++foo;
 804              		.loc 1 358 0 discriminator 2
 805 0554 7B6C     		ldr	r3, [r7, #68]
 806 0556 03F10103 		add	r3, r3, #1
 807 055a 7B64     		str	r3, [r7, #68]
 356:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 808              		.loc 1 356 0 discriminator 2
 809 055c 7B6C     		ldr	r3, [r7, #68]
 810 055e 03F10103 		add	r3, r3, #1
 811 0562 7B64     		str	r3, [r7, #68]
 812              	.L19:
 356:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 813              		.loc 1 356 0 is_stmt 0 discriminator 1
 814 0564 7A6C     		ldr	r2, [r7, #68]
 815 0566 47F6FF43 		movw	r3, #31999
 816 056a 9A42     		cmp	r2, r3
 817 056c CCBF     		ite	gt
 818 056e 0023     		movgt	r3, #0
 819 0570 0123     		movle	r3, #1
 820 0572 DBB2     		uxtb	r3, r3
 821 0574 002B     		cmp	r3, #0
 822 0576 EDD1     		bne	.L20
 359:../src/main.cpp **** 	}
 360:../src/main.cpp **** 
 361:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 823              		.loc 1 361 0 is_stmt 1
 824 0578 4FF0A040 		mov	r0, #1342177280
 825 057c 4FF00001 		mov	r1, #0
 826 0580 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 362:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 827              		.loc 1 362 0
 828 0584 4FF0A040 		mov	r0, #1342177280
 829 0588 FFF7FEFF 		bl	ADC_StartCalibration
 363:../src/main.cpp **** 
 364:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 830              		.loc 1 364 0
 831 058c 00BF     		nop
 832              	.L21:
 833              		.loc 1 364 0 is_stmt 0 discriminator 1
 834 058e 4FF0A040 		mov	r0, #1342177280
 835 0592 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 836 0596 0346     		mov	r3, r0
 837 0598 002B     		cmp	r3, #0
 838 059a 0CBF     		ite	eq
 839 059c 0023     		moveq	r3, #0
 840 059e 0123     		movne	r3, #1
 841 05a0 DBB2     		uxtb	r3, r3
 842 05a2 002B     		cmp	r3, #0
 843 05a4 F3D1     		bne	.L21
 365:../src/main.cpp **** 
 366:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 844              		.loc 1 366 0 is_stmt 1
 845 05a6 4FF00003 		mov	r3, #0
 846 05aa 3B63     		str	r3, [r7, #48]
 367:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 847              		.loc 1 367 0
 848 05ac 4FF00003 		mov	r3, #0
 849 05b0 7B63     		str	r3, [r7, #52]
 368:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 850              		.loc 1 368 0
 851 05b2 4FF00003 		mov	r3, #0
 852 05b6 BB63     		str	r3, [r7, #56]
 369:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 853              		.loc 1 369 0
 854 05b8 4FF00003 		mov	r3, #0
 855 05bc FB63     		str	r3, [r7, #60]
 370:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 856              		.loc 1 370 0
 857 05be 4FF00003 		mov	r3, #0
 858 05c2 87F84030 		strb	r3, [r7, #64]
 371:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 859              		.loc 1 371 0
 860 05c6 07F13003 		add	r3, r7, #48
 861 05ca 4FF0A040 		mov	r0, #1342177280
 862 05ce 1946     		mov	r1, r3
 863 05d0 FFF7FEFF 		bl	ADC_CommonInit
 372:../src/main.cpp **** 
 373:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 864              		.loc 1 373 0
 865 05d4 4FF40053 		mov	r3, #8192
 866 05d8 7B60     		str	r3, [r7, #4]
 374:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 867              		.loc 1 374 0
 868 05da 4FF00003 		mov	r3, #0
 869 05de BB60     		str	r3, [r7, #8]
 375:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 870              		.loc 1 375 0
 871 05e0 4FF00003 		mov	r3, #0
 872 05e4 FB60     		str	r3, [r7, #12]
 376:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 873              		.loc 1 376 0
 874 05e6 4FF00003 		mov	r3, #0
 875 05ea 3B61     		str	r3, [r7, #16]
 377:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 876              		.loc 1 377 0
 877 05ec 4FF00003 		mov	r3, #0
 878 05f0 7B61     		str	r3, [r7, #20]
 378:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 879              		.loc 1 378 0
 880 05f2 4FF00003 		mov	r3, #0
 881 05f6 BB61     		str	r3, [r7, #24]
 379:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 882              		.loc 1 379 0
 883 05f8 4FF00003 		mov	r3, #0
 884 05fc FB61     		str	r3, [r7, #28]
 380:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 885              		.loc 1 380 0
 886 05fe 4FF00103 		mov	r3, #1
 887 0602 87F82030 		strb	r3, [r7, #32]
 381:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 888              		.loc 1 381 0
 889 0606 07F10403 		add	r3, r7, #4
 890 060a 4FF0A040 		mov	r0, #1342177280
 891 060e 1946     		mov	r1, r3
 892 0610 FFF7FEFF 		bl	ADC_Init
 382:../src/main.cpp **** 
 383:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 384:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 893              		.loc 1 384 0
 894 0614 4FF0A040 		mov	r0, #1342177280
 895 0618 4FF00301 		mov	r1, #3
 896 061c 4FF00102 		mov	r2, #1
 897 0620 4FF00703 		mov	r3, #7
 898 0624 FFF7FEFF 		bl	ADC_RegularChannelConfig
 385:../src/main.cpp **** 
 386:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 387:../src/main.cpp **** 
 388:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;//TIM3_IRQn;	//TIM2_IRQn;
 899              		.loc 1 388 0
 900 0628 4FF01203 		mov	r3, #18
 901 062c 87F82430 		strb	r3, [r7, #36]
 389:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 902              		.loc 1 389 0
 903 0630 4FF00203 		mov	r3, #2
 904 0634 87F82530 		strb	r3, [r7, #37]
 390:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 905              		.loc 1 390 0
 906 0638 4FF00003 		mov	r3, #0
 907 063c 87F82630 		strb	r3, [r7, #38]
 391:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 908              		.loc 1 391 0
 909 0640 4FF00103 		mov	r3, #1
 910 0644 87F82730 		strb	r3, [r7, #39]
 392:../src/main.cpp **** 
 393:../src/main.cpp **** 	NVIC_Init(&nv);
 911              		.loc 1 393 0
 912 0648 07F12403 		add	r3, r7, #36
 913 064c 1846     		mov	r0, r3
 914 064e FFF7FEFF 		bl	NVIC_Init
 394:../src/main.cpp **** 
 395:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 915              		.loc 1 395 0
 916 0652 4FF0A040 		mov	r0, #1342177280
 917 0656 4FF00401 		mov	r1, #4
 918 065a 4FF00102 		mov	r2, #1
 919 065e FFF7FEFF 		bl	ADC_ITConfig
 396:../src/main.cpp **** 
 397:../src/main.cpp **** 	/* Enable ADC1 */
 398:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 920              		.loc 1 398 0
 921 0662 4FF0A040 		mov	r0, #1342177280
 922 0666 4FF00101 		mov	r1, #1
 923 066a FFF7FEFF 		bl	ADC_Cmd
 399:../src/main.cpp **** 
 400:../src/main.cpp **** 	/* wait for ADRDY */
 401:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 924              		.loc 1 401 0
 925 066e 00BF     		nop
 926              	.L22:
 927              		.loc 1 401 0 is_stmt 0 discriminator 1
 928 0670 4FF0A040 		mov	r0, #1342177280
 929 0674 4FF00101 		mov	r1, #1
 930 0678 FFF7FEFF 		bl	ADC_GetFlagStatus
 931 067c 0346     		mov	r3, r0
 932 067e 002B     		cmp	r3, #0
 933 0680 14BF     		ite	ne
 934 0682 0023     		movne	r3, #0
 935 0684 0123     		moveq	r3, #1
 936 0686 DBB2     		uxtb	r3, r3
 937 0688 002B     		cmp	r3, #0
 938 068a F1D1     		bne	.L22
 402:../src/main.cpp **** 
 403:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 404:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 939              		.loc 1 404 0 is_stmt 1
 940 068c 4FF0A040 		mov	r0, #1342177280
 941 0690 FFF7FEFF 		bl	ADC_StartConversion
 942              	.LBE6:
 405:../src/main.cpp **** }
 943              		.loc 1 405 0
 944 0694 07F14807 		add	r7, r7, #72
 945 0698 BD46     		mov	sp, r7
 946 069a 80BD     		pop	{r7, pc}
 947              		.cfi_endproc
 948              	.LFE116:
 950              		.align	2
 951              		.global	_Z13adc1_dma_initv
 952              		.thumb
 953              		.thumb_func
 955              	_Z13adc1_dma_initv:
 956              	.LFB117:
 406:../src/main.cpp **** 
 407:../src/main.cpp **** void adc1_dma_init(void) //PA2 (Channel 3), PA3 (Channel 4), PF5 (Channel 5) in use
 408:../src/main.cpp **** {
 957              		.loc 1 408 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 112
 960              		@ frame_needed = 1, uses_anonymous_args = 0
 961 069c 80B5     		push	{r7, lr}
 962              	.LCFI17:
 963              		.cfi_def_cfa_offset 8
 964              		.cfi_offset 7, -8
 965              		.cfi_offset 14, -4
 966 069e 9CB0     		sub	sp, sp, #112
 967              	.LCFI18:
 968              		.cfi_def_cfa_offset 120
 969 06a0 00AF     		add	r7, sp, #0
 970              	.LCFI19:
 971              		.cfi_def_cfa_register 7
 972              	.LBB7:
 409:../src/main.cpp **** 	ADC_InitTypeDef       	ADC_InitStructure;
 410:../src/main.cpp **** 	ADC_CommonInitTypeDef 	ADC_CommonInitStructure;
 411:../src/main.cpp **** 	GPIO_InitTypeDef      	GPIO_InitStructure;
 412:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 413:../src/main.cpp **** 
 414:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 973              		.loc 1 414 0
 974 06a2 07F10403 		add	r3, r7, #4
 975 06a6 1846     		mov	r0, r3
 976 06a8 FFF7FEFF 		bl	ADC_StructInit
 415:../src/main.cpp **** 	ADC_CommonStructInit(&ADC_CommonInitStructure);
 977              		.loc 1 415 0
 978 06ac 07F15803 		add	r3, r7, #88
 979 06b0 1846     		mov	r0, r3
 980 06b2 FFF7FEFF 		bl	ADC_CommonStructInit
 416:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 981              		.loc 1 416 0
 982 06b6 07F15003 		add	r3, r7, #80
 983 06ba 1846     		mov	r0, r3
 984 06bc FFF7FEFF 		bl	GPIO_StructInit
 417:../src/main.cpp **** 
 418:../src/main.cpp **** 	/* Configure the ADC clock */
 419:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 985              		.loc 1 419 0
 986 06c0 4FF48870 		mov	r0, #272
 987 06c4 FFF7FEFF 		bl	RCC_ADCCLKConfig
 420:../src/main.cpp **** 	/* Enable ADC1 clock */
 421:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 988              		.loc 1 421 0
 989 06c8 4FF08050 		mov	r0, #268435456
 990 06cc 4FF00101 		mov	r1, #1
 991 06d0 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 422:../src/main.cpp **** 	/* GPIOA Periph clock enable */
 423:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 992              		.loc 1 423 0
 993 06d4 4FF40030 		mov	r0, #131072
 994 06d8 4FF00101 		mov	r1, #1
 995 06dc FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 424:../src/main.cpp **** 	//Configure DMA1 - Channel1==
 425:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 996              		.loc 1 425 0
 997 06e0 4FF00100 		mov	r0, #1
 998 06e4 4FF00101 		mov	r1, #1
 999 06e8 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 426:../src/main.cpp **** 
 427:../src/main.cpp **** 	/* Configure ADC Channel 3 (PA2) as analog input */
 428:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_3;
 1000              		.loc 1 428 0
 1001 06ec 4FF00D03 		mov	r3, #13
 1002 06f0 3B65     		str	r3, [r7, #80]
 429:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1003              		.loc 1 429 0
 1004 06f2 4FF00303 		mov	r3, #3
 1005 06f6 87F85430 		strb	r3, [r7, #84]
 430:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1006              		.loc 1 430 0
 1007 06fa 4FF00003 		mov	r3, #0
 1008 06fe 87F85730 		strb	r3, [r7, #87]
 431:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1009              		.loc 1 431 0
 1010 0702 07F15003 		add	r3, r7, #80
 1011 0706 4FF09040 		mov	r0, #1207959552
 1012 070a 1946     		mov	r1, r3
 1013 070c FFF7FEFF 		bl	GPIO_Init
 432:../src/main.cpp **** 
 433:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); //Set DMA registers to default values
 1014              		.loc 1 433 0
 1015 0710 4FF00800 		mov	r0, #8
 1016 0714 C4F20200 		movt	r0, 16386
 1017 0718 FFF7FEFF 		bl	DMA_DeInit
 434:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); //0x50000040; //Address of perip
 1018              		.loc 1 434 0
 1019 071c 4FF04003 		mov	r3, #64
 1020 0720 C5F20003 		movt	r3, 20480
 1021 0724 7B62     		str	r3, [r7, #36]
 435:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; //Variable to which ADC values will be
 1022              		.loc 1 435 0
 1023 0726 40F20003 		movw	r3, #:lower16:adcData
 1024 072a C0F20003 		movt	r3, #:upper16:adcData
 1025 072e BB62     		str	r3, [r7, #40]
 436:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1026              		.loc 1 436 0
 1027 0730 4FF00003 		mov	r3, #0
 1028 0734 FB62     		str	r3, [r7, #44]
 437:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 1; //Buffer size (3 because we using three channels)
 1029              		.loc 1 437 0
 1030 0736 4FF00103 		mov	r3, #1
 1031 073a 3B86     		strh	r3, [r7, #48]	@ movhi
 438:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1032              		.loc 1 438 0
 1033 073c 4FF00003 		mov	r3, #0
 1034 0740 7B63     		str	r3, [r7, #52]
 439:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;//DMA_MemoryInc_Enable;
 1035              		.loc 1 439 0
 1036 0742 4FF00003 		mov	r3, #0
 1037 0746 BB63     		str	r3, [r7, #56]
 440:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; //HalfWord
 1038              		.loc 1 440 0
 1039 0748 4FF48073 		mov	r3, #256
 1040 074c FB63     		str	r3, [r7, #60]
 441:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;//HalfWord
 1041              		.loc 1 441 0
 1042 074e 4FF48063 		mov	r3, #1024
 1043 0752 3B64     		str	r3, [r7, #64]
 442:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1044              		.loc 1 442 0
 1045 0754 4FF02003 		mov	r3, #32
 1046 0758 7B64     		str	r3, [r7, #68]
 443:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1047              		.loc 1 443 0
 1048 075a 4FF40053 		mov	r3, #8192
 1049 075e BB64     		str	r3, [r7, #72]
 444:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1050              		.loc 1 444 0
 1051 0760 4FF00003 		mov	r3, #0
 1052 0764 FB64     		str	r3, [r7, #76]
 445:../src/main.cpp **** 
 446:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1053              		.loc 1 446 0
 1054 0766 07F12403 		add	r3, r7, #36
 1055 076a 4FF00800 		mov	r0, #8
 1056 076e C4F20200 		movt	r0, 16386
 1057 0772 1946     		mov	r1, r3
 1058 0774 FFF7FEFF 		bl	DMA_Init
 447:../src/main.cpp **** 
 448:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1059              		.loc 1 448 0
 1060 0778 4FF00800 		mov	r0, #8
 1061 077c C4F20200 		movt	r0, 16386
 1062 0780 4FF00101 		mov	r1, #1
 1063 0784 FFF7FEFF 		bl	DMA_Cmd
 449:../src/main.cpp **** 
 450:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE); // Turn on ADC1 voltage regulator
 1064              		.loc 1 450 0
 1065 0788 4FF0A040 		mov	r0, #1342177280
 1066 078c 4FF00101 		mov	r1, #1
 1067 0790 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 451:../src/main.cpp **** 
 452:../src/main.cpp **** 	int foo;
 453:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1068              		.loc 1 453 0
 1069 0794 4FF00003 		mov	r3, #0
 1070 0798 FB66     		str	r3, [r7, #108]
 1071 079a 07E0     		b	.L24
 1072              	.L25:
 454:../src/main.cpp **** 	{
 455:../src/main.cpp **** 	  ++foo;
 1073              		.loc 1 455 0 discriminator 2
 1074 079c FB6E     		ldr	r3, [r7, #108]
 1075 079e 03F10103 		add	r3, r3, #1
 1076 07a2 FB66     		str	r3, [r7, #108]
 453:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1077              		.loc 1 453 0 discriminator 2
 1078 07a4 FB6E     		ldr	r3, [r7, #108]
 1079 07a6 03F10103 		add	r3, r3, #1
 1080 07aa FB66     		str	r3, [r7, #108]
 1081              	.L24:
 453:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1082              		.loc 1 453 0 is_stmt 0 discriminator 1
 1083 07ac FA6E     		ldr	r2, [r7, #108]
 1084 07ae 47F6FF43 		movw	r3, #31999
 1085 07b2 9A42     		cmp	r2, r3
 1086 07b4 CCBF     		ite	gt
 1087 07b6 0023     		movgt	r3, #0
 1088 07b8 0123     		movle	r3, #1
 1089 07ba DBB2     		uxtb	r3, r3
 1090 07bc 002B     		cmp	r3, #0
 1091 07be EDD1     		bne	.L25
 456:../src/main.cpp **** 	}
 457:../src/main.cpp **** 
 458:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1092              		.loc 1 458 0 is_stmt 1
 1093 07c0 4FF0A040 		mov	r0, #1342177280
 1094 07c4 4FF00001 		mov	r1, #0
 1095 07c8 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 459:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1096              		.loc 1 459 0
 1097 07cc 4FF0A040 		mov	r0, #1342177280
 1098 07d0 FFF7FEFF 		bl	ADC_StartCalibration
 460:../src/main.cpp **** 
 461:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1099              		.loc 1 461 0
 1100 07d4 00BF     		nop
 1101              	.L26:
 1102              		.loc 1 461 0 is_stmt 0 discriminator 1
 1103 07d6 4FF0A040 		mov	r0, #1342177280
 1104 07da FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1105 07de 0346     		mov	r3, r0
 1106 07e0 002B     		cmp	r3, #0
 1107 07e2 0CBF     		ite	eq
 1108 07e4 0023     		moveq	r3, #0
 1109 07e6 0123     		movne	r3, #1
 1110 07e8 DBB2     		uxtb	r3, r3
 1111 07ea 002B     		cmp	r3, #0
 1112 07ec F3D1     		bne	.L26
 462:../src/main.cpp **** 
 463:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1113              		.loc 1 463 0 is_stmt 1
 1114 07ee 4FF00003 		mov	r3, #0
 1115 07f2 BB65     		str	r3, [r7, #88]
 464:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;//ADC_Clock_SynClkModeDiv4;
 1116              		.loc 1 464 0
 1117 07f4 4FF00003 		mov	r3, #0
 1118 07f8 FB65     		str	r3, [r7, #92]
 465:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;//ADC_DMAAccessMode_Disabled;
 1119              		.loc 1 465 0
 1120 07fa 4FF40043 		mov	r3, #32768
 1121 07fe 3B66     		str	r3, [r7, #96]
 466:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;//ADC_DMAMode_OneShot;
 1122              		.loc 1 466 0
 1123 0800 4FF00203 		mov	r3, #2
 1124 0804 7B66     		str	r3, [r7, #100]
 467:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0x8;//0xF;
 1125              		.loc 1 467 0
 1126 0806 4FF00803 		mov	r3, #8
 1127 080a 87F86830 		strb	r3, [r7, #104]
 468:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1128              		.loc 1 468 0
 1129 080e 07F15803 		add	r3, r7, #88
 1130 0812 4FF0A040 		mov	r0, #1342177280
 1131 0816 1946     		mov	r1, r3
 1132 0818 FFF7FEFF 		bl	ADC_CommonInit
 469:../src/main.cpp **** 
 470:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1133              		.loc 1 470 0
 1134 081c 4FF40053 		mov	r3, #8192
 1135 0820 7B60     		str	r3, [r7, #4]
 471:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1136              		.loc 1 471 0
 1137 0822 4FF00003 		mov	r3, #0
 1138 0826 BB60     		str	r3, [r7, #8]
 472:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1139              		.loc 1 472 0
 1140 0828 4FF00003 		mov	r3, #0
 1141 082c FB60     		str	r3, [r7, #12]
 473:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1142              		.loc 1 473 0
 1143 082e 4FF00003 		mov	r3, #0
 1144 0832 3B61     		str	r3, [r7, #16]
 474:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1145              		.loc 1 474 0
 1146 0834 4FF00003 		mov	r3, #0
 1147 0838 7B61     		str	r3, [r7, #20]
 475:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1148              		.loc 1 475 0
 1149 083a 4FF00003 		mov	r3, #0
 1150 083e BB61     		str	r3, [r7, #24]
 476:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1151              		.loc 1 476 0
 1152 0840 4FF00003 		mov	r3, #0
 1153 0844 FB61     		str	r3, [r7, #28]
 477:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 1154              		.loc 1 477 0
 1155 0846 4FF00103 		mov	r3, #1
 1156 084a 87F82030 		strb	r3, [r7, #32]
 478:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1157              		.loc 1 478 0
 1158 084e 07F10403 		add	r3, r7, #4
 1159 0852 4FF0A040 		mov	r0, #1342177280
 1160 0856 1946     		mov	r1, r3
 1161 0858 FFF7FEFF 		bl	ADC_Init
 479:../src/main.cpp **** 
 480:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);
 1162              		.loc 1 480 0
 1163 085c 4FF0A040 		mov	r0, #1342177280
 1164 0860 4FF00301 		mov	r1, #3
 1165 0864 4FF00102 		mov	r2, #1
 1166 0868 4FF00703 		mov	r3, #7
 1167 086c FFF7FEFF 		bl	ADC_RegularChannelConfig
 481:../src/main.cpp **** 
 482:../src/main.cpp **** //	ADC_Cmd(ADC1, ENABLE);
 483:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1168              		.loc 1 483 0
 1169 0870 4FF0A040 		mov	r0, #1342177280
 1170 0874 4FF00101 		mov	r1, #1
 1171 0878 FFF7FEFF 		bl	ADC_DMACmd
 484:../src/main.cpp **** 
 485:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1172              		.loc 1 485 0
 1173 087c 4FF0A040 		mov	r0, #1342177280
 1174 0880 4FF00001 		mov	r1, #0
 1175 0884 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 486:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1176              		.loc 1 486 0
 1177 0888 4FF0A040 		mov	r0, #1342177280
 1178 088c FFF7FEFF 		bl	ADC_StartCalibration
 487:../src/main.cpp **** 
 488:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1179              		.loc 1 488 0
 1180 0890 00BF     		nop
 1181              	.L27:
 1182              		.loc 1 488 0 is_stmt 0 discriminator 1
 1183 0892 4FF0A040 		mov	r0, #1342177280
 1184 0896 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1185 089a 0346     		mov	r3, r0
 1186 089c 002B     		cmp	r3, #0
 1187 089e 0CBF     		ite	eq
 1188 08a0 0023     		moveq	r3, #0
 1189 08a2 0123     		movne	r3, #1
 1190 08a4 DBB2     		uxtb	r3, r3
 1191 08a6 002B     		cmp	r3, #0
 1192 08a8 F3D1     		bne	.L27
 489:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1193              		.loc 1 489 0 is_stmt 1
 1194 08aa 4FF0A040 		mov	r0, #1342177280
 1195 08ae 4FF00101 		mov	r1, #1
 1196 08b2 FFF7FEFF 		bl	ADC_Cmd
 490:../src/main.cpp **** 
 491:../src/main.cpp **** 	//	 wait for ADRDY
 492:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1197              		.loc 1 492 0
 1198 08b6 00BF     		nop
 1199              	.L28:
 1200              		.loc 1 492 0 is_stmt 0 discriminator 1
 1201 08b8 4FF0A040 		mov	r0, #1342177280
 1202 08bc 4FF00101 		mov	r1, #1
 1203 08c0 FFF7FEFF 		bl	ADC_GetFlagStatus
 1204 08c4 0346     		mov	r3, r0
 1205 08c6 002B     		cmp	r3, #0
 1206 08c8 14BF     		ite	ne
 1207 08ca 0023     		movne	r3, #0
 1208 08cc 0123     		moveq	r3, #1
 1209 08ce DBB2     		uxtb	r3, r3
 1210 08d0 002B     		cmp	r3, #0
 1211 08d2 F1D1     		bne	.L28
 493:../src/main.cpp **** 
 494:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1212              		.loc 1 494 0 is_stmt 1
 1213 08d4 4FF0A040 		mov	r0, #1342177280
 1214 08d8 FFF7FEFF 		bl	ADC_StartConversion
 1215              	.LBE7:
 495:../src/main.cpp **** }
 1216              		.loc 1 495 0
 1217 08dc 07F17007 		add	r7, r7, #112
 1218 08e0 BD46     		mov	sp, r7
 1219 08e2 80BD     		pop	{r7, pc}
 1220              		.cfi_endproc
 1221              	.LFE117:
 1223              	.Letext0:
 1224              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 1225              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 1226              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 1227              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 1228              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 1229              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 1230              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 1231              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 1232              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 1233              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/ccnqOQ4c.s:25     .bss:00000000 led_iter
     /tmp/ccnqOQ4c.s:22     .bss:00000000 $d
     /tmp/ccnqOQ4c.s:32     .data:00000000 led_matrix
     /tmp/ccnqOQ4c.s:29     .data:00000000 $d
     /tmp/ccnqOQ4c.s:46     .bss:00000004 left_enc
     /tmp/ccnqOQ4c.s:52     .bss:0000002c right_enc
     /tmp/ccnqOQ4c.s:58     .bss:00000054 gyro_angle_x
     /tmp/ccnqOQ4c.s:64     .bss:00000058 gyro_bias_x
     /tmp/ccnqOQ4c.s:70     .bss:0000005c adcval
     /tmp/ccnqOQ4c.s:76     .bss:00000060 adcData
     /tmp/ccnqOQ4c.s:82     .bss:00000068 new_data
     /tmp/ccnqOQ4c.s:85     .rodata:00000000 $d
     /tmp/ccnqOQ4c.s:86     .rodata:00000000 .LC0
     /tmp/ccnqOQ4c.s:89     .text:00000000 $t
     /tmp/ccnqOQ4c.s:94     .text:00000000 main
     /tmp/ccnqOQ4c.s:468    .text:00000284 _Z15adc1_init_otherv
     /tmp/ccnqOQ4c.s:220    .text:00000100 _Z19imu_update_ISR_initv
     /tmp/ccnqOQ4c.s:377    .text:000001fc _Z14calc_gyro_biasv
     /tmp/ccnqOQ4c.s:337    .rodata:0000001c .LC1
     /tmp/ccnqOQ4c.s:346    .text:000001e4 L3GD20_TIMEOUT_UserCallback
     /tmp/ccnqOQ4c.s:459    .text:00000280 $d
     /tmp/ccnqOQ4c.s:463    .text:00000284 $t
     /tmp/ccnqOQ4c.s:748    .text:000004ec _Z9adc1_initv
     /tmp/ccnqOQ4c.s:955    .text:0000069c _Z13adc1_dma_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.50a79f075d1434c9a8bd8ee500f78677
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.7fd02f13feff23c3903ac7c4e216cd44
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z17TIM8_init_encoderv
_Z17TIM2_init_encoderv
_Z23encoder_update_ISR_initv
_Z19LED_MATRIX_ISR_initv
_Z11pwm2_outputf
printf
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
L3GD20_Read
RCC_ADCCLKConfig
RCC_AHBPeriphClockCmd
GPIO_Init
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_ITConfig
ADC_CommonStructInit
GPIO_StructInit
