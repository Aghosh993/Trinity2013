   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	led_iter
  20              		.bss
  21              		.align	2
  24              	led_iter:
  25 0000 00000000 		.space	4
  26              		.global	led_matrix
  27              		.data
  28              		.align	2
  31              	led_matrix:
  32 0000 00020000 		.word	512
  33 0004 00010000 		.word	256
  34 0008 00800000 		.word	32768
  35 000c 00200000 		.word	8192
  36 0010 00100000 		.word	4096
  37 0014 00080000 		.word	2048
  38 0018 00040000 		.word	1024
  39              		.global	left_enc
  40              		.bss
  41              		.align	2
  44              	left_enc:
  45 0004 00000000 		.space	40
  45      00000000 
  45      00000000 
  45      00000000 
  45      00000000 
  46              		.global	right_enc
  47              		.align	2
  50              	right_enc:
  51 002c 00000000 		.space	40
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	gyro_angle_x
  53              		.align	2
  56              	gyro_angle_x:
  57 0054 00000000 		.space	4
  58              		.global	gyro_bias_x
  59              		.align	2
  62              	gyro_bias_x:
  63 0058 00000000 		.space	4
  64              		.global	adcval
  65              		.align	2
  68              	adcval:
  69 005c 00000000 		.space	4
  70              		.global	adcData
  71              		.align	2
  74              	adcData:
  75 0060 00000000 		.space	8
  75      00000000 
  76              		.global	new_data
  77              		.align	2
  80              	new_data:
  81 0068 00000000 		.space	4
  82              		.global	adc2_data
  83              		.align	2
  86              	adc2_data:
  87 006c 00000000 		.space	16
  87      00000000 
  87      00000000 
  87      00000000 
  88              		.global	adc2_new_data
  91              	adc2_new_data:
  92 007c 00       		.space	1
  93              		.global	adc3_awd1
  96              	adc3_awd1:
  97 007d 00       		.space	1
  98              		.global	adc3_awd2
 101              	adc3_awd2:
 102 007e 00       		.space	1
 103              		.global	count
 104 007f 00       		.align	2
 107              	count:
 108 0080 00000000 		.space	4
 109              		.global	stage
 110              		.align	2
 113              	stage:
 114 0084 00000000 		.space	4
 115              		.global	drive_cmd
 116              		.align	2
 119              	drive_cmd:
 120 0088 00000000 		.space	4
 121              		.global	err
 122              		.align	2
 125              	err:
 126 008c 00000000 		.space	4
 127              		.global	last_err
 128              		.align	2
 131              	last_err:
 132 0090 00000000 		.space	4
 133              		.global	diff_err
 134              		.align	2
 137              	diff_err:
 138 0094 00000000 		.space	4
 139              		.global	rt
 140              		.align	2
 143              	rt:
 144 0098 00000000 		.space	4
 145              		.global	d_front
 146              		.align	2
 149              	d_front:
 150 009c 00000000 		.space	4
 151              		.global	integral
 152              		.align	2
 155              	integral:
 156 00a0 00000000 		.space	4
 157              		.global	left
 158              		.align	2
 161              	left:
 162 00a4 00000000 		.space	4
 163              		.global	right
 164              		.align	2
 167              	right:
 168 00a8 00000000 		.space	4
 169              		.global	state
 170              		.align	2
 173              	state:
 174 00ac 00000000 		.space	4
 175              		.global	match_time_counter
 176              		.align	2
 179              	match_time_counter:
 180 00b0 00000000 		.space	4
 181              		.global	t_firefight_start
 182              		.align	2
 185              	t_firefight_start:
 186 00b4 00000000 		.space	4
 187              		.global	leds_on
 188              		.align	2
 191              	leds_on:
 192 00b8 00000000 		.space	4
 193              		.section	.rodata
 194              		.align	2
 195              	.LC0:
 196 0000 25346420 		.ascii	"%4d %4d %4d\012\015\000"
 196      25346420 
 196      2534640A 
 196      0D00
 197              		.text
 198              		.align	2
 199              		.global	main
 200              		.thumb
 201              		.thumb_func
 203              	main:
 204              	.LFB111:
 205              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  *
  18:../src/main.cpp ****  * TIM1: 16-bit PWM output mode (PE14) [for BLDC control...]
  19:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  20:../src/main.cpp ****  *
  21:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  22:../src/main.cpp ****  *
  23:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  24:../src/main.cpp ****  *
  25:../src/main.cpp ****  * TIM6: LED matrix ISR
  26:../src/main.cpp ****  * TIM7: Encoder update ISR
  27:../src/main.cpp ****  *
  28:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  29:../src/main.cpp ****  *
  30:../src/main.cpp ****  *
  31:../src/main.cpp ****  * TIM17: IMU update ISR
  32:../src/main.cpp ****  *
  33:../src/main.cpp ****  * Other pins/resources used:
  34:../src/main.cpp ****  *
  35:../src/main.cpp ****  * Analog: 	PA2: adcData[0]
  36:../src/main.cpp ****  * 			PA3: adcData[1]
  37:../src/main.cpp ****  *
  38:../src/main.cpp ****  * 			PA4: adc2_data[0]
  39:../src/main.cpp ****  * 			PC4: adc2_data[1]
  40:../src/main.cpp ****  * 			PC5: adc2_data[2]
  41:../src/main.cpp ****  * 			PB2: adc2_data[3]
  42:../src/main.cpp ****  *
  43:../src/main.cpp ****  * Digital:
  44:../src/main.cpp ****  *
  45:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  46:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  47:../src/main.cpp ****  *
  48:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  49:../src/main.cpp ****  *
  50:../src/main.cpp ****  */
  51:../src/main.cpp **** 
  52:../src/main.cpp **** /*
  53:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  54:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  55:../src/main.cpp ****  */
  56:../src/main.cpp **** 
  57:../src/main.cpp **** volatile int led_iter;
  58:../src/main.cpp **** volatile int led_matrix[7] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_13,
  59:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  60:../src/main.cpp **** 
  61:../src/main.cpp **** void imu_update_ISR_init(void);
  62:../src/main.cpp **** int16_t calc_gyro_bias(void);
  63:../src/main.cpp **** 
  64:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  65:../src/main.cpp **** 
  66:../src/main.cpp **** void adc1_init_DMA(void);
  67:../src/main.cpp **** void adc2_init_DMA(void);
  68:../src/main.cpp **** void battery_watchdog_init(void);
  69:../src/main.cpp **** void adc1_init(void);
  70:../src/main.cpp **** 
  71:../src/main.cpp **** void brake_pins_init(void);
  72:../src/main.cpp **** 
  73:../src/main.cpp **** void ping_pin_init(void);
  74:../src/main.cpp **** void timer2_timebase_init(void);
  75:../src/main.cpp **** 
  76:../src/main.cpp **** void comp_init(void);
  77:../src/main.cpp **** 
  78:../src/main.cpp **** void trinity2013_waitForStart(void);
  79:../src/main.cpp **** 
  80:../src/main.cpp **** float IR_distance(int IR_ADC_VAL);
  81:../src/main.cpp **** 
  82:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  83:../src/main.cpp **** 
  84:../src/main.cpp **** encoderState left_enc, right_enc;
  85:../src/main.cpp **** 
  86:../src/main.cpp **** volatile float gyro_angle_x;
  87:../src/main.cpp **** int gyro_bias_x, adcval;
  88:../src/main.cpp **** 
  89:../src/main.cpp **** __IO uint32_t adcData[2];
  90:../src/main.cpp **** int new_data;
  91:../src/main.cpp **** 
  92:../src/main.cpp **** __IO uint32_t adc2_data[4];
  93:../src/main.cpp **** uint8_t adc2_new_data;
  94:../src/main.cpp **** 
  95:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
  96:../src/main.cpp **** 
  97:../src/main.cpp **** int count, stage;
  98:../src/main.cpp **** 
  99:../src/main.cpp **** float drive_cmd;// = 0.0f;
 100:../src/main.cpp **** float err;// = 0.0f;
 101:../src/main.cpp **** float last_err;// = 0.0f;
 102:../src/main.cpp **** float diff_err;
 103:../src/main.cpp **** float rt;// = 0.0f;
 104:../src/main.cpp **** float d_front;// = 1.0f;
 105:../src/main.cpp **** float integral;
 106:../src/main.cpp **** 
 107:../src/main.cpp **** float left, right;
 108:../src/main.cpp **** 
 109:../src/main.cpp **** int state;
 110:../src/main.cpp **** 
 111:../src/main.cpp **** float match_time_counter;
 112:../src/main.cpp **** float t_firefight_start;
 113:../src/main.cpp **** int leds_on;
 114:../src/main.cpp **** 
 115:../src/main.cpp **** // Initialize all encoder data structures to zero:
 116:../src/main.cpp **** 
 117:../src/main.cpp **** int main(void)
 118:../src/main.cpp **** {
 206              		.loc 1 118 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 32
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210 0000 80B5     		push	{r7, lr}
 211              	.LCFI0:
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 7, -8
 214              		.cfi_offset 14, -4
 215 0002 88B0     		sub	sp, sp, #32
 216              	.LCFI1:
 217              		.cfi_def_cfa_offset 40
 218 0004 00AF     		add	r7, sp, #0
 219              	.LCFI2:
 220              		.cfi_def_cfa_register 7
 221              	.LBB2:
 119:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 222              		.loc 1 119 0
 223 0006 FFF7FEFF 		bl	SystemInit
 120:../src/main.cpp **** 
 121:../src/main.cpp **** 	UART1_init(); // Debug bridge
 224              		.loc 1 121 0
 225 000a FFF7FEFF 		bl	_Z10UART1_initv
 122:../src/main.cpp **** 
 123:../src/main.cpp **** 	state = ST_READY;
 226              		.loc 1 123 0
 227 000e 40F20003 		movw	r3, #:lower16:state
 228 0012 C0F20003 		movt	r3, #:upper16:state
 229 0016 4FF0FF32 		mov	r2, #-1
 230 001a 1A60     		str	r2, [r3, #0]
 124:../src/main.cpp **** 
 125:../src/main.cpp **** 	LED_MATRIX_ISR_init();
 231              		.loc 1 125 0
 232 001c FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 126:../src/main.cpp **** 
 127:../src/main.cpp **** 	trinity2013_waitForStart();
 233              		.loc 1 127 0
 234 0020 FFF7FEFF 		bl	_Z24trinity2013_waitForStartv
 128:../src/main.cpp **** 
 129:../src/main.cpp **** 	state = ST_WANDER;
 235              		.loc 1 129 0
 236 0024 40F20003 		movw	r3, #:lower16:state
 237 0028 C0F20003 		movt	r3, #:upper16:state
 238 002c 4FF00002 		mov	r2, #0
 239 0030 1A60     		str	r2, [r3, #0]
 130:../src/main.cpp **** 
 131:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
 132:../src/main.cpp **** 
 133:../src/main.cpp **** 	adcData[0] = 0;
 240              		.loc 1 133 0
 241 0032 40F20003 		movw	r3, #:lower16:adcData
 242 0036 C0F20003 		movt	r3, #:upper16:adcData
 243 003a 4FF00002 		mov	r2, #0
 244 003e 1A60     		str	r2, [r3, #0]
 134:../src/main.cpp **** 	adcData[1] = 0;
 245              		.loc 1 134 0
 246 0040 40F20003 		movw	r3, #:lower16:adcData
 247 0044 C0F20003 		movt	r3, #:upper16:adcData
 248 0048 4FF00002 		mov	r2, #0
 249 004c 5A60     		str	r2, [r3, #4]
 135:../src/main.cpp **** 
 136:../src/main.cpp **** 	uint8_t iter = 0;
 250              		.loc 1 136 0
 251 004e 4FF00003 		mov	r3, #0
 252 0052 FB77     		strb	r3, [r7, #31]
 137:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 253              		.loc 1 137 0
 254 0054 4FF00003 		mov	r3, #0
 255 0058 FB77     		strb	r3, [r7, #31]
 256 005a 0CE0     		b	.L2
 257              	.L3:
 138:../src/main.cpp **** 	{
 139:../src/main.cpp **** 		adc2_data[iter] = 0;
 258              		.loc 1 139 0 discriminator 2
 259 005c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 260 005e 40F20003 		movw	r3, #:lower16:adc2_data
 261 0062 C0F20003 		movt	r3, #:upper16:adc2_data
 262 0066 4FF00001 		mov	r1, #0
 263 006a 43F82210 		str	r1, [r3, r2, lsl #2]
 137:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 264              		.loc 1 137 0 discriminator 2
 265 006e FB7F     		ldrb	r3, [r7, #31]
 266 0070 03F10103 		add	r3, r3, #1
 267 0074 FB77     		strb	r3, [r7, #31]
 268              	.L2:
 137:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 269              		.loc 1 137 0 is_stmt 0 discriminator 1
 270 0076 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 271 0078 062B     		cmp	r3, #6
 272 007a 8CBF     		ite	hi
 273 007c 0023     		movhi	r3, #0
 274 007e 0123     		movls	r3, #1
 275 0080 DBB2     		uxtb	r3, r3
 276 0082 002B     		cmp	r3, #0
 277 0084 EAD1     		bne	.L3
 140:../src/main.cpp **** 	}
 141:../src/main.cpp **** 
 142:../src/main.cpp **** 	adc3_awd1 = 0;
 278              		.loc 1 142 0 is_stmt 1
 279 0086 40F20003 		movw	r3, #:lower16:adc3_awd1
 280 008a C0F20003 		movt	r3, #:upper16:adc3_awd1
 281 008e 4FF00002 		mov	r2, #0
 282 0092 1A70     		strb	r2, [r3, #0]
 143:../src/main.cpp **** 	adc3_awd2 = 0;
 283              		.loc 1 143 0
 284 0094 40F20003 		movw	r3, #:lower16:adc3_awd2
 285 0098 C0F20003 		movt	r3, #:upper16:adc3_awd2
 286 009c 4FF00002 		mov	r2, #0
 287 00a0 1A70     		strb	r2, [r3, #0]
 144:../src/main.cpp **** 
 145:../src/main.cpp **** 	count = 0;
 288              		.loc 1 145 0
 289 00a2 40F20003 		movw	r3, #:lower16:count
 290 00a6 C0F20003 		movt	r3, #:upper16:count
 291 00aa 4FF00002 		mov	r2, #0
 292 00ae 1A60     		str	r2, [r3, #0]
 146:../src/main.cpp **** 	stage = 0;
 293              		.loc 1 146 0
 294 00b0 40F20003 		movw	r3, #:lower16:stage
 295 00b4 C0F20003 		movt	r3, #:upper16:stage
 296 00b8 4FF00002 		mov	r2, #0
 297 00bc 1A60     		str	r2, [r3, #0]
 147:../src/main.cpp **** 
 148:../src/main.cpp **** 	/*
 149:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 150:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 151:../src/main.cpp **** 	 */
 152:../src/main.cpp **** 
 153:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 298              		.loc 1 153 0
 299 00be 40F20000 		movw	r0, #:lower16:left_enc
 300 00c2 C0F20000 		movt	r0, #:upper16:left_enc
 301 00c6 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 154:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 302              		.loc 1 154 0
 303 00ca 40F20000 		movw	r0, #:lower16:right_enc
 304 00ce C0F20000 		movt	r0, #:upper16:right_enc
 305 00d2 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 155:../src/main.cpp **** 
 156:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 157:../src/main.cpp **** 
 158:../src/main.cpp **** 	brake_pins_init();
 306              		.loc 1 158 0
 307 00d6 FFF7FEFF 		bl	_Z15brake_pins_initv
 159:../src/main.cpp **** 	pwm_out1_init(2000);
 308              		.loc 1 159 0
 309 00da 4FF4FA60 		mov	r0, #2000
 310 00de FFF7FEFF 		bl	_Z13pwm_out1_initt
 160:../src/main.cpp **** 	pwm_out2_init(2000);
 311              		.loc 1 160 0
 312 00e2 4FF4FA60 		mov	r0, #2000
 313 00e6 FFF7FEFF 		bl	_Z13pwm_out2_initt
 161:../src/main.cpp **** 
 162:../src/main.cpp **** 	pwm_out3_init(50);
 314              		.loc 1 162 0
 315 00ea 4FF03200 		mov	r0, #50
 316 00ee FFF7FEFF 		bl	_Z13pwm_out3_initt
 163:../src/main.cpp **** 
 164:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 165:../src/main.cpp **** 
 166:../src/main.cpp **** 	TIM8_init_encoder();
 317              		.loc 1 166 0
 318 00f2 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 167:../src/main.cpp **** 	TIM4_init_encoder();
 319              		.loc 1 167 0
 320 00f6 FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 168:../src/main.cpp **** 
 169:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 170:../src/main.cpp **** 
 171:../src/main.cpp **** 	new_data = 0;
 321              		.loc 1 171 0
 322 00fa 40F20003 		movw	r3, #:lower16:new_data
 323 00fe C0F20003 		movt	r3, #:upper16:new_data
 324 0102 4FF00002 		mov	r2, #0
 325 0106 1A60     		str	r2, [r3, #0]
 172:../src/main.cpp **** 	adc2_new_data = 0;
 326              		.loc 1 172 0
 327 0108 40F20003 		movw	r3, #:lower16:adc2_new_data
 328 010c C0F20003 		movt	r3, #:upper16:adc2_new_data
 329 0110 4FF00002 		mov	r2, #0
 330 0114 1A70     		strb	r2, [r3, #0]
 173:../src/main.cpp **** 
 174:../src/main.cpp **** 	// Initialize ADC1 DMA:
 175:../src/main.cpp **** 	adc1_init_DMA();
 331              		.loc 1 175 0
 332 0116 FFF7FEFF 		bl	_Z13adc1_init_DMAv
 176:../src/main.cpp **** 
 177:../src/main.cpp **** 	// Initialize ADC2 DMA:
 178:../src/main.cpp **** 	adc2_init_DMA();
 333              		.loc 1 178 0
 334 011a FFF7FEFF 		bl	_Z13adc2_init_DMAv
 179:../src/main.cpp **** 
 180:../src/main.cpp **** 	//	battery_watchdog_init();
 181:../src/main.cpp **** 
 182:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 335              		.loc 1 182 0
 336 011e FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 183:../src/main.cpp **** 
 184:../src/main.cpp **** 	// Ping Sensor Init:
 185:../src/main.cpp **** 
 186:../src/main.cpp **** 	ping_pin_init();
 337              		.loc 1 186 0
 338 0122 FFF7FEFF 		bl	_Z13ping_pin_initv
 187:../src/main.cpp **** 	timer2_timebase_init();
 339              		.loc 1 187 0
 340 0126 FFF7FEFF 		bl	_Z20timer2_timebase_initv
 188:../src/main.cpp **** 	imu_update_ISR_init();
 341              		.loc 1 188 0
 342 012a FFF7FEFF 		bl	_Z19imu_update_ISR_initv
 189:../src/main.cpp **** 
 190:../src/main.cpp **** 	// Encoder comparator init for noise debounce:
 191:../src/main.cpp **** 	comp_init();
 343              		.loc 1 191 0
 344 012e FFF7FEFF 		bl	_Z9comp_initv
 192:../src/main.cpp **** 
 193:../src/main.cpp **** 	adcval = 0;
 345              		.loc 1 193 0
 346 0132 40F20003 		movw	r3, #:lower16:adcval
 347 0136 C0F20003 		movt	r3, #:upper16:adcval
 348 013a 4FF00002 		mov	r2, #0
 349 013e 1A60     		str	r2, [r3, #0]
 194:../src/main.cpp **** 
 195:../src/main.cpp **** 	drive_cmd = 0.0f;
 350              		.loc 1 195 0
 351 0140 40F20003 		movw	r3, #:lower16:drive_cmd
 352 0144 C0F20003 		movt	r3, #:upper16:drive_cmd
 353 0148 4FF00002 		mov	r2, #0
 354 014c 1A60     		str	r2, [r3, #0]	@ float
 196:../src/main.cpp **** 	err = 0.0f;
 355              		.loc 1 196 0
 356 014e 40F20003 		movw	r3, #:lower16:err
 357 0152 C0F20003 		movt	r3, #:upper16:err
 358 0156 4FF00002 		mov	r2, #0
 359 015a 1A60     		str	r2, [r3, #0]	@ float
 197:../src/main.cpp **** 	last_err = 0.0f;
 360              		.loc 1 197 0
 361 015c 40F20003 		movw	r3, #:lower16:last_err
 362 0160 C0F20003 		movt	r3, #:upper16:last_err
 363 0164 4FF00002 		mov	r2, #0
 364 0168 1A60     		str	r2, [r3, #0]	@ float
 198:../src/main.cpp **** 	diff_err = 0.0f;
 365              		.loc 1 198 0
 366 016a 40F20003 		movw	r3, #:lower16:diff_err
 367 016e C0F20003 		movt	r3, #:upper16:diff_err
 368 0172 4FF00002 		mov	r2, #0
 369 0176 1A60     		str	r2, [r3, #0]	@ float
 199:../src/main.cpp **** 	rt = 0.0f;
 370              		.loc 1 199 0
 371 0178 40F20003 		movw	r3, #:lower16:rt
 372 017c C0F20003 		movt	r3, #:upper16:rt
 373 0180 4FF00002 		mov	r2, #0
 374 0184 1A60     		str	r2, [r3, #0]	@ float
 200:../src/main.cpp **** 	d_front = 1.0f;
 375              		.loc 1 200 0
 376 0186 40F20003 		movw	r3, #:lower16:d_front
 377 018a C0F20003 		movt	r3, #:upper16:d_front
 378 018e 4FF07E52 		mov	r2, #1065353216
 379 0192 1A60     		str	r2, [r3, #0]	@ float
 201:../src/main.cpp **** 	integral = 0.0f;
 380              		.loc 1 201 0
 381 0194 40F20003 		movw	r3, #:lower16:integral
 382 0198 C0F20003 		movt	r3, #:upper16:integral
 383 019c 4FF00002 		mov	r2, #0
 384 01a0 1A60     		str	r2, [r3, #0]	@ float
 202:../src/main.cpp **** 
 203:../src/main.cpp **** 	int uv_avgBuf1 = 0;
 385              		.loc 1 203 0
 386 01a2 4FF00003 		mov	r3, #0
 387 01a6 BB61     		str	r3, [r7, #24]
 204:../src/main.cpp **** 	int uv_avgBuf2 = 0;
 388              		.loc 1 204 0
 389 01a8 4FF00003 		mov	r3, #0
 390 01ac 7B61     		str	r3, [r7, #20]
 205:../src/main.cpp **** 	int uv_iter = 0;
 391              		.loc 1 205 0
 392 01ae 4FF00003 		mov	r3, #0
 393 01b2 3B61     		str	r3, [r7, #16]
 206:../src/main.cpp **** 
 207:../src/main.cpp **** 	float uv1_avg, uv2_avg;
 208:../src/main.cpp **** 
 209:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 394              		.loc 1 209 0
 395 01b4 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 210:../src/main.cpp **** 	leds_on = 0;
 396              		.loc 1 210 0
 397 01b8 40F20003 		movw	r3, #:lower16:leds_on
 398 01bc C0F20003 		movt	r3, #:upper16:leds_on
 399 01c0 4FF00002 		mov	r2, #0
 400 01c4 1A60     		str	r2, [r3, #0]
 401 01c6 00E0     		b	.L15
 402              	.L17:
 211:../src/main.cpp **** 
 212:../src/main.cpp **** 	while(true)
 403              		.loc 1 212 0
 404 01c8 00BF     		nop
 405              	.L15:
 406              	.LBB3:
 213:../src/main.cpp **** 	{
 214:../src/main.cpp **** 		printf("%4d %4d %4d\n\r", (int)adcData[0] , (int)adc2_data[2], ((int)adcData[0] - (int)adc2_data[
 407              		.loc 1 214 0
 408 01ca 40F20003 		movw	r3, #:lower16:adcData
 409 01ce C0F20003 		movt	r3, #:upper16:adcData
 410 01d2 1B68     		ldr	r3, [r3, #0]
 411 01d4 1946     		mov	r1, r3
 412 01d6 40F20003 		movw	r3, #:lower16:adc2_data
 413 01da C0F20003 		movt	r3, #:upper16:adc2_data
 414 01de 9B68     		ldr	r3, [r3, #8]
 415 01e0 1A46     		mov	r2, r3
 416 01e2 40F20003 		movw	r3, #:lower16:adcData
 417 01e6 C0F20003 		movt	r3, #:upper16:adcData
 418 01ea 1B68     		ldr	r3, [r3, #0]
 419 01ec 1846     		mov	r0, r3
 420 01ee 40F20003 		movw	r3, #:lower16:adc2_data
 421 01f2 C0F20003 		movt	r3, #:upper16:adc2_data
 422 01f6 9B68     		ldr	r3, [r3, #8]
 423 01f8 C31A     		subs	r3, r0, r3
 424 01fa 40F20000 		movw	r0, #:lower16:.LC0
 425 01fe C0F20000 		movt	r0, #:upper16:.LC0
 426 0202 FFF7FEFF 		bl	printf
 427              	.LBB4:
 215:../src/main.cpp **** //		printf("%d %1.3f \n\r", (int)adc2_data[3], d_front);
 216:../src/main.cpp **** //		printf("Time elapsed since start: %1.3f \n\r", match_time_counter);
 217:../src/main.cpp **** 		if(((adc2_data[2] > UV_THRESHOLD || adcData[0] > UV_THRESHOLD)) && state == ST_WANDER) //500
 428              		.loc 1 217 0
 429 0206 40F20003 		movw	r3, #:lower16:adc2_data
 430 020a C0F20003 		movt	r3, #:upper16:adc2_data
 431 020e 9B68     		ldr	r3, [r3, #8]
 432 0210 B3F5077F 		cmp	r3, #540
 433 0214 07D8     		bhi	.L4
 434              		.loc 1 217 0 is_stmt 0 discriminator 2
 435 0216 40F20003 		movw	r3, #:lower16:adcData
 436 021a C0F20003 		movt	r3, #:upper16:adcData
 437 021e 1B68     		ldr	r3, [r3, #0]
 438 0220 B3F5077F 		cmp	r3, #540
 439 0224 09D9     		bls	.L5
 440              	.L4:
 441              		.loc 1 217 0 discriminator 1
 442 0226 40F20003 		movw	r3, #:lower16:state
 443 022a C0F20003 		movt	r3, #:upper16:state
 444 022e 1B68     		ldr	r3, [r3, #0]
 445 0230 002B     		cmp	r3, #0
 446 0232 02D1     		bne	.L5
 447              		.loc 1 217 0 discriminator 4
 448 0234 4FF00103 		mov	r3, #1
 449 0238 01E0     		b	.L6
 450              	.L5:
 451              		.loc 1 217 0 discriminator 3
 452 023a 4FF00003 		mov	r3, #0
 453              	.L6:
 454              		.loc 1 217 0 discriminator 5
 455 023e 002B     		cmp	r3, #0
 456 0240 4FD0     		beq	.L7
 218:../src/main.cpp **** 		{
 219:../src/main.cpp **** 			for(uv_iter=0; uv_iter<UV_NUMSAMPLES; ++uv_iter)
 457              		.loc 1 219 0 is_stmt 1
 458 0242 4FF00003 		mov	r3, #0
 459 0246 3B61     		str	r3, [r7, #16]
 460 0248 13E0     		b	.L8
 461              	.L9:
 220:../src/main.cpp **** 			{
 221:../src/main.cpp **** 				uv_avgBuf1 += (int)adcData[0];
 462              		.loc 1 221 0 discriminator 2
 463 024a 40F20003 		movw	r3, #:lower16:adcData
 464 024e C0F20003 		movt	r3, #:upper16:adcData
 465 0252 1B68     		ldr	r3, [r3, #0]
 466 0254 BA69     		ldr	r2, [r7, #24]
 467 0256 D318     		adds	r3, r2, r3
 468 0258 BB61     		str	r3, [r7, #24]
 222:../src/main.cpp **** 				uv_avgBuf2 += (int)adc2_data[2];
 469              		.loc 1 222 0 discriminator 2
 470 025a 40F20003 		movw	r3, #:lower16:adc2_data
 471 025e C0F20003 		movt	r3, #:upper16:adc2_data
 472 0262 9B68     		ldr	r3, [r3, #8]
 473 0264 7A69     		ldr	r2, [r7, #20]
 474 0266 D318     		adds	r3, r2, r3
 475 0268 7B61     		str	r3, [r7, #20]
 219:../src/main.cpp **** 			for(uv_iter=0; uv_iter<UV_NUMSAMPLES; ++uv_iter)
 476              		.loc 1 219 0 discriminator 2
 477 026a 3B69     		ldr	r3, [r7, #16]
 478 026c 03F10103 		add	r3, r3, #1
 479 0270 3B61     		str	r3, [r7, #16]
 480              	.L8:
 219:../src/main.cpp **** 			for(uv_iter=0; uv_iter<UV_NUMSAMPLES; ++uv_iter)
 481              		.loc 1 219 0 is_stmt 0 discriminator 1
 482 0272 3A69     		ldr	r2, [r7, #16]
 483 0274 40F22B13 		movw	r3, #299
 484 0278 9A42     		cmp	r2, r3
 485 027a CCBF     		ite	gt
 486 027c 0023     		movgt	r3, #0
 487 027e 0123     		movle	r3, #1
 488 0280 DBB2     		uxtb	r3, r3
 489 0282 002B     		cmp	r3, #0
 490 0284 E1D1     		bne	.L9
 223:../src/main.cpp **** 			}
 224:../src/main.cpp **** 			uv1_avg = (float)uv_avgBuf1/(float)UV_NUMSAMPLES;
 491              		.loc 1 224 0 is_stmt 1
 492 0286 D7ED067A 		flds	s15, [r7, #24]	@ int
 493 028a B8EEE77A 		fsitos	s14, s15
 494 028e DFED387A 		flds	s15, .L18
 495 0292 C7EE277A 		fdivs	s15, s14, s15
 496 0296 C7ED027A 		fsts	s15, [r7, #8]
 225:../src/main.cpp **** 			uv2_avg = (float)uv_avgBuf2/(float)UV_NUMSAMPLES;
 497              		.loc 1 225 0
 498 029a D7ED057A 		flds	s15, [r7, #20]	@ int
 499 029e B8EEE77A 		fsitos	s14, s15
 500 02a2 DFED337A 		flds	s15, .L18
 501 02a6 C7EE277A 		fdivs	s15, s14, s15
 502 02aa C7ED017A 		fsts	s15, [r7, #4]
 226:../src/main.cpp **** 
 227:../src/main.cpp **** 			if(uv1_avg > (float)UV_THRESHOLD || uv2_avg > (float)UV_THRESHOLD)
 503              		.loc 1 227 0
 504 02ae 97ED027A 		flds	s14, [r7, #8]
 505 02b2 DFED307A 		flds	s15, .L18+4
 506 02b6 B4EEE77A 		fcmpes	s14, s15
 507 02ba F1EE10FA 		fmstat
 508 02be 08DC     		bgt	.L10
 509              		.loc 1 227 0 is_stmt 0 discriminator 1
 510 02c0 97ED017A 		flds	s14, [r7, #4]
 511 02c4 DFED2B7A 		flds	s15, .L18+4
 512 02c8 B4EEE77A 		fcmpes	s14, s15
 513 02cc F1EE10FA 		fmstat
 514 02d0 4CDD     		ble	.L16
 515              	.L10:
 228:../src/main.cpp **** 			{
 229:../src/main.cpp **** 				state = ST_HOMING;
 516              		.loc 1 229 0 is_stmt 1
 517 02d2 40F20003 		movw	r3, #:lower16:state
 518 02d6 C0F20003 		movt	r3, #:upper16:state
 519 02da 4FF00102 		mov	r2, #1
 520 02de 1A60     		str	r2, [r3, #0]
 521              	.LBE4:
 522              	.LBE3:
 212:../src/main.cpp **** 	while(true)
 523              		.loc 1 212 0
 524 02e0 72E7     		b	.L17
 525              	.L7:
 526              	.LBB9:
 527              	.LBB8:
 528              	.LBB5:
 529              	.LBB6:
 230:../src/main.cpp **** 			}
 231:../src/main.cpp **** 
 232:../src/main.cpp **** 		}
 233:../src/main.cpp **** 		else if (state == ST_FIREFIGHT)
 530              		.loc 1 233 0
 531 02e2 40F20003 		movw	r3, #:lower16:state
 532 02e6 C0F20003 		movt	r3, #:upper16:state
 533 02ea 1B68     		ldr	r3, [r3, #0]
 534 02ec 022B     		cmp	r3, #2
 535 02ee 7FF46BAF 		bne	.L17
 536              	.LBB7:
 234:../src/main.cpp **** 		{
 235:../src/main.cpp **** 			pwm1_output(0.5);
 537              		.loc 1 235 0
 538 02f2 4FF07C50 		mov	r0, #1056964608
 539 02f6 FFF7FEFF 		bl	_Z11pwm1_outputf
 236:../src/main.cpp **** 			pwm2_output(0.5);
 540              		.loc 1 236 0
 541 02fa 4FF07C50 		mov	r0, #1056964608
 542 02fe FFF7FEFF 		bl	_Z11pwm2_outputf
 237:../src/main.cpp **** 			int jk = 0;
 543              		.loc 1 237 0
 544 0302 4FF00003 		mov	r3, #0
 545 0306 FB60     		str	r3, [r7, #12]
 238:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 546              		.loc 1 238 0
 547 0308 4FF00003 		mov	r3, #0
 548 030c FB60     		str	r3, [r7, #12]
 549 030e 09E0     		b	.L13
 550              	.L14:
 239:../src/main.cpp **** 			{
 240:../src/main.cpp **** 				pwm3_output(0.06f);
 551              		.loc 1 240 0 discriminator 2
 552 0310 4CF28F20 		movw	r0, #49807
 553 0314 C3F67550 		movt	r0, 15733
 554 0318 FFF7FEFF 		bl	_Z11pwm3_outputf
 238:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 555              		.loc 1 238 0 discriminator 2
 556 031c FB68     		ldr	r3, [r7, #12]
 557 031e 03F10103 		add	r3, r3, #1
 558 0322 FB60     		str	r3, [r7, #12]
 559              	.L13:
 238:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 560              		.loc 1 238 0 is_stmt 0 discriminator 1
 561 0324 FA68     		ldr	r2, [r7, #12]
 562 0326 41F2CF23 		movw	r3, #4815
 563 032a C0F21303 		movt	r3, 19
 564 032e 9A42     		cmp	r2, r3
 565 0330 CCBF     		ite	gt
 566 0332 0023     		movgt	r3, #0
 567 0334 0123     		movle	r3, #1
 568 0336 DBB2     		uxtb	r3, r3
 569 0338 002B     		cmp	r3, #0
 570 033a E9D1     		bne	.L14
 241:../src/main.cpp **** 			}
 242:../src/main.cpp **** 			pwm3_output(0.1f);
 571              		.loc 1 242 0 is_stmt 1
 572 033c 4CF6CD40 		movw	r0, #52429
 573 0340 C3F6CC50 		movt	r0, 15820
 574 0344 FFF7FEFF 		bl	_Z11pwm3_outputf
 243:../src/main.cpp **** 			t_firefight_start = match_time_counter;
 575              		.loc 1 243 0
 576 0348 40F20003 		movw	r3, #:lower16:match_time_counter
 577 034c C0F20003 		movt	r3, #:upper16:match_time_counter
 578 0350 1A68     		ldr	r2, [r3, #0]	@ float
 579 0352 40F20003 		movw	r3, #:lower16:t_firefight_start
 580 0356 C0F20003 		movt	r3, #:upper16:t_firefight_start
 581 035a 1A60     		str	r2, [r3, #0]	@ float
 244:../src/main.cpp **** 			state = ST_CANDLE_BLOWOUT;
 582              		.loc 1 244 0
 583 035c 40F20003 		movw	r3, #:lower16:state
 584 0360 C0F20003 		movt	r3, #:upper16:state
 585 0364 4FF00302 		mov	r2, #3
 586 0368 1A60     		str	r2, [r3, #0]
 587              	.LBE7:
 588              	.LBE6:
 589              	.LBE5:
 590              	.LBE8:
 591              	.LBE9:
 212:../src/main.cpp **** 	while(true)
 592              		.loc 1 212 0
 593 036a 2DE7     		b	.L17
 594              	.L16:
 595 036c 2CE7     		b	.L17
 596              	.L19:
 597 036e 00BF     		.align	2
 598              	.L18:
 599 0370 00009643 		.word	1133903872
 600 0374 00000744 		.word	1141309440
 601              	.LBE2:
 602              		.cfi_endproc
 603              	.LFE111:
 605              		.align	2
 606              		.global	_Z24trinity2013_waitForStartv
 607              		.thumb
 608              		.thumb_func
 610              	_Z24trinity2013_waitForStartv:
 611              	.LFB112:
 245:../src/main.cpp **** 		}
 246:../src/main.cpp **** 
 247:../src/main.cpp **** 	}
 248:../src/main.cpp **** 	return 0; // We should never manage to get here...
 249:../src/main.cpp **** }
 250:../src/main.cpp **** 
 251:../src/main.cpp **** void trinity2013_waitForStart(void)
 252:../src/main.cpp **** {
 612              		.loc 1 252 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 8
 615              		@ frame_needed = 1, uses_anonymous_args = 0
 616 0378 80B5     		push	{r7, lr}
 617              	.LCFI3:
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 7, -8
 620              		.cfi_offset 14, -4
 621 037a 82B0     		sub	sp, sp, #8
 622              	.LCFI4:
 623              		.cfi_def_cfa_offset 16
 624 037c 00AF     		add	r7, sp, #0
 625              	.LCFI5:
 626              		.cfi_def_cfa_register 7
 627              	.LBB10:
 253:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 628              		.loc 1 253 0
 629 037e 4FF48010 		mov	r0, #1048576
 630 0382 4FF00101 		mov	r1, #1
 631 0386 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 254:../src/main.cpp **** 	GPIO_DeInit(GPIOD);
 632              		.loc 1 254 0
 633 038a 4FF44060 		mov	r0, #3072
 634 038e C4F60000 		movt	r0, 18432
 635 0392 FFF7FEFF 		bl	GPIO_DeInit
 255:../src/main.cpp **** 	GPIO_InitTypeDef g;
 256:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 636              		.loc 1 256 0
 637 0396 4FF00003 		mov	r3, #0
 638 039a 3B71     		strb	r3, [r7, #4]
 257:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 639              		.loc 1 257 0
 640 039c 4FF00103 		mov	r3, #1
 641 03a0 BB71     		strb	r3, [r7, #6]
 258:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_3;
 642              		.loc 1 258 0
 643 03a2 4FF00803 		mov	r3, #8
 644 03a6 3B60     		str	r3, [r7, #0]
 259:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_DOWN;
 645              		.loc 1 259 0
 646 03a8 4FF00203 		mov	r3, #2
 647 03ac FB71     		strb	r3, [r7, #7]
 260:../src/main.cpp **** 	GPIO_Init(GPIOD,&g);
 648              		.loc 1 260 0
 649 03ae 3B46     		mov	r3, r7
 650 03b0 4FF44060 		mov	r0, #3072
 651 03b4 C4F60000 		movt	r0, 18432
 652 03b8 1946     		mov	r1, r3
 653 03ba FFF7FEFF 		bl	GPIO_Init
 261:../src/main.cpp **** 
 262:../src/main.cpp **** 	while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_3) == (uint8_t)Bit_RESET);
 654              		.loc 1 262 0
 655 03be 00BF     		nop
 656              	.L21:
 657              		.loc 1 262 0 is_stmt 0 discriminator 1
 658 03c0 4FF44060 		mov	r0, #3072
 659 03c4 C4F60000 		movt	r0, 18432
 660 03c8 4FF00801 		mov	r1, #8
 661 03cc FFF7FEFF 		bl	GPIO_ReadInputDataBit
 662 03d0 0346     		mov	r3, r0
 663 03d2 002B     		cmp	r3, #0
 664 03d4 14BF     		ite	ne
 665 03d6 0023     		movne	r3, #0
 666 03d8 0123     		moveq	r3, #1
 667 03da DBB2     		uxtb	r3, r3
 668 03dc 002B     		cmp	r3, #0
 669 03de EFD1     		bne	.L21
 263:../src/main.cpp **** 	match_time_counter = 0.0f;
 670              		.loc 1 263 0 is_stmt 1
 671 03e0 40F20003 		movw	r3, #:lower16:match_time_counter
 672 03e4 C0F20003 		movt	r3, #:upper16:match_time_counter
 673 03e8 4FF00002 		mov	r2, #0
 674 03ec 1A60     		str	r2, [r3, #0]	@ float
 264:../src/main.cpp **** 	state = ST_WANDER;
 675              		.loc 1 264 0
 676 03ee 40F20003 		movw	r3, #:lower16:state
 677 03f2 C0F20003 		movt	r3, #:upper16:state
 678 03f6 4FF00002 		mov	r2, #0
 679 03fa 1A60     		str	r2, [r3, #0]
 680              	.LBE10:
 265:../src/main.cpp **** }
 681              		.loc 1 265 0
 682 03fc 07F10807 		add	r7, r7, #8
 683 0400 BD46     		mov	sp, r7
 684 0402 80BD     		pop	{r7, pc}
 685              		.cfi_endproc
 686              	.LFE112:
 688              		.global	__aeabi_f2d
 689              		.global	__aeabi_d2f
 690              		.align	2
 691              		.global	_Z11IR_distancei
 692              		.thumb
 693              		.thumb_func
 695              	_Z11IR_distancei:
 696              	.LFB113:
 266:../src/main.cpp **** 
 267:../src/main.cpp **** float IR_distance(int IR_ADC_VAL)
 268:../src/main.cpp **** {
 697              		.loc 1 268 0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 16
 700              		@ frame_needed = 1, uses_anonymous_args = 0
 701 0404 80B5     		push	{r7, lr}
 702              	.LCFI6:
 703              		.cfi_def_cfa_offset 8
 704              		.cfi_offset 7, -8
 705              		.cfi_offset 14, -4
 706 0406 2DED028B 		fstmfdd	sp!, {d8}
 707              	.LCFI7:
 708              		.cfi_def_cfa_offset 16
 709              		.cfi_offset 80, -16
 710 040a 84B0     		sub	sp, sp, #16
 711              	.LCFI8:
 712              		.cfi_def_cfa_offset 32
 713 040c 00AF     		add	r7, sp, #0
 714              	.LCFI9:
 715              		.cfi_def_cfa_register 7
 716 040e 7860     		str	r0, [r7, #4]
 717              	.LBB11:
 269:../src/main.cpp **** 	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 718              		.loc 1 269 0
 719 0410 D7ED017A 		flds	s15, [r7, #4]	@ int
 720 0414 B8EEE77A 		fsitos	s14, s15
 721 0418 DFED537A 		flds	s15, .L24
 722 041c 67EE277A 		fmuls	s15, s14, s15
 723 0420 C7ED037A 		fsts	s15, [r7, #12]
 270:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 724              		.loc 1 270 0
 725 0424 F868     		ldr	r0, [r7, #12]	@ float
 726 0426 FFF7FEFF 		bl	__aeabi_f2d
 727 042a 0246     		mov	r2, r0
 728 042c 0B46     		mov	r3, r1
 729 042e 1046     		mov	r0, r2
 730 0430 1946     		mov	r1, r3
 731 0432 4FF00002 		mov	r2, #0
 732 0436 4FF00003 		mov	r3, #0
 733 043a C4F21803 		movt	r3, 16408
 734 043e FFF7FEFF 		bl	pow
 735 0442 0246     		mov	r2, r0
 736 0444 0B46     		mov	r3, r1
 271:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 272:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 273:../src/main.cpp **** 			+ (float)60.24);
 737              		.loc 1 273 0
 738 0446 1046     		mov	r0, r2
 739 0448 1946     		mov	r1, r3
 740 044a FFF7FEFF 		bl	__aeabi_d2f
 741 044e 07EE100A 		fmsr	s14, r0
 742 0452 DFED467A 		flds	s15, .L24+4
 743 0456 27EE278A 		fmuls	s16, s14, s15
 270:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 744              		.loc 1 270 0
 745 045a F868     		ldr	r0, [r7, #12]	@ float
 746 045c FFF7FEFF 		bl	__aeabi_f2d
 747 0460 0246     		mov	r2, r0
 748 0462 0B46     		mov	r3, r1
 749 0464 1046     		mov	r0, r2
 750 0466 1946     		mov	r1, r3
 751 0468 4FF00002 		mov	r2, #0
 752 046c 4FF00003 		mov	r3, #0
 753 0470 C4F21403 		movt	r3, 16404
 754 0474 FFF7FEFF 		bl	pow
 755 0478 0246     		mov	r2, r0
 756 047a 0B46     		mov	r3, r1
 757              		.loc 1 273 0
 758 047c 1046     		mov	r0, r2
 759 047e 1946     		mov	r1, r3
 760 0480 FFF7FEFF 		bl	__aeabi_d2f
 761 0484 07EE100A 		fmsr	s14, r0
 762 0488 DFED397A 		flds	s15, .L24+8
 763 048c 67EE277A 		fmuls	s15, s14, s15
 764 0490 38EE678A 		fsubs	s16, s16, s15
 271:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 765              		.loc 1 271 0
 766 0494 F868     		ldr	r0, [r7, #12]	@ float
 767 0496 FFF7FEFF 		bl	__aeabi_f2d
 768 049a 0246     		mov	r2, r0
 769 049c 0B46     		mov	r3, r1
 770 049e 1046     		mov	r0, r2
 771 04a0 1946     		mov	r1, r3
 772 04a2 4FF00002 		mov	r2, #0
 773 04a6 4FF00003 		mov	r3, #0
 774 04aa C4F21003 		movt	r3, 16400
 775 04ae FFF7FEFF 		bl	pow
 776 04b2 0246     		mov	r2, r0
 777 04b4 0B46     		mov	r3, r1
 778              		.loc 1 273 0
 779 04b6 1046     		mov	r0, r2
 780 04b8 1946     		mov	r1, r3
 781 04ba FFF7FEFF 		bl	__aeabi_d2f
 782 04be 07EE100A 		fmsr	s14, r0
 783 04c2 DFED2C7A 		flds	s15, .L24+12
 784 04c6 67EE277A 		fmuls	s15, s14, s15
 785 04ca 38EE278A 		fadds	s16, s16, s15
 271:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 786              		.loc 1 271 0
 787 04ce F868     		ldr	r0, [r7, #12]	@ float
 788 04d0 FFF7FEFF 		bl	__aeabi_f2d
 789 04d4 0246     		mov	r2, r0
 790 04d6 0B46     		mov	r3, r1
 791 04d8 1046     		mov	r0, r2
 792 04da 1946     		mov	r1, r3
 793 04dc 4FF00002 		mov	r2, #0
 794 04e0 4FF00003 		mov	r3, #0
 795 04e4 C4F20803 		movt	r3, 16392
 796 04e8 FFF7FEFF 		bl	pow
 797 04ec 0246     		mov	r2, r0
 798 04ee 0B46     		mov	r3, r1
 799              		.loc 1 273 0
 800 04f0 1046     		mov	r0, r2
 801 04f2 1946     		mov	r1, r3
 802 04f4 FFF7FEFF 		bl	__aeabi_d2f
 803 04f8 07EE100A 		fmsr	s14, r0
 804 04fc DFED1E7A 		flds	s15, .L24+16
 805 0500 67EE277A 		fmuls	s15, s14, s15
 806 0504 38EE678A 		fsubs	s16, s16, s15
 272:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 807              		.loc 1 272 0
 808 0508 F868     		ldr	r0, [r7, #12]	@ float
 809 050a FFF7FEFF 		bl	__aeabi_f2d
 810 050e 0246     		mov	r2, r0
 811 0510 0B46     		mov	r3, r1
 812 0512 1046     		mov	r0, r2
 813 0514 1946     		mov	r1, r3
 814 0516 4FF00002 		mov	r2, #0
 815 051a 4FF08043 		mov	r3, #1073741824
 816 051e FFF7FEFF 		bl	pow
 817 0522 0246     		mov	r2, r0
 818 0524 0B46     		mov	r3, r1
 819              		.loc 1 273 0
 820 0526 1046     		mov	r0, r2
 821 0528 1946     		mov	r1, r3
 822 052a FFF7FEFF 		bl	__aeabi_d2f
 823 052e 07EE100A 		fmsr	s14, r0
 824 0532 DFED127A 		flds	s15, .L24+20
 825 0536 67EE277A 		fmuls	s15, s14, s15
 826 053a 38EE277A 		fadds	s14, s16, s15
 827 053e D7ED036A 		flds	s13, [r7, #12]
 828 0542 DFED0F7A 		flds	s15, .L24+24
 829 0546 66EEA77A 		fmuls	s15, s13, s15
 830 054a 37EE677A 		fsubs	s14, s14, s15
 831 054e DFED0D7A 		flds	s15, .L24+28
 832 0552 77EE277A 		fadds	s15, s14, s15
 833 0556 17EE903A 		fmrs	r3, s15
 834              	.LBE11:
 274:../src/main.cpp **** }
 835              		.loc 1 274 0
 836 055a 1846     		mov	r0, r3	@ float
 837 055c 07F11007 		add	r7, r7, #16
 838 0560 BD46     		mov	sp, r7
 839 0562 BDEC028B 		fldmfdd	sp!, {d8}
 840 0566 80BD     		pop	{r7, pc}
 841              	.L25:
 842              		.align	2
 843              	.L24:
 844 0568 4A03643A 		.word	979632970
 845 056c C1CA213F 		.word	1059179201
 846 0570 27310041 		.word	1090531623
 847 0574 33332442 		.word	1109668659
 848 0578 6666DB42 		.word	1121674854
 849 057c 33B32443 		.word	1126478643
 850 0580 CDCC0A43 		.word	1124781261
 851 0584 C3F57042 		.word	1114699203
 852              		.cfi_endproc
 853              	.LFE113:
 855              		.align	2
 856              		.global	_Z19imu_update_ISR_initv
 857              		.thumb
 858              		.thumb_func
 860              	_Z19imu_update_ISR_initv:
 861              	.LFB114:
 275:../src/main.cpp **** 
 276:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 277:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 278:../src/main.cpp **** 
 279:../src/main.cpp **** void imu_update_ISR_init(void)
 280:../src/main.cpp **** {
 862              		.loc 1 280 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 24
 865              		@ frame_needed = 1, uses_anonymous_args = 0
 866 0588 80B5     		push	{r7, lr}
 867              	.LCFI10:
 868              		.cfi_def_cfa_offset 8
 869              		.cfi_offset 7, -8
 870              		.cfi_offset 14, -4
 871 058a 86B0     		sub	sp, sp, #24
 872              	.LCFI11:
 873              		.cfi_def_cfa_offset 32
 874 058c 00AF     		add	r7, sp, #0
 875              	.LCFI12:
 876              		.cfi_def_cfa_register 7
 877              	.LBB12:
 281:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 282:../src/main.cpp **** 
 283:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 878              		.loc 1 283 0
 879 058e 4FF00703 		mov	r3, #7
 880 0592 BB74     		strb	r3, [r7, #18]
 284:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 881              		.loc 1 284 0
 882 0594 4FF00003 		mov	r3, #0
 883 0598 FB74     		strb	r3, [r7, #19]
 285:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 884              		.loc 1 285 0
 885 059a 4FF00003 		mov	r3, #0
 886 059e 3B75     		strb	r3, [r7, #20]
 286:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 887              		.loc 1 286 0
 888 05a0 4FF00003 		mov	r3, #0
 889 05a4 7B75     		strb	r3, [r7, #21]
 287:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 890              		.loc 1 287 0
 891 05a6 4FF00003 		mov	r3, #0
 892 05aa BB75     		strb	r3, [r7, #22]
 288:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 893              		.loc 1 288 0
 894 05ac 4FF00003 		mov	r3, #0
 895 05b0 7B74     		strb	r3, [r7, #17]
 289:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 896              		.loc 1 289 0
 897 05b2 4FF00803 		mov	r3, #8
 898 05b6 3B74     		strb	r3, [r7, #16]
 290:../src/main.cpp **** 
 291:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 899              		.loc 1 291 0
 900 05b8 07F11003 		add	r3, r7, #16
 901 05bc 1846     		mov	r0, r3
 902 05be FFF7FEFF 		bl	L3GD20_Init
 292:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 903              		.loc 1 292 0
 904 05c2 FFF7FEFF 		bl	_Z14calc_gyro_biasv
 905 05c6 0346     		mov	r3, r0
 906 05c8 1A46     		mov	r2, r3
 907 05ca 40F20003 		movw	r3, #:lower16:gyro_bias_x
 908 05ce C0F20003 		movt	r3, #:upper16:gyro_bias_x
 909 05d2 1A60     		str	r2, [r3, #0]
 293:../src/main.cpp **** 
 294:../src/main.cpp **** 	gyro_angle_x = 0;
 910              		.loc 1 294 0
 911 05d4 40F20003 		movw	r3, #:lower16:gyro_angle_x
 912 05d8 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 913 05dc 4FF00002 		mov	r2, #0
 914 05e0 1A60     		str	r2, [r3, #0]	@ float
 295:../src/main.cpp **** 
 296:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 297:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 298:../src/main.cpp **** 
 299:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 915              		.loc 1 299 0
 916 05e2 4FF01A03 		mov	r3, #26
 917 05e6 3B73     		strb	r3, [r7, #12]
 300:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 918              		.loc 1 300 0
 919 05e8 4FF00003 		mov	r3, #0
 920 05ec 7B73     		strb	r3, [r7, #13]
 301:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 921              		.loc 1 301 0
 922 05ee 4FF00003 		mov	r3, #0
 923 05f2 BB73     		strb	r3, [r7, #14]
 302:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 924              		.loc 1 302 0
 925 05f4 4FF00103 		mov	r3, #1
 926 05f8 FB73     		strb	r3, [r7, #15]
 303:../src/main.cpp **** 
 304:../src/main.cpp **** 	NVIC_Init(&nv);
 927              		.loc 1 304 0
 928 05fa 07F10C03 		add	r3, r7, #12
 929 05fe 1846     		mov	r0, r3
 930 0600 FFF7FEFF 		bl	NVIC_Init
 305:../src/main.cpp **** 
 306:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 931              		.loc 1 306 0
 932 0604 4FF48020 		mov	r0, #262144
 933 0608 4FF00101 		mov	r1, #1
 934 060c FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 307:../src/main.cpp **** 
 308:../src/main.cpp **** 	/*
 309:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 310:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 311:../src/main.cpp **** 	 * 	  Period -> ARR
 312:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 313:../src/main.cpp **** 	 */
 314:../src/main.cpp **** 
 315:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 935              		.loc 1 315 0
 936 0610 40F28F13 		movw	r3, #399
 937 0614 7B60     		str	r3, [r7, #4]
 316:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 938              		.loc 1 316 0
 939 0616 41F61F43 		movw	r3, #7199
 940 061a 3B80     		strh	r3, [r7, #0]	@ movhi
 317:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 941              		.loc 1 317 0
 942 061c 4FF00003 		mov	r3, #0
 943 0620 BB72     		strb	r3, [r7, #10]
 318:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 944              		.loc 1 318 0
 945 0622 4FF00003 		mov	r3, #0
 946 0626 3B81     		strh	r3, [r7, #8]	@ movhi
 319:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 947              		.loc 1 319 0
 948 0628 4FF00003 		mov	r3, #0
 949 062c 7B80     		strh	r3, [r7, #2]	@ movhi
 320:../src/main.cpp **** 
 321:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 950              		.loc 1 321 0
 951 062e 3B46     		mov	r3, r7
 952 0630 4FF49040 		mov	r0, #18432
 953 0634 C4F20100 		movt	r0, 16385
 954 0638 1946     		mov	r1, r3
 955 063a FFF7FEFF 		bl	TIM_TimeBaseInit
 322:../src/main.cpp **** 
 323:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 956              		.loc 1 323 0
 957 063e 4FF49040 		mov	r0, #18432
 958 0642 C4F20100 		movt	r0, 16385
 959 0646 4FF00101 		mov	r1, #1
 960 064a 4FF00102 		mov	r2, #1
 961 064e FFF7FEFF 		bl	TIM_ITConfig
 324:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 962              		.loc 1 324 0
 963 0652 4FF49040 		mov	r0, #18432
 964 0656 C4F20100 		movt	r0, 16385
 965 065a 4FF00101 		mov	r1, #1
 966 065e FFF7FEFF 		bl	TIM_Cmd
 967              	.LBE12:
 325:../src/main.cpp **** }
 968              		.loc 1 325 0
 969 0662 07F11807 		add	r7, r7, #24
 970 0666 BD46     		mov	sp, r7
 971 0668 80BD     		pop	{r7, pc}
 972              		.cfi_endproc
 973              	.LFE114:
 975              		.section	.rodata
 976 000e 0000     		.align	2
 977              	.LC1:
 978 0010 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 978      32302072 
 978      65616420 
 978      61747465 
 978      6D707420 
 979 0043 636F6465 		.ascii	"code!!!\012\015\000"
 979      2121210A 
 979      0D00
 980 004d 000000   		.text
 981 066a 00BF     		.align	2
 982              		.global	L3GD20_TIMEOUT_UserCallback
 983              		.thumb
 984              		.thumb_func
 986              	L3GD20_TIMEOUT_UserCallback:
 987              	.LFB115:
 326:../src/main.cpp **** 
 327:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 328:../src/main.cpp **** {
 988              		.loc 1 328 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 1, uses_anonymous_args = 0
 992 066c 80B5     		push	{r7, lr}
 993              	.LCFI13:
 994              		.cfi_def_cfa_offset 8
 995              		.cfi_offset 7, -8
 996              		.cfi_offset 14, -4
 997 066e 00AF     		add	r7, sp, #0
 998              	.LCFI14:
 999              		.cfi_def_cfa_register 7
 329:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 1000              		.loc 1 329 0
 1001 0670 40F20000 		movw	r0, #:lower16:.LC1
 1002 0674 C0F20000 		movt	r0, #:upper16:.LC1
 1003 0678 FFF7FEFF 		bl	printf
 330:../src/main.cpp **** 	return 0;
 1004              		.loc 1 330 0
 1005 067c 4FF00003 		mov	r3, #0
 331:../src/main.cpp **** }
 1006              		.loc 1 331 0
 1007 0680 1846     		mov	r0, r3
 1008 0682 80BD     		pop	{r7, pc}
 1009              		.cfi_endproc
 1010              	.LFE115:
 1012              		.align	2
 1013              		.global	_Z15brake_pins_initv
 1014              		.thumb
 1015              		.thumb_func
 1017              	_Z15brake_pins_initv:
 1018              	.LFB116:
 332:../src/main.cpp **** 
 333:../src/main.cpp **** void brake_pins_init(void)
 334:../src/main.cpp **** {
 1019              		.loc 1 334 0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 8
 1022              		@ frame_needed = 1, uses_anonymous_args = 0
 1023 0684 80B5     		push	{r7, lr}
 1024              	.LCFI15:
 1025              		.cfi_def_cfa_offset 8
 1026              		.cfi_offset 7, -8
 1027              		.cfi_offset 14, -4
 1028 0686 82B0     		sub	sp, sp, #8
 1029              	.LCFI16:
 1030              		.cfi_def_cfa_offset 16
 1031 0688 00AF     		add	r7, sp, #0
 1032              	.LCFI17:
 1033              		.cfi_def_cfa_register 7
 1034              	.LBB13:
 335:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 1035              		.loc 1 335 0
 1036 068a 4FF40010 		mov	r0, #2097152
 1037 068e 4FF00101 		mov	r1, #1
 1038 0692 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 336:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 337:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1039              		.loc 1 337 0
 1040 0696 3B46     		mov	r3, r7
 1041 0698 1846     		mov	r0, r3
 1042 069a FFF7FEFF 		bl	GPIO_StructInit
 338:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1043              		.loc 1 338 0
 1044 069e 4FF00C03 		mov	r3, #12
 1045 06a2 3B60     		str	r3, [r7, #0]
 339:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 1046              		.loc 1 339 0
 1047 06a4 4FF00003 		mov	r3, #0
 1048 06a8 BB71     		strb	r3, [r7, #6]
 340:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 1049              		.loc 1 340 0
 1050 06aa 4FF00103 		mov	r3, #1
 1051 06ae 3B71     		strb	r3, [r7, #4]
 341:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1052              		.loc 1 341 0
 1053 06b0 4FF00003 		mov	r3, #0
 1054 06b4 FB71     		strb	r3, [r7, #7]
 342:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 1055              		.loc 1 342 0
 1056 06b6 4FF00203 		mov	r3, #2
 1057 06ba 7B71     		strb	r3, [r7, #5]
 343:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 1058              		.loc 1 343 0
 1059 06bc 3B46     		mov	r3, r7
 1060 06be 4FF48050 		mov	r0, #4096
 1061 06c2 C4F60000 		movt	r0, 18432
 1062 06c6 1946     		mov	r1, r3
 1063 06c8 FFF7FEFF 		bl	GPIO_Init
 344:../src/main.cpp **** 
 345:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 1064              		.loc 1 345 0
 1065 06cc 4FF48050 		mov	r0, #4096
 1066 06d0 C4F60000 		movt	r0, 18432
 1067 06d4 4FF00401 		mov	r1, #4
 1068 06d8 4FF00002 		mov	r2, #0
 1069 06dc FFF7FEFF 		bl	GPIO_WriteBit
 346:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 1070              		.loc 1 346 0
 1071 06e0 4FF48050 		mov	r0, #4096
 1072 06e4 C4F60000 		movt	r0, 18432
 1073 06e8 4FF00801 		mov	r1, #8
 1074 06ec 4FF00002 		mov	r2, #0
 1075 06f0 FFF7FEFF 		bl	GPIO_WriteBit
 1076              	.LBE13:
 347:../src/main.cpp **** }
 1077              		.loc 1 347 0
 1078 06f4 07F10807 		add	r7, r7, #8
 1079 06f8 BD46     		mov	sp, r7
 1080 06fa 80BD     		pop	{r7, pc}
 1081              		.cfi_endproc
 1082              	.LFE116:
 1084              		.align	2
 1085              		.global	_Z13ping_pin_initv
 1086              		.thumb
 1087              		.thumb_func
 1089              	_Z13ping_pin_initv:
 1090              	.LFB117:
 348:../src/main.cpp **** /*
 349:../src/main.cpp ****  * PB0: OUTPUT
 350:../src/main.cpp ****  * PC1: INPUT
 351:../src/main.cpp ****  */
 352:../src/main.cpp **** void ping_pin_init(void)
 353:../src/main.cpp **** {
 1091              		.loc 1 353 0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 8
 1094              		@ frame_needed = 1, uses_anonymous_args = 0
 1095 06fc 80B5     		push	{r7, lr}
 1096              	.LCFI18:
 1097              		.cfi_def_cfa_offset 8
 1098              		.cfi_offset 7, -8
 1099              		.cfi_offset 14, -4
 1100 06fe 82B0     		sub	sp, sp, #8
 1101              	.LCFI19:
 1102              		.cfi_def_cfa_offset 16
 1103 0700 00AF     		add	r7, sp, #0
 1104              	.LCFI20:
 1105              		.cfi_def_cfa_register 7
 1106              	.LBB14:
 354:../src/main.cpp **** 
 355:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 1107              		.loc 1 355 0
 1108 0702 4FF48800 		mov	r0, #4456448
 1109 0706 4FF00101 		mov	r1, #1
 1110 070a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 356:../src/main.cpp **** 
 357:../src/main.cpp **** 	GPIO_InitTypeDef g;
 358:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 1111              		.loc 1 358 0
 1112 070e 4FF00003 		mov	r3, #0
 1113 0712 3B71     		strb	r3, [r7, #4]
 359:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 1114              		.loc 1 359 0
 1115 0714 4FF00103 		mov	r3, #1
 1116 0718 BB71     		strb	r3, [r7, #6]
 360:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 1117              		.loc 1 360 0
 1118 071a 4FF40073 		mov	r3, #512
 1119 071e 3B60     		str	r3, [r7, #0]
 361:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1120              		.loc 1 361 0
 1121 0720 4FF00003 		mov	r3, #0
 1122 0724 FB71     		strb	r3, [r7, #7]
 362:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 1123              		.loc 1 362 0
 1124 0726 4FF00103 		mov	r3, #1
 1125 072a 7B71     		strb	r3, [r7, #5]
 363:../src/main.cpp **** 
 364:../src/main.cpp **** 	GPIO_Init(GPIOF, &g);
 1126              		.loc 1 364 0
 1127 072c 3B46     		mov	r3, r7
 1128 072e 4FF4A050 		mov	r0, #5120
 1129 0732 C4F60000 		movt	r0, 18432
 1130 0736 1946     		mov	r1, r3
 1131 0738 FFF7FEFF 		bl	GPIO_Init
 365:../src/main.cpp **** 
 366:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 1132              		.loc 1 366 0
 1133 073c 4FF00103 		mov	r3, #1
 1134 0740 3B71     		strb	r3, [r7, #4]
 367:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1135              		.loc 1 367 0
 1136 0742 4FF00003 		mov	r3, #0
 1137 0746 BB71     		strb	r3, [r7, #6]
 368:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 1138              		.loc 1 368 0
 1139 0748 4FF00103 		mov	r3, #1
 1140 074c 3B60     		str	r3, [r7, #0]
 369:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1141              		.loc 1 369 0
 1142 074e 4FF00003 		mov	r3, #0
 1143 0752 FB71     		strb	r3, [r7, #7]
 370:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 1144              		.loc 1 370 0
 1145 0754 4FF00103 		mov	r3, #1
 1146 0758 7B71     		strb	r3, [r7, #5]
 371:../src/main.cpp **** 
 372:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1147              		.loc 1 372 0
 1148 075a 3B46     		mov	r3, r7
 1149 075c 4FF48060 		mov	r0, #1024
 1150 0760 C4F60000 		movt	r0, 18432
 1151 0764 1946     		mov	r1, r3
 1152 0766 FFF7FEFF 		bl	GPIO_Init
 373:../src/main.cpp **** 
 374:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1153              		.loc 1 374 0
 1154 076a 4FF00100 		mov	r0, #1
 1155 076e 4FF00101 		mov	r1, #1
 1156 0772 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 375:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 1157              		.loc 1 375 0
 1158 0776 4FF00500 		mov	r0, #5
 1159 077a 4FF00901 		mov	r1, #9
 1160 077e FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 1161              	.LBE14:
 376:../src/main.cpp **** 
 377:../src/main.cpp **** }
 1162              		.loc 1 377 0
 1163 0782 07F10807 		add	r7, r7, #8
 1164 0786 BD46     		mov	sp, r7
 1165 0788 80BD     		pop	{r7, pc}
 1166              		.cfi_endproc
 1167              	.LFE117:
 1169 078a 00BF     		.align	2
 1170              		.global	_Z20timer2_timebase_initv
 1171              		.thumb
 1172              		.thumb_func
 1174              	_Z20timer2_timebase_initv:
 1175              	.LFB118:
 378:../src/main.cpp **** 
 379:../src/main.cpp **** void timer2_timebase_init(void)
 380:../src/main.cpp **** {
 1176              		.loc 1 380 0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 16
 1179              		@ frame_needed = 1, uses_anonymous_args = 0
 1180 078c 80B5     		push	{r7, lr}
 1181              	.LCFI21:
 1182              		.cfi_def_cfa_offset 8
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 1185 078e 84B0     		sub	sp, sp, #16
 1186              	.LCFI22:
 1187              		.cfi_def_cfa_offset 24
 1188 0790 00AF     		add	r7, sp, #0
 1189              	.LCFI23:
 1190              		.cfi_def_cfa_register 7
 1191              	.LBB15:
 381:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 382:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 1192              		.loc 1 382 0
 1193 0792 4FF00100 		mov	r0, #1
 1194 0796 4FF00101 		mov	r1, #1
 1195 079a FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 383:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 1196              		.loc 1 383 0
 1197 079e 44F24F63 		movw	r3, #17999
 1198 07a2 BB60     		str	r3, [r7, #8]
 384:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 1199              		.loc 1 384 0
 1200 07a4 4FF00003 		mov	r3, #0
 1201 07a8 BB73     		strb	r3, [r7, #14]
 385:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 1202              		.loc 1 385 0
 1203 07aa 4FF04703 		mov	r3, #71
 1204 07ae BB80     		strh	r3, [r7, #4]	@ movhi
 386:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 1205              		.loc 1 386 0
 1206 07b0 4FF00003 		mov	r3, #0
 1207 07b4 BB81     		strh	r3, [r7, #12]	@ movhi
 387:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 1208              		.loc 1 387 0
 1209 07b6 4FF00003 		mov	r3, #0
 1210 07ba FB80     		strh	r3, [r7, #6]	@ movhi
 388:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 1211              		.loc 1 388 0
 1212 07bc 07F10403 		add	r3, r7, #4
 1213 07c0 4FF08040 		mov	r0, #1073741824
 1214 07c4 1946     		mov	r1, r3
 1215 07c6 FFF7FEFF 		bl	TIM_TimeBaseInit
 389:../src/main.cpp **** 
 390:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 1216              		.loc 1 390 0
 1217 07ca 4FF08040 		mov	r0, #1073741824
 1218 07ce 4FF00001 		mov	r1, #0
 1219 07d2 FFF7FEFF 		bl	TIM_SetCounter
 1220              	.LBE15:
 391:../src/main.cpp **** }
 1221              		.loc 1 391 0
 1222 07d6 07F11007 		add	r7, r7, #16
 1223 07da BD46     		mov	sp, r7
 1224 07dc 80BD     		pop	{r7, pc}
 1225              		.cfi_endproc
 1226              	.LFE118:
 1228 07de 00BF     		.align	2
 1229              		.global	_Z9comp_initv
 1230              		.thumb
 1231              		.thumb_func
 1233              	_Z9comp_initv:
 1234              	.LFB119:
 392:../src/main.cpp **** 
 393:../src/main.cpp **** /*
 394:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 395:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 396:../src/main.cpp ****  * 			Output->	PB9
 397:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 398:../src/main.cpp ****  * 			Output->	PA8
 399:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 400:../src/main.cpp ****  * 			Output->	PB1
 401:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 402:../src/main.cpp ****  * 			Output->	PC2
 403:../src/main.cpp ****  */
 404:../src/main.cpp **** 
 405:../src/main.cpp **** void comp_init(void)
 406:../src/main.cpp **** {
 1235              		.loc 1 406 0
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 40
 1238              		@ frame_needed = 1, uses_anonymous_args = 0
 1239 07e0 80B5     		push	{r7, lr}
 1240              	.LCFI24:
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 7, -8
 1243              		.cfi_offset 14, -4
 1244 07e2 8AB0     		sub	sp, sp, #40
 1245              	.LCFI25:
 1246              		.cfi_def_cfa_offset 48
 1247 07e4 00AF     		add	r7, sp, #0
 1248              	.LCFI26:
 1249              		.cfi_def_cfa_register 7
 1250              	.LBB16:
 407:../src/main.cpp **** 	//COMP2 Init:
 408:../src/main.cpp **** 
 409:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1251              		.loc 1 409 0
 1252 07e6 4FF00100 		mov	r0, #1
 1253 07ea 4FF00101 		mov	r1, #1
 1254 07ee FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 410:../src/main.cpp **** 
 411:../src/main.cpp **** 	GPIO_InitTypeDef g;
 412:../src/main.cpp **** 
 413:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1255              		.loc 1 413 0
 1256 07f2 4FF00303 		mov	r3, #3
 1257 07f6 87F82430 		strb	r3, [r7, #36]
 414:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1258              		.loc 1 414 0
 1259 07fa 4FF00003 		mov	r3, #0
 1260 07fe 87F82730 		strb	r3, [r7, #39]
 415:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 1261              		.loc 1 415 0
 1262 0802 4FF08003 		mov	r3, #128
 1263 0806 3B62     		str	r3, [r7, #32]
 416:../src/main.cpp **** 
 417:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1264              		.loc 1 417 0
 1265 0808 4FF40030 		mov	r0, #131072
 1266 080c 4FF00101 		mov	r1, #1
 1267 0810 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 418:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 1268              		.loc 1 418 0
 1269 0814 07F12003 		add	r3, r7, #32
 1270 0818 4FF09040 		mov	r0, #1207959552
 1271 081c 1946     		mov	r1, r3
 1272 081e FFF7FEFF 		bl	GPIO_Init
 419:../src/main.cpp **** 
 420:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1273              		.loc 1 420 0
 1274 0822 4FF00203 		mov	r3, #2
 1275 0826 87F82430 		strb	r3, [r7, #36]
 421:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1276              		.loc 1 421 0
 1277 082a 4FF00003 		mov	r3, #0
 1278 082e 87F82630 		strb	r3, [r7, #38]
 422:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1279              		.loc 1 422 0
 1280 0832 4FF00003 		mov	r3, #0
 1281 0836 87F82730 		strb	r3, [r7, #39]
 423:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 1282              		.loc 1 423 0
 1283 083a 4FF40073 		mov	r3, #512
 1284 083e 3B62     		str	r3, [r7, #32]
 424:../src/main.cpp **** 
 425:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 1285              		.loc 1 425 0
 1286 0840 4FF48060 		mov	r0, #1024
 1287 0844 C4F60000 		movt	r0, 18432
 1288 0848 4FF00901 		mov	r1, #9
 1289 084c 4FF00802 		mov	r2, #8
 1290 0850 FFF7FEFF 		bl	GPIO_PinAFConfig
 426:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1291              		.loc 1 426 0
 1292 0854 07F12003 		add	r3, r7, #32
 1293 0858 4FF48060 		mov	r0, #1024
 1294 085c C4F60000 		movt	r0, 18432
 1295 0860 1946     		mov	r1, r3
 1296 0862 FFF7FEFF 		bl	GPIO_Init
 427:../src/main.cpp **** 
 428:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1297              		.loc 1 428 0
 1298 0866 4FF00000 		mov	r0, #0
 1299 086a FFF7FEFF 		bl	RCC_PCLK2Config
 429:../src/main.cpp **** 
 430:../src/main.cpp **** 	COMP_InitTypeDef c;
 431:../src/main.cpp **** 
 432:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1300              		.loc 1 432 0
 1301 086e 4FF03003 		mov	r3, #48
 1302 0872 7B60     		str	r3, [r7, #4]
 433:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1303              		.loc 1 433 0
 1304 0874 4FF00003 		mov	r3, #0
 1305 0878 BB60     		str	r3, [r7, #8]
 434:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1306              		.loc 1 434 0
 1307 087a 4FF00403 		mov	r3, #4
 1308 087e FB61     		str	r3, [r7, #28]
 435:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1309              		.loc 1 435 0
 1310 0880 4FF00003 		mov	r3, #0
 1311 0884 FB60     		str	r3, [r7, #12]
 436:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1312              		.loc 1 436 0
 1313 0886 4FF00003 		mov	r3, #0
 1314 088a 7B61     		str	r3, [r7, #20]
 437:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1315              		.loc 1 437 0
 1316 088c 4FF48033 		mov	r3, #65536
 1317 0890 BB61     		str	r3, [r7, #24]
 438:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1318              		.loc 1 438 0
 1319 0892 4FF00003 		mov	r3, #0
 1320 0896 3B61     		str	r3, [r7, #16]
 439:../src/main.cpp **** 
 440:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 1321              		.loc 1 440 0
 1322 0898 07F10403 		add	r3, r7, #4
 1323 089c 4FF00400 		mov	r0, #4
 1324 08a0 1946     		mov	r1, r3
 1325 08a2 FFF7FEFF 		bl	COMP_Init
 441:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 1326              		.loc 1 441 0
 1327 08a6 4FF00400 		mov	r0, #4
 1328 08aa 4FF00101 		mov	r1, #1
 1329 08ae FFF7FEFF 		bl	COMP_Cmd
 442:../src/main.cpp **** 
 443:../src/main.cpp **** 	//COMP3 Init:
 444:../src/main.cpp **** 
 445:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1330              		.loc 1 445 0
 1331 08b2 4FF00100 		mov	r0, #1
 1332 08b6 4FF00101 		mov	r1, #1
 1333 08ba FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 446:../src/main.cpp **** 
 447:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1334              		.loc 1 447 0
 1335 08be 4FF00303 		mov	r3, #3
 1336 08c2 87F82430 		strb	r3, [r7, #36]
 448:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1337              		.loc 1 448 0
 1338 08c6 4FF00003 		mov	r3, #0
 1339 08ca 87F82730 		strb	r3, [r7, #39]
 449:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 1340              		.loc 1 449 0
 1341 08ce 4FF48043 		mov	r3, #16384
 1342 08d2 3B62     		str	r3, [r7, #32]
 450:../src/main.cpp **** 
 451:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 1343              		.loc 1 451 0
 1344 08d4 4FF4C020 		mov	r0, #393216
 1345 08d8 4FF00101 		mov	r1, #1
 1346 08dc FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 452:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1347              		.loc 1 452 0
 1348 08e0 07F12003 		add	r3, r7, #32
 1349 08e4 4FF48060 		mov	r0, #1024
 1350 08e8 C4F60000 		movt	r0, 18432
 1351 08ec 1946     		mov	r1, r3
 1352 08ee FFF7FEFF 		bl	GPIO_Init
 453:../src/main.cpp **** 
 454:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1353              		.loc 1 454 0
 1354 08f2 4FF00203 		mov	r3, #2
 1355 08f6 87F82430 		strb	r3, [r7, #36]
 455:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1356              		.loc 1 455 0
 1357 08fa 4FF00003 		mov	r3, #0
 1358 08fe 87F82630 		strb	r3, [r7, #38]
 456:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1359              		.loc 1 456 0
 1360 0902 4FF00003 		mov	r3, #0
 1361 0906 87F82730 		strb	r3, [r7, #39]
 457:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 1362              		.loc 1 457 0
 1363 090a 4FF48073 		mov	r3, #256
 1364 090e 3B62     		str	r3, [r7, #32]
 458:../src/main.cpp **** 
 459:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 1365              		.loc 1 459 0
 1366 0910 4FF40060 		mov	r0, #2048
 1367 0914 C4F60000 		movt	r0, 18432
 1368 0918 4FF00801 		mov	r1, #8
 1369 091c 4FF00702 		mov	r2, #7
 1370 0920 FFF7FEFF 		bl	GPIO_PinAFConfig
 460:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1371              		.loc 1 460 0
 1372 0924 07F12003 		add	r3, r7, #32
 1373 0928 4FF40060 		mov	r0, #2048
 1374 092c C4F60000 		movt	r0, 18432
 1375 0930 1946     		mov	r1, r3
 1376 0932 FFF7FEFF 		bl	GPIO_Init
 461:../src/main.cpp **** 
 462:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1377              		.loc 1 462 0
 1378 0936 4FF00000 		mov	r0, #0
 1379 093a FFF7FEFF 		bl	RCC_PCLK2Config
 463:../src/main.cpp **** 
 464:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1380              		.loc 1 464 0
 1381 093e 4FF03003 		mov	r3, #48
 1382 0942 7B60     		str	r3, [r7, #4]
 465:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1383              		.loc 1 465 0
 1384 0944 4FF00003 		mov	r3, #0
 1385 0948 BB60     		str	r3, [r7, #8]
 466:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1386              		.loc 1 466 0
 1387 094a 4FF00403 		mov	r3, #4
 1388 094e FB61     		str	r3, [r7, #28]
 467:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1389              		.loc 1 467 0
 1390 0950 4FF00003 		mov	r3, #0
 1391 0954 FB60     		str	r3, [r7, #12]
 468:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1392              		.loc 1 468 0
 1393 0956 4FF00003 		mov	r3, #0
 1394 095a 7B61     		str	r3, [r7, #20]
 469:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1395              		.loc 1 469 0
 1396 095c 4FF48033 		mov	r3, #65536
 1397 0960 BB61     		str	r3, [r7, #24]
 470:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1398              		.loc 1 470 0
 1399 0962 4FF00003 		mov	r3, #0
 1400 0966 3B61     		str	r3, [r7, #16]
 471:../src/main.cpp **** 
 472:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 1401              		.loc 1 472 0
 1402 0968 07F10403 		add	r3, r7, #4
 1403 096c 4FF00800 		mov	r0, #8
 1404 0970 1946     		mov	r1, r3
 1405 0972 FFF7FEFF 		bl	COMP_Init
 473:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 1406              		.loc 1 473 0
 1407 0976 4FF00800 		mov	r0, #8
 1408 097a 4FF00101 		mov	r1, #1
 1409 097e FFF7FEFF 		bl	COMP_Cmd
 474:../src/main.cpp **** 
 475:../src/main.cpp **** 	//COMP4 Init:
 476:../src/main.cpp **** 
 477:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1410              		.loc 1 477 0
 1411 0982 4FF00100 		mov	r0, #1
 1412 0986 4FF00101 		mov	r1, #1
 1413 098a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 478:../src/main.cpp **** 
 479:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1414              		.loc 1 479 0
 1415 098e 4FF00303 		mov	r3, #3
 1416 0992 87F82430 		strb	r3, [r7, #36]
 480:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1417              		.loc 1 480 0
 1418 0996 4FF00003 		mov	r3, #0
 1419 099a 87F82730 		strb	r3, [r7, #39]
 481:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 1420              		.loc 1 481 0
 1421 099e 4FF08003 		mov	r3, #128
 1422 09a2 3B62     		str	r3, [r7, #32]
 482:../src/main.cpp **** 
 483:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 1423              		.loc 1 483 0
 1424 09a4 4FF41010 		mov	r0, #2359296
 1425 09a8 4FF00101 		mov	r1, #1
 1426 09ac FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 484:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 1427              		.loc 1 484 0
 1428 09b0 07F12003 		add	r3, r7, #32
 1429 09b4 4FF48050 		mov	r0, #4096
 1430 09b8 C4F60000 		movt	r0, 18432
 1431 09bc 1946     		mov	r1, r3
 1432 09be FFF7FEFF 		bl	GPIO_Init
 485:../src/main.cpp **** 
 486:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1433              		.loc 1 486 0
 1434 09c2 4FF00203 		mov	r3, #2
 1435 09c6 87F82430 		strb	r3, [r7, #36]
 487:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1436              		.loc 1 487 0
 1437 09ca 4FF00003 		mov	r3, #0
 1438 09ce 87F82630 		strb	r3, [r7, #38]
 488:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1439              		.loc 1 488 0
 1440 09d2 4FF00003 		mov	r3, #0
 1441 09d6 87F82730 		strb	r3, [r7, #39]
 489:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 1442              		.loc 1 489 0
 1443 09da 4FF00203 		mov	r3, #2
 1444 09de 3B62     		str	r3, [r7, #32]
 490:../src/main.cpp **** 
 491:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 1445              		.loc 1 491 0
 1446 09e0 4FF48060 		mov	r0, #1024
 1447 09e4 C4F60000 		movt	r0, 18432
 1448 09e8 4FF00101 		mov	r1, #1
 1449 09ec 4FF00802 		mov	r2, #8
 1450 09f0 FFF7FEFF 		bl	GPIO_PinAFConfig
 492:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1451              		.loc 1 492 0
 1452 09f4 07F12003 		add	r3, r7, #32
 1453 09f8 4FF48060 		mov	r0, #1024
 1454 09fc C4F60000 		movt	r0, 18432
 1455 0a00 1946     		mov	r1, r3
 1456 0a02 FFF7FEFF 		bl	GPIO_Init
 493:../src/main.cpp **** 
 494:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1457              		.loc 1 494 0
 1458 0a06 4FF00000 		mov	r0, #0
 1459 0a0a FFF7FEFF 		bl	RCC_PCLK2Config
 495:../src/main.cpp **** 
 496:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1460              		.loc 1 496 0
 1461 0a0e 4FF03003 		mov	r3, #48
 1462 0a12 7B60     		str	r3, [r7, #4]
 497:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1463              		.loc 1 497 0
 1464 0a14 4FF08003 		mov	r3, #128
 1465 0a18 BB60     		str	r3, [r7, #8]
 498:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1466              		.loc 1 498 0
 1467 0a1a 4FF00403 		mov	r3, #4
 1468 0a1e FB61     		str	r3, [r7, #28]
 499:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1469              		.loc 1 499 0
 1470 0a20 4FF00003 		mov	r3, #0
 1471 0a24 FB60     		str	r3, [r7, #12]
 500:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1472              		.loc 1 500 0
 1473 0a26 4FF00003 		mov	r3, #0
 1474 0a2a 7B61     		str	r3, [r7, #20]
 501:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1475              		.loc 1 501 0
 1476 0a2c 4FF48033 		mov	r3, #65536
 1477 0a30 BB61     		str	r3, [r7, #24]
 502:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1478              		.loc 1 502 0
 1479 0a32 4FF00003 		mov	r3, #0
 1480 0a36 3B61     		str	r3, [r7, #16]
 503:../src/main.cpp **** 
 504:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 1481              		.loc 1 504 0
 1482 0a38 07F10403 		add	r3, r7, #4
 1483 0a3c 4FF00C00 		mov	r0, #12
 1484 0a40 1946     		mov	r1, r3
 1485 0a42 FFF7FEFF 		bl	COMP_Init
 505:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 1486              		.loc 1 505 0
 1487 0a46 4FF00C00 		mov	r0, #12
 1488 0a4a 4FF00101 		mov	r1, #1
 1489 0a4e FFF7FEFF 		bl	COMP_Cmd
 506:../src/main.cpp **** 
 507:../src/main.cpp **** 	//COMP7 Init:
 508:../src/main.cpp **** 
 509:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1490              		.loc 1 509 0
 1491 0a52 4FF00100 		mov	r0, #1
 1492 0a56 4FF00101 		mov	r1, #1
 1493 0a5a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 510:../src/main.cpp **** 
 511:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1494              		.loc 1 511 0
 1495 0a5e 4FF00303 		mov	r3, #3
 1496 0a62 87F82430 		strb	r3, [r7, #36]
 512:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1497              		.loc 1 512 0
 1498 0a66 4FF00003 		mov	r3, #0
 1499 0a6a 87F82730 		strb	r3, [r7, #39]
 513:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 1500              		.loc 1 513 0
 1501 0a6e 4FF00203 		mov	r3, #2
 1502 0a72 3B62     		str	r3, [r7, #32]
 514:../src/main.cpp **** 
 515:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 1503              		.loc 1 515 0
 1504 0a74 4FF40020 		mov	r0, #524288
 1505 0a78 4FF00101 		mov	r1, #1
 1506 0a7c FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 516:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1507              		.loc 1 516 0
 1508 0a80 07F12003 		add	r3, r7, #32
 1509 0a84 4FF40060 		mov	r0, #2048
 1510 0a88 C4F60000 		movt	r0, 18432
 1511 0a8c 1946     		mov	r1, r3
 1512 0a8e FFF7FEFF 		bl	GPIO_Init
 517:../src/main.cpp **** 
 518:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1513              		.loc 1 518 0
 1514 0a92 4FF00203 		mov	r3, #2
 1515 0a96 87F82430 		strb	r3, [r7, #36]
 519:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1516              		.loc 1 519 0
 1517 0a9a 4FF00003 		mov	r3, #0
 1518 0a9e 87F82630 		strb	r3, [r7, #38]
 520:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1519              		.loc 1 520 0
 1520 0aa2 4FF00003 		mov	r3, #0
 1521 0aa6 87F82730 		strb	r3, [r7, #39]
 521:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 1522              		.loc 1 521 0
 1523 0aaa 4FF00403 		mov	r3, #4
 1524 0aae 3B62     		str	r3, [r7, #32]
 522:../src/main.cpp **** 
 523:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 1525              		.loc 1 523 0
 1526 0ab0 4FF40060 		mov	r0, #2048
 1527 0ab4 C4F60000 		movt	r0, 18432
 1528 0ab8 4FF00201 		mov	r1, #2
 1529 0abc 4FF00302 		mov	r2, #3
 1530 0ac0 FFF7FEFF 		bl	GPIO_PinAFConfig
 524:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1531              		.loc 1 524 0
 1532 0ac4 07F12003 		add	r3, r7, #32
 1533 0ac8 4FF40060 		mov	r0, #2048
 1534 0acc C4F60000 		movt	r0, 18432
 1535 0ad0 1946     		mov	r1, r3
 1536 0ad2 FFF7FEFF 		bl	GPIO_Init
 525:../src/main.cpp **** 
 526:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1537              		.loc 1 526 0
 1538 0ad6 4FF00000 		mov	r0, #0
 1539 0ada FFF7FEFF 		bl	RCC_PCLK2Config
 527:../src/main.cpp **** 
 528:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1540              		.loc 1 528 0
 1541 0ade 4FF03003 		mov	r3, #48
 1542 0ae2 7B60     		str	r3, [r7, #4]
 529:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1543              		.loc 1 529 0
 1544 0ae4 4FF08003 		mov	r3, #128
 1545 0ae8 BB60     		str	r3, [r7, #8]
 530:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1546              		.loc 1 530 0
 1547 0aea 4FF00403 		mov	r3, #4
 1548 0aee FB61     		str	r3, [r7, #28]
 531:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1549              		.loc 1 531 0
 1550 0af0 4FF00003 		mov	r3, #0
 1551 0af4 FB60     		str	r3, [r7, #12]
 532:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1552              		.loc 1 532 0
 1553 0af6 4FF00003 		mov	r3, #0
 1554 0afa 7B61     		str	r3, [r7, #20]
 533:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1555              		.loc 1 533 0
 1556 0afc 4FF48033 		mov	r3, #65536
 1557 0b00 BB61     		str	r3, [r7, #24]
 534:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1558              		.loc 1 534 0
 1559 0b02 4FF00003 		mov	r3, #0
 1560 0b06 3B61     		str	r3, [r7, #16]
 535:../src/main.cpp **** 
 536:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 1561              		.loc 1 536 0
 1562 0b08 07F10403 		add	r3, r7, #4
 1563 0b0c 4FF01800 		mov	r0, #24
 1564 0b10 1946     		mov	r1, r3
 1565 0b12 FFF7FEFF 		bl	COMP_Init
 537:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 1566              		.loc 1 537 0
 1567 0b16 4FF01800 		mov	r0, #24
 1568 0b1a 4FF00101 		mov	r1, #1
 1569 0b1e FFF7FEFF 		bl	COMP_Cmd
 1570              	.LBE16:
 538:../src/main.cpp **** }
 1571              		.loc 1 538 0
 1572 0b22 07F12807 		add	r7, r7, #40
 1573 0b26 BD46     		mov	sp, r7
 1574 0b28 80BD     		pop	{r7, pc}
 1575              		.cfi_endproc
 1576              	.LFE119:
 1578 0b2a 00BF     		.align	2
 1579              		.global	_Z14calc_gyro_biasv
 1580              		.thumb
 1581              		.thumb_func
 1583              	_Z14calc_gyro_biasv:
 1584              	.LFB120:
 539:../src/main.cpp **** 
 540:../src/main.cpp **** int16_t calc_gyro_bias(void)
 541:../src/main.cpp **** {
 1585              		.loc 1 541 0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 16
 1588              		@ frame_needed = 1, uses_anonymous_args = 0
 1589 0b2c 80B5     		push	{r7, lr}
 1590              	.LCFI27:
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 7, -8
 1593              		.cfi_offset 14, -4
 1594 0b2e 84B0     		sub	sp, sp, #16
 1595              	.LCFI28:
 1596              		.cfi_def_cfa_offset 24
 1597 0b30 00AF     		add	r7, sp, #0
 1598              	.LCFI29:
 1599              		.cfi_def_cfa_register 7
 1600              	.LBB17:
 542:../src/main.cpp **** 	int i = 0;
 1601              		.loc 1 542 0
 1602 0b32 4FF00003 		mov	r3, #0
 1603 0b36 FB60     		str	r3, [r7, #12]
 543:../src/main.cpp **** 	int accum_x = 0;
 1604              		.loc 1 543 0
 1605 0b38 4FF00003 		mov	r3, #0
 1606 0b3c BB60     		str	r3, [r7, #8]
 544:../src/main.cpp **** 
 545:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 546:../src/main.cpp **** 		uint16_t un_signed;
 547:../src/main.cpp **** 		int16_t output;
 548:../src/main.cpp **** 	} convert;
 549:../src/main.cpp **** 
 550:../src/main.cpp **** 	uint8_t bytes[2];
 551:../src/main.cpp **** 
 552:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1607              		.loc 1 552 0
 1608 0b3e 4FF00003 		mov	r3, #0
 1609 0b42 FB60     		str	r3, [r7, #12]
 1610 0b44 19E0     		b	.L34
 1611              	.L35:
 553:../src/main.cpp **** 	{
 554:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1612              		.loc 1 554 0 discriminator 2
 1613 0b46 3B46     		mov	r3, r7
 1614 0b48 1846     		mov	r0, r3
 1615 0b4a 4FF02801 		mov	r1, #40
 1616 0b4e 4FF00202 		mov	r2, #2
 1617 0b52 FFF7FEFF 		bl	L3GD20_Read
 555:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1618              		.loc 1 555 0 discriminator 2
 1619 0b56 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1620 0b58 4FEA0323 		lsl	r3, r3, #8
 1621 0b5c 9AB2     		uxth	r2, r3
 1622 0b5e 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1623 0b60 1343     		orrs	r3, r3, r2
 1624 0b62 9BB2     		uxth	r3, r3
 1625 0b64 9BB2     		uxth	r3, r3
 1626 0b66 BB80     		strh	r3, [r7, #4]	@ movhi
 556:../src/main.cpp **** 		accum_x += convert.output;
 1627              		.loc 1 556 0 discriminator 2
 1628 0b68 BB88     		ldrh	r3, [r7, #4]
 1629 0b6a 1BB2     		sxth	r3, r3
 1630 0b6c BA68     		ldr	r2, [r7, #8]
 1631 0b6e D318     		adds	r3, r2, r3
 1632 0b70 BB60     		str	r3, [r7, #8]
 552:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1633              		.loc 1 552 0 discriminator 2
 1634 0b72 FB68     		ldr	r3, [r7, #12]
 1635 0b74 03F10103 		add	r3, r3, #1
 1636 0b78 FB60     		str	r3, [r7, #12]
 1637              	.L34:
 552:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1638              		.loc 1 552 0 is_stmt 0 discriminator 1
 1639 0b7a FB68     		ldr	r3, [r7, #12]
 1640 0b7c F92B     		cmp	r3, #249
 1641 0b7e CCBF     		ite	gt
 1642 0b80 0023     		movgt	r3, #0
 1643 0b82 0123     		movle	r3, #1
 1644 0b84 DBB2     		uxtb	r3, r3
 1645 0b86 002B     		cmp	r3, #0
 1646 0b88 DDD1     		bne	.L35
 557:../src/main.cpp **** 	}
 558:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1647              		.loc 1 558 0 is_stmt 1
 1648 0b8a D7ED027A 		flds	s15, [r7, #8]	@ int
 1649 0b8e B8EEE77A 		fsitos	s14, s15
 1650 0b92 DFED077A 		flds	s15, .L37
 1651 0b96 C7EE277A 		fdivs	s15, s14, s15
 1652 0b9a FDEEE77A 		ftosizs	s15, s15
 1653 0b9e 17EE903A 		fmrs	r3, s15	@ int
 1654 0ba2 9BB2     		uxth	r3, r3
 1655 0ba4 1BB2     		sxth	r3, r3
 1656              	.LBE17:
 559:../src/main.cpp **** }
 1657              		.loc 1 559 0
 1658 0ba6 1846     		mov	r0, r3
 1659 0ba8 07F11007 		add	r7, r7, #16
 1660 0bac BD46     		mov	sp, r7
 1661 0bae 80BD     		pop	{r7, pc}
 1662              	.L38:
 1663              		.align	2
 1664              	.L37:
 1665 0bb0 00007A43 		.word	1132068864
 1666              		.cfi_endproc
 1667              	.LFE120:
 1669              		.align	2
 1670              		.global	_Z13adc1_init_DMAv
 1671              		.thumb
 1672              		.thumb_func
 1674              	_Z13adc1_init_DMAv:
 1675              	.LFB121:
 560:../src/main.cpp **** 
 561:../src/main.cpp **** /*
 562:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 563:../src/main.cpp ****  * a user-supplied location in memory
 564:../src/main.cpp ****  * @Args: None
 565:../src/main.cpp ****  * @Return Val: None
 566:../src/main.cpp ****  */
 567:../src/main.cpp **** 
 568:../src/main.cpp **** void adc1_init_DMA(void)
 569:../src/main.cpp **** {
 1676              		.loc 1 569 0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 112
 1679              		@ frame_needed = 1, uses_anonymous_args = 0
 1680 0bb4 80B5     		push	{r7, lr}
 1681              	.LCFI30:
 1682              		.cfi_def_cfa_offset 8
 1683              		.cfi_offset 7, -8
 1684              		.cfi_offset 14, -4
 1685 0bb6 9CB0     		sub	sp, sp, #112
 1686              	.LCFI31:
 1687              		.cfi_def_cfa_offset 120
 1688 0bb8 00AF     		add	r7, sp, #0
 1689              	.LCFI32:
 1690              		.cfi_def_cfa_register 7
 1691              	.LBB18:
 570:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 571:../src/main.cpp **** 
 572:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 573:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 574:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 575:../src/main.cpp **** 
 576:../src/main.cpp **** 	/* Configure the ADC clock */
 577:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1692              		.loc 1 577 0
 1693 0bba 4FF48870 		mov	r0, #272
 1694 0bbe FFF7FEFF 		bl	RCC_ADCCLKConfig
 578:../src/main.cpp **** 	/* Enable ADC1 clock */
 579:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1695              		.loc 1 579 0
 1696 0bc2 4FF08050 		mov	r0, #268435456
 1697 0bc6 4FF00101 		mov	r1, #1
 1698 0bca FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 580:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 581:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1699              		.loc 1 581 0
 1700 0bce 4FF40030 		mov	r0, #131072
 1701 0bd2 4FF00101 		mov	r1, #1
 1702 0bd6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 582:../src/main.cpp **** 
 583:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 584:../src/main.cpp **** 
 585:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1703              		.loc 1 585 0
 1704 0bda 07F15003 		add	r3, r7, #80
 1705 0bde 1846     		mov	r0, r3
 1706 0be0 FFF7FEFF 		bl	GPIO_StructInit
 586:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1707              		.loc 1 586 0
 1708 0be4 4FF00C03 		mov	r3, #12
 1709 0be8 3B65     		str	r3, [r7, #80]
 587:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1710              		.loc 1 587 0
 1711 0bea 4FF00303 		mov	r3, #3
 1712 0bee 87F85430 		strb	r3, [r7, #84]
 588:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1713              		.loc 1 588 0
 1714 0bf2 4FF00003 		mov	r3, #0
 1715 0bf6 87F85730 		strb	r3, [r7, #87]
 589:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1716              		.loc 1 589 0
 1717 0bfa 07F15003 		add	r3, r7, #80
 1718 0bfe 4FF09040 		mov	r0, #1207959552
 1719 0c02 1946     		mov	r1, r3
 1720 0c04 FFF7FEFF 		bl	GPIO_Init
 590:../src/main.cpp **** 
 591:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1721              		.loc 1 591 0
 1722 0c08 3B46     		mov	r3, r7
 1723 0c0a 1846     		mov	r0, r3
 1724 0c0c FFF7FEFF 		bl	ADC_StructInit
 592:../src/main.cpp **** 
 593:../src/main.cpp **** 	/* Calibration procedure */
 594:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1725              		.loc 1 594 0
 1726 0c10 4FF0A040 		mov	r0, #1342177280
 1727 0c14 4FF00101 		mov	r1, #1
 1728 0c18 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 595:../src/main.cpp **** 
 596:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 597:../src/main.cpp **** 	int foo;
 598:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1729              		.loc 1 598 0
 1730 0c1c 4FF00003 		mov	r3, #0
 1731 0c20 FB66     		str	r3, [r7, #108]
 1732 0c22 07E0     		b	.L40
 1733              	.L41:
 599:../src/main.cpp **** 	{
 600:../src/main.cpp **** 	  ++foo;
 1734              		.loc 1 600 0 discriminator 2
 1735 0c24 FB6E     		ldr	r3, [r7, #108]
 1736 0c26 03F10103 		add	r3, r3, #1
 1737 0c2a FB66     		str	r3, [r7, #108]
 598:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1738              		.loc 1 598 0 discriminator 2
 1739 0c2c FB6E     		ldr	r3, [r7, #108]
 1740 0c2e 03F10103 		add	r3, r3, #1
 1741 0c32 FB66     		str	r3, [r7, #108]
 1742              	.L40:
 598:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1743              		.loc 1 598 0 is_stmt 0 discriminator 1
 1744 0c34 FA6E     		ldr	r2, [r7, #108]
 1745 0c36 4FF6FF13 		movw	r3, #63999
 1746 0c3a 9A42     		cmp	r2, r3
 1747 0c3c CCBF     		ite	gt
 1748 0c3e 0023     		movgt	r3, #0
 1749 0c40 0123     		movle	r3, #1
 1750 0c42 DBB2     		uxtb	r3, r3
 1751 0c44 002B     		cmp	r3, #0
 1752 0c46 EDD1     		bne	.L41
 601:../src/main.cpp **** 	}
 602:../src/main.cpp **** 
 603:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1753              		.loc 1 603 0 is_stmt 1
 1754 0c48 4FF0A040 		mov	r0, #1342177280
 1755 0c4c 4FF00001 		mov	r1, #0
 1756 0c50 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 604:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1757              		.loc 1 604 0
 1758 0c54 4FF0A040 		mov	r0, #1342177280
 1759 0c58 FFF7FEFF 		bl	ADC_StartCalibration
 605:../src/main.cpp **** 
 606:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1760              		.loc 1 606 0
 1761 0c5c 00BF     		nop
 1762              	.L42:
 1763              		.loc 1 606 0 is_stmt 0 discriminator 1
 1764 0c5e 4FF0A040 		mov	r0, #1342177280
 1765 0c62 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1766 0c66 0346     		mov	r3, r0
 1767 0c68 002B     		cmp	r3, #0
 1768 0c6a 0CBF     		ite	eq
 1769 0c6c 0023     		moveq	r3, #0
 1770 0c6e 0123     		movne	r3, #1
 1771 0c70 DBB2     		uxtb	r3, r3
 1772 0c72 002B     		cmp	r3, #0
 1773 0c74 F3D1     		bne	.L42
 607:../src/main.cpp **** 
 608:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1774              		.loc 1 608 0 is_stmt 1
 1775 0c76 4FF00003 		mov	r3, #0
 1776 0c7a BB65     		str	r3, [r7, #88]
 609:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 1777              		.loc 1 609 0
 1778 0c7c 4FF00003 		mov	r3, #0
 1779 0c80 FB65     		str	r3, [r7, #92]
 610:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1780              		.loc 1 610 0
 1781 0c82 4FF40043 		mov	r3, #32768
 1782 0c86 3B66     		str	r3, [r7, #96]
 611:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1783              		.loc 1 611 0
 1784 0c88 4FF00203 		mov	r3, #2
 1785 0c8c 7B66     		str	r3, [r7, #100]
 612:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1786              		.loc 1 612 0
 1787 0c8e 4FF00F03 		mov	r3, #15
 1788 0c92 87F86830 		strb	r3, [r7, #104]
 613:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1789              		.loc 1 613 0
 1790 0c96 07F15803 		add	r3, r7, #88
 1791 0c9a 4FF0A040 		mov	r0, #1342177280
 1792 0c9e 1946     		mov	r1, r3
 1793 0ca0 FFF7FEFF 		bl	ADC_CommonInit
 614:../src/main.cpp **** 
 615:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1794              		.loc 1 615 0
 1795 0ca4 4FF40053 		mov	r3, #8192
 1796 0ca8 3B60     		str	r3, [r7, #0]
 616:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1797              		.loc 1 616 0
 1798 0caa 4FF00003 		mov	r3, #0
 1799 0cae 7B60     		str	r3, [r7, #4]
 617:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1800              		.loc 1 617 0
 1801 0cb0 4FF00003 		mov	r3, #0
 1802 0cb4 BB60     		str	r3, [r7, #8]
 618:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1803              		.loc 1 618 0
 1804 0cb6 4FF00003 		mov	r3, #0
 1805 0cba FB60     		str	r3, [r7, #12]
 619:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1806              		.loc 1 619 0
 1807 0cbc 4FF00003 		mov	r3, #0
 1808 0cc0 3B61     		str	r3, [r7, #16]
 620:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1809              		.loc 1 620 0
 1810 0cc2 4FF00003 		mov	r3, #0
 1811 0cc6 7B61     		str	r3, [r7, #20]
 621:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1812              		.loc 1 621 0
 1813 0cc8 4FF00003 		mov	r3, #0
 1814 0ccc BB61     		str	r3, [r7, #24]
 622:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1815              		.loc 1 622 0
 1816 0cce 4FF00203 		mov	r3, #2
 1817 0cd2 3B77     		strb	r3, [r7, #28]
 623:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1818              		.loc 1 623 0
 1819 0cd4 3B46     		mov	r3, r7
 1820 0cd6 4FF0A040 		mov	r0, #1342177280
 1821 0cda 1946     		mov	r1, r3
 1822 0cdc FFF7FEFF 		bl	ADC_Init
 624:../src/main.cpp **** 
 625:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 626:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1823              		.loc 1 626 0
 1824 0ce0 4FF0A040 		mov	r0, #1342177280
 1825 0ce4 4FF00301 		mov	r1, #3
 1826 0ce8 4FF00102 		mov	r2, #1
 1827 0cec 4FF00703 		mov	r3, #7
 1828 0cf0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 627:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1829              		.loc 1 627 0
 1830 0cf4 4FF0A040 		mov	r0, #1342177280
 1831 0cf8 4FF00401 		mov	r1, #4
 1832 0cfc 4FF00202 		mov	r2, #2
 1833 0d00 4FF00703 		mov	r3, #7
 1834 0d04 FFF7FEFF 		bl	ADC_RegularChannelConfig
 628:../src/main.cpp **** 
 629:../src/main.cpp **** 	/* Enable ADC1 */
 630:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1835              		.loc 1 630 0
 1836 0d08 4FF0A040 		mov	r0, #1342177280
 1837 0d0c 4FF00101 		mov	r1, #1
 1838 0d10 FFF7FEFF 		bl	ADC_Cmd
 631:../src/main.cpp **** 
 632:../src/main.cpp **** 	/* wait for ADRDY */
 633:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1839              		.loc 1 633 0
 1840 0d14 00BF     		nop
 1841              	.L43:
 1842              		.loc 1 633 0 is_stmt 0 discriminator 1
 1843 0d16 4FF0A040 		mov	r0, #1342177280
 1844 0d1a 4FF00101 		mov	r1, #1
 1845 0d1e FFF7FEFF 		bl	ADC_GetFlagStatus
 1846 0d22 0346     		mov	r3, r0
 1847 0d24 002B     		cmp	r3, #0
 1848 0d26 14BF     		ite	ne
 1849 0d28 0023     		movne	r3, #0
 1850 0d2a 0123     		moveq	r3, #1
 1851 0d2c DBB2     		uxtb	r3, r3
 1852 0d2e 002B     		cmp	r3, #0
 1853 0d30 F1D1     		bne	.L43
 634:../src/main.cpp **** 
 635:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 636:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1854              		.loc 1 636 0 is_stmt 1
 1855 0d32 4FF0A040 		mov	r0, #1342177280
 1856 0d36 FFF7FEFF 		bl	ADC_StartConversion
 637:../src/main.cpp **** 
 638:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1857              		.loc 1 638 0
 1858 0d3a 4FF00100 		mov	r0, #1
 1859 0d3e 4FF00101 		mov	r1, #1
 1860 0d42 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 639:../src/main.cpp **** 
 640:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 641:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1861              		.loc 1 641 0
 1862 0d46 07F12003 		add	r3, r7, #32
 1863 0d4a 1846     		mov	r0, r3
 1864 0d4c FFF7FEFF 		bl	DMA_StructInit
 642:../src/main.cpp **** 
 643:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1865              		.loc 1 643 0
 1866 0d50 4FF00800 		mov	r0, #8
 1867 0d54 C4F20200 		movt	r0, 16386
 1868 0d58 FFF7FEFF 		bl	DMA_DeInit
 644:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1869              		.loc 1 644 0
 1870 0d5c 4FF04003 		mov	r3, #64
 1871 0d60 C5F20003 		movt	r3, 20480
 1872 0d64 3B62     		str	r3, [r7, #32]
 645:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1873              		.loc 1 645 0
 1874 0d66 40F20003 		movw	r3, #:lower16:adcData
 1875 0d6a C0F20003 		movt	r3, #:upper16:adcData
 1876 0d6e 7B62     		str	r3, [r7, #36]
 646:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1877              		.loc 1 646 0
 1878 0d70 4FF00003 		mov	r3, #0
 1879 0d74 BB62     		str	r3, [r7, #40]
 647:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1880              		.loc 1 647 0
 1881 0d76 4FF00203 		mov	r3, #2
 1882 0d7a BB85     		strh	r3, [r7, #44]	@ movhi
 648:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1883              		.loc 1 648 0
 1884 0d7c 4FF00003 		mov	r3, #0
 1885 0d80 3B63     		str	r3, [r7, #48]
 649:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1886              		.loc 1 649 0
 1887 0d82 4FF08003 		mov	r3, #128
 1888 0d86 7B63     		str	r3, [r7, #52]
 650:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1889              		.loc 1 650 0
 1890 0d88 4FF40073 		mov	r3, #512
 1891 0d8c BB63     		str	r3, [r7, #56]
 651:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1892              		.loc 1 651 0
 1893 0d8e 4FF40063 		mov	r3, #2048
 1894 0d92 FB63     		str	r3, [r7, #60]
 652:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1895              		.loc 1 652 0
 1896 0d94 4FF02003 		mov	r3, #32
 1897 0d98 3B64     		str	r3, [r7, #64]
 653:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1898              		.loc 1 653 0
 1899 0d9a 4FF40053 		mov	r3, #8192
 1900 0d9e 7B64     		str	r3, [r7, #68]
 654:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1901              		.loc 1 654 0
 1902 0da0 4FF00003 		mov	r3, #0
 1903 0da4 BB64     		str	r3, [r7, #72]
 655:../src/main.cpp **** 
 656:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1904              		.loc 1 656 0
 1905 0da6 07F12003 		add	r3, r7, #32
 1906 0daa 4FF00800 		mov	r0, #8
 1907 0dae C4F20200 		movt	r0, 16386
 1908 0db2 1946     		mov	r1, r3
 1909 0db4 FFF7FEFF 		bl	DMA_Init
 657:../src/main.cpp **** 
 658:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 659:../src/main.cpp **** 
 660:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1910              		.loc 1 660 0
 1911 0db8 4FF00B03 		mov	r3, #11
 1912 0dbc 87F84C30 		strb	r3, [r7, #76]
 661:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1913              		.loc 1 661 0
 1914 0dc0 4FF00203 		mov	r3, #2
 1915 0dc4 87F84D30 		strb	r3, [r7, #77]
 662:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1916              		.loc 1 662 0
 1917 0dc8 4FF00003 		mov	r3, #0
 1918 0dcc 87F84E30 		strb	r3, [r7, #78]
 663:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1919              		.loc 1 663 0
 1920 0dd0 4FF00103 		mov	r3, #1
 1921 0dd4 87F84F30 		strb	r3, [r7, #79]
 664:../src/main.cpp **** 
 665:../src/main.cpp **** 	NVIC_Init(&nv);
 1922              		.loc 1 665 0
 1923 0dd8 07F14C03 		add	r3, r7, #76
 1924 0ddc 1846     		mov	r0, r3
 1925 0dde FFF7FEFF 		bl	NVIC_Init
 666:../src/main.cpp **** 
 667:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1926              		.loc 1 667 0
 1927 0de2 4FF00800 		mov	r0, #8
 1928 0de6 C4F20200 		movt	r0, 16386
 1929 0dea 4FF00201 		mov	r1, #2
 1930 0dee 4FF00102 		mov	r2, #1
 1931 0df2 FFF7FEFF 		bl	DMA_ITConfig
 668:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1932              		.loc 1 668 0
 1933 0df6 4FF00800 		mov	r0, #8
 1934 0dfa C4F20200 		movt	r0, 16386
 1935 0dfe 4FF00101 		mov	r1, #1
 1936 0e02 FFF7FEFF 		bl	DMA_Cmd
 669:../src/main.cpp **** 
 670:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1937              		.loc 1 670 0
 1938 0e06 4FF0A040 		mov	r0, #1342177280
 1939 0e0a 4FF00201 		mov	r1, #2
 1940 0e0e FFF7FEFF 		bl	ADC_DMAConfig
 671:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1941              		.loc 1 671 0
 1942 0e12 4FF0A040 		mov	r0, #1342177280
 1943 0e16 4FF00101 		mov	r1, #1
 1944 0e1a FFF7FEFF 		bl	ADC_DMACmd
 1945              	.LBE18:
 672:../src/main.cpp **** }
 1946              		.loc 1 672 0
 1947 0e1e 07F17007 		add	r7, r7, #112
 1948 0e22 BD46     		mov	sp, r7
 1949 0e24 80BD     		pop	{r7, pc}
 1950              		.cfi_endproc
 1951              	.LFE121:
 1953 0e26 00BF     		.align	2
 1954              		.global	_Z13adc2_init_DMAv
 1955              		.thumb
 1956              		.thumb_func
 1958              	_Z13adc2_init_DMAv:
 1959              	.LFB122:
 673:../src/main.cpp **** 
 674:../src/main.cpp **** void adc2_init_DMA(void)
 675:../src/main.cpp **** {
 1960              		.loc 1 675 0
 1961              		.cfi_startproc
 1962              		@ args = 0, pretend = 0, frame = 112
 1963              		@ frame_needed = 1, uses_anonymous_args = 0
 1964 0e28 80B5     		push	{r7, lr}
 1965              	.LCFI33:
 1966              		.cfi_def_cfa_offset 8
 1967              		.cfi_offset 7, -8
 1968              		.cfi_offset 14, -4
 1969 0e2a 9CB0     		sub	sp, sp, #112
 1970              	.LCFI34:
 1971              		.cfi_def_cfa_offset 120
 1972 0e2c 00AF     		add	r7, sp, #0
 1973              	.LCFI35:
 1974              		.cfi_def_cfa_register 7
 1975              	.LBB19:
 676:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 677:../src/main.cpp **** 
 678:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 679:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 680:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 681:../src/main.cpp **** 
 682:../src/main.cpp **** 	/* Configure the ADC clock */
 683:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1976              		.loc 1 683 0
 1977 0e2e 4FF48870 		mov	r0, #272
 1978 0e32 FFF7FEFF 		bl	RCC_ADCCLKConfig
 684:../src/main.cpp **** 	/* Enable ADC2 clock */
 685:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1979              		.loc 1 685 0
 1980 0e36 4FF08050 		mov	r0, #268435456
 1981 0e3a 4FF00101 		mov	r1, #1
 1982 0e3e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 686:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 687:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1983              		.loc 1 687 0
 1984 0e42 4FF46020 		mov	r0, #917504
 1985 0e46 4FF00101 		mov	r1, #1
 1986 0e4a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 688:../src/main.cpp **** 
 689:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 690:../src/main.cpp **** 
 691:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1987              		.loc 1 691 0
 1988 0e4e 07F15003 		add	r3, r7, #80
 1989 0e52 1846     		mov	r0, r3
 1990 0e54 FFF7FEFF 		bl	GPIO_StructInit
 692:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1991              		.loc 1 692 0
 1992 0e58 4FF01003 		mov	r3, #16
 1993 0e5c 3B65     		str	r3, [r7, #80]
 693:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1994              		.loc 1 693 0
 1995 0e5e 4FF00303 		mov	r3, #3
 1996 0e62 87F85430 		strb	r3, [r7, #84]
 694:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1997              		.loc 1 694 0
 1998 0e66 4FF00003 		mov	r3, #0
 1999 0e6a 87F85730 		strb	r3, [r7, #87]
 695:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 2000              		.loc 1 695 0
 2001 0e6e 4FF00303 		mov	r3, #3
 2002 0e72 87F85530 		strb	r3, [r7, #85]
 696:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2003              		.loc 1 696 0
 2004 0e76 07F15003 		add	r3, r7, #80
 2005 0e7a 4FF09040 		mov	r0, #1207959552
 2006 0e7e 1946     		mov	r1, r3
 2007 0e80 FFF7FEFF 		bl	GPIO_Init
 697:../src/main.cpp **** 
 698:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2008              		.loc 1 698 0
 2009 0e84 07F15003 		add	r3, r7, #80
 2010 0e88 1846     		mov	r0, r3
 2011 0e8a FFF7FEFF 		bl	GPIO_StructInit
 699:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2012              		.loc 1 699 0
 2013 0e8e 4FF00403 		mov	r3, #4
 2014 0e92 3B65     		str	r3, [r7, #80]
 700:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2015              		.loc 1 700 0
 2016 0e94 4FF00303 		mov	r3, #3
 2017 0e98 87F85430 		strb	r3, [r7, #84]
 701:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2018              		.loc 1 701 0
 2019 0e9c 4FF00003 		mov	r3, #0
 2020 0ea0 87F85730 		strb	r3, [r7, #87]
 702:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2021              		.loc 1 702 0
 2022 0ea4 07F15003 		add	r3, r7, #80
 2023 0ea8 4FF48060 		mov	r0, #1024
 2024 0eac C4F60000 		movt	r0, 18432
 2025 0eb0 1946     		mov	r1, r3
 2026 0eb2 FFF7FEFF 		bl	GPIO_Init
 703:../src/main.cpp **** 
 704:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2027              		.loc 1 704 0
 2028 0eb6 07F15003 		add	r3, r7, #80
 2029 0eba 1846     		mov	r0, r3
 2030 0ebc FFF7FEFF 		bl	GPIO_StructInit
 705:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 2031              		.loc 1 705 0
 2032 0ec0 4FF03003 		mov	r3, #48
 2033 0ec4 3B65     		str	r3, [r7, #80]
 706:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2034              		.loc 1 706 0
 2035 0ec6 4FF00303 		mov	r3, #3
 2036 0eca 87F85430 		strb	r3, [r7, #84]
 707:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2037              		.loc 1 707 0
 2038 0ece 4FF00003 		mov	r3, #0
 2039 0ed2 87F85730 		strb	r3, [r7, #87]
 708:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 2040              		.loc 1 708 0
 2041 0ed6 07F15003 		add	r3, r7, #80
 2042 0eda 4FF40060 		mov	r0, #2048
 2043 0ede C4F60000 		movt	r0, 18432
 2044 0ee2 1946     		mov	r1, r3
 2045 0ee4 FFF7FEFF 		bl	GPIO_Init
 709:../src/main.cpp **** 
 710:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2046              		.loc 1 710 0
 2047 0ee8 3B46     		mov	r3, r7
 2048 0eea 1846     		mov	r0, r3
 2049 0eec FFF7FEFF 		bl	ADC_StructInit
 711:../src/main.cpp **** 
 712:../src/main.cpp **** 	/* Calibration procedure */
 713:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 2050              		.loc 1 713 0
 2051 0ef0 4FF48070 		mov	r0, #256
 2052 0ef4 C5F20000 		movt	r0, 20480
 2053 0ef8 4FF00101 		mov	r1, #1
 2054 0efc FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 714:../src/main.cpp **** 
 715:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 716:../src/main.cpp **** 	int foo;
 717:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2055              		.loc 1 717 0
 2056 0f00 4FF00003 		mov	r3, #0
 2057 0f04 FB66     		str	r3, [r7, #108]
 2058 0f06 07E0     		b	.L45
 2059              	.L46:
 718:../src/main.cpp **** 	{
 719:../src/main.cpp **** 	  ++foo;
 2060              		.loc 1 719 0 discriminator 2
 2061 0f08 FB6E     		ldr	r3, [r7, #108]
 2062 0f0a 03F10103 		add	r3, r3, #1
 2063 0f0e FB66     		str	r3, [r7, #108]
 717:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2064              		.loc 1 717 0 discriminator 2
 2065 0f10 FB6E     		ldr	r3, [r7, #108]
 2066 0f12 03F10103 		add	r3, r3, #1
 2067 0f16 FB66     		str	r3, [r7, #108]
 2068              	.L45:
 717:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2069              		.loc 1 717 0 is_stmt 0 discriminator 1
 2070 0f18 FA6E     		ldr	r2, [r7, #108]
 2071 0f1a 4FF6FF13 		movw	r3, #63999
 2072 0f1e 9A42     		cmp	r2, r3
 2073 0f20 CCBF     		ite	gt
 2074 0f22 0023     		movgt	r3, #0
 2075 0f24 0123     		movle	r3, #1
 2076 0f26 DBB2     		uxtb	r3, r3
 2077 0f28 002B     		cmp	r3, #0
 2078 0f2a EDD1     		bne	.L46
 720:../src/main.cpp **** 	}
 721:../src/main.cpp **** 
 722:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 2079              		.loc 1 722 0 is_stmt 1
 2080 0f2c 4FF48070 		mov	r0, #256
 2081 0f30 C5F20000 		movt	r0, 20480
 2082 0f34 4FF00001 		mov	r1, #0
 2083 0f38 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 723:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 2084              		.loc 1 723 0
 2085 0f3c 4FF48070 		mov	r0, #256
 2086 0f40 C5F20000 		movt	r0, 20480
 2087 0f44 FFF7FEFF 		bl	ADC_StartCalibration
 724:../src/main.cpp **** 
 725:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 2088              		.loc 1 725 0
 2089 0f48 00BF     		nop
 2090              	.L47:
 2091              		.loc 1 725 0 is_stmt 0 discriminator 1
 2092 0f4a 4FF48070 		mov	r0, #256
 2093 0f4e C5F20000 		movt	r0, 20480
 2094 0f52 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2095 0f56 0346     		mov	r3, r0
 2096 0f58 002B     		cmp	r3, #0
 2097 0f5a 0CBF     		ite	eq
 2098 0f5c 0023     		moveq	r3, #0
 2099 0f5e 0123     		movne	r3, #1
 2100 0f60 DBB2     		uxtb	r3, r3
 2101 0f62 002B     		cmp	r3, #0
 2102 0f64 F1D1     		bne	.L47
 726:../src/main.cpp **** 
 727:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2103              		.loc 1 727 0 is_stmt 1
 2104 0f66 4FF00003 		mov	r3, #0
 2105 0f6a BB65     		str	r3, [r7, #88]
 728:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2106              		.loc 1 728 0
 2107 0f6c 4FF00003 		mov	r3, #0
 2108 0f70 FB65     		str	r3, [r7, #92]
 729:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 2109              		.loc 1 729 0
 2110 0f72 4FF40043 		mov	r3, #32768
 2111 0f76 3B66     		str	r3, [r7, #96]
 730:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 2112              		.loc 1 730 0
 2113 0f78 4FF00203 		mov	r3, #2
 2114 0f7c 7B66     		str	r3, [r7, #100]
 731:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 2115              		.loc 1 731 0
 2116 0f7e 4FF00F03 		mov	r3, #15
 2117 0f82 87F86830 		strb	r3, [r7, #104]
 732:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 2118              		.loc 1 732 0
 2119 0f86 07F15803 		add	r3, r7, #88
 2120 0f8a 4FF48070 		mov	r0, #256
 2121 0f8e C5F20000 		movt	r0, 20480
 2122 0f92 1946     		mov	r1, r3
 2123 0f94 FFF7FEFF 		bl	ADC_CommonInit
 733:../src/main.cpp **** 
 734:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2124              		.loc 1 734 0
 2125 0f98 4FF40053 		mov	r3, #8192
 2126 0f9c 3B60     		str	r3, [r7, #0]
 735:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2127              		.loc 1 735 0
 2128 0f9e 4FF00003 		mov	r3, #0
 2129 0fa2 7B60     		str	r3, [r7, #4]
 736:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2130              		.loc 1 736 0
 2131 0fa4 4FF00003 		mov	r3, #0
 2132 0fa8 BB60     		str	r3, [r7, #8]
 737:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2133              		.loc 1 737 0
 2134 0faa 4FF00003 		mov	r3, #0
 2135 0fae FB60     		str	r3, [r7, #12]
 738:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2136              		.loc 1 738 0
 2137 0fb0 4FF00003 		mov	r3, #0
 2138 0fb4 3B61     		str	r3, [r7, #16]
 739:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2139              		.loc 1 739 0
 2140 0fb6 4FF00003 		mov	r3, #0
 2141 0fba 7B61     		str	r3, [r7, #20]
 740:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2142              		.loc 1 740 0
 2143 0fbc 4FF00003 		mov	r3, #0
 2144 0fc0 BB61     		str	r3, [r7, #24]
 741:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 2145              		.loc 1 741 0
 2146 0fc2 4FF00403 		mov	r3, #4
 2147 0fc6 3B77     		strb	r3, [r7, #28]
 742:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 2148              		.loc 1 742 0
 2149 0fc8 3B46     		mov	r3, r7
 2150 0fca 4FF48070 		mov	r0, #256
 2151 0fce C5F20000 		movt	r0, 20480
 2152 0fd2 1946     		mov	r1, r3
 2153 0fd4 FFF7FEFF 		bl	ADC_Init
 743:../src/main.cpp **** 
 744:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 745:../src/main.cpp **** 
 746:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2154              		.loc 1 746 0
 2155 0fd8 4FF48070 		mov	r0, #256
 2156 0fdc C5F20000 		movt	r0, 20480
 2157 0fe0 4FF00101 		mov	r1, #1
 2158 0fe4 4FF00102 		mov	r2, #1
 2159 0fe8 4FF00703 		mov	r3, #7
 2160 0fec FFF7FEFF 		bl	ADC_RegularChannelConfig
 747:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2161              		.loc 1 747 0
 2162 0ff0 4FF48070 		mov	r0, #256
 2163 0ff4 C5F20000 		movt	r0, 20480
 2164 0ff8 4FF00501 		mov	r1, #5
 2165 0ffc 4FF00202 		mov	r2, #2
 2166 1000 4FF00703 		mov	r3, #7
 2167 1004 FFF7FEFF 		bl	ADC_RegularChannelConfig
 748:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 2168              		.loc 1 748 0
 2169 1008 4FF48070 		mov	r0, #256
 2170 100c C5F20000 		movt	r0, 20480
 2171 1010 4FF00B01 		mov	r1, #11
 2172 1014 4FF00302 		mov	r2, #3
 2173 1018 4FF00703 		mov	r3, #7
 2174 101c FFF7FEFF 		bl	ADC_RegularChannelConfig
 749:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 2175              		.loc 1 749 0
 2176 1020 4FF48070 		mov	r0, #256
 2177 1024 C5F20000 		movt	r0, 20480
 2178 1028 4FF00C01 		mov	r1, #12
 2179 102c 4FF00402 		mov	r2, #4
 2180 1030 4FF00703 		mov	r3, #7
 2181 1034 FFF7FEFF 		bl	ADC_RegularChannelConfig
 750:../src/main.cpp **** 
 751:../src/main.cpp **** 	/* Enable ADC2 */
 752:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 2182              		.loc 1 752 0
 2183 1038 4FF48070 		mov	r0, #256
 2184 103c C5F20000 		movt	r0, 20480
 2185 1040 4FF00101 		mov	r1, #1
 2186 1044 FFF7FEFF 		bl	ADC_Cmd
 753:../src/main.cpp **** 
 754:../src/main.cpp **** 	/* wait for ADRDY */
 755:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 2187              		.loc 1 755 0
 2188 1048 00BF     		nop
 2189              	.L48:
 2190              		.loc 1 755 0 is_stmt 0 discriminator 1
 2191 104a 4FF48070 		mov	r0, #256
 2192 104e C5F20000 		movt	r0, 20480
 2193 1052 4FF00101 		mov	r1, #1
 2194 1056 FFF7FEFF 		bl	ADC_GetFlagStatus
 2195 105a 0346     		mov	r3, r0
 2196 105c 002B     		cmp	r3, #0
 2197 105e 14BF     		ite	ne
 2198 1060 0023     		movne	r3, #0
 2199 1062 0123     		moveq	r3, #1
 2200 1064 DBB2     		uxtb	r3, r3
 2201 1066 002B     		cmp	r3, #0
 2202 1068 EFD1     		bne	.L48
 756:../src/main.cpp **** 
 757:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 758:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 2203              		.loc 1 758 0 is_stmt 1
 2204 106a 4FF48070 		mov	r0, #256
 2205 106e C5F20000 		movt	r0, 20480
 2206 1072 FFF7FEFF 		bl	ADC_StartConversion
 759:../src/main.cpp **** 
 760:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 2207              		.loc 1 760 0
 2208 1076 4FF00200 		mov	r0, #2
 2209 107a 4FF00101 		mov	r1, #1
 2210 107e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 761:../src/main.cpp **** 
 762:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 763:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 2211              		.loc 1 763 0
 2212 1082 07F12003 		add	r3, r7, #32
 2213 1086 1846     		mov	r0, r3
 2214 1088 FFF7FEFF 		bl	DMA_StructInit
 764:../src/main.cpp **** 
 765:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 2215              		.loc 1 765 0
 2216 108c 4FF48160 		mov	r0, #1032
 2217 1090 C4F20200 		movt	r0, 16386
 2218 1094 FFF7FEFF 		bl	DMA_DeInit
 766:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 2219              		.loc 1 766 0
 2220 1098 4FF4A073 		mov	r3, #320
 2221 109c C5F20003 		movt	r3, 20480
 2222 10a0 3B62     		str	r3, [r7, #32]
 767:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 2223              		.loc 1 767 0
 2224 10a2 40F20003 		movw	r3, #:lower16:adc2_data
 2225 10a6 C0F20003 		movt	r3, #:upper16:adc2_data
 2226 10aa 7B62     		str	r3, [r7, #36]
 768:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 2227              		.loc 1 768 0
 2228 10ac 4FF00003 		mov	r3, #0
 2229 10b0 BB62     		str	r3, [r7, #40]
 769:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 2230              		.loc 1 769 0
 2231 10b2 4FF00403 		mov	r3, #4
 2232 10b6 BB85     		strh	r3, [r7, #44]	@ movhi
 770:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 2233              		.loc 1 770 0
 2234 10b8 4FF00003 		mov	r3, #0
 2235 10bc 3B63     		str	r3, [r7, #48]
 771:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 2236              		.loc 1 771 0
 2237 10be 4FF08003 		mov	r3, #128
 2238 10c2 7B63     		str	r3, [r7, #52]
 772:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 2239              		.loc 1 772 0
 2240 10c4 4FF40073 		mov	r3, #512
 2241 10c8 BB63     		str	r3, [r7, #56]
 773:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 2242              		.loc 1 773 0
 2243 10ca 4FF40063 		mov	r3, #2048
 2244 10ce FB63     		str	r3, [r7, #60]
 774:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 2245              		.loc 1 774 0
 2246 10d0 4FF02003 		mov	r3, #32
 2247 10d4 3B64     		str	r3, [r7, #64]
 775:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 2248              		.loc 1 775 0
 2249 10d6 4FF40053 		mov	r3, #8192
 2250 10da 7B64     		str	r3, [r7, #68]
 776:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 2251              		.loc 1 776 0
 2252 10dc 4FF00003 		mov	r3, #0
 2253 10e0 BB64     		str	r3, [r7, #72]
 777:../src/main.cpp **** 
 778:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 2254              		.loc 1 778 0
 2255 10e2 07F12003 		add	r3, r7, #32
 2256 10e6 4FF48160 		mov	r0, #1032
 2257 10ea C4F20200 		movt	r0, 16386
 2258 10ee 1946     		mov	r1, r3
 2259 10f0 FFF7FEFF 		bl	DMA_Init
 779:../src/main.cpp **** 
 780:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 781:../src/main.cpp **** 
 782:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 2260              		.loc 1 782 0
 2261 10f4 4FF03803 		mov	r3, #56
 2262 10f8 87F84C30 		strb	r3, [r7, #76]
 783:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2263              		.loc 1 783 0
 2264 10fc 4FF00203 		mov	r3, #2
 2265 1100 87F84D30 		strb	r3, [r7, #77]
 784:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2266              		.loc 1 784 0
 2267 1104 4FF00003 		mov	r3, #0
 2268 1108 87F84E30 		strb	r3, [r7, #78]
 785:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2269              		.loc 1 785 0
 2270 110c 4FF00103 		mov	r3, #1
 2271 1110 87F84F30 		strb	r3, [r7, #79]
 786:../src/main.cpp **** 
 787:../src/main.cpp **** 	NVIC_Init(&nv);
 2272              		.loc 1 787 0
 2273 1114 07F14C03 		add	r3, r7, #76
 2274 1118 1846     		mov	r0, r3
 2275 111a FFF7FEFF 		bl	NVIC_Init
 788:../src/main.cpp **** 
 789:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 2276              		.loc 1 789 0
 2277 111e 4FF48160 		mov	r0, #1032
 2278 1122 C4F20200 		movt	r0, 16386
 2279 1126 4FF00201 		mov	r1, #2
 2280 112a 4FF00102 		mov	r2, #1
 2281 112e FFF7FEFF 		bl	DMA_ITConfig
 790:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 2282              		.loc 1 790 0
 2283 1132 4FF48160 		mov	r0, #1032
 2284 1136 C4F20200 		movt	r0, 16386
 2285 113a 4FF00101 		mov	r1, #1
 2286 113e FFF7FEFF 		bl	DMA_Cmd
 791:../src/main.cpp **** 
 792:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 2287              		.loc 1 792 0
 2288 1142 4FF48070 		mov	r0, #256
 2289 1146 C5F20000 		movt	r0, 20480
 2290 114a 4FF00201 		mov	r1, #2
 2291 114e FFF7FEFF 		bl	ADC_DMAConfig
 793:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 2292              		.loc 1 793 0
 2293 1152 4FF48070 		mov	r0, #256
 2294 1156 C5F20000 		movt	r0, 20480
 2295 115a 4FF00101 		mov	r1, #1
 2296 115e FFF7FEFF 		bl	ADC_DMACmd
 2297              	.LBE19:
 794:../src/main.cpp **** }
 2298              		.loc 1 794 0
 2299 1162 07F17007 		add	r7, r7, #112
 2300 1166 BD46     		mov	sp, r7
 2301 1168 80BD     		pop	{r7, pc}
 2302              		.cfi_endproc
 2303              	.LFE122:
 2305 116a 00BF     		.align	2
 2306              		.global	_Z21battery_watchdog_initv
 2307              		.thumb
 2308              		.thumb_func
 2310              	_Z21battery_watchdog_initv:
 2311              	.LFB123:
 795:../src/main.cpp **** 
 796:../src/main.cpp **** void battery_watchdog_init(void)
 797:../src/main.cpp **** {
 2312              		.loc 1 797 0
 2313              		.cfi_startproc
 2314              		@ args = 0, pretend = 0, frame = 72
 2315              		@ frame_needed = 1, uses_anonymous_args = 0
 2316 116c 80B5     		push	{r7, lr}
 2317              	.LCFI36:
 2318              		.cfi_def_cfa_offset 8
 2319              		.cfi_offset 7, -8
 2320              		.cfi_offset 14, -4
 2321 116e 92B0     		sub	sp, sp, #72
 2322              	.LCFI37:
 2323              		.cfi_def_cfa_offset 80
 2324 1170 00AF     		add	r7, sp, #0
 2325              	.LCFI38:
 2326              		.cfi_def_cfa_register 7
 2327              	.LBB20:
 798:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 799:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 800:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 801:../src/main.cpp **** 	/* Configure the ADC clock */
 802:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 2328              		.loc 1 802 0
 2329 1172 4FF45050 		mov	r0, #13312
 2330 1176 C1F20000 		movt	r0, 4096
 2331 117a FFF7FEFF 		bl	RCC_ADCCLKConfig
 803:../src/main.cpp **** 
 804:../src/main.cpp **** 	/* Enable ADC1 clock */
 805:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 2332              		.loc 1 805 0
 2333 117e 4FF00050 		mov	r0, #536870912
 2334 1182 4FF00101 		mov	r1, #1
 2335 1186 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 806:../src/main.cpp **** 	/* ADC Channel configuration */
 807:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 808:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 2336              		.loc 1 808 0
 2337 118a 4FF41010 		mov	r0, #2359296
 2338 118e 4FF00101 		mov	r1, #1
 2339 1192 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 809:../src/main.cpp **** 
 810:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 811:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2340              		.loc 1 811 0
 2341 1196 07F12803 		add	r3, r7, #40
 2342 119a 1846     		mov	r0, r3
 2343 119c FFF7FEFF 		bl	GPIO_StructInit
 812:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 2344              		.loc 1 812 0
 2345 11a0 42F20203 		movw	r3, #8194
 2346 11a4 BB62     		str	r3, [r7, #40]
 813:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2347              		.loc 1 813 0
 2348 11a6 4FF00303 		mov	r3, #3
 2349 11aa 87F82C30 		strb	r3, [r7, #44]
 814:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2350              		.loc 1 814 0
 2351 11ae 4FF00003 		mov	r3, #0
 2352 11b2 87F82F30 		strb	r3, [r7, #47]
 815:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2353              		.loc 1 815 0
 2354 11b6 07F12803 		add	r3, r7, #40
 2355 11ba 4FF48060 		mov	r0, #1024
 2356 11be C4F60000 		movt	r0, 18432
 2357 11c2 1946     		mov	r1, r3
 2358 11c4 FFF7FEFF 		bl	GPIO_Init
 816:../src/main.cpp **** /*
 817:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 818:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 819:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 820:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 821:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 822:../src/main.cpp **** */
 823:../src/main.cpp **** 
 824:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2359              		.loc 1 824 0
 2360 11c8 07F10403 		add	r3, r7, #4
 2361 11cc 1846     		mov	r0, r3
 2362 11ce FFF7FEFF 		bl	ADC_StructInit
 825:../src/main.cpp **** 
 826:../src/main.cpp **** 	/* Calibration procedure */
 827:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 2363              		.loc 1 827 0
 2364 11d2 4FF48060 		mov	r0, #1024
 2365 11d6 C5F20000 		movt	r0, 20480
 2366 11da 4FF00101 		mov	r1, #1
 2367 11de FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 828:../src/main.cpp **** 
 829:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 830:../src/main.cpp **** 	int foo;
 831:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2368              		.loc 1 831 0
 2369 11e2 4FF00003 		mov	r3, #0
 2370 11e6 7B64     		str	r3, [r7, #68]
 2371 11e8 07E0     		b	.L50
 2372              	.L51:
 832:../src/main.cpp **** 	{
 833:../src/main.cpp **** 	  ++foo;
 2373              		.loc 1 833 0 discriminator 2
 2374 11ea 7B6C     		ldr	r3, [r7, #68]
 2375 11ec 03F10103 		add	r3, r3, #1
 2376 11f0 7B64     		str	r3, [r7, #68]
 831:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2377              		.loc 1 831 0 discriminator 2
 2378 11f2 7B6C     		ldr	r3, [r7, #68]
 2379 11f4 03F10103 		add	r3, r3, #1
 2380 11f8 7B64     		str	r3, [r7, #68]
 2381              	.L50:
 831:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2382              		.loc 1 831 0 is_stmt 0 discriminator 1
 2383 11fa 7A6C     		ldr	r2, [r7, #68]
 2384 11fc 47F6FF43 		movw	r3, #31999
 2385 1200 9A42     		cmp	r2, r3
 2386 1202 CCBF     		ite	gt
 2387 1204 0023     		movgt	r3, #0
 2388 1206 0123     		movle	r3, #1
 2389 1208 DBB2     		uxtb	r3, r3
 2390 120a 002B     		cmp	r3, #0
 2391 120c EDD1     		bne	.L51
 834:../src/main.cpp **** 	}
 835:../src/main.cpp **** 
 836:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 2392              		.loc 1 836 0 is_stmt 1
 2393 120e 4FF48060 		mov	r0, #1024
 2394 1212 C5F20000 		movt	r0, 20480
 2395 1216 4FF00001 		mov	r1, #0
 2396 121a FFF7FEFF 		bl	ADC_SelectCalibrationMode
 837:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 2397              		.loc 1 837 0
 2398 121e 4FF48060 		mov	r0, #1024
 2399 1222 C5F20000 		movt	r0, 20480
 2400 1226 FFF7FEFF 		bl	ADC_StartCalibration
 838:../src/main.cpp **** 
 839:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 2401              		.loc 1 839 0
 2402 122a 00BF     		nop
 2403              	.L52:
 2404              		.loc 1 839 0 is_stmt 0 discriminator 1
 2405 122c 4FF48060 		mov	r0, #1024
 2406 1230 C5F20000 		movt	r0, 20480
 2407 1234 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2408 1238 0346     		mov	r3, r0
 2409 123a 002B     		cmp	r3, #0
 2410 123c 0CBF     		ite	eq
 2411 123e 0023     		moveq	r3, #0
 2412 1240 0123     		movne	r3, #1
 2413 1242 DBB2     		uxtb	r3, r3
 2414 1244 002B     		cmp	r3, #0
 2415 1246 F1D1     		bne	.L52
 840:../src/main.cpp **** 
 841:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2416              		.loc 1 841 0 is_stmt 1
 2417 1248 4FF00003 		mov	r3, #0
 2418 124c 3B63     		str	r3, [r7, #48]
 842:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 2419              		.loc 1 842 0
 2420 124e 4FF44033 		mov	r3, #196608
 2421 1252 7B63     		str	r3, [r7, #52]
 843:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2422              		.loc 1 843 0
 2423 1254 4FF00003 		mov	r3, #0
 2424 1258 BB63     		str	r3, [r7, #56]
 844:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2425              		.loc 1 844 0
 2426 125a 4FF00003 		mov	r3, #0
 2427 125e FB63     		str	r3, [r7, #60]
 845:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2428              		.loc 1 845 0
 2429 1260 4FF00003 		mov	r3, #0
 2430 1264 87F84030 		strb	r3, [r7, #64]
 846:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 2431              		.loc 1 846 0
 2432 1268 07F13003 		add	r3, r7, #48
 2433 126c 4FF48060 		mov	r0, #1024
 2434 1270 C5F20000 		movt	r0, 20480
 2435 1274 1946     		mov	r1, r3
 2436 1276 FFF7FEFF 		bl	ADC_CommonInit
 847:../src/main.cpp **** 
 848:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2437              		.loc 1 848 0
 2438 127a 4FF40053 		mov	r3, #8192
 2439 127e 7B60     		str	r3, [r7, #4]
 849:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2440              		.loc 1 849 0
 2441 1280 4FF00003 		mov	r3, #0
 2442 1284 BB60     		str	r3, [r7, #8]
 850:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2443              		.loc 1 850 0
 2444 1286 4FF00003 		mov	r3, #0
 2445 128a FB60     		str	r3, [r7, #12]
 851:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2446              		.loc 1 851 0
 2447 128c 4FF00003 		mov	r3, #0
 2448 1290 3B61     		str	r3, [r7, #16]
 852:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2449              		.loc 1 852 0
 2450 1292 4FF00003 		mov	r3, #0
 2451 1296 7B61     		str	r3, [r7, #20]
 853:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2452              		.loc 1 853 0
 2453 1298 4FF00003 		mov	r3, #0
 2454 129c BB61     		str	r3, [r7, #24]
 854:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2455              		.loc 1 854 0
 2456 129e 4FF00003 		mov	r3, #0
 2457 12a2 FB61     		str	r3, [r7, #28]
 855:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2458              		.loc 1 855 0
 2459 12a4 4FF00203 		mov	r3, #2
 2460 12a8 87F82030 		strb	r3, [r7, #32]
 856:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 2461              		.loc 1 856 0
 2462 12ac 07F10403 		add	r3, r7, #4
 2463 12b0 4FF48060 		mov	r0, #1024
 2464 12b4 C5F20000 		movt	r0, 20480
 2465 12b8 1946     		mov	r1, r3
 2466 12ba FFF7FEFF 		bl	ADC_Init
 857:../src/main.cpp **** 
 858:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 859:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2467              		.loc 1 859 0
 2468 12be 4FF48060 		mov	r0, #1024
 2469 12c2 C5F20000 		movt	r0, 20480
 2470 12c6 4FF00101 		mov	r1, #1
 2471 12ca 4FF00102 		mov	r2, #1
 2472 12ce 4FF00703 		mov	r3, #7
 2473 12d2 FFF7FEFF 		bl	ADC_RegularChannelConfig
 860:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2474              		.loc 1 860 0
 2475 12d6 4FF48060 		mov	r0, #1024
 2476 12da C5F20000 		movt	r0, 20480
 2477 12de 4FF00501 		mov	r1, #5
 2478 12e2 4FF00202 		mov	r2, #2
 2479 12e6 4FF00703 		mov	r3, #7
 2480 12ea FFF7FEFF 		bl	ADC_RegularChannelConfig
 861:../src/main.cpp **** 
 862:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 2481              		.loc 1 862 0
 2482 12ee 4FF48060 		mov	r0, #1024
 2483 12f2 C5F20000 		movt	r0, 20480
 2484 12f6 4FF00101 		mov	r1, #1
 2485 12fa FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 863:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 2486              		.loc 1 863 0
 2487 12fe 4FF48060 		mov	r0, #1024
 2488 1302 C5F20000 		movt	r0, 20480
 2489 1306 4FF00501 		mov	r1, #5
 2490 130a FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 864:../src/main.cpp **** 
 865:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 866:../src/main.cpp **** 
 867:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 2491              		.loc 1 867 0
 2492 130e 4FF48060 		mov	r0, #1024
 2493 1312 C5F20000 		movt	r0, 20480
 2494 1316 4FF40061 		mov	r1, #2048
 2495 131a 4FF00A02 		mov	r2, #10
 2496 131e FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 868:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 2497              		.loc 1 868 0
 2498 1322 4FF48060 		mov	r0, #1024
 2499 1326 C5F20000 		movt	r0, 20480
 2500 132a 4FF08001 		mov	r1, #128
 2501 132e 4FF00002 		mov	r2, #0
 2502 1332 FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 869:../src/main.cpp **** 
 870:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 2503              		.loc 1 870 0
 2504 1336 4FF48060 		mov	r0, #1024
 2505 133a C5F20000 		movt	r0, 20480
 2506 133e 4FF44001 		mov	r1, #12582912
 2507 1342 FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 871:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 872:../src/main.cpp **** 
 873:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 874:../src/main.cpp **** 
 875:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 876:../src/main.cpp **** 
 877:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 2508              		.loc 1 877 0
 2509 1346 4FF02F03 		mov	r3, #47
 2510 134a 87F82430 		strb	r3, [r7, #36]
 878:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 2511              		.loc 1 878 0
 2512 134e 4FF00003 		mov	r3, #0
 2513 1352 87F82530 		strb	r3, [r7, #37]
 879:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2514              		.loc 1 879 0
 2515 1356 4FF00003 		mov	r3, #0
 2516 135a 87F82630 		strb	r3, [r7, #38]
 880:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2517              		.loc 1 880 0
 2518 135e 4FF00103 		mov	r3, #1
 2519 1362 87F82730 		strb	r3, [r7, #39]
 881:../src/main.cpp **** 
 882:../src/main.cpp **** 	NVIC_Init(&nv);
 2520              		.loc 1 882 0
 2521 1366 07F12403 		add	r3, r7, #36
 2522 136a 1846     		mov	r0, r3
 2523 136c FFF7FEFF 		bl	NVIC_Init
 883:../src/main.cpp **** 
 884:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 885:../src/main.cpp **** 
 886:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 2524              		.loc 1 886 0
 2525 1370 4FF48060 		mov	r0, #1024
 2526 1374 C5F20000 		movt	r0, 20480
 2527 1378 4FF4C071 		mov	r1, #384
 2528 137c 4FF00102 		mov	r2, #1
 2529 1380 FFF7FEFF 		bl	ADC_ITConfig
 887:../src/main.cpp **** 
 888:../src/main.cpp **** 	/* Enable ADC3 */
 889:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 2530              		.loc 1 889 0
 2531 1384 4FF48060 		mov	r0, #1024
 2532 1388 C5F20000 		movt	r0, 20480
 2533 138c 4FF00101 		mov	r1, #1
 2534 1390 FFF7FEFF 		bl	ADC_Cmd
 890:../src/main.cpp **** 
 891:../src/main.cpp **** 	/* wait for ADRDY */
 892:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 2535              		.loc 1 892 0
 2536 1394 00BF     		nop
 2537              	.L53:
 2538              		.loc 1 892 0 is_stmt 0 discriminator 1
 2539 1396 4FF48060 		mov	r0, #1024
 2540 139a C5F20000 		movt	r0, 20480
 2541 139e 4FF00101 		mov	r1, #1
 2542 13a2 FFF7FEFF 		bl	ADC_GetFlagStatus
 2543 13a6 0346     		mov	r3, r0
 2544 13a8 002B     		cmp	r3, #0
 2545 13aa 14BF     		ite	ne
 2546 13ac 0023     		movne	r3, #0
 2547 13ae 0123     		moveq	r3, #1
 2548 13b0 DBB2     		uxtb	r3, r3
 2549 13b2 002B     		cmp	r3, #0
 2550 13b4 EFD1     		bne	.L53
 893:../src/main.cpp **** 
 894:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 895:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 2551              		.loc 1 895 0 is_stmt 1
 2552 13b6 4FF48060 		mov	r0, #1024
 2553 13ba C5F20000 		movt	r0, 20480
 2554 13be FFF7FEFF 		bl	ADC_StartConversion
 2555              	.LBE20:
 896:../src/main.cpp **** }
 2556              		.loc 1 896 0
 2557 13c2 07F14807 		add	r7, r7, #72
 2558 13c6 BD46     		mov	sp, r7
 2559 13c8 80BD     		pop	{r7, pc}
 2560              		.cfi_endproc
 2561              	.LFE123:
 2563 13ca 00BF     		.align	2
 2564              		.global	_Z9adc1_initv
 2565              		.thumb
 2566              		.thumb_func
 2568              	_Z9adc1_initv:
 2569              	.LFB124:
 897:../src/main.cpp **** 
 898:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 899:../src/main.cpp ****  * @Args: Nothing
 900:../src/main.cpp ****  * @Return Val: Nothing
 901:../src/main.cpp ****  */
 902:../src/main.cpp **** 
 903:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 904:../src/main.cpp **** {
 2570              		.loc 1 904 0
 2571              		.cfi_startproc
 2572              		@ args = 0, pretend = 0, frame = 72
 2573              		@ frame_needed = 1, uses_anonymous_args = 0
 2574 13cc 80B5     		push	{r7, lr}
 2575              	.LCFI39:
 2576              		.cfi_def_cfa_offset 8
 2577              		.cfi_offset 7, -8
 2578              		.cfi_offset 14, -4
 2579 13ce 92B0     		sub	sp, sp, #72
 2580              	.LCFI40:
 2581              		.cfi_def_cfa_offset 80
 2582 13d0 00AF     		add	r7, sp, #0
 2583              	.LCFI41:
 2584              		.cfi_def_cfa_register 7
 2585              	.LBB21:
 905:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 906:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 907:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 908:../src/main.cpp **** 	/* Configure the ADC clock */
 909:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2586              		.loc 1 909 0
 2587 13d2 4FF48870 		mov	r0, #272
 2588 13d6 FFF7FEFF 		bl	RCC_ADCCLKConfig
 910:../src/main.cpp **** 
 911:../src/main.cpp **** 	/* Enable ADC1 clock */
 912:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2589              		.loc 1 912 0
 2590 13da 4FF08050 		mov	r0, #268435456
 2591 13de 4FF00101 		mov	r1, #1
 2592 13e2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 913:../src/main.cpp **** 	/* ADC Channel configuration */
 914:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 915:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2593              		.loc 1 915 0
 2594 13e6 4FF40030 		mov	r0, #131072
 2595 13ea 4FF00101 		mov	r1, #1
 2596 13ee FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 916:../src/main.cpp **** 
 917:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 918:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2597              		.loc 1 918 0
 2598 13f2 4FF00403 		mov	r3, #4
 2599 13f6 BB62     		str	r3, [r7, #40]
 919:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2600              		.loc 1 919 0
 2601 13f8 4FF00303 		mov	r3, #3
 2602 13fc 87F82C30 		strb	r3, [r7, #44]
 920:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2603              		.loc 1 920 0
 2604 1400 4FF00003 		mov	r3, #0
 2605 1404 87F82F30 		strb	r3, [r7, #47]
 921:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2606              		.loc 1 921 0
 2607 1408 07F12803 		add	r3, r7, #40
 2608 140c 4FF09040 		mov	r0, #1207959552
 2609 1410 1946     		mov	r1, r3
 2610 1412 FFF7FEFF 		bl	GPIO_Init
 922:../src/main.cpp **** 
 923:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2611              		.loc 1 923 0
 2612 1416 07F10403 		add	r3, r7, #4
 2613 141a 1846     		mov	r0, r3
 2614 141c FFF7FEFF 		bl	ADC_StructInit
 924:../src/main.cpp **** 
 925:../src/main.cpp **** 	/* Calibration procedure */
 926:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2615              		.loc 1 926 0
 2616 1420 4FF0A040 		mov	r0, #1342177280
 2617 1424 4FF00101 		mov	r1, #1
 2618 1428 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 927:../src/main.cpp **** 
 928:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 929:../src/main.cpp **** 	int foo;
 930:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2619              		.loc 1 930 0
 2620 142c 4FF00003 		mov	r3, #0
 2621 1430 7B64     		str	r3, [r7, #68]
 2622 1432 07E0     		b	.L55
 2623              	.L56:
 931:../src/main.cpp **** 	{
 932:../src/main.cpp **** 	  ++foo;
 2624              		.loc 1 932 0 discriminator 2
 2625 1434 7B6C     		ldr	r3, [r7, #68]
 2626 1436 03F10103 		add	r3, r3, #1
 2627 143a 7B64     		str	r3, [r7, #68]
 930:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2628              		.loc 1 930 0 discriminator 2
 2629 143c 7B6C     		ldr	r3, [r7, #68]
 2630 143e 03F10103 		add	r3, r3, #1
 2631 1442 7B64     		str	r3, [r7, #68]
 2632              	.L55:
 930:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2633              		.loc 1 930 0 is_stmt 0 discriminator 1
 2634 1444 7A6C     		ldr	r2, [r7, #68]
 2635 1446 47F6FF43 		movw	r3, #31999
 2636 144a 9A42     		cmp	r2, r3
 2637 144c CCBF     		ite	gt
 2638 144e 0023     		movgt	r3, #0
 2639 1450 0123     		movle	r3, #1
 2640 1452 DBB2     		uxtb	r3, r3
 2641 1454 002B     		cmp	r3, #0
 2642 1456 EDD1     		bne	.L56
 933:../src/main.cpp **** 	}
 934:../src/main.cpp **** 
 935:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2643              		.loc 1 935 0 is_stmt 1
 2644 1458 4FF0A040 		mov	r0, #1342177280
 2645 145c 4FF00001 		mov	r1, #0
 2646 1460 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 936:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2647              		.loc 1 936 0
 2648 1464 4FF0A040 		mov	r0, #1342177280
 2649 1468 FFF7FEFF 		bl	ADC_StartCalibration
 937:../src/main.cpp **** 
 938:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2650              		.loc 1 938 0
 2651 146c 00BF     		nop
 2652              	.L57:
 2653              		.loc 1 938 0 is_stmt 0 discriminator 1
 2654 146e 4FF0A040 		mov	r0, #1342177280
 2655 1472 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2656 1476 0346     		mov	r3, r0
 2657 1478 002B     		cmp	r3, #0
 2658 147a 0CBF     		ite	eq
 2659 147c 0023     		moveq	r3, #0
 2660 147e 0123     		movne	r3, #1
 2661 1480 DBB2     		uxtb	r3, r3
 2662 1482 002B     		cmp	r3, #0
 2663 1484 F3D1     		bne	.L57
 939:../src/main.cpp **** 
 940:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2664              		.loc 1 940 0 is_stmt 1
 2665 1486 4FF00003 		mov	r3, #0
 2666 148a 3B63     		str	r3, [r7, #48]
 941:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2667              		.loc 1 941 0
 2668 148c 4FF00003 		mov	r3, #0
 2669 1490 7B63     		str	r3, [r7, #52]
 942:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2670              		.loc 1 942 0
 2671 1492 4FF00003 		mov	r3, #0
 2672 1496 BB63     		str	r3, [r7, #56]
 943:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2673              		.loc 1 943 0
 2674 1498 4FF00003 		mov	r3, #0
 2675 149c FB63     		str	r3, [r7, #60]
 944:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2676              		.loc 1 944 0
 2677 149e 4FF00003 		mov	r3, #0
 2678 14a2 87F84030 		strb	r3, [r7, #64]
 945:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2679              		.loc 1 945 0
 2680 14a6 07F13003 		add	r3, r7, #48
 2681 14aa 4FF0A040 		mov	r0, #1342177280
 2682 14ae 1946     		mov	r1, r3
 2683 14b0 FFF7FEFF 		bl	ADC_CommonInit
 946:../src/main.cpp **** 
 947:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2684              		.loc 1 947 0
 2685 14b4 4FF40053 		mov	r3, #8192
 2686 14b8 7B60     		str	r3, [r7, #4]
 948:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2687              		.loc 1 948 0
 2688 14ba 4FF00003 		mov	r3, #0
 2689 14be BB60     		str	r3, [r7, #8]
 949:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2690              		.loc 1 949 0
 2691 14c0 4FF00003 		mov	r3, #0
 2692 14c4 FB60     		str	r3, [r7, #12]
 950:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2693              		.loc 1 950 0
 2694 14c6 4FF00003 		mov	r3, #0
 2695 14ca 3B61     		str	r3, [r7, #16]
 951:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2696              		.loc 1 951 0
 2697 14cc 4FF00003 		mov	r3, #0
 2698 14d0 7B61     		str	r3, [r7, #20]
 952:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2699              		.loc 1 952 0
 2700 14d2 4FF00003 		mov	r3, #0
 2701 14d6 BB61     		str	r3, [r7, #24]
 953:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2702              		.loc 1 953 0
 2703 14d8 4FF00003 		mov	r3, #0
 2704 14dc FB61     		str	r3, [r7, #28]
 954:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2705              		.loc 1 954 0
 2706 14de 4FF00103 		mov	r3, #1
 2707 14e2 87F82030 		strb	r3, [r7, #32]
 955:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2708              		.loc 1 955 0
 2709 14e6 07F10403 		add	r3, r7, #4
 2710 14ea 4FF0A040 		mov	r0, #1342177280
 2711 14ee 1946     		mov	r1, r3
 2712 14f0 FFF7FEFF 		bl	ADC_Init
 956:../src/main.cpp **** 
 957:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 958:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2713              		.loc 1 958 0
 2714 14f4 4FF0A040 		mov	r0, #1342177280
 2715 14f8 4FF00301 		mov	r1, #3
 2716 14fc 4FF00102 		mov	r2, #1
 2717 1500 4FF00703 		mov	r3, #7
 2718 1504 FFF7FEFF 		bl	ADC_RegularChannelConfig
 959:../src/main.cpp **** 
 960:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 961:../src/main.cpp **** 
 962:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 963:../src/main.cpp **** 
 964:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2719              		.loc 1 964 0
 2720 1508 4FF01203 		mov	r3, #18
 2721 150c 87F82430 		strb	r3, [r7, #36]
 965:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2722              		.loc 1 965 0
 2723 1510 4FF00203 		mov	r3, #2
 2724 1514 87F82530 		strb	r3, [r7, #37]
 966:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2725              		.loc 1 966 0
 2726 1518 4FF00003 		mov	r3, #0
 2727 151c 87F82630 		strb	r3, [r7, #38]
 967:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2728              		.loc 1 967 0
 2729 1520 4FF00103 		mov	r3, #1
 2730 1524 87F82730 		strb	r3, [r7, #39]
 968:../src/main.cpp **** 
 969:../src/main.cpp **** 	NVIC_Init(&nv);
 2731              		.loc 1 969 0
 2732 1528 07F12403 		add	r3, r7, #36
 2733 152c 1846     		mov	r0, r3
 2734 152e FFF7FEFF 		bl	NVIC_Init
 970:../src/main.cpp **** 
 971:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 972:../src/main.cpp **** 
 973:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2735              		.loc 1 973 0
 2736 1532 4FF0A040 		mov	r0, #1342177280
 2737 1536 4FF00401 		mov	r1, #4
 2738 153a 4FF00102 		mov	r2, #1
 2739 153e FFF7FEFF 		bl	ADC_ITConfig
 974:../src/main.cpp **** 
 975:../src/main.cpp **** 	/* Enable ADC1 */
 976:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2740              		.loc 1 976 0
 2741 1542 4FF0A040 		mov	r0, #1342177280
 2742 1546 4FF00101 		mov	r1, #1
 2743 154a FFF7FEFF 		bl	ADC_Cmd
 977:../src/main.cpp **** 
 978:../src/main.cpp **** 	/* wait for ADRDY */
 979:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2744              		.loc 1 979 0
 2745 154e 00BF     		nop
 2746              	.L58:
 2747              		.loc 1 979 0 is_stmt 0 discriminator 1
 2748 1550 4FF0A040 		mov	r0, #1342177280
 2749 1554 4FF00101 		mov	r1, #1
 2750 1558 FFF7FEFF 		bl	ADC_GetFlagStatus
 2751 155c 0346     		mov	r3, r0
 2752 155e 002B     		cmp	r3, #0
 2753 1560 14BF     		ite	ne
 2754 1562 0023     		movne	r3, #0
 2755 1564 0123     		moveq	r3, #1
 2756 1566 DBB2     		uxtb	r3, r3
 2757 1568 002B     		cmp	r3, #0
 2758 156a F1D1     		bne	.L58
 980:../src/main.cpp **** 
 981:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 982:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2759              		.loc 1 982 0 is_stmt 1
 2760 156c 4FF0A040 		mov	r0, #1342177280
 2761 1570 FFF7FEFF 		bl	ADC_StartConversion
 2762              	.LBE21:
 983:../src/main.cpp **** }
 2763              		.loc 1 983 0
 2764 1574 07F14807 		add	r7, r7, #72
 2765 1578 BD46     		mov	sp, r7
 2766 157a 80BD     		pop	{r7, pc}
 2767              		.cfi_endproc
 2768              	.LFE124:
 2770              	.Letext0:
 2771              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2772              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2773              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 2774              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 2775              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 2776              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 2777              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 2778              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 2779              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 2780              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 2781              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/cc15R24g.s:24     .bss:00000000 led_iter
     /tmp/cc15R24g.s:21     .bss:00000000 $d
     /tmp/cc15R24g.s:31     .data:00000000 led_matrix
     /tmp/cc15R24g.s:28     .data:00000000 $d
     /tmp/cc15R24g.s:44     .bss:00000004 left_enc
     /tmp/cc15R24g.s:50     .bss:0000002c right_enc
     /tmp/cc15R24g.s:56     .bss:00000054 gyro_angle_x
     /tmp/cc15R24g.s:62     .bss:00000058 gyro_bias_x
     /tmp/cc15R24g.s:68     .bss:0000005c adcval
     /tmp/cc15R24g.s:74     .bss:00000060 adcData
     /tmp/cc15R24g.s:80     .bss:00000068 new_data
     /tmp/cc15R24g.s:86     .bss:0000006c adc2_data
     /tmp/cc15R24g.s:91     .bss:0000007c adc2_new_data
     /tmp/cc15R24g.s:96     .bss:0000007d adc3_awd1
     /tmp/cc15R24g.s:101    .bss:0000007e adc3_awd2
     /tmp/cc15R24g.s:107    .bss:00000080 count
     /tmp/cc15R24g.s:113    .bss:00000084 stage
     /tmp/cc15R24g.s:119    .bss:00000088 drive_cmd
     /tmp/cc15R24g.s:125    .bss:0000008c err
     /tmp/cc15R24g.s:131    .bss:00000090 last_err
     /tmp/cc15R24g.s:137    .bss:00000094 diff_err
     /tmp/cc15R24g.s:143    .bss:00000098 rt
     /tmp/cc15R24g.s:149    .bss:0000009c d_front
     /tmp/cc15R24g.s:155    .bss:000000a0 integral
     /tmp/cc15R24g.s:161    .bss:000000a4 left
     /tmp/cc15R24g.s:167    .bss:000000a8 right
     /tmp/cc15R24g.s:173    .bss:000000ac state
     /tmp/cc15R24g.s:179    .bss:000000b0 match_time_counter
     /tmp/cc15R24g.s:185    .bss:000000b4 t_firefight_start
     /tmp/cc15R24g.s:191    .bss:000000b8 leds_on
     /tmp/cc15R24g.s:194    .rodata:00000000 $d
     /tmp/cc15R24g.s:195    .rodata:00000000 .LC0
     /tmp/cc15R24g.s:198    .text:00000000 $t
     /tmp/cc15R24g.s:203    .text:00000000 main
     /tmp/cc15R24g.s:610    .text:00000378 _Z24trinity2013_waitForStartv
     /tmp/cc15R24g.s:1017   .text:00000684 _Z15brake_pins_initv
     /tmp/cc15R24g.s:1674   .text:00000bb4 _Z13adc1_init_DMAv
     /tmp/cc15R24g.s:1958   .text:00000e28 _Z13adc2_init_DMAv
     /tmp/cc15R24g.s:1089   .text:000006fc _Z13ping_pin_initv
     /tmp/cc15R24g.s:1174   .text:0000078c _Z20timer2_timebase_initv
     /tmp/cc15R24g.s:860    .text:00000588 _Z19imu_update_ISR_initv
     /tmp/cc15R24g.s:1233   .text:000007e0 _Z9comp_initv
     /tmp/cc15R24g.s:599    .text:00000370 $d
     /tmp/cc15R24g.s:605    .text:00000378 $t
     /tmp/cc15R24g.s:695    .text:00000404 _Z11IR_distancei
     /tmp/cc15R24g.s:844    .text:00000568 $d
     /tmp/cc15R24g.s:855    .text:00000588 $t
     /tmp/cc15R24g.s:1583   .text:00000b2c _Z14calc_gyro_biasv
     /tmp/cc15R24g.s:977    .rodata:00000010 .LC1
     /tmp/cc15R24g.s:986    .text:0000066c L3GD20_TIMEOUT_UserCallback
     /tmp/cc15R24g.s:1665   .text:00000bb0 $d
     /tmp/cc15R24g.s:1669   .text:00000bb4 $t
     /tmp/cc15R24g.s:2310   .text:0000116c _Z21battery_watchdog_initv
     /tmp/cc15R24g.s:2568   .text:000013cc _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.a77b7af68303fe0609f9dd844a078e2a
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z19LED_MATRIX_ISR_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z13pwm_out3_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
printf
_Z11pwm1_outputf
_Z11pwm2_outputf
_Z11pwm3_outputf
RCC_AHBPeriphClockCmd
GPIO_DeInit
GPIO_Init
GPIO_ReadInputDataBit
__aeabi_f2d
__aeabi_d2f
pow
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
GPIO_StructInit
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
