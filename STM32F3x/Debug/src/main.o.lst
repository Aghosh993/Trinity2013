   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.cpp"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	led_iter
  21              		.bss
  22              		.align	2
  25              	led_iter:
  26 0000 00000000 		.space	4
  27              		.global	led_matrix
  28              		.data
  29              		.align	2
  32              	led_matrix:
  33 0000 00020000 		.word	512
  34 0004 00010000 		.word	256
  35 0008 00800000 		.word	32768
  36 000c 00200000 		.word	8192
  37 0010 00100000 		.word	4096
  38 0014 00080000 		.word	2048
  39 0018 00040000 		.word	1024
  40              		.global	left_enc
  41              		.bss
  42              		.align	2
  45              	left_enc:
  46 0004 00000000 		.space	40
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	right_enc
  48              		.align	2
  51              	right_enc:
  52 002c 00000000 		.space	40
  52      00000000 
  52      00000000 
  52      00000000 
  52      00000000 
  53              		.global	gyro_angle_x
  54              		.align	2
  57              	gyro_angle_x:
  58 0054 00000000 		.space	4
  59              		.global	gyro_bias_x
  60              		.align	2
  63              	gyro_bias_x:
  64 0058 00000000 		.space	4
  65              		.global	adcval
  66              		.align	2
  69              	adcval:
  70 005c 00000000 		.space	4
  71              		.global	adcData
  72              		.align	2
  75              	adcData:
  76 0060 00000000 		.space	8
  76      00000000 
  77              		.global	new_data
  78              		.align	2
  81              	new_data:
  82 0068 00000000 		.space	4
  83              		.global	adc2_data
  84              		.align	2
  87              	adc2_data:
  88 006c 00000000 		.space	16
  88      00000000 
  88      00000000 
  88      00000000 
  89              		.global	adc2_new_data
  92              	adc2_new_data:
  93 007c 00       		.space	1
  94              		.global	adc3_awd1
  97              	adc3_awd1:
  98 007d 00       		.space	1
  99              		.global	adc3_awd2
 102              	adc3_awd2:
 103 007e 00       		.space	1
 104              		.global	count
 105 007f 00       		.align	2
 108              	count:
 109 0080 00000000 		.space	4
 110              		.global	stage
 111              		.align	2
 114              	stage:
 115 0084 00000000 		.space	4
 116              		.global	drive_cmd
 117              		.align	2
 120              	drive_cmd:
 121 0088 00000000 		.space	4
 122              		.global	err
 123              		.align	2
 126              	err:
 127 008c 00000000 		.space	4
 128              		.global	last_err
 129              		.align	2
 132              	last_err:
 133 0090 00000000 		.space	4
 134              		.global	diff_err
 135              		.align	2
 138              	diff_err:
 139 0094 00000000 		.space	4
 140              		.global	rt
 141              		.align	2
 144              	rt:
 145 0098 00000000 		.space	4
 146              		.global	d_front
 147              		.align	2
 150              	d_front:
 151 009c 00000000 		.space	4
 152              		.global	integral
 153              		.align	2
 156              	integral:
 157 00a0 00000000 		.space	4
 158              		.global	left
 159              		.align	2
 162              	left:
 163 00a4 00000000 		.space	4
 164              		.global	right
 165              		.align	2
 168              	right:
 169 00a8 00000000 		.space	4
 170              		.global	state
 171              		.align	2
 174              	state:
 175 00ac 00000000 		.space	4
 176              		.global	match_time_counter
 177              		.align	2
 180              	match_time_counter:
 181 00b0 00000000 		.space	4
 182              		.global	t_firefight_start
 183              		.align	2
 186              	t_firefight_start:
 187 00b4 00000000 		.space	4
 188              		.global	t_homing_start
 189              		.align	2
 192              	t_homing_start:
 193 00b8 00000000 		.space	4
 194              		.global	leds_on
 195              		.align	2
 198              	leds_on:
 199 00bc 00000000 		.space	4
 200              		.text
 201              		.align	2
 202              		.global	main
 203              		.thumb
 204              		.thumb_func
 206              	main:
 207              	.LFB111:
 208              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****     This program (program referring to all source and header files in this repository (repository
  17:../src/main.cpp ****     referring to https://github.com/Aghosh993/Trinity2013/tree) not containing code covered
  18:../src/main.cpp ****     under the terms of STMicroelectronic's Liberty v2 License) is free software: you can redistribu
  19:../src/main.cpp ****     it and/or modify it ("it" refers to all sections of this code as covered in the aforementioned 
  20:../src/main.cpp ****     under the terms of the GNU General Public License as published by the Free Software Foundation,
  21:../src/main.cpp ****     either version 3 of the License, or (at your option) any later version.
  22:../src/main.cpp **** 
  23:../src/main.cpp ****     This program is distributed in the hope that it will be useful,
  24:../src/main.cpp ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  25:../src/main.cpp ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  26:../src/main.cpp ****     GNU General Public License for more details.
  27:../src/main.cpp **** 
  28:../src/main.cpp ****     You should have received a copy of the GNU General Public License
  29:../src/main.cpp ****     along with this program (please refer to the file COPYING in the root of
  30:../src/main.cpp ****     the repository).  If not, see <http://www.gnu.org/licenses/>.
  31:../src/main.cpp **** 
  32:../src/main.cpp ****     (c) Abhimanyu Ghosh, Polytechnic Institute of NYU (2013-2014)
  33:../src/main.cpp ****  */
  34:../src/main.cpp **** 
  35:../src/main.cpp **** /*
  36:../src/main.cpp ****  * All other code is covered by the following terms:
  37:../src/main.cpp ****  *
  38:../src/main.cpp ****  *   ******************************************************************************
  39:../src/main.cpp ****   * @attention
  40:../src/main.cpp ****   *
  41:../src/main.cpp ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  42:../src/main.cpp ****   *
  43:../src/main.cpp ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:../src/main.cpp ****   * You may not use this file except in compliance with the License.
  45:../src/main.cpp ****   * You may obtain a copy of the License at:
  46:../src/main.cpp ****   *
  47:../src/main.cpp ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:../src/main.cpp ****   *
  49:../src/main.cpp ****   * Unless required by applicable law or agreed to in writing, software
  50:../src/main.cpp ****   * distributed under the License is distributed on an "AS IS" BASIS,
  51:../src/main.cpp ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:../src/main.cpp ****   * See the License for the specific language governing permissions and
  53:../src/main.cpp ****   * limitations under the License.
  54:../src/main.cpp ****   *
  55:../src/main.cpp ****   ******************************************************************************
  56:../src/main.cpp ****  */
  57:../src/main.cpp **** 
  58:../src/main.cpp **** /*
  59:../src/main.cpp ****  * Timer usage manifest:
  60:../src/main.cpp ****  *
  61:../src/main.cpp ****  * TIM1: 16-bit PWM output mode (PE14) [for BLDC control...]
  62:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  63:../src/main.cpp ****  *
  64:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  65:../src/main.cpp ****  *
  66:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  67:../src/main.cpp ****  *
  68:../src/main.cpp ****  * TIM6: LED matrix ISR
  69:../src/main.cpp ****  * TIM7: Encoder update ISR
  70:../src/main.cpp ****  *
  71:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  72:../src/main.cpp ****  *
  73:../src/main.cpp ****  *
  74:../src/main.cpp ****  * TIM17: IMU update ISR
  75:../src/main.cpp ****  *
  76:../src/main.cpp ****  * Other pins/resources used:
  77:../src/main.cpp ****  *
  78:../src/main.cpp ****  * Analog: 	PA2: adcData[0]
  79:../src/main.cpp ****  * 			PA3: adcData[1]
  80:../src/main.cpp ****  *
  81:../src/main.cpp ****  * 			PA4: adc2_data[0]
  82:../src/main.cpp ****  * 			PC4: adc2_data[1]
  83:../src/main.cpp ****  * 			PC5: adc2_data[2]
  84:../src/main.cpp ****  * 			PB2: adc2_data[3]
  85:../src/main.cpp ****  *
  86:../src/main.cpp ****  * Digital:
  87:../src/main.cpp ****  *
  88:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  89:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  90:../src/main.cpp ****  *
  91:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  92:../src/main.cpp ****  *
  93:../src/main.cpp ****  */
  94:../src/main.cpp **** 
  95:../src/main.cpp **** /*
  96:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  97:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  98:../src/main.cpp ****  */
  99:../src/main.cpp **** 
 100:../src/main.cpp **** volatile int led_iter;
 101:../src/main.cpp **** volatile int led_matrix[7] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_13,
 102:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
 103:../src/main.cpp **** 
 104:../src/main.cpp **** void imu_update_ISR_init(void);
 105:../src/main.cpp **** int16_t calc_gyro_bias(void);
 106:../src/main.cpp **** 
 107:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
 108:../src/main.cpp **** 
 109:../src/main.cpp **** void adc1_init_DMA(void);
 110:../src/main.cpp **** void adc2_init_DMA(void);
 111:../src/main.cpp **** void battery_watchdog_init(void);
 112:../src/main.cpp **** void adc1_init(void);
 113:../src/main.cpp **** 
 114:../src/main.cpp **** void brake_pins_init(void);
 115:../src/main.cpp **** 
 116:../src/main.cpp **** void ping_pin_init(void);
 117:../src/main.cpp **** void timer2_timebase_init(void);
 118:../src/main.cpp **** 
 119:../src/main.cpp **** void comp_init(void);
 120:../src/main.cpp **** 
 121:../src/main.cpp **** void trinity2013_waitForStart(void);
 122:../src/main.cpp **** void trinity2016_sound_start(void);
 123:../src/main.cpp **** 
 124:../src/main.cpp **** float IR_distance(int IR_ADC_VAL);
 125:../src/main.cpp **** 
 126:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
 127:../src/main.cpp **** 
 128:../src/main.cpp **** encoderState left_enc, right_enc;
 129:../src/main.cpp **** 
 130:../src/main.cpp **** volatile float gyro_angle_x;
 131:../src/main.cpp **** int gyro_bias_x, adcval;
 132:../src/main.cpp **** 
 133:../src/main.cpp **** __IO uint32_t adcData[2];
 134:../src/main.cpp **** int new_data;
 135:../src/main.cpp **** 
 136:../src/main.cpp **** __IO uint32_t adc2_data[4];
 137:../src/main.cpp **** uint8_t adc2_new_data;
 138:../src/main.cpp **** 
 139:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
 140:../src/main.cpp **** 
 141:../src/main.cpp **** int count, stage;
 142:../src/main.cpp **** 
 143:../src/main.cpp **** float drive_cmd;// = 0.0f;
 144:../src/main.cpp **** float err;// = 0.0f;
 145:../src/main.cpp **** float last_err;// = 0.0f;
 146:../src/main.cpp **** float diff_err;
 147:../src/main.cpp **** float rt;// = 0.0f;
 148:../src/main.cpp **** float d_front;// = 1.0f;
 149:../src/main.cpp **** float integral;
 150:../src/main.cpp **** 
 151:../src/main.cpp **** float left, right;
 152:../src/main.cpp **** 
 153:../src/main.cpp **** int state;
 154:../src/main.cpp **** 
 155:../src/main.cpp **** float match_time_counter;
 156:../src/main.cpp **** float t_firefight_start;
 157:../src/main.cpp **** float t_homing_start;
 158:../src/main.cpp **** int leds_on;
 159:../src/main.cpp **** 
 160:../src/main.cpp **** // Initialize all encoder data structures to zero:
 161:../src/main.cpp **** 
 162:../src/main.cpp **** int main(void)
 163:../src/main.cpp **** {
 209              		.loc 1 163 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 16
 212              		@ frame_needed = 1, uses_anonymous_args = 0
 213 0000 80B5     		push	{r7, lr}
 214              	.LCFI0:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 84B0     		sub	sp, sp, #16
 219              	.LCFI1:
 220              		.cfi_def_cfa_offset 24
 221 0004 00AF     		add	r7, sp, #0
 222              	.LCFI2:
 223              		.cfi_def_cfa_register 7
 224              	.LBB2:
 164:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 225              		.loc 1 164 0
 226 0006 FFF7FEFF 		bl	SystemInit
 165:../src/main.cpp **** 
 166:../src/main.cpp **** 	UART1_init(); // Debug bridge
 227              		.loc 1 166 0
 228 000a FFF7FEFF 		bl	_Z10UART1_initv
 167:../src/main.cpp **** 
 168:../src/main.cpp **** 	state = ST_READY;
 229              		.loc 1 168 0
 230 000e 40F20003 		movw	r3, #:lower16:state
 231 0012 C0F20003 		movt	r3, #:upper16:state
 232 0016 4FF0FF32 		mov	r2, #-1
 233 001a 1A60     		str	r2, [r3, #0]
 169:../src/main.cpp **** 
 170:../src/main.cpp **** 	LED_MATRIX_ISR_init();
 234              		.loc 1 170 0
 235 001c FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 171:../src/main.cpp **** 
 172:../src/main.cpp **** //	trinity2013_waitForStart();
 173:../src/main.cpp **** //	trinity2016_sound_start();
 174:../src/main.cpp **** 
 175:../src/main.cpp **** 	state = ST_WANDER;
 236              		.loc 1 175 0
 237 0020 40F20003 		movw	r3, #:lower16:state
 238 0024 C0F20003 		movt	r3, #:upper16:state
 239 0028 4FF00002 		mov	r2, #0
 240 002c 1A60     		str	r2, [r3, #0]
 176:../src/main.cpp **** 
 177:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
 178:../src/main.cpp **** 
 179:../src/main.cpp **** 	adcData[0] = 0;
 241              		.loc 1 179 0
 242 002e 40F20003 		movw	r3, #:lower16:adcData
 243 0032 C0F20003 		movt	r3, #:upper16:adcData
 244 0036 4FF00002 		mov	r2, #0
 245 003a 1A60     		str	r2, [r3, #0]
 180:../src/main.cpp **** 	adcData[1] = 0;
 246              		.loc 1 180 0
 247 003c 40F20003 		movw	r3, #:lower16:adcData
 248 0040 C0F20003 		movt	r3, #:upper16:adcData
 249 0044 4FF00002 		mov	r2, #0
 250 0048 5A60     		str	r2, [r3, #4]
 181:../src/main.cpp **** 
 182:../src/main.cpp **** 	uint8_t iter = 0;
 251              		.loc 1 182 0
 252 004a 4FF00003 		mov	r3, #0
 253 004e FB73     		strb	r3, [r7, #15]
 183:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 254              		.loc 1 183 0
 255 0050 4FF00003 		mov	r3, #0
 256 0054 FB73     		strb	r3, [r7, #15]
 257 0056 0CE0     		b	.L2
 258              	.L3:
 184:../src/main.cpp **** 	{
 185:../src/main.cpp **** 		adc2_data[iter] = 0;
 259              		.loc 1 185 0 discriminator 2
 260 0058 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 261 005a 40F20003 		movw	r3, #:lower16:adc2_data
 262 005e C0F20003 		movt	r3, #:upper16:adc2_data
 263 0062 4FF00001 		mov	r1, #0
 264 0066 43F82210 		str	r1, [r3, r2, lsl #2]
 183:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 265              		.loc 1 183 0 discriminator 2
 266 006a FB7B     		ldrb	r3, [r7, #15]
 267 006c 03F10103 		add	r3, r3, #1
 268 0070 FB73     		strb	r3, [r7, #15]
 269              	.L2:
 183:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 270              		.loc 1 183 0 is_stmt 0 discriminator 1
 271 0072 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 272 0074 062B     		cmp	r3, #6
 273 0076 8CBF     		ite	hi
 274 0078 0023     		movhi	r3, #0
 275 007a 0123     		movls	r3, #1
 276 007c DBB2     		uxtb	r3, r3
 277 007e 002B     		cmp	r3, #0
 278 0080 EAD1     		bne	.L3
 186:../src/main.cpp **** 	}
 187:../src/main.cpp **** 
 188:../src/main.cpp **** 	adc3_awd1 = 0;
 279              		.loc 1 188 0 is_stmt 1
 280 0082 40F20003 		movw	r3, #:lower16:adc3_awd1
 281 0086 C0F20003 		movt	r3, #:upper16:adc3_awd1
 282 008a 4FF00002 		mov	r2, #0
 283 008e 1A70     		strb	r2, [r3, #0]
 189:../src/main.cpp **** 	adc3_awd2 = 0;
 284              		.loc 1 189 0
 285 0090 40F20003 		movw	r3, #:lower16:adc3_awd2
 286 0094 C0F20003 		movt	r3, #:upper16:adc3_awd2
 287 0098 4FF00002 		mov	r2, #0
 288 009c 1A70     		strb	r2, [r3, #0]
 190:../src/main.cpp **** 
 191:../src/main.cpp **** 	count = 0;
 289              		.loc 1 191 0
 290 009e 40F20003 		movw	r3, #:lower16:count
 291 00a2 C0F20003 		movt	r3, #:upper16:count
 292 00a6 4FF00002 		mov	r2, #0
 293 00aa 1A60     		str	r2, [r3, #0]
 192:../src/main.cpp **** 	stage = 0;
 294              		.loc 1 192 0
 295 00ac 40F20003 		movw	r3, #:lower16:stage
 296 00b0 C0F20003 		movt	r3, #:upper16:stage
 297 00b4 4FF00002 		mov	r2, #0
 298 00b8 1A60     		str	r2, [r3, #0]
 193:../src/main.cpp **** 
 194:../src/main.cpp **** 	/*
 195:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 196:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 197:../src/main.cpp **** 	 */
 198:../src/main.cpp **** 
 199:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 299              		.loc 1 199 0
 300 00ba 40F20000 		movw	r0, #:lower16:left_enc
 301 00be C0F20000 		movt	r0, #:upper16:left_enc
 302 00c2 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 200:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 303              		.loc 1 200 0
 304 00c6 40F20000 		movw	r0, #:lower16:right_enc
 305 00ca C0F20000 		movt	r0, #:upper16:right_enc
 306 00ce FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 201:../src/main.cpp **** 
 202:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 203:../src/main.cpp **** 
 204:../src/main.cpp **** 	brake_pins_init();
 307              		.loc 1 204 0
 308 00d2 FFF7FEFF 		bl	_Z15brake_pins_initv
 205:../src/main.cpp **** 	pwm_out1_init(2000);
 309              		.loc 1 205 0
 310 00d6 4FF4FA60 		mov	r0, #2000
 311 00da FFF7FEFF 		bl	_Z13pwm_out1_initt
 206:../src/main.cpp **** 	pwm_out2_init(2000);
 312              		.loc 1 206 0
 313 00de 4FF4FA60 		mov	r0, #2000
 314 00e2 FFF7FEFF 		bl	_Z13pwm_out2_initt
 207:../src/main.cpp **** 
 208:../src/main.cpp **** 	pwm_out3_init(50);
 315              		.loc 1 208 0
 316 00e6 4FF03200 		mov	r0, #50
 317 00ea FFF7FEFF 		bl	_Z13pwm_out3_initt
 209:../src/main.cpp **** 
 210:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 211:../src/main.cpp **** 
 212:../src/main.cpp **** 	TIM8_init_encoder();
 318              		.loc 1 212 0
 319 00ee FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 213:../src/main.cpp **** 	TIM4_init_encoder();
 320              		.loc 1 213 0
 321 00f2 FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 214:../src/main.cpp **** 
 215:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 216:../src/main.cpp **** 
 217:../src/main.cpp **** 	new_data = 0;
 322              		.loc 1 217 0
 323 00f6 40F20003 		movw	r3, #:lower16:new_data
 324 00fa C0F20003 		movt	r3, #:upper16:new_data
 325 00fe 4FF00002 		mov	r2, #0
 326 0102 1A60     		str	r2, [r3, #0]
 218:../src/main.cpp **** 	adc2_new_data = 0;
 327              		.loc 1 218 0
 328 0104 40F20003 		movw	r3, #:lower16:adc2_new_data
 329 0108 C0F20003 		movt	r3, #:upper16:adc2_new_data
 330 010c 4FF00002 		mov	r2, #0
 331 0110 1A70     		strb	r2, [r3, #0]
 219:../src/main.cpp **** 
 220:../src/main.cpp **** 	// Initialize ADC1 DMA:
 221:../src/main.cpp **** 	adc1_init_DMA();
 332              		.loc 1 221 0
 333 0112 FFF7FEFF 		bl	_Z13adc1_init_DMAv
 222:../src/main.cpp **** 
 223:../src/main.cpp **** 	// Initialize ADC2 DMA:
 224:../src/main.cpp **** 	adc2_init_DMA();
 334              		.loc 1 224 0
 335 0116 FFF7FEFF 		bl	_Z13adc2_init_DMAv
 225:../src/main.cpp **** 
 226:../src/main.cpp **** 	//	battery_watchdog_init();
 227:../src/main.cpp **** 
 228:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 336              		.loc 1 228 0
 337 011a FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 229:../src/main.cpp **** 
 230:../src/main.cpp **** 	// Ping Sensor Init:
 231:../src/main.cpp **** 
 232:../src/main.cpp **** 	ping_pin_init();
 338              		.loc 1 232 0
 339 011e FFF7FEFF 		bl	_Z13ping_pin_initv
 233:../src/main.cpp **** 	timer2_timebase_init();
 340              		.loc 1 233 0
 341 0122 FFF7FEFF 		bl	_Z20timer2_timebase_initv
 234:../src/main.cpp **** 	imu_update_ISR_init();
 342              		.loc 1 234 0
 343 0126 FFF7FEFF 		bl	_Z19imu_update_ISR_initv
 235:../src/main.cpp **** 
 236:../src/main.cpp **** 	// Encoder comparator init for noise debounce:
 237:../src/main.cpp **** 	comp_init();
 344              		.loc 1 237 0
 345 012a FFF7FEFF 		bl	_Z9comp_initv
 238:../src/main.cpp **** 
 239:../src/main.cpp **** 	adcval = 0;
 346              		.loc 1 239 0
 347 012e 40F20003 		movw	r3, #:lower16:adcval
 348 0132 C0F20003 		movt	r3, #:upper16:adcval
 349 0136 4FF00002 		mov	r2, #0
 350 013a 1A60     		str	r2, [r3, #0]
 240:../src/main.cpp **** 
 241:../src/main.cpp **** 	drive_cmd = 0.0f;
 351              		.loc 1 241 0
 352 013c 40F20003 		movw	r3, #:lower16:drive_cmd
 353 0140 C0F20003 		movt	r3, #:upper16:drive_cmd
 354 0144 4FF00002 		mov	r2, #0
 355 0148 1A60     		str	r2, [r3, #0]	@ float
 242:../src/main.cpp **** 	err = 0.0f;
 356              		.loc 1 242 0
 357 014a 40F20003 		movw	r3, #:lower16:err
 358 014e C0F20003 		movt	r3, #:upper16:err
 359 0152 4FF00002 		mov	r2, #0
 360 0156 1A60     		str	r2, [r3, #0]	@ float
 243:../src/main.cpp **** 	last_err = 0.0f;
 361              		.loc 1 243 0
 362 0158 40F20003 		movw	r3, #:lower16:last_err
 363 015c C0F20003 		movt	r3, #:upper16:last_err
 364 0160 4FF00002 		mov	r2, #0
 365 0164 1A60     		str	r2, [r3, #0]	@ float
 244:../src/main.cpp **** 	diff_err = 0.0f;
 366              		.loc 1 244 0
 367 0166 40F20003 		movw	r3, #:lower16:diff_err
 368 016a C0F20003 		movt	r3, #:upper16:diff_err
 369 016e 4FF00002 		mov	r2, #0
 370 0172 1A60     		str	r2, [r3, #0]	@ float
 245:../src/main.cpp **** 	rt = 0.0f;
 371              		.loc 1 245 0
 372 0174 40F20003 		movw	r3, #:lower16:rt
 373 0178 C0F20003 		movt	r3, #:upper16:rt
 374 017c 4FF00002 		mov	r2, #0
 375 0180 1A60     		str	r2, [r3, #0]	@ float
 246:../src/main.cpp **** 	d_front = 1.0f;
 376              		.loc 1 246 0
 377 0182 40F20003 		movw	r3, #:lower16:d_front
 378 0186 C0F20003 		movt	r3, #:upper16:d_front
 379 018a 4FF07E52 		mov	r2, #1065353216
 380 018e 1A60     		str	r2, [r3, #0]	@ float
 247:../src/main.cpp **** 	integral = 0.0f;
 381              		.loc 1 247 0
 382 0190 40F20003 		movw	r3, #:lower16:integral
 383 0194 C0F20003 		movt	r3, #:upper16:integral
 384 0198 4FF00002 		mov	r2, #0
 385 019c 1A60     		str	r2, [r3, #0]	@ float
 248:../src/main.cpp **** 
 249:../src/main.cpp **** 	int uv_avgBuf1 = 0;
 386              		.loc 1 249 0
 387 019e 4FF00003 		mov	r3, #0
 388 01a2 BB60     		str	r3, [r7, #8]
 250:../src/main.cpp **** 	int uv_avgBuf2 = 0;
 389              		.loc 1 250 0
 390 01a4 4FF00003 		mov	r3, #0
 391 01a8 7B60     		str	r3, [r7, #4]
 251:../src/main.cpp **** 	int uv_iter = 0;
 392              		.loc 1 251 0
 393 01aa 4FF00003 		mov	r3, #0
 394 01ae 3B60     		str	r3, [r7, #0]
 252:../src/main.cpp **** 
 253:../src/main.cpp **** 	float uv1_avg, uv2_avg;
 254:../src/main.cpp **** 
 255:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 395              		.loc 1 255 0
 396 01b0 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 256:../src/main.cpp **** 	leds_on = 0;
 397              		.loc 1 256 0
 398 01b4 40F20003 		movw	r3, #:lower16:leds_on
 399 01b8 C0F20003 		movt	r3, #:upper16:leds_on
 400 01bc 4FF00002 		mov	r2, #0
 401 01c0 1A60     		str	r2, [r3, #0]
 402              	.L4:
 257:../src/main.cpp **** 
 258:../src/main.cpp **** 	while(true)
 403              		.loc 1 258 0 discriminator 1
 404 01c2 FEE7     		b	.L4
 405              	.LBE2:
 406              		.cfi_endproc
 407              	.LFE111:
 409              		.align	2
 410              		.global	_Z24trinity2013_waitForStartv
 411              		.thumb
 412              		.thumb_func
 414              	_Z24trinity2013_waitForStartv:
 415              	.LFB112:
 259:../src/main.cpp **** 	{
 260:../src/main.cpp **** #ifdef ENABLE_FIREFIGHTING
 261:../src/main.cpp **** 		if(((adc2_data[2] > UV_THRESHOLD && adcData[0] > UV_THRESHOLD)) && state == ST_WANDER) //500
 262:../src/main.cpp **** 		{
 263:../src/main.cpp **** 			for(uv_iter=0; uv_iter<UV_NUMSAMPLES; ++uv_iter)
 264:../src/main.cpp **** 			{
 265:../src/main.cpp **** 				uv_avgBuf1 += (int)adcData[0];
 266:../src/main.cpp **** 				uv_avgBuf2 += (int)adc2_data[2];
 267:../src/main.cpp **** 			}
 268:../src/main.cpp **** 			uv1_avg = (float)uv_avgBuf1/(float)UV_NUMSAMPLES;
 269:../src/main.cpp **** 			uv2_avg = (float)uv_avgBuf2/(float)UV_NUMSAMPLES;
 270:../src/main.cpp **** 
 271:../src/main.cpp **** 			if(uv1_avg > (float)UV_THRESHOLD && uv2_avg > (float)UV_THRESHOLD)
 272:../src/main.cpp **** 			{
 273:../src/main.cpp **** 				t_homing_start = match_time_counter;
 274:../src/main.cpp **** 				state = ST_HOMING;
 275:../src/main.cpp **** 			}
 276:../src/main.cpp **** 
 277:../src/main.cpp **** 		}
 278:../src/main.cpp **** 		else if (state == ST_FIREFIGHT)
 279:../src/main.cpp **** 		{
 280:../src/main.cpp **** 			pwm1_output(0.5);
 281:../src/main.cpp **** 			pwm2_output(0.5);
 282:../src/main.cpp **** 			int jk = 0;
 283:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 284:../src/main.cpp **** 			{
 285:../src/main.cpp **** 				pwm3_output(0.06f);
 286:../src/main.cpp **** 			}
 287:../src/main.cpp **** 			pwm3_output(0.1f);
 288:../src/main.cpp **** 			t_firefight_start = match_time_counter;
 289:../src/main.cpp **** 			state = ST_CANDLE_BLOWOUT;
 290:../src/main.cpp **** 		}
 291:../src/main.cpp **** #endif
 292:../src/main.cpp **** 
 293:../src/main.cpp **** 	}
 294:../src/main.cpp **** 	return 0; // We should never manage to get here...
 295:../src/main.cpp **** }
 296:../src/main.cpp **** 
 297:../src/main.cpp **** void trinity2013_waitForStart(void)
 298:../src/main.cpp **** {
 416              		.loc 1 298 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 8
 419              		@ frame_needed = 1, uses_anonymous_args = 0
 420 01c4 80B5     		push	{r7, lr}
 421              	.LCFI3:
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 7, -8
 424              		.cfi_offset 14, -4
 425 01c6 82B0     		sub	sp, sp, #8
 426              	.LCFI4:
 427              		.cfi_def_cfa_offset 16
 428 01c8 00AF     		add	r7, sp, #0
 429              	.LCFI5:
 430              		.cfi_def_cfa_register 7
 431              	.LBB3:
 299:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 432              		.loc 1 299 0
 433 01ca 4FF48010 		mov	r0, #1048576
 434 01ce 4FF00101 		mov	r1, #1
 435 01d2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 300:../src/main.cpp **** 	GPIO_DeInit(GPIOD);
 436              		.loc 1 300 0
 437 01d6 4FF44060 		mov	r0, #3072
 438 01da C4F60000 		movt	r0, 18432
 439 01de FFF7FEFF 		bl	GPIO_DeInit
 301:../src/main.cpp **** 	GPIO_InitTypeDef g;
 302:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 440              		.loc 1 302 0
 441 01e2 4FF00003 		mov	r3, #0
 442 01e6 3B71     		strb	r3, [r7, #4]
 303:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 443              		.loc 1 303 0
 444 01e8 4FF00103 		mov	r3, #1
 445 01ec BB71     		strb	r3, [r7, #6]
 304:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_3;
 446              		.loc 1 304 0
 447 01ee 4FF00803 		mov	r3, #8
 448 01f2 3B60     		str	r3, [r7, #0]
 305:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_DOWN;
 449              		.loc 1 305 0
 450 01f4 4FF00203 		mov	r3, #2
 451 01f8 FB71     		strb	r3, [r7, #7]
 306:../src/main.cpp **** 	GPIO_Init(GPIOD,&g);
 452              		.loc 1 306 0
 453 01fa 3B46     		mov	r3, r7
 454 01fc 4FF44060 		mov	r0, #3072
 455 0200 C4F60000 		movt	r0, 18432
 456 0204 1946     		mov	r1, r3
 457 0206 FFF7FEFF 		bl	GPIO_Init
 307:../src/main.cpp **** 
 308:../src/main.cpp **** 	while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_3) == (uint8_t)Bit_RESET);
 458              		.loc 1 308 0
 459 020a 00BF     		nop
 460              	.L6:
 461              		.loc 1 308 0 is_stmt 0 discriminator 1
 462 020c 4FF44060 		mov	r0, #3072
 463 0210 C4F60000 		movt	r0, 18432
 464 0214 4FF00801 		mov	r1, #8
 465 0218 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 466 021c 0346     		mov	r3, r0
 467 021e 002B     		cmp	r3, #0
 468 0220 14BF     		ite	ne
 469 0222 0023     		movne	r3, #0
 470 0224 0123     		moveq	r3, #1
 471 0226 DBB2     		uxtb	r3, r3
 472 0228 002B     		cmp	r3, #0
 473 022a EFD1     		bne	.L6
 309:../src/main.cpp **** 	match_time_counter = 0.0f;
 474              		.loc 1 309 0 is_stmt 1
 475 022c 40F20003 		movw	r3, #:lower16:match_time_counter
 476 0230 C0F20003 		movt	r3, #:upper16:match_time_counter
 477 0234 4FF00002 		mov	r2, #0
 478 0238 1A60     		str	r2, [r3, #0]	@ float
 310:../src/main.cpp **** 	state = ST_WANDER;
 479              		.loc 1 310 0
 480 023a 40F20003 		movw	r3, #:lower16:state
 481 023e C0F20003 		movt	r3, #:upper16:state
 482 0242 4FF00002 		mov	r2, #0
 483 0246 1A60     		str	r2, [r3, #0]
 484              	.LBE3:
 311:../src/main.cpp **** }
 485              		.loc 1 311 0
 486 0248 07F10807 		add	r7, r7, #8
 487 024c BD46     		mov	sp, r7
 488 024e 80BD     		pop	{r7, pc}
 489              		.cfi_endproc
 490              	.LFE112:
 492              		.global	__aeabi_f2d
 493              		.global	__aeabi_d2f
 494              		.align	2
 495              		.global	_Z23trinity2016_sound_startv
 496              		.thumb
 497              		.thumb_func
 499              	_Z23trinity2016_sound_startv:
 500              	.LFB113:
 312:../src/main.cpp **** 
 313:../src/main.cpp **** void trinity2016_sound_start(void)
 314:../src/main.cpp **** {
 501              		.loc 1 314 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 128
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505 0250 80B5     		push	{r7, lr}
 506              	.LCFI6:
 507              		.cfi_def_cfa_offset 8
 508              		.cfi_offset 7, -8
 509              		.cfi_offset 14, -4
 510 0252 A0B0     		sub	sp, sp, #128
 511              	.LCFI7:
 512              		.cfi_def_cfa_offset 136
 513 0254 00AF     		add	r7, sp, #0
 514              	.LCFI8:
 515              		.cfi_def_cfa_register 7
 516              	.LBB4:
 315:../src/main.cpp **** 	// Enable GPIOE, Pin 9 for sound detect indication:
 316:../src/main.cpp **** 
 317:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 517              		.loc 1 317 0
 518 0256 4FF40010 		mov	r0, #2097152
 519 025a 4FF00101 		mov	r1, #1
 520 025e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 318:../src/main.cpp **** 
 319:../src/main.cpp **** 	GPIO_InitTypeDef a;
 320:../src/main.cpp **** 
 321:../src/main.cpp **** 	a.GPIO_Pin = GPIO_Pin_9;
 521              		.loc 1 321 0
 522 0262 4FF40073 		mov	r3, #512
 523 0266 FB63     		str	r3, [r7, #60]
 322:../src/main.cpp **** 	a.GPIO_Mode = GPIO_Mode_OUT;
 524              		.loc 1 322 0
 525 0268 4FF00103 		mov	r3, #1
 526 026c 87F84030 		strb	r3, [r7, #64]
 323:../src/main.cpp **** 	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 527              		.loc 1 323 0
 528 0270 4FF00003 		mov	r3, #0
 529 0274 87F84330 		strb	r3, [r7, #67]
 324:../src/main.cpp **** 	a.GPIO_OType = GPIO_OType_PP;
 530              		.loc 1 324 0
 531 0278 4FF00003 		mov	r3, #0
 532 027c 87F84230 		strb	r3, [r7, #66]
 325:../src/main.cpp **** 	a.GPIO_Speed = GPIO_Speed_Level_2;
 533              		.loc 1 325 0
 534 0280 4FF00203 		mov	r3, #2
 535 0284 87F84130 		strb	r3, [r7, #65]
 326:../src/main.cpp **** 
 327:../src/main.cpp **** 	GPIO_Init(GPIOE, &a);
 536              		.loc 1 327 0
 537 0288 07F13C03 		add	r3, r7, #60
 538 028c 4FF48050 		mov	r0, #4096
 539 0290 C4F60000 		movt	r0, 18432
 540 0294 1946     		mov	r1, r3
 541 0296 FFF7FEFF 		bl	GPIO_Init
 328:../src/main.cpp **** 
 329:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 330:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 331:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 332:../src/main.cpp **** 
 333:../src/main.cpp **** 	/* Configure the ADC clock */
 334:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 542              		.loc 1 334 0
 543 029a 4FF48870 		mov	r0, #272
 544 029e FFF7FEFF 		bl	RCC_ADCCLKConfig
 335:../src/main.cpp **** 	/* Enable ADC2 clock */
 336:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 545              		.loc 1 336 0
 546 02a2 4FF08050 		mov	r0, #268435456
 547 02a6 4FF00101 		mov	r1, #1
 548 02aa FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 337:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 338:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 549              		.loc 1 338 0
 550 02ae 4FF40030 		mov	r0, #131072
 551 02b2 4FF00101 		mov	r1, #1
 552 02b6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 339:../src/main.cpp **** 
 340:../src/main.cpp **** 	// Configure PA5 as an analog input:
 341:../src/main.cpp **** 
 342:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 553              		.loc 1 342 0
 554 02ba 07F12003 		add	r3, r7, #32
 555 02be 1846     		mov	r0, r3
 556 02c0 FFF7FEFF 		bl	GPIO_StructInit
 343:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 557              		.loc 1 343 0
 558 02c4 4FF02003 		mov	r3, #32
 559 02c8 3B62     		str	r3, [r7, #32]
 344:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 560              		.loc 1 344 0
 561 02ca 4FF00303 		mov	r3, #3
 562 02ce 87F82430 		strb	r3, [r7, #36]
 345:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 563              		.loc 1 345 0
 564 02d2 4FF00003 		mov	r3, #0
 565 02d6 87F82730 		strb	r3, [r7, #39]
 346:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 566              		.loc 1 346 0
 567 02da 4FF00303 		mov	r3, #3
 568 02de 87F82530 		strb	r3, [r7, #37]
 347:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 569              		.loc 1 347 0
 570 02e2 07F12003 		add	r3, r7, #32
 571 02e6 4FF09040 		mov	r0, #1207959552
 572 02ea 1946     		mov	r1, r3
 573 02ec FFF7FEFF 		bl	GPIO_Init
 348:../src/main.cpp **** 
 349:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 574              		.loc 1 349 0
 575 02f0 3B46     		mov	r3, r7
 576 02f2 1846     		mov	r0, r3
 577 02f4 FFF7FEFF 		bl	ADC_StructInit
 350:../src/main.cpp **** 
 351:../src/main.cpp **** 	/* Calibration procedure */
 352:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 578              		.loc 1 352 0
 579 02f8 4FF48070 		mov	r0, #256
 580 02fc C5F20000 		movt	r0, 20480
 581 0300 4FF00101 		mov	r1, #1
 582 0304 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 353:../src/main.cpp **** 
 354:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 355:../src/main.cpp **** 	int foo;
 356:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 583              		.loc 1 356 0
 584 0308 4FF00003 		mov	r3, #0
 585 030c FB67     		str	r3, [r7, #124]
 586 030e 07E0     		b	.L8
 587              	.L9:
 357:../src/main.cpp **** 	{
 358:../src/main.cpp **** 	  ++foo;
 588              		.loc 1 358 0 discriminator 2
 589 0310 FB6F     		ldr	r3, [r7, #124]
 590 0312 03F10103 		add	r3, r3, #1
 591 0316 FB67     		str	r3, [r7, #124]
 356:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 592              		.loc 1 356 0 discriminator 2
 593 0318 FB6F     		ldr	r3, [r7, #124]
 594 031a 03F10103 		add	r3, r3, #1
 595 031e FB67     		str	r3, [r7, #124]
 596              	.L8:
 356:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 597              		.loc 1 356 0 is_stmt 0 discriminator 1
 598 0320 FA6F     		ldr	r2, [r7, #124]
 599 0322 4FF6FF13 		movw	r3, #63999
 600 0326 9A42     		cmp	r2, r3
 601 0328 CCBF     		ite	gt
 602 032a 0023     		movgt	r3, #0
 603 032c 0123     		movle	r3, #1
 604 032e DBB2     		uxtb	r3, r3
 605 0330 002B     		cmp	r3, #0
 606 0332 EDD1     		bne	.L9
 359:../src/main.cpp **** 	}
 360:../src/main.cpp **** 
 361:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 607              		.loc 1 361 0 is_stmt 1
 608 0334 4FF48070 		mov	r0, #256
 609 0338 C5F20000 		movt	r0, 20480
 610 033c 4FF00001 		mov	r1, #0
 611 0340 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 362:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 612              		.loc 1 362 0
 613 0344 4FF48070 		mov	r0, #256
 614 0348 C5F20000 		movt	r0, 20480
 615 034c FFF7FEFF 		bl	ADC_StartCalibration
 363:../src/main.cpp **** 
 364:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 616              		.loc 1 364 0
 617 0350 00BF     		nop
 618              	.L10:
 619              		.loc 1 364 0 is_stmt 0 discriminator 1
 620 0352 4FF48070 		mov	r0, #256
 621 0356 C5F20000 		movt	r0, 20480
 622 035a FFF7FEFF 		bl	ADC_GetCalibrationStatus
 623 035e 0346     		mov	r3, r0
 624 0360 002B     		cmp	r3, #0
 625 0362 0CBF     		ite	eq
 626 0364 0023     		moveq	r3, #0
 627 0366 0123     		movne	r3, #1
 628 0368 DBB2     		uxtb	r3, r3
 629 036a 002B     		cmp	r3, #0
 630 036c F1D1     		bne	.L10
 365:../src/main.cpp **** 
 366:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 631              		.loc 1 366 0 is_stmt 1
 632 036e 4FF00003 		mov	r3, #0
 633 0372 BB62     		str	r3, [r7, #40]
 367:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 634              		.loc 1 367 0
 635 0374 4FF00003 		mov	r3, #0
 636 0378 FB62     		str	r3, [r7, #44]
 368:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 637              		.loc 1 368 0
 638 037a 4FF40043 		mov	r3, #32768
 639 037e 3B63     		str	r3, [r7, #48]
 369:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 640              		.loc 1 369 0
 641 0380 4FF00203 		mov	r3, #2
 642 0384 7B63     		str	r3, [r7, #52]
 370:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 643              		.loc 1 370 0
 644 0386 4FF00F03 		mov	r3, #15
 645 038a 87F83830 		strb	r3, [r7, #56]
 371:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 646              		.loc 1 371 0
 647 038e 07F12803 		add	r3, r7, #40
 648 0392 4FF48070 		mov	r0, #256
 649 0396 C5F20000 		movt	r0, 20480
 650 039a 1946     		mov	r1, r3
 651 039c FFF7FEFF 		bl	ADC_CommonInit
 372:../src/main.cpp **** 
 373:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 652              		.loc 1 373 0
 653 03a0 4FF40053 		mov	r3, #8192
 654 03a4 3B60     		str	r3, [r7, #0]
 374:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 655              		.loc 1 374 0
 656 03a6 4FF00003 		mov	r3, #0
 657 03aa 7B60     		str	r3, [r7, #4]
 375:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 658              		.loc 1 375 0
 659 03ac 4FF00003 		mov	r3, #0
 660 03b0 BB60     		str	r3, [r7, #8]
 376:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 661              		.loc 1 376 0
 662 03b2 4FF00003 		mov	r3, #0
 663 03b6 FB60     		str	r3, [r7, #12]
 377:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 664              		.loc 1 377 0
 665 03b8 4FF00003 		mov	r3, #0
 666 03bc 3B61     		str	r3, [r7, #16]
 378:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 667              		.loc 1 378 0
 668 03be 4FF00003 		mov	r3, #0
 669 03c2 7B61     		str	r3, [r7, #20]
 379:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 670              		.loc 1 379 0
 671 03c4 4FF00003 		mov	r3, #0
 672 03c8 BB61     		str	r3, [r7, #24]
 380:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 673              		.loc 1 380 0
 674 03ca 4FF00103 		mov	r3, #1
 675 03ce 3B77     		strb	r3, [r7, #28]
 381:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 676              		.loc 1 381 0
 677 03d0 3B46     		mov	r3, r7
 678 03d2 4FF48070 		mov	r0, #256
 679 03d6 C5F20000 		movt	r0, 20480
 680 03da 1946     		mov	r1, r3
 681 03dc FFF7FEFF 		bl	ADC_Init
 382:../src/main.cpp **** 
 383:../src/main.cpp **** 	/* ADC2 regular Channel 2 (conversion #1) configuration */
 384:../src/main.cpp **** 
 385:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_2, 1, ADC_SampleTime_1Cycles5);
 682              		.loc 1 385 0
 683 03e0 4FF48070 		mov	r0, #256
 684 03e4 C5F20000 		movt	r0, 20480
 685 03e8 4FF00201 		mov	r1, #2
 686 03ec 4FF00102 		mov	r2, #1
 687 03f0 4FF00003 		mov	r3, #0
 688 03f4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 386:../src/main.cpp **** 
 387:../src/main.cpp **** 	/* Enable ADC2 */
 388:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 689              		.loc 1 388 0
 690 03f8 4FF48070 		mov	r0, #256
 691 03fc C5F20000 		movt	r0, 20480
 692 0400 4FF00101 		mov	r1, #1
 693 0404 FFF7FEFF 		bl	ADC_Cmd
 389:../src/main.cpp **** 
 390:../src/main.cpp **** 	/* wait for ADRDY */
 391:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 694              		.loc 1 391 0
 695 0408 00BF     		nop
 696              	.L11:
 697              		.loc 1 391 0 is_stmt 0 discriminator 1
 698 040a 4FF48070 		mov	r0, #256
 699 040e C5F20000 		movt	r0, 20480
 700 0412 4FF00101 		mov	r1, #1
 701 0416 FFF7FEFF 		bl	ADC_GetFlagStatus
 702 041a 0346     		mov	r3, r0
 703 041c 002B     		cmp	r3, #0
 704 041e 14BF     		ite	ne
 705 0420 0023     		movne	r3, #0
 706 0422 0123     		moveq	r3, #1
 707 0424 DBB2     		uxtb	r3, r3
 708 0426 002B     		cmp	r3, #0
 709 0428 EFD1     		bne	.L11
 392:../src/main.cpp **** 
 393:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 394:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 710              		.loc 1 394 0 is_stmt 1
 711 042a 4FF48070 		mov	r0, #256
 712 042e C5F20000 		movt	r0, 20480
 713 0432 FFF7FEFF 		bl	ADC_StartConversion
 395:../src/main.cpp **** 
 396:../src/main.cpp **** 	/* Enable Timer 2 timebase to enable timed ADC measurements: */
 397:../src/main.cpp **** 	/* 1 us/timer tick */
 398:../src/main.cpp **** 	timer2_timebase_init();
 714              		.loc 1 398 0
 715 0436 FFF7FEFF 		bl	_Z20timer2_timebase_initv
 399:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 716              		.loc 1 399 0
 717 043a 4FF08040 		mov	r0, #1073741824
 718 043e 4FF00001 		mov	r1, #0
 719 0442 FFF7FEFF 		bl	TIM_SetCounter
 400:../src/main.cpp **** 	TIM_Cmd(TIM2, ENABLE);
 720              		.loc 1 400 0
 721 0446 4FF08040 		mov	r0, #1073741824
 722 044a 4FF00101 		mov	r1, #1
 723 044e FFF7FEFF 		bl	TIM_Cmd
 401:../src/main.cpp **** 
 402:../src/main.cpp **** 	float normalized_mic_adc_input = 0.0f;
 724              		.loc 1 402 0
 725 0452 4FF00003 		mov	r3, #0
 726 0456 7B65     		str	r3, [r7, #84]	@ float
 403:../src/main.cpp **** 
 404:../src/main.cpp **** 	float last_lowpass_output = 0.0f;
 727              		.loc 1 404 0
 728 0458 4FF00003 		mov	r3, #0
 729 045c BB67     		str	r3, [r7, #120]	@ float
 405:../src/main.cpp **** 	float last_lowpass_output2 = 0.0f;
 730              		.loc 1 405 0
 731 045e 4FF00003 		mov	r3, #0
 732 0462 7B67     		str	r3, [r7, #116]	@ float
 406:../src/main.cpp **** 	float last_lowpass_output3 = 0.0f;
 733              		.loc 1 406 0
 734 0464 4FF00003 		mov	r3, #0
 735 0468 3B65     		str	r3, [r7, #80]	@ float
 407:../src/main.cpp **** 
 408:../src/main.cpp **** 	float last_highpass_input = 0.0f;
 736              		.loc 1 408 0
 737 046a 4FF00003 		mov	r3, #0
 738 046e 3B67     		str	r3, [r7, #112]	@ float
 409:../src/main.cpp **** 	float last_highpass_output = 0.0f;
 739              		.loc 1 409 0
 740 0470 4FF00003 		mov	r3, #0
 741 0474 FB66     		str	r3, [r7, #108]	@ float
 410:../src/main.cpp **** 
 411:../src/main.cpp **** 	float last_highpass_input2 = 0.0f;
 742              		.loc 1 411 0
 743 0476 4FF00003 		mov	r3, #0
 744 047a BB66     		str	r3, [r7, #104]	@ float
 412:../src/main.cpp **** 	float last_highpass_output2 = 0.0f;
 745              		.loc 1 412 0
 746 047c 4FF00003 		mov	r3, #0
 747 0480 7B66     		str	r3, [r7, #100]	@ float
 413:../src/main.cpp **** 
 414:../src/main.cpp **** 	float sampling_time = 0.000001f * (float)SOUND_ACTIVATION_SAMPLING_TIME_US;
 748              		.loc 1 414 0
 749 0482 4BF21773 		movw	r3, #46871
 750 0486 C3F65103 		movt	r3, 14417
 751 048a FB64     		str	r3, [r7, #76]	@ float
 415:../src/main.cpp **** 
 416:../src/main.cpp **** 	float lowpass_alpha = 2.0f*3.14159f*sampling_time*(float)SOUND_ACTIVATION_HIGH_BOUND_HERTZ /
 417:../src/main.cpp **** 						((2.0f*3.14159f*sampling_time*(float)SOUND_ACTIVATION_HIGH_BOUND_HERTZ) + 1.0f);
 752              		.loc 1 417 0
 753 048c 97ED137A 		flds	s14, [r7, #76]
 754 0490 DFED8B7A 		flds	s15, .L18
 755 0494 27EE277A 		fmuls	s14, s14, s15
 756 0498 DFED8A7A 		flds	s15, .L18+4
 757 049c 27EE277A 		fmuls	s14, s14, s15
 758 04a0 D7ED136A 		flds	s13, [r7, #76]
 759 04a4 DFED867A 		flds	s15, .L18
 760 04a8 66EEA76A 		fmuls	s13, s13, s15
 761 04ac DFED857A 		flds	s15, .L18+4
 762 04b0 66EEA76A 		fmuls	s13, s13, s15
 763 04b4 F7EE007A 		fconsts	s15, #112
 764 04b8 76EEA77A 		fadds	s15, s13, s15
 765 04bc C7EE277A 		fdivs	s15, s14, s15
 766 04c0 C7ED127A 		fsts	s15, [r7, #72]
 418:../src/main.cpp **** 
 419:../src/main.cpp **** 	float highpass_alpha = 1.0f/((2.0f*3.14159f*sampling_time*SOUND_ACTIVATION_LOW_BOUND_HERTZ) + 1.0f
 767              		.loc 1 419 0
 768 04c4 97ED137A 		flds	s14, [r7, #76]
 769 04c8 DFED7D7A 		flds	s15, .L18
 770 04cc 27EE277A 		fmuls	s14, s14, s15
 771 04d0 DFED7D7A 		flds	s15, .L18+8
 772 04d4 27EE277A 		fmuls	s14, s14, s15
 773 04d8 F7EE007A 		fconsts	s15, #112
 774 04dc 77EE277A 		fadds	s15, s14, s15
 775 04e0 B7EE007A 		fconsts	s14, #112
 776 04e4 C7EE277A 		fdivs	s15, s14, s15
 777 04e8 C7ED117A 		fsts	s15, [r7, #68]
 420:../src/main.cpp **** 
 421:../src/main.cpp **** 	int i = 0;
 778              		.loc 1 421 0
 779 04ec 4FF00003 		mov	r3, #0
 780 04f0 3B66     		str	r3, [r7, #96]
 422:../src/main.cpp **** 	float rms_accum = 0.0f;
 781              		.loc 1 422 0
 782 04f2 4FF00003 		mov	r3, #0
 783 04f6 FB65     		str	r3, [r7, #92]	@ float
 423:../src/main.cpp **** 	float last_rms_value = 0.0f;
 784              		.loc 1 423 0
 785 04f8 4FF00003 		mov	r3, #0
 786 04fc BB65     		str	r3, [r7, #88]	@ float
 787              	.L16:
 424:../src/main.cpp **** 
 425:../src/main.cpp **** 	while(1)
 426:../src/main.cpp **** 	{
 427:../src/main.cpp **** 		if(TIM_GetCounter(TIM2) >= SOUND_ACTIVATION_SAMPLING_TIME_US)
 788              		.loc 1 427 0
 789 04fe 4FF08040 		mov	r0, #1073741824
 790 0502 FFF7FEFF 		bl	TIM_GetCounter
 791 0506 0346     		mov	r3, r0
 792 0508 312B     		cmp	r3, #49
 793 050a 94BF     		ite	ls
 794 050c 0023     		movls	r3, #0
 795 050e 0123     		movhi	r3, #1
 796 0510 DBB2     		uxtb	r3, r3
 797 0512 002B     		cmp	r3, #0
 798 0514 00F0A880 		beq	.L12
 428:../src/main.cpp **** 		{
 429:../src/main.cpp **** 			TIM_Cmd(TIM2, DISABLE);
 799              		.loc 1 429 0
 800 0518 4FF08040 		mov	r0, #1073741824
 801 051c 4FF00001 		mov	r1, #0
 802 0520 FFF7FEFF 		bl	TIM_Cmd
 430:../src/main.cpp **** 			TIM_SetCounter(TIM2, 0);
 803              		.loc 1 430 0
 804 0524 4FF08040 		mov	r0, #1073741824
 805 0528 4FF00001 		mov	r1, #0
 806 052c FFF7FEFF 		bl	TIM_SetCounter
 431:../src/main.cpp **** 			TIM_Cmd(TIM2, ENABLE);
 807              		.loc 1 431 0
 808 0530 4FF08040 		mov	r0, #1073741824
 809 0534 4FF00101 		mov	r1, #1
 810 0538 FFF7FEFF 		bl	TIM_Cmd
 432:../src/main.cpp **** 
 433:../src/main.cpp **** 			// Normalize input:
 434:../src/main.cpp **** 			normalized_mic_adc_input = (float)ADC_GetConversionValue(ADC2)/(float)4096;
 811              		.loc 1 434 0
 812 053c 4FF48070 		mov	r0, #256
 813 0540 C5F20000 		movt	r0, 20480
 814 0544 FFF7FEFF 		bl	ADC_GetConversionValue
 815 0548 0346     		mov	r3, r0
 816 054a 07EE903A 		fmsr	s15, r3	@ int
 817 054e B8EE677A 		fuitos	s14, s15
 818 0552 DFED5E7A 		flds	s15, .L18+12
 819 0556 C7EE277A 		fdivs	s15, s14, s15
 820 055a C7ED157A 		fsts	s15, [r7, #84]
 435:../src/main.cpp **** 
 436:../src/main.cpp **** 			// Perform one step of lowpass filter operation:
 437:../src/main.cpp **** 			last_lowpass_output = (lowpass_alpha * normalized_mic_adc_input) +
 438:../src/main.cpp **** 										((1.0f - lowpass_alpha)*last_lowpass_output);
 821              		.loc 1 438 0
 822 055e 97ED127A 		flds	s14, [r7, #72]
 823 0562 D7ED157A 		flds	s15, [r7, #84]
 824 0566 27EE277A 		fmuls	s14, s14, s15
 825 056a F7EE006A 		fconsts	s13, #112
 826 056e D7ED127A 		flds	s15, [r7, #72]
 827 0572 76EEE76A 		fsubs	s13, s13, s15
 828 0576 D7ED1E7A 		flds	s15, [r7, #120]
 829 057a 66EEA77A 		fmuls	s15, s13, s15
 830 057e 77EE277A 		fadds	s15, s14, s15
 831 0582 C7ED1E7A 		fsts	s15, [r7, #120]
 439:../src/main.cpp **** 
 440:../src/main.cpp **** 			// Perform one step of lowpass filter operation:
 441:../src/main.cpp **** 			last_lowpass_output2 = (lowpass_alpha * last_lowpass_output) +
 442:../src/main.cpp **** 										((1.0f - lowpass_alpha)*last_lowpass_output2);
 832              		.loc 1 442 0
 833 0586 97ED127A 		flds	s14, [r7, #72]
 834 058a D7ED1E7A 		flds	s15, [r7, #120]
 835 058e 27EE277A 		fmuls	s14, s14, s15
 836 0592 F7EE006A 		fconsts	s13, #112
 837 0596 D7ED127A 		flds	s15, [r7, #72]
 838 059a 76EEE76A 		fsubs	s13, s13, s15
 839 059e D7ED1D7A 		flds	s15, [r7, #116]
 840 05a2 66EEA77A 		fmuls	s15, s13, s15
 841 05a6 77EE277A 		fadds	s15, s14, s15
 842 05aa C7ED1D7A 		fsts	s15, [r7, #116]
 443:../src/main.cpp **** 
 444:../src/main.cpp **** 			// Perform one step of highpass filter operation:
 445:../src/main.cpp **** 			last_highpass_output = (highpass_alpha * last_highpass_output) +
 446:../src/main.cpp **** 										(highpass_alpha * (last_lowpass_output2 - last_highpass_input));
 843              		.loc 1 446 0
 844 05ae 97ED117A 		flds	s14, [r7, #68]
 845 05b2 D7ED1B7A 		flds	s15, [r7, #108]
 846 05b6 27EE277A 		fmuls	s14, s14, s15
 847 05ba D7ED1D6A 		flds	s13, [r7, #116]
 848 05be D7ED1C7A 		flds	s15, [r7, #112]
 849 05c2 76EEE76A 		fsubs	s13, s13, s15
 850 05c6 D7ED117A 		flds	s15, [r7, #68]
 851 05ca 66EEA77A 		fmuls	s15, s13, s15
 852 05ce 77EE277A 		fadds	s15, s14, s15
 853 05d2 C7ED1B7A 		fsts	s15, [r7, #108]
 447:../src/main.cpp **** 			last_highpass_input = last_lowpass_output2;
 854              		.loc 1 447 0
 855 05d6 7B6F     		ldr	r3, [r7, #116]	@ float
 856 05d8 3B67     		str	r3, [r7, #112]	@ float
 448:../src/main.cpp **** 
 449:../src/main.cpp **** 			// Perform one step of highpass filter operation:
 450:../src/main.cpp **** 			last_highpass_output2 = (highpass_alpha * last_highpass_output2) +
 451:../src/main.cpp **** 										(highpass_alpha * (last_highpass_output - last_highpass_input2));
 857              		.loc 1 451 0
 858 05da 97ED117A 		flds	s14, [r7, #68]
 859 05de D7ED197A 		flds	s15, [r7, #100]
 860 05e2 27EE277A 		fmuls	s14, s14, s15
 861 05e6 D7ED1B6A 		flds	s13, [r7, #108]
 862 05ea D7ED1A7A 		flds	s15, [r7, #104]
 863 05ee 76EEE76A 		fsubs	s13, s13, s15
 864 05f2 D7ED117A 		flds	s15, [r7, #68]
 865 05f6 66EEA77A 		fmuls	s15, s13, s15
 866 05fa 77EE277A 		fadds	s15, s14, s15
 867 05fe C7ED197A 		fsts	s15, [r7, #100]
 452:../src/main.cpp **** 			last_highpass_input2 = last_highpass_output;
 868              		.loc 1 452 0
 869 0602 FB6E     		ldr	r3, [r7, #108]	@ float
 870 0604 BB66     		str	r3, [r7, #104]	@ float
 453:../src/main.cpp **** 
 454:../src/main.cpp **** 			rms_accum += last_highpass_output2 * last_highpass_output2;
 871              		.loc 1 454 0
 872 0606 97ED197A 		flds	s14, [r7, #100]
 873 060a D7ED197A 		flds	s15, [r7, #100]
 874 060e 67EE277A 		fmuls	s15, s14, s15
 875 0612 97ED177A 		flds	s14, [r7, #92]
 876 0616 77EE277A 		fadds	s15, s14, s15
 877 061a C7ED177A 		fsts	s15, [r7, #92]
 455:../src/main.cpp **** 			++i;
 878              		.loc 1 455 0
 879 061e 3B6E     		ldr	r3, [r7, #96]
 880 0620 03F10103 		add	r3, r3, #1
 881 0624 3B66     		str	r3, [r7, #96]
 456:../src/main.cpp **** 
 457:../src/main.cpp **** 			if(i == SOUND_ACTIVATION_RMS_CALC_BUFFER_SIZE)
 882              		.loc 1 457 0
 883 0626 3B6E     		ldr	r3, [r7, #96]
 884 0628 642B     		cmp	r3, #100
 885 062a 1DD1     		bne	.L12
 458:../src/main.cpp **** 			{
 459:../src/main.cpp **** 				last_rms_value = sqrt(rms_accum/(float)SOUND_ACTIVATION_RMS_CALC_BUFFER_SIZE);
 886              		.loc 1 459 0
 887 062c 97ED177A 		flds	s14, [r7, #92]
 888 0630 DFED277A 		flds	s15, .L18+16
 889 0634 C7EE277A 		fdivs	s15, s14, s15
 890 0638 17EE900A 		fmrs	r0, s15
 891 063c FFF7FEFF 		bl	__aeabi_f2d
 892 0640 0246     		mov	r2, r0
 893 0642 0B46     		mov	r3, r1
 894 0644 43EC102B 		fmdrr	d0, r2, r3
 895 0648 FFF7FEFF 		bl	sqrt
 896 064c 53EC102B 		fmrrd	r2, r3, d0
 897 0650 1046     		mov	r0, r2
 898 0652 1946     		mov	r1, r3
 899 0654 FFF7FEFF 		bl	__aeabi_d2f
 900 0658 0346     		mov	r3, r0	@ float
 901 065a BB65     		str	r3, [r7, #88]	@ float
 460:../src/main.cpp **** 				i = 0;
 902              		.loc 1 460 0
 903 065c 4FF00003 		mov	r3, #0
 904 0660 3B66     		str	r3, [r7, #96]
 461:../src/main.cpp **** 				rms_accum = 0.0f;
 905              		.loc 1 461 0
 906 0662 4FF00003 		mov	r3, #0
 907 0666 FB65     		str	r3, [r7, #92]	@ float
 908              	.L12:
 462:../src/main.cpp **** 			}
 463:../src/main.cpp **** 		}
 464:../src/main.cpp **** 
 465:../src/main.cpp **** 		if(last_rms_value >= SOUND_ACTIVATION_RMS_THRESH)
 909              		.loc 1 465 0
 910 0668 97ED167A 		flds	s14, [r7, #88]
 911 066c DFED197A 		flds	s15, .L18+20
 912 0670 B4EEE77A 		fcmpes	s14, s15
 913 0674 F1EE10FA 		fmstat
 914 0678 00DA     		bge	.L17
 425:../src/main.cpp **** 	while(1)
 915              		.loc 1 425 0
 916 067a 40E7     		b	.L16
 917              	.L17:
 466:../src/main.cpp **** 		{
 467:../src/main.cpp **** 			break;
 918              		.loc 1 467 0
 919 067c 00BF     		nop
 920              	.L15:
 468:../src/main.cpp **** 		}
 469:../src/main.cpp **** 	}
 470:../src/main.cpp **** 	ADC_DeInit(ADC2);
 921              		.loc 1 470 0
 922 067e 4FF48070 		mov	r0, #256
 923 0682 C5F20000 		movt	r0, 20480
 924 0686 FFF7FEFF 		bl	ADC_DeInit
 471:../src/main.cpp **** 	match_time_counter = 0.0f;
 925              		.loc 1 471 0
 926 068a 40F20003 		movw	r3, #:lower16:match_time_counter
 927 068e C0F20003 		movt	r3, #:upper16:match_time_counter
 928 0692 4FF00002 		mov	r2, #0
 929 0696 1A60     		str	r2, [r3, #0]	@ float
 472:../src/main.cpp **** 	state = ST_WANDER;
 930              		.loc 1 472 0
 931 0698 40F20003 		movw	r3, #:lower16:state
 932 069c C0F20003 		movt	r3, #:upper16:state
 933 06a0 4FF00002 		mov	r2, #0
 934 06a4 1A60     		str	r2, [r3, #0]
 473:../src/main.cpp **** 	GPIO_Write(GPIOE, GPIO_Pin_9);
 935              		.loc 1 473 0
 936 06a6 4FF48050 		mov	r0, #4096
 937 06aa C4F60000 		movt	r0, 18432
 938 06ae 4FF40071 		mov	r1, #512
 939 06b2 FFF7FEFF 		bl	GPIO_Write
 940              	.LBE4:
 474:../src/main.cpp **** }
 941              		.loc 1 474 0
 942 06b6 07F18007 		add	r7, r7, #128
 943 06ba BD46     		mov	sp, r7
 944 06bc 80BD     		pop	{r7, pc}
 945              	.L19:
 946 06be 00BF     		.align	2
 947              	.L18:
 948 06c0 D00FC940 		.word	1086918608
 949 06c4 00F02046 		.word	1176563712
 950 06c8 0060EA45 		.word	1172987904
 951 06cc 00008045 		.word	1166016512
 952 06d0 0000C842 		.word	1120403456
 953 06d4 508D173D 		.word	1024953680
 954              		.cfi_endproc
 955              	.LFE113:
 957              		.align	2
 958              		.global	_Z11IR_distancei
 959              		.thumb
 960              		.thumb_func
 962              	_Z11IR_distancei:
 963              	.LFB114:
 475:../src/main.cpp **** 
 476:../src/main.cpp **** float IR_distance(int IR_ADC_VAL)
 477:../src/main.cpp **** {
 964              		.loc 1 477 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 16
 967              		@ frame_needed = 1, uses_anonymous_args = 0
 968 06d8 80B5     		push	{r7, lr}
 969              	.LCFI9:
 970              		.cfi_def_cfa_offset 8
 971              		.cfi_offset 7, -8
 972              		.cfi_offset 14, -4
 973 06da 2DED028B 		fstmfdd	sp!, {d8}
 974              	.LCFI10:
 975              		.cfi_def_cfa_offset 16
 976              		.cfi_offset 80, -16
 977 06de 84B0     		sub	sp, sp, #16
 978              	.LCFI11:
 979              		.cfi_def_cfa_offset 32
 980 06e0 00AF     		add	r7, sp, #0
 981              	.LCFI12:
 982              		.cfi_def_cfa_register 7
 983 06e2 7860     		str	r0, [r7, #4]
 984              	.LBB5:
 478:../src/main.cpp **** 	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 985              		.loc 1 478 0
 986 06e4 D7ED017A 		flds	s15, [r7, #4]	@ int
 987 06e8 B8EEE77A 		fsitos	s14, s15
 988 06ec DFED547A 		flds	s15, .L22+40
 989 06f0 67EE277A 		fmuls	s15, s14, s15
 990 06f4 C7ED037A 		fsts	s15, [r7, #12]
 479:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 991              		.loc 1 479 0
 992 06f8 F868     		ldr	r0, [r7, #12]	@ float
 993 06fa FFF7FEFF 		bl	__aeabi_f2d
 994 06fe 0246     		mov	r2, r0
 995 0700 0B46     		mov	r3, r1
 996 0702 43EC102B 		fmdrr	d0, r2, r3
 997 0706 9FED441B 		fldd	d1, .L22
 998 070a FFF7FEFF 		bl	pow
 999 070e 53EC102B 		fmrrd	r2, r3, d0
 480:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 481:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 482:../src/main.cpp **** 			+ (float)60.24);
 1000              		.loc 1 482 0
 1001 0712 1046     		mov	r0, r2
 1002 0714 1946     		mov	r1, r3
 1003 0716 FFF7FEFF 		bl	__aeabi_d2f
 1004 071a 07EE100A 		fmsr	s14, r0
 1005 071e DFED497A 		flds	s15, .L22+44
 1006 0722 27EE278A 		fmuls	s16, s14, s15
 479:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 1007              		.loc 1 479 0
 1008 0726 F868     		ldr	r0, [r7, #12]	@ float
 1009 0728 FFF7FEFF 		bl	__aeabi_f2d
 1010 072c 0246     		mov	r2, r0
 1011 072e 0B46     		mov	r3, r1
 1012 0730 43EC102B 		fmdrr	d0, r2, r3
 1013 0734 9FED3A1B 		fldd	d1, .L22+8
 1014 0738 FFF7FEFF 		bl	pow
 1015 073c 53EC102B 		fmrrd	r2, r3, d0
 1016              		.loc 1 482 0
 1017 0740 1046     		mov	r0, r2
 1018 0742 1946     		mov	r1, r3
 1019 0744 FFF7FEFF 		bl	__aeabi_d2f
 1020 0748 07EE100A 		fmsr	s14, r0
 1021 074c DFED3E7A 		flds	s15, .L22+48
 1022 0750 67EE277A 		fmuls	s15, s14, s15
 1023 0754 38EE678A 		fsubs	s16, s16, s15
 480:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 1024              		.loc 1 480 0
 1025 0758 F868     		ldr	r0, [r7, #12]	@ float
 1026 075a FFF7FEFF 		bl	__aeabi_f2d
 1027 075e 0246     		mov	r2, r0
 1028 0760 0B46     		mov	r3, r1
 1029 0762 43EC102B 		fmdrr	d0, r2, r3
 1030 0766 9FED301B 		fldd	d1, .L22+16
 1031 076a FFF7FEFF 		bl	pow
 1032 076e 53EC102B 		fmrrd	r2, r3, d0
 1033              		.loc 1 482 0
 1034 0772 1046     		mov	r0, r2
 1035 0774 1946     		mov	r1, r3
 1036 0776 FFF7FEFF 		bl	__aeabi_d2f
 1037 077a 07EE100A 		fmsr	s14, r0
 1038 077e DFED337A 		flds	s15, .L22+52
 1039 0782 67EE277A 		fmuls	s15, s14, s15
 1040 0786 38EE278A 		fadds	s16, s16, s15
 480:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 1041              		.loc 1 480 0
 1042 078a F868     		ldr	r0, [r7, #12]	@ float
 1043 078c FFF7FEFF 		bl	__aeabi_f2d
 1044 0790 0246     		mov	r2, r0
 1045 0792 0B46     		mov	r3, r1
 1046 0794 43EC102B 		fmdrr	d0, r2, r3
 1047 0798 9FED251B 		fldd	d1, .L22+24
 1048 079c FFF7FEFF 		bl	pow
 1049 07a0 53EC102B 		fmrrd	r2, r3, d0
 1050              		.loc 1 482 0
 1051 07a4 1046     		mov	r0, r2
 1052 07a6 1946     		mov	r1, r3
 1053 07a8 FFF7FEFF 		bl	__aeabi_d2f
 1054 07ac 07EE100A 		fmsr	s14, r0
 1055 07b0 DFED277A 		flds	s15, .L22+56
 1056 07b4 67EE277A 		fmuls	s15, s14, s15
 1057 07b8 38EE678A 		fsubs	s16, s16, s15
 481:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 1058              		.loc 1 481 0
 1059 07bc F868     		ldr	r0, [r7, #12]	@ float
 1060 07be FFF7FEFF 		bl	__aeabi_f2d
 1061 07c2 0246     		mov	r2, r0
 1062 07c4 0B46     		mov	r3, r1
 1063 07c6 43EC102B 		fmdrr	d0, r2, r3
 1064 07ca 9FED1B1B 		fldd	d1, .L22+32
 1065 07ce FFF7FEFF 		bl	pow
 1066 07d2 53EC102B 		fmrrd	r2, r3, d0
 1067              		.loc 1 482 0
 1068 07d6 1046     		mov	r0, r2
 1069 07d8 1946     		mov	r1, r3
 1070 07da FFF7FEFF 		bl	__aeabi_d2f
 1071 07de 07EE100A 		fmsr	s14, r0
 1072 07e2 DFED1C7A 		flds	s15, .L22+60
 1073 07e6 67EE277A 		fmuls	s15, s14, s15
 1074 07ea 38EE277A 		fadds	s14, s16, s15
 1075 07ee D7ED036A 		flds	s13, [r7, #12]
 1076 07f2 DFED197A 		flds	s15, .L22+64
 1077 07f6 66EEA77A 		fmuls	s15, s13, s15
 1078 07fa 37EE677A 		fsubs	s14, s14, s15
 1079 07fe DFED177A 		flds	s15, .L22+68
 1080 0802 77EE277A 		fadds	s15, s14, s15
 1081              	.LBE5:
 483:../src/main.cpp **** }
 1082              		.loc 1 483 0
 1083 0806 B0EE670A 		fcpys	s0, s15
 1084 080a 07F11007 		add	r7, r7, #16
 1085 080e BD46     		mov	sp, r7
 1086 0810 BDEC028B 		fldmfdd	sp!, {d8}
 1087 0814 80BD     		pop	{r7, pc}
 1088              	.L23:
 1089 0816 00BF     		.align	3
 1090              	.L22:
 1091 0818 00000000 		.word	0
 1092 081c 00001840 		.word	1075314688
 1093 0820 00000000 		.word	0
 1094 0824 00001440 		.word	1075052544
 1095 0828 00000000 		.word	0
 1096 082c 00001040 		.word	1074790400
 1097 0830 00000000 		.word	0
 1098 0834 00000840 		.word	1074266112
 1099 0838 00000000 		.word	0
 1100 083c 00000040 		.word	1073741824
 1101 0840 4A03643A 		.word	979632970
 1102 0844 C1CA213F 		.word	1059179201
 1103 0848 27310041 		.word	1090531623
 1104 084c 33332442 		.word	1109668659
 1105 0850 6666DB42 		.word	1121674854
 1106 0854 33B32443 		.word	1126478643
 1107 0858 CDCC0A43 		.word	1124781261
 1108 085c C3F57042 		.word	1114699203
 1109              		.cfi_endproc
 1110              	.LFE114:
 1112              		.align	2
 1113              		.global	_Z19imu_update_ISR_initv
 1114              		.thumb
 1115              		.thumb_func
 1117              	_Z19imu_update_ISR_initv:
 1118              	.LFB115:
 484:../src/main.cpp **** 
 485:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 486:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 487:../src/main.cpp **** 
 488:../src/main.cpp **** void imu_update_ISR_init(void)
 489:../src/main.cpp **** {
 1119              		.loc 1 489 0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 24
 1122              		@ frame_needed = 1, uses_anonymous_args = 0
 1123 0860 80B5     		push	{r7, lr}
 1124              	.LCFI13:
 1125              		.cfi_def_cfa_offset 8
 1126              		.cfi_offset 7, -8
 1127              		.cfi_offset 14, -4
 1128 0862 86B0     		sub	sp, sp, #24
 1129              	.LCFI14:
 1130              		.cfi_def_cfa_offset 32
 1131 0864 00AF     		add	r7, sp, #0
 1132              	.LCFI15:
 1133              		.cfi_def_cfa_register 7
 1134              	.LBB6:
 490:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 491:../src/main.cpp **** 
 492:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 1135              		.loc 1 492 0
 1136 0866 4FF00703 		mov	r3, #7
 1137 086a BB74     		strb	r3, [r7, #18]
 493:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 1138              		.loc 1 493 0
 1139 086c 4FF00003 		mov	r3, #0
 1140 0870 FB74     		strb	r3, [r7, #19]
 494:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 1141              		.loc 1 494 0
 1142 0872 4FF00003 		mov	r3, #0
 1143 0876 3B75     		strb	r3, [r7, #20]
 495:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 1144              		.loc 1 495 0
 1145 0878 4FF00003 		mov	r3, #0
 1146 087c 7B75     		strb	r3, [r7, #21]
 496:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 1147              		.loc 1 496 0
 1148 087e 4FF00003 		mov	r3, #0
 1149 0882 BB75     		strb	r3, [r7, #22]
 497:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 1150              		.loc 1 497 0
 1151 0884 4FF00003 		mov	r3, #0
 1152 0888 7B74     		strb	r3, [r7, #17]
 498:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 1153              		.loc 1 498 0
 1154 088a 4FF00803 		mov	r3, #8
 1155 088e 3B74     		strb	r3, [r7, #16]
 499:../src/main.cpp **** 
 500:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 1156              		.loc 1 500 0
 1157 0890 07F11003 		add	r3, r7, #16
 1158 0894 1846     		mov	r0, r3
 1159 0896 FFF7FEFF 		bl	L3GD20_Init
 501:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 1160              		.loc 1 501 0
 1161 089a FFF7FEFF 		bl	_Z14calc_gyro_biasv
 1162 089e 0346     		mov	r3, r0
 1163 08a0 1A46     		mov	r2, r3
 1164 08a2 40F20003 		movw	r3, #:lower16:gyro_bias_x
 1165 08a6 C0F20003 		movt	r3, #:upper16:gyro_bias_x
 1166 08aa 1A60     		str	r2, [r3, #0]
 502:../src/main.cpp **** 
 503:../src/main.cpp **** 	gyro_angle_x = 0;
 1167              		.loc 1 503 0
 1168 08ac 40F20003 		movw	r3, #:lower16:gyro_angle_x
 1169 08b0 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 1170 08b4 4FF00002 		mov	r2, #0
 1171 08b8 1A60     		str	r2, [r3, #0]	@ float
 504:../src/main.cpp **** 
 505:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 506:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 507:../src/main.cpp **** 
 508:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 1172              		.loc 1 508 0
 1173 08ba 4FF01A03 		mov	r3, #26
 1174 08be 3B73     		strb	r3, [r7, #12]
 509:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 1175              		.loc 1 509 0
 1176 08c0 4FF00003 		mov	r3, #0
 1177 08c4 7B73     		strb	r3, [r7, #13]
 510:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1178              		.loc 1 510 0
 1179 08c6 4FF00003 		mov	r3, #0
 1180 08ca BB73     		strb	r3, [r7, #14]
 511:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1181              		.loc 1 511 0
 1182 08cc 4FF00103 		mov	r3, #1
 1183 08d0 FB73     		strb	r3, [r7, #15]
 512:../src/main.cpp **** 
 513:../src/main.cpp **** 	NVIC_Init(&nv);
 1184              		.loc 1 513 0
 1185 08d2 07F10C03 		add	r3, r7, #12
 1186 08d6 1846     		mov	r0, r3
 1187 08d8 FFF7FEFF 		bl	NVIC_Init
 514:../src/main.cpp **** 
 515:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 1188              		.loc 1 515 0
 1189 08dc 4FF48020 		mov	r0, #262144
 1190 08e0 4FF00101 		mov	r1, #1
 1191 08e4 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 516:../src/main.cpp **** 
 517:../src/main.cpp **** 	/*
 518:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 519:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 520:../src/main.cpp **** 	 * 	  Period -> ARR
 521:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 522:../src/main.cpp **** 	 */
 523:../src/main.cpp **** 
 524:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 1192              		.loc 1 524 0
 1193 08e8 40F28F13 		movw	r3, #399
 1194 08ec 7B60     		str	r3, [r7, #4]
 525:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 1195              		.loc 1 525 0
 1196 08ee 41F61F43 		movw	r3, #7199
 1197 08f2 3B80     		strh	r3, [r7, #0]	@ movhi
 526:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 1198              		.loc 1 526 0
 1199 08f4 4FF00003 		mov	r3, #0
 1200 08f8 BB72     		strb	r3, [r7, #10]
 527:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 1201              		.loc 1 527 0
 1202 08fa 4FF00003 		mov	r3, #0
 1203 08fe 3B81     		strh	r3, [r7, #8]	@ movhi
 528:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 1204              		.loc 1 528 0
 1205 0900 4FF00003 		mov	r3, #0
 1206 0904 7B80     		strh	r3, [r7, #2]	@ movhi
 529:../src/main.cpp **** 
 530:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 1207              		.loc 1 530 0
 1208 0906 3B46     		mov	r3, r7
 1209 0908 4FF49040 		mov	r0, #18432
 1210 090c C4F20100 		movt	r0, 16385
 1211 0910 1946     		mov	r1, r3
 1212 0912 FFF7FEFF 		bl	TIM_TimeBaseInit
 531:../src/main.cpp **** 
 532:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 1213              		.loc 1 532 0
 1214 0916 4FF49040 		mov	r0, #18432
 1215 091a C4F20100 		movt	r0, 16385
 1216 091e 4FF00101 		mov	r1, #1
 1217 0922 4FF00102 		mov	r2, #1
 1218 0926 FFF7FEFF 		bl	TIM_ITConfig
 533:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 1219              		.loc 1 533 0
 1220 092a 4FF49040 		mov	r0, #18432
 1221 092e C4F20100 		movt	r0, 16385
 1222 0932 4FF00101 		mov	r1, #1
 1223 0936 FFF7FEFF 		bl	TIM_Cmd
 1224              	.LBE6:
 534:../src/main.cpp **** }
 1225              		.loc 1 534 0
 1226 093a 07F11807 		add	r7, r7, #24
 1227 093e BD46     		mov	sp, r7
 1228 0940 80BD     		pop	{r7, pc}
 1229              		.cfi_endproc
 1230              	.LFE115:
 1232              		.section	.rodata
 1233              		.align	2
 1234              	.LC0:
 1235 0000 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 1235      32302072 
 1235      65616420 
 1235      61747465 
 1235      6D707420 
 1236 0033 636F6465 		.ascii	"code!!!\012\015\000"
 1236      2121210A 
 1236      0D00
 1237 003d 000000   		.text
 1238 0942 00BF     		.align	2
 1239              		.global	L3GD20_TIMEOUT_UserCallback
 1240              		.thumb
 1241              		.thumb_func
 1243              	L3GD20_TIMEOUT_UserCallback:
 1244              	.LFB116:
 535:../src/main.cpp **** 
 536:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 537:../src/main.cpp **** {
 1245              		.loc 1 537 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 0
 1248              		@ frame_needed = 1, uses_anonymous_args = 0
 1249 0944 80B5     		push	{r7, lr}
 1250              	.LCFI16:
 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0946 00AF     		add	r7, sp, #0
 1255              	.LCFI17:
 1256              		.cfi_def_cfa_register 7
 538:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 1257              		.loc 1 538 0
 1258 0948 40F20000 		movw	r0, #:lower16:.LC0
 1259 094c C0F20000 		movt	r0, #:upper16:.LC0
 1260 0950 FFF7FEFF 		bl	printf
 539:../src/main.cpp **** 	return 0;
 1261              		.loc 1 539 0
 1262 0954 4FF00003 		mov	r3, #0
 540:../src/main.cpp **** }
 1263              		.loc 1 540 0
 1264 0958 1846     		mov	r0, r3
 1265 095a 80BD     		pop	{r7, pc}
 1266              		.cfi_endproc
 1267              	.LFE116:
 1269              		.align	2
 1270              		.global	_Z15brake_pins_initv
 1271              		.thumb
 1272              		.thumb_func
 1274              	_Z15brake_pins_initv:
 1275              	.LFB117:
 541:../src/main.cpp **** 
 542:../src/main.cpp **** void brake_pins_init(void)
 543:../src/main.cpp **** {
 1276              		.loc 1 543 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 8
 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280 095c 80B5     		push	{r7, lr}
 1281              	.LCFI18:
 1282              		.cfi_def_cfa_offset 8
 1283              		.cfi_offset 7, -8
 1284              		.cfi_offset 14, -4
 1285 095e 82B0     		sub	sp, sp, #8
 1286              	.LCFI19:
 1287              		.cfi_def_cfa_offset 16
 1288 0960 00AF     		add	r7, sp, #0
 1289              	.LCFI20:
 1290              		.cfi_def_cfa_register 7
 1291              	.LBB7:
 544:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 1292              		.loc 1 544 0
 1293 0962 4FF40010 		mov	r0, #2097152
 1294 0966 4FF00101 		mov	r1, #1
 1295 096a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 545:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 546:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1296              		.loc 1 546 0
 1297 096e 3B46     		mov	r3, r7
 1298 0970 1846     		mov	r0, r3
 1299 0972 FFF7FEFF 		bl	GPIO_StructInit
 547:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1300              		.loc 1 547 0
 1301 0976 4FF00C03 		mov	r3, #12
 1302 097a 3B60     		str	r3, [r7, #0]
 548:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 1303              		.loc 1 548 0
 1304 097c 4FF00003 		mov	r3, #0
 1305 0980 BB71     		strb	r3, [r7, #6]
 549:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 1306              		.loc 1 549 0
 1307 0982 4FF00103 		mov	r3, #1
 1308 0986 3B71     		strb	r3, [r7, #4]
 550:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1309              		.loc 1 550 0
 1310 0988 4FF00003 		mov	r3, #0
 1311 098c FB71     		strb	r3, [r7, #7]
 551:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 1312              		.loc 1 551 0
 1313 098e 4FF00203 		mov	r3, #2
 1314 0992 7B71     		strb	r3, [r7, #5]
 552:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 1315              		.loc 1 552 0
 1316 0994 3B46     		mov	r3, r7
 1317 0996 4FF48050 		mov	r0, #4096
 1318 099a C4F60000 		movt	r0, 18432
 1319 099e 1946     		mov	r1, r3
 1320 09a0 FFF7FEFF 		bl	GPIO_Init
 553:../src/main.cpp **** 
 554:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 1321              		.loc 1 554 0
 1322 09a4 4FF48050 		mov	r0, #4096
 1323 09a8 C4F60000 		movt	r0, 18432
 1324 09ac 4FF00401 		mov	r1, #4
 1325 09b0 4FF00002 		mov	r2, #0
 1326 09b4 FFF7FEFF 		bl	GPIO_WriteBit
 555:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 1327              		.loc 1 555 0
 1328 09b8 4FF48050 		mov	r0, #4096
 1329 09bc C4F60000 		movt	r0, 18432
 1330 09c0 4FF00801 		mov	r1, #8
 1331 09c4 4FF00002 		mov	r2, #0
 1332 09c8 FFF7FEFF 		bl	GPIO_WriteBit
 1333              	.LBE7:
 556:../src/main.cpp **** }
 1334              		.loc 1 556 0
 1335 09cc 07F10807 		add	r7, r7, #8
 1336 09d0 BD46     		mov	sp, r7
 1337 09d2 80BD     		pop	{r7, pc}
 1338              		.cfi_endproc
 1339              	.LFE117:
 1341              		.align	2
 1342              		.global	_Z13ping_pin_initv
 1343              		.thumb
 1344              		.thumb_func
 1346              	_Z13ping_pin_initv:
 1347              	.LFB118:
 557:../src/main.cpp **** /*
 558:../src/main.cpp ****  * PB0: OUTPUT
 559:../src/main.cpp ****  * PC1: INPUT
 560:../src/main.cpp ****  */
 561:../src/main.cpp **** void ping_pin_init(void)
 562:../src/main.cpp **** {
 1348              		.loc 1 562 0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 8
 1351              		@ frame_needed = 1, uses_anonymous_args = 0
 1352 09d4 80B5     		push	{r7, lr}
 1353              	.LCFI21:
 1354              		.cfi_def_cfa_offset 8
 1355              		.cfi_offset 7, -8
 1356              		.cfi_offset 14, -4
 1357 09d6 82B0     		sub	sp, sp, #8
 1358              	.LCFI22:
 1359              		.cfi_def_cfa_offset 16
 1360 09d8 00AF     		add	r7, sp, #0
 1361              	.LCFI23:
 1362              		.cfi_def_cfa_register 7
 1363              	.LBB8:
 563:../src/main.cpp **** 
 564:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 1364              		.loc 1 564 0
 1365 09da 4FF48800 		mov	r0, #4456448
 1366 09de 4FF00101 		mov	r1, #1
 1367 09e2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 565:../src/main.cpp **** 
 566:../src/main.cpp **** 	GPIO_InitTypeDef g;
 567:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 1368              		.loc 1 567 0
 1369 09e6 4FF00003 		mov	r3, #0
 1370 09ea 3B71     		strb	r3, [r7, #4]
 568:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 1371              		.loc 1 568 0
 1372 09ec 4FF00103 		mov	r3, #1
 1373 09f0 BB71     		strb	r3, [r7, #6]
 569:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 1374              		.loc 1 569 0
 1375 09f2 4FF40073 		mov	r3, #512
 1376 09f6 3B60     		str	r3, [r7, #0]
 570:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1377              		.loc 1 570 0
 1378 09f8 4FF00003 		mov	r3, #0
 1379 09fc FB71     		strb	r3, [r7, #7]
 571:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 1380              		.loc 1 571 0
 1381 09fe 4FF00103 		mov	r3, #1
 1382 0a02 7B71     		strb	r3, [r7, #5]
 572:../src/main.cpp **** 
 573:../src/main.cpp **** 	GPIO_Init(GPIOF, &g);
 1383              		.loc 1 573 0
 1384 0a04 3B46     		mov	r3, r7
 1385 0a06 4FF4A050 		mov	r0, #5120
 1386 0a0a C4F60000 		movt	r0, 18432
 1387 0a0e 1946     		mov	r1, r3
 1388 0a10 FFF7FEFF 		bl	GPIO_Init
 574:../src/main.cpp **** 
 575:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 1389              		.loc 1 575 0
 1390 0a14 4FF00103 		mov	r3, #1
 1391 0a18 3B71     		strb	r3, [r7, #4]
 576:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1392              		.loc 1 576 0
 1393 0a1a 4FF00003 		mov	r3, #0
 1394 0a1e BB71     		strb	r3, [r7, #6]
 577:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 1395              		.loc 1 577 0
 1396 0a20 4FF00103 		mov	r3, #1
 1397 0a24 3B60     		str	r3, [r7, #0]
 578:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1398              		.loc 1 578 0
 1399 0a26 4FF00003 		mov	r3, #0
 1400 0a2a FB71     		strb	r3, [r7, #7]
 579:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 1401              		.loc 1 579 0
 1402 0a2c 4FF00103 		mov	r3, #1
 1403 0a30 7B71     		strb	r3, [r7, #5]
 580:../src/main.cpp **** 
 581:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1404              		.loc 1 581 0
 1405 0a32 3B46     		mov	r3, r7
 1406 0a34 4FF48060 		mov	r0, #1024
 1407 0a38 C4F60000 		movt	r0, 18432
 1408 0a3c 1946     		mov	r1, r3
 1409 0a3e FFF7FEFF 		bl	GPIO_Init
 582:../src/main.cpp **** 
 583:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1410              		.loc 1 583 0
 1411 0a42 4FF00100 		mov	r0, #1
 1412 0a46 4FF00101 		mov	r1, #1
 1413 0a4a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 584:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 1414              		.loc 1 584 0
 1415 0a4e 4FF00500 		mov	r0, #5
 1416 0a52 4FF00901 		mov	r1, #9
 1417 0a56 FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 1418              	.LBE8:
 585:../src/main.cpp **** 
 586:../src/main.cpp **** }
 1419              		.loc 1 586 0
 1420 0a5a 07F10807 		add	r7, r7, #8
 1421 0a5e BD46     		mov	sp, r7
 1422 0a60 80BD     		pop	{r7, pc}
 1423              		.cfi_endproc
 1424              	.LFE118:
 1426 0a62 00BF     		.align	2
 1427              		.global	_Z20timer2_timebase_initv
 1428              		.thumb
 1429              		.thumb_func
 1431              	_Z20timer2_timebase_initv:
 1432              	.LFB119:
 587:../src/main.cpp **** 
 588:../src/main.cpp **** void timer2_timebase_init(void)
 589:../src/main.cpp **** {
 1433              		.loc 1 589 0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 16
 1436              		@ frame_needed = 1, uses_anonymous_args = 0
 1437 0a64 80B5     		push	{r7, lr}
 1438              	.LCFI24:
 1439              		.cfi_def_cfa_offset 8
 1440              		.cfi_offset 7, -8
 1441              		.cfi_offset 14, -4
 1442 0a66 84B0     		sub	sp, sp, #16
 1443              	.LCFI25:
 1444              		.cfi_def_cfa_offset 24
 1445 0a68 00AF     		add	r7, sp, #0
 1446              	.LCFI26:
 1447              		.cfi_def_cfa_register 7
 1448              	.LBB9:
 590:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 591:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 1449              		.loc 1 591 0
 1450 0a6a 4FF00100 		mov	r0, #1
 1451 0a6e 4FF00101 		mov	r1, #1
 1452 0a72 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 592:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 1453              		.loc 1 592 0
 1454 0a76 44F24F63 		movw	r3, #17999
 1455 0a7a BB60     		str	r3, [r7, #8]
 593:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 1456              		.loc 1 593 0
 1457 0a7c 4FF00003 		mov	r3, #0
 1458 0a80 BB73     		strb	r3, [r7, #14]
 594:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 1459              		.loc 1 594 0
 1460 0a82 4FF04703 		mov	r3, #71
 1461 0a86 BB80     		strh	r3, [r7, #4]	@ movhi
 595:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 1462              		.loc 1 595 0
 1463 0a88 4FF00003 		mov	r3, #0
 1464 0a8c BB81     		strh	r3, [r7, #12]	@ movhi
 596:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 1465              		.loc 1 596 0
 1466 0a8e 4FF00003 		mov	r3, #0
 1467 0a92 FB80     		strh	r3, [r7, #6]	@ movhi
 597:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 1468              		.loc 1 597 0
 1469 0a94 07F10403 		add	r3, r7, #4
 1470 0a98 4FF08040 		mov	r0, #1073741824
 1471 0a9c 1946     		mov	r1, r3
 1472 0a9e FFF7FEFF 		bl	TIM_TimeBaseInit
 598:../src/main.cpp **** 
 599:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 1473              		.loc 1 599 0
 1474 0aa2 4FF08040 		mov	r0, #1073741824
 1475 0aa6 4FF00001 		mov	r1, #0
 1476 0aaa FFF7FEFF 		bl	TIM_SetCounter
 1477              	.LBE9:
 600:../src/main.cpp **** }
 1478              		.loc 1 600 0
 1479 0aae 07F11007 		add	r7, r7, #16
 1480 0ab2 BD46     		mov	sp, r7
 1481 0ab4 80BD     		pop	{r7, pc}
 1482              		.cfi_endproc
 1483              	.LFE119:
 1485 0ab6 00BF     		.align	2
 1486              		.global	_Z9comp_initv
 1487              		.thumb
 1488              		.thumb_func
 1490              	_Z9comp_initv:
 1491              	.LFB120:
 601:../src/main.cpp **** 
 602:../src/main.cpp **** /*
 603:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 604:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 605:../src/main.cpp ****  * 			Output->	PB9
 606:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 607:../src/main.cpp ****  * 			Output->	PA8
 608:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 609:../src/main.cpp ****  * 			Output->	PB1
 610:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 611:../src/main.cpp ****  * 			Output->	PC2
 612:../src/main.cpp ****  */
 613:../src/main.cpp **** 
 614:../src/main.cpp **** void comp_init(void)
 615:../src/main.cpp **** {
 1492              		.loc 1 615 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 40
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496 0ab8 80B5     		push	{r7, lr}
 1497              	.LCFI27:
 1498              		.cfi_def_cfa_offset 8
 1499              		.cfi_offset 7, -8
 1500              		.cfi_offset 14, -4
 1501 0aba 8AB0     		sub	sp, sp, #40
 1502              	.LCFI28:
 1503              		.cfi_def_cfa_offset 48
 1504 0abc 00AF     		add	r7, sp, #0
 1505              	.LCFI29:
 1506              		.cfi_def_cfa_register 7
 1507              	.LBB10:
 616:../src/main.cpp **** 	//COMP2 Init:
 617:../src/main.cpp **** 
 618:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1508              		.loc 1 618 0
 1509 0abe 4FF00100 		mov	r0, #1
 1510 0ac2 4FF00101 		mov	r1, #1
 1511 0ac6 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 619:../src/main.cpp **** 
 620:../src/main.cpp **** 	GPIO_InitTypeDef g;
 621:../src/main.cpp **** 
 622:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1512              		.loc 1 622 0
 1513 0aca 4FF00303 		mov	r3, #3
 1514 0ace 87F82430 		strb	r3, [r7, #36]
 623:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1515              		.loc 1 623 0
 1516 0ad2 4FF00003 		mov	r3, #0
 1517 0ad6 87F82730 		strb	r3, [r7, #39]
 624:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 1518              		.loc 1 624 0
 1519 0ada 4FF08003 		mov	r3, #128
 1520 0ade 3B62     		str	r3, [r7, #32]
 625:../src/main.cpp **** 
 626:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1521              		.loc 1 626 0
 1522 0ae0 4FF40030 		mov	r0, #131072
 1523 0ae4 4FF00101 		mov	r1, #1
 1524 0ae8 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 627:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 1525              		.loc 1 627 0
 1526 0aec 07F12003 		add	r3, r7, #32
 1527 0af0 4FF09040 		mov	r0, #1207959552
 1528 0af4 1946     		mov	r1, r3
 1529 0af6 FFF7FEFF 		bl	GPIO_Init
 628:../src/main.cpp **** 
 629:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1530              		.loc 1 629 0
 1531 0afa 4FF00203 		mov	r3, #2
 1532 0afe 87F82430 		strb	r3, [r7, #36]
 630:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1533              		.loc 1 630 0
 1534 0b02 4FF00003 		mov	r3, #0
 1535 0b06 87F82630 		strb	r3, [r7, #38]
 631:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1536              		.loc 1 631 0
 1537 0b0a 4FF00003 		mov	r3, #0
 1538 0b0e 87F82730 		strb	r3, [r7, #39]
 632:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 1539              		.loc 1 632 0
 1540 0b12 4FF40073 		mov	r3, #512
 1541 0b16 3B62     		str	r3, [r7, #32]
 633:../src/main.cpp **** 
 634:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 1542              		.loc 1 634 0
 1543 0b18 4FF48060 		mov	r0, #1024
 1544 0b1c C4F60000 		movt	r0, 18432
 1545 0b20 4FF00901 		mov	r1, #9
 1546 0b24 4FF00802 		mov	r2, #8
 1547 0b28 FFF7FEFF 		bl	GPIO_PinAFConfig
 635:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1548              		.loc 1 635 0
 1549 0b2c 07F12003 		add	r3, r7, #32
 1550 0b30 4FF48060 		mov	r0, #1024
 1551 0b34 C4F60000 		movt	r0, 18432
 1552 0b38 1946     		mov	r1, r3
 1553 0b3a FFF7FEFF 		bl	GPIO_Init
 636:../src/main.cpp **** 
 637:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1554              		.loc 1 637 0
 1555 0b3e 4FF00000 		mov	r0, #0
 1556 0b42 FFF7FEFF 		bl	RCC_PCLK2Config
 638:../src/main.cpp **** 
 639:../src/main.cpp **** 	COMP_InitTypeDef c;
 640:../src/main.cpp **** 
 641:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1557              		.loc 1 641 0
 1558 0b46 4FF03003 		mov	r3, #48
 1559 0b4a 7B60     		str	r3, [r7, #4]
 642:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1560              		.loc 1 642 0
 1561 0b4c 4FF00003 		mov	r3, #0
 1562 0b50 BB60     		str	r3, [r7, #8]
 643:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1563              		.loc 1 643 0
 1564 0b52 4FF00403 		mov	r3, #4
 1565 0b56 FB61     		str	r3, [r7, #28]
 644:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1566              		.loc 1 644 0
 1567 0b58 4FF00003 		mov	r3, #0
 1568 0b5c FB60     		str	r3, [r7, #12]
 645:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1569              		.loc 1 645 0
 1570 0b5e 4FF00003 		mov	r3, #0
 1571 0b62 7B61     		str	r3, [r7, #20]
 646:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1572              		.loc 1 646 0
 1573 0b64 4FF48033 		mov	r3, #65536
 1574 0b68 BB61     		str	r3, [r7, #24]
 647:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1575              		.loc 1 647 0
 1576 0b6a 4FF00003 		mov	r3, #0
 1577 0b6e 3B61     		str	r3, [r7, #16]
 648:../src/main.cpp **** 
 649:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 1578              		.loc 1 649 0
 1579 0b70 07F10403 		add	r3, r7, #4
 1580 0b74 4FF00400 		mov	r0, #4
 1581 0b78 1946     		mov	r1, r3
 1582 0b7a FFF7FEFF 		bl	COMP_Init
 650:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 1583              		.loc 1 650 0
 1584 0b7e 4FF00400 		mov	r0, #4
 1585 0b82 4FF00101 		mov	r1, #1
 1586 0b86 FFF7FEFF 		bl	COMP_Cmd
 651:../src/main.cpp **** 
 652:../src/main.cpp **** 	//COMP3 Init:
 653:../src/main.cpp **** 
 654:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1587              		.loc 1 654 0
 1588 0b8a 4FF00100 		mov	r0, #1
 1589 0b8e 4FF00101 		mov	r1, #1
 1590 0b92 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 655:../src/main.cpp **** 
 656:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1591              		.loc 1 656 0
 1592 0b96 4FF00303 		mov	r3, #3
 1593 0b9a 87F82430 		strb	r3, [r7, #36]
 657:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1594              		.loc 1 657 0
 1595 0b9e 4FF00003 		mov	r3, #0
 1596 0ba2 87F82730 		strb	r3, [r7, #39]
 658:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 1597              		.loc 1 658 0
 1598 0ba6 4FF48043 		mov	r3, #16384
 1599 0baa 3B62     		str	r3, [r7, #32]
 659:../src/main.cpp **** 
 660:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 1600              		.loc 1 660 0
 1601 0bac 4FF4C020 		mov	r0, #393216
 1602 0bb0 4FF00101 		mov	r1, #1
 1603 0bb4 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 661:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1604              		.loc 1 661 0
 1605 0bb8 07F12003 		add	r3, r7, #32
 1606 0bbc 4FF48060 		mov	r0, #1024
 1607 0bc0 C4F60000 		movt	r0, 18432
 1608 0bc4 1946     		mov	r1, r3
 1609 0bc6 FFF7FEFF 		bl	GPIO_Init
 662:../src/main.cpp **** 
 663:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1610              		.loc 1 663 0
 1611 0bca 4FF00203 		mov	r3, #2
 1612 0bce 87F82430 		strb	r3, [r7, #36]
 664:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1613              		.loc 1 664 0
 1614 0bd2 4FF00003 		mov	r3, #0
 1615 0bd6 87F82630 		strb	r3, [r7, #38]
 665:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1616              		.loc 1 665 0
 1617 0bda 4FF00003 		mov	r3, #0
 1618 0bde 87F82730 		strb	r3, [r7, #39]
 666:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 1619              		.loc 1 666 0
 1620 0be2 4FF48073 		mov	r3, #256
 1621 0be6 3B62     		str	r3, [r7, #32]
 667:../src/main.cpp **** 
 668:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 1622              		.loc 1 668 0
 1623 0be8 4FF40060 		mov	r0, #2048
 1624 0bec C4F60000 		movt	r0, 18432
 1625 0bf0 4FF00801 		mov	r1, #8
 1626 0bf4 4FF00702 		mov	r2, #7
 1627 0bf8 FFF7FEFF 		bl	GPIO_PinAFConfig
 669:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1628              		.loc 1 669 0
 1629 0bfc 07F12003 		add	r3, r7, #32
 1630 0c00 4FF40060 		mov	r0, #2048
 1631 0c04 C4F60000 		movt	r0, 18432
 1632 0c08 1946     		mov	r1, r3
 1633 0c0a FFF7FEFF 		bl	GPIO_Init
 670:../src/main.cpp **** 
 671:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1634              		.loc 1 671 0
 1635 0c0e 4FF00000 		mov	r0, #0
 1636 0c12 FFF7FEFF 		bl	RCC_PCLK2Config
 672:../src/main.cpp **** 
 673:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1637              		.loc 1 673 0
 1638 0c16 4FF03003 		mov	r3, #48
 1639 0c1a 7B60     		str	r3, [r7, #4]
 674:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1640              		.loc 1 674 0
 1641 0c1c 4FF00003 		mov	r3, #0
 1642 0c20 BB60     		str	r3, [r7, #8]
 675:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1643              		.loc 1 675 0
 1644 0c22 4FF00403 		mov	r3, #4
 1645 0c26 FB61     		str	r3, [r7, #28]
 676:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1646              		.loc 1 676 0
 1647 0c28 4FF00003 		mov	r3, #0
 1648 0c2c FB60     		str	r3, [r7, #12]
 677:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1649              		.loc 1 677 0
 1650 0c2e 4FF00003 		mov	r3, #0
 1651 0c32 7B61     		str	r3, [r7, #20]
 678:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1652              		.loc 1 678 0
 1653 0c34 4FF48033 		mov	r3, #65536
 1654 0c38 BB61     		str	r3, [r7, #24]
 679:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1655              		.loc 1 679 0
 1656 0c3a 4FF00003 		mov	r3, #0
 1657 0c3e 3B61     		str	r3, [r7, #16]
 680:../src/main.cpp **** 
 681:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 1658              		.loc 1 681 0
 1659 0c40 07F10403 		add	r3, r7, #4
 1660 0c44 4FF00800 		mov	r0, #8
 1661 0c48 1946     		mov	r1, r3
 1662 0c4a FFF7FEFF 		bl	COMP_Init
 682:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 1663              		.loc 1 682 0
 1664 0c4e 4FF00800 		mov	r0, #8
 1665 0c52 4FF00101 		mov	r1, #1
 1666 0c56 FFF7FEFF 		bl	COMP_Cmd
 683:../src/main.cpp **** 
 684:../src/main.cpp **** 	//COMP4 Init:
 685:../src/main.cpp **** 
 686:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1667              		.loc 1 686 0
 1668 0c5a 4FF00100 		mov	r0, #1
 1669 0c5e 4FF00101 		mov	r1, #1
 1670 0c62 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 687:../src/main.cpp **** 
 688:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1671              		.loc 1 688 0
 1672 0c66 4FF00303 		mov	r3, #3
 1673 0c6a 87F82430 		strb	r3, [r7, #36]
 689:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1674              		.loc 1 689 0
 1675 0c6e 4FF00003 		mov	r3, #0
 1676 0c72 87F82730 		strb	r3, [r7, #39]
 690:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 1677              		.loc 1 690 0
 1678 0c76 4FF08003 		mov	r3, #128
 1679 0c7a 3B62     		str	r3, [r7, #32]
 691:../src/main.cpp **** 
 692:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 1680              		.loc 1 692 0
 1681 0c7c 4FF41010 		mov	r0, #2359296
 1682 0c80 4FF00101 		mov	r1, #1
 1683 0c84 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 693:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 1684              		.loc 1 693 0
 1685 0c88 07F12003 		add	r3, r7, #32
 1686 0c8c 4FF48050 		mov	r0, #4096
 1687 0c90 C4F60000 		movt	r0, 18432
 1688 0c94 1946     		mov	r1, r3
 1689 0c96 FFF7FEFF 		bl	GPIO_Init
 694:../src/main.cpp **** 
 695:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1690              		.loc 1 695 0
 1691 0c9a 4FF00203 		mov	r3, #2
 1692 0c9e 87F82430 		strb	r3, [r7, #36]
 696:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1693              		.loc 1 696 0
 1694 0ca2 4FF00003 		mov	r3, #0
 1695 0ca6 87F82630 		strb	r3, [r7, #38]
 697:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1696              		.loc 1 697 0
 1697 0caa 4FF00003 		mov	r3, #0
 1698 0cae 87F82730 		strb	r3, [r7, #39]
 698:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 1699              		.loc 1 698 0
 1700 0cb2 4FF00203 		mov	r3, #2
 1701 0cb6 3B62     		str	r3, [r7, #32]
 699:../src/main.cpp **** 
 700:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 1702              		.loc 1 700 0
 1703 0cb8 4FF48060 		mov	r0, #1024
 1704 0cbc C4F60000 		movt	r0, 18432
 1705 0cc0 4FF00101 		mov	r1, #1
 1706 0cc4 4FF00802 		mov	r2, #8
 1707 0cc8 FFF7FEFF 		bl	GPIO_PinAFConfig
 701:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1708              		.loc 1 701 0
 1709 0ccc 07F12003 		add	r3, r7, #32
 1710 0cd0 4FF48060 		mov	r0, #1024
 1711 0cd4 C4F60000 		movt	r0, 18432
 1712 0cd8 1946     		mov	r1, r3
 1713 0cda FFF7FEFF 		bl	GPIO_Init
 702:../src/main.cpp **** 
 703:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1714              		.loc 1 703 0
 1715 0cde 4FF00000 		mov	r0, #0
 1716 0ce2 FFF7FEFF 		bl	RCC_PCLK2Config
 704:../src/main.cpp **** 
 705:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1717              		.loc 1 705 0
 1718 0ce6 4FF03003 		mov	r3, #48
 1719 0cea 7B60     		str	r3, [r7, #4]
 706:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1720              		.loc 1 706 0
 1721 0cec 4FF08003 		mov	r3, #128
 1722 0cf0 BB60     		str	r3, [r7, #8]
 707:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1723              		.loc 1 707 0
 1724 0cf2 4FF00403 		mov	r3, #4
 1725 0cf6 FB61     		str	r3, [r7, #28]
 708:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1726              		.loc 1 708 0
 1727 0cf8 4FF00003 		mov	r3, #0
 1728 0cfc FB60     		str	r3, [r7, #12]
 709:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1729              		.loc 1 709 0
 1730 0cfe 4FF00003 		mov	r3, #0
 1731 0d02 7B61     		str	r3, [r7, #20]
 710:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1732              		.loc 1 710 0
 1733 0d04 4FF48033 		mov	r3, #65536
 1734 0d08 BB61     		str	r3, [r7, #24]
 711:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1735              		.loc 1 711 0
 1736 0d0a 4FF00003 		mov	r3, #0
 1737 0d0e 3B61     		str	r3, [r7, #16]
 712:../src/main.cpp **** 
 713:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 1738              		.loc 1 713 0
 1739 0d10 07F10403 		add	r3, r7, #4
 1740 0d14 4FF00C00 		mov	r0, #12
 1741 0d18 1946     		mov	r1, r3
 1742 0d1a FFF7FEFF 		bl	COMP_Init
 714:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 1743              		.loc 1 714 0
 1744 0d1e 4FF00C00 		mov	r0, #12
 1745 0d22 4FF00101 		mov	r1, #1
 1746 0d26 FFF7FEFF 		bl	COMP_Cmd
 715:../src/main.cpp **** 
 716:../src/main.cpp **** 	//COMP7 Init:
 717:../src/main.cpp **** 
 718:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1747              		.loc 1 718 0
 1748 0d2a 4FF00100 		mov	r0, #1
 1749 0d2e 4FF00101 		mov	r1, #1
 1750 0d32 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 719:../src/main.cpp **** 
 720:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1751              		.loc 1 720 0
 1752 0d36 4FF00303 		mov	r3, #3
 1753 0d3a 87F82430 		strb	r3, [r7, #36]
 721:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1754              		.loc 1 721 0
 1755 0d3e 4FF00003 		mov	r3, #0
 1756 0d42 87F82730 		strb	r3, [r7, #39]
 722:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 1757              		.loc 1 722 0
 1758 0d46 4FF00203 		mov	r3, #2
 1759 0d4a 3B62     		str	r3, [r7, #32]
 723:../src/main.cpp **** 
 724:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 1760              		.loc 1 724 0
 1761 0d4c 4FF40020 		mov	r0, #524288
 1762 0d50 4FF00101 		mov	r1, #1
 1763 0d54 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 725:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1764              		.loc 1 725 0
 1765 0d58 07F12003 		add	r3, r7, #32
 1766 0d5c 4FF40060 		mov	r0, #2048
 1767 0d60 C4F60000 		movt	r0, 18432
 1768 0d64 1946     		mov	r1, r3
 1769 0d66 FFF7FEFF 		bl	GPIO_Init
 726:../src/main.cpp **** 
 727:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1770              		.loc 1 727 0
 1771 0d6a 4FF00203 		mov	r3, #2
 1772 0d6e 87F82430 		strb	r3, [r7, #36]
 728:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1773              		.loc 1 728 0
 1774 0d72 4FF00003 		mov	r3, #0
 1775 0d76 87F82630 		strb	r3, [r7, #38]
 729:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1776              		.loc 1 729 0
 1777 0d7a 4FF00003 		mov	r3, #0
 1778 0d7e 87F82730 		strb	r3, [r7, #39]
 730:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 1779              		.loc 1 730 0
 1780 0d82 4FF00403 		mov	r3, #4
 1781 0d86 3B62     		str	r3, [r7, #32]
 731:../src/main.cpp **** 
 732:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 1782              		.loc 1 732 0
 1783 0d88 4FF40060 		mov	r0, #2048
 1784 0d8c C4F60000 		movt	r0, 18432
 1785 0d90 4FF00201 		mov	r1, #2
 1786 0d94 4FF00302 		mov	r2, #3
 1787 0d98 FFF7FEFF 		bl	GPIO_PinAFConfig
 733:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1788              		.loc 1 733 0
 1789 0d9c 07F12003 		add	r3, r7, #32
 1790 0da0 4FF40060 		mov	r0, #2048
 1791 0da4 C4F60000 		movt	r0, 18432
 1792 0da8 1946     		mov	r1, r3
 1793 0daa FFF7FEFF 		bl	GPIO_Init
 734:../src/main.cpp **** 
 735:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1794              		.loc 1 735 0
 1795 0dae 4FF00000 		mov	r0, #0
 1796 0db2 FFF7FEFF 		bl	RCC_PCLK2Config
 736:../src/main.cpp **** 
 737:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1797              		.loc 1 737 0
 1798 0db6 4FF03003 		mov	r3, #48
 1799 0dba 7B60     		str	r3, [r7, #4]
 738:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1800              		.loc 1 738 0
 1801 0dbc 4FF08003 		mov	r3, #128
 1802 0dc0 BB60     		str	r3, [r7, #8]
 739:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1803              		.loc 1 739 0
 1804 0dc2 4FF00403 		mov	r3, #4
 1805 0dc6 FB61     		str	r3, [r7, #28]
 740:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1806              		.loc 1 740 0
 1807 0dc8 4FF00003 		mov	r3, #0
 1808 0dcc FB60     		str	r3, [r7, #12]
 741:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1809              		.loc 1 741 0
 1810 0dce 4FF00003 		mov	r3, #0
 1811 0dd2 7B61     		str	r3, [r7, #20]
 742:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1812              		.loc 1 742 0
 1813 0dd4 4FF48033 		mov	r3, #65536
 1814 0dd8 BB61     		str	r3, [r7, #24]
 743:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1815              		.loc 1 743 0
 1816 0dda 4FF00003 		mov	r3, #0
 1817 0dde 3B61     		str	r3, [r7, #16]
 744:../src/main.cpp **** 
 745:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 1818              		.loc 1 745 0
 1819 0de0 07F10403 		add	r3, r7, #4
 1820 0de4 4FF01800 		mov	r0, #24
 1821 0de8 1946     		mov	r1, r3
 1822 0dea FFF7FEFF 		bl	COMP_Init
 746:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 1823              		.loc 1 746 0
 1824 0dee 4FF01800 		mov	r0, #24
 1825 0df2 4FF00101 		mov	r1, #1
 1826 0df6 FFF7FEFF 		bl	COMP_Cmd
 1827              	.LBE10:
 747:../src/main.cpp **** }
 1828              		.loc 1 747 0
 1829 0dfa 07F12807 		add	r7, r7, #40
 1830 0dfe BD46     		mov	sp, r7
 1831 0e00 80BD     		pop	{r7, pc}
 1832              		.cfi_endproc
 1833              	.LFE120:
 1835 0e02 00BF     		.align	2
 1836              		.global	_Z14calc_gyro_biasv
 1837              		.thumb
 1838              		.thumb_func
 1840              	_Z14calc_gyro_biasv:
 1841              	.LFB121:
 748:../src/main.cpp **** 
 749:../src/main.cpp **** int16_t calc_gyro_bias(void)
 750:../src/main.cpp **** {
 1842              		.loc 1 750 0
 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 16
 1845              		@ frame_needed = 1, uses_anonymous_args = 0
 1846 0e04 80B5     		push	{r7, lr}
 1847              	.LCFI30:
 1848              		.cfi_def_cfa_offset 8
 1849              		.cfi_offset 7, -8
 1850              		.cfi_offset 14, -4
 1851 0e06 84B0     		sub	sp, sp, #16
 1852              	.LCFI31:
 1853              		.cfi_def_cfa_offset 24
 1854 0e08 00AF     		add	r7, sp, #0
 1855              	.LCFI32:
 1856              		.cfi_def_cfa_register 7
 1857              	.LBB11:
 751:../src/main.cpp **** 	int i = 0;
 1858              		.loc 1 751 0
 1859 0e0a 4FF00003 		mov	r3, #0
 1860 0e0e FB60     		str	r3, [r7, #12]
 752:../src/main.cpp **** 	int accum_x = 0;
 1861              		.loc 1 752 0
 1862 0e10 4FF00003 		mov	r3, #0
 1863 0e14 BB60     		str	r3, [r7, #8]
 753:../src/main.cpp **** 
 754:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 755:../src/main.cpp **** 		uint16_t un_signed;
 756:../src/main.cpp **** 		int16_t output;
 757:../src/main.cpp **** 	} convert;
 758:../src/main.cpp **** 
 759:../src/main.cpp **** 	uint8_t bytes[2];
 760:../src/main.cpp **** 
 761:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1864              		.loc 1 761 0
 1865 0e16 4FF00003 		mov	r3, #0
 1866 0e1a FB60     		str	r3, [r7, #12]
 1867 0e1c 19E0     		b	.L32
 1868              	.L33:
 762:../src/main.cpp **** 	{
 763:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1869              		.loc 1 763 0 discriminator 2
 1870 0e1e 3B46     		mov	r3, r7
 1871 0e20 1846     		mov	r0, r3
 1872 0e22 4FF02801 		mov	r1, #40
 1873 0e26 4FF00202 		mov	r2, #2
 1874 0e2a FFF7FEFF 		bl	L3GD20_Read
 764:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1875              		.loc 1 764 0 discriminator 2
 1876 0e2e 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1877 0e30 4FEA0323 		lsl	r3, r3, #8
 1878 0e34 9AB2     		uxth	r2, r3
 1879 0e36 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1880 0e38 1343     		orrs	r3, r3, r2
 1881 0e3a 9BB2     		uxth	r3, r3
 1882 0e3c 9BB2     		uxth	r3, r3
 1883 0e3e BB80     		strh	r3, [r7, #4]	@ movhi
 765:../src/main.cpp **** 		accum_x += convert.output;
 1884              		.loc 1 765 0 discriminator 2
 1885 0e40 BB88     		ldrh	r3, [r7, #4]
 1886 0e42 1BB2     		sxth	r3, r3
 1887 0e44 BA68     		ldr	r2, [r7, #8]
 1888 0e46 D318     		adds	r3, r2, r3
 1889 0e48 BB60     		str	r3, [r7, #8]
 761:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1890              		.loc 1 761 0 discriminator 2
 1891 0e4a FB68     		ldr	r3, [r7, #12]
 1892 0e4c 03F10103 		add	r3, r3, #1
 1893 0e50 FB60     		str	r3, [r7, #12]
 1894              	.L32:
 761:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1895              		.loc 1 761 0 is_stmt 0 discriminator 1
 1896 0e52 FB68     		ldr	r3, [r7, #12]
 1897 0e54 F92B     		cmp	r3, #249
 1898 0e56 CCBF     		ite	gt
 1899 0e58 0023     		movgt	r3, #0
 1900 0e5a 0123     		movle	r3, #1
 1901 0e5c DBB2     		uxtb	r3, r3
 1902 0e5e 002B     		cmp	r3, #0
 1903 0e60 DDD1     		bne	.L33
 766:../src/main.cpp **** 	}
 767:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1904              		.loc 1 767 0 is_stmt 1
 1905 0e62 D7ED027A 		flds	s15, [r7, #8]	@ int
 1906 0e66 B8EEE77A 		fsitos	s14, s15
 1907 0e6a DFED077A 		flds	s15, .L35
 1908 0e6e C7EE277A 		fdivs	s15, s14, s15
 1909 0e72 FDEEE77A 		ftosizs	s15, s15
 1910 0e76 17EE903A 		fmrs	r3, s15	@ int
 1911 0e7a 9BB2     		uxth	r3, r3
 1912 0e7c 1BB2     		sxth	r3, r3
 1913              	.LBE11:
 768:../src/main.cpp **** }
 1914              		.loc 1 768 0
 1915 0e7e 1846     		mov	r0, r3
 1916 0e80 07F11007 		add	r7, r7, #16
 1917 0e84 BD46     		mov	sp, r7
 1918 0e86 80BD     		pop	{r7, pc}
 1919              	.L36:
 1920              		.align	2
 1921              	.L35:
 1922 0e88 00007A43 		.word	1132068864
 1923              		.cfi_endproc
 1924              	.LFE121:
 1926              		.align	2
 1927              		.global	_Z13adc1_init_DMAv
 1928              		.thumb
 1929              		.thumb_func
 1931              	_Z13adc1_init_DMAv:
 1932              	.LFB122:
 769:../src/main.cpp **** 
 770:../src/main.cpp **** /*
 771:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 772:../src/main.cpp ****  * a user-supplied location in memory
 773:../src/main.cpp ****  * @Args: None
 774:../src/main.cpp ****  * @Return Val: None
 775:../src/main.cpp ****  */
 776:../src/main.cpp **** 
 777:../src/main.cpp **** void adc1_init_DMA(void)
 778:../src/main.cpp **** {
 1933              		.loc 1 778 0
 1934              		.cfi_startproc
 1935              		@ args = 0, pretend = 0, frame = 112
 1936              		@ frame_needed = 1, uses_anonymous_args = 0
 1937 0e8c 80B5     		push	{r7, lr}
 1938              	.LCFI33:
 1939              		.cfi_def_cfa_offset 8
 1940              		.cfi_offset 7, -8
 1941              		.cfi_offset 14, -4
 1942 0e8e 9CB0     		sub	sp, sp, #112
 1943              	.LCFI34:
 1944              		.cfi_def_cfa_offset 120
 1945 0e90 00AF     		add	r7, sp, #0
 1946              	.LCFI35:
 1947              		.cfi_def_cfa_register 7
 1948              	.LBB12:
 779:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 780:../src/main.cpp **** 
 781:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 782:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 783:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 784:../src/main.cpp **** 
 785:../src/main.cpp **** 	/* Configure the ADC clock */
 786:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1949              		.loc 1 786 0
 1950 0e92 4FF48870 		mov	r0, #272
 1951 0e96 FFF7FEFF 		bl	RCC_ADCCLKConfig
 787:../src/main.cpp **** 	/* Enable ADC1 clock */
 788:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1952              		.loc 1 788 0
 1953 0e9a 4FF08050 		mov	r0, #268435456
 1954 0e9e 4FF00101 		mov	r1, #1
 1955 0ea2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 789:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 790:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1956              		.loc 1 790 0
 1957 0ea6 4FF40030 		mov	r0, #131072
 1958 0eaa 4FF00101 		mov	r1, #1
 1959 0eae FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 791:../src/main.cpp **** 
 792:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 793:../src/main.cpp **** 
 794:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1960              		.loc 1 794 0
 1961 0eb2 07F15003 		add	r3, r7, #80
 1962 0eb6 1846     		mov	r0, r3
 1963 0eb8 FFF7FEFF 		bl	GPIO_StructInit
 795:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1964              		.loc 1 795 0
 1965 0ebc 4FF00C03 		mov	r3, #12
 1966 0ec0 3B65     		str	r3, [r7, #80]
 796:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1967              		.loc 1 796 0
 1968 0ec2 4FF00303 		mov	r3, #3
 1969 0ec6 87F85430 		strb	r3, [r7, #84]
 797:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1970              		.loc 1 797 0
 1971 0eca 4FF00003 		mov	r3, #0
 1972 0ece 87F85730 		strb	r3, [r7, #87]
 798:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1973              		.loc 1 798 0
 1974 0ed2 07F15003 		add	r3, r7, #80
 1975 0ed6 4FF09040 		mov	r0, #1207959552
 1976 0eda 1946     		mov	r1, r3
 1977 0edc FFF7FEFF 		bl	GPIO_Init
 799:../src/main.cpp **** 
 800:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1978              		.loc 1 800 0
 1979 0ee0 3B46     		mov	r3, r7
 1980 0ee2 1846     		mov	r0, r3
 1981 0ee4 FFF7FEFF 		bl	ADC_StructInit
 801:../src/main.cpp **** 
 802:../src/main.cpp **** 	/* Calibration procedure */
 803:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1982              		.loc 1 803 0
 1983 0ee8 4FF0A040 		mov	r0, #1342177280
 1984 0eec 4FF00101 		mov	r1, #1
 1985 0ef0 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 804:../src/main.cpp **** 
 805:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 806:../src/main.cpp **** 	int foo;
 807:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1986              		.loc 1 807 0
 1987 0ef4 4FF00003 		mov	r3, #0
 1988 0ef8 FB66     		str	r3, [r7, #108]
 1989 0efa 07E0     		b	.L38
 1990              	.L39:
 808:../src/main.cpp **** 	{
 809:../src/main.cpp **** 	  ++foo;
 1991              		.loc 1 809 0 discriminator 2
 1992 0efc FB6E     		ldr	r3, [r7, #108]
 1993 0efe 03F10103 		add	r3, r3, #1
 1994 0f02 FB66     		str	r3, [r7, #108]
 807:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1995              		.loc 1 807 0 discriminator 2
 1996 0f04 FB6E     		ldr	r3, [r7, #108]
 1997 0f06 03F10103 		add	r3, r3, #1
 1998 0f0a FB66     		str	r3, [r7, #108]
 1999              	.L38:
 807:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2000              		.loc 1 807 0 is_stmt 0 discriminator 1
 2001 0f0c FA6E     		ldr	r2, [r7, #108]
 2002 0f0e 4FF6FF13 		movw	r3, #63999
 2003 0f12 9A42     		cmp	r2, r3
 2004 0f14 CCBF     		ite	gt
 2005 0f16 0023     		movgt	r3, #0
 2006 0f18 0123     		movle	r3, #1
 2007 0f1a DBB2     		uxtb	r3, r3
 2008 0f1c 002B     		cmp	r3, #0
 2009 0f1e EDD1     		bne	.L39
 810:../src/main.cpp **** 	}
 811:../src/main.cpp **** 
 812:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2010              		.loc 1 812 0 is_stmt 1
 2011 0f20 4FF0A040 		mov	r0, #1342177280
 2012 0f24 4FF00001 		mov	r1, #0
 2013 0f28 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 813:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2014              		.loc 1 813 0
 2015 0f2c 4FF0A040 		mov	r0, #1342177280
 2016 0f30 FFF7FEFF 		bl	ADC_StartCalibration
 814:../src/main.cpp **** 
 815:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2017              		.loc 1 815 0
 2018 0f34 00BF     		nop
 2019              	.L40:
 2020              		.loc 1 815 0 is_stmt 0 discriminator 1
 2021 0f36 4FF0A040 		mov	r0, #1342177280
 2022 0f3a FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2023 0f3e 0346     		mov	r3, r0
 2024 0f40 002B     		cmp	r3, #0
 2025 0f42 0CBF     		ite	eq
 2026 0f44 0023     		moveq	r3, #0
 2027 0f46 0123     		movne	r3, #1
 2028 0f48 DBB2     		uxtb	r3, r3
 2029 0f4a 002B     		cmp	r3, #0
 2030 0f4c F3D1     		bne	.L40
 816:../src/main.cpp **** 
 817:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2031              		.loc 1 817 0 is_stmt 1
 2032 0f4e 4FF00003 		mov	r3, #0
 2033 0f52 BB65     		str	r3, [r7, #88]
 818:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 2034              		.loc 1 818 0
 2035 0f54 4FF00003 		mov	r3, #0
 2036 0f58 FB65     		str	r3, [r7, #92]
 819:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 2037              		.loc 1 819 0
 2038 0f5a 4FF40043 		mov	r3, #32768
 2039 0f5e 3B66     		str	r3, [r7, #96]
 820:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 2040              		.loc 1 820 0
 2041 0f60 4FF00203 		mov	r3, #2
 2042 0f64 7B66     		str	r3, [r7, #100]
 821:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 2043              		.loc 1 821 0
 2044 0f66 4FF00F03 		mov	r3, #15
 2045 0f6a 87F86830 		strb	r3, [r7, #104]
 822:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2046              		.loc 1 822 0
 2047 0f6e 07F15803 		add	r3, r7, #88
 2048 0f72 4FF0A040 		mov	r0, #1342177280
 2049 0f76 1946     		mov	r1, r3
 2050 0f78 FFF7FEFF 		bl	ADC_CommonInit
 823:../src/main.cpp **** 
 824:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2051              		.loc 1 824 0
 2052 0f7c 4FF40053 		mov	r3, #8192
 2053 0f80 3B60     		str	r3, [r7, #0]
 825:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2054              		.loc 1 825 0
 2055 0f82 4FF00003 		mov	r3, #0
 2056 0f86 7B60     		str	r3, [r7, #4]
 826:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2057              		.loc 1 826 0
 2058 0f88 4FF00003 		mov	r3, #0
 2059 0f8c BB60     		str	r3, [r7, #8]
 827:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2060              		.loc 1 827 0
 2061 0f8e 4FF00003 		mov	r3, #0
 2062 0f92 FB60     		str	r3, [r7, #12]
 828:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2063              		.loc 1 828 0
 2064 0f94 4FF00003 		mov	r3, #0
 2065 0f98 3B61     		str	r3, [r7, #16]
 829:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2066              		.loc 1 829 0
 2067 0f9a 4FF00003 		mov	r3, #0
 2068 0f9e 7B61     		str	r3, [r7, #20]
 830:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2069              		.loc 1 830 0
 2070 0fa0 4FF00003 		mov	r3, #0
 2071 0fa4 BB61     		str	r3, [r7, #24]
 831:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2072              		.loc 1 831 0
 2073 0fa6 4FF00203 		mov	r3, #2
 2074 0faa 3B77     		strb	r3, [r7, #28]
 832:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2075              		.loc 1 832 0
 2076 0fac 3B46     		mov	r3, r7
 2077 0fae 4FF0A040 		mov	r0, #1342177280
 2078 0fb2 1946     		mov	r1, r3
 2079 0fb4 FFF7FEFF 		bl	ADC_Init
 833:../src/main.cpp **** 
 834:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 835:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2080              		.loc 1 835 0
 2081 0fb8 4FF0A040 		mov	r0, #1342177280
 2082 0fbc 4FF00301 		mov	r1, #3
 2083 0fc0 4FF00102 		mov	r2, #1
 2084 0fc4 4FF00703 		mov	r3, #7
 2085 0fc8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 836:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2086              		.loc 1 836 0
 2087 0fcc 4FF0A040 		mov	r0, #1342177280
 2088 0fd0 4FF00401 		mov	r1, #4
 2089 0fd4 4FF00202 		mov	r2, #2
 2090 0fd8 4FF00703 		mov	r3, #7
 2091 0fdc FFF7FEFF 		bl	ADC_RegularChannelConfig
 837:../src/main.cpp **** 
 838:../src/main.cpp **** 	/* Enable ADC1 */
 839:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2092              		.loc 1 839 0
 2093 0fe0 4FF0A040 		mov	r0, #1342177280
 2094 0fe4 4FF00101 		mov	r1, #1
 2095 0fe8 FFF7FEFF 		bl	ADC_Cmd
 840:../src/main.cpp **** 
 841:../src/main.cpp **** 	/* wait for ADRDY */
 842:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2096              		.loc 1 842 0
 2097 0fec 00BF     		nop
 2098              	.L41:
 2099              		.loc 1 842 0 is_stmt 0 discriminator 1
 2100 0fee 4FF0A040 		mov	r0, #1342177280
 2101 0ff2 4FF00101 		mov	r1, #1
 2102 0ff6 FFF7FEFF 		bl	ADC_GetFlagStatus
 2103 0ffa 0346     		mov	r3, r0
 2104 0ffc 002B     		cmp	r3, #0
 2105 0ffe 14BF     		ite	ne
 2106 1000 0023     		movne	r3, #0
 2107 1002 0123     		moveq	r3, #1
 2108 1004 DBB2     		uxtb	r3, r3
 2109 1006 002B     		cmp	r3, #0
 2110 1008 F1D1     		bne	.L41
 843:../src/main.cpp **** 
 844:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 845:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2111              		.loc 1 845 0 is_stmt 1
 2112 100a 4FF0A040 		mov	r0, #1342177280
 2113 100e FFF7FEFF 		bl	ADC_StartConversion
 846:../src/main.cpp **** 
 847:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 2114              		.loc 1 847 0
 2115 1012 4FF00100 		mov	r0, #1
 2116 1016 4FF00101 		mov	r1, #1
 2117 101a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 848:../src/main.cpp **** 
 849:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 850:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 2118              		.loc 1 850 0
 2119 101e 07F12003 		add	r3, r7, #32
 2120 1022 1846     		mov	r0, r3
 2121 1024 FFF7FEFF 		bl	DMA_StructInit
 851:../src/main.cpp **** 
 852:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 2122              		.loc 1 852 0
 2123 1028 4FF00800 		mov	r0, #8
 2124 102c C4F20200 		movt	r0, 16386
 2125 1030 FFF7FEFF 		bl	DMA_DeInit
 853:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 2126              		.loc 1 853 0
 2127 1034 4FF04003 		mov	r3, #64
 2128 1038 C5F20003 		movt	r3, 20480
 2129 103c 3B62     		str	r3, [r7, #32]
 854:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 2130              		.loc 1 854 0
 2131 103e 40F20003 		movw	r3, #:lower16:adcData
 2132 1042 C0F20003 		movt	r3, #:upper16:adcData
 2133 1046 7B62     		str	r3, [r7, #36]
 855:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 2134              		.loc 1 855 0
 2135 1048 4FF00003 		mov	r3, #0
 2136 104c BB62     		str	r3, [r7, #40]
 856:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 2137              		.loc 1 856 0
 2138 104e 4FF00203 		mov	r3, #2
 2139 1052 BB85     		strh	r3, [r7, #44]	@ movhi
 857:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 2140              		.loc 1 857 0
 2141 1054 4FF00003 		mov	r3, #0
 2142 1058 3B63     		str	r3, [r7, #48]
 858:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 2143              		.loc 1 858 0
 2144 105a 4FF08003 		mov	r3, #128
 2145 105e 7B63     		str	r3, [r7, #52]
 859:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 2146              		.loc 1 859 0
 2147 1060 4FF40073 		mov	r3, #512
 2148 1064 BB63     		str	r3, [r7, #56]
 860:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 2149              		.loc 1 860 0
 2150 1066 4FF40063 		mov	r3, #2048
 2151 106a FB63     		str	r3, [r7, #60]
 861:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 2152              		.loc 1 861 0
 2153 106c 4FF02003 		mov	r3, #32
 2154 1070 3B64     		str	r3, [r7, #64]
 862:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 2155              		.loc 1 862 0
 2156 1072 4FF40053 		mov	r3, #8192
 2157 1076 7B64     		str	r3, [r7, #68]
 863:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 2158              		.loc 1 863 0
 2159 1078 4FF00003 		mov	r3, #0
 2160 107c BB64     		str	r3, [r7, #72]
 864:../src/main.cpp **** 
 865:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 2161              		.loc 1 865 0
 2162 107e 07F12003 		add	r3, r7, #32
 2163 1082 4FF00800 		mov	r0, #8
 2164 1086 C4F20200 		movt	r0, 16386
 2165 108a 1946     		mov	r1, r3
 2166 108c FFF7FEFF 		bl	DMA_Init
 866:../src/main.cpp **** 
 867:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 868:../src/main.cpp **** 
 869:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 2167              		.loc 1 869 0
 2168 1090 4FF00B03 		mov	r3, #11
 2169 1094 87F84C30 		strb	r3, [r7, #76]
 870:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2170              		.loc 1 870 0
 2171 1098 4FF00203 		mov	r3, #2
 2172 109c 87F84D30 		strb	r3, [r7, #77]
 871:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2173              		.loc 1 871 0
 2174 10a0 4FF00003 		mov	r3, #0
 2175 10a4 87F84E30 		strb	r3, [r7, #78]
 872:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2176              		.loc 1 872 0
 2177 10a8 4FF00103 		mov	r3, #1
 2178 10ac 87F84F30 		strb	r3, [r7, #79]
 873:../src/main.cpp **** 
 874:../src/main.cpp **** 	NVIC_Init(&nv);
 2179              		.loc 1 874 0
 2180 10b0 07F14C03 		add	r3, r7, #76
 2181 10b4 1846     		mov	r0, r3
 2182 10b6 FFF7FEFF 		bl	NVIC_Init
 875:../src/main.cpp **** 
 876:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 2183              		.loc 1 876 0
 2184 10ba 4FF00800 		mov	r0, #8
 2185 10be C4F20200 		movt	r0, 16386
 2186 10c2 4FF00201 		mov	r1, #2
 2187 10c6 4FF00102 		mov	r2, #1
 2188 10ca FFF7FEFF 		bl	DMA_ITConfig
 877:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 2189              		.loc 1 877 0
 2190 10ce 4FF00800 		mov	r0, #8
 2191 10d2 C4F20200 		movt	r0, 16386
 2192 10d6 4FF00101 		mov	r1, #1
 2193 10da FFF7FEFF 		bl	DMA_Cmd
 878:../src/main.cpp **** 
 879:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 2194              		.loc 1 879 0
 2195 10de 4FF0A040 		mov	r0, #1342177280
 2196 10e2 4FF00201 		mov	r1, #2
 2197 10e6 FFF7FEFF 		bl	ADC_DMAConfig
 880:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 2198              		.loc 1 880 0
 2199 10ea 4FF0A040 		mov	r0, #1342177280
 2200 10ee 4FF00101 		mov	r1, #1
 2201 10f2 FFF7FEFF 		bl	ADC_DMACmd
 2202              	.LBE12:
 881:../src/main.cpp **** }
 2203              		.loc 1 881 0
 2204 10f6 07F17007 		add	r7, r7, #112
 2205 10fa BD46     		mov	sp, r7
 2206 10fc 80BD     		pop	{r7, pc}
 2207              		.cfi_endproc
 2208              	.LFE122:
 2210 10fe 00BF     		.align	2
 2211              		.global	_Z13adc2_init_DMAv
 2212              		.thumb
 2213              		.thumb_func
 2215              	_Z13adc2_init_DMAv:
 2216              	.LFB123:
 882:../src/main.cpp **** 
 883:../src/main.cpp **** void adc2_init_DMA(void)
 884:../src/main.cpp **** {
 2217              		.loc 1 884 0
 2218              		.cfi_startproc
 2219              		@ args = 0, pretend = 0, frame = 112
 2220              		@ frame_needed = 1, uses_anonymous_args = 0
 2221 1100 80B5     		push	{r7, lr}
 2222              	.LCFI36:
 2223              		.cfi_def_cfa_offset 8
 2224              		.cfi_offset 7, -8
 2225              		.cfi_offset 14, -4
 2226 1102 9CB0     		sub	sp, sp, #112
 2227              	.LCFI37:
 2228              		.cfi_def_cfa_offset 120
 2229 1104 00AF     		add	r7, sp, #0
 2230              	.LCFI38:
 2231              		.cfi_def_cfa_register 7
 2232              	.LBB13:
 885:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 886:../src/main.cpp **** 
 887:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 888:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 889:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 890:../src/main.cpp **** 
 891:../src/main.cpp **** 	/* Configure the ADC clock */
 892:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 2233              		.loc 1 892 0
 2234 1106 4FF48870 		mov	r0, #272
 2235 110a FFF7FEFF 		bl	RCC_ADCCLKConfig
 893:../src/main.cpp **** 	/* Enable ADC2 clock */
 894:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2236              		.loc 1 894 0
 2237 110e 4FF08050 		mov	r0, #268435456
 2238 1112 4FF00101 		mov	r1, #1
 2239 1116 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 895:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 896:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 2240              		.loc 1 896 0
 2241 111a 4FF46020 		mov	r0, #917504
 2242 111e 4FF00101 		mov	r1, #1
 2243 1122 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 897:../src/main.cpp **** 
 898:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 899:../src/main.cpp **** 
 900:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2244              		.loc 1 900 0
 2245 1126 07F15003 		add	r3, r7, #80
 2246 112a 1846     		mov	r0, r3
 2247 112c FFF7FEFF 		bl	GPIO_StructInit
 901:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 2248              		.loc 1 901 0
 2249 1130 4FF01003 		mov	r3, #16
 2250 1134 3B65     		str	r3, [r7, #80]
 902:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2251              		.loc 1 902 0
 2252 1136 4FF00303 		mov	r3, #3
 2253 113a 87F85430 		strb	r3, [r7, #84]
 903:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2254              		.loc 1 903 0
 2255 113e 4FF00003 		mov	r3, #0
 2256 1142 87F85730 		strb	r3, [r7, #87]
 904:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 2257              		.loc 1 904 0
 2258 1146 4FF00303 		mov	r3, #3
 2259 114a 87F85530 		strb	r3, [r7, #85]
 905:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2260              		.loc 1 905 0
 2261 114e 07F15003 		add	r3, r7, #80
 2262 1152 4FF09040 		mov	r0, #1207959552
 2263 1156 1946     		mov	r1, r3
 2264 1158 FFF7FEFF 		bl	GPIO_Init
 906:../src/main.cpp **** 
 907:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2265              		.loc 1 907 0
 2266 115c 07F15003 		add	r3, r7, #80
 2267 1160 1846     		mov	r0, r3
 2268 1162 FFF7FEFF 		bl	GPIO_StructInit
 908:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2269              		.loc 1 908 0
 2270 1166 4FF00403 		mov	r3, #4
 2271 116a 3B65     		str	r3, [r7, #80]
 909:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2272              		.loc 1 909 0
 2273 116c 4FF00303 		mov	r3, #3
 2274 1170 87F85430 		strb	r3, [r7, #84]
 910:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2275              		.loc 1 910 0
 2276 1174 4FF00003 		mov	r3, #0
 2277 1178 87F85730 		strb	r3, [r7, #87]
 911:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2278              		.loc 1 911 0
 2279 117c 07F15003 		add	r3, r7, #80
 2280 1180 4FF48060 		mov	r0, #1024
 2281 1184 C4F60000 		movt	r0, 18432
 2282 1188 1946     		mov	r1, r3
 2283 118a FFF7FEFF 		bl	GPIO_Init
 912:../src/main.cpp **** 
 913:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2284              		.loc 1 913 0
 2285 118e 07F15003 		add	r3, r7, #80
 2286 1192 1846     		mov	r0, r3
 2287 1194 FFF7FEFF 		bl	GPIO_StructInit
 914:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 2288              		.loc 1 914 0
 2289 1198 4FF03003 		mov	r3, #48
 2290 119c 3B65     		str	r3, [r7, #80]
 915:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2291              		.loc 1 915 0
 2292 119e 4FF00303 		mov	r3, #3
 2293 11a2 87F85430 		strb	r3, [r7, #84]
 916:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2294              		.loc 1 916 0
 2295 11a6 4FF00003 		mov	r3, #0
 2296 11aa 87F85730 		strb	r3, [r7, #87]
 917:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 2297              		.loc 1 917 0
 2298 11ae 07F15003 		add	r3, r7, #80
 2299 11b2 4FF40060 		mov	r0, #2048
 2300 11b6 C4F60000 		movt	r0, 18432
 2301 11ba 1946     		mov	r1, r3
 2302 11bc FFF7FEFF 		bl	GPIO_Init
 918:../src/main.cpp **** 
 919:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2303              		.loc 1 919 0
 2304 11c0 3B46     		mov	r3, r7
 2305 11c2 1846     		mov	r0, r3
 2306 11c4 FFF7FEFF 		bl	ADC_StructInit
 920:../src/main.cpp **** 
 921:../src/main.cpp **** 	/* Calibration procedure */
 922:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 2307              		.loc 1 922 0
 2308 11c8 4FF48070 		mov	r0, #256
 2309 11cc C5F20000 		movt	r0, 20480
 2310 11d0 4FF00101 		mov	r1, #1
 2311 11d4 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 923:../src/main.cpp **** 
 924:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 925:../src/main.cpp **** 	int foo;
 926:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2312              		.loc 1 926 0
 2313 11d8 4FF00003 		mov	r3, #0
 2314 11dc FB66     		str	r3, [r7, #108]
 2315 11de 07E0     		b	.L43
 2316              	.L44:
 927:../src/main.cpp **** 	{
 928:../src/main.cpp **** 	  ++foo;
 2317              		.loc 1 928 0 discriminator 2
 2318 11e0 FB6E     		ldr	r3, [r7, #108]
 2319 11e2 03F10103 		add	r3, r3, #1
 2320 11e6 FB66     		str	r3, [r7, #108]
 926:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2321              		.loc 1 926 0 discriminator 2
 2322 11e8 FB6E     		ldr	r3, [r7, #108]
 2323 11ea 03F10103 		add	r3, r3, #1
 2324 11ee FB66     		str	r3, [r7, #108]
 2325              	.L43:
 926:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2326              		.loc 1 926 0 is_stmt 0 discriminator 1
 2327 11f0 FA6E     		ldr	r2, [r7, #108]
 2328 11f2 4FF6FF13 		movw	r3, #63999
 2329 11f6 9A42     		cmp	r2, r3
 2330 11f8 CCBF     		ite	gt
 2331 11fa 0023     		movgt	r3, #0
 2332 11fc 0123     		movle	r3, #1
 2333 11fe DBB2     		uxtb	r3, r3
 2334 1200 002B     		cmp	r3, #0
 2335 1202 EDD1     		bne	.L44
 929:../src/main.cpp **** 	}
 930:../src/main.cpp **** 
 931:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 2336              		.loc 1 931 0 is_stmt 1
 2337 1204 4FF48070 		mov	r0, #256
 2338 1208 C5F20000 		movt	r0, 20480
 2339 120c 4FF00001 		mov	r1, #0
 2340 1210 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 932:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 2341              		.loc 1 932 0
 2342 1214 4FF48070 		mov	r0, #256
 2343 1218 C5F20000 		movt	r0, 20480
 2344 121c FFF7FEFF 		bl	ADC_StartCalibration
 933:../src/main.cpp **** 
 934:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 2345              		.loc 1 934 0
 2346 1220 00BF     		nop
 2347              	.L45:
 2348              		.loc 1 934 0 is_stmt 0 discriminator 1
 2349 1222 4FF48070 		mov	r0, #256
 2350 1226 C5F20000 		movt	r0, 20480
 2351 122a FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2352 122e 0346     		mov	r3, r0
 2353 1230 002B     		cmp	r3, #0
 2354 1232 0CBF     		ite	eq
 2355 1234 0023     		moveq	r3, #0
 2356 1236 0123     		movne	r3, #1
 2357 1238 DBB2     		uxtb	r3, r3
 2358 123a 002B     		cmp	r3, #0
 2359 123c F1D1     		bne	.L45
 935:../src/main.cpp **** 
 936:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2360              		.loc 1 936 0 is_stmt 1
 2361 123e 4FF00003 		mov	r3, #0
 2362 1242 BB65     		str	r3, [r7, #88]
 937:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2363              		.loc 1 937 0
 2364 1244 4FF00003 		mov	r3, #0
 2365 1248 FB65     		str	r3, [r7, #92]
 938:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 2366              		.loc 1 938 0
 2367 124a 4FF40043 		mov	r3, #32768
 2368 124e 3B66     		str	r3, [r7, #96]
 939:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 2369              		.loc 1 939 0
 2370 1250 4FF00203 		mov	r3, #2
 2371 1254 7B66     		str	r3, [r7, #100]
 940:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 2372              		.loc 1 940 0
 2373 1256 4FF00F03 		mov	r3, #15
 2374 125a 87F86830 		strb	r3, [r7, #104]
 941:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 2375              		.loc 1 941 0
 2376 125e 07F15803 		add	r3, r7, #88
 2377 1262 4FF48070 		mov	r0, #256
 2378 1266 C5F20000 		movt	r0, 20480
 2379 126a 1946     		mov	r1, r3
 2380 126c FFF7FEFF 		bl	ADC_CommonInit
 942:../src/main.cpp **** 
 943:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2381              		.loc 1 943 0
 2382 1270 4FF40053 		mov	r3, #8192
 2383 1274 3B60     		str	r3, [r7, #0]
 944:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2384              		.loc 1 944 0
 2385 1276 4FF00003 		mov	r3, #0
 2386 127a 7B60     		str	r3, [r7, #4]
 945:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2387              		.loc 1 945 0
 2388 127c 4FF00003 		mov	r3, #0
 2389 1280 BB60     		str	r3, [r7, #8]
 946:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2390              		.loc 1 946 0
 2391 1282 4FF00003 		mov	r3, #0
 2392 1286 FB60     		str	r3, [r7, #12]
 947:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2393              		.loc 1 947 0
 2394 1288 4FF00003 		mov	r3, #0
 2395 128c 3B61     		str	r3, [r7, #16]
 948:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2396              		.loc 1 948 0
 2397 128e 4FF00003 		mov	r3, #0
 2398 1292 7B61     		str	r3, [r7, #20]
 949:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2399              		.loc 1 949 0
 2400 1294 4FF00003 		mov	r3, #0
 2401 1298 BB61     		str	r3, [r7, #24]
 950:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 2402              		.loc 1 950 0
 2403 129a 4FF00403 		mov	r3, #4
 2404 129e 3B77     		strb	r3, [r7, #28]
 951:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 2405              		.loc 1 951 0
 2406 12a0 3B46     		mov	r3, r7
 2407 12a2 4FF48070 		mov	r0, #256
 2408 12a6 C5F20000 		movt	r0, 20480
 2409 12aa 1946     		mov	r1, r3
 2410 12ac FFF7FEFF 		bl	ADC_Init
 952:../src/main.cpp **** 
 953:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 954:../src/main.cpp **** 
 955:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2411              		.loc 1 955 0
 2412 12b0 4FF48070 		mov	r0, #256
 2413 12b4 C5F20000 		movt	r0, 20480
 2414 12b8 4FF00101 		mov	r1, #1
 2415 12bc 4FF00102 		mov	r2, #1
 2416 12c0 4FF00703 		mov	r3, #7
 2417 12c4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 956:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2418              		.loc 1 956 0
 2419 12c8 4FF48070 		mov	r0, #256
 2420 12cc C5F20000 		movt	r0, 20480
 2421 12d0 4FF00501 		mov	r1, #5
 2422 12d4 4FF00202 		mov	r2, #2
 2423 12d8 4FF00703 		mov	r3, #7
 2424 12dc FFF7FEFF 		bl	ADC_RegularChannelConfig
 957:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 2425              		.loc 1 957 0
 2426 12e0 4FF48070 		mov	r0, #256
 2427 12e4 C5F20000 		movt	r0, 20480
 2428 12e8 4FF00B01 		mov	r1, #11
 2429 12ec 4FF00302 		mov	r2, #3
 2430 12f0 4FF00703 		mov	r3, #7
 2431 12f4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 958:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 2432              		.loc 1 958 0
 2433 12f8 4FF48070 		mov	r0, #256
 2434 12fc C5F20000 		movt	r0, 20480
 2435 1300 4FF00C01 		mov	r1, #12
 2436 1304 4FF00402 		mov	r2, #4
 2437 1308 4FF00703 		mov	r3, #7
 2438 130c FFF7FEFF 		bl	ADC_RegularChannelConfig
 959:../src/main.cpp **** 
 960:../src/main.cpp **** 	/* Enable ADC2 */
 961:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 2439              		.loc 1 961 0
 2440 1310 4FF48070 		mov	r0, #256
 2441 1314 C5F20000 		movt	r0, 20480
 2442 1318 4FF00101 		mov	r1, #1
 2443 131c FFF7FEFF 		bl	ADC_Cmd
 962:../src/main.cpp **** 
 963:../src/main.cpp **** 	/* wait for ADRDY */
 964:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 2444              		.loc 1 964 0
 2445 1320 00BF     		nop
 2446              	.L46:
 2447              		.loc 1 964 0 is_stmt 0 discriminator 1
 2448 1322 4FF48070 		mov	r0, #256
 2449 1326 C5F20000 		movt	r0, 20480
 2450 132a 4FF00101 		mov	r1, #1
 2451 132e FFF7FEFF 		bl	ADC_GetFlagStatus
 2452 1332 0346     		mov	r3, r0
 2453 1334 002B     		cmp	r3, #0
 2454 1336 14BF     		ite	ne
 2455 1338 0023     		movne	r3, #0
 2456 133a 0123     		moveq	r3, #1
 2457 133c DBB2     		uxtb	r3, r3
 2458 133e 002B     		cmp	r3, #0
 2459 1340 EFD1     		bne	.L46
 965:../src/main.cpp **** 
 966:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 967:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 2460              		.loc 1 967 0 is_stmt 1
 2461 1342 4FF48070 		mov	r0, #256
 2462 1346 C5F20000 		movt	r0, 20480
 2463 134a FFF7FEFF 		bl	ADC_StartConversion
 968:../src/main.cpp **** 
 969:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 2464              		.loc 1 969 0
 2465 134e 4FF00200 		mov	r0, #2
 2466 1352 4FF00101 		mov	r1, #1
 2467 1356 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 970:../src/main.cpp **** 
 971:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 972:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 2468              		.loc 1 972 0
 2469 135a 07F12003 		add	r3, r7, #32
 2470 135e 1846     		mov	r0, r3
 2471 1360 FFF7FEFF 		bl	DMA_StructInit
 973:../src/main.cpp **** 
 974:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 2472              		.loc 1 974 0
 2473 1364 4FF48160 		mov	r0, #1032
 2474 1368 C4F20200 		movt	r0, 16386
 2475 136c FFF7FEFF 		bl	DMA_DeInit
 975:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 2476              		.loc 1 975 0
 2477 1370 4FF4A073 		mov	r3, #320
 2478 1374 C5F20003 		movt	r3, 20480
 2479 1378 3B62     		str	r3, [r7, #32]
 976:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 2480              		.loc 1 976 0
 2481 137a 40F20003 		movw	r3, #:lower16:adc2_data
 2482 137e C0F20003 		movt	r3, #:upper16:adc2_data
 2483 1382 7B62     		str	r3, [r7, #36]
 977:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 2484              		.loc 1 977 0
 2485 1384 4FF00003 		mov	r3, #0
 2486 1388 BB62     		str	r3, [r7, #40]
 978:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 2487              		.loc 1 978 0
 2488 138a 4FF00403 		mov	r3, #4
 2489 138e BB85     		strh	r3, [r7, #44]	@ movhi
 979:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 2490              		.loc 1 979 0
 2491 1390 4FF00003 		mov	r3, #0
 2492 1394 3B63     		str	r3, [r7, #48]
 980:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 2493              		.loc 1 980 0
 2494 1396 4FF08003 		mov	r3, #128
 2495 139a 7B63     		str	r3, [r7, #52]
 981:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 2496              		.loc 1 981 0
 2497 139c 4FF40073 		mov	r3, #512
 2498 13a0 BB63     		str	r3, [r7, #56]
 982:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 2499              		.loc 1 982 0
 2500 13a2 4FF40063 		mov	r3, #2048
 2501 13a6 FB63     		str	r3, [r7, #60]
 983:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 2502              		.loc 1 983 0
 2503 13a8 4FF02003 		mov	r3, #32
 2504 13ac 3B64     		str	r3, [r7, #64]
 984:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 2505              		.loc 1 984 0
 2506 13ae 4FF40053 		mov	r3, #8192
 2507 13b2 7B64     		str	r3, [r7, #68]
 985:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 2508              		.loc 1 985 0
 2509 13b4 4FF00003 		mov	r3, #0
 2510 13b8 BB64     		str	r3, [r7, #72]
 986:../src/main.cpp **** 
 987:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 2511              		.loc 1 987 0
 2512 13ba 07F12003 		add	r3, r7, #32
 2513 13be 4FF48160 		mov	r0, #1032
 2514 13c2 C4F20200 		movt	r0, 16386
 2515 13c6 1946     		mov	r1, r3
 2516 13c8 FFF7FEFF 		bl	DMA_Init
 988:../src/main.cpp **** 
 989:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 990:../src/main.cpp **** 
 991:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 2517              		.loc 1 991 0
 2518 13cc 4FF03803 		mov	r3, #56
 2519 13d0 87F84C30 		strb	r3, [r7, #76]
 992:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2520              		.loc 1 992 0
 2521 13d4 4FF00203 		mov	r3, #2
 2522 13d8 87F84D30 		strb	r3, [r7, #77]
 993:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2523              		.loc 1 993 0
 2524 13dc 4FF00003 		mov	r3, #0
 2525 13e0 87F84E30 		strb	r3, [r7, #78]
 994:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2526              		.loc 1 994 0
 2527 13e4 4FF00103 		mov	r3, #1
 2528 13e8 87F84F30 		strb	r3, [r7, #79]
 995:../src/main.cpp **** 
 996:../src/main.cpp **** 	NVIC_Init(&nv);
 2529              		.loc 1 996 0
 2530 13ec 07F14C03 		add	r3, r7, #76
 2531 13f0 1846     		mov	r0, r3
 2532 13f2 FFF7FEFF 		bl	NVIC_Init
 997:../src/main.cpp **** 
 998:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 2533              		.loc 1 998 0
 2534 13f6 4FF48160 		mov	r0, #1032
 2535 13fa C4F20200 		movt	r0, 16386
 2536 13fe 4FF00201 		mov	r1, #2
 2537 1402 4FF00102 		mov	r2, #1
 2538 1406 FFF7FEFF 		bl	DMA_ITConfig
 999:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 2539              		.loc 1 999 0
 2540 140a 4FF48160 		mov	r0, #1032
 2541 140e C4F20200 		movt	r0, 16386
 2542 1412 4FF00101 		mov	r1, #1
 2543 1416 FFF7FEFF 		bl	DMA_Cmd
1000:../src/main.cpp **** 
1001:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 2544              		.loc 1 1001 0
 2545 141a 4FF48070 		mov	r0, #256
 2546 141e C5F20000 		movt	r0, 20480
 2547 1422 4FF00201 		mov	r1, #2
 2548 1426 FFF7FEFF 		bl	ADC_DMAConfig
1002:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 2549              		.loc 1 1002 0
 2550 142a 4FF48070 		mov	r0, #256
 2551 142e C5F20000 		movt	r0, 20480
 2552 1432 4FF00101 		mov	r1, #1
 2553 1436 FFF7FEFF 		bl	ADC_DMACmd
 2554              	.LBE13:
1003:../src/main.cpp **** }
 2555              		.loc 1 1003 0
 2556 143a 07F17007 		add	r7, r7, #112
 2557 143e BD46     		mov	sp, r7
 2558 1440 80BD     		pop	{r7, pc}
 2559              		.cfi_endproc
 2560              	.LFE123:
 2562 1442 00BF     		.align	2
 2563              		.global	_Z21battery_watchdog_initv
 2564              		.thumb
 2565              		.thumb_func
 2567              	_Z21battery_watchdog_initv:
 2568              	.LFB124:
1004:../src/main.cpp **** 
1005:../src/main.cpp **** void battery_watchdog_init(void)
1006:../src/main.cpp **** {
 2569              		.loc 1 1006 0
 2570              		.cfi_startproc
 2571              		@ args = 0, pretend = 0, frame = 72
 2572              		@ frame_needed = 1, uses_anonymous_args = 0
 2573 1444 80B5     		push	{r7, lr}
 2574              	.LCFI39:
 2575              		.cfi_def_cfa_offset 8
 2576              		.cfi_offset 7, -8
 2577              		.cfi_offset 14, -4
 2578 1446 92B0     		sub	sp, sp, #72
 2579              	.LCFI40:
 2580              		.cfi_def_cfa_offset 80
 2581 1448 00AF     		add	r7, sp, #0
 2582              	.LCFI41:
 2583              		.cfi_def_cfa_register 7
 2584              	.LBB14:
1007:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
1008:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
1009:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
1010:../src/main.cpp **** 	/* Configure the ADC clock */
1011:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 2585              		.loc 1 1011 0
 2586 144a 4FF45050 		mov	r0, #13312
 2587 144e C1F20000 		movt	r0, 4096
 2588 1452 FFF7FEFF 		bl	RCC_ADCCLKConfig
1012:../src/main.cpp **** 
1013:../src/main.cpp **** 	/* Enable ADC1 clock */
1014:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 2589              		.loc 1 1014 0
 2590 1456 4FF00050 		mov	r0, #536870912
 2591 145a 4FF00101 		mov	r1, #1
 2592 145e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
1015:../src/main.cpp **** 	/* ADC Channel configuration */
1016:../src/main.cpp **** 	/* GPIOC Periph clock enable */
1017:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 2593              		.loc 1 1017 0
 2594 1462 4FF41010 		mov	r0, #2359296
 2595 1466 4FF00101 		mov	r1, #1
 2596 146a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
1018:../src/main.cpp **** 
1019:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
1020:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2597              		.loc 1 1020 0
 2598 146e 07F12803 		add	r3, r7, #40
 2599 1472 1846     		mov	r0, r3
 2600 1474 FFF7FEFF 		bl	GPIO_StructInit
1021:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 2601              		.loc 1 1021 0
 2602 1478 42F20203 		movw	r3, #8194
 2603 147c BB62     		str	r3, [r7, #40]
1022:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2604              		.loc 1 1022 0
 2605 147e 4FF00303 		mov	r3, #3
 2606 1482 87F82C30 		strb	r3, [r7, #44]
1023:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2607              		.loc 1 1023 0
 2608 1486 4FF00003 		mov	r3, #0
 2609 148a 87F82F30 		strb	r3, [r7, #47]
1024:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2610              		.loc 1 1024 0
 2611 148e 07F12803 		add	r3, r7, #40
 2612 1492 4FF48060 		mov	r0, #1024
 2613 1496 C4F60000 		movt	r0, 18432
 2614 149a 1946     		mov	r1, r3
 2615 149c FFF7FEFF 		bl	GPIO_Init
1025:../src/main.cpp **** /*
1026:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
1027:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
1028:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
1029:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
1030:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
1031:../src/main.cpp **** */
1032:../src/main.cpp **** 
1033:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2616              		.loc 1 1033 0
 2617 14a0 07F10403 		add	r3, r7, #4
 2618 14a4 1846     		mov	r0, r3
 2619 14a6 FFF7FEFF 		bl	ADC_StructInit
1034:../src/main.cpp **** 
1035:../src/main.cpp **** 	/* Calibration procedure */
1036:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 2620              		.loc 1 1036 0
 2621 14aa 4FF48060 		mov	r0, #1024
 2622 14ae C5F20000 		movt	r0, 20480
 2623 14b2 4FF00101 		mov	r1, #1
 2624 14b6 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
1037:../src/main.cpp **** 
1038:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
1039:../src/main.cpp **** 	int foo;
1040:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2625              		.loc 1 1040 0
 2626 14ba 4FF00003 		mov	r3, #0
 2627 14be 7B64     		str	r3, [r7, #68]
 2628 14c0 07E0     		b	.L48
 2629              	.L49:
1041:../src/main.cpp **** 	{
1042:../src/main.cpp **** 	  ++foo;
 2630              		.loc 1 1042 0 discriminator 2
 2631 14c2 7B6C     		ldr	r3, [r7, #68]
 2632 14c4 03F10103 		add	r3, r3, #1
 2633 14c8 7B64     		str	r3, [r7, #68]
1040:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2634              		.loc 1 1040 0 discriminator 2
 2635 14ca 7B6C     		ldr	r3, [r7, #68]
 2636 14cc 03F10103 		add	r3, r3, #1
 2637 14d0 7B64     		str	r3, [r7, #68]
 2638              	.L48:
1040:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2639              		.loc 1 1040 0 is_stmt 0 discriminator 1
 2640 14d2 7A6C     		ldr	r2, [r7, #68]
 2641 14d4 47F6FF43 		movw	r3, #31999
 2642 14d8 9A42     		cmp	r2, r3
 2643 14da CCBF     		ite	gt
 2644 14dc 0023     		movgt	r3, #0
 2645 14de 0123     		movle	r3, #1
 2646 14e0 DBB2     		uxtb	r3, r3
 2647 14e2 002B     		cmp	r3, #0
 2648 14e4 EDD1     		bne	.L49
1043:../src/main.cpp **** 	}
1044:../src/main.cpp **** 
1045:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 2649              		.loc 1 1045 0 is_stmt 1
 2650 14e6 4FF48060 		mov	r0, #1024
 2651 14ea C5F20000 		movt	r0, 20480
 2652 14ee 4FF00001 		mov	r1, #0
 2653 14f2 FFF7FEFF 		bl	ADC_SelectCalibrationMode
1046:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 2654              		.loc 1 1046 0
 2655 14f6 4FF48060 		mov	r0, #1024
 2656 14fa C5F20000 		movt	r0, 20480
 2657 14fe FFF7FEFF 		bl	ADC_StartCalibration
1047:../src/main.cpp **** 
1048:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 2658              		.loc 1 1048 0
 2659 1502 00BF     		nop
 2660              	.L50:
 2661              		.loc 1 1048 0 is_stmt 0 discriminator 1
 2662 1504 4FF48060 		mov	r0, #1024
 2663 1508 C5F20000 		movt	r0, 20480
 2664 150c FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2665 1510 0346     		mov	r3, r0
 2666 1512 002B     		cmp	r3, #0
 2667 1514 0CBF     		ite	eq
 2668 1516 0023     		moveq	r3, #0
 2669 1518 0123     		movne	r3, #1
 2670 151a DBB2     		uxtb	r3, r3
 2671 151c 002B     		cmp	r3, #0
 2672 151e F1D1     		bne	.L50
1049:../src/main.cpp **** 
1050:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2673              		.loc 1 1050 0 is_stmt 1
 2674 1520 4FF00003 		mov	r3, #0
 2675 1524 3B63     		str	r3, [r7, #48]
1051:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 2676              		.loc 1 1051 0
 2677 1526 4FF44033 		mov	r3, #196608
 2678 152a 7B63     		str	r3, [r7, #52]
1052:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2679              		.loc 1 1052 0
 2680 152c 4FF00003 		mov	r3, #0
 2681 1530 BB63     		str	r3, [r7, #56]
1053:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2682              		.loc 1 1053 0
 2683 1532 4FF00003 		mov	r3, #0
 2684 1536 FB63     		str	r3, [r7, #60]
1054:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2685              		.loc 1 1054 0
 2686 1538 4FF00003 		mov	r3, #0
 2687 153c 87F84030 		strb	r3, [r7, #64]
1055:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 2688              		.loc 1 1055 0
 2689 1540 07F13003 		add	r3, r7, #48
 2690 1544 4FF48060 		mov	r0, #1024
 2691 1548 C5F20000 		movt	r0, 20480
 2692 154c 1946     		mov	r1, r3
 2693 154e FFF7FEFF 		bl	ADC_CommonInit
1056:../src/main.cpp **** 
1057:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2694              		.loc 1 1057 0
 2695 1552 4FF40053 		mov	r3, #8192
 2696 1556 7B60     		str	r3, [r7, #4]
1058:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2697              		.loc 1 1058 0
 2698 1558 4FF00003 		mov	r3, #0
 2699 155c BB60     		str	r3, [r7, #8]
1059:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2700              		.loc 1 1059 0
 2701 155e 4FF00003 		mov	r3, #0
 2702 1562 FB60     		str	r3, [r7, #12]
1060:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2703              		.loc 1 1060 0
 2704 1564 4FF00003 		mov	r3, #0
 2705 1568 3B61     		str	r3, [r7, #16]
1061:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2706              		.loc 1 1061 0
 2707 156a 4FF00003 		mov	r3, #0
 2708 156e 7B61     		str	r3, [r7, #20]
1062:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2709              		.loc 1 1062 0
 2710 1570 4FF00003 		mov	r3, #0
 2711 1574 BB61     		str	r3, [r7, #24]
1063:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2712              		.loc 1 1063 0
 2713 1576 4FF00003 		mov	r3, #0
 2714 157a FB61     		str	r3, [r7, #28]
1064:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2715              		.loc 1 1064 0
 2716 157c 4FF00203 		mov	r3, #2
 2717 1580 87F82030 		strb	r3, [r7, #32]
1065:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 2718              		.loc 1 1065 0
 2719 1584 07F10403 		add	r3, r7, #4
 2720 1588 4FF48060 		mov	r0, #1024
 2721 158c C5F20000 		movt	r0, 20480
 2722 1590 1946     		mov	r1, r3
 2723 1592 FFF7FEFF 		bl	ADC_Init
1066:../src/main.cpp **** 
1067:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
1068:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2724              		.loc 1 1068 0
 2725 1596 4FF48060 		mov	r0, #1024
 2726 159a C5F20000 		movt	r0, 20480
 2727 159e 4FF00101 		mov	r1, #1
 2728 15a2 4FF00102 		mov	r2, #1
 2729 15a6 4FF00703 		mov	r3, #7
 2730 15aa FFF7FEFF 		bl	ADC_RegularChannelConfig
1069:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2731              		.loc 1 1069 0
 2732 15ae 4FF48060 		mov	r0, #1024
 2733 15b2 C5F20000 		movt	r0, 20480
 2734 15b6 4FF00501 		mov	r1, #5
 2735 15ba 4FF00202 		mov	r2, #2
 2736 15be 4FF00703 		mov	r3, #7
 2737 15c2 FFF7FEFF 		bl	ADC_RegularChannelConfig
1070:../src/main.cpp **** 
1071:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 2738              		.loc 1 1071 0
 2739 15c6 4FF48060 		mov	r0, #1024
 2740 15ca C5F20000 		movt	r0, 20480
 2741 15ce 4FF00101 		mov	r1, #1
 2742 15d2 FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
1072:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 2743              		.loc 1 1072 0
 2744 15d6 4FF48060 		mov	r0, #1024
 2745 15da C5F20000 		movt	r0, 20480
 2746 15de 4FF00501 		mov	r1, #5
 2747 15e2 FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
1073:../src/main.cpp **** 
1074:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
1075:../src/main.cpp **** 
1076:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 2748              		.loc 1 1076 0
 2749 15e6 4FF48060 		mov	r0, #1024
 2750 15ea C5F20000 		movt	r0, 20480
 2751 15ee 4FF40061 		mov	r1, #2048
 2752 15f2 4FF00A02 		mov	r2, #10
 2753 15f6 FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
1077:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 2754              		.loc 1 1077 0
 2755 15fa 4FF48060 		mov	r0, #1024
 2756 15fe C5F20000 		movt	r0, 20480
 2757 1602 4FF08001 		mov	r1, #128
 2758 1606 4FF00002 		mov	r2, #0
 2759 160a FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
1078:../src/main.cpp **** 
1079:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 2760              		.loc 1 1079 0
 2761 160e 4FF48060 		mov	r0, #1024
 2762 1612 C5F20000 		movt	r0, 20480
 2763 1616 4FF44001 		mov	r1, #12582912
 2764 161a FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
1080:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
1081:../src/main.cpp **** 
1082:../src/main.cpp **** 	// Configure ADC3 global interrupt:
1083:../src/main.cpp **** 
1084:../src/main.cpp **** 	NVIC_InitTypeDef nv;
1085:../src/main.cpp **** 
1086:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 2765              		.loc 1 1086 0
 2766 161e 4FF02F03 		mov	r3, #47
 2767 1622 87F82430 		strb	r3, [r7, #36]
1087:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 2768              		.loc 1 1087 0
 2769 1626 4FF00003 		mov	r3, #0
 2770 162a 87F82530 		strb	r3, [r7, #37]
1088:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2771              		.loc 1 1088 0
 2772 162e 4FF00003 		mov	r3, #0
 2773 1632 87F82630 		strb	r3, [r7, #38]
1089:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2774              		.loc 1 1089 0
 2775 1636 4FF00103 		mov	r3, #1
 2776 163a 87F82730 		strb	r3, [r7, #39]
1090:../src/main.cpp **** 
1091:../src/main.cpp **** 	NVIC_Init(&nv);
 2777              		.loc 1 1091 0
 2778 163e 07F12403 		add	r3, r7, #36
 2779 1642 1846     		mov	r0, r3
 2780 1644 FFF7FEFF 		bl	NVIC_Init
1092:../src/main.cpp **** 
1093:../src/main.cpp **** 	// Enable ADC3's global interrupt:
1094:../src/main.cpp **** 
1095:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 2781              		.loc 1 1095 0
 2782 1648 4FF48060 		mov	r0, #1024
 2783 164c C5F20000 		movt	r0, 20480
 2784 1650 4FF4C071 		mov	r1, #384
 2785 1654 4FF00102 		mov	r2, #1
 2786 1658 FFF7FEFF 		bl	ADC_ITConfig
1096:../src/main.cpp **** 
1097:../src/main.cpp **** 	/* Enable ADC3 */
1098:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 2787              		.loc 1 1098 0
 2788 165c 4FF48060 		mov	r0, #1024
 2789 1660 C5F20000 		movt	r0, 20480
 2790 1664 4FF00101 		mov	r1, #1
 2791 1668 FFF7FEFF 		bl	ADC_Cmd
1099:../src/main.cpp **** 
1100:../src/main.cpp **** 	/* wait for ADRDY */
1101:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 2792              		.loc 1 1101 0
 2793 166c 00BF     		nop
 2794              	.L51:
 2795              		.loc 1 1101 0 is_stmt 0 discriminator 1
 2796 166e 4FF48060 		mov	r0, #1024
 2797 1672 C5F20000 		movt	r0, 20480
 2798 1676 4FF00101 		mov	r1, #1
 2799 167a FFF7FEFF 		bl	ADC_GetFlagStatus
 2800 167e 0346     		mov	r3, r0
 2801 1680 002B     		cmp	r3, #0
 2802 1682 14BF     		ite	ne
 2803 1684 0023     		movne	r3, #0
 2804 1686 0123     		moveq	r3, #1
 2805 1688 DBB2     		uxtb	r3, r3
 2806 168a 002B     		cmp	r3, #0
 2807 168c EFD1     		bne	.L51
1102:../src/main.cpp **** 
1103:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
1104:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 2808              		.loc 1 1104 0 is_stmt 1
 2809 168e 4FF48060 		mov	r0, #1024
 2810 1692 C5F20000 		movt	r0, 20480
 2811 1696 FFF7FEFF 		bl	ADC_StartConversion
 2812              	.LBE14:
1105:../src/main.cpp **** }
 2813              		.loc 1 1105 0
 2814 169a 07F14807 		add	r7, r7, #72
 2815 169e BD46     		mov	sp, r7
 2816 16a0 80BD     		pop	{r7, pc}
 2817              		.cfi_endproc
 2818              	.LFE124:
 2820 16a2 00BF     		.align	2
 2821              		.global	_Z9adc1_initv
 2822              		.thumb
 2823              		.thumb_func
 2825              	_Z9adc1_initv:
 2826              	.LFB125:
1106:../src/main.cpp **** 
1107:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
1108:../src/main.cpp ****  * @Args: Nothing
1109:../src/main.cpp ****  * @Return Val: Nothing
1110:../src/main.cpp ****  */
1111:../src/main.cpp **** 
1112:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
1113:../src/main.cpp **** {
 2827              		.loc 1 1113 0
 2828              		.cfi_startproc
 2829              		@ args = 0, pretend = 0, frame = 72
 2830              		@ frame_needed = 1, uses_anonymous_args = 0
 2831 16a4 80B5     		push	{r7, lr}
 2832              	.LCFI42:
 2833              		.cfi_def_cfa_offset 8
 2834              		.cfi_offset 7, -8
 2835              		.cfi_offset 14, -4
 2836 16a6 92B0     		sub	sp, sp, #72
 2837              	.LCFI43:
 2838              		.cfi_def_cfa_offset 80
 2839 16a8 00AF     		add	r7, sp, #0
 2840              	.LCFI44:
 2841              		.cfi_def_cfa_register 7
 2842              	.LBB15:
1114:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
1115:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
1116:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
1117:../src/main.cpp **** 	/* Configure the ADC clock */
1118:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2843              		.loc 1 1118 0
 2844 16aa 4FF48870 		mov	r0, #272
 2845 16ae FFF7FEFF 		bl	RCC_ADCCLKConfig
1119:../src/main.cpp **** 
1120:../src/main.cpp **** 	/* Enable ADC1 clock */
1121:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2846              		.loc 1 1121 0
 2847 16b2 4FF08050 		mov	r0, #268435456
 2848 16b6 4FF00101 		mov	r1, #1
 2849 16ba FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
1122:../src/main.cpp **** 	/* ADC Channel configuration */
1123:../src/main.cpp **** 	/* GPIOC Periph clock enable */
1124:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2850              		.loc 1 1124 0
 2851 16be 4FF40030 		mov	r0, #131072
 2852 16c2 4FF00101 		mov	r1, #1
 2853 16c6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
1125:../src/main.cpp **** 
1126:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
1127:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2854              		.loc 1 1127 0
 2855 16ca 4FF00403 		mov	r3, #4
 2856 16ce BB62     		str	r3, [r7, #40]
1128:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2857              		.loc 1 1128 0
 2858 16d0 4FF00303 		mov	r3, #3
 2859 16d4 87F82C30 		strb	r3, [r7, #44]
1129:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2860              		.loc 1 1129 0
 2861 16d8 4FF00003 		mov	r3, #0
 2862 16dc 87F82F30 		strb	r3, [r7, #47]
1130:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2863              		.loc 1 1130 0
 2864 16e0 07F12803 		add	r3, r7, #40
 2865 16e4 4FF09040 		mov	r0, #1207959552
 2866 16e8 1946     		mov	r1, r3
 2867 16ea FFF7FEFF 		bl	GPIO_Init
1131:../src/main.cpp **** 
1132:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2868              		.loc 1 1132 0
 2869 16ee 07F10403 		add	r3, r7, #4
 2870 16f2 1846     		mov	r0, r3
 2871 16f4 FFF7FEFF 		bl	ADC_StructInit
1133:../src/main.cpp **** 
1134:../src/main.cpp **** 	/* Calibration procedure */
1135:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2872              		.loc 1 1135 0
 2873 16f8 4FF0A040 		mov	r0, #1342177280
 2874 16fc 4FF00101 		mov	r1, #1
 2875 1700 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
1136:../src/main.cpp **** 
1137:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
1138:../src/main.cpp **** 	int foo;
1139:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2876              		.loc 1 1139 0
 2877 1704 4FF00003 		mov	r3, #0
 2878 1708 7B64     		str	r3, [r7, #68]
 2879 170a 07E0     		b	.L53
 2880              	.L54:
1140:../src/main.cpp **** 	{
1141:../src/main.cpp **** 	  ++foo;
 2881              		.loc 1 1141 0 discriminator 2
 2882 170c 7B6C     		ldr	r3, [r7, #68]
 2883 170e 03F10103 		add	r3, r3, #1
 2884 1712 7B64     		str	r3, [r7, #68]
1139:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2885              		.loc 1 1139 0 discriminator 2
 2886 1714 7B6C     		ldr	r3, [r7, #68]
 2887 1716 03F10103 		add	r3, r3, #1
 2888 171a 7B64     		str	r3, [r7, #68]
 2889              	.L53:
1139:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2890              		.loc 1 1139 0 is_stmt 0 discriminator 1
 2891 171c 7A6C     		ldr	r2, [r7, #68]
 2892 171e 47F6FF43 		movw	r3, #31999
 2893 1722 9A42     		cmp	r2, r3
 2894 1724 CCBF     		ite	gt
 2895 1726 0023     		movgt	r3, #0
 2896 1728 0123     		movle	r3, #1
 2897 172a DBB2     		uxtb	r3, r3
 2898 172c 002B     		cmp	r3, #0
 2899 172e EDD1     		bne	.L54
1142:../src/main.cpp **** 	}
1143:../src/main.cpp **** 
1144:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2900              		.loc 1 1144 0 is_stmt 1
 2901 1730 4FF0A040 		mov	r0, #1342177280
 2902 1734 4FF00001 		mov	r1, #0
 2903 1738 FFF7FEFF 		bl	ADC_SelectCalibrationMode
1145:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2904              		.loc 1 1145 0
 2905 173c 4FF0A040 		mov	r0, #1342177280
 2906 1740 FFF7FEFF 		bl	ADC_StartCalibration
1146:../src/main.cpp **** 
1147:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2907              		.loc 1 1147 0
 2908 1744 00BF     		nop
 2909              	.L55:
 2910              		.loc 1 1147 0 is_stmt 0 discriminator 1
 2911 1746 4FF0A040 		mov	r0, #1342177280
 2912 174a FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2913 174e 0346     		mov	r3, r0
 2914 1750 002B     		cmp	r3, #0
 2915 1752 0CBF     		ite	eq
 2916 1754 0023     		moveq	r3, #0
 2917 1756 0123     		movne	r3, #1
 2918 1758 DBB2     		uxtb	r3, r3
 2919 175a 002B     		cmp	r3, #0
 2920 175c F3D1     		bne	.L55
1148:../src/main.cpp **** 
1149:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2921              		.loc 1 1149 0 is_stmt 1
 2922 175e 4FF00003 		mov	r3, #0
 2923 1762 3B63     		str	r3, [r7, #48]
1150:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2924              		.loc 1 1150 0
 2925 1764 4FF00003 		mov	r3, #0
 2926 1768 7B63     		str	r3, [r7, #52]
1151:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2927              		.loc 1 1151 0
 2928 176a 4FF00003 		mov	r3, #0
 2929 176e BB63     		str	r3, [r7, #56]
1152:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2930              		.loc 1 1152 0
 2931 1770 4FF00003 		mov	r3, #0
 2932 1774 FB63     		str	r3, [r7, #60]
1153:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2933              		.loc 1 1153 0
 2934 1776 4FF00003 		mov	r3, #0
 2935 177a 87F84030 		strb	r3, [r7, #64]
1154:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2936              		.loc 1 1154 0
 2937 177e 07F13003 		add	r3, r7, #48
 2938 1782 4FF0A040 		mov	r0, #1342177280
 2939 1786 1946     		mov	r1, r3
 2940 1788 FFF7FEFF 		bl	ADC_CommonInit
1155:../src/main.cpp **** 
1156:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2941              		.loc 1 1156 0
 2942 178c 4FF40053 		mov	r3, #8192
 2943 1790 7B60     		str	r3, [r7, #4]
1157:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2944              		.loc 1 1157 0
 2945 1792 4FF00003 		mov	r3, #0
 2946 1796 BB60     		str	r3, [r7, #8]
1158:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2947              		.loc 1 1158 0
 2948 1798 4FF00003 		mov	r3, #0
 2949 179c FB60     		str	r3, [r7, #12]
1159:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2950              		.loc 1 1159 0
 2951 179e 4FF00003 		mov	r3, #0
 2952 17a2 3B61     		str	r3, [r7, #16]
1160:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2953              		.loc 1 1160 0
 2954 17a4 4FF00003 		mov	r3, #0
 2955 17a8 7B61     		str	r3, [r7, #20]
1161:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2956              		.loc 1 1161 0
 2957 17aa 4FF00003 		mov	r3, #0
 2958 17ae BB61     		str	r3, [r7, #24]
1162:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2959              		.loc 1 1162 0
 2960 17b0 4FF00003 		mov	r3, #0
 2961 17b4 FB61     		str	r3, [r7, #28]
1163:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2962              		.loc 1 1163 0
 2963 17b6 4FF00103 		mov	r3, #1
 2964 17ba 87F82030 		strb	r3, [r7, #32]
1164:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2965              		.loc 1 1164 0
 2966 17be 07F10403 		add	r3, r7, #4
 2967 17c2 4FF0A040 		mov	r0, #1342177280
 2968 17c6 1946     		mov	r1, r3
 2969 17c8 FFF7FEFF 		bl	ADC_Init
1165:../src/main.cpp **** 
1166:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
1167:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2970              		.loc 1 1167 0
 2971 17cc 4FF0A040 		mov	r0, #1342177280
 2972 17d0 4FF00301 		mov	r1, #3
 2973 17d4 4FF00102 		mov	r2, #1
 2974 17d8 4FF00703 		mov	r3, #7
 2975 17dc FFF7FEFF 		bl	ADC_RegularChannelConfig
1168:../src/main.cpp **** 
1169:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
1170:../src/main.cpp **** 
1171:../src/main.cpp **** 	NVIC_InitTypeDef nv;
1172:../src/main.cpp **** 
1173:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2976              		.loc 1 1173 0
 2977 17e0 4FF01203 		mov	r3, #18
 2978 17e4 87F82430 		strb	r3, [r7, #36]
1174:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2979              		.loc 1 1174 0
 2980 17e8 4FF00203 		mov	r3, #2
 2981 17ec 87F82530 		strb	r3, [r7, #37]
1175:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2982              		.loc 1 1175 0
 2983 17f0 4FF00003 		mov	r3, #0
 2984 17f4 87F82630 		strb	r3, [r7, #38]
1176:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2985              		.loc 1 1176 0
 2986 17f8 4FF00103 		mov	r3, #1
 2987 17fc 87F82730 		strb	r3, [r7, #39]
1177:../src/main.cpp **** 
1178:../src/main.cpp **** 	NVIC_Init(&nv);
 2988              		.loc 1 1178 0
 2989 1800 07F12403 		add	r3, r7, #36
 2990 1804 1846     		mov	r0, r3
 2991 1806 FFF7FEFF 		bl	NVIC_Init
1179:../src/main.cpp **** 
1180:../src/main.cpp **** 	// Enable ADC1's global interrupt:
1181:../src/main.cpp **** 
1182:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2992              		.loc 1 1182 0
 2993 180a 4FF0A040 		mov	r0, #1342177280
 2994 180e 4FF00401 		mov	r1, #4
 2995 1812 4FF00102 		mov	r2, #1
 2996 1816 FFF7FEFF 		bl	ADC_ITConfig
1183:../src/main.cpp **** 
1184:../src/main.cpp **** 	/* Enable ADC1 */
1185:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2997              		.loc 1 1185 0
 2998 181a 4FF0A040 		mov	r0, #1342177280
 2999 181e 4FF00101 		mov	r1, #1
 3000 1822 FFF7FEFF 		bl	ADC_Cmd
1186:../src/main.cpp **** 
1187:../src/main.cpp **** 	/* wait for ADRDY */
1188:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 3001              		.loc 1 1188 0
 3002 1826 00BF     		nop
 3003              	.L56:
 3004              		.loc 1 1188 0 is_stmt 0 discriminator 1
 3005 1828 4FF0A040 		mov	r0, #1342177280
 3006 182c 4FF00101 		mov	r1, #1
 3007 1830 FFF7FEFF 		bl	ADC_GetFlagStatus
 3008 1834 0346     		mov	r3, r0
 3009 1836 002B     		cmp	r3, #0
 3010 1838 14BF     		ite	ne
 3011 183a 0023     		movne	r3, #0
 3012 183c 0123     		moveq	r3, #1
 3013 183e DBB2     		uxtb	r3, r3
 3014 1840 002B     		cmp	r3, #0
 3015 1842 F1D1     		bne	.L56
1189:../src/main.cpp **** 
1190:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
1191:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 3016              		.loc 1 1191 0 is_stmt 1
 3017 1844 4FF0A040 		mov	r0, #1342177280
 3018 1848 FFF7FEFF 		bl	ADC_StartConversion
 3019              	.LBE15:
1192:../src/main.cpp **** }
 3020              		.loc 1 1192 0
 3021 184c 07F14807 		add	r7, r7, #72
 3022 1850 BD46     		mov	sp, r7
 3023 1852 80BD     		pop	{r7, pc}
 3024              		.cfi_endproc
 3025              	.LFE125:
 3027              	.Letext0:
 3028              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 3029              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 3030              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 3031              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 3032              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 3033              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 3034              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 3035              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 3036              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 3037              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 3038              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/cc3BOh6a.s:25     .bss:00000000 led_iter
     /tmp/cc3BOh6a.s:22     .bss:00000000 $d
     /tmp/cc3BOh6a.s:32     .data:00000000 led_matrix
     /tmp/cc3BOh6a.s:29     .data:00000000 $d
     /tmp/cc3BOh6a.s:45     .bss:00000004 left_enc
     /tmp/cc3BOh6a.s:51     .bss:0000002c right_enc
     /tmp/cc3BOh6a.s:57     .bss:00000054 gyro_angle_x
     /tmp/cc3BOh6a.s:63     .bss:00000058 gyro_bias_x
     /tmp/cc3BOh6a.s:69     .bss:0000005c adcval
     /tmp/cc3BOh6a.s:75     .bss:00000060 adcData
     /tmp/cc3BOh6a.s:81     .bss:00000068 new_data
     /tmp/cc3BOh6a.s:87     .bss:0000006c adc2_data
     /tmp/cc3BOh6a.s:92     .bss:0000007c adc2_new_data
     /tmp/cc3BOh6a.s:97     .bss:0000007d adc3_awd1
     /tmp/cc3BOh6a.s:102    .bss:0000007e adc3_awd2
     /tmp/cc3BOh6a.s:108    .bss:00000080 count
     /tmp/cc3BOh6a.s:114    .bss:00000084 stage
     /tmp/cc3BOh6a.s:120    .bss:00000088 drive_cmd
     /tmp/cc3BOh6a.s:126    .bss:0000008c err
     /tmp/cc3BOh6a.s:132    .bss:00000090 last_err
     /tmp/cc3BOh6a.s:138    .bss:00000094 diff_err
     /tmp/cc3BOh6a.s:144    .bss:00000098 rt
     /tmp/cc3BOh6a.s:150    .bss:0000009c d_front
     /tmp/cc3BOh6a.s:156    .bss:000000a0 integral
     /tmp/cc3BOh6a.s:162    .bss:000000a4 left
     /tmp/cc3BOh6a.s:168    .bss:000000a8 right
     /tmp/cc3BOh6a.s:174    .bss:000000ac state
     /tmp/cc3BOh6a.s:180    .bss:000000b0 match_time_counter
     /tmp/cc3BOh6a.s:186    .bss:000000b4 t_firefight_start
     /tmp/cc3BOh6a.s:192    .bss:000000b8 t_homing_start
     /tmp/cc3BOh6a.s:198    .bss:000000bc leds_on
     /tmp/cc3BOh6a.s:201    .text:00000000 $t
     /tmp/cc3BOh6a.s:206    .text:00000000 main
     /tmp/cc3BOh6a.s:1274   .text:0000095c _Z15brake_pins_initv
     /tmp/cc3BOh6a.s:1931   .text:00000e8c _Z13adc1_init_DMAv
     /tmp/cc3BOh6a.s:2215   .text:00001100 _Z13adc2_init_DMAv
     /tmp/cc3BOh6a.s:1346   .text:000009d4 _Z13ping_pin_initv
     /tmp/cc3BOh6a.s:1431   .text:00000a64 _Z20timer2_timebase_initv
     /tmp/cc3BOh6a.s:1117   .text:00000860 _Z19imu_update_ISR_initv
     /tmp/cc3BOh6a.s:1490   .text:00000ab8 _Z9comp_initv
     /tmp/cc3BOh6a.s:414    .text:000001c4 _Z24trinity2013_waitForStartv
     /tmp/cc3BOh6a.s:499    .text:00000250 _Z23trinity2016_sound_startv
     /tmp/cc3BOh6a.s:948    .text:000006c0 $d
     /tmp/cc3BOh6a.s:957    .text:000006d8 $t
     /tmp/cc3BOh6a.s:962    .text:000006d8 _Z11IR_distancei
     /tmp/cc3BOh6a.s:1091   .text:00000818 $d
     /tmp/cc3BOh6a.s:1112   .text:00000860 $t
     /tmp/cc3BOh6a.s:1840   .text:00000e04 _Z14calc_gyro_biasv
     /tmp/cc3BOh6a.s:1233   .rodata:00000000 $d
     /tmp/cc3BOh6a.s:1234   .rodata:00000000 .LC0
     /tmp/cc3BOh6a.s:1243   .text:00000944 L3GD20_TIMEOUT_UserCallback
     /tmp/cc3BOh6a.s:1922   .text:00000e88 $d
     /tmp/cc3BOh6a.s:1926   .text:00000e8c $t
     /tmp/cc3BOh6a.s:2567   .text:00001444 _Z21battery_watchdog_initv
     /tmp/cc3BOh6a.s:2825   .text:000016a4 _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.50a79f075d1434c9a8bd8ee500f78677
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.40d529e09e59830fa5f5640200a489ab
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z19LED_MATRIX_ISR_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z13pwm_out3_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
RCC_AHBPeriphClockCmd
GPIO_DeInit
GPIO_Init
GPIO_ReadInputDataBit
__aeabi_f2d
__aeabi_d2f
RCC_ADCCLKConfig
GPIO_StructInit
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
TIM_SetCounter
TIM_Cmd
TIM_GetCounter
ADC_GetConversionValue
sqrt
ADC_DeInit
GPIO_Write
pow
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
printf
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
