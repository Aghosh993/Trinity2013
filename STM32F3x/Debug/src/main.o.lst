   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.cpp"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	led_iter
  21              		.bss
  22              		.align	2
  25              	led_iter:
  26 0000 00000000 		.space	4
  27              		.global	led_matrix
  28              		.data
  29              		.align	2
  32              	led_matrix:
  33 0000 00020000 		.word	512
  34 0004 00010000 		.word	256
  35 0008 00800000 		.word	32768
  36 000c 00400000 		.word	16384
  37 0010 00200000 		.word	8192
  38 0014 00100000 		.word	4096
  39 0018 00080000 		.word	2048
  40 001c 00040000 		.word	1024
  41              		.global	left_enc
  42              		.bss
  43              		.align	2
  46              	left_enc:
  47 0004 00000000 		.space	40
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.global	right_enc
  49              		.align	2
  52              	right_enc:
  53 002c 00000000 		.space	40
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.global	gyro_angle_x
  55              		.align	2
  58              	gyro_angle_x:
  59 0054 00000000 		.space	4
  60              		.global	gyro_bias_x
  61              		.align	2
  64              	gyro_bias_x:
  65 0058 00000000 		.space	4
  66              		.global	adcval
  67              		.align	2
  70              	adcval:
  71 005c 00000000 		.space	4
  72              		.global	adcData
  73              		.align	2
  76              	adcData:
  77 0060 00000000 		.space	4
  78              		.global	new_data
  79              		.align	2
  82              	new_data:
  83 0064 00000000 		.space	4
  84              		.section	.rodata
  85              		.align	2
  86              	.LC0:
  87 0000 506F7369 		.ascii	"Position\000"
  87      74696F6E 
  87      00
  88 0009 000000   		.align	2
  89              	.LC1:
  90 000c 56656C6F 		.ascii	"Velocity\000"
  90      63697479 
  90      00
  91 0015 000000   		.align	2
  92              	.LC2:
  93 0018 4F70656E 		.ascii	"Open\000"
  93      00
  94 001d 000000   		.align	2
  95              	.LC3:
  96 0020 41444331 		.ascii	"ADC1: %d\012\015\000"
  96      3A202564 
  96      0A0D00
  97              		.text
  98              		.align	2
  99              		.global	main
 100              		.thumb
 101              		.thumb_func
 103              	main:
 104              	.LFB111:
 105              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7)
  18:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  19:../src/main.cpp ****  *
  20:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  21:../src/main.cpp ****  *
  22:../src/main.cpp ****  * TIM6: LED matrix ISR
  23:../src/main.cpp ****  * TIM7: Encoder update ISR
  24:../src/main.cpp ****  * TIM17: IMU update ISR
  25:../src/main.cpp ****  *
  26:../src/main.cpp ****  * Other pins/resources used:
  27:../src/main.cpp ****  *
  28:../src/main.cpp ****  * Analog: 	Channel 3 (PA2)
  29:../src/main.cpp ****  * 			Channel 4 (PA3)
  30:../src/main.cpp ****  * 			Channel 5 (PF4)
  31:../src/main.cpp ****  */
  32:../src/main.cpp **** 
  33:../src/main.cpp **** volatile int led_iter;
  34:../src/main.cpp **** volatile int led_matrix[8] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_14, GPIO_Pin_13,
  35:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  36:../src/main.cpp **** 
  37:../src/main.cpp **** void imu_update_ISR_init(void);
  38:../src/main.cpp **** int16_t calc_gyro_bias(void);
  39:../src/main.cpp **** 
  40:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  41:../src/main.cpp **** 
  42:../src/main.cpp **** void adc1_init_other(void);
  43:../src/main.cpp **** void adc1_init(void);
  44:../src/main.cpp **** void adc1_dma_init(void);
  45:../src/main.cpp **** 
  46:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  47:../src/main.cpp **** 
  48:../src/main.cpp **** encoderState left_enc, right_enc;
  49:../src/main.cpp **** 
  50:../src/main.cpp **** volatile float gyro_angle_x;
  51:../src/main.cpp **** int gyro_bias_x, adcval;
  52:../src/main.cpp **** 
  53:../src/main.cpp **** //__IO uint16_t adcData[3];
  54:../src/main.cpp **** __IO int adcData;
  55:../src/main.cpp **** int new_data;
  56:../src/main.cpp **** 
  57:../src/main.cpp **** // Initialize all encoder data structures to zero:
  58:../src/main.cpp **** 
  59:../src/main.cpp **** int main(void)
  60:../src/main.cpp **** {
 106              		.loc 1 60 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 8
 109              		@ frame_needed = 1, uses_anonymous_args = 0
 110 0000 80B5     		push	{r7, lr}
 111              	.LCFI0:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 7, -8
 114              		.cfi_offset 14, -4
 115 0002 82B0     		sub	sp, sp, #8
 116              	.LCFI1:
 117              		.cfi_def_cfa_offset 16
 118 0004 00AF     		add	r7, sp, #0
 119              	.LCFI2:
 120              		.cfi_def_cfa_register 7
 121              	.LBB2:
  61:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 122              		.loc 1 61 0
 123 0006 FFF7FEFF 		bl	SystemInit
  62:../src/main.cpp **** 
  63:../src/main.cpp **** 	UART1_init(); // Debug bridge
 124              		.loc 1 63 0
 125 000a FFF7FEFF 		bl	_Z10UART1_initv
  64:../src/main.cpp **** 
  65:../src/main.cpp **** 	// Initialize global encoder data structure for left and right encoders:
  66:../src/main.cpp **** 
  67:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 126              		.loc 1 67 0
 127 000e 40F20000 		movw	r0, #:lower16:left_enc
 128 0012 C0F20000 		movt	r0, #:upper16:left_enc
 129 0016 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
  68:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 130              		.loc 1 68 0
 131 001a 40F20000 		movw	r0, #:lower16:right_enc
 132 001e C0F20000 		movt	r0, #:upper16:right_enc
 133 0022 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
  69:../src/main.cpp **** 
  70:../src/main.cpp **** 	right_enc.position_target = 8400;
 134              		.loc 1 70 0
 135 0026 40F20003 		movw	r3, #:lower16:right_enc
 136 002a C0F20003 		movt	r3, #:upper16:right_enc
 137 002e 42F2D002 		movw	r2, #8400
 138 0032 DA60     		str	r2, [r3, #12]
  71:../src/main.cpp **** //	right_enc.speed_target = 8400;
  72:../src/main.cpp **** 
  73:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
  74:../src/main.cpp **** 
  75:../src/main.cpp **** 	pwm_out1_init(5000);
 139              		.loc 1 75 0
 140 0034 41F28830 		movw	r0, #5000
 141 0038 FFF7FEFF 		bl	_Z13pwm_out1_initt
  76:../src/main.cpp **** 	pwm_out2_init(5000);
 142              		.loc 1 76 0
 143 003c 41F28830 		movw	r0, #5000
 144 0040 FFF7FEFF 		bl	_Z13pwm_out2_initt
  77:../src/main.cpp **** 
  78:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
  79:../src/main.cpp **** 
  80:../src/main.cpp **** 	TIM8_init_encoder();
 145              		.loc 1 80 0
 146 0044 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
  81:../src/main.cpp **** 	TIM2_init_encoder();
 147              		.loc 1 81 0
 148 0048 FFF7FEFF 		bl	_Z17TIM2_init_encoderv
  82:../src/main.cpp **** 
  83:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
  84:../src/main.cpp **** 
  85:../src/main.cpp **** 	new_data = 0;
 149              		.loc 1 85 0
 150 004c 40F20003 		movw	r3, #:lower16:new_data
 151 0050 C0F20003 		movt	r3, #:upper16:new_data
 152 0054 4FF00002 		mov	r2, #0
 153 0058 1A60     		str	r2, [r3, #0]
  86:../src/main.cpp **** 	adc1_init_other();
 154              		.loc 1 86 0
 155 005a FFF7FEFF 		bl	_Z15adc1_init_otherv
  87:../src/main.cpp **** //	adc1_init();
  88:../src/main.cpp **** //	adc1_dma_init();
  89:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 156              		.loc 1 89 0
 157 005e FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
  90:../src/main.cpp **** 	imu_update_ISR_init(); 		//IMU (gyro/acclerometer/magnetometer ISR)
 158              		.loc 1 90 0
 159 0062 FFF7FEFF 		bl	_Z19imu_update_ISR_initv
  91:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 160              		.loc 1 91 0
 161 0066 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
  92:../src/main.cpp **** 
  93:../src/main.cpp **** 	adcval = 0;
 162              		.loc 1 93 0
 163 006a 40F20003 		movw	r3, #:lower16:adcval
 164 006e C0F20003 		movt	r3, #:upper16:adcval
 165 0072 4FF00002 		mov	r2, #0
 166 0076 1A60     		str	r2, [r3, #0]
  94:../src/main.cpp **** //	float mtr_out = 0;
  95:../src/main.cpp **** 	char *mode;
  96:../src/main.cpp **** 
  97:../src/main.cpp **** 	right_enc.m = MODE_POSITION;
 167              		.loc 1 97 0
 168 0078 40F20003 		movw	r3, #:lower16:right_enc
 169 007c C0F20003 		movt	r3, #:upper16:right_enc
 170 0080 4FF00102 		mov	r2, #1
 171 0084 83F82420 		strb	r2, [r3, #36]
 172              	.L7:
  98:../src/main.cpp **** //	right_enc.m = MODE_SPEED;
  99:../src/main.cpp **** 
 100:../src/main.cpp **** 	while(true)
 101:../src/main.cpp **** 	{
 102:../src/main.cpp **** //		adcval = ADC_GetConversionValue(ADC1);
 103:../src/main.cpp **** //		pwm1_output((float)adcval/(float)4096); // Read potentiometer on PA2 and output its value on
 104:../src/main.cpp **** 												// PWM channel #1
 105:../src/main.cpp **** 		pwm2_output(0.5f);						// Fixed 1 kHz, 50% duty output on PWM output #2
 173              		.loc 1 105 0
 174 0088 B6EE000A 		fconsts	s0, #96
 175 008c FFF7FEFF 		bl	_Z11pwm2_outputf
 106:../src/main.cpp **** //		mtr_out = (float)adcval/(float)4096;
 107:../src/main.cpp **** //		mtr_out = (adcval >= 4013) ? 0.97 : mtr_out;
 108:../src/main.cpp **** //		pwm1_output(mtr_out);
 109:../src/main.cpp **** //		right_enc.position_target = 15000;
 110:../src/main.cpp **** 
 111:../src/main.cpp **** 		// Debug Statements:
 112:../src/main.cpp **** 
 113:../src/main.cpp **** //		printf("%d %d %d\n\r", adcData[0], adcData[1], adcval);
 114:../src/main.cpp **** //		printf("%d\n\r", adcval);
 115:../src/main.cpp **** //		if(right_enc.m == MODE_OPENLOOP)
 116:../src/main.cpp **** //		{
 117:../src/main.cpp **** //			pwm1_output(0.50f);
 118:../src/main.cpp **** //		}
 119:../src/main.cpp **** 
 120:../src/main.cpp **** 		mode = (right_enc.m == MODE_OPENLOOP) ? (char *)"Open" : ((right_enc.m == MODE_POSITION) ? (char 
 176              		.loc 1 120 0
 177 0090 40F20003 		movw	r3, #:lower16:right_enc
 178 0094 C0F20003 		movt	r3, #:upper16:right_enc
 179 0098 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 180 009c 002B     		cmp	r3, #0
 181 009e 11D0     		beq	.L2
 182              		.loc 1 120 0 is_stmt 0 discriminator 1
 183 00a0 40F20003 		movw	r3, #:lower16:right_enc
 184 00a4 C0F20003 		movt	r3, #:upper16:right_enc
 185 00a8 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 186 00ac 012B     		cmp	r3, #1
 187 00ae 04D1     		bne	.L3
 188              		.loc 1 120 0 discriminator 3
 189 00b0 40F20003 		movw	r3, #:lower16:.LC0
 190 00b4 C0F20003 		movt	r3, #:upper16:.LC0
 191 00b8 03E0     		b	.L4
 192              	.L3:
 193              		.loc 1 120 0 discriminator 4
 194 00ba 40F20003 		movw	r3, #:lower16:.LC1
 195 00be C0F20003 		movt	r3, #:upper16:.LC1
 196              	.L4:
 197 00c2 03E0     		b	.L5
 198              	.L2:
 199              		.loc 1 120 0 discriminator 2
 200 00c4 40F20003 		movw	r3, #:lower16:.LC2
 201 00c8 C0F20003 		movt	r3, #:upper16:.LC2
 202              	.L5:
 203              		.loc 1 120 0 discriminator 6
 204 00cc 7B60     		str	r3, [r7, #4]
 205              	.L6:
 121:../src/main.cpp **** 	//	pwm1_output(0.50f);
 122:../src/main.cpp **** //		printf("Left: %d | Right: %d | Mode: %s\n\r", left_enc.position, right_enc.position, mode);
 123:../src/main.cpp **** 
 124:../src/main.cpp **** //		printf("Bias_x: %d | Theta_x: %5.2f | Left: %d | Right: %d\n\r", gyro_bias_x, gyro_angle_x, lef
 125:../src/main.cpp **** //		printf("ADC Value on Channel 3: %d || Theta_x: %5.2f\n\r", adcval, gyro_angle_x);
 126:../src/main.cpp **** //		while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) != SET);
 127:../src/main.cpp **** //		DMA_ClearFlag(DMA1_FLAG_GL1 | DMA1_FLAG_TC1);
 128:../src/main.cpp **** 		while(new_data==0);
 206              		.loc 1 128 0 is_stmt 1 discriminator 1
 207 00ce 40F20003 		movw	r3, #:lower16:new_data
 208 00d2 C0F20003 		movt	r3, #:upper16:new_data
 209 00d6 1B68     		ldr	r3, [r3, #0]
 210 00d8 002B     		cmp	r3, #0
 211 00da 14BF     		ite	ne
 212 00dc 0023     		movne	r3, #0
 213 00de 0123     		moveq	r3, #1
 214 00e0 DBB2     		uxtb	r3, r3
 215 00e2 002B     		cmp	r3, #0
 216 00e4 F3D1     		bne	.L6
 129:../src/main.cpp **** 		printf("ADC1: %d\n\r", adcData);//adcData, (uint32_t)&(ADC1->DR));//, adcData[1]);
 217              		.loc 1 129 0
 218 00e6 40F20003 		movw	r3, #:lower16:adcData
 219 00ea C0F20003 		movt	r3, #:upper16:adcData
 220 00ee 1B68     		ldr	r3, [r3, #0]
 221 00f0 40F20000 		movw	r0, #:lower16:.LC3
 222 00f4 C0F20000 		movt	r0, #:upper16:.LC3
 223 00f8 1946     		mov	r1, r3
 224 00fa FFF7FEFF 		bl	printf
 130:../src/main.cpp **** 		new_data = 0;
 225              		.loc 1 130 0
 226 00fe 40F20003 		movw	r3, #:lower16:new_data
 227 0102 C0F20003 		movt	r3, #:upper16:new_data
 228 0106 4FF00002 		mov	r2, #0
 229 010a 1A60     		str	r2, [r3, #0]
 100:../src/main.cpp **** 	while(true)
 230              		.loc 1 100 0
 231 010c BCE7     		b	.L7
 232              	.LBE2:
 233              		.cfi_endproc
 234              	.LFE111:
 236 010e 00BF     		.align	2
 237              		.global	_Z19imu_update_ISR_initv
 238              		.thumb
 239              		.thumb_func
 241              	_Z19imu_update_ISR_initv:
 242              	.LFB112:
 131:../src/main.cpp **** 
 132:../src/main.cpp **** //		printf("Hello World!!\n\r");
 133:../src/main.cpp **** 	}
 134:../src/main.cpp **** 	return 0; // We should never manage to get here...
 135:../src/main.cpp **** }
 136:../src/main.cpp **** 
 137:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 138:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 139:../src/main.cpp **** 
 140:../src/main.cpp **** void imu_update_ISR_init(void)
 141:../src/main.cpp **** {
 243              		.loc 1 141 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 24
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247 0110 80B5     		push	{r7, lr}
 248              	.LCFI3:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 7, -8
 251              		.cfi_offset 14, -4
 252 0112 86B0     		sub	sp, sp, #24
 253              	.LCFI4:
 254              		.cfi_def_cfa_offset 32
 255 0114 00AF     		add	r7, sp, #0
 256              	.LCFI5:
 257              		.cfi_def_cfa_register 7
 258              	.LBB3:
 142:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 143:../src/main.cpp **** 
 144:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 259              		.loc 1 144 0
 260 0116 4FF00703 		mov	r3, #7
 261 011a BB74     		strb	r3, [r7, #18]
 145:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 262              		.loc 1 145 0
 263 011c 4FF00003 		mov	r3, #0
 264 0120 FB74     		strb	r3, [r7, #19]
 146:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 265              		.loc 1 146 0
 266 0122 4FF00003 		mov	r3, #0
 267 0126 3B75     		strb	r3, [r7, #20]
 147:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 268              		.loc 1 147 0
 269 0128 4FF00003 		mov	r3, #0
 270 012c 7B75     		strb	r3, [r7, #21]
 148:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 271              		.loc 1 148 0
 272 012e 4FF00003 		mov	r3, #0
 273 0132 BB75     		strb	r3, [r7, #22]
 149:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 274              		.loc 1 149 0
 275 0134 4FF00003 		mov	r3, #0
 276 0138 7B74     		strb	r3, [r7, #17]
 150:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 277              		.loc 1 150 0
 278 013a 4FF00803 		mov	r3, #8
 279 013e 3B74     		strb	r3, [r7, #16]
 151:../src/main.cpp **** 
 152:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 280              		.loc 1 152 0
 281 0140 07F11003 		add	r3, r7, #16
 282 0144 1846     		mov	r0, r3
 283 0146 FFF7FEFF 		bl	L3GD20_Init
 153:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 284              		.loc 1 153 0
 285 014a FFF7FEFF 		bl	_Z14calc_gyro_biasv
 286 014e 0346     		mov	r3, r0
 287 0150 1A46     		mov	r2, r3
 288 0152 40F20003 		movw	r3, #:lower16:gyro_bias_x
 289 0156 C0F20003 		movt	r3, #:upper16:gyro_bias_x
 290 015a 1A60     		str	r2, [r3, #0]
 154:../src/main.cpp **** 
 155:../src/main.cpp **** 	gyro_angle_x = 0;
 291              		.loc 1 155 0
 292 015c 40F20003 		movw	r3, #:lower16:gyro_angle_x
 293 0160 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 294 0164 4FF00002 		mov	r2, #0
 295 0168 1A60     		str	r2, [r3, #0]	@ float
 156:../src/main.cpp **** 
 157:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 158:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 159:../src/main.cpp **** 
 160:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;//TIM3_IRQn;	//TIM2_IRQn;
 296              		.loc 1 160 0
 297 016a 4FF01A03 		mov	r3, #26
 298 016e 3B73     		strb	r3, [r7, #12]
 161:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 299              		.loc 1 161 0
 300 0170 4FF00003 		mov	r3, #0
 301 0174 7B73     		strb	r3, [r7, #13]
 162:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 302              		.loc 1 162 0
 303 0176 4FF00003 		mov	r3, #0
 304 017a BB73     		strb	r3, [r7, #14]
 163:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 305              		.loc 1 163 0
 306 017c 4FF00103 		mov	r3, #1
 307 0180 FB73     		strb	r3, [r7, #15]
 164:../src/main.cpp **** 
 165:../src/main.cpp **** 	NVIC_Init(&nv);
 308              		.loc 1 165 0
 309 0182 07F10C03 		add	r3, r7, #12
 310 0186 1846     		mov	r0, r3
 311 0188 FFF7FEFF 		bl	NVIC_Init
 166:../src/main.cpp **** 
 167:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE); //TIM3 on APB1
 312              		.loc 1 167 0
 313 018c 4FF48020 		mov	r0, #262144
 314 0190 4FF00101 		mov	r1, #1
 315 0194 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 168:../src/main.cpp **** 
 169:../src/main.cpp **** 	/*
 170:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 171:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 172:../src/main.cpp **** 	 * 	  Period -> ARR
 173:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 174:../src/main.cpp **** 	 */
 175:../src/main.cpp **** 
 176:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 316              		.loc 1 176 0
 317 0198 4FF0F903 		mov	r3, #249
 318 019c 7B60     		str	r3, [r7, #4]
 177:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 319              		.loc 1 177 0
 320 019e 41F61F43 		movw	r3, #7199
 321 01a2 3B80     		strh	r3, [r7, #0]	@ movhi
 178:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 322              		.loc 1 178 0
 323 01a4 4FF00003 		mov	r3, #0
 324 01a8 BB72     		strb	r3, [r7, #10]
 179:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 325              		.loc 1 179 0
 326 01aa 4FF00003 		mov	r3, #0
 327 01ae 3B81     		strh	r3, [r7, #8]	@ movhi
 180:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 328              		.loc 1 180 0
 329 01b0 4FF00003 		mov	r3, #0
 330 01b4 7B80     		strh	r3, [r7, #2]	@ movhi
 181:../src/main.cpp **** 
 182:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 331              		.loc 1 182 0
 332 01b6 3B46     		mov	r3, r7
 333 01b8 4FF49040 		mov	r0, #18432
 334 01bc C4F20100 		movt	r0, 16385
 335 01c0 1946     		mov	r1, r3
 336 01c2 FFF7FEFF 		bl	TIM_TimeBaseInit
 183:../src/main.cpp **** 
 184:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 337              		.loc 1 184 0
 338 01c6 4FF49040 		mov	r0, #18432
 339 01ca C4F20100 		movt	r0, 16385
 340 01ce 4FF00101 		mov	r1, #1
 341 01d2 4FF00102 		mov	r2, #1
 342 01d6 FFF7FEFF 		bl	TIM_ITConfig
 185:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 343              		.loc 1 185 0
 344 01da 4FF49040 		mov	r0, #18432
 345 01de C4F20100 		movt	r0, 16385
 346 01e2 4FF00101 		mov	r1, #1
 347 01e6 FFF7FEFF 		bl	TIM_Cmd
 348              	.LBE3:
 186:../src/main.cpp **** }
 349              		.loc 1 186 0
 350 01ea 07F11807 		add	r7, r7, #24
 351 01ee BD46     		mov	sp, r7
 352 01f0 80BD     		pop	{r7, pc}
 353              		.cfi_endproc
 354              	.LFE112:
 356              		.section	.rodata
 357 002b 00       		.align	2
 358              	.LC4:
 359 002c 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 359      32302072 
 359      65616420 
 359      61747465 
 359      6D707420 
 360 005f 636F6465 		.ascii	"code!!!\012\015\000"
 360      2121210A 
 360      0D00
 361 0069 000000   		.text
 362 01f2 00BF     		.align	2
 363              		.global	L3GD20_TIMEOUT_UserCallback
 364              		.thumb
 365              		.thumb_func
 367              	L3GD20_TIMEOUT_UserCallback:
 368              	.LFB113:
 187:../src/main.cpp **** 
 188:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 189:../src/main.cpp **** {
 369              		.loc 1 189 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 1, uses_anonymous_args = 0
 373 01f4 80B5     		push	{r7, lr}
 374              	.LCFI6:
 375              		.cfi_def_cfa_offset 8
 376              		.cfi_offset 7, -8
 377              		.cfi_offset 14, -4
 378 01f6 00AF     		add	r7, sp, #0
 379              	.LCFI7:
 380              		.cfi_def_cfa_register 7
 190:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 381              		.loc 1 190 0
 382 01f8 40F20000 		movw	r0, #:lower16:.LC4
 383 01fc C0F20000 		movt	r0, #:upper16:.LC4
 384 0200 FFF7FEFF 		bl	printf
 191:../src/main.cpp **** 	return 0;
 385              		.loc 1 191 0
 386 0204 4FF00003 		mov	r3, #0
 192:../src/main.cpp **** }
 387              		.loc 1 192 0
 388 0208 1846     		mov	r0, r3
 389 020a 80BD     		pop	{r7, pc}
 390              		.cfi_endproc
 391              	.LFE113:
 393              		.align	2
 394              		.global	_Z14calc_gyro_biasv
 395              		.thumb
 396              		.thumb_func
 398              	_Z14calc_gyro_biasv:
 399              	.LFB114:
 193:../src/main.cpp **** 
 194:../src/main.cpp **** int16_t calc_gyro_bias(void)
 195:../src/main.cpp **** {
 400              		.loc 1 195 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 16
 403              		@ frame_needed = 1, uses_anonymous_args = 0
 404 020c 80B5     		push	{r7, lr}
 405              	.LCFI8:
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 14, -4
 409 020e 84B0     		sub	sp, sp, #16
 410              	.LCFI9:
 411              		.cfi_def_cfa_offset 24
 412 0210 00AF     		add	r7, sp, #0
 413              	.LCFI10:
 414              		.cfi_def_cfa_register 7
 415              	.LBB4:
 196:../src/main.cpp **** 	int i = 0;
 416              		.loc 1 196 0
 417 0212 4FF00003 		mov	r3, #0
 418 0216 FB60     		str	r3, [r7, #12]
 197:../src/main.cpp **** 	int accum_x = 0;
 419              		.loc 1 197 0
 420 0218 4FF00003 		mov	r3, #0
 421 021c BB60     		str	r3, [r7, #8]
 198:../src/main.cpp **** 
 199:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 200:../src/main.cpp **** 		uint16_t un_signed;
 201:../src/main.cpp **** 		int16_t output;
 202:../src/main.cpp **** 	} convert;
 203:../src/main.cpp **** 
 204:../src/main.cpp **** 	uint8_t bytes[2];
 205:../src/main.cpp **** 
 206:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 422              		.loc 1 206 0
 423 021e 4FF00003 		mov	r3, #0
 424 0222 FB60     		str	r3, [r7, #12]
 425 0224 19E0     		b	.L12
 426              	.L13:
 207:../src/main.cpp **** 	{
 208:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 427              		.loc 1 208 0 discriminator 2
 428 0226 3B46     		mov	r3, r7
 429 0228 1846     		mov	r0, r3
 430 022a 4FF02801 		mov	r1, #40
 431 022e 4FF00202 		mov	r2, #2
 432 0232 FFF7FEFF 		bl	L3GD20_Read
 209:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 433              		.loc 1 209 0 discriminator 2
 434 0236 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 435 0238 4FEA0323 		lsl	r3, r3, #8
 436 023c 9AB2     		uxth	r2, r3
 437 023e 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 438 0240 1343     		orrs	r3, r3, r2
 439 0242 9BB2     		uxth	r3, r3
 440 0244 9BB2     		uxth	r3, r3
 441 0246 BB80     		strh	r3, [r7, #4]	@ movhi
 210:../src/main.cpp **** 		accum_x += convert.output;
 442              		.loc 1 210 0 discriminator 2
 443 0248 BB88     		ldrh	r3, [r7, #4]
 444 024a 1BB2     		sxth	r3, r3
 445 024c BA68     		ldr	r2, [r7, #8]
 446 024e D318     		adds	r3, r2, r3
 447 0250 BB60     		str	r3, [r7, #8]
 206:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 448              		.loc 1 206 0 discriminator 2
 449 0252 FB68     		ldr	r3, [r7, #12]
 450 0254 03F10103 		add	r3, r3, #1
 451 0258 FB60     		str	r3, [r7, #12]
 452              	.L12:
 206:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 453              		.loc 1 206 0 is_stmt 0 discriminator 1
 454 025a FB68     		ldr	r3, [r7, #12]
 455 025c F92B     		cmp	r3, #249
 456 025e CCBF     		ite	gt
 457 0260 0023     		movgt	r3, #0
 458 0262 0123     		movle	r3, #1
 459 0264 DBB2     		uxtb	r3, r3
 460 0266 002B     		cmp	r3, #0
 461 0268 DDD1     		bne	.L13
 211:../src/main.cpp **** 	}
 212:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 462              		.loc 1 212 0 is_stmt 1
 463 026a D7ED027A 		flds	s15, [r7, #8]	@ int
 464 026e B8EEE77A 		fsitos	s14, s15
 465 0272 DFED077A 		flds	s15, .L15
 466 0276 C7EE277A 		fdivs	s15, s14, s15
 467 027a FDEEE77A 		ftosizs	s15, s15
 468 027e 17EE903A 		fmrs	r3, s15	@ int
 469 0282 9BB2     		uxth	r3, r3
 470 0284 1BB2     		sxth	r3, r3
 471              	.LBE4:
 213:../src/main.cpp **** }
 472              		.loc 1 213 0
 473 0286 1846     		mov	r0, r3
 474 0288 07F11007 		add	r7, r7, #16
 475 028c BD46     		mov	sp, r7
 476 028e 80BD     		pop	{r7, pc}
 477              	.L16:
 478              		.align	2
 479              	.L15:
 480 0290 00007A43 		.word	1132068864
 481              		.cfi_endproc
 482              	.LFE114:
 484              		.align	2
 485              		.global	_Z15adc1_init_otherv
 486              		.thumb
 487              		.thumb_func
 489              	_Z15adc1_init_otherv:
 490              	.LFB115:
 214:../src/main.cpp **** 
 215:../src/main.cpp **** void adc1_init_other(void) //PA2 -> Channel 3 on ADC1
 216:../src/main.cpp **** {
 491              		.loc 1 216 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 112
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 495 0294 80B5     		push	{r7, lr}
 496              	.LCFI11:
 497              		.cfi_def_cfa_offset 8
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 500 0296 9CB0     		sub	sp, sp, #112
 501              	.LCFI12:
 502              		.cfi_def_cfa_offset 120
 503 0298 00AF     		add	r7, sp, #0
 504              	.LCFI13:
 505              		.cfi_def_cfa_register 7
 506              	.LBB5:
 217:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 218:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 219:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 220:../src/main.cpp **** 	/* Configure the ADC clock */
 221:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 507              		.loc 1 221 0
 508 029a 4FF48870 		mov	r0, #272
 509 029e FFF7FEFF 		bl	RCC_ADCCLKConfig
 222:../src/main.cpp **** 
 223:../src/main.cpp **** 	/* Enable ADC1 clock */
 224:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 510              		.loc 1 224 0
 511 02a2 4FF08050 		mov	r0, #268435456
 512 02a6 4FF00101 		mov	r1, #1
 513 02aa FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 225:../src/main.cpp **** 	/* ADC Channel configuration */
 226:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 227:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 514              		.loc 1 227 0
 515 02ae 4FF40030 		mov	r0, #131072
 516 02b2 4FF00101 		mov	r1, #1
 517 02b6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 228:../src/main.cpp **** 
 229:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 230:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 518              		.loc 1 230 0
 519 02ba 4FF00403 		mov	r3, #4
 520 02be 3B65     		str	r3, [r7, #80]
 231:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 521              		.loc 1 231 0
 522 02c0 4FF00303 		mov	r3, #3
 523 02c4 87F85430 		strb	r3, [r7, #84]
 232:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 524              		.loc 1 232 0
 525 02c8 4FF00003 		mov	r3, #0
 526 02cc 87F85730 		strb	r3, [r7, #87]
 233:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 527              		.loc 1 233 0
 528 02d0 07F15003 		add	r3, r7, #80
 529 02d4 4FF09040 		mov	r0, #1207959552
 530 02d8 1946     		mov	r1, r3
 531 02da FFF7FEFF 		bl	GPIO_Init
 234:../src/main.cpp **** 
 235:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 532              		.loc 1 235 0
 533 02de 3B46     		mov	r3, r7
 534 02e0 1846     		mov	r0, r3
 535 02e2 FFF7FEFF 		bl	ADC_StructInit
 236:../src/main.cpp **** 
 237:../src/main.cpp **** 	/* Calibration procedure */
 238:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 536              		.loc 1 238 0
 537 02e6 4FF0A040 		mov	r0, #1342177280
 538 02ea 4FF00101 		mov	r1, #1
 539 02ee FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 239:../src/main.cpp **** 
 240:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 241:../src/main.cpp **** 	int foo;
 242:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 540              		.loc 1 242 0
 541 02f2 4FF00003 		mov	r3, #0
 542 02f6 FB66     		str	r3, [r7, #108]
 543 02f8 07E0     		b	.L18
 544              	.L19:
 243:../src/main.cpp **** 	{
 244:../src/main.cpp **** 	  ++foo;
 545              		.loc 1 244 0 discriminator 2
 546 02fa FB6E     		ldr	r3, [r7, #108]
 547 02fc 03F10103 		add	r3, r3, #1
 548 0300 FB66     		str	r3, [r7, #108]
 242:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 549              		.loc 1 242 0 discriminator 2
 550 0302 FB6E     		ldr	r3, [r7, #108]
 551 0304 03F10103 		add	r3, r3, #1
 552 0308 FB66     		str	r3, [r7, #108]
 553              	.L18:
 242:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 554              		.loc 1 242 0 is_stmt 0 discriminator 1
 555 030a FA6E     		ldr	r2, [r7, #108]
 556 030c 47F6FF43 		movw	r3, #31999
 557 0310 9A42     		cmp	r2, r3
 558 0312 CCBF     		ite	gt
 559 0314 0023     		movgt	r3, #0
 560 0316 0123     		movle	r3, #1
 561 0318 DBB2     		uxtb	r3, r3
 562 031a 002B     		cmp	r3, #0
 563 031c EDD1     		bne	.L19
 245:../src/main.cpp **** 	}
 246:../src/main.cpp **** 
 247:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 564              		.loc 1 247 0 is_stmt 1
 565 031e 4FF0A040 		mov	r0, #1342177280
 566 0322 4FF00001 		mov	r1, #0
 567 0326 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 248:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 568              		.loc 1 248 0
 569 032a 4FF0A040 		mov	r0, #1342177280
 570 032e FFF7FEFF 		bl	ADC_StartCalibration
 249:../src/main.cpp **** 
 250:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 571              		.loc 1 250 0
 572 0332 00BF     		nop
 573              	.L20:
 574              		.loc 1 250 0 is_stmt 0 discriminator 1
 575 0334 4FF0A040 		mov	r0, #1342177280
 576 0338 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 577 033c 0346     		mov	r3, r0
 578 033e 002B     		cmp	r3, #0
 579 0340 0CBF     		ite	eq
 580 0342 0023     		moveq	r3, #0
 581 0344 0123     		movne	r3, #1
 582 0346 DBB2     		uxtb	r3, r3
 583 0348 002B     		cmp	r3, #0
 584 034a F3D1     		bne	.L20
 251:../src/main.cpp **** 
 252:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 585              		.loc 1 252 0 is_stmt 1
 586 034c 4FF00003 		mov	r3, #0
 587 0350 BB65     		str	r3, [r7, #88]
 253:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 588              		.loc 1 253 0
 589 0352 4FF00003 		mov	r3, #0
 590 0356 FB65     		str	r3, [r7, #92]
 254:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 591              		.loc 1 254 0
 592 0358 4FF40043 		mov	r3, #32768
 593 035c 3B66     		str	r3, [r7, #96]
 255:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 594              		.loc 1 255 0
 595 035e 4FF00203 		mov	r3, #2
 596 0362 7B66     		str	r3, [r7, #100]
 256:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 597              		.loc 1 256 0
 598 0364 4FF00F03 		mov	r3, #15
 599 0368 87F86830 		strb	r3, [r7, #104]
 257:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 600              		.loc 1 257 0
 601 036c 07F15803 		add	r3, r7, #88
 602 0370 4FF0A040 		mov	r0, #1342177280
 603 0374 1946     		mov	r1, r3
 604 0376 FFF7FEFF 		bl	ADC_CommonInit
 258:../src/main.cpp **** 
 259:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 605              		.loc 1 259 0
 606 037a 4FF40053 		mov	r3, #8192
 607 037e 3B60     		str	r3, [r7, #0]
 260:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 608              		.loc 1 260 0
 609 0380 4FF00003 		mov	r3, #0
 610 0384 7B60     		str	r3, [r7, #4]
 261:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 611              		.loc 1 261 0
 612 0386 4FF00003 		mov	r3, #0
 613 038a BB60     		str	r3, [r7, #8]
 262:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 614              		.loc 1 262 0
 615 038c 4FF00003 		mov	r3, #0
 616 0390 FB60     		str	r3, [r7, #12]
 263:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 617              		.loc 1 263 0
 618 0392 4FF00003 		mov	r3, #0
 619 0396 3B61     		str	r3, [r7, #16]
 264:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 620              		.loc 1 264 0
 621 0398 4FF00003 		mov	r3, #0
 622 039c 7B61     		str	r3, [r7, #20]
 265:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 623              		.loc 1 265 0
 624 039e 4FF00003 		mov	r3, #0
 625 03a2 BB61     		str	r3, [r7, #24]
 266:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 626              		.loc 1 266 0
 627 03a4 4FF00103 		mov	r3, #1
 628 03a8 3B77     		strb	r3, [r7, #28]
 267:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 629              		.loc 1 267 0
 630 03aa 3B46     		mov	r3, r7
 631 03ac 4FF0A040 		mov	r0, #1342177280
 632 03b0 1946     		mov	r1, r3
 633 03b2 FFF7FEFF 		bl	ADC_Init
 268:../src/main.cpp **** 
 269:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 270:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 634              		.loc 1 270 0
 635 03b6 4FF0A040 		mov	r0, #1342177280
 636 03ba 4FF00301 		mov	r1, #3
 637 03be 4FF00102 		mov	r2, #1
 638 03c2 4FF00703 		mov	r3, #7
 639 03c6 FFF7FEFF 		bl	ADC_RegularChannelConfig
 271:../src/main.cpp **** 
 272:../src/main.cpp **** 	/* Enable ADC1 */
 273:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 640              		.loc 1 273 0
 641 03ca 4FF0A040 		mov	r0, #1342177280
 642 03ce 4FF00101 		mov	r1, #1
 643 03d2 FFF7FEFF 		bl	ADC_Cmd
 274:../src/main.cpp **** 
 275:../src/main.cpp **** 	/* wait for ADRDY */
 276:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 644              		.loc 1 276 0
 645 03d6 00BF     		nop
 646              	.L21:
 647              		.loc 1 276 0 is_stmt 0 discriminator 1
 648 03d8 4FF0A040 		mov	r0, #1342177280
 649 03dc 4FF00101 		mov	r1, #1
 650 03e0 FFF7FEFF 		bl	ADC_GetFlagStatus
 651 03e4 0346     		mov	r3, r0
 652 03e6 002B     		cmp	r3, #0
 653 03e8 14BF     		ite	ne
 654 03ea 0023     		movne	r3, #0
 655 03ec 0123     		moveq	r3, #1
 656 03ee DBB2     		uxtb	r3, r3
 657 03f0 002B     		cmp	r3, #0
 658 03f2 F1D1     		bne	.L21
 277:../src/main.cpp **** 
 278:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 279:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 659              		.loc 1 279 0 is_stmt 1
 660 03f4 4FF0A040 		mov	r0, #1342177280
 661 03f8 FFF7FEFF 		bl	ADC_StartConversion
 280:../src/main.cpp **** 
 281:../src/main.cpp **** 	///////////////////
 282:../src/main.cpp **** 
 283:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 662              		.loc 1 283 0
 663 03fc 4FF00100 		mov	r0, #1
 664 0400 4FF00101 		mov	r1, #1
 665 0404 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 284:../src/main.cpp **** 
 285:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 286:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 666              		.loc 1 286 0
 667 0408 07F12003 		add	r3, r7, #32
 668 040c 1846     		mov	r0, r3
 669 040e FFF7FEFF 		bl	DMA_StructInit
 287:../src/main.cpp **** 
 288:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); //Set DMA registers to default values
 670              		.loc 1 288 0
 671 0412 4FF00800 		mov	r0, #8
 672 0416 C4F20200 		movt	r0, 16386
 673 041a FFF7FEFF 		bl	DMA_DeInit
 289:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); //0x50000040; //Address of perip
 674              		.loc 1 289 0
 675 041e 4FF04003 		mov	r3, #64
 676 0422 C5F20003 		movt	r3, 20480
 677 0426 3B62     		str	r3, [r7, #32]
 290:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; //Variable to which ADC values will be
 678              		.loc 1 290 0
 679 0428 40F20003 		movw	r3, #:lower16:adcData
 680 042c C0F20003 		movt	r3, #:upper16:adcData
 681 0430 7B62     		str	r3, [r7, #36]
 291:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 682              		.loc 1 291 0
 683 0432 4FF00003 		mov	r3, #0
 684 0436 BB62     		str	r3, [r7, #40]
 292:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 1; //Buffer size (3 because we using three channels)
 685              		.loc 1 292 0
 686 0438 4FF00103 		mov	r3, #1
 687 043c BB85     		strh	r3, [r7, #44]	@ movhi
 293:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 688              		.loc 1 293 0
 689 043e 4FF00003 		mov	r3, #0
 690 0442 3B63     		str	r3, [r7, #48]
 294:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;//DMA_MemoryInc_Enable;
 691              		.loc 1 294 0
 692 0444 4FF00003 		mov	r3, #0
 693 0448 7B63     		str	r3, [r7, #52]
 295:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 694              		.loc 1 295 0
 695 044a 4FF40073 		mov	r3, #512
 696 044e BB63     		str	r3, [r7, #56]
 296:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 697              		.loc 1 296 0
 698 0450 4FF40063 		mov	r3, #2048
 699 0454 FB63     		str	r3, [r7, #60]
 297:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 700              		.loc 1 297 0
 701 0456 4FF02003 		mov	r3, #32
 702 045a 3B64     		str	r3, [r7, #64]
 298:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 703              		.loc 1 298 0
 704 045c 4FF40053 		mov	r3, #8192
 705 0460 7B64     		str	r3, [r7, #68]
 299:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 706              		.loc 1 299 0
 707 0462 4FF00003 		mov	r3, #0
 708 0466 BB64     		str	r3, [r7, #72]
 300:../src/main.cpp **** 
 301:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 709              		.loc 1 301 0
 710 0468 07F12003 		add	r3, r7, #32
 711 046c 4FF00800 		mov	r0, #8
 712 0470 C4F20200 		movt	r0, 16386
 713 0474 1946     		mov	r1, r3
 714 0476 FFF7FEFF 		bl	DMA_Init
 302:../src/main.cpp **** 
 303:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 304:../src/main.cpp **** 
 305:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 715              		.loc 1 305 0
 716 047a 4FF00B03 		mov	r3, #11
 717 047e 87F84C30 		strb	r3, [r7, #76]
 306:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 718              		.loc 1 306 0
 719 0482 4FF00203 		mov	r3, #2
 720 0486 87F84D30 		strb	r3, [r7, #77]
 307:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 721              		.loc 1 307 0
 722 048a 4FF00003 		mov	r3, #0
 723 048e 87F84E30 		strb	r3, [r7, #78]
 308:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 724              		.loc 1 308 0
 725 0492 4FF00103 		mov	r3, #1
 726 0496 87F84F30 		strb	r3, [r7, #79]
 309:../src/main.cpp **** 
 310:../src/main.cpp **** 	NVIC_Init(&nv);
 727              		.loc 1 310 0
 728 049a 07F14C03 		add	r3, r7, #76
 729 049e 1846     		mov	r0, r3
 730 04a0 FFF7FEFF 		bl	NVIC_Init
 311:../src/main.cpp **** 
 312:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 731              		.loc 1 312 0
 732 04a4 4FF00800 		mov	r0, #8
 733 04a8 C4F20200 		movt	r0, 16386
 734 04ac 4FF00201 		mov	r1, #2
 735 04b0 4FF00102 		mov	r2, #1
 736 04b4 FFF7FEFF 		bl	DMA_ITConfig
 313:../src/main.cpp **** 
 314:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 737              		.loc 1 314 0
 738 04b8 4FF00800 		mov	r0, #8
 739 04bc C4F20200 		movt	r0, 16386
 740 04c0 4FF00101 		mov	r1, #1
 741 04c4 FFF7FEFF 		bl	DMA_Cmd
 315:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 742              		.loc 1 315 0
 743 04c8 4FF0A040 		mov	r0, #1342177280
 744 04cc 4FF00201 		mov	r1, #2
 745 04d0 FFF7FEFF 		bl	ADC_DMAConfig
 316:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 746              		.loc 1 316 0
 747 04d4 4FF0A040 		mov	r0, #1342177280
 748 04d8 4FF00101 		mov	r1, #1
 749 04dc FFF7FEFF 		bl	ADC_DMACmd
 750              	.LBE5:
 317:../src/main.cpp **** 
 318:../src/main.cpp **** }
 751              		.loc 1 318 0
 752 04e0 07F17007 		add	r7, r7, #112
 753 04e4 BD46     		mov	sp, r7
 754 04e6 80BD     		pop	{r7, pc}
 755              		.cfi_endproc
 756              	.LFE115:
 758              		.align	2
 759              		.global	_Z9adc1_initv
 760              		.thumb
 761              		.thumb_func
 763              	_Z9adc1_initv:
 764              	.LFB116:
 319:../src/main.cpp **** 
 320:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 321:../src/main.cpp **** {
 765              		.loc 1 321 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 72
 768              		@ frame_needed = 1, uses_anonymous_args = 0
 769 04e8 80B5     		push	{r7, lr}
 770              	.LCFI14:
 771              		.cfi_def_cfa_offset 8
 772              		.cfi_offset 7, -8
 773              		.cfi_offset 14, -4
 774 04ea 92B0     		sub	sp, sp, #72
 775              	.LCFI15:
 776              		.cfi_def_cfa_offset 80
 777 04ec 00AF     		add	r7, sp, #0
 778              	.LCFI16:
 779              		.cfi_def_cfa_register 7
 780              	.LBB6:
 322:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 323:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 324:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 325:../src/main.cpp **** 	/* Configure the ADC clock */
 326:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 781              		.loc 1 326 0
 782 04ee 4FF48870 		mov	r0, #272
 783 04f2 FFF7FEFF 		bl	RCC_ADCCLKConfig
 327:../src/main.cpp **** 
 328:../src/main.cpp **** 	/* Enable ADC1 clock */
 329:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 784              		.loc 1 329 0
 785 04f6 4FF08050 		mov	r0, #268435456
 786 04fa 4FF00101 		mov	r1, #1
 787 04fe FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 330:../src/main.cpp **** 	/* ADC Channel configuration */
 331:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 332:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 788              		.loc 1 332 0
 789 0502 4FF40030 		mov	r0, #131072
 790 0506 4FF00101 		mov	r1, #1
 791 050a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 333:../src/main.cpp **** 
 334:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 335:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 792              		.loc 1 335 0
 793 050e 4FF00403 		mov	r3, #4
 794 0512 BB62     		str	r3, [r7, #40]
 336:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 795              		.loc 1 336 0
 796 0514 4FF00303 		mov	r3, #3
 797 0518 87F82C30 		strb	r3, [r7, #44]
 337:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 798              		.loc 1 337 0
 799 051c 4FF00003 		mov	r3, #0
 800 0520 87F82F30 		strb	r3, [r7, #47]
 338:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 801              		.loc 1 338 0
 802 0524 07F12803 		add	r3, r7, #40
 803 0528 4FF09040 		mov	r0, #1207959552
 804 052c 1946     		mov	r1, r3
 805 052e FFF7FEFF 		bl	GPIO_Init
 339:../src/main.cpp **** 
 340:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 806              		.loc 1 340 0
 807 0532 07F10403 		add	r3, r7, #4
 808 0536 1846     		mov	r0, r3
 809 0538 FFF7FEFF 		bl	ADC_StructInit
 341:../src/main.cpp **** 
 342:../src/main.cpp **** 	/* Calibration procedure */
 343:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 810              		.loc 1 343 0
 811 053c 4FF0A040 		mov	r0, #1342177280
 812 0540 4FF00101 		mov	r1, #1
 813 0544 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 344:../src/main.cpp **** 
 345:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 346:../src/main.cpp **** 	int foo;
 347:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 814              		.loc 1 347 0
 815 0548 4FF00003 		mov	r3, #0
 816 054c 7B64     		str	r3, [r7, #68]
 817 054e 07E0     		b	.L23
 818              	.L24:
 348:../src/main.cpp **** 	{
 349:../src/main.cpp **** 	  ++foo;
 819              		.loc 1 349 0 discriminator 2
 820 0550 7B6C     		ldr	r3, [r7, #68]
 821 0552 03F10103 		add	r3, r3, #1
 822 0556 7B64     		str	r3, [r7, #68]
 347:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 823              		.loc 1 347 0 discriminator 2
 824 0558 7B6C     		ldr	r3, [r7, #68]
 825 055a 03F10103 		add	r3, r3, #1
 826 055e 7B64     		str	r3, [r7, #68]
 827              	.L23:
 347:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 828              		.loc 1 347 0 is_stmt 0 discriminator 1
 829 0560 7A6C     		ldr	r2, [r7, #68]
 830 0562 47F6FF43 		movw	r3, #31999
 831 0566 9A42     		cmp	r2, r3
 832 0568 CCBF     		ite	gt
 833 056a 0023     		movgt	r3, #0
 834 056c 0123     		movle	r3, #1
 835 056e DBB2     		uxtb	r3, r3
 836 0570 002B     		cmp	r3, #0
 837 0572 EDD1     		bne	.L24
 350:../src/main.cpp **** 	}
 351:../src/main.cpp **** 
 352:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 838              		.loc 1 352 0 is_stmt 1
 839 0574 4FF0A040 		mov	r0, #1342177280
 840 0578 4FF00001 		mov	r1, #0
 841 057c FFF7FEFF 		bl	ADC_SelectCalibrationMode
 353:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 842              		.loc 1 353 0
 843 0580 4FF0A040 		mov	r0, #1342177280
 844 0584 FFF7FEFF 		bl	ADC_StartCalibration
 354:../src/main.cpp **** 
 355:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 845              		.loc 1 355 0
 846 0588 00BF     		nop
 847              	.L25:
 848              		.loc 1 355 0 is_stmt 0 discriminator 1
 849 058a 4FF0A040 		mov	r0, #1342177280
 850 058e FFF7FEFF 		bl	ADC_GetCalibrationStatus
 851 0592 0346     		mov	r3, r0
 852 0594 002B     		cmp	r3, #0
 853 0596 0CBF     		ite	eq
 854 0598 0023     		moveq	r3, #0
 855 059a 0123     		movne	r3, #1
 856 059c DBB2     		uxtb	r3, r3
 857 059e 002B     		cmp	r3, #0
 858 05a0 F3D1     		bne	.L25
 356:../src/main.cpp **** 
 357:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 859              		.loc 1 357 0 is_stmt 1
 860 05a2 4FF00003 		mov	r3, #0
 861 05a6 3B63     		str	r3, [r7, #48]
 358:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 862              		.loc 1 358 0
 863 05a8 4FF00003 		mov	r3, #0
 864 05ac 7B63     		str	r3, [r7, #52]
 359:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 865              		.loc 1 359 0
 866 05ae 4FF00003 		mov	r3, #0
 867 05b2 BB63     		str	r3, [r7, #56]
 360:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 868              		.loc 1 360 0
 869 05b4 4FF00003 		mov	r3, #0
 870 05b8 FB63     		str	r3, [r7, #60]
 361:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 871              		.loc 1 361 0
 872 05ba 4FF00003 		mov	r3, #0
 873 05be 87F84030 		strb	r3, [r7, #64]
 362:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 874              		.loc 1 362 0
 875 05c2 07F13003 		add	r3, r7, #48
 876 05c6 4FF0A040 		mov	r0, #1342177280
 877 05ca 1946     		mov	r1, r3
 878 05cc FFF7FEFF 		bl	ADC_CommonInit
 363:../src/main.cpp **** 
 364:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 879              		.loc 1 364 0
 880 05d0 4FF40053 		mov	r3, #8192
 881 05d4 7B60     		str	r3, [r7, #4]
 365:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 882              		.loc 1 365 0
 883 05d6 4FF00003 		mov	r3, #0
 884 05da BB60     		str	r3, [r7, #8]
 366:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 885              		.loc 1 366 0
 886 05dc 4FF00003 		mov	r3, #0
 887 05e0 FB60     		str	r3, [r7, #12]
 367:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 888              		.loc 1 367 0
 889 05e2 4FF00003 		mov	r3, #0
 890 05e6 3B61     		str	r3, [r7, #16]
 368:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 891              		.loc 1 368 0
 892 05e8 4FF00003 		mov	r3, #0
 893 05ec 7B61     		str	r3, [r7, #20]
 369:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 894              		.loc 1 369 0
 895 05ee 4FF00003 		mov	r3, #0
 896 05f2 BB61     		str	r3, [r7, #24]
 370:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 897              		.loc 1 370 0
 898 05f4 4FF00003 		mov	r3, #0
 899 05f8 FB61     		str	r3, [r7, #28]
 371:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 900              		.loc 1 371 0
 901 05fa 4FF00103 		mov	r3, #1
 902 05fe 87F82030 		strb	r3, [r7, #32]
 372:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 903              		.loc 1 372 0
 904 0602 07F10403 		add	r3, r7, #4
 905 0606 4FF0A040 		mov	r0, #1342177280
 906 060a 1946     		mov	r1, r3
 907 060c FFF7FEFF 		bl	ADC_Init
 373:../src/main.cpp **** 
 374:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 375:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 908              		.loc 1 375 0
 909 0610 4FF0A040 		mov	r0, #1342177280
 910 0614 4FF00301 		mov	r1, #3
 911 0618 4FF00102 		mov	r2, #1
 912 061c 4FF00703 		mov	r3, #7
 913 0620 FFF7FEFF 		bl	ADC_RegularChannelConfig
 376:../src/main.cpp **** 
 377:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 378:../src/main.cpp **** 
 379:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;//TIM3_IRQn;	//TIM2_IRQn;
 914              		.loc 1 379 0
 915 0624 4FF01203 		mov	r3, #18
 916 0628 87F82430 		strb	r3, [r7, #36]
 380:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 917              		.loc 1 380 0
 918 062c 4FF00203 		mov	r3, #2
 919 0630 87F82530 		strb	r3, [r7, #37]
 381:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 920              		.loc 1 381 0
 921 0634 4FF00003 		mov	r3, #0
 922 0638 87F82630 		strb	r3, [r7, #38]
 382:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 923              		.loc 1 382 0
 924 063c 4FF00103 		mov	r3, #1
 925 0640 87F82730 		strb	r3, [r7, #39]
 383:../src/main.cpp **** 
 384:../src/main.cpp **** 	NVIC_Init(&nv);
 926              		.loc 1 384 0
 927 0644 07F12403 		add	r3, r7, #36
 928 0648 1846     		mov	r0, r3
 929 064a FFF7FEFF 		bl	NVIC_Init
 385:../src/main.cpp **** 
 386:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 930              		.loc 1 386 0
 931 064e 4FF0A040 		mov	r0, #1342177280
 932 0652 4FF00401 		mov	r1, #4
 933 0656 4FF00102 		mov	r2, #1
 934 065a FFF7FEFF 		bl	ADC_ITConfig
 387:../src/main.cpp **** 
 388:../src/main.cpp **** 	/* Enable ADC1 */
 389:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 935              		.loc 1 389 0
 936 065e 4FF0A040 		mov	r0, #1342177280
 937 0662 4FF00101 		mov	r1, #1
 938 0666 FFF7FEFF 		bl	ADC_Cmd
 390:../src/main.cpp **** 
 391:../src/main.cpp **** 	/* wait for ADRDY */
 392:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 939              		.loc 1 392 0
 940 066a 00BF     		nop
 941              	.L26:
 942              		.loc 1 392 0 is_stmt 0 discriminator 1
 943 066c 4FF0A040 		mov	r0, #1342177280
 944 0670 4FF00101 		mov	r1, #1
 945 0674 FFF7FEFF 		bl	ADC_GetFlagStatus
 946 0678 0346     		mov	r3, r0
 947 067a 002B     		cmp	r3, #0
 948 067c 14BF     		ite	ne
 949 067e 0023     		movne	r3, #0
 950 0680 0123     		moveq	r3, #1
 951 0682 DBB2     		uxtb	r3, r3
 952 0684 002B     		cmp	r3, #0
 953 0686 F1D1     		bne	.L26
 393:../src/main.cpp **** 
 394:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 395:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 954              		.loc 1 395 0 is_stmt 1
 955 0688 4FF0A040 		mov	r0, #1342177280
 956 068c FFF7FEFF 		bl	ADC_StartConversion
 957              	.LBE6:
 396:../src/main.cpp **** }
 958              		.loc 1 396 0
 959 0690 07F14807 		add	r7, r7, #72
 960 0694 BD46     		mov	sp, r7
 961 0696 80BD     		pop	{r7, pc}
 962              		.cfi_endproc
 963              	.LFE116:
 965              		.align	2
 966              		.global	_Z13adc1_dma_initv
 967              		.thumb
 968              		.thumb_func
 970              	_Z13adc1_dma_initv:
 971              	.LFB117:
 397:../src/main.cpp **** 
 398:../src/main.cpp **** void adc1_dma_init(void) //PA2 (Channel 3), PA3 (Channel 4), PF5 (Channel 5) in use
 399:../src/main.cpp **** {
 972              		.loc 1 399 0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 112
 975              		@ frame_needed = 1, uses_anonymous_args = 0
 976 0698 80B5     		push	{r7, lr}
 977              	.LCFI17:
 978              		.cfi_def_cfa_offset 8
 979              		.cfi_offset 7, -8
 980              		.cfi_offset 14, -4
 981 069a 9CB0     		sub	sp, sp, #112
 982              	.LCFI18:
 983              		.cfi_def_cfa_offset 120
 984 069c 00AF     		add	r7, sp, #0
 985              	.LCFI19:
 986              		.cfi_def_cfa_register 7
 987              	.LBB7:
 400:../src/main.cpp **** 	ADC_InitTypeDef       	ADC_InitStructure;
 401:../src/main.cpp **** 	ADC_CommonInitTypeDef 	ADC_CommonInitStructure;
 402:../src/main.cpp **** 	GPIO_InitTypeDef      	GPIO_InitStructure;
 403:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 404:../src/main.cpp **** 
 405:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 988              		.loc 1 405 0
 989 069e 07F10403 		add	r3, r7, #4
 990 06a2 1846     		mov	r0, r3
 991 06a4 FFF7FEFF 		bl	ADC_StructInit
 406:../src/main.cpp **** 	ADC_CommonStructInit(&ADC_CommonInitStructure);
 992              		.loc 1 406 0
 993 06a8 07F15803 		add	r3, r7, #88
 994 06ac 1846     		mov	r0, r3
 995 06ae FFF7FEFF 		bl	ADC_CommonStructInit
 407:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 996              		.loc 1 407 0
 997 06b2 07F15003 		add	r3, r7, #80
 998 06b6 1846     		mov	r0, r3
 999 06b8 FFF7FEFF 		bl	GPIO_StructInit
 408:../src/main.cpp **** 
 409:../src/main.cpp **** 	/* Configure the ADC clock */
 410:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1000              		.loc 1 410 0
 1001 06bc 4FF48870 		mov	r0, #272
 1002 06c0 FFF7FEFF 		bl	RCC_ADCCLKConfig
 411:../src/main.cpp **** 	/* Enable ADC1 clock */
 412:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1003              		.loc 1 412 0
 1004 06c4 4FF08050 		mov	r0, #268435456
 1005 06c8 4FF00101 		mov	r1, #1
 1006 06cc FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 413:../src/main.cpp **** 	/* GPIOA Periph clock enable */
 414:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1007              		.loc 1 414 0
 1008 06d0 4FF40030 		mov	r0, #131072
 1009 06d4 4FF00101 		mov	r1, #1
 1010 06d8 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 415:../src/main.cpp **** 	//Configure DMA1 - Channel1==
 416:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1011              		.loc 1 416 0
 1012 06dc 4FF00100 		mov	r0, #1
 1013 06e0 4FF00101 		mov	r1, #1
 1014 06e4 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 417:../src/main.cpp **** 
 418:../src/main.cpp **** 	/* Configure ADC Channel 3 (PA2) as analog input */
 419:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_3;
 1015              		.loc 1 419 0
 1016 06e8 4FF00D03 		mov	r3, #13
 1017 06ec 3B65     		str	r3, [r7, #80]
 420:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1018              		.loc 1 420 0
 1019 06ee 4FF00303 		mov	r3, #3
 1020 06f2 87F85430 		strb	r3, [r7, #84]
 421:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1021              		.loc 1 421 0
 1022 06f6 4FF00003 		mov	r3, #0
 1023 06fa 87F85730 		strb	r3, [r7, #87]
 422:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1024              		.loc 1 422 0
 1025 06fe 07F15003 		add	r3, r7, #80
 1026 0702 4FF09040 		mov	r0, #1207959552
 1027 0706 1946     		mov	r1, r3
 1028 0708 FFF7FEFF 		bl	GPIO_Init
 423:../src/main.cpp **** 
 424:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); //Set DMA registers to default values
 1029              		.loc 1 424 0
 1030 070c 4FF00800 		mov	r0, #8
 1031 0710 C4F20200 		movt	r0, 16386
 1032 0714 FFF7FEFF 		bl	DMA_DeInit
 425:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); //0x50000040; //Address of perip
 1033              		.loc 1 425 0
 1034 0718 4FF04003 		mov	r3, #64
 1035 071c C5F20003 		movt	r3, 20480
 1036 0720 7B62     		str	r3, [r7, #36]
 426:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; //Variable to which ADC values will be
 1037              		.loc 1 426 0
 1038 0722 40F20003 		movw	r3, #:lower16:adcData
 1039 0726 C0F20003 		movt	r3, #:upper16:adcData
 1040 072a BB62     		str	r3, [r7, #40]
 427:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1041              		.loc 1 427 0
 1042 072c 4FF00003 		mov	r3, #0
 1043 0730 FB62     		str	r3, [r7, #44]
 428:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 1; //Buffer size (3 because we using three channels)
 1044              		.loc 1 428 0
 1045 0732 4FF00103 		mov	r3, #1
 1046 0736 3B86     		strh	r3, [r7, #48]	@ movhi
 429:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1047              		.loc 1 429 0
 1048 0738 4FF00003 		mov	r3, #0
 1049 073c 7B63     		str	r3, [r7, #52]
 430:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;//DMA_MemoryInc_Enable;
 1050              		.loc 1 430 0
 1051 073e 4FF00003 		mov	r3, #0
 1052 0742 BB63     		str	r3, [r7, #56]
 431:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; //HalfWord
 1053              		.loc 1 431 0
 1054 0744 4FF48073 		mov	r3, #256
 1055 0748 FB63     		str	r3, [r7, #60]
 432:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;//HalfWord
 1056              		.loc 1 432 0
 1057 074a 4FF48063 		mov	r3, #1024
 1058 074e 3B64     		str	r3, [r7, #64]
 433:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1059              		.loc 1 433 0
 1060 0750 4FF02003 		mov	r3, #32
 1061 0754 7B64     		str	r3, [r7, #68]
 434:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1062              		.loc 1 434 0
 1063 0756 4FF40053 		mov	r3, #8192
 1064 075a BB64     		str	r3, [r7, #72]
 435:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1065              		.loc 1 435 0
 1066 075c 4FF00003 		mov	r3, #0
 1067 0760 FB64     		str	r3, [r7, #76]
 436:../src/main.cpp **** 
 437:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1068              		.loc 1 437 0
 1069 0762 07F12403 		add	r3, r7, #36
 1070 0766 4FF00800 		mov	r0, #8
 1071 076a C4F20200 		movt	r0, 16386
 1072 076e 1946     		mov	r1, r3
 1073 0770 FFF7FEFF 		bl	DMA_Init
 438:../src/main.cpp **** 
 439:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1074              		.loc 1 439 0
 1075 0774 4FF00800 		mov	r0, #8
 1076 0778 C4F20200 		movt	r0, 16386
 1077 077c 4FF00101 		mov	r1, #1
 1078 0780 FFF7FEFF 		bl	DMA_Cmd
 440:../src/main.cpp **** 
 441:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE); // Turn on ADC1 voltage regulator
 1079              		.loc 1 441 0
 1080 0784 4FF0A040 		mov	r0, #1342177280
 1081 0788 4FF00101 		mov	r1, #1
 1082 078c FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 442:../src/main.cpp **** 
 443:../src/main.cpp **** 	int foo;
 444:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1083              		.loc 1 444 0
 1084 0790 4FF00003 		mov	r3, #0
 1085 0794 FB66     		str	r3, [r7, #108]
 1086 0796 07E0     		b	.L28
 1087              	.L29:
 445:../src/main.cpp **** 	{
 446:../src/main.cpp **** 	  ++foo;
 1088              		.loc 1 446 0 discriminator 2
 1089 0798 FB6E     		ldr	r3, [r7, #108]
 1090 079a 03F10103 		add	r3, r3, #1
 1091 079e FB66     		str	r3, [r7, #108]
 444:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1092              		.loc 1 444 0 discriminator 2
 1093 07a0 FB6E     		ldr	r3, [r7, #108]
 1094 07a2 03F10103 		add	r3, r3, #1
 1095 07a6 FB66     		str	r3, [r7, #108]
 1096              	.L28:
 444:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1097              		.loc 1 444 0 is_stmt 0 discriminator 1
 1098 07a8 FA6E     		ldr	r2, [r7, #108]
 1099 07aa 47F6FF43 		movw	r3, #31999
 1100 07ae 9A42     		cmp	r2, r3
 1101 07b0 CCBF     		ite	gt
 1102 07b2 0023     		movgt	r3, #0
 1103 07b4 0123     		movle	r3, #1
 1104 07b6 DBB2     		uxtb	r3, r3
 1105 07b8 002B     		cmp	r3, #0
 1106 07ba EDD1     		bne	.L29
 447:../src/main.cpp **** 	}
 448:../src/main.cpp **** 
 449:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1107              		.loc 1 449 0 is_stmt 1
 1108 07bc 4FF0A040 		mov	r0, #1342177280
 1109 07c0 4FF00001 		mov	r1, #0
 1110 07c4 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 450:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1111              		.loc 1 450 0
 1112 07c8 4FF0A040 		mov	r0, #1342177280
 1113 07cc FFF7FEFF 		bl	ADC_StartCalibration
 451:../src/main.cpp **** 
 452:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1114              		.loc 1 452 0
 1115 07d0 00BF     		nop
 1116              	.L30:
 1117              		.loc 1 452 0 is_stmt 0 discriminator 1
 1118 07d2 4FF0A040 		mov	r0, #1342177280
 1119 07d6 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1120 07da 0346     		mov	r3, r0
 1121 07dc 002B     		cmp	r3, #0
 1122 07de 0CBF     		ite	eq
 1123 07e0 0023     		moveq	r3, #0
 1124 07e2 0123     		movne	r3, #1
 1125 07e4 DBB2     		uxtb	r3, r3
 1126 07e6 002B     		cmp	r3, #0
 1127 07e8 F3D1     		bne	.L30
 453:../src/main.cpp **** 
 454:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1128              		.loc 1 454 0 is_stmt 1
 1129 07ea 4FF00003 		mov	r3, #0
 1130 07ee BB65     		str	r3, [r7, #88]
 455:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;//ADC_Clock_SynClkModeDiv4;
 1131              		.loc 1 455 0
 1132 07f0 4FF00003 		mov	r3, #0
 1133 07f4 FB65     		str	r3, [r7, #92]
 456:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;//ADC_DMAAccessMode_Disabled;
 1134              		.loc 1 456 0
 1135 07f6 4FF40043 		mov	r3, #32768
 1136 07fa 3B66     		str	r3, [r7, #96]
 457:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;//ADC_DMAMode_OneShot;
 1137              		.loc 1 457 0
 1138 07fc 4FF00203 		mov	r3, #2
 1139 0800 7B66     		str	r3, [r7, #100]
 458:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0x8;//0xF;
 1140              		.loc 1 458 0
 1141 0802 4FF00803 		mov	r3, #8
 1142 0806 87F86830 		strb	r3, [r7, #104]
 459:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1143              		.loc 1 459 0
 1144 080a 07F15803 		add	r3, r7, #88
 1145 080e 4FF0A040 		mov	r0, #1342177280
 1146 0812 1946     		mov	r1, r3
 1147 0814 FFF7FEFF 		bl	ADC_CommonInit
 460:../src/main.cpp **** 
 461:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1148              		.loc 1 461 0
 1149 0818 4FF40053 		mov	r3, #8192
 1150 081c 7B60     		str	r3, [r7, #4]
 462:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1151              		.loc 1 462 0
 1152 081e 4FF00003 		mov	r3, #0
 1153 0822 BB60     		str	r3, [r7, #8]
 463:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1154              		.loc 1 463 0
 1155 0824 4FF00003 		mov	r3, #0
 1156 0828 FB60     		str	r3, [r7, #12]
 464:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1157              		.loc 1 464 0
 1158 082a 4FF00003 		mov	r3, #0
 1159 082e 3B61     		str	r3, [r7, #16]
 465:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1160              		.loc 1 465 0
 1161 0830 4FF00003 		mov	r3, #0
 1162 0834 7B61     		str	r3, [r7, #20]
 466:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1163              		.loc 1 466 0
 1164 0836 4FF00003 		mov	r3, #0
 1165 083a BB61     		str	r3, [r7, #24]
 467:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1166              		.loc 1 467 0
 1167 083c 4FF00003 		mov	r3, #0
 1168 0840 FB61     		str	r3, [r7, #28]
 468:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 1169              		.loc 1 468 0
 1170 0842 4FF00103 		mov	r3, #1
 1171 0846 87F82030 		strb	r3, [r7, #32]
 469:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1172              		.loc 1 469 0
 1173 084a 07F10403 		add	r3, r7, #4
 1174 084e 4FF0A040 		mov	r0, #1342177280
 1175 0852 1946     		mov	r1, r3
 1176 0854 FFF7FEFF 		bl	ADC_Init
 470:../src/main.cpp **** 
 471:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);
 1177              		.loc 1 471 0
 1178 0858 4FF0A040 		mov	r0, #1342177280
 1179 085c 4FF00301 		mov	r1, #3
 1180 0860 4FF00102 		mov	r2, #1
 1181 0864 4FF00703 		mov	r3, #7
 1182 0868 FFF7FEFF 		bl	ADC_RegularChannelConfig
 472:../src/main.cpp **** 
 473:../src/main.cpp **** //	ADC_Cmd(ADC1, ENABLE);
 474:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1183              		.loc 1 474 0
 1184 086c 4FF0A040 		mov	r0, #1342177280
 1185 0870 4FF00101 		mov	r1, #1
 1186 0874 FFF7FEFF 		bl	ADC_DMACmd
 475:../src/main.cpp **** 
 476:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1187              		.loc 1 476 0
 1188 0878 4FF0A040 		mov	r0, #1342177280
 1189 087c 4FF00001 		mov	r1, #0
 1190 0880 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 477:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1191              		.loc 1 477 0
 1192 0884 4FF0A040 		mov	r0, #1342177280
 1193 0888 FFF7FEFF 		bl	ADC_StartCalibration
 478:../src/main.cpp **** 
 479:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1194              		.loc 1 479 0
 1195 088c 00BF     		nop
 1196              	.L31:
 1197              		.loc 1 479 0 is_stmt 0 discriminator 1
 1198 088e 4FF0A040 		mov	r0, #1342177280
 1199 0892 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1200 0896 0346     		mov	r3, r0
 1201 0898 002B     		cmp	r3, #0
 1202 089a 0CBF     		ite	eq
 1203 089c 0023     		moveq	r3, #0
 1204 089e 0123     		movne	r3, #1
 1205 08a0 DBB2     		uxtb	r3, r3
 1206 08a2 002B     		cmp	r3, #0
 1207 08a4 F3D1     		bne	.L31
 480:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1208              		.loc 1 480 0 is_stmt 1
 1209 08a6 4FF0A040 		mov	r0, #1342177280
 1210 08aa 4FF00101 		mov	r1, #1
 1211 08ae FFF7FEFF 		bl	ADC_Cmd
 481:../src/main.cpp **** 
 482:../src/main.cpp **** 	//	 wait for ADRDY
 483:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1212              		.loc 1 483 0
 1213 08b2 00BF     		nop
 1214              	.L32:
 1215              		.loc 1 483 0 is_stmt 0 discriminator 1
 1216 08b4 4FF0A040 		mov	r0, #1342177280
 1217 08b8 4FF00101 		mov	r1, #1
 1218 08bc FFF7FEFF 		bl	ADC_GetFlagStatus
 1219 08c0 0346     		mov	r3, r0
 1220 08c2 002B     		cmp	r3, #0
 1221 08c4 14BF     		ite	ne
 1222 08c6 0023     		movne	r3, #0
 1223 08c8 0123     		moveq	r3, #1
 1224 08ca DBB2     		uxtb	r3, r3
 1225 08cc 002B     		cmp	r3, #0
 1226 08ce F1D1     		bne	.L32
 484:../src/main.cpp **** 
 485:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1227              		.loc 1 485 0 is_stmt 1
 1228 08d0 4FF0A040 		mov	r0, #1342177280
 1229 08d4 FFF7FEFF 		bl	ADC_StartConversion
 1230              	.LBE7:
 486:../src/main.cpp **** }
 1231              		.loc 1 486 0
 1232 08d8 07F17007 		add	r7, r7, #112
 1233 08dc BD46     		mov	sp, r7
 1234 08de 80BD     		pop	{r7, pc}
 1235              		.cfi_endproc
 1236              	.LFE117:
 1238              	.Letext0:
 1239              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 1240              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 1241              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 1242              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 1243              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 1244              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 1245              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 1246              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 1247              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 1248              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/ccx8XA2M.s:25     .bss:00000000 led_iter
     /tmp/ccx8XA2M.s:22     .bss:00000000 $d
     /tmp/ccx8XA2M.s:32     .data:00000000 led_matrix
     /tmp/ccx8XA2M.s:29     .data:00000000 $d
     /tmp/ccx8XA2M.s:46     .bss:00000004 left_enc
     /tmp/ccx8XA2M.s:52     .bss:0000002c right_enc
     /tmp/ccx8XA2M.s:58     .bss:00000054 gyro_angle_x
     /tmp/ccx8XA2M.s:64     .bss:00000058 gyro_bias_x
     /tmp/ccx8XA2M.s:70     .bss:0000005c adcval
     /tmp/ccx8XA2M.s:76     .bss:00000060 adcData
     /tmp/ccx8XA2M.s:82     .bss:00000064 new_data
     /tmp/ccx8XA2M.s:85     .rodata:00000000 $d
     /tmp/ccx8XA2M.s:86     .rodata:00000000 .LC0
     /tmp/ccx8XA2M.s:89     .rodata:0000000c .LC1
     /tmp/ccx8XA2M.s:92     .rodata:00000018 .LC2
     /tmp/ccx8XA2M.s:95     .rodata:00000020 .LC3
     /tmp/ccx8XA2M.s:98     .text:00000000 $t
     /tmp/ccx8XA2M.s:103    .text:00000000 main
     /tmp/ccx8XA2M.s:489    .text:00000294 _Z15adc1_init_otherv
     /tmp/ccx8XA2M.s:241    .text:00000110 _Z19imu_update_ISR_initv
     /tmp/ccx8XA2M.s:398    .text:0000020c _Z14calc_gyro_biasv
     /tmp/ccx8XA2M.s:358    .rodata:0000002c .LC4
     /tmp/ccx8XA2M.s:367    .text:000001f4 L3GD20_TIMEOUT_UserCallback
     /tmp/ccx8XA2M.s:480    .text:00000290 $d
     /tmp/ccx8XA2M.s:484    .text:00000294 $t
     /tmp/ccx8XA2M.s:763    .text:000004e8 _Z9adc1_initv
     /tmp/ccx8XA2M.s:970    .text:00000698 _Z13adc1_dma_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.50a79f075d1434c9a8bd8ee500f78677
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.7fd02f13feff23c3903ac7c4e216cd44
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z17TIM8_init_encoderv
_Z17TIM2_init_encoderv
_Z23encoder_update_ISR_initv
_Z19LED_MATRIX_ISR_initv
_Z11pwm2_outputf
printf
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
L3GD20_Read
RCC_ADCCLKConfig
RCC_AHBPeriphClockCmd
GPIO_Init
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_ITConfig
ADC_CommonStructInit
GPIO_StructInit
