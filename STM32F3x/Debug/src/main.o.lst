   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	led_iter
  20              		.bss
  21              		.align	2
  24              	led_iter:
  25 0000 00000000 		.space	4
  26              		.global	led_matrix
  27              		.data
  28              		.align	2
  31              	led_matrix:
  32 0000 00020000 		.word	512
  33 0004 00010000 		.word	256
  34 0008 00800000 		.word	32768
  35 000c 00400000 		.word	16384
  36 0010 00200000 		.word	8192
  37 0014 00100000 		.word	4096
  38 0018 00080000 		.word	2048
  39 001c 00040000 		.word	1024
  40              		.global	left_enc
  41              		.bss
  42              		.align	2
  45              	left_enc:
  46 0004 00000000 		.space	40
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	right_enc
  48              		.align	2
  51              	right_enc:
  52 002c 00000000 		.space	40
  52      00000000 
  52      00000000 
  52      00000000 
  52      00000000 
  53              		.global	gyro_angle_x
  54              		.align	2
  57              	gyro_angle_x:
  58 0054 00000000 		.space	4
  59              		.global	gyro_bias_x
  60              		.align	2
  63              	gyro_bias_x:
  64 0058 00000000 		.space	4
  65              		.global	adcval
  66              		.align	2
  69              	adcval:
  70 005c 00000000 		.space	4
  71              		.global	adcData
  72              		.align	2
  75              	adcData:
  76 0060 00000000 		.space	8
  76      00000000 
  77              		.global	new_data
  78              		.align	2
  81              	new_data:
  82 0068 00000000 		.space	4
  83              		.global	adc2_data
  84              		.align	2
  87              	adc2_data:
  88 006c 00000000 		.space	16
  88      00000000 
  88      00000000 
  88      00000000 
  89              		.global	adc2_new_data
  92              	adc2_new_data:
  93 007c 00       		.space	1
  94              		.global	adc3_awd1
  97              	adc3_awd1:
  98 007d 00       		.space	1
  99              		.global	adc3_awd2
 102              	adc3_awd2:
 103 007e 00       		.space	1
 104              		.global	count
 105 007f 00       		.align	2
 108              	count:
 109 0080 00000000 		.space	4
 110              		.global	stage
 111              		.align	2
 114              	stage:
 115 0084 00000000 		.space	4
 116              		.global	__aeabi_f2d
 117              		.global	__aeabi_dcmplt
 118              		.section	.rodata
 119              		.align	2
 120              	.LC0:
 121 0000 25662025 		.ascii	"%f %d\012\015\000"
 121      640A0D00 
 122              		.text
 123              		.align	2
 124              		.global	main
 125              		.thumb
 126              		.thumb_func
 128              	main:
 129              	.LFB111:
 130              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  18:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  19:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  20:../src/main.cpp ****  *
  21:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  22:../src/main.cpp ****  *
  23:../src/main.cpp ****  * TIM6: LED matrix ISR
  24:../src/main.cpp ****  * TIM7: Encoder update ISR
  25:../src/main.cpp ****  * TIM17: IMU update ISR
  26:../src/main.cpp ****  *
  27:../src/main.cpp ****  * Other pins/resources used:
  28:../src/main.cpp ****  *
  29:../src/main.cpp ****  * Analog: 	Channel 3 (PA2)
  30:../src/main.cpp ****  * 			Channel 4 (PA3)
  31:../src/main.cpp ****  * 			Channel 5 (PF4)
  32:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  33:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  34:../src/main.cpp ****  *
  35:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  36:../src/main.cpp ****  *
  37:../src/main.cpp ****  */
  38:../src/main.cpp **** 
  39:../src/main.cpp **** /*
  40:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  41:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  42:../src/main.cpp ****  */
  43:../src/main.cpp **** 
  44:../src/main.cpp **** volatile int led_iter;
  45:../src/main.cpp **** volatile int led_matrix[8] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_14, GPIO_Pin_13,
  46:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  47:../src/main.cpp **** 
  48:../src/main.cpp **** void imu_update_ISR_init(void);
  49:../src/main.cpp **** int16_t calc_gyro_bias(void);
  50:../src/main.cpp **** 
  51:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  52:../src/main.cpp **** 
  53:../src/main.cpp **** void adc1_init_DMA(void);
  54:../src/main.cpp **** void adc2_init_DMA(void);
  55:../src/main.cpp **** void battery_watchdog_init(void);
  56:../src/main.cpp **** void adc1_init(void);
  57:../src/main.cpp **** 
  58:../src/main.cpp **** void brake_pins_init(void);
  59:../src/main.cpp **** 
  60:../src/main.cpp **** void ping_pin_init(void);
  61:../src/main.cpp **** void timer2_timebase_init(void);
  62:../src/main.cpp **** 
  63:../src/main.cpp **** void comp_init(void);
  64:../src/main.cpp **** 
  65:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  66:../src/main.cpp **** 
  67:../src/main.cpp **** encoderState left_enc, right_enc;
  68:../src/main.cpp **** 
  69:../src/main.cpp **** volatile float gyro_angle_x;
  70:../src/main.cpp **** int gyro_bias_x, adcval;
  71:../src/main.cpp **** 
  72:../src/main.cpp **** //__IO uint16_t adcData[3];
  73:../src/main.cpp **** __IO uint32_t adcData[2];
  74:../src/main.cpp **** int new_data;
  75:../src/main.cpp **** 
  76:../src/main.cpp **** __IO uint32_t adc2_data[4];
  77:../src/main.cpp **** uint8_t adc2_new_data;
  78:../src/main.cpp **** 
  79:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
  80:../src/main.cpp **** 
  81:../src/main.cpp **** int count, stage;
  82:../src/main.cpp **** #define K_ULTRASONIC 0.001130f
  83:../src/main.cpp **** 
  84:../src/main.cpp **** // Initialize all encoder data structures to zero:
  85:../src/main.cpp **** 
  86:../src/main.cpp **** int main(void)
  87:../src/main.cpp **** {
 131              		.loc 1 87 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 40
 134              		@ frame_needed = 1, uses_anonymous_args = 0
 135 0000 B0B5     		push	{r4, r5, r7, lr}
 136              	.LCFI0:
 137              		.cfi_def_cfa_offset 16
 138              		.cfi_offset 4, -16
 139              		.cfi_offset 5, -12
 140              		.cfi_offset 7, -8
 141              		.cfi_offset 14, -4
 142 0002 8CB0     		sub	sp, sp, #48
 143              	.LCFI1:
 144              		.cfi_def_cfa_offset 64
 145 0004 02AF     		add	r7, sp, #8
 146              	.LCFI2:
 147              		.cfi_def_cfa 7, 56
 148              	.LBB2:
  88:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 149              		.loc 1 88 0
 150 0006 FFF7FEFF 		bl	SystemInit
  89:../src/main.cpp **** 
  90:../src/main.cpp **** 	UART1_init(); // Debug bridge
 151              		.loc 1 90 0
 152 000a FFF7FEFF 		bl	_Z10UART1_initv
  91:../src/main.cpp **** 
  92:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
  93:../src/main.cpp **** 
  94:../src/main.cpp **** 	adcData[0] = 0;
 153              		.loc 1 94 0
 154 000e 40F20003 		movw	r3, #:lower16:adcData
 155 0012 C0F20003 		movt	r3, #:upper16:adcData
 156 0016 4FF00002 		mov	r2, #0
 157 001a 1A60     		str	r2, [r3, #0]
  95:../src/main.cpp **** 	adcData[1] = 0;
 158              		.loc 1 95 0
 159 001c 40F20003 		movw	r3, #:lower16:adcData
 160 0020 C0F20003 		movt	r3, #:upper16:adcData
 161 0024 4FF00002 		mov	r2, #0
 162 0028 5A60     		str	r2, [r3, #4]
  96:../src/main.cpp **** 
  97:../src/main.cpp **** 	uint8_t iter = 0;
 163              		.loc 1 97 0
 164 002a 4FF00003 		mov	r3, #0
 165 002e 87F82730 		strb	r3, [r7, #39]
  98:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 166              		.loc 1 98 0
 167 0032 4FF00003 		mov	r3, #0
 168 0036 87F82730 		strb	r3, [r7, #39]
 169 003a 0FE0     		b	.L2
 170              	.L3:
  99:../src/main.cpp **** 	{
 100:../src/main.cpp **** 		adc2_data[iter] = 0;
 171              		.loc 1 100 0 discriminator 2
 172 003c 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 173 0040 40F20003 		movw	r3, #:lower16:adc2_data
 174 0044 C0F20003 		movt	r3, #:upper16:adc2_data
 175 0048 4FF00001 		mov	r1, #0
 176 004c 43F82210 		str	r1, [r3, r2, lsl #2]
  98:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 177              		.loc 1 98 0 discriminator 2
 178 0050 97F82730 		ldrb	r3, [r7, #39]
 179 0054 03F10103 		add	r3, r3, #1
 180 0058 87F82730 		strb	r3, [r7, #39]
 181              	.L2:
  98:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 182              		.loc 1 98 0 is_stmt 0 discriminator 1
 183 005c 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 184 0060 062B     		cmp	r3, #6
 185 0062 8CBF     		ite	hi
 186 0064 0023     		movhi	r3, #0
 187 0066 0123     		movls	r3, #1
 188 0068 DBB2     		uxtb	r3, r3
 189 006a 002B     		cmp	r3, #0
 190 006c E6D1     		bne	.L3
 101:../src/main.cpp **** 	}
 102:../src/main.cpp **** 
 103:../src/main.cpp **** 	adc3_awd1 = 0;
 191              		.loc 1 103 0 is_stmt 1
 192 006e 40F20003 		movw	r3, #:lower16:adc3_awd1
 193 0072 C0F20003 		movt	r3, #:upper16:adc3_awd1
 194 0076 4FF00002 		mov	r2, #0
 195 007a 1A70     		strb	r2, [r3, #0]
 104:../src/main.cpp **** 	adc3_awd2 = 0;
 196              		.loc 1 104 0
 197 007c 40F20003 		movw	r3, #:lower16:adc3_awd2
 198 0080 C0F20003 		movt	r3, #:upper16:adc3_awd2
 199 0084 4FF00002 		mov	r2, #0
 200 0088 1A70     		strb	r2, [r3, #0]
 105:../src/main.cpp **** 
 106:../src/main.cpp **** 	count = 0;
 201              		.loc 1 106 0
 202 008a 40F20003 		movw	r3, #:lower16:count
 203 008e C0F20003 		movt	r3, #:upper16:count
 204 0092 4FF00002 		mov	r2, #0
 205 0096 1A60     		str	r2, [r3, #0]
 107:../src/main.cpp **** 	stage = 0;
 206              		.loc 1 107 0
 207 0098 40F20003 		movw	r3, #:lower16:stage
 208 009c C0F20003 		movt	r3, #:upper16:stage
 209 00a0 4FF00002 		mov	r2, #0
 210 00a4 1A60     		str	r2, [r3, #0]
 108:../src/main.cpp **** 
 109:../src/main.cpp **** 	/*
 110:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 111:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 112:../src/main.cpp **** 	 */
 113:../src/main.cpp **** 
 114:../src/main.cpp **** 
 115:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 211              		.loc 1 115 0
 212 00a6 40F20000 		movw	r0, #:lower16:left_enc
 213 00aa C0F20000 		movt	r0, #:upper16:left_enc
 214 00ae FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 116:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 215              		.loc 1 116 0
 216 00b2 40F20000 		movw	r0, #:lower16:right_enc
 217 00b6 C0F20000 		movt	r0, #:upper16:right_enc
 218 00ba FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 117:../src/main.cpp **** 
 118:../src/main.cpp **** 	right_enc.position_target = 8400;
 219              		.loc 1 118 0
 220 00be 40F20003 		movw	r3, #:lower16:right_enc
 221 00c2 C0F20003 		movt	r3, #:upper16:right_enc
 222 00c6 42F2D002 		movw	r2, #8400
 223 00ca DA60     		str	r2, [r3, #12]
 119:../src/main.cpp ****  //	right_enc.speed_target = 8400;
 120:../src/main.cpp **** 
 121:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 122:../src/main.cpp **** 
 123:../src/main.cpp **** 	brake_pins_init();
 224              		.loc 1 123 0
 225 00cc FFF7FEFF 		bl	_Z15brake_pins_initv
 124:../src/main.cpp **** 	pwm_out1_init(2000);
 226              		.loc 1 124 0
 227 00d0 4FF4FA60 		mov	r0, #2000
 228 00d4 FFF7FEFF 		bl	_Z13pwm_out1_initt
 125:../src/main.cpp **** 	pwm_out2_init(2000);
 229              		.loc 1 125 0
 230 00d8 4FF4FA60 		mov	r0, #2000
 231 00dc FFF7FEFF 		bl	_Z13pwm_out2_initt
 126:../src/main.cpp **** 
 127:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 128:../src/main.cpp **** 
 129:../src/main.cpp **** 	TIM8_init_encoder();
 232              		.loc 1 129 0
 233 00e0 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 130:../src/main.cpp **** 	TIM4_init_encoder();
 234              		.loc 1 130 0
 235 00e4 FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 131:../src/main.cpp **** 
 132:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 133:../src/main.cpp **** 
 134:../src/main.cpp **** 	new_data = 0;
 236              		.loc 1 134 0
 237 00e8 40F20003 		movw	r3, #:lower16:new_data
 238 00ec C0F20003 		movt	r3, #:upper16:new_data
 239 00f0 4FF00002 		mov	r2, #0
 240 00f4 1A60     		str	r2, [r3, #0]
 135:../src/main.cpp **** 	adc2_new_data = 0;
 241              		.loc 1 135 0
 242 00f6 40F20003 		movw	r3, #:lower16:adc2_new_data
 243 00fa C0F20003 		movt	r3, #:upper16:adc2_new_data
 244 00fe 4FF00002 		mov	r2, #0
 245 0102 1A70     		strb	r2, [r3, #0]
 136:../src/main.cpp **** 
 137:../src/main.cpp **** 	// Initialize ADC1 DMA:
 138:../src/main.cpp **** 	adc1_init_DMA();
 246              		.loc 1 138 0
 247 0104 FFF7FEFF 		bl	_Z13adc1_init_DMAv
 139:../src/main.cpp **** 
 140:../src/main.cpp **** 	// Initialize ADC2 DMA:
 141:../src/main.cpp **** 	adc2_init_DMA();
 248              		.loc 1 141 0
 249 0108 FFF7FEFF 		bl	_Z13adc2_init_DMAv
 142:../src/main.cpp **** //	battery_watchdog_init();
 143:../src/main.cpp **** 
 144:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 250              		.loc 1 144 0
 251 010c FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 145:../src/main.cpp **** //	imu_update_ISR_init(); 		//IMU (gyro/acclerometer/magnetometer ISR)
 146:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 252              		.loc 1 146 0
 253 0110 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 147:../src/main.cpp **** 
 148:../src/main.cpp **** 	// Ping Sensor Init:
 149:../src/main.cpp **** 
 150:../src/main.cpp **** 	ping_pin_init();
 254              		.loc 1 150 0
 255 0114 FFF7FEFF 		bl	_Z13ping_pin_initv
 151:../src/main.cpp **** 	timer2_timebase_init();
 256              		.loc 1 151 0
 257 0118 FFF7FEFF 		bl	_Z20timer2_timebase_initv
 152:../src/main.cpp **** 
 153:../src/main.cpp **** 	imu_update_ISR_init();
 258              		.loc 1 153 0
 259 011c FFF7FEFF 		bl	_Z19imu_update_ISR_initv
 154:../src/main.cpp **** 
 155:../src/main.cpp **** 	comp_init();
 260              		.loc 1 155 0
 261 0120 FFF7FEFF 		bl	_Z9comp_initv
 156:../src/main.cpp **** 
 157:../src/main.cpp **** 	adcval = 0;
 262              		.loc 1 157 0
 263 0124 40F20003 		movw	r3, #:lower16:adcval
 264 0128 C0F20003 		movt	r3, #:upper16:adcval
 265 012c 4FF00002 		mov	r2, #0
 266 0130 1A60     		str	r2, [r3, #0]
 158:../src/main.cpp **** 	float mtr_out = 0;
 267              		.loc 1 158 0
 268 0132 4FF00003 		mov	r3, #0
 269 0136 FB60     		str	r3, [r7, #12]	@ float
 159:../src/main.cpp **** 	char *mode;
 160:../src/main.cpp **** 
 161:../src/main.cpp **** 	float drive_cmd = 0.0f;
 270              		.loc 1 161 0
 271 0138 4FF00003 		mov	r3, #0
 272 013c 3B62     		str	r3, [r7, #32]	@ float
 162:../src/main.cpp **** 	int err = 0.0f;
 273              		.loc 1 162 0
 274 013e 4FF00003 		mov	r3, #0
 275 0142 BB60     		str	r3, [r7, #8]
 163:../src/main.cpp **** 	int last_err = 0.0f;
 276              		.loc 1 163 0
 277 0144 4FF00003 		mov	r3, #0
 278 0148 FB61     		str	r3, [r7, #28]
 164:../src/main.cpp **** 	float diff_err;
 165:../src/main.cpp **** 	float rt = 0.0f;
 279              		.loc 1 165 0
 280 014a 4FF00003 		mov	r3, #0
 281 014e BB61     		str	r3, [r7, #24]	@ float
 166:../src/main.cpp **** 	float d_front = 1.0f;
 282              		.loc 1 166 0
 283 0150 4FF07E53 		mov	r3, #1065353216
 284 0154 7B60     		str	r3, [r7, #4]	@ float
 285              	.L19:
 167:../src/main.cpp **** 
 168:../src/main.cpp **** 	float left, right;
 169:../src/main.cpp **** //	right_enc.m = MODE_POSITION;
 170:../src/main.cpp **** 
 171:../src/main.cpp **** 	while(true)
 172:../src/main.cpp **** 	{
 173:../src/main.cpp **** 		d_front = ((float)count*(float)0.5*(float)K_ULTRASONIC);
 286              		.loc 1 173 0
 287 0156 40F20003 		movw	r3, #:lower16:count
 288 015a C0F20003 		movt	r3, #:upper16:count
 289 015e D3ED007A 		flds	s15, [r3, #0]	@ int
 290 0162 B8EEE77A 		fsitos	s14, s15
 291 0166 F6EE007A 		fconsts	s15, #96
 292 016a 27EE277A 		fmuls	s14, s14, s15
 293 016e DFED6A7A 		flds	s15, .L30+8
 294 0172 67EE277A 		fmuls	s15, s14, s15
 295 0176 C7ED017A 		fsts	s15, [r7, #4]
 174:../src/main.cpp **** 		if(d_front < 0.42)
 296              		.loc 1 174 0
 297 017a 7868     		ldr	r0, [r7, #4]	@ float
 298 017c FFF7FEFF 		bl	__aeabi_f2d
 299 0180 0246     		mov	r2, r0
 300 0182 0B46     		mov	r3, r1
 301 0184 1046     		mov	r0, r2
 302 0186 1946     		mov	r1, r3
 303 0188 61A3     		adr	r3, .L30
 304 018a D3E90023 		ldrd	r2, [r3]
 305 018e FFF7FEFF 		bl	__aeabi_dcmplt
 306 0192 0346     		mov	r3, r0
 307 0194 002B     		cmp	r3, #0
 308 0196 05D0     		beq	.L27
 309              	.L20:
 175:../src/main.cpp **** 		{
 176:../src/main.cpp **** 			rt = 0.6;
 310              		.loc 1 176 0
 311 0198 49F69A13 		movw	r3, #39322
 312 019c C3F61973 		movt	r3, 16153
 313 01a0 BB61     		str	r3, [r7, #24]	@ float
 314 01a2 02E0     		b	.L6
 315              	.L27:
 177:../src/main.cpp **** 		}
 178:../src/main.cpp **** 		else
 179:../src/main.cpp **** 		{
 180:../src/main.cpp **** 			rt = 0.0f;
 316              		.loc 1 180 0
 317 01a4 4FF00003 		mov	r3, #0
 318 01a8 BB61     		str	r3, [r7, #24]	@ float
 319              	.L6:
 181:../src/main.cpp **** 		}
 182:../src/main.cpp **** 		err = (int)adcData[1] - 2200;
 320              		.loc 1 182 0
 321 01aa 40F20003 		movw	r3, #:lower16:adcData
 322 01ae C0F20003 		movt	r3, #:upper16:adcData
 323 01b2 5B68     		ldr	r3, [r3, #4]
 324 01b4 A3F69803 		subw	r3, r3, #2200
 325 01b8 BB60     		str	r3, [r7, #8]
 183:../src/main.cpp **** 		diff_err = (float)(err-last_err);
 326              		.loc 1 183 0
 327 01ba BA68     		ldr	r2, [r7, #8]
 328 01bc FB69     		ldr	r3, [r7, #28]
 329 01be D31A     		subs	r3, r2, r3
 330 01c0 07EE103A 		fmsr	s14, r3	@ int
 331 01c4 F8EEC77A 		fsitos	s15, s14
 332 01c8 C7ED007A 		fsts	s15, [r7, #0]
 184:../src/main.cpp **** 		drive_cmd = 0.5*(((float)(err)/(float)2500) + ((float)diff_err/(float)1100));
 333              		.loc 1 184 0
 334 01cc D7ED027A 		flds	s15, [r7, #8]	@ int
 335 01d0 B8EEE77A 		fsitos	s14, s15
 336 01d4 DFED517A 		flds	s15, .L30+12
 337 01d8 87EE277A 		fdivs	s14, s14, s15
 338 01dc D7ED006A 		flds	s13, [r7, #0]
 339 01e0 DFED4F7A 		flds	s15, .L30+16
 340 01e4 C6EEA77A 		fdivs	s15, s13, s15
 341 01e8 37EE277A 		fadds	s14, s14, s15
 342 01ec F6EE007A 		fconsts	s15, #96
 343 01f0 67EE277A 		fmuls	s15, s14, s15
 344 01f4 C7ED087A 		fsts	s15, [r7, #32]
 185:../src/main.cpp **** 		if(drive_cmd > 0.5)
 345              		.loc 1 185 0
 346 01f8 97ED087A 		flds	s14, [r7, #32]
 347 01fc F6EE007A 		fconsts	s15, #96
 348 0200 B4EEE77A 		fcmpes	s14, s15
 349 0204 F1EE10FA 		fmstat
 350 0208 02DD     		ble	.L7
 351              	.L21:
 186:../src/main.cpp **** 		{
 187:../src/main.cpp **** 			drive_cmd = 0.5f;
 352              		.loc 1 187 0
 353 020a 4FF07C53 		mov	r3, #1056964608
 354 020e 3B62     		str	r3, [r7, #32]	@ float
 355              	.L7:
 188:../src/main.cpp **** 		}
 189:../src/main.cpp **** 		if(drive_cmd < -0.5)
 356              		.loc 1 189 0
 357 0210 97ED087A 		flds	s14, [r7, #32]
 358 0214 FEEE007A 		fconsts	s15, #224
 359 0218 B4EEE77A 		fcmpes	s14, s15
 360 021c F1EE10FA 		fmstat
 361 0220 02D5     		bpl	.L9
 362              	.L22:
 190:../src/main.cpp **** 		{
 191:../src/main.cpp **** 			drive_cmd = -0.5f;
 363              		.loc 1 191 0
 364 0222 4FF03F43 		mov	r3, #-1090519040
 365 0226 3B62     		str	r3, [r7, #32]	@ float
 366              	.L9:
 192:../src/main.cpp **** 		}
 193:../src/main.cpp **** 
 194:../src/main.cpp **** 		printf("%f %d\n\r", drive_cmd, adcData[1]);
 367              		.loc 1 194 0
 368 0228 386A     		ldr	r0, [r7, #32]	@ float
 369 022a FFF7FEFF 		bl	__aeabi_f2d
 370 022e 0446     		mov	r4, r0
 371 0230 0D46     		mov	r5, r1
 372 0232 40F20003 		movw	r3, #:lower16:adcData
 373 0236 C0F20003 		movt	r3, #:upper16:adcData
 374 023a 5B68     		ldr	r3, [r3, #4]
 375 023c 0093     		str	r3, [sp, #0]
 376 023e 40F20000 		movw	r0, #:lower16:.LC0
 377 0242 C0F20000 		movt	r0, #:upper16:.LC0
 378 0246 2246     		mov	r2, r4
 379 0248 2B46     		mov	r3, r5
 380 024a FFF7FEFF 		bl	printf
 195:../src/main.cpp **** //		pwm2_output(0.5f);						// Fixed 1 kHz, 50% duty output on PWM output #2
 196:../src/main.cpp **** 
 197:../src/main.cpp **** 		// Debug Statements:
 198:../src/main.cpp **** 
 199:../src/main.cpp **** //		printf("%d %d %d\n\r", adcData[0], adcData[1], adcval);
 200:../src/main.cpp **** //		printf("%d\n\r", adcval);
 201:../src/main.cpp **** //		if(right_enc.m == MODE_OPENLOOP)
 202:../src/main.cpp **** //		{
 203:../src/main.cpp **** //			pwm1_output(0.50f);
 204:../src/main.cpp **** //		}
 205:../src/main.cpp **** 
 206:../src/main.cpp **** //		mode = (right_enc.m == MODE_OPENLOOP) ? (char *)"Open" : ((right_enc.m == MODE_POSITION) ? (cha
 207:../src/main.cpp **** //		GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 208:../src/main.cpp **** //		GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 209:../src/main.cpp **** 		mtr_out = 0.8;//(float)adcData[0]/(float)4096;
 381              		.loc 1 209 0
 382 024e 4CF6CD43 		movw	r3, #52429
 383 0252 C3F64C73 		movt	r3, 16204
 384 0256 FB60     		str	r3, [r7, #12]	@ float
 210:../src/main.cpp **** 		left = (1-mtr_out) - drive_cmd - rt;
 385              		.loc 1 210 0
 386 0258 B7EE007A 		fconsts	s14, #112
 387 025c D7ED037A 		flds	s15, [r7, #12]
 388 0260 37EE677A 		fsubs	s14, s14, s15
 389 0264 D7ED087A 		flds	s15, [r7, #32]
 390 0268 37EE677A 		fsubs	s14, s14, s15
 391 026c D7ED067A 		flds	s15, [r7, #24]
 392 0270 77EE677A 		fsubs	s15, s14, s15
 393 0274 C7ED057A 		fsts	s15, [r7, #20]
 211:../src/main.cpp **** 		right = mtr_out - drive_cmd - rt;
 394              		.loc 1 211 0
 395 0278 97ED037A 		flds	s14, [r7, #12]
 396 027c D7ED087A 		flds	s15, [r7, #32]
 397 0280 37EE677A 		fsubs	s14, s14, s15
 398 0284 D7ED067A 		flds	s15, [r7, #24]
 399 0288 77EE677A 		fsubs	s15, s14, s15
 400 028c C7ED047A 		fsts	s15, [r7, #16]
 212:../src/main.cpp **** 
 213:../src/main.cpp **** 		if(left>1.0)
 401              		.loc 1 213 0
 402 0290 97ED057A 		flds	s14, [r7, #20]
 403 0294 F7EE007A 		fconsts	s15, #112
 404 0298 B4EEE77A 		fcmpes	s14, s15
 405 029c F1EE10FA 		fmstat
 406 02a0 03DD     		ble	.L28
 407              	.L23:
 214:../src/main.cpp **** 		{
 215:../src/main.cpp **** 			left=1.0;
 408              		.loc 1 215 0
 409 02a2 4FF07E53 		mov	r3, #1065353216
 410 02a6 7B61     		str	r3, [r7, #20]	@ float
 411 02a8 0DE0     		b	.L13
 412              	.L28:
 216:../src/main.cpp **** 		}
 217:../src/main.cpp **** 		else if(left<-1.0)
 413              		.loc 1 217 0
 414 02aa 97ED057A 		flds	s14, [r7, #20]
 415 02ae FFEE007A 		fconsts	s15, #240
 416 02b2 B4EEE77A 		fcmpes	s14, s15
 417 02b6 F1EE10FA 		fmstat
 418 02ba 04D5     		bpl	.L13
 419              	.L24:
 218:../src/main.cpp **** 		{
 219:../src/main.cpp **** 			left=-1.0;
 420              		.loc 1 219 0
 421 02bc 4FF00003 		mov	r3, #0
 422 02c0 CBF68073 		movt	r3, 49024
 423 02c4 7B61     		str	r3, [r7, #20]	@ float
 424              	.L13:
 220:../src/main.cpp **** 		}
 221:../src/main.cpp **** 
 222:../src/main.cpp **** 		if(right>1.0)
 425              		.loc 1 222 0
 426 02c6 97ED047A 		flds	s14, [r7, #16]
 427 02ca F7EE007A 		fconsts	s15, #112
 428 02ce B4EEE77A 		fcmpes	s14, s15
 429 02d2 F1EE10FA 		fmstat
 430 02d6 03DD     		ble	.L29
 431              	.L25:
 223:../src/main.cpp **** 		{
 224:../src/main.cpp **** 			right=1.0;
 432              		.loc 1 224 0
 433 02d8 4FF07E53 		mov	r3, #1065353216
 434 02dc 3B61     		str	r3, [r7, #16]	@ float
 435 02de 0DE0     		b	.L17
 436              	.L29:
 225:../src/main.cpp **** 		}
 226:../src/main.cpp **** 		else if(right<-1.0)
 437              		.loc 1 226 0
 438 02e0 97ED047A 		flds	s14, [r7, #16]
 439 02e4 FFEE007A 		fconsts	s15, #240
 440 02e8 B4EEE77A 		fcmpes	s14, s15
 441 02ec F1EE10FA 		fmstat
 442 02f0 04D5     		bpl	.L17
 443              	.L26:
 227:../src/main.cpp **** 		{
 228:../src/main.cpp **** 			right=-1.0;
 444              		.loc 1 228 0
 445 02f2 4FF00003 		mov	r3, #0
 446 02f6 CBF68073 		movt	r3, 49024
 447 02fa 3B61     		str	r3, [r7, #16]	@ float
 448              	.L17:
 229:../src/main.cpp **** 		}
 230:../src/main.cpp **** 
 231:../src/main.cpp **** 		pwm1_output(left);//mtr_out);
 449              		.loc 1 231 0
 450 02fc 7869     		ldr	r0, [r7, #20]	@ float
 451 02fe FFF7FEFF 		bl	_Z11pwm1_outputf
 232:../src/main.cpp **** 		pwm2_output(right);//1-mtr_out);
 452              		.loc 1 232 0
 453 0302 3869     		ldr	r0, [r7, #16]	@ float
 454 0304 FFF7FEFF 		bl	_Z11pwm2_outputf
 233:../src/main.cpp **** 		last_err = err;
 455              		.loc 1 233 0
 456 0308 BB68     		ldr	r3, [r7, #8]
 457 030a FB61     		str	r3, [r7, #28]
 171:../src/main.cpp **** 	while(true)
 458              		.loc 1 171 0
 459 030c 23E7     		b	.L19
 460              	.L31:
 461 030e 00BF     		.align	3
 462              	.L30:
 463 0310 E17A14AE 		.word	-1374389535
 464 0314 47E1DA3F 		.word	1071309127
 465 0318 821C943A 		.word	982785154
 466 031c 00401C45 		.word	1159479296
 467 0320 00808944 		.word	1149861888
 468              	.LBE2:
 469              		.cfi_endproc
 470              	.LFE111:
 472              		.align	2
 473              		.global	_Z19imu_update_ISR_initv
 474              		.thumb
 475              		.thumb_func
 477              	_Z19imu_update_ISR_initv:
 478              	.LFB112:
 234:../src/main.cpp **** //		printf("COMP7 %d\n\r", (int)COMP_GetOutputLevel(COMP_Selection_COMP7));
 235:../src/main.cpp **** //		printf("Left: %d | Right: %d\n\r", left_enc.position, right_enc.position);//, mode);
 236:../src/main.cpp **** //		printf("%3.3f Counter: %d\n\r", ((float)count*(float)0.5*(float)K_ULTRASONIC), TIM_GetCounter(T
 237:../src/main.cpp **** 
 238:../src/main.cpp **** //		printf("Bias_x: %d | Theta_x: %5.2f | Left: %d | Right: %d\n\r", gyro_bias_x, gyro_angle_x, lef
 239:../src/main.cpp **** //		printf("ADC Value on Channel 3: %d || Theta_x: %5.2f\n\r", adcval, gyro_angle_x);
 240:../src/main.cpp **** //		while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) != SET);
 241:../src/main.cpp **** //		DMA_ClearFlag(DMA1_FLAG_GL1 | DMA1_FLAG_TC1);
 242:../src/main.cpp **** 
 243:../src/main.cpp **** 		/*
 244:../src/main.cpp **** 		while(new_data==0);
 245:../src/main.cpp **** 		printf("ADC1: %4d || ADC2: %4d\n\r", adcData[0], adcData[1]);//adcData, (uint32_t)&(ADC1->DR));//
 246:../src/main.cpp **** 		new_data = 0;
 247:../src/main.cpp **** 
 248:../src/main.cpp **** 		*/
 249:../src/main.cpp **** /*
 250:../src/main.cpp **** 		printf("ADC1: ");
 251:../src/main.cpp **** 		while(new_data==0);
 252:../src/main.cpp **** 		for(iter=0;iter<2;++iter)
 253:../src/main.cpp **** 		{
 254:../src/main.cpp **** 			printf("%4d ", adcData[iter]);
 255:../src/main.cpp **** 		}
 256:../src/main.cpp **** 
 257:../src/main.cpp **** //		pwm1_output((float)adcData[0]/(float)4096);
 258:../src/main.cpp **** 
 259:../src/main.cpp **** 		printf("ADC2: ");
 260:../src/main.cpp **** 		while(adc2_new_data==0);
 261:../src/main.cpp **** 		for(iter=0;iter<4;++iter)
 262:../src/main.cpp **** 		{
 263:../src/main.cpp **** 			printf("%4d ", adc2_data[iter]);
 264:../src/main.cpp **** 		}
 265:../src/main.cpp **** 	*/
 266:../src/main.cpp **** //		printf("AWD1: %d, AWD2: %d, ADC: %d", adc3_awd1, adc3_awd2, ADC_GetConversionValue(ADC3));
 267:../src/main.cpp **** //		adc3_awd1 = 0;
 268:../src/main.cpp **** //		adc3_awd2 = 0;
 269:../src/main.cpp **** //		printf("\n\r");
 270:../src/main.cpp **** 
 271:../src/main.cpp **** 	}
 272:../src/main.cpp **** 	return 0; // We should never manage to get here...
 273:../src/main.cpp **** }
 274:../src/main.cpp **** 
 275:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 276:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 277:../src/main.cpp **** 
 278:../src/main.cpp **** void imu_update_ISR_init(void)
 279:../src/main.cpp **** {
 479              		.loc 1 279 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 24
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483 0324 80B5     		push	{r7, lr}
 484              	.LCFI3:
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 7, -8
 487              		.cfi_offset 14, -4
 488 0326 86B0     		sub	sp, sp, #24
 489              	.LCFI4:
 490              		.cfi_def_cfa_offset 32
 491 0328 00AF     		add	r7, sp, #0
 492              	.LCFI5:
 493              		.cfi_def_cfa_register 7
 494              	.LBB3:
 280:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 281:../src/main.cpp **** 
 282:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 495              		.loc 1 282 0
 496 032a 4FF00703 		mov	r3, #7
 497 032e BB74     		strb	r3, [r7, #18]
 283:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 498              		.loc 1 283 0
 499 0330 4FF00003 		mov	r3, #0
 500 0334 FB74     		strb	r3, [r7, #19]
 284:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 501              		.loc 1 284 0
 502 0336 4FF00003 		mov	r3, #0
 503 033a 3B75     		strb	r3, [r7, #20]
 285:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 504              		.loc 1 285 0
 505 033c 4FF00003 		mov	r3, #0
 506 0340 7B75     		strb	r3, [r7, #21]
 286:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 507              		.loc 1 286 0
 508 0342 4FF00003 		mov	r3, #0
 509 0346 BB75     		strb	r3, [r7, #22]
 287:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 510              		.loc 1 287 0
 511 0348 4FF00003 		mov	r3, #0
 512 034c 7B74     		strb	r3, [r7, #17]
 288:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 513              		.loc 1 288 0
 514 034e 4FF00803 		mov	r3, #8
 515 0352 3B74     		strb	r3, [r7, #16]
 289:../src/main.cpp **** 
 290:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 516              		.loc 1 290 0
 517 0354 07F11003 		add	r3, r7, #16
 518 0358 1846     		mov	r0, r3
 519 035a FFF7FEFF 		bl	L3GD20_Init
 291:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 520              		.loc 1 291 0
 521 035e FFF7FEFF 		bl	_Z14calc_gyro_biasv
 522 0362 0346     		mov	r3, r0
 523 0364 1A46     		mov	r2, r3
 524 0366 40F20003 		movw	r3, #:lower16:gyro_bias_x
 525 036a C0F20003 		movt	r3, #:upper16:gyro_bias_x
 526 036e 1A60     		str	r2, [r3, #0]
 292:../src/main.cpp **** 
 293:../src/main.cpp **** 	gyro_angle_x = 0;
 527              		.loc 1 293 0
 528 0370 40F20003 		movw	r3, #:lower16:gyro_angle_x
 529 0374 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 530 0378 4FF00002 		mov	r2, #0
 531 037c 1A60     		str	r2, [r3, #0]	@ float
 294:../src/main.cpp **** 
 295:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 296:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 297:../src/main.cpp **** 
 298:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 532              		.loc 1 298 0
 533 037e 4FF01A03 		mov	r3, #26
 534 0382 3B73     		strb	r3, [r7, #12]
 299:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 535              		.loc 1 299 0
 536 0384 4FF00003 		mov	r3, #0
 537 0388 7B73     		strb	r3, [r7, #13]
 300:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 538              		.loc 1 300 0
 539 038a 4FF00003 		mov	r3, #0
 540 038e BB73     		strb	r3, [r7, #14]
 301:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 541              		.loc 1 301 0
 542 0390 4FF00103 		mov	r3, #1
 543 0394 FB73     		strb	r3, [r7, #15]
 302:../src/main.cpp **** 
 303:../src/main.cpp **** 	NVIC_Init(&nv);
 544              		.loc 1 303 0
 545 0396 07F10C03 		add	r3, r7, #12
 546 039a 1846     		mov	r0, r3
 547 039c FFF7FEFF 		bl	NVIC_Init
 304:../src/main.cpp **** 
 305:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 548              		.loc 1 305 0
 549 03a0 4FF48020 		mov	r0, #262144
 550 03a4 4FF00101 		mov	r1, #1
 551 03a8 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 306:../src/main.cpp **** 
 307:../src/main.cpp **** 	/*
 308:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 309:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 310:../src/main.cpp **** 	 * 	  Period -> ARR
 311:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 312:../src/main.cpp **** 	 */
 313:../src/main.cpp **** 
 314:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 552              		.loc 1 314 0
 553 03ac 40F28F13 		movw	r3, #399
 554 03b0 7B60     		str	r3, [r7, #4]
 315:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 555              		.loc 1 315 0
 556 03b2 41F61F43 		movw	r3, #7199
 557 03b6 3B80     		strh	r3, [r7, #0]	@ movhi
 316:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 558              		.loc 1 316 0
 559 03b8 4FF00003 		mov	r3, #0
 560 03bc BB72     		strb	r3, [r7, #10]
 317:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 561              		.loc 1 317 0
 562 03be 4FF00003 		mov	r3, #0
 563 03c2 3B81     		strh	r3, [r7, #8]	@ movhi
 318:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 564              		.loc 1 318 0
 565 03c4 4FF00003 		mov	r3, #0
 566 03c8 7B80     		strh	r3, [r7, #2]	@ movhi
 319:../src/main.cpp **** 
 320:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 567              		.loc 1 320 0
 568 03ca 3B46     		mov	r3, r7
 569 03cc 4FF49040 		mov	r0, #18432
 570 03d0 C4F20100 		movt	r0, 16385
 571 03d4 1946     		mov	r1, r3
 572 03d6 FFF7FEFF 		bl	TIM_TimeBaseInit
 321:../src/main.cpp **** 
 322:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 573              		.loc 1 322 0
 574 03da 4FF49040 		mov	r0, #18432
 575 03de C4F20100 		movt	r0, 16385
 576 03e2 4FF00101 		mov	r1, #1
 577 03e6 4FF00102 		mov	r2, #1
 578 03ea FFF7FEFF 		bl	TIM_ITConfig
 323:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 579              		.loc 1 323 0
 580 03ee 4FF49040 		mov	r0, #18432
 581 03f2 C4F20100 		movt	r0, 16385
 582 03f6 4FF00101 		mov	r1, #1
 583 03fa FFF7FEFF 		bl	TIM_Cmd
 584              	.LBE3:
 324:../src/main.cpp **** }
 585              		.loc 1 324 0
 586 03fe 07F11807 		add	r7, r7, #24
 587 0402 BD46     		mov	sp, r7
 588 0404 80BD     		pop	{r7, pc}
 589              		.cfi_endproc
 590              	.LFE112:
 592              		.section	.rodata
 593              		.align	2
 594              	.LC1:
 595 0008 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 595      32302072 
 595      65616420 
 595      61747465 
 595      6D707420 
 596 003b 636F6465 		.ascii	"code!!!\012\015\000"
 596      2121210A 
 596      0D00
 597 0045 000000   		.text
 598 0406 00BF     		.align	2
 599              		.global	L3GD20_TIMEOUT_UserCallback
 600              		.thumb
 601              		.thumb_func
 603              	L3GD20_TIMEOUT_UserCallback:
 604              	.LFB113:
 325:../src/main.cpp **** 
 326:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 327:../src/main.cpp **** {
 605              		.loc 1 327 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 1, uses_anonymous_args = 0
 609 0408 80B5     		push	{r7, lr}
 610              	.LCFI6:
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 7, -8
 613              		.cfi_offset 14, -4
 614 040a 00AF     		add	r7, sp, #0
 615              	.LCFI7:
 616              		.cfi_def_cfa_register 7
 328:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 617              		.loc 1 328 0
 618 040c 40F20000 		movw	r0, #:lower16:.LC1
 619 0410 C0F20000 		movt	r0, #:upper16:.LC1
 620 0414 FFF7FEFF 		bl	printf
 329:../src/main.cpp **** 	return 0;
 621              		.loc 1 329 0
 622 0418 4FF00003 		mov	r3, #0
 330:../src/main.cpp **** }
 623              		.loc 1 330 0
 624 041c 1846     		mov	r0, r3
 625 041e 80BD     		pop	{r7, pc}
 626              		.cfi_endproc
 627              	.LFE113:
 629              		.align	2
 630              		.global	_Z15brake_pins_initv
 631              		.thumb
 632              		.thumb_func
 634              	_Z15brake_pins_initv:
 635              	.LFB114:
 331:../src/main.cpp **** 
 332:../src/main.cpp **** void brake_pins_init(void)
 333:../src/main.cpp **** {
 636              		.loc 1 333 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 8
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0420 80B5     		push	{r7, lr}
 641              	.LCFI8:
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0422 82B0     		sub	sp, sp, #8
 646              	.LCFI9:
 647              		.cfi_def_cfa_offset 16
 648 0424 00AF     		add	r7, sp, #0
 649              	.LCFI10:
 650              		.cfi_def_cfa_register 7
 651              	.LBB4:
 334:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 652              		.loc 1 334 0
 653 0426 4FF40010 		mov	r0, #2097152
 654 042a 4FF00101 		mov	r1, #1
 655 042e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 335:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 336:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 656              		.loc 1 336 0
 657 0432 3B46     		mov	r3, r7
 658 0434 1846     		mov	r0, r3
 659 0436 FFF7FEFF 		bl	GPIO_StructInit
 337:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 660              		.loc 1 337 0
 661 043a 4FF00C03 		mov	r3, #12
 662 043e 3B60     		str	r3, [r7, #0]
 338:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 663              		.loc 1 338 0
 664 0440 4FF00003 		mov	r3, #0
 665 0444 BB71     		strb	r3, [r7, #6]
 339:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 666              		.loc 1 339 0
 667 0446 4FF00103 		mov	r3, #1
 668 044a 3B71     		strb	r3, [r7, #4]
 340:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 669              		.loc 1 340 0
 670 044c 4FF00003 		mov	r3, #0
 671 0450 FB71     		strb	r3, [r7, #7]
 341:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 672              		.loc 1 341 0
 673 0452 4FF00203 		mov	r3, #2
 674 0456 7B71     		strb	r3, [r7, #5]
 342:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 675              		.loc 1 342 0
 676 0458 3B46     		mov	r3, r7
 677 045a 4FF48050 		mov	r0, #4096
 678 045e C4F60000 		movt	r0, 18432
 679 0462 1946     		mov	r1, r3
 680 0464 FFF7FEFF 		bl	GPIO_Init
 343:../src/main.cpp **** 
 344:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 681              		.loc 1 344 0
 682 0468 4FF48050 		mov	r0, #4096
 683 046c C4F60000 		movt	r0, 18432
 684 0470 4FF00401 		mov	r1, #4
 685 0474 4FF00002 		mov	r2, #0
 686 0478 FFF7FEFF 		bl	GPIO_WriteBit
 345:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 687              		.loc 1 345 0
 688 047c 4FF48050 		mov	r0, #4096
 689 0480 C4F60000 		movt	r0, 18432
 690 0484 4FF00801 		mov	r1, #8
 691 0488 4FF00002 		mov	r2, #0
 692 048c FFF7FEFF 		bl	GPIO_WriteBit
 693              	.LBE4:
 346:../src/main.cpp **** 
 347:../src/main.cpp **** 	/*
 348:../src/main.cpp **** 	 * 	a.GPIO_Mode = GPIO_Mode_OUT;
 349:../src/main.cpp **** 	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 350:../src/main.cpp **** 	a.GPIO_OType = GPIO_OType_PP;
 351:../src/main.cpp **** 	a.GPIO_Speed = GPIO_Speed_Level_2;
 352:../src/main.cpp **** 
 353:../src/main.cpp **** 	 */
 354:../src/main.cpp **** }
 694              		.loc 1 354 0
 695 0490 07F10807 		add	r7, r7, #8
 696 0494 BD46     		mov	sp, r7
 697 0496 80BD     		pop	{r7, pc}
 698              		.cfi_endproc
 699              	.LFE114:
 701              		.align	2
 702              		.global	_Z13ping_pin_initv
 703              		.thumb
 704              		.thumb_func
 706              	_Z13ping_pin_initv:
 707              	.LFB115:
 355:../src/main.cpp **** /*
 356:../src/main.cpp ****  * PB0: OUTPUT
 357:../src/main.cpp ****  * PC1: INPUT
 358:../src/main.cpp ****  */
 359:../src/main.cpp **** void ping_pin_init(void)
 360:../src/main.cpp **** {
 708              		.loc 1 360 0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 8
 711              		@ frame_needed = 1, uses_anonymous_args = 0
 712 0498 80B5     		push	{r7, lr}
 713              	.LCFI11:
 714              		.cfi_def_cfa_offset 8
 715              		.cfi_offset 7, -8
 716              		.cfi_offset 14, -4
 717 049a 82B0     		sub	sp, sp, #8
 718              	.LCFI12:
 719              		.cfi_def_cfa_offset 16
 720 049c 00AF     		add	r7, sp, #0
 721              	.LCFI13:
 722              		.cfi_def_cfa_register 7
 723              	.LBB5:
 361:../src/main.cpp **** 
 362:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 724              		.loc 1 362 0
 725 049e 4FF44020 		mov	r0, #786432
 726 04a2 4FF00101 		mov	r1, #1
 727 04a6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 363:../src/main.cpp **** 
 364:../src/main.cpp **** 	GPIO_InitTypeDef g;
 365:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 728              		.loc 1 365 0
 729 04aa 4FF00003 		mov	r3, #0
 730 04ae 3B71     		strb	r3, [r7, #4]
 366:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 731              		.loc 1 366 0
 732 04b0 4FF00103 		mov	r3, #1
 733 04b4 BB71     		strb	r3, [r7, #6]
 367:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_5;
 734              		.loc 1 367 0
 735 04b6 4FF02003 		mov	r3, #32
 736 04ba 3B60     		str	r3, [r7, #0]
 368:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 737              		.loc 1 368 0
 738 04bc 4FF00003 		mov	r3, #0
 739 04c0 FB71     		strb	r3, [r7, #7]
 369:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 740              		.loc 1 369 0
 741 04c2 4FF00103 		mov	r3, #1
 742 04c6 7B71     		strb	r3, [r7, #5]
 370:../src/main.cpp **** 
 371:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 743              		.loc 1 371 0
 744 04c8 3B46     		mov	r3, r7
 745 04ca 4FF40060 		mov	r0, #2048
 746 04ce C4F60000 		movt	r0, 18432
 747 04d2 1946     		mov	r1, r3
 748 04d4 FFF7FEFF 		bl	GPIO_Init
 372:../src/main.cpp **** 
 373:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 749              		.loc 1 373 0
 750 04d8 4FF00103 		mov	r3, #1
 751 04dc 3B71     		strb	r3, [r7, #4]
 374:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 752              		.loc 1 374 0
 753 04de 4FF00003 		mov	r3, #0
 754 04e2 BB71     		strb	r3, [r7, #6]
 375:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 755              		.loc 1 375 0
 756 04e4 4FF00103 		mov	r3, #1
 757 04e8 3B60     		str	r3, [r7, #0]
 376:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 758              		.loc 1 376 0
 759 04ea 4FF00003 		mov	r3, #0
 760 04ee FB71     		strb	r3, [r7, #7]
 377:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 761              		.loc 1 377 0
 762 04f0 4FF00103 		mov	r3, #1
 763 04f4 7B71     		strb	r3, [r7, #5]
 378:../src/main.cpp **** 
 379:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 764              		.loc 1 379 0
 765 04f6 3B46     		mov	r3, r7
 766 04f8 4FF48060 		mov	r0, #1024
 767 04fc C4F60000 		movt	r0, 18432
 768 0500 1946     		mov	r1, r3
 769 0502 FFF7FEFF 		bl	GPIO_Init
 380:../src/main.cpp **** 
 381:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 770              		.loc 1 381 0
 771 0506 4FF00100 		mov	r0, #1
 772 050a 4FF00101 		mov	r1, #1
 773 050e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 382:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource5);
 774              		.loc 1 382 0
 775 0512 4FF00200 		mov	r0, #2
 776 0516 4FF00501 		mov	r1, #5
 777 051a FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 778              	.LBE5:
 383:../src/main.cpp **** 
 384:../src/main.cpp **** }
 779              		.loc 1 384 0
 780 051e 07F10807 		add	r7, r7, #8
 781 0522 BD46     		mov	sp, r7
 782 0524 80BD     		pop	{r7, pc}
 783              		.cfi_endproc
 784              	.LFE115:
 786 0526 00BF     		.align	2
 787              		.global	_Z20timer2_timebase_initv
 788              		.thumb
 789              		.thumb_func
 791              	_Z20timer2_timebase_initv:
 792              	.LFB116:
 385:../src/main.cpp **** 
 386:../src/main.cpp **** void timer2_timebase_init(void)
 387:../src/main.cpp **** {
 793              		.loc 1 387 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 16
 796              		@ frame_needed = 1, uses_anonymous_args = 0
 797 0528 80B5     		push	{r7, lr}
 798              	.LCFI14:
 799              		.cfi_def_cfa_offset 8
 800              		.cfi_offset 7, -8
 801              		.cfi_offset 14, -4
 802 052a 84B0     		sub	sp, sp, #16
 803              	.LCFI15:
 804              		.cfi_def_cfa_offset 24
 805 052c 00AF     		add	r7, sp, #0
 806              	.LCFI16:
 807              		.cfi_def_cfa_register 7
 808              	.LBB6:
 388:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 389:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 809              		.loc 1 389 0
 810 052e 4FF00100 		mov	r0, #1
 811 0532 4FF00101 		mov	r1, #1
 812 0536 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 390:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 813              		.loc 1 390 0
 814 053a 44F24F63 		movw	r3, #17999
 815 053e BB60     		str	r3, [r7, #8]
 391:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 816              		.loc 1 391 0
 817 0540 4FF00003 		mov	r3, #0
 818 0544 BB73     		strb	r3, [r7, #14]
 392:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 819              		.loc 1 392 0
 820 0546 4FF04703 		mov	r3, #71
 821 054a BB80     		strh	r3, [r7, #4]	@ movhi
 393:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 822              		.loc 1 393 0
 823 054c 4FF00003 		mov	r3, #0
 824 0550 BB81     		strh	r3, [r7, #12]	@ movhi
 394:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 825              		.loc 1 394 0
 826 0552 4FF00003 		mov	r3, #0
 827 0556 FB80     		strh	r3, [r7, #6]	@ movhi
 395:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 828              		.loc 1 395 0
 829 0558 07F10403 		add	r3, r7, #4
 830 055c 4FF08040 		mov	r0, #1073741824
 831 0560 1946     		mov	r1, r3
 832 0562 FFF7FEFF 		bl	TIM_TimeBaseInit
 396:../src/main.cpp **** //	TIM_Cmd(TIM2, ENABLE);
 397:../src/main.cpp **** 
 398:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 833              		.loc 1 398 0
 834 0566 4FF08040 		mov	r0, #1073741824
 835 056a 4FF00001 		mov	r1, #0
 836 056e FFF7FEFF 		bl	TIM_SetCounter
 837              	.LBE6:
 399:../src/main.cpp **** }
 838              		.loc 1 399 0
 839 0572 07F11007 		add	r7, r7, #16
 840 0576 BD46     		mov	sp, r7
 841 0578 80BD     		pop	{r7, pc}
 842              		.cfi_endproc
 843              	.LFE116:
 845 057a 00BF     		.align	2
 846              		.global	_Z9comp_initv
 847              		.thumb
 848              		.thumb_func
 850              	_Z9comp_initv:
 851              	.LFB117:
 400:../src/main.cpp **** 
 401:../src/main.cpp **** /*
 402:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 403:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 404:../src/main.cpp ****  * 			Output->	PB9
 405:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 406:../src/main.cpp ****  * 			Output->	PA8
 407:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 408:../src/main.cpp ****  * 			Output->	PB1
 409:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 410:../src/main.cpp ****  * 			Output->	PC2
 411:../src/main.cpp ****  */
 412:../src/main.cpp **** 
 413:../src/main.cpp **** void comp_init(void)
 414:../src/main.cpp **** {
 852              		.loc 1 414 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 40
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856 057c 80B5     		push	{r7, lr}
 857              	.LCFI17:
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 057e 8AB0     		sub	sp, sp, #40
 862              	.LCFI18:
 863              		.cfi_def_cfa_offset 48
 864 0580 00AF     		add	r7, sp, #0
 865              	.LCFI19:
 866              		.cfi_def_cfa_register 7
 867              	.LBB7:
 415:../src/main.cpp **** 	//COMP2 Init:
 416:../src/main.cpp **** 
 417:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 868              		.loc 1 417 0
 869 0582 4FF00100 		mov	r0, #1
 870 0586 4FF00101 		mov	r1, #1
 871 058a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 418:../src/main.cpp **** 
 419:../src/main.cpp **** 	GPIO_InitTypeDef g;
 420:../src/main.cpp **** 
 421:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 872              		.loc 1 421 0
 873 058e 4FF00303 		mov	r3, #3
 874 0592 87F82430 		strb	r3, [r7, #36]
 422:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 875              		.loc 1 422 0
 876 0596 4FF00003 		mov	r3, #0
 877 059a 87F82730 		strb	r3, [r7, #39]
 423:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 878              		.loc 1 423 0
 879 059e 4FF08003 		mov	r3, #128
 880 05a2 3B62     		str	r3, [r7, #32]
 424:../src/main.cpp **** 
 425:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 881              		.loc 1 425 0
 882 05a4 4FF40030 		mov	r0, #131072
 883 05a8 4FF00101 		mov	r1, #1
 884 05ac FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 426:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 885              		.loc 1 426 0
 886 05b0 07F12003 		add	r3, r7, #32
 887 05b4 4FF09040 		mov	r0, #1207959552
 888 05b8 1946     		mov	r1, r3
 889 05ba FFF7FEFF 		bl	GPIO_Init
 427:../src/main.cpp **** 
 428:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 890              		.loc 1 428 0
 891 05be 4FF00203 		mov	r3, #2
 892 05c2 87F82430 		strb	r3, [r7, #36]
 429:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 893              		.loc 1 429 0
 894 05c6 4FF00003 		mov	r3, #0
 895 05ca 87F82630 		strb	r3, [r7, #38]
 430:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 896              		.loc 1 430 0
 897 05ce 4FF00003 		mov	r3, #0
 898 05d2 87F82730 		strb	r3, [r7, #39]
 431:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 899              		.loc 1 431 0
 900 05d6 4FF40073 		mov	r3, #512
 901 05da 3B62     		str	r3, [r7, #32]
 432:../src/main.cpp **** 
 433:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 902              		.loc 1 433 0
 903 05dc 4FF48060 		mov	r0, #1024
 904 05e0 C4F60000 		movt	r0, 18432
 905 05e4 4FF00901 		mov	r1, #9
 906 05e8 4FF00802 		mov	r2, #8
 907 05ec FFF7FEFF 		bl	GPIO_PinAFConfig
 434:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 908              		.loc 1 434 0
 909 05f0 07F12003 		add	r3, r7, #32
 910 05f4 4FF48060 		mov	r0, #1024
 911 05f8 C4F60000 		movt	r0, 18432
 912 05fc 1946     		mov	r1, r3
 913 05fe FFF7FEFF 		bl	GPIO_Init
 435:../src/main.cpp **** 
 436:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 914              		.loc 1 436 0
 915 0602 4FF00000 		mov	r0, #0
 916 0606 FFF7FEFF 		bl	RCC_PCLK2Config
 437:../src/main.cpp **** 
 438:../src/main.cpp **** 	COMP_InitTypeDef c;
 439:../src/main.cpp **** 
 440:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 917              		.loc 1 440 0
 918 060a 4FF03003 		mov	r3, #48
 919 060e 7B60     		str	r3, [r7, #4]
 441:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 920              		.loc 1 441 0
 921 0610 4FF00003 		mov	r3, #0
 922 0614 BB60     		str	r3, [r7, #8]
 442:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 923              		.loc 1 442 0
 924 0616 4FF00403 		mov	r3, #4
 925 061a FB61     		str	r3, [r7, #28]
 443:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 926              		.loc 1 443 0
 927 061c 4FF00003 		mov	r3, #0
 928 0620 FB60     		str	r3, [r7, #12]
 444:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 929              		.loc 1 444 0
 930 0622 4FF00003 		mov	r3, #0
 931 0626 7B61     		str	r3, [r7, #20]
 445:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 932              		.loc 1 445 0
 933 0628 4FF48033 		mov	r3, #65536
 934 062c BB61     		str	r3, [r7, #24]
 446:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 935              		.loc 1 446 0
 936 062e 4FF00003 		mov	r3, #0
 937 0632 3B61     		str	r3, [r7, #16]
 447:../src/main.cpp **** 
 448:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 938              		.loc 1 448 0
 939 0634 07F10403 		add	r3, r7, #4
 940 0638 4FF00400 		mov	r0, #4
 941 063c 1946     		mov	r1, r3
 942 063e FFF7FEFF 		bl	COMP_Init
 449:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 943              		.loc 1 449 0
 944 0642 4FF00400 		mov	r0, #4
 945 0646 4FF00101 		mov	r1, #1
 946 064a FFF7FEFF 		bl	COMP_Cmd
 450:../src/main.cpp **** 
 451:../src/main.cpp **** 	//COMP3 Init:
 452:../src/main.cpp **** 
 453:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 947              		.loc 1 453 0
 948 064e 4FF00100 		mov	r0, #1
 949 0652 4FF00101 		mov	r1, #1
 950 0656 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 454:../src/main.cpp **** 
 455:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 951              		.loc 1 455 0
 952 065a 4FF00303 		mov	r3, #3
 953 065e 87F82430 		strb	r3, [r7, #36]
 456:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 954              		.loc 1 456 0
 955 0662 4FF00003 		mov	r3, #0
 956 0666 87F82730 		strb	r3, [r7, #39]
 457:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 957              		.loc 1 457 0
 958 066a 4FF48043 		mov	r3, #16384
 959 066e 3B62     		str	r3, [r7, #32]
 458:../src/main.cpp **** 
 459:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 960              		.loc 1 459 0
 961 0670 4FF4C020 		mov	r0, #393216
 962 0674 4FF00101 		mov	r1, #1
 963 0678 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 460:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 964              		.loc 1 460 0
 965 067c 07F12003 		add	r3, r7, #32
 966 0680 4FF48060 		mov	r0, #1024
 967 0684 C4F60000 		movt	r0, 18432
 968 0688 1946     		mov	r1, r3
 969 068a FFF7FEFF 		bl	GPIO_Init
 461:../src/main.cpp **** 
 462:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 970              		.loc 1 462 0
 971 068e 4FF00203 		mov	r3, #2
 972 0692 87F82430 		strb	r3, [r7, #36]
 463:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 973              		.loc 1 463 0
 974 0696 4FF00003 		mov	r3, #0
 975 069a 87F82630 		strb	r3, [r7, #38]
 464:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 976              		.loc 1 464 0
 977 069e 4FF00003 		mov	r3, #0
 978 06a2 87F82730 		strb	r3, [r7, #39]
 465:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 979              		.loc 1 465 0
 980 06a6 4FF48073 		mov	r3, #256
 981 06aa 3B62     		str	r3, [r7, #32]
 466:../src/main.cpp **** 
 467:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 982              		.loc 1 467 0
 983 06ac 4FF40060 		mov	r0, #2048
 984 06b0 C4F60000 		movt	r0, 18432
 985 06b4 4FF00801 		mov	r1, #8
 986 06b8 4FF00702 		mov	r2, #7
 987 06bc FFF7FEFF 		bl	GPIO_PinAFConfig
 468:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 988              		.loc 1 468 0
 989 06c0 07F12003 		add	r3, r7, #32
 990 06c4 4FF40060 		mov	r0, #2048
 991 06c8 C4F60000 		movt	r0, 18432
 992 06cc 1946     		mov	r1, r3
 993 06ce FFF7FEFF 		bl	GPIO_Init
 469:../src/main.cpp **** 
 470:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 994              		.loc 1 470 0
 995 06d2 4FF00000 		mov	r0, #0
 996 06d6 FFF7FEFF 		bl	RCC_PCLK2Config
 471:../src/main.cpp **** 
 472:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 997              		.loc 1 472 0
 998 06da 4FF03003 		mov	r3, #48
 999 06de 7B60     		str	r3, [r7, #4]
 473:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1000              		.loc 1 473 0
 1001 06e0 4FF00003 		mov	r3, #0
 1002 06e4 BB60     		str	r3, [r7, #8]
 474:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1003              		.loc 1 474 0
 1004 06e6 4FF00403 		mov	r3, #4
 1005 06ea FB61     		str	r3, [r7, #28]
 475:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1006              		.loc 1 475 0
 1007 06ec 4FF00003 		mov	r3, #0
 1008 06f0 FB60     		str	r3, [r7, #12]
 476:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1009              		.loc 1 476 0
 1010 06f2 4FF00003 		mov	r3, #0
 1011 06f6 7B61     		str	r3, [r7, #20]
 477:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1012              		.loc 1 477 0
 1013 06f8 4FF48033 		mov	r3, #65536
 1014 06fc BB61     		str	r3, [r7, #24]
 478:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1015              		.loc 1 478 0
 1016 06fe 4FF00003 		mov	r3, #0
 1017 0702 3B61     		str	r3, [r7, #16]
 479:../src/main.cpp **** 
 480:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 1018              		.loc 1 480 0
 1019 0704 07F10403 		add	r3, r7, #4
 1020 0708 4FF00800 		mov	r0, #8
 1021 070c 1946     		mov	r1, r3
 1022 070e FFF7FEFF 		bl	COMP_Init
 481:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 1023              		.loc 1 481 0
 1024 0712 4FF00800 		mov	r0, #8
 1025 0716 4FF00101 		mov	r1, #1
 1026 071a FFF7FEFF 		bl	COMP_Cmd
 482:../src/main.cpp **** 
 483:../src/main.cpp **** 	//COMP4 Init:
 484:../src/main.cpp **** 
 485:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1027              		.loc 1 485 0
 1028 071e 4FF00100 		mov	r0, #1
 1029 0722 4FF00101 		mov	r1, #1
 1030 0726 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 486:../src/main.cpp **** 
 487:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1031              		.loc 1 487 0
 1032 072a 4FF00303 		mov	r3, #3
 1033 072e 87F82430 		strb	r3, [r7, #36]
 488:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1034              		.loc 1 488 0
 1035 0732 4FF00003 		mov	r3, #0
 1036 0736 87F82730 		strb	r3, [r7, #39]
 489:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 1037              		.loc 1 489 0
 1038 073a 4FF08003 		mov	r3, #128
 1039 073e 3B62     		str	r3, [r7, #32]
 490:../src/main.cpp **** 
 491:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 1040              		.loc 1 491 0
 1041 0740 4FF41010 		mov	r0, #2359296
 1042 0744 4FF00101 		mov	r1, #1
 1043 0748 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 492:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 1044              		.loc 1 492 0
 1045 074c 07F12003 		add	r3, r7, #32
 1046 0750 4FF48050 		mov	r0, #4096
 1047 0754 C4F60000 		movt	r0, 18432
 1048 0758 1946     		mov	r1, r3
 1049 075a FFF7FEFF 		bl	GPIO_Init
 493:../src/main.cpp **** 
 494:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1050              		.loc 1 494 0
 1051 075e 4FF00203 		mov	r3, #2
 1052 0762 87F82430 		strb	r3, [r7, #36]
 495:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1053              		.loc 1 495 0
 1054 0766 4FF00003 		mov	r3, #0
 1055 076a 87F82630 		strb	r3, [r7, #38]
 496:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1056              		.loc 1 496 0
 1057 076e 4FF00003 		mov	r3, #0
 1058 0772 87F82730 		strb	r3, [r7, #39]
 497:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 1059              		.loc 1 497 0
 1060 0776 4FF00203 		mov	r3, #2
 1061 077a 3B62     		str	r3, [r7, #32]
 498:../src/main.cpp **** 
 499:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 1062              		.loc 1 499 0
 1063 077c 4FF48060 		mov	r0, #1024
 1064 0780 C4F60000 		movt	r0, 18432
 1065 0784 4FF00101 		mov	r1, #1
 1066 0788 4FF00802 		mov	r2, #8
 1067 078c FFF7FEFF 		bl	GPIO_PinAFConfig
 500:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1068              		.loc 1 500 0
 1069 0790 07F12003 		add	r3, r7, #32
 1070 0794 4FF48060 		mov	r0, #1024
 1071 0798 C4F60000 		movt	r0, 18432
 1072 079c 1946     		mov	r1, r3
 1073 079e FFF7FEFF 		bl	GPIO_Init
 501:../src/main.cpp **** 
 502:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1074              		.loc 1 502 0
 1075 07a2 4FF00000 		mov	r0, #0
 1076 07a6 FFF7FEFF 		bl	RCC_PCLK2Config
 503:../src/main.cpp **** 
 504:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1077              		.loc 1 504 0
 1078 07aa 4FF03003 		mov	r3, #48
 1079 07ae 7B60     		str	r3, [r7, #4]
 505:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1080              		.loc 1 505 0
 1081 07b0 4FF08003 		mov	r3, #128
 1082 07b4 BB60     		str	r3, [r7, #8]
 506:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1083              		.loc 1 506 0
 1084 07b6 4FF00403 		mov	r3, #4
 1085 07ba FB61     		str	r3, [r7, #28]
 507:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1086              		.loc 1 507 0
 1087 07bc 4FF00003 		mov	r3, #0
 1088 07c0 FB60     		str	r3, [r7, #12]
 508:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1089              		.loc 1 508 0
 1090 07c2 4FF00003 		mov	r3, #0
 1091 07c6 7B61     		str	r3, [r7, #20]
 509:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1092              		.loc 1 509 0
 1093 07c8 4FF48033 		mov	r3, #65536
 1094 07cc BB61     		str	r3, [r7, #24]
 510:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1095              		.loc 1 510 0
 1096 07ce 4FF00003 		mov	r3, #0
 1097 07d2 3B61     		str	r3, [r7, #16]
 511:../src/main.cpp **** 
 512:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 1098              		.loc 1 512 0
 1099 07d4 07F10403 		add	r3, r7, #4
 1100 07d8 4FF00C00 		mov	r0, #12
 1101 07dc 1946     		mov	r1, r3
 1102 07de FFF7FEFF 		bl	COMP_Init
 513:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 1103              		.loc 1 513 0
 1104 07e2 4FF00C00 		mov	r0, #12
 1105 07e6 4FF00101 		mov	r1, #1
 1106 07ea FFF7FEFF 		bl	COMP_Cmd
 514:../src/main.cpp **** 
 515:../src/main.cpp **** 	//COMP7 Init:
 516:../src/main.cpp **** 
 517:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1107              		.loc 1 517 0
 1108 07ee 4FF00100 		mov	r0, #1
 1109 07f2 4FF00101 		mov	r1, #1
 1110 07f6 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 518:../src/main.cpp **** 
 519:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1111              		.loc 1 519 0
 1112 07fa 4FF00303 		mov	r3, #3
 1113 07fe 87F82430 		strb	r3, [r7, #36]
 520:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1114              		.loc 1 520 0
 1115 0802 4FF00003 		mov	r3, #0
 1116 0806 87F82730 		strb	r3, [r7, #39]
 521:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 1117              		.loc 1 521 0
 1118 080a 4FF00203 		mov	r3, #2
 1119 080e 3B62     		str	r3, [r7, #32]
 522:../src/main.cpp **** 
 523:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 1120              		.loc 1 523 0
 1121 0810 4FF40020 		mov	r0, #524288
 1122 0814 4FF00101 		mov	r1, #1
 1123 0818 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 524:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1124              		.loc 1 524 0
 1125 081c 07F12003 		add	r3, r7, #32
 1126 0820 4FF40060 		mov	r0, #2048
 1127 0824 C4F60000 		movt	r0, 18432
 1128 0828 1946     		mov	r1, r3
 1129 082a FFF7FEFF 		bl	GPIO_Init
 525:../src/main.cpp **** 
 526:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1130              		.loc 1 526 0
 1131 082e 4FF00203 		mov	r3, #2
 1132 0832 87F82430 		strb	r3, [r7, #36]
 527:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1133              		.loc 1 527 0
 1134 0836 4FF00003 		mov	r3, #0
 1135 083a 87F82630 		strb	r3, [r7, #38]
 528:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1136              		.loc 1 528 0
 1137 083e 4FF00003 		mov	r3, #0
 1138 0842 87F82730 		strb	r3, [r7, #39]
 529:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 1139              		.loc 1 529 0
 1140 0846 4FF00403 		mov	r3, #4
 1141 084a 3B62     		str	r3, [r7, #32]
 530:../src/main.cpp **** 
 531:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 1142              		.loc 1 531 0
 1143 084c 4FF40060 		mov	r0, #2048
 1144 0850 C4F60000 		movt	r0, 18432
 1145 0854 4FF00201 		mov	r1, #2
 1146 0858 4FF00302 		mov	r2, #3
 1147 085c FFF7FEFF 		bl	GPIO_PinAFConfig
 532:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1148              		.loc 1 532 0
 1149 0860 07F12003 		add	r3, r7, #32
 1150 0864 4FF40060 		mov	r0, #2048
 1151 0868 C4F60000 		movt	r0, 18432
 1152 086c 1946     		mov	r1, r3
 1153 086e FFF7FEFF 		bl	GPIO_Init
 533:../src/main.cpp **** 
 534:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1154              		.loc 1 534 0
 1155 0872 4FF00000 		mov	r0, #0
 1156 0876 FFF7FEFF 		bl	RCC_PCLK2Config
 535:../src/main.cpp **** 
 536:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1157              		.loc 1 536 0
 1158 087a 4FF03003 		mov	r3, #48
 1159 087e 7B60     		str	r3, [r7, #4]
 537:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1160              		.loc 1 537 0
 1161 0880 4FF08003 		mov	r3, #128
 1162 0884 BB60     		str	r3, [r7, #8]
 538:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1163              		.loc 1 538 0
 1164 0886 4FF00403 		mov	r3, #4
 1165 088a FB61     		str	r3, [r7, #28]
 539:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1166              		.loc 1 539 0
 1167 088c 4FF00003 		mov	r3, #0
 1168 0890 FB60     		str	r3, [r7, #12]
 540:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1169              		.loc 1 540 0
 1170 0892 4FF00003 		mov	r3, #0
 1171 0896 7B61     		str	r3, [r7, #20]
 541:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1172              		.loc 1 541 0
 1173 0898 4FF48033 		mov	r3, #65536
 1174 089c BB61     		str	r3, [r7, #24]
 542:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1175              		.loc 1 542 0
 1176 089e 4FF00003 		mov	r3, #0
 1177 08a2 3B61     		str	r3, [r7, #16]
 543:../src/main.cpp **** 
 544:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 1178              		.loc 1 544 0
 1179 08a4 07F10403 		add	r3, r7, #4
 1180 08a8 4FF01800 		mov	r0, #24
 1181 08ac 1946     		mov	r1, r3
 1182 08ae FFF7FEFF 		bl	COMP_Init
 545:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 1183              		.loc 1 545 0
 1184 08b2 4FF01800 		mov	r0, #24
 1185 08b6 4FF00101 		mov	r1, #1
 1186 08ba FFF7FEFF 		bl	COMP_Cmd
 1187              	.LBE7:
 546:../src/main.cpp **** }
 1188              		.loc 1 546 0
 1189 08be 07F12807 		add	r7, r7, #40
 1190 08c2 BD46     		mov	sp, r7
 1191 08c4 80BD     		pop	{r7, pc}
 1192              		.cfi_endproc
 1193              	.LFE117:
 1195 08c6 00BF     		.align	2
 1196              		.global	_Z14calc_gyro_biasv
 1197              		.thumb
 1198              		.thumb_func
 1200              	_Z14calc_gyro_biasv:
 1201              	.LFB118:
 547:../src/main.cpp **** 
 548:../src/main.cpp **** int16_t calc_gyro_bias(void)
 549:../src/main.cpp **** {
 1202              		.loc 1 549 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 16
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
 1206 08c8 80B5     		push	{r7, lr}
 1207              	.LCFI20:
 1208              		.cfi_def_cfa_offset 8
 1209              		.cfi_offset 7, -8
 1210              		.cfi_offset 14, -4
 1211 08ca 84B0     		sub	sp, sp, #16
 1212              	.LCFI21:
 1213              		.cfi_def_cfa_offset 24
 1214 08cc 00AF     		add	r7, sp, #0
 1215              	.LCFI22:
 1216              		.cfi_def_cfa_register 7
 1217              	.LBB8:
 550:../src/main.cpp **** 	int i = 0;
 1218              		.loc 1 550 0
 1219 08ce 4FF00003 		mov	r3, #0
 1220 08d2 FB60     		str	r3, [r7, #12]
 551:../src/main.cpp **** 	int accum_x = 0;
 1221              		.loc 1 551 0
 1222 08d4 4FF00003 		mov	r3, #0
 1223 08d8 BB60     		str	r3, [r7, #8]
 552:../src/main.cpp **** 
 553:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 554:../src/main.cpp **** 		uint16_t un_signed;
 555:../src/main.cpp **** 		int16_t output;
 556:../src/main.cpp **** 	} convert;
 557:../src/main.cpp **** 
 558:../src/main.cpp **** 	uint8_t bytes[2];
 559:../src/main.cpp **** 
 560:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1224              		.loc 1 560 0
 1225 08da 4FF00003 		mov	r3, #0
 1226 08de FB60     		str	r3, [r7, #12]
 1227 08e0 19E0     		b	.L40
 1228              	.L41:
 561:../src/main.cpp **** 	{
 562:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1229              		.loc 1 562 0 discriminator 2
 1230 08e2 3B46     		mov	r3, r7
 1231 08e4 1846     		mov	r0, r3
 1232 08e6 4FF02801 		mov	r1, #40
 1233 08ea 4FF00202 		mov	r2, #2
 1234 08ee FFF7FEFF 		bl	L3GD20_Read
 563:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1235              		.loc 1 563 0 discriminator 2
 1236 08f2 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1237 08f4 4FEA0323 		lsl	r3, r3, #8
 1238 08f8 9AB2     		uxth	r2, r3
 1239 08fa 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1240 08fc 1343     		orrs	r3, r3, r2
 1241 08fe 9BB2     		uxth	r3, r3
 1242 0900 9BB2     		uxth	r3, r3
 1243 0902 BB80     		strh	r3, [r7, #4]	@ movhi
 564:../src/main.cpp **** 		accum_x += convert.output;
 1244              		.loc 1 564 0 discriminator 2
 1245 0904 BB88     		ldrh	r3, [r7, #4]
 1246 0906 1BB2     		sxth	r3, r3
 1247 0908 BA68     		ldr	r2, [r7, #8]
 1248 090a D318     		adds	r3, r2, r3
 1249 090c BB60     		str	r3, [r7, #8]
 560:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1250              		.loc 1 560 0 discriminator 2
 1251 090e FB68     		ldr	r3, [r7, #12]
 1252 0910 03F10103 		add	r3, r3, #1
 1253 0914 FB60     		str	r3, [r7, #12]
 1254              	.L40:
 560:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1255              		.loc 1 560 0 is_stmt 0 discriminator 1
 1256 0916 FB68     		ldr	r3, [r7, #12]
 1257 0918 F92B     		cmp	r3, #249
 1258 091a CCBF     		ite	gt
 1259 091c 0023     		movgt	r3, #0
 1260 091e 0123     		movle	r3, #1
 1261 0920 DBB2     		uxtb	r3, r3
 1262 0922 002B     		cmp	r3, #0
 1263 0924 DDD1     		bne	.L41
 565:../src/main.cpp **** 	}
 566:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1264              		.loc 1 566 0 is_stmt 1
 1265 0926 D7ED027A 		flds	s15, [r7, #8]	@ int
 1266 092a B8EEE77A 		fsitos	s14, s15
 1267 092e DFED077A 		flds	s15, .L43
 1268 0932 C7EE277A 		fdivs	s15, s14, s15
 1269 0936 FDEEE77A 		ftosizs	s15, s15
 1270 093a 17EE903A 		fmrs	r3, s15	@ int
 1271 093e 9BB2     		uxth	r3, r3
 1272 0940 1BB2     		sxth	r3, r3
 1273              	.LBE8:
 567:../src/main.cpp **** }
 1274              		.loc 1 567 0
 1275 0942 1846     		mov	r0, r3
 1276 0944 07F11007 		add	r7, r7, #16
 1277 0948 BD46     		mov	sp, r7
 1278 094a 80BD     		pop	{r7, pc}
 1279              	.L44:
 1280              		.align	2
 1281              	.L43:
 1282 094c 00007A43 		.word	1132068864
 1283              		.cfi_endproc
 1284              	.LFE118:
 1286              		.align	2
 1287              		.global	_Z13adc1_init_DMAv
 1288              		.thumb
 1289              		.thumb_func
 1291              	_Z13adc1_init_DMAv:
 1292              	.LFB119:
 568:../src/main.cpp **** 
 569:../src/main.cpp **** /*
 570:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 571:../src/main.cpp ****  * a user-supplied location in memory
 572:../src/main.cpp ****  * @Args: None
 573:../src/main.cpp ****  * @Return Val: None
 574:../src/main.cpp ****  */
 575:../src/main.cpp **** 
 576:../src/main.cpp **** void adc1_init_DMA(void)
 577:../src/main.cpp **** {
 1293              		.loc 1 577 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 112
 1296              		@ frame_needed = 1, uses_anonymous_args = 0
 1297 0950 80B5     		push	{r7, lr}
 1298              	.LCFI23:
 1299              		.cfi_def_cfa_offset 8
 1300              		.cfi_offset 7, -8
 1301              		.cfi_offset 14, -4
 1302 0952 9CB0     		sub	sp, sp, #112
 1303              	.LCFI24:
 1304              		.cfi_def_cfa_offset 120
 1305 0954 00AF     		add	r7, sp, #0
 1306              	.LCFI25:
 1307              		.cfi_def_cfa_register 7
 1308              	.LBB9:
 578:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 579:../src/main.cpp **** 
 580:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 581:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 582:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 583:../src/main.cpp **** 
 584:../src/main.cpp **** 	/* Configure the ADC clock */
 585:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1309              		.loc 1 585 0
 1310 0956 4FF48870 		mov	r0, #272
 1311 095a FFF7FEFF 		bl	RCC_ADCCLKConfig
 586:../src/main.cpp **** 	/* Enable ADC1 clock */
 587:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1312              		.loc 1 587 0
 1313 095e 4FF08050 		mov	r0, #268435456
 1314 0962 4FF00101 		mov	r1, #1
 1315 0966 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 588:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 589:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1316              		.loc 1 589 0
 1317 096a 4FF40030 		mov	r0, #131072
 1318 096e 4FF00101 		mov	r1, #1
 1319 0972 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 590:../src/main.cpp **** 
 591:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 592:../src/main.cpp **** 
 593:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1320              		.loc 1 593 0
 1321 0976 07F15003 		add	r3, r7, #80
 1322 097a 1846     		mov	r0, r3
 1323 097c FFF7FEFF 		bl	GPIO_StructInit
 594:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1324              		.loc 1 594 0
 1325 0980 4FF00C03 		mov	r3, #12
 1326 0984 3B65     		str	r3, [r7, #80]
 595:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1327              		.loc 1 595 0
 1328 0986 4FF00303 		mov	r3, #3
 1329 098a 87F85430 		strb	r3, [r7, #84]
 596:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1330              		.loc 1 596 0
 1331 098e 4FF00003 		mov	r3, #0
 1332 0992 87F85730 		strb	r3, [r7, #87]
 597:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1333              		.loc 1 597 0
 1334 0996 07F15003 		add	r3, r7, #80
 1335 099a 4FF09040 		mov	r0, #1207959552
 1336 099e 1946     		mov	r1, r3
 1337 09a0 FFF7FEFF 		bl	GPIO_Init
 598:../src/main.cpp **** 
 599:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1338              		.loc 1 599 0
 1339 09a4 3B46     		mov	r3, r7
 1340 09a6 1846     		mov	r0, r3
 1341 09a8 FFF7FEFF 		bl	ADC_StructInit
 600:../src/main.cpp **** 
 601:../src/main.cpp **** 	/* Calibration procedure */
 602:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1342              		.loc 1 602 0
 1343 09ac 4FF0A040 		mov	r0, #1342177280
 1344 09b0 4FF00101 		mov	r1, #1
 1345 09b4 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 603:../src/main.cpp **** 
 604:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 605:../src/main.cpp **** 	int foo;
 606:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1346              		.loc 1 606 0
 1347 09b8 4FF00003 		mov	r3, #0
 1348 09bc FB66     		str	r3, [r7, #108]
 1349 09be 07E0     		b	.L46
 1350              	.L47:
 607:../src/main.cpp **** 	{
 608:../src/main.cpp **** 	  ++foo;
 1351              		.loc 1 608 0 discriminator 2
 1352 09c0 FB6E     		ldr	r3, [r7, #108]
 1353 09c2 03F10103 		add	r3, r3, #1
 1354 09c6 FB66     		str	r3, [r7, #108]
 606:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1355              		.loc 1 606 0 discriminator 2
 1356 09c8 FB6E     		ldr	r3, [r7, #108]
 1357 09ca 03F10103 		add	r3, r3, #1
 1358 09ce FB66     		str	r3, [r7, #108]
 1359              	.L46:
 606:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1360              		.loc 1 606 0 is_stmt 0 discriminator 1
 1361 09d0 FA6E     		ldr	r2, [r7, #108]
 1362 09d2 4FF6FF13 		movw	r3, #63999
 1363 09d6 9A42     		cmp	r2, r3
 1364 09d8 CCBF     		ite	gt
 1365 09da 0023     		movgt	r3, #0
 1366 09dc 0123     		movle	r3, #1
 1367 09de DBB2     		uxtb	r3, r3
 1368 09e0 002B     		cmp	r3, #0
 1369 09e2 EDD1     		bne	.L47
 609:../src/main.cpp **** 	}
 610:../src/main.cpp **** 
 611:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1370              		.loc 1 611 0 is_stmt 1
 1371 09e4 4FF0A040 		mov	r0, #1342177280
 1372 09e8 4FF00001 		mov	r1, #0
 1373 09ec FFF7FEFF 		bl	ADC_SelectCalibrationMode
 612:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1374              		.loc 1 612 0
 1375 09f0 4FF0A040 		mov	r0, #1342177280
 1376 09f4 FFF7FEFF 		bl	ADC_StartCalibration
 613:../src/main.cpp **** 
 614:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1377              		.loc 1 614 0
 1378 09f8 00BF     		nop
 1379              	.L48:
 1380              		.loc 1 614 0 is_stmt 0 discriminator 1
 1381 09fa 4FF0A040 		mov	r0, #1342177280
 1382 09fe FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1383 0a02 0346     		mov	r3, r0
 1384 0a04 002B     		cmp	r3, #0
 1385 0a06 0CBF     		ite	eq
 1386 0a08 0023     		moveq	r3, #0
 1387 0a0a 0123     		movne	r3, #1
 1388 0a0c DBB2     		uxtb	r3, r3
 1389 0a0e 002B     		cmp	r3, #0
 1390 0a10 F3D1     		bne	.L48
 615:../src/main.cpp **** 
 616:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1391              		.loc 1 616 0 is_stmt 1
 1392 0a12 4FF00003 		mov	r3, #0
 1393 0a16 BB65     		str	r3, [r7, #88]
 617:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 1394              		.loc 1 617 0
 1395 0a18 4FF00003 		mov	r3, #0
 1396 0a1c FB65     		str	r3, [r7, #92]
 618:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1397              		.loc 1 618 0
 1398 0a1e 4FF40043 		mov	r3, #32768
 1399 0a22 3B66     		str	r3, [r7, #96]
 619:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1400              		.loc 1 619 0
 1401 0a24 4FF00203 		mov	r3, #2
 1402 0a28 7B66     		str	r3, [r7, #100]
 620:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1403              		.loc 1 620 0
 1404 0a2a 4FF00F03 		mov	r3, #15
 1405 0a2e 87F86830 		strb	r3, [r7, #104]
 621:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1406              		.loc 1 621 0
 1407 0a32 07F15803 		add	r3, r7, #88
 1408 0a36 4FF0A040 		mov	r0, #1342177280
 1409 0a3a 1946     		mov	r1, r3
 1410 0a3c FFF7FEFF 		bl	ADC_CommonInit
 622:../src/main.cpp **** 
 623:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1411              		.loc 1 623 0
 1412 0a40 4FF40053 		mov	r3, #8192
 1413 0a44 3B60     		str	r3, [r7, #0]
 624:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1414              		.loc 1 624 0
 1415 0a46 4FF00003 		mov	r3, #0
 1416 0a4a 7B60     		str	r3, [r7, #4]
 625:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1417              		.loc 1 625 0
 1418 0a4c 4FF00003 		mov	r3, #0
 1419 0a50 BB60     		str	r3, [r7, #8]
 626:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1420              		.loc 1 626 0
 1421 0a52 4FF00003 		mov	r3, #0
 1422 0a56 FB60     		str	r3, [r7, #12]
 627:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1423              		.loc 1 627 0
 1424 0a58 4FF00003 		mov	r3, #0
 1425 0a5c 3B61     		str	r3, [r7, #16]
 628:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1426              		.loc 1 628 0
 1427 0a5e 4FF00003 		mov	r3, #0
 1428 0a62 7B61     		str	r3, [r7, #20]
 629:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1429              		.loc 1 629 0
 1430 0a64 4FF00003 		mov	r3, #0
 1431 0a68 BB61     		str	r3, [r7, #24]
 630:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1432              		.loc 1 630 0
 1433 0a6a 4FF00203 		mov	r3, #2
 1434 0a6e 3B77     		strb	r3, [r7, #28]
 631:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1435              		.loc 1 631 0
 1436 0a70 3B46     		mov	r3, r7
 1437 0a72 4FF0A040 		mov	r0, #1342177280
 1438 0a76 1946     		mov	r1, r3
 1439 0a78 FFF7FEFF 		bl	ADC_Init
 632:../src/main.cpp **** 
 633:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 634:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1440              		.loc 1 634 0
 1441 0a7c 4FF0A040 		mov	r0, #1342177280
 1442 0a80 4FF00301 		mov	r1, #3
 1443 0a84 4FF00102 		mov	r2, #1
 1444 0a88 4FF00703 		mov	r3, #7
 1445 0a8c FFF7FEFF 		bl	ADC_RegularChannelConfig
 635:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1446              		.loc 1 635 0
 1447 0a90 4FF0A040 		mov	r0, #1342177280
 1448 0a94 4FF00401 		mov	r1, #4
 1449 0a98 4FF00202 		mov	r2, #2
 1450 0a9c 4FF00703 		mov	r3, #7
 1451 0aa0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 636:../src/main.cpp **** 
 637:../src/main.cpp **** 	/* Enable ADC1 */
 638:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1452              		.loc 1 638 0
 1453 0aa4 4FF0A040 		mov	r0, #1342177280
 1454 0aa8 4FF00101 		mov	r1, #1
 1455 0aac FFF7FEFF 		bl	ADC_Cmd
 639:../src/main.cpp **** 
 640:../src/main.cpp **** 	/* wait for ADRDY */
 641:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1456              		.loc 1 641 0
 1457 0ab0 00BF     		nop
 1458              	.L49:
 1459              		.loc 1 641 0 is_stmt 0 discriminator 1
 1460 0ab2 4FF0A040 		mov	r0, #1342177280
 1461 0ab6 4FF00101 		mov	r1, #1
 1462 0aba FFF7FEFF 		bl	ADC_GetFlagStatus
 1463 0abe 0346     		mov	r3, r0
 1464 0ac0 002B     		cmp	r3, #0
 1465 0ac2 14BF     		ite	ne
 1466 0ac4 0023     		movne	r3, #0
 1467 0ac6 0123     		moveq	r3, #1
 1468 0ac8 DBB2     		uxtb	r3, r3
 1469 0aca 002B     		cmp	r3, #0
 1470 0acc F1D1     		bne	.L49
 642:../src/main.cpp **** 
 643:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 644:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1471              		.loc 1 644 0 is_stmt 1
 1472 0ace 4FF0A040 		mov	r0, #1342177280
 1473 0ad2 FFF7FEFF 		bl	ADC_StartConversion
 645:../src/main.cpp **** 
 646:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1474              		.loc 1 646 0
 1475 0ad6 4FF00100 		mov	r0, #1
 1476 0ada 4FF00101 		mov	r1, #1
 1477 0ade FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 647:../src/main.cpp **** 
 648:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 649:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1478              		.loc 1 649 0
 1479 0ae2 07F12003 		add	r3, r7, #32
 1480 0ae6 1846     		mov	r0, r3
 1481 0ae8 FFF7FEFF 		bl	DMA_StructInit
 650:../src/main.cpp **** 
 651:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1482              		.loc 1 651 0
 1483 0aec 4FF00800 		mov	r0, #8
 1484 0af0 C4F20200 		movt	r0, 16386
 1485 0af4 FFF7FEFF 		bl	DMA_DeInit
 652:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1486              		.loc 1 652 0
 1487 0af8 4FF04003 		mov	r3, #64
 1488 0afc C5F20003 		movt	r3, 20480
 1489 0b00 3B62     		str	r3, [r7, #32]
 653:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1490              		.loc 1 653 0
 1491 0b02 40F20003 		movw	r3, #:lower16:adcData
 1492 0b06 C0F20003 		movt	r3, #:upper16:adcData
 1493 0b0a 7B62     		str	r3, [r7, #36]
 654:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1494              		.loc 1 654 0
 1495 0b0c 4FF00003 		mov	r3, #0
 1496 0b10 BB62     		str	r3, [r7, #40]
 655:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1497              		.loc 1 655 0
 1498 0b12 4FF00203 		mov	r3, #2
 1499 0b16 BB85     		strh	r3, [r7, #44]	@ movhi
 656:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1500              		.loc 1 656 0
 1501 0b18 4FF00003 		mov	r3, #0
 1502 0b1c 3B63     		str	r3, [r7, #48]
 657:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1503              		.loc 1 657 0
 1504 0b1e 4FF08003 		mov	r3, #128
 1505 0b22 7B63     		str	r3, [r7, #52]
 658:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1506              		.loc 1 658 0
 1507 0b24 4FF40073 		mov	r3, #512
 1508 0b28 BB63     		str	r3, [r7, #56]
 659:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1509              		.loc 1 659 0
 1510 0b2a 4FF40063 		mov	r3, #2048
 1511 0b2e FB63     		str	r3, [r7, #60]
 660:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1512              		.loc 1 660 0
 1513 0b30 4FF02003 		mov	r3, #32
 1514 0b34 3B64     		str	r3, [r7, #64]
 661:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1515              		.loc 1 661 0
 1516 0b36 4FF40053 		mov	r3, #8192
 1517 0b3a 7B64     		str	r3, [r7, #68]
 662:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1518              		.loc 1 662 0
 1519 0b3c 4FF00003 		mov	r3, #0
 1520 0b40 BB64     		str	r3, [r7, #72]
 663:../src/main.cpp **** 
 664:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1521              		.loc 1 664 0
 1522 0b42 07F12003 		add	r3, r7, #32
 1523 0b46 4FF00800 		mov	r0, #8
 1524 0b4a C4F20200 		movt	r0, 16386
 1525 0b4e 1946     		mov	r1, r3
 1526 0b50 FFF7FEFF 		bl	DMA_Init
 665:../src/main.cpp **** 
 666:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 667:../src/main.cpp **** 
 668:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1527              		.loc 1 668 0
 1528 0b54 4FF00B03 		mov	r3, #11
 1529 0b58 87F84C30 		strb	r3, [r7, #76]
 669:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1530              		.loc 1 669 0
 1531 0b5c 4FF00203 		mov	r3, #2
 1532 0b60 87F84D30 		strb	r3, [r7, #77]
 670:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1533              		.loc 1 670 0
 1534 0b64 4FF00003 		mov	r3, #0
 1535 0b68 87F84E30 		strb	r3, [r7, #78]
 671:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1536              		.loc 1 671 0
 1537 0b6c 4FF00103 		mov	r3, #1
 1538 0b70 87F84F30 		strb	r3, [r7, #79]
 672:../src/main.cpp **** 
 673:../src/main.cpp **** 	NVIC_Init(&nv);
 1539              		.loc 1 673 0
 1540 0b74 07F14C03 		add	r3, r7, #76
 1541 0b78 1846     		mov	r0, r3
 1542 0b7a FFF7FEFF 		bl	NVIC_Init
 674:../src/main.cpp **** 
 675:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1543              		.loc 1 675 0
 1544 0b7e 4FF00800 		mov	r0, #8
 1545 0b82 C4F20200 		movt	r0, 16386
 1546 0b86 4FF00201 		mov	r1, #2
 1547 0b8a 4FF00102 		mov	r2, #1
 1548 0b8e FFF7FEFF 		bl	DMA_ITConfig
 676:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1549              		.loc 1 676 0
 1550 0b92 4FF00800 		mov	r0, #8
 1551 0b96 C4F20200 		movt	r0, 16386
 1552 0b9a 4FF00101 		mov	r1, #1
 1553 0b9e FFF7FEFF 		bl	DMA_Cmd
 677:../src/main.cpp **** 
 678:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1554              		.loc 1 678 0
 1555 0ba2 4FF0A040 		mov	r0, #1342177280
 1556 0ba6 4FF00201 		mov	r1, #2
 1557 0baa FFF7FEFF 		bl	ADC_DMAConfig
 679:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1558              		.loc 1 679 0
 1559 0bae 4FF0A040 		mov	r0, #1342177280
 1560 0bb2 4FF00101 		mov	r1, #1
 1561 0bb6 FFF7FEFF 		bl	ADC_DMACmd
 1562              	.LBE9:
 680:../src/main.cpp **** }
 1563              		.loc 1 680 0
 1564 0bba 07F17007 		add	r7, r7, #112
 1565 0bbe BD46     		mov	sp, r7
 1566 0bc0 80BD     		pop	{r7, pc}
 1567              		.cfi_endproc
 1568              	.LFE119:
 1570 0bc2 00BF     		.align	2
 1571              		.global	_Z13adc2_init_DMAv
 1572              		.thumb
 1573              		.thumb_func
 1575              	_Z13adc2_init_DMAv:
 1576              	.LFB120:
 681:../src/main.cpp **** 
 682:../src/main.cpp **** void adc2_init_DMA(void)
 683:../src/main.cpp **** {
 1577              		.loc 1 683 0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 112
 1580              		@ frame_needed = 1, uses_anonymous_args = 0
 1581 0bc4 80B5     		push	{r7, lr}
 1582              	.LCFI26:
 1583              		.cfi_def_cfa_offset 8
 1584              		.cfi_offset 7, -8
 1585              		.cfi_offset 14, -4
 1586 0bc6 9CB0     		sub	sp, sp, #112
 1587              	.LCFI27:
 1588              		.cfi_def_cfa_offset 120
 1589 0bc8 00AF     		add	r7, sp, #0
 1590              	.LCFI28:
 1591              		.cfi_def_cfa_register 7
 1592              	.LBB10:
 684:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 685:../src/main.cpp **** 
 686:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 687:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 688:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 689:../src/main.cpp **** 
 690:../src/main.cpp **** 	/* Configure the ADC clock */
 691:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1593              		.loc 1 691 0
 1594 0bca 4FF48870 		mov	r0, #272
 1595 0bce FFF7FEFF 		bl	RCC_ADCCLKConfig
 692:../src/main.cpp **** 	/* Enable ADC2 clock */
 693:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1596              		.loc 1 693 0
 1597 0bd2 4FF08050 		mov	r0, #268435456
 1598 0bd6 4FF00101 		mov	r1, #1
 1599 0bda FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 694:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 695:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1600              		.loc 1 695 0
 1601 0bde 4FF46020 		mov	r0, #917504
 1602 0be2 4FF00101 		mov	r1, #1
 1603 0be6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 696:../src/main.cpp **** 
 697:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 698:../src/main.cpp **** 
 699:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1604              		.loc 1 699 0
 1605 0bea 07F15003 		add	r3, r7, #80
 1606 0bee 1846     		mov	r0, r3
 1607 0bf0 FFF7FEFF 		bl	GPIO_StructInit
 700:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1608              		.loc 1 700 0
 1609 0bf4 4FF01003 		mov	r3, #16
 1610 0bf8 3B65     		str	r3, [r7, #80]
 701:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1611              		.loc 1 701 0
 1612 0bfa 4FF00303 		mov	r3, #3
 1613 0bfe 87F85430 		strb	r3, [r7, #84]
 702:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1614              		.loc 1 702 0
 1615 0c02 4FF00003 		mov	r3, #0
 1616 0c06 87F85730 		strb	r3, [r7, #87]
 703:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1617              		.loc 1 703 0
 1618 0c0a 4FF00303 		mov	r3, #3
 1619 0c0e 87F85530 		strb	r3, [r7, #85]
 704:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1620              		.loc 1 704 0
 1621 0c12 07F15003 		add	r3, r7, #80
 1622 0c16 4FF09040 		mov	r0, #1207959552
 1623 0c1a 1946     		mov	r1, r3
 1624 0c1c FFF7FEFF 		bl	GPIO_Init
 705:../src/main.cpp **** 
 706:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1625              		.loc 1 706 0
 1626 0c20 07F15003 		add	r3, r7, #80
 1627 0c24 1846     		mov	r0, r3
 1628 0c26 FFF7FEFF 		bl	GPIO_StructInit
 707:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1629              		.loc 1 707 0
 1630 0c2a 4FF00403 		mov	r3, #4
 1631 0c2e 3B65     		str	r3, [r7, #80]
 708:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1632              		.loc 1 708 0
 1633 0c30 4FF00303 		mov	r3, #3
 1634 0c34 87F85430 		strb	r3, [r7, #84]
 709:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1635              		.loc 1 709 0
 1636 0c38 4FF00003 		mov	r3, #0
 1637 0c3c 87F85730 		strb	r3, [r7, #87]
 710:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1638              		.loc 1 710 0
 1639 0c40 07F15003 		add	r3, r7, #80
 1640 0c44 4FF48060 		mov	r0, #1024
 1641 0c48 C4F60000 		movt	r0, 18432
 1642 0c4c 1946     		mov	r1, r3
 1643 0c4e FFF7FEFF 		bl	GPIO_Init
 711:../src/main.cpp **** 
 712:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1644              		.loc 1 712 0
 1645 0c52 07F15003 		add	r3, r7, #80
 1646 0c56 1846     		mov	r0, r3
 1647 0c58 FFF7FEFF 		bl	GPIO_StructInit
 713:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 1648              		.loc 1 713 0
 1649 0c5c 4FF03003 		mov	r3, #48
 1650 0c60 3B65     		str	r3, [r7, #80]
 714:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1651              		.loc 1 714 0
 1652 0c62 4FF00303 		mov	r3, #3
 1653 0c66 87F85430 		strb	r3, [r7, #84]
 715:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1654              		.loc 1 715 0
 1655 0c6a 4FF00003 		mov	r3, #0
 1656 0c6e 87F85730 		strb	r3, [r7, #87]
 716:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 1657              		.loc 1 716 0
 1658 0c72 07F15003 		add	r3, r7, #80
 1659 0c76 4FF40060 		mov	r0, #2048
 1660 0c7a C4F60000 		movt	r0, 18432
 1661 0c7e 1946     		mov	r1, r3
 1662 0c80 FFF7FEFF 		bl	GPIO_Init
 717:../src/main.cpp **** 
 718:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1663              		.loc 1 718 0
 1664 0c84 3B46     		mov	r3, r7
 1665 0c86 1846     		mov	r0, r3
 1666 0c88 FFF7FEFF 		bl	ADC_StructInit
 719:../src/main.cpp **** 
 720:../src/main.cpp **** 	/* Calibration procedure */
 721:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 1667              		.loc 1 721 0
 1668 0c8c 4FF48070 		mov	r0, #256
 1669 0c90 C5F20000 		movt	r0, 20480
 1670 0c94 4FF00101 		mov	r1, #1
 1671 0c98 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 722:../src/main.cpp **** 
 723:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 724:../src/main.cpp **** 	int foo;
 725:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1672              		.loc 1 725 0
 1673 0c9c 4FF00003 		mov	r3, #0
 1674 0ca0 FB66     		str	r3, [r7, #108]
 1675 0ca2 07E0     		b	.L51
 1676              	.L52:
 726:../src/main.cpp **** 	{
 727:../src/main.cpp **** 	  ++foo;
 1677              		.loc 1 727 0 discriminator 2
 1678 0ca4 FB6E     		ldr	r3, [r7, #108]
 1679 0ca6 03F10103 		add	r3, r3, #1
 1680 0caa FB66     		str	r3, [r7, #108]
 725:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1681              		.loc 1 725 0 discriminator 2
 1682 0cac FB6E     		ldr	r3, [r7, #108]
 1683 0cae 03F10103 		add	r3, r3, #1
 1684 0cb2 FB66     		str	r3, [r7, #108]
 1685              	.L51:
 725:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1686              		.loc 1 725 0 is_stmt 0 discriminator 1
 1687 0cb4 FA6E     		ldr	r2, [r7, #108]
 1688 0cb6 4FF6FF13 		movw	r3, #63999
 1689 0cba 9A42     		cmp	r2, r3
 1690 0cbc CCBF     		ite	gt
 1691 0cbe 0023     		movgt	r3, #0
 1692 0cc0 0123     		movle	r3, #1
 1693 0cc2 DBB2     		uxtb	r3, r3
 1694 0cc4 002B     		cmp	r3, #0
 1695 0cc6 EDD1     		bne	.L52
 728:../src/main.cpp **** 	}
 729:../src/main.cpp **** 
 730:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 1696              		.loc 1 730 0 is_stmt 1
 1697 0cc8 4FF48070 		mov	r0, #256
 1698 0ccc C5F20000 		movt	r0, 20480
 1699 0cd0 4FF00001 		mov	r1, #0
 1700 0cd4 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 731:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 1701              		.loc 1 731 0
 1702 0cd8 4FF48070 		mov	r0, #256
 1703 0cdc C5F20000 		movt	r0, 20480
 1704 0ce0 FFF7FEFF 		bl	ADC_StartCalibration
 732:../src/main.cpp **** 
 733:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 1705              		.loc 1 733 0
 1706 0ce4 00BF     		nop
 1707              	.L53:
 1708              		.loc 1 733 0 is_stmt 0 discriminator 1
 1709 0ce6 4FF48070 		mov	r0, #256
 1710 0cea C5F20000 		movt	r0, 20480
 1711 0cee FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1712 0cf2 0346     		mov	r3, r0
 1713 0cf4 002B     		cmp	r3, #0
 1714 0cf6 0CBF     		ite	eq
 1715 0cf8 0023     		moveq	r3, #0
 1716 0cfa 0123     		movne	r3, #1
 1717 0cfc DBB2     		uxtb	r3, r3
 1718 0cfe 002B     		cmp	r3, #0
 1719 0d00 F1D1     		bne	.L53
 734:../src/main.cpp **** 
 735:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1720              		.loc 1 735 0 is_stmt 1
 1721 0d02 4FF00003 		mov	r3, #0
 1722 0d06 BB65     		str	r3, [r7, #88]
 736:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1723              		.loc 1 736 0
 1724 0d08 4FF00003 		mov	r3, #0
 1725 0d0c FB65     		str	r3, [r7, #92]
 737:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1726              		.loc 1 737 0
 1727 0d0e 4FF40043 		mov	r3, #32768
 1728 0d12 3B66     		str	r3, [r7, #96]
 738:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1729              		.loc 1 738 0
 1730 0d14 4FF00203 		mov	r3, #2
 1731 0d18 7B66     		str	r3, [r7, #100]
 739:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 1732              		.loc 1 739 0
 1733 0d1a 4FF00F03 		mov	r3, #15
 1734 0d1e 87F86830 		strb	r3, [r7, #104]
 740:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 1735              		.loc 1 740 0
 1736 0d22 07F15803 		add	r3, r7, #88
 1737 0d26 4FF48070 		mov	r0, #256
 1738 0d2a C5F20000 		movt	r0, 20480
 1739 0d2e 1946     		mov	r1, r3
 1740 0d30 FFF7FEFF 		bl	ADC_CommonInit
 741:../src/main.cpp **** 
 742:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1741              		.loc 1 742 0
 1742 0d34 4FF40053 		mov	r3, #8192
 1743 0d38 3B60     		str	r3, [r7, #0]
 743:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1744              		.loc 1 743 0
 1745 0d3a 4FF00003 		mov	r3, #0
 1746 0d3e 7B60     		str	r3, [r7, #4]
 744:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1747              		.loc 1 744 0
 1748 0d40 4FF00003 		mov	r3, #0
 1749 0d44 BB60     		str	r3, [r7, #8]
 745:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1750              		.loc 1 745 0
 1751 0d46 4FF00003 		mov	r3, #0
 1752 0d4a FB60     		str	r3, [r7, #12]
 746:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1753              		.loc 1 746 0
 1754 0d4c 4FF00003 		mov	r3, #0
 1755 0d50 3B61     		str	r3, [r7, #16]
 747:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1756              		.loc 1 747 0
 1757 0d52 4FF00003 		mov	r3, #0
 1758 0d56 7B61     		str	r3, [r7, #20]
 748:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1759              		.loc 1 748 0
 1760 0d58 4FF00003 		mov	r3, #0
 1761 0d5c BB61     		str	r3, [r7, #24]
 749:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 1762              		.loc 1 749 0
 1763 0d5e 4FF00403 		mov	r3, #4
 1764 0d62 3B77     		strb	r3, [r7, #28]
 750:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 1765              		.loc 1 750 0
 1766 0d64 3B46     		mov	r3, r7
 1767 0d66 4FF48070 		mov	r0, #256
 1768 0d6a C5F20000 		movt	r0, 20480
 1769 0d6e 1946     		mov	r1, r3
 1770 0d70 FFF7FEFF 		bl	ADC_Init
 751:../src/main.cpp **** 
 752:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 753:../src/main.cpp **** 
 754:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1771              		.loc 1 754 0
 1772 0d74 4FF48070 		mov	r0, #256
 1773 0d78 C5F20000 		movt	r0, 20480
 1774 0d7c 4FF00101 		mov	r1, #1
 1775 0d80 4FF00102 		mov	r2, #1
 1776 0d84 4FF00703 		mov	r3, #7
 1777 0d88 FFF7FEFF 		bl	ADC_RegularChannelConfig
 755:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1778              		.loc 1 755 0
 1779 0d8c 4FF48070 		mov	r0, #256
 1780 0d90 C5F20000 		movt	r0, 20480
 1781 0d94 4FF00501 		mov	r1, #5
 1782 0d98 4FF00202 		mov	r2, #2
 1783 0d9c 4FF00703 		mov	r3, #7
 1784 0da0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 756:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 1785              		.loc 1 756 0
 1786 0da4 4FF48070 		mov	r0, #256
 1787 0da8 C5F20000 		movt	r0, 20480
 1788 0dac 4FF00B01 		mov	r1, #11
 1789 0db0 4FF00302 		mov	r2, #3
 1790 0db4 4FF00703 		mov	r3, #7
 1791 0db8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 757:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 1792              		.loc 1 757 0
 1793 0dbc 4FF48070 		mov	r0, #256
 1794 0dc0 C5F20000 		movt	r0, 20480
 1795 0dc4 4FF00C01 		mov	r1, #12
 1796 0dc8 4FF00402 		mov	r2, #4
 1797 0dcc 4FF00703 		mov	r3, #7
 1798 0dd0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 758:../src/main.cpp **** 
 759:../src/main.cpp **** 	/* Enable ADC2 */
 760:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 1799              		.loc 1 760 0
 1800 0dd4 4FF48070 		mov	r0, #256
 1801 0dd8 C5F20000 		movt	r0, 20480
 1802 0ddc 4FF00101 		mov	r1, #1
 1803 0de0 FFF7FEFF 		bl	ADC_Cmd
 761:../src/main.cpp **** 
 762:../src/main.cpp **** 	/* wait for ADRDY */
 763:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 1804              		.loc 1 763 0
 1805 0de4 00BF     		nop
 1806              	.L54:
 1807              		.loc 1 763 0 is_stmt 0 discriminator 1
 1808 0de6 4FF48070 		mov	r0, #256
 1809 0dea C5F20000 		movt	r0, 20480
 1810 0dee 4FF00101 		mov	r1, #1
 1811 0df2 FFF7FEFF 		bl	ADC_GetFlagStatus
 1812 0df6 0346     		mov	r3, r0
 1813 0df8 002B     		cmp	r3, #0
 1814 0dfa 14BF     		ite	ne
 1815 0dfc 0023     		movne	r3, #0
 1816 0dfe 0123     		moveq	r3, #1
 1817 0e00 DBB2     		uxtb	r3, r3
 1818 0e02 002B     		cmp	r3, #0
 1819 0e04 EFD1     		bne	.L54
 764:../src/main.cpp **** 
 765:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 766:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 1820              		.loc 1 766 0 is_stmt 1
 1821 0e06 4FF48070 		mov	r0, #256
 1822 0e0a C5F20000 		movt	r0, 20480
 1823 0e0e FFF7FEFF 		bl	ADC_StartConversion
 767:../src/main.cpp **** 
 768:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 1824              		.loc 1 768 0
 1825 0e12 4FF00200 		mov	r0, #2
 1826 0e16 4FF00101 		mov	r1, #1
 1827 0e1a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 769:../src/main.cpp **** 
 770:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 771:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1828              		.loc 1 771 0
 1829 0e1e 07F12003 		add	r3, r7, #32
 1830 0e22 1846     		mov	r0, r3
 1831 0e24 FFF7FEFF 		bl	DMA_StructInit
 772:../src/main.cpp **** 
 773:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 1832              		.loc 1 773 0
 1833 0e28 4FF48160 		mov	r0, #1032
 1834 0e2c C4F20200 		movt	r0, 16386
 1835 0e30 FFF7FEFF 		bl	DMA_DeInit
 774:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 1836              		.loc 1 774 0
 1837 0e34 4FF4A073 		mov	r3, #320
 1838 0e38 C5F20003 		movt	r3, 20480
 1839 0e3c 3B62     		str	r3, [r7, #32]
 775:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 1840              		.loc 1 775 0
 1841 0e3e 40F20003 		movw	r3, #:lower16:adc2_data
 1842 0e42 C0F20003 		movt	r3, #:upper16:adc2_data
 1843 0e46 7B62     		str	r3, [r7, #36]
 776:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1844              		.loc 1 776 0
 1845 0e48 4FF00003 		mov	r3, #0
 1846 0e4c BB62     		str	r3, [r7, #40]
 777:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 1847              		.loc 1 777 0
 1848 0e4e 4FF00403 		mov	r3, #4
 1849 0e52 BB85     		strh	r3, [r7, #44]	@ movhi
 778:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1850              		.loc 1 778 0
 1851 0e54 4FF00003 		mov	r3, #0
 1852 0e58 3B63     		str	r3, [r7, #48]
 779:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1853              		.loc 1 779 0
 1854 0e5a 4FF08003 		mov	r3, #128
 1855 0e5e 7B63     		str	r3, [r7, #52]
 780:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1856              		.loc 1 780 0
 1857 0e60 4FF40073 		mov	r3, #512
 1858 0e64 BB63     		str	r3, [r7, #56]
 781:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1859              		.loc 1 781 0
 1860 0e66 4FF40063 		mov	r3, #2048
 1861 0e6a FB63     		str	r3, [r7, #60]
 782:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1862              		.loc 1 782 0
 1863 0e6c 4FF02003 		mov	r3, #32
 1864 0e70 3B64     		str	r3, [r7, #64]
 783:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1865              		.loc 1 783 0
 1866 0e72 4FF40053 		mov	r3, #8192
 1867 0e76 7B64     		str	r3, [r7, #68]
 784:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1868              		.loc 1 784 0
 1869 0e78 4FF00003 		mov	r3, #0
 1870 0e7c BB64     		str	r3, [r7, #72]
 785:../src/main.cpp **** 
 786:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 1871              		.loc 1 786 0
 1872 0e7e 07F12003 		add	r3, r7, #32
 1873 0e82 4FF48160 		mov	r0, #1032
 1874 0e86 C4F20200 		movt	r0, 16386
 1875 0e8a 1946     		mov	r1, r3
 1876 0e8c FFF7FEFF 		bl	DMA_Init
 787:../src/main.cpp **** 
 788:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 789:../src/main.cpp **** 
 790:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 1877              		.loc 1 790 0
 1878 0e90 4FF03803 		mov	r3, #56
 1879 0e94 87F84C30 		strb	r3, [r7, #76]
 791:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1880              		.loc 1 791 0
 1881 0e98 4FF00203 		mov	r3, #2
 1882 0e9c 87F84D30 		strb	r3, [r7, #77]
 792:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1883              		.loc 1 792 0
 1884 0ea0 4FF00003 		mov	r3, #0
 1885 0ea4 87F84E30 		strb	r3, [r7, #78]
 793:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1886              		.loc 1 793 0
 1887 0ea8 4FF00103 		mov	r3, #1
 1888 0eac 87F84F30 		strb	r3, [r7, #79]
 794:../src/main.cpp **** 
 795:../src/main.cpp **** 	NVIC_Init(&nv);
 1889              		.loc 1 795 0
 1890 0eb0 07F14C03 		add	r3, r7, #76
 1891 0eb4 1846     		mov	r0, r3
 1892 0eb6 FFF7FEFF 		bl	NVIC_Init
 796:../src/main.cpp **** 
 797:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 1893              		.loc 1 797 0
 1894 0eba 4FF48160 		mov	r0, #1032
 1895 0ebe C4F20200 		movt	r0, 16386
 1896 0ec2 4FF00201 		mov	r1, #2
 1897 0ec6 4FF00102 		mov	r2, #1
 1898 0eca FFF7FEFF 		bl	DMA_ITConfig
 798:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 1899              		.loc 1 798 0
 1900 0ece 4FF48160 		mov	r0, #1032
 1901 0ed2 C4F20200 		movt	r0, 16386
 1902 0ed6 4FF00101 		mov	r1, #1
 1903 0eda FFF7FEFF 		bl	DMA_Cmd
 799:../src/main.cpp **** 
 800:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 1904              		.loc 1 800 0
 1905 0ede 4FF48070 		mov	r0, #256
 1906 0ee2 C5F20000 		movt	r0, 20480
 1907 0ee6 4FF00201 		mov	r1, #2
 1908 0eea FFF7FEFF 		bl	ADC_DMAConfig
 801:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 1909              		.loc 1 801 0
 1910 0eee 4FF48070 		mov	r0, #256
 1911 0ef2 C5F20000 		movt	r0, 20480
 1912 0ef6 4FF00101 		mov	r1, #1
 1913 0efa FFF7FEFF 		bl	ADC_DMACmd
 1914              	.LBE10:
 802:../src/main.cpp **** }
 1915              		.loc 1 802 0
 1916 0efe 07F17007 		add	r7, r7, #112
 1917 0f02 BD46     		mov	sp, r7
 1918 0f04 80BD     		pop	{r7, pc}
 1919              		.cfi_endproc
 1920              	.LFE120:
 1922 0f06 00BF     		.align	2
 1923              		.global	_Z21battery_watchdog_initv
 1924              		.thumb
 1925              		.thumb_func
 1927              	_Z21battery_watchdog_initv:
 1928              	.LFB121:
 803:../src/main.cpp **** 
 804:../src/main.cpp **** void battery_watchdog_init(void)
 805:../src/main.cpp **** {
 1929              		.loc 1 805 0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 72
 1932              		@ frame_needed = 1, uses_anonymous_args = 0
 1933 0f08 80B5     		push	{r7, lr}
 1934              	.LCFI29:
 1935              		.cfi_def_cfa_offset 8
 1936              		.cfi_offset 7, -8
 1937              		.cfi_offset 14, -4
 1938 0f0a 92B0     		sub	sp, sp, #72
 1939              	.LCFI30:
 1940              		.cfi_def_cfa_offset 80
 1941 0f0c 00AF     		add	r7, sp, #0
 1942              	.LCFI31:
 1943              		.cfi_def_cfa_register 7
 1944              	.LBB11:
 806:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 807:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 808:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 809:../src/main.cpp **** 	/* Configure the ADC clock */
 810:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 1945              		.loc 1 810 0
 1946 0f0e 4FF45050 		mov	r0, #13312
 1947 0f12 C1F20000 		movt	r0, 4096
 1948 0f16 FFF7FEFF 		bl	RCC_ADCCLKConfig
 811:../src/main.cpp **** 
 812:../src/main.cpp **** 	/* Enable ADC1 clock */
 813:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 1949              		.loc 1 813 0
 1950 0f1a 4FF00050 		mov	r0, #536870912
 1951 0f1e 4FF00101 		mov	r1, #1
 1952 0f22 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 814:../src/main.cpp **** 	/* ADC Channel configuration */
 815:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 816:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 1953              		.loc 1 816 0
 1954 0f26 4FF41010 		mov	r0, #2359296
 1955 0f2a 4FF00101 		mov	r1, #1
 1956 0f2e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 817:../src/main.cpp **** 
 818:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 819:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1957              		.loc 1 819 0
 1958 0f32 07F12803 		add	r3, r7, #40
 1959 0f36 1846     		mov	r0, r3
 1960 0f38 FFF7FEFF 		bl	GPIO_StructInit
 820:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 1961              		.loc 1 820 0
 1962 0f3c 42F20203 		movw	r3, #8194
 1963 0f40 BB62     		str	r3, [r7, #40]
 821:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1964              		.loc 1 821 0
 1965 0f42 4FF00303 		mov	r3, #3
 1966 0f46 87F82C30 		strb	r3, [r7, #44]
 822:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1967              		.loc 1 822 0
 1968 0f4a 4FF00003 		mov	r3, #0
 1969 0f4e 87F82F30 		strb	r3, [r7, #47]
 823:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1970              		.loc 1 823 0
 1971 0f52 07F12803 		add	r3, r7, #40
 1972 0f56 4FF48060 		mov	r0, #1024
 1973 0f5a C4F60000 		movt	r0, 18432
 1974 0f5e 1946     		mov	r1, r3
 1975 0f60 FFF7FEFF 		bl	GPIO_Init
 824:../src/main.cpp **** /*
 825:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 826:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 827:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 828:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 829:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 830:../src/main.cpp **** */
 831:../src/main.cpp **** 
 832:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1976              		.loc 1 832 0
 1977 0f64 07F10403 		add	r3, r7, #4
 1978 0f68 1846     		mov	r0, r3
 1979 0f6a FFF7FEFF 		bl	ADC_StructInit
 833:../src/main.cpp **** 
 834:../src/main.cpp **** 	/* Calibration procedure */
 835:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 1980              		.loc 1 835 0
 1981 0f6e 4FF48060 		mov	r0, #1024
 1982 0f72 C5F20000 		movt	r0, 20480
 1983 0f76 4FF00101 		mov	r1, #1
 1984 0f7a FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 836:../src/main.cpp **** 
 837:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 838:../src/main.cpp **** 	int foo;
 839:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1985              		.loc 1 839 0
 1986 0f7e 4FF00003 		mov	r3, #0
 1987 0f82 7B64     		str	r3, [r7, #68]
 1988 0f84 07E0     		b	.L56
 1989              	.L57:
 840:../src/main.cpp **** 	{
 841:../src/main.cpp **** 	  ++foo;
 1990              		.loc 1 841 0 discriminator 2
 1991 0f86 7B6C     		ldr	r3, [r7, #68]
 1992 0f88 03F10103 		add	r3, r3, #1
 1993 0f8c 7B64     		str	r3, [r7, #68]
 839:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1994              		.loc 1 839 0 discriminator 2
 1995 0f8e 7B6C     		ldr	r3, [r7, #68]
 1996 0f90 03F10103 		add	r3, r3, #1
 1997 0f94 7B64     		str	r3, [r7, #68]
 1998              	.L56:
 839:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1999              		.loc 1 839 0 is_stmt 0 discriminator 1
 2000 0f96 7A6C     		ldr	r2, [r7, #68]
 2001 0f98 47F6FF43 		movw	r3, #31999
 2002 0f9c 9A42     		cmp	r2, r3
 2003 0f9e CCBF     		ite	gt
 2004 0fa0 0023     		movgt	r3, #0
 2005 0fa2 0123     		movle	r3, #1
 2006 0fa4 DBB2     		uxtb	r3, r3
 2007 0fa6 002B     		cmp	r3, #0
 2008 0fa8 EDD1     		bne	.L57
 842:../src/main.cpp **** 	}
 843:../src/main.cpp **** 
 844:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 2009              		.loc 1 844 0 is_stmt 1
 2010 0faa 4FF48060 		mov	r0, #1024
 2011 0fae C5F20000 		movt	r0, 20480
 2012 0fb2 4FF00001 		mov	r1, #0
 2013 0fb6 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 845:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 2014              		.loc 1 845 0
 2015 0fba 4FF48060 		mov	r0, #1024
 2016 0fbe C5F20000 		movt	r0, 20480
 2017 0fc2 FFF7FEFF 		bl	ADC_StartCalibration
 846:../src/main.cpp **** 
 847:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 2018              		.loc 1 847 0
 2019 0fc6 00BF     		nop
 2020              	.L58:
 2021              		.loc 1 847 0 is_stmt 0 discriminator 1
 2022 0fc8 4FF48060 		mov	r0, #1024
 2023 0fcc C5F20000 		movt	r0, 20480
 2024 0fd0 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2025 0fd4 0346     		mov	r3, r0
 2026 0fd6 002B     		cmp	r3, #0
 2027 0fd8 0CBF     		ite	eq
 2028 0fda 0023     		moveq	r3, #0
 2029 0fdc 0123     		movne	r3, #1
 2030 0fde DBB2     		uxtb	r3, r3
 2031 0fe0 002B     		cmp	r3, #0
 2032 0fe2 F1D1     		bne	.L58
 848:../src/main.cpp **** 
 849:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2033              		.loc 1 849 0 is_stmt 1
 2034 0fe4 4FF00003 		mov	r3, #0
 2035 0fe8 3B63     		str	r3, [r7, #48]
 850:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 2036              		.loc 1 850 0
 2037 0fea 4FF44033 		mov	r3, #196608
 2038 0fee 7B63     		str	r3, [r7, #52]
 851:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2039              		.loc 1 851 0
 2040 0ff0 4FF00003 		mov	r3, #0
 2041 0ff4 BB63     		str	r3, [r7, #56]
 852:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2042              		.loc 1 852 0
 2043 0ff6 4FF00003 		mov	r3, #0
 2044 0ffa FB63     		str	r3, [r7, #60]
 853:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2045              		.loc 1 853 0
 2046 0ffc 4FF00003 		mov	r3, #0
 2047 1000 87F84030 		strb	r3, [r7, #64]
 854:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 2048              		.loc 1 854 0
 2049 1004 07F13003 		add	r3, r7, #48
 2050 1008 4FF48060 		mov	r0, #1024
 2051 100c C5F20000 		movt	r0, 20480
 2052 1010 1946     		mov	r1, r3
 2053 1012 FFF7FEFF 		bl	ADC_CommonInit
 855:../src/main.cpp **** 
 856:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2054              		.loc 1 856 0
 2055 1016 4FF40053 		mov	r3, #8192
 2056 101a 7B60     		str	r3, [r7, #4]
 857:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2057              		.loc 1 857 0
 2058 101c 4FF00003 		mov	r3, #0
 2059 1020 BB60     		str	r3, [r7, #8]
 858:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2060              		.loc 1 858 0
 2061 1022 4FF00003 		mov	r3, #0
 2062 1026 FB60     		str	r3, [r7, #12]
 859:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2063              		.loc 1 859 0
 2064 1028 4FF00003 		mov	r3, #0
 2065 102c 3B61     		str	r3, [r7, #16]
 860:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2066              		.loc 1 860 0
 2067 102e 4FF00003 		mov	r3, #0
 2068 1032 7B61     		str	r3, [r7, #20]
 861:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2069              		.loc 1 861 0
 2070 1034 4FF00003 		mov	r3, #0
 2071 1038 BB61     		str	r3, [r7, #24]
 862:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2072              		.loc 1 862 0
 2073 103a 4FF00003 		mov	r3, #0
 2074 103e FB61     		str	r3, [r7, #28]
 863:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2075              		.loc 1 863 0
 2076 1040 4FF00203 		mov	r3, #2
 2077 1044 87F82030 		strb	r3, [r7, #32]
 864:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 2078              		.loc 1 864 0
 2079 1048 07F10403 		add	r3, r7, #4
 2080 104c 4FF48060 		mov	r0, #1024
 2081 1050 C5F20000 		movt	r0, 20480
 2082 1054 1946     		mov	r1, r3
 2083 1056 FFF7FEFF 		bl	ADC_Init
 865:../src/main.cpp **** 
 866:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 867:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2084              		.loc 1 867 0
 2085 105a 4FF48060 		mov	r0, #1024
 2086 105e C5F20000 		movt	r0, 20480
 2087 1062 4FF00101 		mov	r1, #1
 2088 1066 4FF00102 		mov	r2, #1
 2089 106a 4FF00703 		mov	r3, #7
 2090 106e FFF7FEFF 		bl	ADC_RegularChannelConfig
 868:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2091              		.loc 1 868 0
 2092 1072 4FF48060 		mov	r0, #1024
 2093 1076 C5F20000 		movt	r0, 20480
 2094 107a 4FF00501 		mov	r1, #5
 2095 107e 4FF00202 		mov	r2, #2
 2096 1082 4FF00703 		mov	r3, #7
 2097 1086 FFF7FEFF 		bl	ADC_RegularChannelConfig
 869:../src/main.cpp **** 
 870:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 2098              		.loc 1 870 0
 2099 108a 4FF48060 		mov	r0, #1024
 2100 108e C5F20000 		movt	r0, 20480
 2101 1092 4FF00101 		mov	r1, #1
 2102 1096 FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 871:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 2103              		.loc 1 871 0
 2104 109a 4FF48060 		mov	r0, #1024
 2105 109e C5F20000 		movt	r0, 20480
 2106 10a2 4FF00501 		mov	r1, #5
 2107 10a6 FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 872:../src/main.cpp **** 
 873:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 874:../src/main.cpp **** 
 875:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 2108              		.loc 1 875 0
 2109 10aa 4FF48060 		mov	r0, #1024
 2110 10ae C5F20000 		movt	r0, 20480
 2111 10b2 4FF40061 		mov	r1, #2048
 2112 10b6 4FF00A02 		mov	r2, #10
 2113 10ba FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 876:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 2114              		.loc 1 876 0
 2115 10be 4FF48060 		mov	r0, #1024
 2116 10c2 C5F20000 		movt	r0, 20480
 2117 10c6 4FF08001 		mov	r1, #128
 2118 10ca 4FF00002 		mov	r2, #0
 2119 10ce FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 877:../src/main.cpp **** 
 878:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 2120              		.loc 1 878 0
 2121 10d2 4FF48060 		mov	r0, #1024
 2122 10d6 C5F20000 		movt	r0, 20480
 2123 10da 4FF44001 		mov	r1, #12582912
 2124 10de FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 879:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 880:../src/main.cpp **** 
 881:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 882:../src/main.cpp **** 
 883:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 884:../src/main.cpp **** 
 885:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 2125              		.loc 1 885 0
 2126 10e2 4FF02F03 		mov	r3, #47
 2127 10e6 87F82430 		strb	r3, [r7, #36]
 886:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 2128              		.loc 1 886 0
 2129 10ea 4FF00003 		mov	r3, #0
 2130 10ee 87F82530 		strb	r3, [r7, #37]
 887:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2131              		.loc 1 887 0
 2132 10f2 4FF00003 		mov	r3, #0
 2133 10f6 87F82630 		strb	r3, [r7, #38]
 888:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2134              		.loc 1 888 0
 2135 10fa 4FF00103 		mov	r3, #1
 2136 10fe 87F82730 		strb	r3, [r7, #39]
 889:../src/main.cpp **** 
 890:../src/main.cpp **** 	NVIC_Init(&nv);
 2137              		.loc 1 890 0
 2138 1102 07F12403 		add	r3, r7, #36
 2139 1106 1846     		mov	r0, r3
 2140 1108 FFF7FEFF 		bl	NVIC_Init
 891:../src/main.cpp **** 
 892:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 893:../src/main.cpp **** 
 894:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 2141              		.loc 1 894 0
 2142 110c 4FF48060 		mov	r0, #1024
 2143 1110 C5F20000 		movt	r0, 20480
 2144 1114 4FF4C071 		mov	r1, #384
 2145 1118 4FF00102 		mov	r2, #1
 2146 111c FFF7FEFF 		bl	ADC_ITConfig
 895:../src/main.cpp **** 
 896:../src/main.cpp **** 	/* Enable ADC3 */
 897:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 2147              		.loc 1 897 0
 2148 1120 4FF48060 		mov	r0, #1024
 2149 1124 C5F20000 		movt	r0, 20480
 2150 1128 4FF00101 		mov	r1, #1
 2151 112c FFF7FEFF 		bl	ADC_Cmd
 898:../src/main.cpp **** 
 899:../src/main.cpp **** 	/* wait for ADRDY */
 900:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 2152              		.loc 1 900 0
 2153 1130 00BF     		nop
 2154              	.L59:
 2155              		.loc 1 900 0 is_stmt 0 discriminator 1
 2156 1132 4FF48060 		mov	r0, #1024
 2157 1136 C5F20000 		movt	r0, 20480
 2158 113a 4FF00101 		mov	r1, #1
 2159 113e FFF7FEFF 		bl	ADC_GetFlagStatus
 2160 1142 0346     		mov	r3, r0
 2161 1144 002B     		cmp	r3, #0
 2162 1146 14BF     		ite	ne
 2163 1148 0023     		movne	r3, #0
 2164 114a 0123     		moveq	r3, #1
 2165 114c DBB2     		uxtb	r3, r3
 2166 114e 002B     		cmp	r3, #0
 2167 1150 EFD1     		bne	.L59
 901:../src/main.cpp **** 
 902:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 903:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 2168              		.loc 1 903 0 is_stmt 1
 2169 1152 4FF48060 		mov	r0, #1024
 2170 1156 C5F20000 		movt	r0, 20480
 2171 115a FFF7FEFF 		bl	ADC_StartConversion
 2172              	.LBE11:
 904:../src/main.cpp **** }
 2173              		.loc 1 904 0
 2174 115e 07F14807 		add	r7, r7, #72
 2175 1162 BD46     		mov	sp, r7
 2176 1164 80BD     		pop	{r7, pc}
 2177              		.cfi_endproc
 2178              	.LFE121:
 2180 1166 00BF     		.align	2
 2181              		.global	_Z9adc1_initv
 2182              		.thumb
 2183              		.thumb_func
 2185              	_Z9adc1_initv:
 2186              	.LFB122:
 905:../src/main.cpp **** 
 906:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 907:../src/main.cpp ****  * @Args: Nothing
 908:../src/main.cpp ****  * @Return Val: Nothing
 909:../src/main.cpp ****  */
 910:../src/main.cpp **** 
 911:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 912:../src/main.cpp **** {
 2187              		.loc 1 912 0
 2188              		.cfi_startproc
 2189              		@ args = 0, pretend = 0, frame = 72
 2190              		@ frame_needed = 1, uses_anonymous_args = 0
 2191 1168 80B5     		push	{r7, lr}
 2192              	.LCFI32:
 2193              		.cfi_def_cfa_offset 8
 2194              		.cfi_offset 7, -8
 2195              		.cfi_offset 14, -4
 2196 116a 92B0     		sub	sp, sp, #72
 2197              	.LCFI33:
 2198              		.cfi_def_cfa_offset 80
 2199 116c 00AF     		add	r7, sp, #0
 2200              	.LCFI34:
 2201              		.cfi_def_cfa_register 7
 2202              	.LBB12:
 913:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 914:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 915:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 916:../src/main.cpp **** 	/* Configure the ADC clock */
 917:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2203              		.loc 1 917 0
 2204 116e 4FF48870 		mov	r0, #272
 2205 1172 FFF7FEFF 		bl	RCC_ADCCLKConfig
 918:../src/main.cpp **** 
 919:../src/main.cpp **** 	/* Enable ADC1 clock */
 920:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2206              		.loc 1 920 0
 2207 1176 4FF08050 		mov	r0, #268435456
 2208 117a 4FF00101 		mov	r1, #1
 2209 117e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 921:../src/main.cpp **** 	/* ADC Channel configuration */
 922:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 923:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2210              		.loc 1 923 0
 2211 1182 4FF40030 		mov	r0, #131072
 2212 1186 4FF00101 		mov	r1, #1
 2213 118a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 924:../src/main.cpp **** 
 925:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 926:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2214              		.loc 1 926 0
 2215 118e 4FF00403 		mov	r3, #4
 2216 1192 BB62     		str	r3, [r7, #40]
 927:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2217              		.loc 1 927 0
 2218 1194 4FF00303 		mov	r3, #3
 2219 1198 87F82C30 		strb	r3, [r7, #44]
 928:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2220              		.loc 1 928 0
 2221 119c 4FF00003 		mov	r3, #0
 2222 11a0 87F82F30 		strb	r3, [r7, #47]
 929:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2223              		.loc 1 929 0
 2224 11a4 07F12803 		add	r3, r7, #40
 2225 11a8 4FF09040 		mov	r0, #1207959552
 2226 11ac 1946     		mov	r1, r3
 2227 11ae FFF7FEFF 		bl	GPIO_Init
 930:../src/main.cpp **** 
 931:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2228              		.loc 1 931 0
 2229 11b2 07F10403 		add	r3, r7, #4
 2230 11b6 1846     		mov	r0, r3
 2231 11b8 FFF7FEFF 		bl	ADC_StructInit
 932:../src/main.cpp **** 
 933:../src/main.cpp **** 	/* Calibration procedure */
 934:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2232              		.loc 1 934 0
 2233 11bc 4FF0A040 		mov	r0, #1342177280
 2234 11c0 4FF00101 		mov	r1, #1
 2235 11c4 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 935:../src/main.cpp **** 
 936:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 937:../src/main.cpp **** 	int foo;
 938:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2236              		.loc 1 938 0
 2237 11c8 4FF00003 		mov	r3, #0
 2238 11cc 7B64     		str	r3, [r7, #68]
 2239 11ce 07E0     		b	.L61
 2240              	.L62:
 939:../src/main.cpp **** 	{
 940:../src/main.cpp **** 	  ++foo;
 2241              		.loc 1 940 0 discriminator 2
 2242 11d0 7B6C     		ldr	r3, [r7, #68]
 2243 11d2 03F10103 		add	r3, r3, #1
 2244 11d6 7B64     		str	r3, [r7, #68]
 938:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2245              		.loc 1 938 0 discriminator 2
 2246 11d8 7B6C     		ldr	r3, [r7, #68]
 2247 11da 03F10103 		add	r3, r3, #1
 2248 11de 7B64     		str	r3, [r7, #68]
 2249              	.L61:
 938:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2250              		.loc 1 938 0 is_stmt 0 discriminator 1
 2251 11e0 7A6C     		ldr	r2, [r7, #68]
 2252 11e2 47F6FF43 		movw	r3, #31999
 2253 11e6 9A42     		cmp	r2, r3
 2254 11e8 CCBF     		ite	gt
 2255 11ea 0023     		movgt	r3, #0
 2256 11ec 0123     		movle	r3, #1
 2257 11ee DBB2     		uxtb	r3, r3
 2258 11f0 002B     		cmp	r3, #0
 2259 11f2 EDD1     		bne	.L62
 941:../src/main.cpp **** 	}
 942:../src/main.cpp **** 
 943:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2260              		.loc 1 943 0 is_stmt 1
 2261 11f4 4FF0A040 		mov	r0, #1342177280
 2262 11f8 4FF00001 		mov	r1, #0
 2263 11fc FFF7FEFF 		bl	ADC_SelectCalibrationMode
 944:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2264              		.loc 1 944 0
 2265 1200 4FF0A040 		mov	r0, #1342177280
 2266 1204 FFF7FEFF 		bl	ADC_StartCalibration
 945:../src/main.cpp **** 
 946:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2267              		.loc 1 946 0
 2268 1208 00BF     		nop
 2269              	.L63:
 2270              		.loc 1 946 0 is_stmt 0 discriminator 1
 2271 120a 4FF0A040 		mov	r0, #1342177280
 2272 120e FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2273 1212 0346     		mov	r3, r0
 2274 1214 002B     		cmp	r3, #0
 2275 1216 0CBF     		ite	eq
 2276 1218 0023     		moveq	r3, #0
 2277 121a 0123     		movne	r3, #1
 2278 121c DBB2     		uxtb	r3, r3
 2279 121e 002B     		cmp	r3, #0
 2280 1220 F3D1     		bne	.L63
 947:../src/main.cpp **** 
 948:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2281              		.loc 1 948 0 is_stmt 1
 2282 1222 4FF00003 		mov	r3, #0
 2283 1226 3B63     		str	r3, [r7, #48]
 949:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2284              		.loc 1 949 0
 2285 1228 4FF00003 		mov	r3, #0
 2286 122c 7B63     		str	r3, [r7, #52]
 950:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2287              		.loc 1 950 0
 2288 122e 4FF00003 		mov	r3, #0
 2289 1232 BB63     		str	r3, [r7, #56]
 951:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2290              		.loc 1 951 0
 2291 1234 4FF00003 		mov	r3, #0
 2292 1238 FB63     		str	r3, [r7, #60]
 952:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2293              		.loc 1 952 0
 2294 123a 4FF00003 		mov	r3, #0
 2295 123e 87F84030 		strb	r3, [r7, #64]
 953:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2296              		.loc 1 953 0
 2297 1242 07F13003 		add	r3, r7, #48
 2298 1246 4FF0A040 		mov	r0, #1342177280
 2299 124a 1946     		mov	r1, r3
 2300 124c FFF7FEFF 		bl	ADC_CommonInit
 954:../src/main.cpp **** 
 955:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2301              		.loc 1 955 0
 2302 1250 4FF40053 		mov	r3, #8192
 2303 1254 7B60     		str	r3, [r7, #4]
 956:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2304              		.loc 1 956 0
 2305 1256 4FF00003 		mov	r3, #0
 2306 125a BB60     		str	r3, [r7, #8]
 957:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2307              		.loc 1 957 0
 2308 125c 4FF00003 		mov	r3, #0
 2309 1260 FB60     		str	r3, [r7, #12]
 958:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2310              		.loc 1 958 0
 2311 1262 4FF00003 		mov	r3, #0
 2312 1266 3B61     		str	r3, [r7, #16]
 959:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2313              		.loc 1 959 0
 2314 1268 4FF00003 		mov	r3, #0
 2315 126c 7B61     		str	r3, [r7, #20]
 960:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2316              		.loc 1 960 0
 2317 126e 4FF00003 		mov	r3, #0
 2318 1272 BB61     		str	r3, [r7, #24]
 961:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2319              		.loc 1 961 0
 2320 1274 4FF00003 		mov	r3, #0
 2321 1278 FB61     		str	r3, [r7, #28]
 962:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2322              		.loc 1 962 0
 2323 127a 4FF00103 		mov	r3, #1
 2324 127e 87F82030 		strb	r3, [r7, #32]
 963:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2325              		.loc 1 963 0
 2326 1282 07F10403 		add	r3, r7, #4
 2327 1286 4FF0A040 		mov	r0, #1342177280
 2328 128a 1946     		mov	r1, r3
 2329 128c FFF7FEFF 		bl	ADC_Init
 964:../src/main.cpp **** 
 965:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 966:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2330              		.loc 1 966 0
 2331 1290 4FF0A040 		mov	r0, #1342177280
 2332 1294 4FF00301 		mov	r1, #3
 2333 1298 4FF00102 		mov	r2, #1
 2334 129c 4FF00703 		mov	r3, #7
 2335 12a0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 967:../src/main.cpp **** 
 968:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 969:../src/main.cpp **** 
 970:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 971:../src/main.cpp **** 
 972:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2336              		.loc 1 972 0
 2337 12a4 4FF01203 		mov	r3, #18
 2338 12a8 87F82430 		strb	r3, [r7, #36]
 973:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2339              		.loc 1 973 0
 2340 12ac 4FF00203 		mov	r3, #2
 2341 12b0 87F82530 		strb	r3, [r7, #37]
 974:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2342              		.loc 1 974 0
 2343 12b4 4FF00003 		mov	r3, #0
 2344 12b8 87F82630 		strb	r3, [r7, #38]
 975:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2345              		.loc 1 975 0
 2346 12bc 4FF00103 		mov	r3, #1
 2347 12c0 87F82730 		strb	r3, [r7, #39]
 976:../src/main.cpp **** 
 977:../src/main.cpp **** 	NVIC_Init(&nv);
 2348              		.loc 1 977 0
 2349 12c4 07F12403 		add	r3, r7, #36
 2350 12c8 1846     		mov	r0, r3
 2351 12ca FFF7FEFF 		bl	NVIC_Init
 978:../src/main.cpp **** 
 979:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 980:../src/main.cpp **** 
 981:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2352              		.loc 1 981 0
 2353 12ce 4FF0A040 		mov	r0, #1342177280
 2354 12d2 4FF00401 		mov	r1, #4
 2355 12d6 4FF00102 		mov	r2, #1
 2356 12da FFF7FEFF 		bl	ADC_ITConfig
 982:../src/main.cpp **** 
 983:../src/main.cpp **** 	/* Enable ADC1 */
 984:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2357              		.loc 1 984 0
 2358 12de 4FF0A040 		mov	r0, #1342177280
 2359 12e2 4FF00101 		mov	r1, #1
 2360 12e6 FFF7FEFF 		bl	ADC_Cmd
 985:../src/main.cpp **** 
 986:../src/main.cpp **** 	/* wait for ADRDY */
 987:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2361              		.loc 1 987 0
 2362 12ea 00BF     		nop
 2363              	.L64:
 2364              		.loc 1 987 0 is_stmt 0 discriminator 1
 2365 12ec 4FF0A040 		mov	r0, #1342177280
 2366 12f0 4FF00101 		mov	r1, #1
 2367 12f4 FFF7FEFF 		bl	ADC_GetFlagStatus
 2368 12f8 0346     		mov	r3, r0
 2369 12fa 002B     		cmp	r3, #0
 2370 12fc 14BF     		ite	ne
 2371 12fe 0023     		movne	r3, #0
 2372 1300 0123     		moveq	r3, #1
 2373 1302 DBB2     		uxtb	r3, r3
 2374 1304 002B     		cmp	r3, #0
 2375 1306 F1D1     		bne	.L64
 988:../src/main.cpp **** 
 989:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 990:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2376              		.loc 1 990 0 is_stmt 1
 2377 1308 4FF0A040 		mov	r0, #1342177280
 2378 130c FFF7FEFF 		bl	ADC_StartConversion
 2379              	.LBE12:
 991:../src/main.cpp **** }
 2380              		.loc 1 991 0
 2381 1310 07F14807 		add	r7, r7, #72
 2382 1314 BD46     		mov	sp, r7
 2383 1316 80BD     		pop	{r7, pc}
 2384              		.cfi_endproc
 2385              	.LFE122:
 2387              	.Letext0:
 2388              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2389              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2390              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 2391              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 2392              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 2393              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 2394              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 2395              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 2396              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 2397              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 2398              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/ccEkqj2U.s:24     .bss:00000000 led_iter
     /tmp/ccEkqj2U.s:21     .bss:00000000 $d
     /tmp/ccEkqj2U.s:31     .data:00000000 led_matrix
     /tmp/ccEkqj2U.s:28     .data:00000000 $d
     /tmp/ccEkqj2U.s:45     .bss:00000004 left_enc
     /tmp/ccEkqj2U.s:51     .bss:0000002c right_enc
     /tmp/ccEkqj2U.s:57     .bss:00000054 gyro_angle_x
     /tmp/ccEkqj2U.s:63     .bss:00000058 gyro_bias_x
     /tmp/ccEkqj2U.s:69     .bss:0000005c adcval
     /tmp/ccEkqj2U.s:75     .bss:00000060 adcData
     /tmp/ccEkqj2U.s:81     .bss:00000068 new_data
     /tmp/ccEkqj2U.s:87     .bss:0000006c adc2_data
     /tmp/ccEkqj2U.s:92     .bss:0000007c adc2_new_data
     /tmp/ccEkqj2U.s:97     .bss:0000007d adc3_awd1
     /tmp/ccEkqj2U.s:102    .bss:0000007e adc3_awd2
     /tmp/ccEkqj2U.s:108    .bss:00000080 count
     /tmp/ccEkqj2U.s:114    .bss:00000084 stage
     /tmp/ccEkqj2U.s:119    .rodata:00000000 $d
     /tmp/ccEkqj2U.s:120    .rodata:00000000 .LC0
     /tmp/ccEkqj2U.s:123    .text:00000000 $t
     /tmp/ccEkqj2U.s:128    .text:00000000 main
     /tmp/ccEkqj2U.s:634    .text:00000420 _Z15brake_pins_initv
     /tmp/ccEkqj2U.s:1291   .text:00000950 _Z13adc1_init_DMAv
     /tmp/ccEkqj2U.s:1575   .text:00000bc4 _Z13adc2_init_DMAv
     /tmp/ccEkqj2U.s:706    .text:00000498 _Z13ping_pin_initv
     /tmp/ccEkqj2U.s:791    .text:00000528 _Z20timer2_timebase_initv
     /tmp/ccEkqj2U.s:477    .text:00000324 _Z19imu_update_ISR_initv
     /tmp/ccEkqj2U.s:850    .text:0000057c _Z9comp_initv
     /tmp/ccEkqj2U.s:463    .text:00000310 $d
     /tmp/ccEkqj2U.s:472    .text:00000324 $t
     /tmp/ccEkqj2U.s:1200   .text:000008c8 _Z14calc_gyro_biasv
     /tmp/ccEkqj2U.s:594    .rodata:00000008 .LC1
     /tmp/ccEkqj2U.s:603    .text:00000408 L3GD20_TIMEOUT_UserCallback
     /tmp/ccEkqj2U.s:1282   .text:0000094c $d
     /tmp/ccEkqj2U.s:1286   .text:00000950 $t
     /tmp/ccEkqj2U.s:1927   .text:00000f08 _Z21battery_watchdog_initv
     /tmp/ccEkqj2U.s:2185   .text:00001168 _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.669975762de5793e6d2436455cef4d0e
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dcmplt
SystemInit
_Z10UART1_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
_Z19LED_MATRIX_ISR_initv
printf
_Z11pwm1_outputf
_Z11pwm2_outputf
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
RCC_AHBPeriphClockCmd
GPIO_StructInit
GPIO_Init
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
