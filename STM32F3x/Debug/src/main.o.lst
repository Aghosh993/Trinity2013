   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	led_iter
  20              		.bss
  21              		.align	2
  24              	led_iter:
  25 0000 00000000 		.space	4
  26              		.global	led_matrix
  27              		.data
  28              		.align	2
  31              	led_matrix:
  32 0000 00020000 		.word	512
  33 0004 00010000 		.word	256
  34 0008 00800000 		.word	32768
  35 000c 00400000 		.word	16384
  36 0010 00200000 		.word	8192
  37 0014 00100000 		.word	4096
  38 0018 00080000 		.word	2048
  39 001c 00040000 		.word	1024
  40              		.global	left_enc
  41              		.bss
  42              		.align	2
  45              	left_enc:
  46 0004 00000000 		.space	40
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	right_enc
  48              		.align	2
  51              	right_enc:
  52 002c 00000000 		.space	40
  52      00000000 
  52      00000000 
  52      00000000 
  52      00000000 
  53              		.global	gyro_angle_x
  54              		.align	2
  57              	gyro_angle_x:
  58 0054 00000000 		.space	4
  59              		.global	gyro_bias_x
  60              		.align	2
  63              	gyro_bias_x:
  64 0058 00000000 		.space	4
  65              		.global	adcval
  66              		.align	2
  69              	adcval:
  70 005c 00000000 		.space	4
  71              		.global	adcData
  72              		.align	2
  75              	adcData:
  76 0060 00000000 		.space	8
  76      00000000 
  77              		.global	new_data
  78              		.align	2
  81              	new_data:
  82 0068 00000000 		.space	4
  83              		.global	adc2_data
  84              		.align	2
  87              	adc2_data:
  88 006c 00000000 		.space	16
  88      00000000 
  88      00000000 
  88      00000000 
  89              		.global	adc2_new_data
  92              	adc2_new_data:
  93 007c 00       		.space	1
  94              		.global	adc3_awd1
  97              	adc3_awd1:
  98 007d 00       		.space	1
  99              		.global	adc3_awd2
 102              	adc3_awd2:
 103 007e 00       		.space	1
 104              		.global	count
 105 007f 00       		.align	2
 108              	count:
 109 0080 00000000 		.space	4
 110              		.global	stage
 111              		.align	2
 114              	stage:
 115 0084 00000000 		.space	4
 116              		.global	drive_cmd
 117              		.align	2
 120              	drive_cmd:
 121 0088 00000000 		.space	4
 122              		.global	err
 123              		.align	2
 126              	err:
 127 008c 00000000 		.space	4
 128              		.global	last_err
 129              		.align	2
 132              	last_err:
 133 0090 00000000 		.space	4
 134              		.global	diff_err
 135              		.align	2
 138              	diff_err:
 139 0094 00000000 		.space	4
 140              		.global	rt
 141              		.align	2
 144              	rt:
 145 0098 00000000 		.space	4
 146              		.global	d_front
 147              		.align	2
 150              	d_front:
 151 009c 00000000 		.space	4
 152              		.global	integral
 153              		.align	2
 156              	integral:
 157 00a0 00000000 		.space	4
 158              		.global	left
 159              		.align	2
 162              	left:
 163 00a4 00000000 		.space	4
 164              		.global	right
 165              		.align	2
 168              	right:
 169 00a8 00000000 		.space	4
 170              		.global	state
 171              		.align	2
 174              	state:
 175 00ac 00000000 		.space	4
 176              		.section	.rodata
 177              		.align	2
 178              	.LC0:
 179 0000 25346420 		.ascii	"%4d %4d %4d\012\015\000"
 179      25346420 
 179      2534640A 
 179      0D00
 180              		.text
 181              		.align	2
 182              		.global	main
 183              		.thumb
 184              		.thumb_func
 186              	main:
 187              	.LFB111:
 188              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  18:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  19:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  20:../src/main.cpp ****  *
  21:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  22:../src/main.cpp ****  *
  23:../src/main.cpp ****  * TIM6: LED matrix ISR
  24:../src/main.cpp ****  * TIM7: Encoder update ISR
  25:../src/main.cpp ****  * TIM17: IMU update ISR
  26:../src/main.cpp ****  *
  27:../src/main.cpp ****  * Other pins/resources used:
  28:../src/main.cpp ****  *
  29:../src/main.cpp ****  * Analog: 	PA2: adcData[0]
  30:../src/main.cpp ****  * 			PA3: adcData[1]
  31:../src/main.cpp ****  *
  32:../src/main.cpp ****  * 			PA4: adc2_data[0]
  33:../src/main.cpp ****  * 			PC4: adc2_data[1]
  34:../src/main.cpp ****  * 			PC5: adc2_data[2]
  35:../src/main.cpp ****  * 			PB2: adc2_data[3]
  36:../src/main.cpp ****  *
  37:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  38:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  39:../src/main.cpp ****  *
  40:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  41:../src/main.cpp ****  *
  42:../src/main.cpp ****  */
  43:../src/main.cpp **** 
  44:../src/main.cpp **** /*
  45:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  46:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  47:../src/main.cpp ****  */
  48:../src/main.cpp **** 
  49:../src/main.cpp **** volatile int led_iter;
  50:../src/main.cpp **** volatile int led_matrix[8] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_14, GPIO_Pin_13,
  51:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  52:../src/main.cpp **** 
  53:../src/main.cpp **** void imu_update_ISR_init(void);
  54:../src/main.cpp **** int16_t calc_gyro_bias(void);
  55:../src/main.cpp **** 
  56:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  57:../src/main.cpp **** 
  58:../src/main.cpp **** void adc1_init_DMA(void);
  59:../src/main.cpp **** void adc2_init_DMA(void);
  60:../src/main.cpp **** void battery_watchdog_init(void);
  61:../src/main.cpp **** void adc1_init(void);
  62:../src/main.cpp **** 
  63:../src/main.cpp **** void brake_pins_init(void);
  64:../src/main.cpp **** 
  65:../src/main.cpp **** void ping_pin_init(void);
  66:../src/main.cpp **** void timer2_timebase_init(void);
  67:../src/main.cpp **** 
  68:../src/main.cpp **** void comp_init(void);
  69:../src/main.cpp **** 
  70:../src/main.cpp **** float IR_distance(int IR_ADC_VAL);
  71:../src/main.cpp **** 
  72:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  73:../src/main.cpp **** 
  74:../src/main.cpp **** encoderState left_enc, right_enc;
  75:../src/main.cpp **** 
  76:../src/main.cpp **** volatile float gyro_angle_x;
  77:../src/main.cpp **** int gyro_bias_x, adcval;
  78:../src/main.cpp **** 
  79:../src/main.cpp **** __IO uint32_t adcData[2];
  80:../src/main.cpp **** int new_data;
  81:../src/main.cpp **** 
  82:../src/main.cpp **** __IO uint32_t adc2_data[4];
  83:../src/main.cpp **** uint8_t adc2_new_data;
  84:../src/main.cpp **** 
  85:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
  86:../src/main.cpp **** 
  87:../src/main.cpp **** int count, stage;
  88:../src/main.cpp **** 
  89:../src/main.cpp **** float drive_cmd;// = 0.0f;
  90:../src/main.cpp **** float err;// = 0.0f;
  91:../src/main.cpp **** float last_err;// = 0.0f;
  92:../src/main.cpp **** float diff_err;
  93:../src/main.cpp **** float rt;// = 0.0f;
  94:../src/main.cpp **** float d_front;// = 1.0f;
  95:../src/main.cpp **** float integral;
  96:../src/main.cpp **** 
  97:../src/main.cpp **** float left, right;
  98:../src/main.cpp **** 
  99:../src/main.cpp **** int state;
 100:../src/main.cpp **** 
 101:../src/main.cpp **** // Initialize all encoder data structures to zero:
 102:../src/main.cpp **** 
 103:../src/main.cpp **** int main(void)
 104:../src/main.cpp **** {
 189              		.loc 1 104 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 8
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0000 80B5     		push	{r7, lr}
 194              	.LCFI0:
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 82B0     		sub	sp, sp, #8
 199              	.LCFI1:
 200              		.cfi_def_cfa_offset 16
 201 0004 00AF     		add	r7, sp, #0
 202              	.LCFI2:
 203              		.cfi_def_cfa_register 7
 204              	.LBB2:
 105:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 205              		.loc 1 105 0
 206 0006 FFF7FEFF 		bl	SystemInit
 106:../src/main.cpp **** 
 107:../src/main.cpp **** 	UART1_init(); // Debug bridge
 207              		.loc 1 107 0
 208 000a FFF7FEFF 		bl	_Z10UART1_initv
 108:../src/main.cpp **** 
 109:../src/main.cpp **** 	state = ST_HOMING; //ST_WANDER;
 209              		.loc 1 109 0
 210 000e 40F20003 		movw	r3, #:lower16:state
 211 0012 C0F20003 		movt	r3, #:upper16:state
 212 0016 4FF00102 		mov	r2, #1
 213 001a 1A60     		str	r2, [r3, #0]
 110:../src/main.cpp **** 
 111:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
 112:../src/main.cpp **** 
 113:../src/main.cpp **** 	adcData[0] = 0;
 214              		.loc 1 113 0
 215 001c 40F20003 		movw	r3, #:lower16:adcData
 216 0020 C0F20003 		movt	r3, #:upper16:adcData
 217 0024 4FF00002 		mov	r2, #0
 218 0028 1A60     		str	r2, [r3, #0]
 114:../src/main.cpp **** 	adcData[1] = 0;
 219              		.loc 1 114 0
 220 002a 40F20003 		movw	r3, #:lower16:adcData
 221 002e C0F20003 		movt	r3, #:upper16:adcData
 222 0032 4FF00002 		mov	r2, #0
 223 0036 5A60     		str	r2, [r3, #4]
 115:../src/main.cpp **** 
 116:../src/main.cpp **** 	uint8_t iter = 0;
 224              		.loc 1 116 0
 225 0038 4FF00003 		mov	r3, #0
 226 003c FB71     		strb	r3, [r7, #7]
 117:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 227              		.loc 1 117 0
 228 003e 4FF00003 		mov	r3, #0
 229 0042 FB71     		strb	r3, [r7, #7]
 230 0044 0CE0     		b	.L2
 231              	.L3:
 118:../src/main.cpp **** 	{
 119:../src/main.cpp **** 		adc2_data[iter] = 0;
 232              		.loc 1 119 0 discriminator 2
 233 0046 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 234 0048 40F20003 		movw	r3, #:lower16:adc2_data
 235 004c C0F20003 		movt	r3, #:upper16:adc2_data
 236 0050 4FF00001 		mov	r1, #0
 237 0054 43F82210 		str	r1, [r3, r2, lsl #2]
 117:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 238              		.loc 1 117 0 discriminator 2
 239 0058 FB79     		ldrb	r3, [r7, #7]
 240 005a 03F10103 		add	r3, r3, #1
 241 005e FB71     		strb	r3, [r7, #7]
 242              	.L2:
 117:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 243              		.loc 1 117 0 is_stmt 0 discriminator 1
 244 0060 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 245 0062 062B     		cmp	r3, #6
 246 0064 8CBF     		ite	hi
 247 0066 0023     		movhi	r3, #0
 248 0068 0123     		movls	r3, #1
 249 006a DBB2     		uxtb	r3, r3
 250 006c 002B     		cmp	r3, #0
 251 006e EAD1     		bne	.L3
 120:../src/main.cpp **** 	}
 121:../src/main.cpp **** 
 122:../src/main.cpp **** 	adc3_awd1 = 0;
 252              		.loc 1 122 0 is_stmt 1
 253 0070 40F20003 		movw	r3, #:lower16:adc3_awd1
 254 0074 C0F20003 		movt	r3, #:upper16:adc3_awd1
 255 0078 4FF00002 		mov	r2, #0
 256 007c 1A70     		strb	r2, [r3, #0]
 123:../src/main.cpp **** 	adc3_awd2 = 0;
 257              		.loc 1 123 0
 258 007e 40F20003 		movw	r3, #:lower16:adc3_awd2
 259 0082 C0F20003 		movt	r3, #:upper16:adc3_awd2
 260 0086 4FF00002 		mov	r2, #0
 261 008a 1A70     		strb	r2, [r3, #0]
 124:../src/main.cpp **** 
 125:../src/main.cpp **** 	count = 0;
 262              		.loc 1 125 0
 263 008c 40F20003 		movw	r3, #:lower16:count
 264 0090 C0F20003 		movt	r3, #:upper16:count
 265 0094 4FF00002 		mov	r2, #0
 266 0098 1A60     		str	r2, [r3, #0]
 126:../src/main.cpp **** 	stage = 0;
 267              		.loc 1 126 0
 268 009a 40F20003 		movw	r3, #:lower16:stage
 269 009e C0F20003 		movt	r3, #:upper16:stage
 270 00a2 4FF00002 		mov	r2, #0
 271 00a6 1A60     		str	r2, [r3, #0]
 127:../src/main.cpp **** 
 128:../src/main.cpp **** 	/*
 129:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 130:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 131:../src/main.cpp **** 	 */
 132:../src/main.cpp **** 
 133:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 272              		.loc 1 133 0
 273 00a8 40F20000 		movw	r0, #:lower16:left_enc
 274 00ac C0F20000 		movt	r0, #:upper16:left_enc
 275 00b0 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 134:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 276              		.loc 1 134 0
 277 00b4 40F20000 		movw	r0, #:lower16:right_enc
 278 00b8 C0F20000 		movt	r0, #:upper16:right_enc
 279 00bc FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 135:../src/main.cpp **** 
 136:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 137:../src/main.cpp **** 
 138:../src/main.cpp **** 	brake_pins_init();
 280              		.loc 1 138 0
 281 00c0 FFF7FEFF 		bl	_Z15brake_pins_initv
 139:../src/main.cpp **** 	pwm_out1_init(2000);
 282              		.loc 1 139 0
 283 00c4 4FF4FA60 		mov	r0, #2000
 284 00c8 FFF7FEFF 		bl	_Z13pwm_out1_initt
 140:../src/main.cpp **** 	pwm_out2_init(2000);
 285              		.loc 1 140 0
 286 00cc 4FF4FA60 		mov	r0, #2000
 287 00d0 FFF7FEFF 		bl	_Z13pwm_out2_initt
 141:../src/main.cpp **** 
 142:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 143:../src/main.cpp **** 
 144:../src/main.cpp **** 	TIM8_init_encoder();
 288              		.loc 1 144 0
 289 00d4 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 145:../src/main.cpp **** 	TIM4_init_encoder();
 290              		.loc 1 145 0
 291 00d8 FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 146:../src/main.cpp **** 
 147:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 148:../src/main.cpp **** 
 149:../src/main.cpp **** 	new_data = 0;
 292              		.loc 1 149 0
 293 00dc 40F20003 		movw	r3, #:lower16:new_data
 294 00e0 C0F20003 		movt	r3, #:upper16:new_data
 295 00e4 4FF00002 		mov	r2, #0
 296 00e8 1A60     		str	r2, [r3, #0]
 150:../src/main.cpp **** 	adc2_new_data = 0;
 297              		.loc 1 150 0
 298 00ea 40F20003 		movw	r3, #:lower16:adc2_new_data
 299 00ee C0F20003 		movt	r3, #:upper16:adc2_new_data
 300 00f2 4FF00002 		mov	r2, #0
 301 00f6 1A70     		strb	r2, [r3, #0]
 151:../src/main.cpp **** 
 152:../src/main.cpp **** 	// Initialize ADC1 DMA:
 153:../src/main.cpp **** 	adc1_init_DMA();
 302              		.loc 1 153 0
 303 00f8 FFF7FEFF 		bl	_Z13adc1_init_DMAv
 154:../src/main.cpp **** 
 155:../src/main.cpp **** 	// Initialize ADC2 DMA:
 156:../src/main.cpp **** 	adc2_init_DMA();
 304              		.loc 1 156 0
 305 00fc FFF7FEFF 		bl	_Z13adc2_init_DMAv
 157:../src/main.cpp **** //	battery_watchdog_init();
 158:../src/main.cpp **** 
 159:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 306              		.loc 1 159 0
 307 0100 FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 160:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 308              		.loc 1 160 0
 309 0104 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 161:../src/main.cpp **** 
 162:../src/main.cpp **** 	// Ping Sensor Init:
 163:../src/main.cpp **** 
 164:../src/main.cpp **** 	ping_pin_init();
 310              		.loc 1 164 0
 311 0108 FFF7FEFF 		bl	_Z13ping_pin_initv
 165:../src/main.cpp **** 	timer2_timebase_init();
 312              		.loc 1 165 0
 313 010c FFF7FEFF 		bl	_Z20timer2_timebase_initv
 166:../src/main.cpp **** 	imu_update_ISR_init();
 314              		.loc 1 166 0
 315 0110 FFF7FEFF 		bl	_Z19imu_update_ISR_initv
 167:../src/main.cpp **** 
 168:../src/main.cpp **** 	// Encoder comparator init for noise debounce:
 169:../src/main.cpp **** 	comp_init();
 316              		.loc 1 169 0
 317 0114 FFF7FEFF 		bl	_Z9comp_initv
 170:../src/main.cpp **** 
 171:../src/main.cpp **** 	adcval = 0;
 318              		.loc 1 171 0
 319 0118 40F20003 		movw	r3, #:lower16:adcval
 320 011c C0F20003 		movt	r3, #:upper16:adcval
 321 0120 4FF00002 		mov	r2, #0
 322 0124 1A60     		str	r2, [r3, #0]
 172:../src/main.cpp **** //	mtr_out = 0;
 173:../src/main.cpp **** 
 174:../src/main.cpp **** 	drive_cmd = 0.0f;
 323              		.loc 1 174 0
 324 0126 40F20003 		movw	r3, #:lower16:drive_cmd
 325 012a C0F20003 		movt	r3, #:upper16:drive_cmd
 326 012e 4FF00002 		mov	r2, #0
 327 0132 1A60     		str	r2, [r3, #0]	@ float
 175:../src/main.cpp **** 	err = 0.0f;
 328              		.loc 1 175 0
 329 0134 40F20003 		movw	r3, #:lower16:err
 330 0138 C0F20003 		movt	r3, #:upper16:err
 331 013c 4FF00002 		mov	r2, #0
 332 0140 1A60     		str	r2, [r3, #0]	@ float
 176:../src/main.cpp **** 	last_err = 0.0f;
 333              		.loc 1 176 0
 334 0142 40F20003 		movw	r3, #:lower16:last_err
 335 0146 C0F20003 		movt	r3, #:upper16:last_err
 336 014a 4FF00002 		mov	r2, #0
 337 014e 1A60     		str	r2, [r3, #0]	@ float
 177:../src/main.cpp **** 	diff_err = 0.0f;
 338              		.loc 1 177 0
 339 0150 40F20003 		movw	r3, #:lower16:diff_err
 340 0154 C0F20003 		movt	r3, #:upper16:diff_err
 341 0158 4FF00002 		mov	r2, #0
 342 015c 1A60     		str	r2, [r3, #0]	@ float
 178:../src/main.cpp **** 	rt = 0.0f;
 343              		.loc 1 178 0
 344 015e 40F20003 		movw	r3, #:lower16:rt
 345 0162 C0F20003 		movt	r3, #:upper16:rt
 346 0166 4FF00002 		mov	r2, #0
 347 016a 1A60     		str	r2, [r3, #0]	@ float
 179:../src/main.cpp **** 	d_front = 1.0f;
 348              		.loc 1 179 0
 349 016c 40F20003 		movw	r3, #:lower16:d_front
 350 0170 C0F20003 		movt	r3, #:upper16:d_front
 351 0174 4FF07E52 		mov	r2, #1065353216
 352 0178 1A60     		str	r2, [r3, #0]	@ float
 180:../src/main.cpp **** 	integral = 0.0f;
 353              		.loc 1 180 0
 354 017a 40F20003 		movw	r3, #:lower16:integral
 355 017e C0F20003 		movt	r3, #:upper16:integral
 356 0182 4FF00002 		mov	r2, #0
 357 0186 1A60     		str	r2, [r3, #0]	@ float
 358              	.L4:
 181:../src/main.cpp **** 
 182:../src/main.cpp **** //	float left, right;
 183:../src/main.cpp **** 
 184:../src/main.cpp **** 	while(true)
 185:../src/main.cpp **** 	{
 186:../src/main.cpp **** //		printf("Front: %1.3f, Front left:%1.4f, Front back:%1.4f\n\r", d_front, IR_distance(adc2_data[0
 187:../src/main.cpp **** 		printf("%4d %4d %4d\n\r", (int)adcData[0] , (int)adc2_data[2], ((int)adcData[0] - (int)adc2_data[
 359              		.loc 1 187 0 discriminator 1
 360 0188 40F20003 		movw	r3, #:lower16:adcData
 361 018c C0F20003 		movt	r3, #:upper16:adcData
 362 0190 1B68     		ldr	r3, [r3, #0]
 363 0192 1946     		mov	r1, r3
 364 0194 40F20003 		movw	r3, #:lower16:adc2_data
 365 0198 C0F20003 		movt	r3, #:upper16:adc2_data
 366 019c 9B68     		ldr	r3, [r3, #8]
 367 019e 1A46     		mov	r2, r3
 368 01a0 40F20003 		movw	r3, #:lower16:adcData
 369 01a4 C0F20003 		movt	r3, #:upper16:adcData
 370 01a8 1B68     		ldr	r3, [r3, #0]
 371 01aa 1846     		mov	r0, r3
 372 01ac 40F20003 		movw	r3, #:lower16:adc2_data
 373 01b0 C0F20003 		movt	r3, #:upper16:adc2_data
 374 01b4 9B68     		ldr	r3, [r3, #8]
 375 01b6 C31A     		subs	r3, r0, r3
 376 01b8 40F20000 		movw	r0, #:lower16:.LC0
 377 01bc C0F20000 		movt	r0, #:upper16:.LC0
 378 01c0 FFF7FEFF 		bl	printf
 184:../src/main.cpp **** 	while(true)
 379              		.loc 1 184 0 discriminator 1
 380 01c4 E0E7     		b	.L4
 381              	.LBE2:
 382              		.cfi_endproc
 383              	.LFE111:
 385              		.global	__aeabi_f2d
 386              		.global	__aeabi_d2f
 387 01c6 00BF     		.align	2
 388              		.global	_Z11IR_distancei
 389              		.thumb
 390              		.thumb_func
 392              	_Z11IR_distancei:
 393              	.LFB112:
 188:../src/main.cpp **** 
 189:../src/main.cpp **** 	}
 190:../src/main.cpp **** 	return 0; // We should never manage to get here...
 191:../src/main.cpp **** }
 192:../src/main.cpp **** 
 193:../src/main.cpp **** float IR_distance(int IR_ADC_VAL)
 194:../src/main.cpp **** {
 394              		.loc 1 194 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 16
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398 01c8 80B5     		push	{r7, lr}
 399              	.LCFI3:
 400              		.cfi_def_cfa_offset 8
 401              		.cfi_offset 7, -8
 402              		.cfi_offset 14, -4
 403 01ca 2DED028B 		fstmfdd	sp!, {d8}
 404              	.LCFI4:
 405              		.cfi_def_cfa_offset 16
 406              		.cfi_offset 80, -16
 407 01ce 84B0     		sub	sp, sp, #16
 408              	.LCFI5:
 409              		.cfi_def_cfa_offset 32
 410 01d0 00AF     		add	r7, sp, #0
 411              	.LCFI6:
 412              		.cfi_def_cfa_register 7
 413 01d2 7860     		str	r0, [r7, #4]
 414              	.LBB3:
 195:../src/main.cpp **** 	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 415              		.loc 1 195 0
 416 01d4 D7ED017A 		flds	s15, [r7, #4]	@ int
 417 01d8 B8EEE77A 		fsitos	s14, s15
 418 01dc DFED537A 		flds	s15, .L7
 419 01e0 67EE277A 		fmuls	s15, s14, s15
 420 01e4 C7ED037A 		fsts	s15, [r7, #12]
 196:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 421              		.loc 1 196 0
 422 01e8 F868     		ldr	r0, [r7, #12]	@ float
 423 01ea FFF7FEFF 		bl	__aeabi_f2d
 424 01ee 0246     		mov	r2, r0
 425 01f0 0B46     		mov	r3, r1
 426 01f2 1046     		mov	r0, r2
 427 01f4 1946     		mov	r1, r3
 428 01f6 4FF00002 		mov	r2, #0
 429 01fa 4FF00003 		mov	r3, #0
 430 01fe C4F21803 		movt	r3, 16408
 431 0202 FFF7FEFF 		bl	pow
 432 0206 0246     		mov	r2, r0
 433 0208 0B46     		mov	r3, r1
 197:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 198:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 199:../src/main.cpp **** 			+ (float)60.24);
 434              		.loc 1 199 0
 435 020a 1046     		mov	r0, r2
 436 020c 1946     		mov	r1, r3
 437 020e FFF7FEFF 		bl	__aeabi_d2f
 438 0212 07EE100A 		fmsr	s14, r0
 439 0216 DFED467A 		flds	s15, .L7+4
 440 021a 27EE278A 		fmuls	s16, s14, s15
 196:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 441              		.loc 1 196 0
 442 021e F868     		ldr	r0, [r7, #12]	@ float
 443 0220 FFF7FEFF 		bl	__aeabi_f2d
 444 0224 0246     		mov	r2, r0
 445 0226 0B46     		mov	r3, r1
 446 0228 1046     		mov	r0, r2
 447 022a 1946     		mov	r1, r3
 448 022c 4FF00002 		mov	r2, #0
 449 0230 4FF00003 		mov	r3, #0
 450 0234 C4F21403 		movt	r3, 16404
 451 0238 FFF7FEFF 		bl	pow
 452 023c 0246     		mov	r2, r0
 453 023e 0B46     		mov	r3, r1
 454              		.loc 1 199 0
 455 0240 1046     		mov	r0, r2
 456 0242 1946     		mov	r1, r3
 457 0244 FFF7FEFF 		bl	__aeabi_d2f
 458 0248 07EE100A 		fmsr	s14, r0
 459 024c DFED397A 		flds	s15, .L7+8
 460 0250 67EE277A 		fmuls	s15, s14, s15
 461 0254 38EE678A 		fsubs	s16, s16, s15
 197:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 462              		.loc 1 197 0
 463 0258 F868     		ldr	r0, [r7, #12]	@ float
 464 025a FFF7FEFF 		bl	__aeabi_f2d
 465 025e 0246     		mov	r2, r0
 466 0260 0B46     		mov	r3, r1
 467 0262 1046     		mov	r0, r2
 468 0264 1946     		mov	r1, r3
 469 0266 4FF00002 		mov	r2, #0
 470 026a 4FF00003 		mov	r3, #0
 471 026e C4F21003 		movt	r3, 16400
 472 0272 FFF7FEFF 		bl	pow
 473 0276 0246     		mov	r2, r0
 474 0278 0B46     		mov	r3, r1
 475              		.loc 1 199 0
 476 027a 1046     		mov	r0, r2
 477 027c 1946     		mov	r1, r3
 478 027e FFF7FEFF 		bl	__aeabi_d2f
 479 0282 07EE100A 		fmsr	s14, r0
 480 0286 DFED2C7A 		flds	s15, .L7+12
 481 028a 67EE277A 		fmuls	s15, s14, s15
 482 028e 38EE278A 		fadds	s16, s16, s15
 197:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 483              		.loc 1 197 0
 484 0292 F868     		ldr	r0, [r7, #12]	@ float
 485 0294 FFF7FEFF 		bl	__aeabi_f2d
 486 0298 0246     		mov	r2, r0
 487 029a 0B46     		mov	r3, r1
 488 029c 1046     		mov	r0, r2
 489 029e 1946     		mov	r1, r3
 490 02a0 4FF00002 		mov	r2, #0
 491 02a4 4FF00003 		mov	r3, #0
 492 02a8 C4F20803 		movt	r3, 16392
 493 02ac FFF7FEFF 		bl	pow
 494 02b0 0246     		mov	r2, r0
 495 02b2 0B46     		mov	r3, r1
 496              		.loc 1 199 0
 497 02b4 1046     		mov	r0, r2
 498 02b6 1946     		mov	r1, r3
 499 02b8 FFF7FEFF 		bl	__aeabi_d2f
 500 02bc 07EE100A 		fmsr	s14, r0
 501 02c0 DFED1E7A 		flds	s15, .L7+16
 502 02c4 67EE277A 		fmuls	s15, s14, s15
 503 02c8 38EE678A 		fsubs	s16, s16, s15
 198:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 504              		.loc 1 198 0
 505 02cc F868     		ldr	r0, [r7, #12]	@ float
 506 02ce FFF7FEFF 		bl	__aeabi_f2d
 507 02d2 0246     		mov	r2, r0
 508 02d4 0B46     		mov	r3, r1
 509 02d6 1046     		mov	r0, r2
 510 02d8 1946     		mov	r1, r3
 511 02da 4FF00002 		mov	r2, #0
 512 02de 4FF08043 		mov	r3, #1073741824
 513 02e2 FFF7FEFF 		bl	pow
 514 02e6 0246     		mov	r2, r0
 515 02e8 0B46     		mov	r3, r1
 516              		.loc 1 199 0
 517 02ea 1046     		mov	r0, r2
 518 02ec 1946     		mov	r1, r3
 519 02ee FFF7FEFF 		bl	__aeabi_d2f
 520 02f2 07EE100A 		fmsr	s14, r0
 521 02f6 DFED127A 		flds	s15, .L7+20
 522 02fa 67EE277A 		fmuls	s15, s14, s15
 523 02fe 38EE277A 		fadds	s14, s16, s15
 524 0302 D7ED036A 		flds	s13, [r7, #12]
 525 0306 DFED0F7A 		flds	s15, .L7+24
 526 030a 66EEA77A 		fmuls	s15, s13, s15
 527 030e 37EE677A 		fsubs	s14, s14, s15
 528 0312 DFED0D7A 		flds	s15, .L7+28
 529 0316 77EE277A 		fadds	s15, s14, s15
 530 031a 17EE903A 		fmrs	r3, s15
 531              	.LBE3:
 200:../src/main.cpp **** }
 532              		.loc 1 200 0
 533 031e 1846     		mov	r0, r3	@ float
 534 0320 07F11007 		add	r7, r7, #16
 535 0324 BD46     		mov	sp, r7
 536 0326 BDEC028B 		fldmfdd	sp!, {d8}
 537 032a 80BD     		pop	{r7, pc}
 538              	.L8:
 539              		.align	2
 540              	.L7:
 541 032c 4A03643A 		.word	979632970
 542 0330 C1CA213F 		.word	1059179201
 543 0334 27310041 		.word	1090531623
 544 0338 33332442 		.word	1109668659
 545 033c 6666DB42 		.word	1121674854
 546 0340 33B32443 		.word	1126478643
 547 0344 CDCC0A43 		.word	1124781261
 548 0348 C3F57042 		.word	1114699203
 549              		.cfi_endproc
 550              	.LFE112:
 552              		.align	2
 553              		.global	_Z19imu_update_ISR_initv
 554              		.thumb
 555              		.thumb_func
 557              	_Z19imu_update_ISR_initv:
 558              	.LFB113:
 201:../src/main.cpp **** 
 202:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 203:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 204:../src/main.cpp **** 
 205:../src/main.cpp **** void imu_update_ISR_init(void)
 206:../src/main.cpp **** {
 559              		.loc 1 206 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 24
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563 034c 80B5     		push	{r7, lr}
 564              	.LCFI7:
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 7, -8
 567              		.cfi_offset 14, -4
 568 034e 86B0     		sub	sp, sp, #24
 569              	.LCFI8:
 570              		.cfi_def_cfa_offset 32
 571 0350 00AF     		add	r7, sp, #0
 572              	.LCFI9:
 573              		.cfi_def_cfa_register 7
 574              	.LBB4:
 207:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 208:../src/main.cpp **** 
 209:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 575              		.loc 1 209 0
 576 0352 4FF00703 		mov	r3, #7
 577 0356 BB74     		strb	r3, [r7, #18]
 210:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 578              		.loc 1 210 0
 579 0358 4FF00003 		mov	r3, #0
 580 035c FB74     		strb	r3, [r7, #19]
 211:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 581              		.loc 1 211 0
 582 035e 4FF00003 		mov	r3, #0
 583 0362 3B75     		strb	r3, [r7, #20]
 212:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 584              		.loc 1 212 0
 585 0364 4FF00003 		mov	r3, #0
 586 0368 7B75     		strb	r3, [r7, #21]
 213:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 587              		.loc 1 213 0
 588 036a 4FF00003 		mov	r3, #0
 589 036e BB75     		strb	r3, [r7, #22]
 214:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 590              		.loc 1 214 0
 591 0370 4FF00003 		mov	r3, #0
 592 0374 7B74     		strb	r3, [r7, #17]
 215:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 593              		.loc 1 215 0
 594 0376 4FF00803 		mov	r3, #8
 595 037a 3B74     		strb	r3, [r7, #16]
 216:../src/main.cpp **** 
 217:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 596              		.loc 1 217 0
 597 037c 07F11003 		add	r3, r7, #16
 598 0380 1846     		mov	r0, r3
 599 0382 FFF7FEFF 		bl	L3GD20_Init
 218:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 600              		.loc 1 218 0
 601 0386 FFF7FEFF 		bl	_Z14calc_gyro_biasv
 602 038a 0346     		mov	r3, r0
 603 038c 1A46     		mov	r2, r3
 604 038e 40F20003 		movw	r3, #:lower16:gyro_bias_x
 605 0392 C0F20003 		movt	r3, #:upper16:gyro_bias_x
 606 0396 1A60     		str	r2, [r3, #0]
 219:../src/main.cpp **** 
 220:../src/main.cpp **** 	gyro_angle_x = 0;
 607              		.loc 1 220 0
 608 0398 40F20003 		movw	r3, #:lower16:gyro_angle_x
 609 039c C0F20003 		movt	r3, #:upper16:gyro_angle_x
 610 03a0 4FF00002 		mov	r2, #0
 611 03a4 1A60     		str	r2, [r3, #0]	@ float
 221:../src/main.cpp **** 
 222:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 223:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 224:../src/main.cpp **** 
 225:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 612              		.loc 1 225 0
 613 03a6 4FF01A03 		mov	r3, #26
 614 03aa 3B73     		strb	r3, [r7, #12]
 226:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 615              		.loc 1 226 0
 616 03ac 4FF00003 		mov	r3, #0
 617 03b0 7B73     		strb	r3, [r7, #13]
 227:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 618              		.loc 1 227 0
 619 03b2 4FF00003 		mov	r3, #0
 620 03b6 BB73     		strb	r3, [r7, #14]
 228:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 621              		.loc 1 228 0
 622 03b8 4FF00103 		mov	r3, #1
 623 03bc FB73     		strb	r3, [r7, #15]
 229:../src/main.cpp **** 
 230:../src/main.cpp **** 	NVIC_Init(&nv);
 624              		.loc 1 230 0
 625 03be 07F10C03 		add	r3, r7, #12
 626 03c2 1846     		mov	r0, r3
 627 03c4 FFF7FEFF 		bl	NVIC_Init
 231:../src/main.cpp **** 
 232:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 628              		.loc 1 232 0
 629 03c8 4FF48020 		mov	r0, #262144
 630 03cc 4FF00101 		mov	r1, #1
 631 03d0 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 233:../src/main.cpp **** 
 234:../src/main.cpp **** 	/*
 235:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 236:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 237:../src/main.cpp **** 	 * 	  Period -> ARR
 238:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 239:../src/main.cpp **** 	 */
 240:../src/main.cpp **** 
 241:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 632              		.loc 1 241 0
 633 03d4 40F28F13 		movw	r3, #399
 634 03d8 7B60     		str	r3, [r7, #4]
 242:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 635              		.loc 1 242 0
 636 03da 41F61F43 		movw	r3, #7199
 637 03de 3B80     		strh	r3, [r7, #0]	@ movhi
 243:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 638              		.loc 1 243 0
 639 03e0 4FF00003 		mov	r3, #0
 640 03e4 BB72     		strb	r3, [r7, #10]
 244:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 641              		.loc 1 244 0
 642 03e6 4FF00003 		mov	r3, #0
 643 03ea 3B81     		strh	r3, [r7, #8]	@ movhi
 245:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 644              		.loc 1 245 0
 645 03ec 4FF00003 		mov	r3, #0
 646 03f0 7B80     		strh	r3, [r7, #2]	@ movhi
 246:../src/main.cpp **** 
 247:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 647              		.loc 1 247 0
 648 03f2 3B46     		mov	r3, r7
 649 03f4 4FF49040 		mov	r0, #18432
 650 03f8 C4F20100 		movt	r0, 16385
 651 03fc 1946     		mov	r1, r3
 652 03fe FFF7FEFF 		bl	TIM_TimeBaseInit
 248:../src/main.cpp **** 
 249:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 653              		.loc 1 249 0
 654 0402 4FF49040 		mov	r0, #18432
 655 0406 C4F20100 		movt	r0, 16385
 656 040a 4FF00101 		mov	r1, #1
 657 040e 4FF00102 		mov	r2, #1
 658 0412 FFF7FEFF 		bl	TIM_ITConfig
 250:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 659              		.loc 1 250 0
 660 0416 4FF49040 		mov	r0, #18432
 661 041a C4F20100 		movt	r0, 16385
 662 041e 4FF00101 		mov	r1, #1
 663 0422 FFF7FEFF 		bl	TIM_Cmd
 664              	.LBE4:
 251:../src/main.cpp **** }
 665              		.loc 1 251 0
 666 0426 07F11807 		add	r7, r7, #24
 667 042a BD46     		mov	sp, r7
 668 042c 80BD     		pop	{r7, pc}
 669              		.cfi_endproc
 670              	.LFE113:
 672              		.section	.rodata
 673 000e 0000     		.align	2
 674              	.LC1:
 675 0010 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 675      32302072 
 675      65616420 
 675      61747465 
 675      6D707420 
 676 0043 636F6465 		.ascii	"code!!!\012\015\000"
 676      2121210A 
 676      0D00
 677 004d 000000   		.text
 678 042e 00BF     		.align	2
 679              		.global	L3GD20_TIMEOUT_UserCallback
 680              		.thumb
 681              		.thumb_func
 683              	L3GD20_TIMEOUT_UserCallback:
 684              	.LFB114:
 252:../src/main.cpp **** 
 253:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 254:../src/main.cpp **** {
 685              		.loc 1 254 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 0
 688              		@ frame_needed = 1, uses_anonymous_args = 0
 689 0430 80B5     		push	{r7, lr}
 690              	.LCFI10:
 691              		.cfi_def_cfa_offset 8
 692              		.cfi_offset 7, -8
 693              		.cfi_offset 14, -4
 694 0432 00AF     		add	r7, sp, #0
 695              	.LCFI11:
 696              		.cfi_def_cfa_register 7
 255:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 697              		.loc 1 255 0
 698 0434 40F20000 		movw	r0, #:lower16:.LC1
 699 0438 C0F20000 		movt	r0, #:upper16:.LC1
 700 043c FFF7FEFF 		bl	printf
 256:../src/main.cpp **** 	return 0;
 701              		.loc 1 256 0
 702 0440 4FF00003 		mov	r3, #0
 257:../src/main.cpp **** }
 703              		.loc 1 257 0
 704 0444 1846     		mov	r0, r3
 705 0446 80BD     		pop	{r7, pc}
 706              		.cfi_endproc
 707              	.LFE114:
 709              		.align	2
 710              		.global	_Z15brake_pins_initv
 711              		.thumb
 712              		.thumb_func
 714              	_Z15brake_pins_initv:
 715              	.LFB115:
 258:../src/main.cpp **** 
 259:../src/main.cpp **** void brake_pins_init(void)
 260:../src/main.cpp **** {
 716              		.loc 1 260 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 8
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720 0448 80B5     		push	{r7, lr}
 721              	.LCFI12:
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 7, -8
 724              		.cfi_offset 14, -4
 725 044a 82B0     		sub	sp, sp, #8
 726              	.LCFI13:
 727              		.cfi_def_cfa_offset 16
 728 044c 00AF     		add	r7, sp, #0
 729              	.LCFI14:
 730              		.cfi_def_cfa_register 7
 731              	.LBB5:
 261:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 732              		.loc 1 261 0
 733 044e 4FF40010 		mov	r0, #2097152
 734 0452 4FF00101 		mov	r1, #1
 735 0456 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 262:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 263:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 736              		.loc 1 263 0
 737 045a 3B46     		mov	r3, r7
 738 045c 1846     		mov	r0, r3
 739 045e FFF7FEFF 		bl	GPIO_StructInit
 264:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 740              		.loc 1 264 0
 741 0462 4FF00C03 		mov	r3, #12
 742 0466 3B60     		str	r3, [r7, #0]
 265:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 743              		.loc 1 265 0
 744 0468 4FF00003 		mov	r3, #0
 745 046c BB71     		strb	r3, [r7, #6]
 266:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 746              		.loc 1 266 0
 747 046e 4FF00103 		mov	r3, #1
 748 0472 3B71     		strb	r3, [r7, #4]
 267:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 749              		.loc 1 267 0
 750 0474 4FF00003 		mov	r3, #0
 751 0478 FB71     		strb	r3, [r7, #7]
 268:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 752              		.loc 1 268 0
 753 047a 4FF00203 		mov	r3, #2
 754 047e 7B71     		strb	r3, [r7, #5]
 269:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 755              		.loc 1 269 0
 756 0480 3B46     		mov	r3, r7
 757 0482 4FF48050 		mov	r0, #4096
 758 0486 C4F60000 		movt	r0, 18432
 759 048a 1946     		mov	r1, r3
 760 048c FFF7FEFF 		bl	GPIO_Init
 270:../src/main.cpp **** 
 271:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 761              		.loc 1 271 0
 762 0490 4FF48050 		mov	r0, #4096
 763 0494 C4F60000 		movt	r0, 18432
 764 0498 4FF00401 		mov	r1, #4
 765 049c 4FF00002 		mov	r2, #0
 766 04a0 FFF7FEFF 		bl	GPIO_WriteBit
 272:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 767              		.loc 1 272 0
 768 04a4 4FF48050 		mov	r0, #4096
 769 04a8 C4F60000 		movt	r0, 18432
 770 04ac 4FF00801 		mov	r1, #8
 771 04b0 4FF00002 		mov	r2, #0
 772 04b4 FFF7FEFF 		bl	GPIO_WriteBit
 773              	.LBE5:
 273:../src/main.cpp **** 
 274:../src/main.cpp **** 	/*
 275:../src/main.cpp **** 	 * 	a.GPIO_Mode = GPIO_Mode_OUT;
 276:../src/main.cpp **** 	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 277:../src/main.cpp **** 	a.GPIO_OType = GPIO_OType_PP;
 278:../src/main.cpp **** 	a.GPIO_Speed = GPIO_Speed_Level_2;
 279:../src/main.cpp **** 
 280:../src/main.cpp **** 	 */
 281:../src/main.cpp **** }
 774              		.loc 1 281 0
 775 04b8 07F10807 		add	r7, r7, #8
 776 04bc BD46     		mov	sp, r7
 777 04be 80BD     		pop	{r7, pc}
 778              		.cfi_endproc
 779              	.LFE115:
 781              		.align	2
 782              		.global	_Z13ping_pin_initv
 783              		.thumb
 784              		.thumb_func
 786              	_Z13ping_pin_initv:
 787              	.LFB116:
 282:../src/main.cpp **** /*
 283:../src/main.cpp ****  * PB0: OUTPUT
 284:../src/main.cpp ****  * PC1: INPUT
 285:../src/main.cpp ****  */
 286:../src/main.cpp **** void ping_pin_init(void)
 287:../src/main.cpp **** {
 788              		.loc 1 287 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 8
 791              		@ frame_needed = 1, uses_anonymous_args = 0
 792 04c0 80B5     		push	{r7, lr}
 793              	.LCFI15:
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 04c2 82B0     		sub	sp, sp, #8
 798              	.LCFI16:
 799              		.cfi_def_cfa_offset 16
 800 04c4 00AF     		add	r7, sp, #0
 801              	.LCFI17:
 802              		.cfi_def_cfa_register 7
 803              	.LBB6:
 288:../src/main.cpp **** 
 289:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 804              		.loc 1 289 0
 805 04c6 4FF48800 		mov	r0, #4456448
 806 04ca 4FF00101 		mov	r1, #1
 807 04ce FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 290:../src/main.cpp **** 
 291:../src/main.cpp **** 	GPIO_InitTypeDef g;
 292:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 808              		.loc 1 292 0
 809 04d2 4FF00003 		mov	r3, #0
 810 04d6 3B71     		strb	r3, [r7, #4]
 293:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 811              		.loc 1 293 0
 812 04d8 4FF00103 		mov	r3, #1
 813 04dc BB71     		strb	r3, [r7, #6]
 294:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 814              		.loc 1 294 0
 815 04de 4FF40073 		mov	r3, #512
 816 04e2 3B60     		str	r3, [r7, #0]
 295:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 817              		.loc 1 295 0
 818 04e4 4FF00003 		mov	r3, #0
 819 04e8 FB71     		strb	r3, [r7, #7]
 296:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 820              		.loc 1 296 0
 821 04ea 4FF00103 		mov	r3, #1
 822 04ee 7B71     		strb	r3, [r7, #5]
 297:../src/main.cpp **** 
 298:../src/main.cpp **** 	GPIO_Init(GPIOF, &g);
 823              		.loc 1 298 0
 824 04f0 3B46     		mov	r3, r7
 825 04f2 4FF4A050 		mov	r0, #5120
 826 04f6 C4F60000 		movt	r0, 18432
 827 04fa 1946     		mov	r1, r3
 828 04fc FFF7FEFF 		bl	GPIO_Init
 299:../src/main.cpp **** 
 300:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 829              		.loc 1 300 0
 830 0500 4FF00103 		mov	r3, #1
 831 0504 3B71     		strb	r3, [r7, #4]
 301:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 832              		.loc 1 301 0
 833 0506 4FF00003 		mov	r3, #0
 834 050a BB71     		strb	r3, [r7, #6]
 302:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 835              		.loc 1 302 0
 836 050c 4FF00103 		mov	r3, #1
 837 0510 3B60     		str	r3, [r7, #0]
 303:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 838              		.loc 1 303 0
 839 0512 4FF00003 		mov	r3, #0
 840 0516 FB71     		strb	r3, [r7, #7]
 304:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 841              		.loc 1 304 0
 842 0518 4FF00103 		mov	r3, #1
 843 051c 7B71     		strb	r3, [r7, #5]
 305:../src/main.cpp **** 
 306:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 844              		.loc 1 306 0
 845 051e 3B46     		mov	r3, r7
 846 0520 4FF48060 		mov	r0, #1024
 847 0524 C4F60000 		movt	r0, 18432
 848 0528 1946     		mov	r1, r3
 849 052a FFF7FEFF 		bl	GPIO_Init
 307:../src/main.cpp **** 
 308:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 850              		.loc 1 308 0
 851 052e 4FF00100 		mov	r0, #1
 852 0532 4FF00101 		mov	r1, #1
 853 0536 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 309:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 854              		.loc 1 309 0
 855 053a 4FF00500 		mov	r0, #5
 856 053e 4FF00901 		mov	r1, #9
 857 0542 FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 858              	.LBE6:
 310:../src/main.cpp **** 
 311:../src/main.cpp **** }
 859              		.loc 1 311 0
 860 0546 07F10807 		add	r7, r7, #8
 861 054a BD46     		mov	sp, r7
 862 054c 80BD     		pop	{r7, pc}
 863              		.cfi_endproc
 864              	.LFE116:
 866 054e 00BF     		.align	2
 867              		.global	_Z20timer2_timebase_initv
 868              		.thumb
 869              		.thumb_func
 871              	_Z20timer2_timebase_initv:
 872              	.LFB117:
 312:../src/main.cpp **** 
 313:../src/main.cpp **** void timer2_timebase_init(void)
 314:../src/main.cpp **** {
 873              		.loc 1 314 0
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 16
 876              		@ frame_needed = 1, uses_anonymous_args = 0
 877 0550 80B5     		push	{r7, lr}
 878              	.LCFI18:
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 7, -8
 881              		.cfi_offset 14, -4
 882 0552 84B0     		sub	sp, sp, #16
 883              	.LCFI19:
 884              		.cfi_def_cfa_offset 24
 885 0554 00AF     		add	r7, sp, #0
 886              	.LCFI20:
 887              		.cfi_def_cfa_register 7
 888              	.LBB7:
 315:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 316:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 889              		.loc 1 316 0
 890 0556 4FF00100 		mov	r0, #1
 891 055a 4FF00101 		mov	r1, #1
 892 055e FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 317:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 893              		.loc 1 317 0
 894 0562 44F24F63 		movw	r3, #17999
 895 0566 BB60     		str	r3, [r7, #8]
 318:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 896              		.loc 1 318 0
 897 0568 4FF00003 		mov	r3, #0
 898 056c BB73     		strb	r3, [r7, #14]
 319:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 899              		.loc 1 319 0
 900 056e 4FF04703 		mov	r3, #71
 901 0572 BB80     		strh	r3, [r7, #4]	@ movhi
 320:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 902              		.loc 1 320 0
 903 0574 4FF00003 		mov	r3, #0
 904 0578 BB81     		strh	r3, [r7, #12]	@ movhi
 321:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 905              		.loc 1 321 0
 906 057a 4FF00003 		mov	r3, #0
 907 057e FB80     		strh	r3, [r7, #6]	@ movhi
 322:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 908              		.loc 1 322 0
 909 0580 07F10403 		add	r3, r7, #4
 910 0584 4FF08040 		mov	r0, #1073741824
 911 0588 1946     		mov	r1, r3
 912 058a FFF7FEFF 		bl	TIM_TimeBaseInit
 323:../src/main.cpp **** //	TIM_Cmd(TIM2, ENABLE);
 324:../src/main.cpp **** 
 325:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 913              		.loc 1 325 0
 914 058e 4FF08040 		mov	r0, #1073741824
 915 0592 4FF00001 		mov	r1, #0
 916 0596 FFF7FEFF 		bl	TIM_SetCounter
 917              	.LBE7:
 326:../src/main.cpp **** }
 918              		.loc 1 326 0
 919 059a 07F11007 		add	r7, r7, #16
 920 059e BD46     		mov	sp, r7
 921 05a0 80BD     		pop	{r7, pc}
 922              		.cfi_endproc
 923              	.LFE117:
 925 05a2 00BF     		.align	2
 926              		.global	_Z9comp_initv
 927              		.thumb
 928              		.thumb_func
 930              	_Z9comp_initv:
 931              	.LFB118:
 327:../src/main.cpp **** 
 328:../src/main.cpp **** /*
 329:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 330:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 331:../src/main.cpp ****  * 			Output->	PB9
 332:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 333:../src/main.cpp ****  * 			Output->	PA8
 334:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 335:../src/main.cpp ****  * 			Output->	PB1
 336:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 337:../src/main.cpp ****  * 			Output->	PC2
 338:../src/main.cpp ****  */
 339:../src/main.cpp **** 
 340:../src/main.cpp **** void comp_init(void)
 341:../src/main.cpp **** {
 932              		.loc 1 341 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 40
 935              		@ frame_needed = 1, uses_anonymous_args = 0
 936 05a4 80B5     		push	{r7, lr}
 937              	.LCFI21:
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 05a6 8AB0     		sub	sp, sp, #40
 942              	.LCFI22:
 943              		.cfi_def_cfa_offset 48
 944 05a8 00AF     		add	r7, sp, #0
 945              	.LCFI23:
 946              		.cfi_def_cfa_register 7
 947              	.LBB8:
 342:../src/main.cpp **** 	//COMP2 Init:
 343:../src/main.cpp **** 
 344:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 948              		.loc 1 344 0
 949 05aa 4FF00100 		mov	r0, #1
 950 05ae 4FF00101 		mov	r1, #1
 951 05b2 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 345:../src/main.cpp **** 
 346:../src/main.cpp **** 	GPIO_InitTypeDef g;
 347:../src/main.cpp **** 
 348:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 952              		.loc 1 348 0
 953 05b6 4FF00303 		mov	r3, #3
 954 05ba 87F82430 		strb	r3, [r7, #36]
 349:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 955              		.loc 1 349 0
 956 05be 4FF00003 		mov	r3, #0
 957 05c2 87F82730 		strb	r3, [r7, #39]
 350:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 958              		.loc 1 350 0
 959 05c6 4FF08003 		mov	r3, #128
 960 05ca 3B62     		str	r3, [r7, #32]
 351:../src/main.cpp **** 
 352:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 961              		.loc 1 352 0
 962 05cc 4FF40030 		mov	r0, #131072
 963 05d0 4FF00101 		mov	r1, #1
 964 05d4 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 353:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 965              		.loc 1 353 0
 966 05d8 07F12003 		add	r3, r7, #32
 967 05dc 4FF09040 		mov	r0, #1207959552
 968 05e0 1946     		mov	r1, r3
 969 05e2 FFF7FEFF 		bl	GPIO_Init
 354:../src/main.cpp **** 
 355:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 970              		.loc 1 355 0
 971 05e6 4FF00203 		mov	r3, #2
 972 05ea 87F82430 		strb	r3, [r7, #36]
 356:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 973              		.loc 1 356 0
 974 05ee 4FF00003 		mov	r3, #0
 975 05f2 87F82630 		strb	r3, [r7, #38]
 357:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 976              		.loc 1 357 0
 977 05f6 4FF00003 		mov	r3, #0
 978 05fa 87F82730 		strb	r3, [r7, #39]
 358:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 979              		.loc 1 358 0
 980 05fe 4FF40073 		mov	r3, #512
 981 0602 3B62     		str	r3, [r7, #32]
 359:../src/main.cpp **** 
 360:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 982              		.loc 1 360 0
 983 0604 4FF48060 		mov	r0, #1024
 984 0608 C4F60000 		movt	r0, 18432
 985 060c 4FF00901 		mov	r1, #9
 986 0610 4FF00802 		mov	r2, #8
 987 0614 FFF7FEFF 		bl	GPIO_PinAFConfig
 361:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 988              		.loc 1 361 0
 989 0618 07F12003 		add	r3, r7, #32
 990 061c 4FF48060 		mov	r0, #1024
 991 0620 C4F60000 		movt	r0, 18432
 992 0624 1946     		mov	r1, r3
 993 0626 FFF7FEFF 		bl	GPIO_Init
 362:../src/main.cpp **** 
 363:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 994              		.loc 1 363 0
 995 062a 4FF00000 		mov	r0, #0
 996 062e FFF7FEFF 		bl	RCC_PCLK2Config
 364:../src/main.cpp **** 
 365:../src/main.cpp **** 	COMP_InitTypeDef c;
 366:../src/main.cpp **** 
 367:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 997              		.loc 1 367 0
 998 0632 4FF03003 		mov	r3, #48
 999 0636 7B60     		str	r3, [r7, #4]
 368:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1000              		.loc 1 368 0
 1001 0638 4FF00003 		mov	r3, #0
 1002 063c BB60     		str	r3, [r7, #8]
 369:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1003              		.loc 1 369 0
 1004 063e 4FF00403 		mov	r3, #4
 1005 0642 FB61     		str	r3, [r7, #28]
 370:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1006              		.loc 1 370 0
 1007 0644 4FF00003 		mov	r3, #0
 1008 0648 FB60     		str	r3, [r7, #12]
 371:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1009              		.loc 1 371 0
 1010 064a 4FF00003 		mov	r3, #0
 1011 064e 7B61     		str	r3, [r7, #20]
 372:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1012              		.loc 1 372 0
 1013 0650 4FF48033 		mov	r3, #65536
 1014 0654 BB61     		str	r3, [r7, #24]
 373:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1015              		.loc 1 373 0
 1016 0656 4FF00003 		mov	r3, #0
 1017 065a 3B61     		str	r3, [r7, #16]
 374:../src/main.cpp **** 
 375:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 1018              		.loc 1 375 0
 1019 065c 07F10403 		add	r3, r7, #4
 1020 0660 4FF00400 		mov	r0, #4
 1021 0664 1946     		mov	r1, r3
 1022 0666 FFF7FEFF 		bl	COMP_Init
 376:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 1023              		.loc 1 376 0
 1024 066a 4FF00400 		mov	r0, #4
 1025 066e 4FF00101 		mov	r1, #1
 1026 0672 FFF7FEFF 		bl	COMP_Cmd
 377:../src/main.cpp **** 
 378:../src/main.cpp **** 	//COMP3 Init:
 379:../src/main.cpp **** 
 380:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1027              		.loc 1 380 0
 1028 0676 4FF00100 		mov	r0, #1
 1029 067a 4FF00101 		mov	r1, #1
 1030 067e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 381:../src/main.cpp **** 
 382:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1031              		.loc 1 382 0
 1032 0682 4FF00303 		mov	r3, #3
 1033 0686 87F82430 		strb	r3, [r7, #36]
 383:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1034              		.loc 1 383 0
 1035 068a 4FF00003 		mov	r3, #0
 1036 068e 87F82730 		strb	r3, [r7, #39]
 384:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 1037              		.loc 1 384 0
 1038 0692 4FF48043 		mov	r3, #16384
 1039 0696 3B62     		str	r3, [r7, #32]
 385:../src/main.cpp **** 
 386:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 1040              		.loc 1 386 0
 1041 0698 4FF4C020 		mov	r0, #393216
 1042 069c 4FF00101 		mov	r1, #1
 1043 06a0 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 387:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1044              		.loc 1 387 0
 1045 06a4 07F12003 		add	r3, r7, #32
 1046 06a8 4FF48060 		mov	r0, #1024
 1047 06ac C4F60000 		movt	r0, 18432
 1048 06b0 1946     		mov	r1, r3
 1049 06b2 FFF7FEFF 		bl	GPIO_Init
 388:../src/main.cpp **** 
 389:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1050              		.loc 1 389 0
 1051 06b6 4FF00203 		mov	r3, #2
 1052 06ba 87F82430 		strb	r3, [r7, #36]
 390:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1053              		.loc 1 390 0
 1054 06be 4FF00003 		mov	r3, #0
 1055 06c2 87F82630 		strb	r3, [r7, #38]
 391:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1056              		.loc 1 391 0
 1057 06c6 4FF00003 		mov	r3, #0
 1058 06ca 87F82730 		strb	r3, [r7, #39]
 392:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 1059              		.loc 1 392 0
 1060 06ce 4FF48073 		mov	r3, #256
 1061 06d2 3B62     		str	r3, [r7, #32]
 393:../src/main.cpp **** 
 394:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 1062              		.loc 1 394 0
 1063 06d4 4FF40060 		mov	r0, #2048
 1064 06d8 C4F60000 		movt	r0, 18432
 1065 06dc 4FF00801 		mov	r1, #8
 1066 06e0 4FF00702 		mov	r2, #7
 1067 06e4 FFF7FEFF 		bl	GPIO_PinAFConfig
 395:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1068              		.loc 1 395 0
 1069 06e8 07F12003 		add	r3, r7, #32
 1070 06ec 4FF40060 		mov	r0, #2048
 1071 06f0 C4F60000 		movt	r0, 18432
 1072 06f4 1946     		mov	r1, r3
 1073 06f6 FFF7FEFF 		bl	GPIO_Init
 396:../src/main.cpp **** 
 397:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1074              		.loc 1 397 0
 1075 06fa 4FF00000 		mov	r0, #0
 1076 06fe FFF7FEFF 		bl	RCC_PCLK2Config
 398:../src/main.cpp **** 
 399:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1077              		.loc 1 399 0
 1078 0702 4FF03003 		mov	r3, #48
 1079 0706 7B60     		str	r3, [r7, #4]
 400:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1080              		.loc 1 400 0
 1081 0708 4FF00003 		mov	r3, #0
 1082 070c BB60     		str	r3, [r7, #8]
 401:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1083              		.loc 1 401 0
 1084 070e 4FF00403 		mov	r3, #4
 1085 0712 FB61     		str	r3, [r7, #28]
 402:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1086              		.loc 1 402 0
 1087 0714 4FF00003 		mov	r3, #0
 1088 0718 FB60     		str	r3, [r7, #12]
 403:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1089              		.loc 1 403 0
 1090 071a 4FF00003 		mov	r3, #0
 1091 071e 7B61     		str	r3, [r7, #20]
 404:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1092              		.loc 1 404 0
 1093 0720 4FF48033 		mov	r3, #65536
 1094 0724 BB61     		str	r3, [r7, #24]
 405:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1095              		.loc 1 405 0
 1096 0726 4FF00003 		mov	r3, #0
 1097 072a 3B61     		str	r3, [r7, #16]
 406:../src/main.cpp **** 
 407:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 1098              		.loc 1 407 0
 1099 072c 07F10403 		add	r3, r7, #4
 1100 0730 4FF00800 		mov	r0, #8
 1101 0734 1946     		mov	r1, r3
 1102 0736 FFF7FEFF 		bl	COMP_Init
 408:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 1103              		.loc 1 408 0
 1104 073a 4FF00800 		mov	r0, #8
 1105 073e 4FF00101 		mov	r1, #1
 1106 0742 FFF7FEFF 		bl	COMP_Cmd
 409:../src/main.cpp **** 
 410:../src/main.cpp **** 	//COMP4 Init:
 411:../src/main.cpp **** 
 412:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1107              		.loc 1 412 0
 1108 0746 4FF00100 		mov	r0, #1
 1109 074a 4FF00101 		mov	r1, #1
 1110 074e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 413:../src/main.cpp **** 
 414:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1111              		.loc 1 414 0
 1112 0752 4FF00303 		mov	r3, #3
 1113 0756 87F82430 		strb	r3, [r7, #36]
 415:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1114              		.loc 1 415 0
 1115 075a 4FF00003 		mov	r3, #0
 1116 075e 87F82730 		strb	r3, [r7, #39]
 416:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 1117              		.loc 1 416 0
 1118 0762 4FF08003 		mov	r3, #128
 1119 0766 3B62     		str	r3, [r7, #32]
 417:../src/main.cpp **** 
 418:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 1120              		.loc 1 418 0
 1121 0768 4FF41010 		mov	r0, #2359296
 1122 076c 4FF00101 		mov	r1, #1
 1123 0770 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 419:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 1124              		.loc 1 419 0
 1125 0774 07F12003 		add	r3, r7, #32
 1126 0778 4FF48050 		mov	r0, #4096
 1127 077c C4F60000 		movt	r0, 18432
 1128 0780 1946     		mov	r1, r3
 1129 0782 FFF7FEFF 		bl	GPIO_Init
 420:../src/main.cpp **** 
 421:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1130              		.loc 1 421 0
 1131 0786 4FF00203 		mov	r3, #2
 1132 078a 87F82430 		strb	r3, [r7, #36]
 422:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1133              		.loc 1 422 0
 1134 078e 4FF00003 		mov	r3, #0
 1135 0792 87F82630 		strb	r3, [r7, #38]
 423:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1136              		.loc 1 423 0
 1137 0796 4FF00003 		mov	r3, #0
 1138 079a 87F82730 		strb	r3, [r7, #39]
 424:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 1139              		.loc 1 424 0
 1140 079e 4FF00203 		mov	r3, #2
 1141 07a2 3B62     		str	r3, [r7, #32]
 425:../src/main.cpp **** 
 426:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 1142              		.loc 1 426 0
 1143 07a4 4FF48060 		mov	r0, #1024
 1144 07a8 C4F60000 		movt	r0, 18432
 1145 07ac 4FF00101 		mov	r1, #1
 1146 07b0 4FF00802 		mov	r2, #8
 1147 07b4 FFF7FEFF 		bl	GPIO_PinAFConfig
 427:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1148              		.loc 1 427 0
 1149 07b8 07F12003 		add	r3, r7, #32
 1150 07bc 4FF48060 		mov	r0, #1024
 1151 07c0 C4F60000 		movt	r0, 18432
 1152 07c4 1946     		mov	r1, r3
 1153 07c6 FFF7FEFF 		bl	GPIO_Init
 428:../src/main.cpp **** 
 429:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1154              		.loc 1 429 0
 1155 07ca 4FF00000 		mov	r0, #0
 1156 07ce FFF7FEFF 		bl	RCC_PCLK2Config
 430:../src/main.cpp **** 
 431:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1157              		.loc 1 431 0
 1158 07d2 4FF03003 		mov	r3, #48
 1159 07d6 7B60     		str	r3, [r7, #4]
 432:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1160              		.loc 1 432 0
 1161 07d8 4FF08003 		mov	r3, #128
 1162 07dc BB60     		str	r3, [r7, #8]
 433:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1163              		.loc 1 433 0
 1164 07de 4FF00403 		mov	r3, #4
 1165 07e2 FB61     		str	r3, [r7, #28]
 434:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1166              		.loc 1 434 0
 1167 07e4 4FF00003 		mov	r3, #0
 1168 07e8 FB60     		str	r3, [r7, #12]
 435:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1169              		.loc 1 435 0
 1170 07ea 4FF00003 		mov	r3, #0
 1171 07ee 7B61     		str	r3, [r7, #20]
 436:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1172              		.loc 1 436 0
 1173 07f0 4FF48033 		mov	r3, #65536
 1174 07f4 BB61     		str	r3, [r7, #24]
 437:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1175              		.loc 1 437 0
 1176 07f6 4FF00003 		mov	r3, #0
 1177 07fa 3B61     		str	r3, [r7, #16]
 438:../src/main.cpp **** 
 439:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 1178              		.loc 1 439 0
 1179 07fc 07F10403 		add	r3, r7, #4
 1180 0800 4FF00C00 		mov	r0, #12
 1181 0804 1946     		mov	r1, r3
 1182 0806 FFF7FEFF 		bl	COMP_Init
 440:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 1183              		.loc 1 440 0
 1184 080a 4FF00C00 		mov	r0, #12
 1185 080e 4FF00101 		mov	r1, #1
 1186 0812 FFF7FEFF 		bl	COMP_Cmd
 441:../src/main.cpp **** 
 442:../src/main.cpp **** 	//COMP7 Init:
 443:../src/main.cpp **** 
 444:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1187              		.loc 1 444 0
 1188 0816 4FF00100 		mov	r0, #1
 1189 081a 4FF00101 		mov	r1, #1
 1190 081e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 445:../src/main.cpp **** 
 446:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1191              		.loc 1 446 0
 1192 0822 4FF00303 		mov	r3, #3
 1193 0826 87F82430 		strb	r3, [r7, #36]
 447:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1194              		.loc 1 447 0
 1195 082a 4FF00003 		mov	r3, #0
 1196 082e 87F82730 		strb	r3, [r7, #39]
 448:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 1197              		.loc 1 448 0
 1198 0832 4FF00203 		mov	r3, #2
 1199 0836 3B62     		str	r3, [r7, #32]
 449:../src/main.cpp **** 
 450:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 1200              		.loc 1 450 0
 1201 0838 4FF40020 		mov	r0, #524288
 1202 083c 4FF00101 		mov	r1, #1
 1203 0840 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 451:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1204              		.loc 1 451 0
 1205 0844 07F12003 		add	r3, r7, #32
 1206 0848 4FF40060 		mov	r0, #2048
 1207 084c C4F60000 		movt	r0, 18432
 1208 0850 1946     		mov	r1, r3
 1209 0852 FFF7FEFF 		bl	GPIO_Init
 452:../src/main.cpp **** 
 453:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1210              		.loc 1 453 0
 1211 0856 4FF00203 		mov	r3, #2
 1212 085a 87F82430 		strb	r3, [r7, #36]
 454:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1213              		.loc 1 454 0
 1214 085e 4FF00003 		mov	r3, #0
 1215 0862 87F82630 		strb	r3, [r7, #38]
 455:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1216              		.loc 1 455 0
 1217 0866 4FF00003 		mov	r3, #0
 1218 086a 87F82730 		strb	r3, [r7, #39]
 456:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 1219              		.loc 1 456 0
 1220 086e 4FF00403 		mov	r3, #4
 1221 0872 3B62     		str	r3, [r7, #32]
 457:../src/main.cpp **** 
 458:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 1222              		.loc 1 458 0
 1223 0874 4FF40060 		mov	r0, #2048
 1224 0878 C4F60000 		movt	r0, 18432
 1225 087c 4FF00201 		mov	r1, #2
 1226 0880 4FF00302 		mov	r2, #3
 1227 0884 FFF7FEFF 		bl	GPIO_PinAFConfig
 459:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1228              		.loc 1 459 0
 1229 0888 07F12003 		add	r3, r7, #32
 1230 088c 4FF40060 		mov	r0, #2048
 1231 0890 C4F60000 		movt	r0, 18432
 1232 0894 1946     		mov	r1, r3
 1233 0896 FFF7FEFF 		bl	GPIO_Init
 460:../src/main.cpp **** 
 461:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1234              		.loc 1 461 0
 1235 089a 4FF00000 		mov	r0, #0
 1236 089e FFF7FEFF 		bl	RCC_PCLK2Config
 462:../src/main.cpp **** 
 463:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1237              		.loc 1 463 0
 1238 08a2 4FF03003 		mov	r3, #48
 1239 08a6 7B60     		str	r3, [r7, #4]
 464:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1240              		.loc 1 464 0
 1241 08a8 4FF08003 		mov	r3, #128
 1242 08ac BB60     		str	r3, [r7, #8]
 465:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1243              		.loc 1 465 0
 1244 08ae 4FF00403 		mov	r3, #4
 1245 08b2 FB61     		str	r3, [r7, #28]
 466:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1246              		.loc 1 466 0
 1247 08b4 4FF00003 		mov	r3, #0
 1248 08b8 FB60     		str	r3, [r7, #12]
 467:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1249              		.loc 1 467 0
 1250 08ba 4FF00003 		mov	r3, #0
 1251 08be 7B61     		str	r3, [r7, #20]
 468:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1252              		.loc 1 468 0
 1253 08c0 4FF48033 		mov	r3, #65536
 1254 08c4 BB61     		str	r3, [r7, #24]
 469:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1255              		.loc 1 469 0
 1256 08c6 4FF00003 		mov	r3, #0
 1257 08ca 3B61     		str	r3, [r7, #16]
 470:../src/main.cpp **** 
 471:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 1258              		.loc 1 471 0
 1259 08cc 07F10403 		add	r3, r7, #4
 1260 08d0 4FF01800 		mov	r0, #24
 1261 08d4 1946     		mov	r1, r3
 1262 08d6 FFF7FEFF 		bl	COMP_Init
 472:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 1263              		.loc 1 472 0
 1264 08da 4FF01800 		mov	r0, #24
 1265 08de 4FF00101 		mov	r1, #1
 1266 08e2 FFF7FEFF 		bl	COMP_Cmd
 1267              	.LBE8:
 473:../src/main.cpp **** }
 1268              		.loc 1 473 0
 1269 08e6 07F12807 		add	r7, r7, #40
 1270 08ea BD46     		mov	sp, r7
 1271 08ec 80BD     		pop	{r7, pc}
 1272              		.cfi_endproc
 1273              	.LFE118:
 1275 08ee 00BF     		.align	2
 1276              		.global	_Z14calc_gyro_biasv
 1277              		.thumb
 1278              		.thumb_func
 1280              	_Z14calc_gyro_biasv:
 1281              	.LFB119:
 474:../src/main.cpp **** 
 475:../src/main.cpp **** int16_t calc_gyro_bias(void)
 476:../src/main.cpp **** {
 1282              		.loc 1 476 0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 16
 1285              		@ frame_needed = 1, uses_anonymous_args = 0
 1286 08f0 80B5     		push	{r7, lr}
 1287              	.LCFI24:
 1288              		.cfi_def_cfa_offset 8
 1289              		.cfi_offset 7, -8
 1290              		.cfi_offset 14, -4
 1291 08f2 84B0     		sub	sp, sp, #16
 1292              	.LCFI25:
 1293              		.cfi_def_cfa_offset 24
 1294 08f4 00AF     		add	r7, sp, #0
 1295              	.LCFI26:
 1296              		.cfi_def_cfa_register 7
 1297              	.LBB9:
 477:../src/main.cpp **** 	int i = 0;
 1298              		.loc 1 477 0
 1299 08f6 4FF00003 		mov	r3, #0
 1300 08fa FB60     		str	r3, [r7, #12]
 478:../src/main.cpp **** 	int accum_x = 0;
 1301              		.loc 1 478 0
 1302 08fc 4FF00003 		mov	r3, #0
 1303 0900 BB60     		str	r3, [r7, #8]
 479:../src/main.cpp **** 
 480:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 481:../src/main.cpp **** 		uint16_t un_signed;
 482:../src/main.cpp **** 		int16_t output;
 483:../src/main.cpp **** 	} convert;
 484:../src/main.cpp **** 
 485:../src/main.cpp **** 	uint8_t bytes[2];
 486:../src/main.cpp **** 
 487:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1304              		.loc 1 487 0
 1305 0902 4FF00003 		mov	r3, #0
 1306 0906 FB60     		str	r3, [r7, #12]
 1307 0908 19E0     		b	.L17
 1308              	.L18:
 488:../src/main.cpp **** 	{
 489:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1309              		.loc 1 489 0 discriminator 2
 1310 090a 3B46     		mov	r3, r7
 1311 090c 1846     		mov	r0, r3
 1312 090e 4FF02801 		mov	r1, #40
 1313 0912 4FF00202 		mov	r2, #2
 1314 0916 FFF7FEFF 		bl	L3GD20_Read
 490:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1315              		.loc 1 490 0 discriminator 2
 1316 091a 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1317 091c 4FEA0323 		lsl	r3, r3, #8
 1318 0920 9AB2     		uxth	r2, r3
 1319 0922 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1320 0924 1343     		orrs	r3, r3, r2
 1321 0926 9BB2     		uxth	r3, r3
 1322 0928 9BB2     		uxth	r3, r3
 1323 092a BB80     		strh	r3, [r7, #4]	@ movhi
 491:../src/main.cpp **** 		accum_x += convert.output;
 1324              		.loc 1 491 0 discriminator 2
 1325 092c BB88     		ldrh	r3, [r7, #4]
 1326 092e 1BB2     		sxth	r3, r3
 1327 0930 BA68     		ldr	r2, [r7, #8]
 1328 0932 D318     		adds	r3, r2, r3
 1329 0934 BB60     		str	r3, [r7, #8]
 487:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1330              		.loc 1 487 0 discriminator 2
 1331 0936 FB68     		ldr	r3, [r7, #12]
 1332 0938 03F10103 		add	r3, r3, #1
 1333 093c FB60     		str	r3, [r7, #12]
 1334              	.L17:
 487:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1335              		.loc 1 487 0 is_stmt 0 discriminator 1
 1336 093e FB68     		ldr	r3, [r7, #12]
 1337 0940 F92B     		cmp	r3, #249
 1338 0942 CCBF     		ite	gt
 1339 0944 0023     		movgt	r3, #0
 1340 0946 0123     		movle	r3, #1
 1341 0948 DBB2     		uxtb	r3, r3
 1342 094a 002B     		cmp	r3, #0
 1343 094c DDD1     		bne	.L18
 492:../src/main.cpp **** 	}
 493:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1344              		.loc 1 493 0 is_stmt 1
 1345 094e D7ED027A 		flds	s15, [r7, #8]	@ int
 1346 0952 B8EEE77A 		fsitos	s14, s15
 1347 0956 DFED077A 		flds	s15, .L20
 1348 095a C7EE277A 		fdivs	s15, s14, s15
 1349 095e FDEEE77A 		ftosizs	s15, s15
 1350 0962 17EE903A 		fmrs	r3, s15	@ int
 1351 0966 9BB2     		uxth	r3, r3
 1352 0968 1BB2     		sxth	r3, r3
 1353              	.LBE9:
 494:../src/main.cpp **** }
 1354              		.loc 1 494 0
 1355 096a 1846     		mov	r0, r3
 1356 096c 07F11007 		add	r7, r7, #16
 1357 0970 BD46     		mov	sp, r7
 1358 0972 80BD     		pop	{r7, pc}
 1359              	.L21:
 1360              		.align	2
 1361              	.L20:
 1362 0974 00007A43 		.word	1132068864
 1363              		.cfi_endproc
 1364              	.LFE119:
 1366              		.align	2
 1367              		.global	_Z13adc1_init_DMAv
 1368              		.thumb
 1369              		.thumb_func
 1371              	_Z13adc1_init_DMAv:
 1372              	.LFB120:
 495:../src/main.cpp **** 
 496:../src/main.cpp **** /*
 497:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 498:../src/main.cpp ****  * a user-supplied location in memory
 499:../src/main.cpp ****  * @Args: None
 500:../src/main.cpp ****  * @Return Val: None
 501:../src/main.cpp ****  */
 502:../src/main.cpp **** 
 503:../src/main.cpp **** void adc1_init_DMA(void)
 504:../src/main.cpp **** {
 1373              		.loc 1 504 0
 1374              		.cfi_startproc
 1375              		@ args = 0, pretend = 0, frame = 112
 1376              		@ frame_needed = 1, uses_anonymous_args = 0
 1377 0978 80B5     		push	{r7, lr}
 1378              	.LCFI27:
 1379              		.cfi_def_cfa_offset 8
 1380              		.cfi_offset 7, -8
 1381              		.cfi_offset 14, -4
 1382 097a 9CB0     		sub	sp, sp, #112
 1383              	.LCFI28:
 1384              		.cfi_def_cfa_offset 120
 1385 097c 00AF     		add	r7, sp, #0
 1386              	.LCFI29:
 1387              		.cfi_def_cfa_register 7
 1388              	.LBB10:
 505:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 506:../src/main.cpp **** 
 507:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 508:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 509:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 510:../src/main.cpp **** 
 511:../src/main.cpp **** 	/* Configure the ADC clock */
 512:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1389              		.loc 1 512 0
 1390 097e 4FF48870 		mov	r0, #272
 1391 0982 FFF7FEFF 		bl	RCC_ADCCLKConfig
 513:../src/main.cpp **** 	/* Enable ADC1 clock */
 514:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1392              		.loc 1 514 0
 1393 0986 4FF08050 		mov	r0, #268435456
 1394 098a 4FF00101 		mov	r1, #1
 1395 098e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 515:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 516:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1396              		.loc 1 516 0
 1397 0992 4FF40030 		mov	r0, #131072
 1398 0996 4FF00101 		mov	r1, #1
 1399 099a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 517:../src/main.cpp **** 
 518:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 519:../src/main.cpp **** 
 520:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1400              		.loc 1 520 0
 1401 099e 07F15003 		add	r3, r7, #80
 1402 09a2 1846     		mov	r0, r3
 1403 09a4 FFF7FEFF 		bl	GPIO_StructInit
 521:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1404              		.loc 1 521 0
 1405 09a8 4FF00C03 		mov	r3, #12
 1406 09ac 3B65     		str	r3, [r7, #80]
 522:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1407              		.loc 1 522 0
 1408 09ae 4FF00303 		mov	r3, #3
 1409 09b2 87F85430 		strb	r3, [r7, #84]
 523:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1410              		.loc 1 523 0
 1411 09b6 4FF00003 		mov	r3, #0
 1412 09ba 87F85730 		strb	r3, [r7, #87]
 524:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1413              		.loc 1 524 0
 1414 09be 07F15003 		add	r3, r7, #80
 1415 09c2 4FF09040 		mov	r0, #1207959552
 1416 09c6 1946     		mov	r1, r3
 1417 09c8 FFF7FEFF 		bl	GPIO_Init
 525:../src/main.cpp **** 
 526:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1418              		.loc 1 526 0
 1419 09cc 3B46     		mov	r3, r7
 1420 09ce 1846     		mov	r0, r3
 1421 09d0 FFF7FEFF 		bl	ADC_StructInit
 527:../src/main.cpp **** 
 528:../src/main.cpp **** 	/* Calibration procedure */
 529:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1422              		.loc 1 529 0
 1423 09d4 4FF0A040 		mov	r0, #1342177280
 1424 09d8 4FF00101 		mov	r1, #1
 1425 09dc FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 530:../src/main.cpp **** 
 531:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 532:../src/main.cpp **** 	int foo;
 533:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1426              		.loc 1 533 0
 1427 09e0 4FF00003 		mov	r3, #0
 1428 09e4 FB66     		str	r3, [r7, #108]
 1429 09e6 07E0     		b	.L23
 1430              	.L24:
 534:../src/main.cpp **** 	{
 535:../src/main.cpp **** 	  ++foo;
 1431              		.loc 1 535 0 discriminator 2
 1432 09e8 FB6E     		ldr	r3, [r7, #108]
 1433 09ea 03F10103 		add	r3, r3, #1
 1434 09ee FB66     		str	r3, [r7, #108]
 533:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1435              		.loc 1 533 0 discriminator 2
 1436 09f0 FB6E     		ldr	r3, [r7, #108]
 1437 09f2 03F10103 		add	r3, r3, #1
 1438 09f6 FB66     		str	r3, [r7, #108]
 1439              	.L23:
 533:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1440              		.loc 1 533 0 is_stmt 0 discriminator 1
 1441 09f8 FA6E     		ldr	r2, [r7, #108]
 1442 09fa 4FF6FF13 		movw	r3, #63999
 1443 09fe 9A42     		cmp	r2, r3
 1444 0a00 CCBF     		ite	gt
 1445 0a02 0023     		movgt	r3, #0
 1446 0a04 0123     		movle	r3, #1
 1447 0a06 DBB2     		uxtb	r3, r3
 1448 0a08 002B     		cmp	r3, #0
 1449 0a0a EDD1     		bne	.L24
 536:../src/main.cpp **** 	}
 537:../src/main.cpp **** 
 538:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1450              		.loc 1 538 0 is_stmt 1
 1451 0a0c 4FF0A040 		mov	r0, #1342177280
 1452 0a10 4FF00001 		mov	r1, #0
 1453 0a14 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 539:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1454              		.loc 1 539 0
 1455 0a18 4FF0A040 		mov	r0, #1342177280
 1456 0a1c FFF7FEFF 		bl	ADC_StartCalibration
 540:../src/main.cpp **** 
 541:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1457              		.loc 1 541 0
 1458 0a20 00BF     		nop
 1459              	.L25:
 1460              		.loc 1 541 0 is_stmt 0 discriminator 1
 1461 0a22 4FF0A040 		mov	r0, #1342177280
 1462 0a26 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1463 0a2a 0346     		mov	r3, r0
 1464 0a2c 002B     		cmp	r3, #0
 1465 0a2e 0CBF     		ite	eq
 1466 0a30 0023     		moveq	r3, #0
 1467 0a32 0123     		movne	r3, #1
 1468 0a34 DBB2     		uxtb	r3, r3
 1469 0a36 002B     		cmp	r3, #0
 1470 0a38 F3D1     		bne	.L25
 542:../src/main.cpp **** 
 543:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1471              		.loc 1 543 0 is_stmt 1
 1472 0a3a 4FF00003 		mov	r3, #0
 1473 0a3e BB65     		str	r3, [r7, #88]
 544:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 1474              		.loc 1 544 0
 1475 0a40 4FF00003 		mov	r3, #0
 1476 0a44 FB65     		str	r3, [r7, #92]
 545:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1477              		.loc 1 545 0
 1478 0a46 4FF40043 		mov	r3, #32768
 1479 0a4a 3B66     		str	r3, [r7, #96]
 546:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1480              		.loc 1 546 0
 1481 0a4c 4FF00203 		mov	r3, #2
 1482 0a50 7B66     		str	r3, [r7, #100]
 547:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1483              		.loc 1 547 0
 1484 0a52 4FF00F03 		mov	r3, #15
 1485 0a56 87F86830 		strb	r3, [r7, #104]
 548:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1486              		.loc 1 548 0
 1487 0a5a 07F15803 		add	r3, r7, #88
 1488 0a5e 4FF0A040 		mov	r0, #1342177280
 1489 0a62 1946     		mov	r1, r3
 1490 0a64 FFF7FEFF 		bl	ADC_CommonInit
 549:../src/main.cpp **** 
 550:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1491              		.loc 1 550 0
 1492 0a68 4FF40053 		mov	r3, #8192
 1493 0a6c 3B60     		str	r3, [r7, #0]
 551:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1494              		.loc 1 551 0
 1495 0a6e 4FF00003 		mov	r3, #0
 1496 0a72 7B60     		str	r3, [r7, #4]
 552:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1497              		.loc 1 552 0
 1498 0a74 4FF00003 		mov	r3, #0
 1499 0a78 BB60     		str	r3, [r7, #8]
 553:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1500              		.loc 1 553 0
 1501 0a7a 4FF00003 		mov	r3, #0
 1502 0a7e FB60     		str	r3, [r7, #12]
 554:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1503              		.loc 1 554 0
 1504 0a80 4FF00003 		mov	r3, #0
 1505 0a84 3B61     		str	r3, [r7, #16]
 555:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1506              		.loc 1 555 0
 1507 0a86 4FF00003 		mov	r3, #0
 1508 0a8a 7B61     		str	r3, [r7, #20]
 556:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1509              		.loc 1 556 0
 1510 0a8c 4FF00003 		mov	r3, #0
 1511 0a90 BB61     		str	r3, [r7, #24]
 557:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1512              		.loc 1 557 0
 1513 0a92 4FF00203 		mov	r3, #2
 1514 0a96 3B77     		strb	r3, [r7, #28]
 558:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1515              		.loc 1 558 0
 1516 0a98 3B46     		mov	r3, r7
 1517 0a9a 4FF0A040 		mov	r0, #1342177280
 1518 0a9e 1946     		mov	r1, r3
 1519 0aa0 FFF7FEFF 		bl	ADC_Init
 559:../src/main.cpp **** 
 560:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 561:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1520              		.loc 1 561 0
 1521 0aa4 4FF0A040 		mov	r0, #1342177280
 1522 0aa8 4FF00301 		mov	r1, #3
 1523 0aac 4FF00102 		mov	r2, #1
 1524 0ab0 4FF00703 		mov	r3, #7
 1525 0ab4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 562:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1526              		.loc 1 562 0
 1527 0ab8 4FF0A040 		mov	r0, #1342177280
 1528 0abc 4FF00401 		mov	r1, #4
 1529 0ac0 4FF00202 		mov	r2, #2
 1530 0ac4 4FF00703 		mov	r3, #7
 1531 0ac8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 563:../src/main.cpp **** 
 564:../src/main.cpp **** 	/* Enable ADC1 */
 565:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1532              		.loc 1 565 0
 1533 0acc 4FF0A040 		mov	r0, #1342177280
 1534 0ad0 4FF00101 		mov	r1, #1
 1535 0ad4 FFF7FEFF 		bl	ADC_Cmd
 566:../src/main.cpp **** 
 567:../src/main.cpp **** 	/* wait for ADRDY */
 568:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1536              		.loc 1 568 0
 1537 0ad8 00BF     		nop
 1538              	.L26:
 1539              		.loc 1 568 0 is_stmt 0 discriminator 1
 1540 0ada 4FF0A040 		mov	r0, #1342177280
 1541 0ade 4FF00101 		mov	r1, #1
 1542 0ae2 FFF7FEFF 		bl	ADC_GetFlagStatus
 1543 0ae6 0346     		mov	r3, r0
 1544 0ae8 002B     		cmp	r3, #0
 1545 0aea 14BF     		ite	ne
 1546 0aec 0023     		movne	r3, #0
 1547 0aee 0123     		moveq	r3, #1
 1548 0af0 DBB2     		uxtb	r3, r3
 1549 0af2 002B     		cmp	r3, #0
 1550 0af4 F1D1     		bne	.L26
 569:../src/main.cpp **** 
 570:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 571:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1551              		.loc 1 571 0 is_stmt 1
 1552 0af6 4FF0A040 		mov	r0, #1342177280
 1553 0afa FFF7FEFF 		bl	ADC_StartConversion
 572:../src/main.cpp **** 
 573:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1554              		.loc 1 573 0
 1555 0afe 4FF00100 		mov	r0, #1
 1556 0b02 4FF00101 		mov	r1, #1
 1557 0b06 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 574:../src/main.cpp **** 
 575:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 576:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1558              		.loc 1 576 0
 1559 0b0a 07F12003 		add	r3, r7, #32
 1560 0b0e 1846     		mov	r0, r3
 1561 0b10 FFF7FEFF 		bl	DMA_StructInit
 577:../src/main.cpp **** 
 578:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1562              		.loc 1 578 0
 1563 0b14 4FF00800 		mov	r0, #8
 1564 0b18 C4F20200 		movt	r0, 16386
 1565 0b1c FFF7FEFF 		bl	DMA_DeInit
 579:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1566              		.loc 1 579 0
 1567 0b20 4FF04003 		mov	r3, #64
 1568 0b24 C5F20003 		movt	r3, 20480
 1569 0b28 3B62     		str	r3, [r7, #32]
 580:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1570              		.loc 1 580 0
 1571 0b2a 40F20003 		movw	r3, #:lower16:adcData
 1572 0b2e C0F20003 		movt	r3, #:upper16:adcData
 1573 0b32 7B62     		str	r3, [r7, #36]
 581:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1574              		.loc 1 581 0
 1575 0b34 4FF00003 		mov	r3, #0
 1576 0b38 BB62     		str	r3, [r7, #40]
 582:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1577              		.loc 1 582 0
 1578 0b3a 4FF00203 		mov	r3, #2
 1579 0b3e BB85     		strh	r3, [r7, #44]	@ movhi
 583:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1580              		.loc 1 583 0
 1581 0b40 4FF00003 		mov	r3, #0
 1582 0b44 3B63     		str	r3, [r7, #48]
 584:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1583              		.loc 1 584 0
 1584 0b46 4FF08003 		mov	r3, #128
 1585 0b4a 7B63     		str	r3, [r7, #52]
 585:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1586              		.loc 1 585 0
 1587 0b4c 4FF40073 		mov	r3, #512
 1588 0b50 BB63     		str	r3, [r7, #56]
 586:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1589              		.loc 1 586 0
 1590 0b52 4FF40063 		mov	r3, #2048
 1591 0b56 FB63     		str	r3, [r7, #60]
 587:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1592              		.loc 1 587 0
 1593 0b58 4FF02003 		mov	r3, #32
 1594 0b5c 3B64     		str	r3, [r7, #64]
 588:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1595              		.loc 1 588 0
 1596 0b5e 4FF40053 		mov	r3, #8192
 1597 0b62 7B64     		str	r3, [r7, #68]
 589:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1598              		.loc 1 589 0
 1599 0b64 4FF00003 		mov	r3, #0
 1600 0b68 BB64     		str	r3, [r7, #72]
 590:../src/main.cpp **** 
 591:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1601              		.loc 1 591 0
 1602 0b6a 07F12003 		add	r3, r7, #32
 1603 0b6e 4FF00800 		mov	r0, #8
 1604 0b72 C4F20200 		movt	r0, 16386
 1605 0b76 1946     		mov	r1, r3
 1606 0b78 FFF7FEFF 		bl	DMA_Init
 592:../src/main.cpp **** 
 593:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 594:../src/main.cpp **** 
 595:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1607              		.loc 1 595 0
 1608 0b7c 4FF00B03 		mov	r3, #11
 1609 0b80 87F84C30 		strb	r3, [r7, #76]
 596:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1610              		.loc 1 596 0
 1611 0b84 4FF00203 		mov	r3, #2
 1612 0b88 87F84D30 		strb	r3, [r7, #77]
 597:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1613              		.loc 1 597 0
 1614 0b8c 4FF00003 		mov	r3, #0
 1615 0b90 87F84E30 		strb	r3, [r7, #78]
 598:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1616              		.loc 1 598 0
 1617 0b94 4FF00103 		mov	r3, #1
 1618 0b98 87F84F30 		strb	r3, [r7, #79]
 599:../src/main.cpp **** 
 600:../src/main.cpp **** 	NVIC_Init(&nv);
 1619              		.loc 1 600 0
 1620 0b9c 07F14C03 		add	r3, r7, #76
 1621 0ba0 1846     		mov	r0, r3
 1622 0ba2 FFF7FEFF 		bl	NVIC_Init
 601:../src/main.cpp **** 
 602:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1623              		.loc 1 602 0
 1624 0ba6 4FF00800 		mov	r0, #8
 1625 0baa C4F20200 		movt	r0, 16386
 1626 0bae 4FF00201 		mov	r1, #2
 1627 0bb2 4FF00102 		mov	r2, #1
 1628 0bb6 FFF7FEFF 		bl	DMA_ITConfig
 603:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1629              		.loc 1 603 0
 1630 0bba 4FF00800 		mov	r0, #8
 1631 0bbe C4F20200 		movt	r0, 16386
 1632 0bc2 4FF00101 		mov	r1, #1
 1633 0bc6 FFF7FEFF 		bl	DMA_Cmd
 604:../src/main.cpp **** 
 605:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1634              		.loc 1 605 0
 1635 0bca 4FF0A040 		mov	r0, #1342177280
 1636 0bce 4FF00201 		mov	r1, #2
 1637 0bd2 FFF7FEFF 		bl	ADC_DMAConfig
 606:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1638              		.loc 1 606 0
 1639 0bd6 4FF0A040 		mov	r0, #1342177280
 1640 0bda 4FF00101 		mov	r1, #1
 1641 0bde FFF7FEFF 		bl	ADC_DMACmd
 1642              	.LBE10:
 607:../src/main.cpp **** }
 1643              		.loc 1 607 0
 1644 0be2 07F17007 		add	r7, r7, #112
 1645 0be6 BD46     		mov	sp, r7
 1646 0be8 80BD     		pop	{r7, pc}
 1647              		.cfi_endproc
 1648              	.LFE120:
 1650 0bea 00BF     		.align	2
 1651              		.global	_Z13adc2_init_DMAv
 1652              		.thumb
 1653              		.thumb_func
 1655              	_Z13adc2_init_DMAv:
 1656              	.LFB121:
 608:../src/main.cpp **** 
 609:../src/main.cpp **** void adc2_init_DMA(void)
 610:../src/main.cpp **** {
 1657              		.loc 1 610 0
 1658              		.cfi_startproc
 1659              		@ args = 0, pretend = 0, frame = 112
 1660              		@ frame_needed = 1, uses_anonymous_args = 0
 1661 0bec 80B5     		push	{r7, lr}
 1662              	.LCFI30:
 1663              		.cfi_def_cfa_offset 8
 1664              		.cfi_offset 7, -8
 1665              		.cfi_offset 14, -4
 1666 0bee 9CB0     		sub	sp, sp, #112
 1667              	.LCFI31:
 1668              		.cfi_def_cfa_offset 120
 1669 0bf0 00AF     		add	r7, sp, #0
 1670              	.LCFI32:
 1671              		.cfi_def_cfa_register 7
 1672              	.LBB11:
 611:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 612:../src/main.cpp **** 
 613:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 614:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 615:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 616:../src/main.cpp **** 
 617:../src/main.cpp **** 	/* Configure the ADC clock */
 618:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1673              		.loc 1 618 0
 1674 0bf2 4FF48870 		mov	r0, #272
 1675 0bf6 FFF7FEFF 		bl	RCC_ADCCLKConfig
 619:../src/main.cpp **** 	/* Enable ADC2 clock */
 620:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1676              		.loc 1 620 0
 1677 0bfa 4FF08050 		mov	r0, #268435456
 1678 0bfe 4FF00101 		mov	r1, #1
 1679 0c02 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 621:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 622:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1680              		.loc 1 622 0
 1681 0c06 4FF46020 		mov	r0, #917504
 1682 0c0a 4FF00101 		mov	r1, #1
 1683 0c0e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 623:../src/main.cpp **** 
 624:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 625:../src/main.cpp **** 
 626:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1684              		.loc 1 626 0
 1685 0c12 07F15003 		add	r3, r7, #80
 1686 0c16 1846     		mov	r0, r3
 1687 0c18 FFF7FEFF 		bl	GPIO_StructInit
 627:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1688              		.loc 1 627 0
 1689 0c1c 4FF01003 		mov	r3, #16
 1690 0c20 3B65     		str	r3, [r7, #80]
 628:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1691              		.loc 1 628 0
 1692 0c22 4FF00303 		mov	r3, #3
 1693 0c26 87F85430 		strb	r3, [r7, #84]
 629:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1694              		.loc 1 629 0
 1695 0c2a 4FF00003 		mov	r3, #0
 1696 0c2e 87F85730 		strb	r3, [r7, #87]
 630:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1697              		.loc 1 630 0
 1698 0c32 4FF00303 		mov	r3, #3
 1699 0c36 87F85530 		strb	r3, [r7, #85]
 631:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1700              		.loc 1 631 0
 1701 0c3a 07F15003 		add	r3, r7, #80
 1702 0c3e 4FF09040 		mov	r0, #1207959552
 1703 0c42 1946     		mov	r1, r3
 1704 0c44 FFF7FEFF 		bl	GPIO_Init
 632:../src/main.cpp **** 
 633:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1705              		.loc 1 633 0
 1706 0c48 07F15003 		add	r3, r7, #80
 1707 0c4c 1846     		mov	r0, r3
 1708 0c4e FFF7FEFF 		bl	GPIO_StructInit
 634:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1709              		.loc 1 634 0
 1710 0c52 4FF00403 		mov	r3, #4
 1711 0c56 3B65     		str	r3, [r7, #80]
 635:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1712              		.loc 1 635 0
 1713 0c58 4FF00303 		mov	r3, #3
 1714 0c5c 87F85430 		strb	r3, [r7, #84]
 636:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1715              		.loc 1 636 0
 1716 0c60 4FF00003 		mov	r3, #0
 1717 0c64 87F85730 		strb	r3, [r7, #87]
 637:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1718              		.loc 1 637 0
 1719 0c68 07F15003 		add	r3, r7, #80
 1720 0c6c 4FF48060 		mov	r0, #1024
 1721 0c70 C4F60000 		movt	r0, 18432
 1722 0c74 1946     		mov	r1, r3
 1723 0c76 FFF7FEFF 		bl	GPIO_Init
 638:../src/main.cpp **** 
 639:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1724              		.loc 1 639 0
 1725 0c7a 07F15003 		add	r3, r7, #80
 1726 0c7e 1846     		mov	r0, r3
 1727 0c80 FFF7FEFF 		bl	GPIO_StructInit
 640:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 1728              		.loc 1 640 0
 1729 0c84 4FF03003 		mov	r3, #48
 1730 0c88 3B65     		str	r3, [r7, #80]
 641:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1731              		.loc 1 641 0
 1732 0c8a 4FF00303 		mov	r3, #3
 1733 0c8e 87F85430 		strb	r3, [r7, #84]
 642:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1734              		.loc 1 642 0
 1735 0c92 4FF00003 		mov	r3, #0
 1736 0c96 87F85730 		strb	r3, [r7, #87]
 643:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 1737              		.loc 1 643 0
 1738 0c9a 07F15003 		add	r3, r7, #80
 1739 0c9e 4FF40060 		mov	r0, #2048
 1740 0ca2 C4F60000 		movt	r0, 18432
 1741 0ca6 1946     		mov	r1, r3
 1742 0ca8 FFF7FEFF 		bl	GPIO_Init
 644:../src/main.cpp **** 
 645:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1743              		.loc 1 645 0
 1744 0cac 3B46     		mov	r3, r7
 1745 0cae 1846     		mov	r0, r3
 1746 0cb0 FFF7FEFF 		bl	ADC_StructInit
 646:../src/main.cpp **** 
 647:../src/main.cpp **** 	/* Calibration procedure */
 648:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 1747              		.loc 1 648 0
 1748 0cb4 4FF48070 		mov	r0, #256
 1749 0cb8 C5F20000 		movt	r0, 20480
 1750 0cbc 4FF00101 		mov	r1, #1
 1751 0cc0 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 649:../src/main.cpp **** 
 650:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 651:../src/main.cpp **** 	int foo;
 652:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1752              		.loc 1 652 0
 1753 0cc4 4FF00003 		mov	r3, #0
 1754 0cc8 FB66     		str	r3, [r7, #108]
 1755 0cca 07E0     		b	.L28
 1756              	.L29:
 653:../src/main.cpp **** 	{
 654:../src/main.cpp **** 	  ++foo;
 1757              		.loc 1 654 0 discriminator 2
 1758 0ccc FB6E     		ldr	r3, [r7, #108]
 1759 0cce 03F10103 		add	r3, r3, #1
 1760 0cd2 FB66     		str	r3, [r7, #108]
 652:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1761              		.loc 1 652 0 discriminator 2
 1762 0cd4 FB6E     		ldr	r3, [r7, #108]
 1763 0cd6 03F10103 		add	r3, r3, #1
 1764 0cda FB66     		str	r3, [r7, #108]
 1765              	.L28:
 652:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1766              		.loc 1 652 0 is_stmt 0 discriminator 1
 1767 0cdc FA6E     		ldr	r2, [r7, #108]
 1768 0cde 4FF6FF13 		movw	r3, #63999
 1769 0ce2 9A42     		cmp	r2, r3
 1770 0ce4 CCBF     		ite	gt
 1771 0ce6 0023     		movgt	r3, #0
 1772 0ce8 0123     		movle	r3, #1
 1773 0cea DBB2     		uxtb	r3, r3
 1774 0cec 002B     		cmp	r3, #0
 1775 0cee EDD1     		bne	.L29
 655:../src/main.cpp **** 	}
 656:../src/main.cpp **** 
 657:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 1776              		.loc 1 657 0 is_stmt 1
 1777 0cf0 4FF48070 		mov	r0, #256
 1778 0cf4 C5F20000 		movt	r0, 20480
 1779 0cf8 4FF00001 		mov	r1, #0
 1780 0cfc FFF7FEFF 		bl	ADC_SelectCalibrationMode
 658:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 1781              		.loc 1 658 0
 1782 0d00 4FF48070 		mov	r0, #256
 1783 0d04 C5F20000 		movt	r0, 20480
 1784 0d08 FFF7FEFF 		bl	ADC_StartCalibration
 659:../src/main.cpp **** 
 660:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 1785              		.loc 1 660 0
 1786 0d0c 00BF     		nop
 1787              	.L30:
 1788              		.loc 1 660 0 is_stmt 0 discriminator 1
 1789 0d0e 4FF48070 		mov	r0, #256
 1790 0d12 C5F20000 		movt	r0, 20480
 1791 0d16 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1792 0d1a 0346     		mov	r3, r0
 1793 0d1c 002B     		cmp	r3, #0
 1794 0d1e 0CBF     		ite	eq
 1795 0d20 0023     		moveq	r3, #0
 1796 0d22 0123     		movne	r3, #1
 1797 0d24 DBB2     		uxtb	r3, r3
 1798 0d26 002B     		cmp	r3, #0
 1799 0d28 F1D1     		bne	.L30
 661:../src/main.cpp **** 
 662:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1800              		.loc 1 662 0 is_stmt 1
 1801 0d2a 4FF00003 		mov	r3, #0
 1802 0d2e BB65     		str	r3, [r7, #88]
 663:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1803              		.loc 1 663 0
 1804 0d30 4FF00003 		mov	r3, #0
 1805 0d34 FB65     		str	r3, [r7, #92]
 664:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1806              		.loc 1 664 0
 1807 0d36 4FF40043 		mov	r3, #32768
 1808 0d3a 3B66     		str	r3, [r7, #96]
 665:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1809              		.loc 1 665 0
 1810 0d3c 4FF00203 		mov	r3, #2
 1811 0d40 7B66     		str	r3, [r7, #100]
 666:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 1812              		.loc 1 666 0
 1813 0d42 4FF00F03 		mov	r3, #15
 1814 0d46 87F86830 		strb	r3, [r7, #104]
 667:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 1815              		.loc 1 667 0
 1816 0d4a 07F15803 		add	r3, r7, #88
 1817 0d4e 4FF48070 		mov	r0, #256
 1818 0d52 C5F20000 		movt	r0, 20480
 1819 0d56 1946     		mov	r1, r3
 1820 0d58 FFF7FEFF 		bl	ADC_CommonInit
 668:../src/main.cpp **** 
 669:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1821              		.loc 1 669 0
 1822 0d5c 4FF40053 		mov	r3, #8192
 1823 0d60 3B60     		str	r3, [r7, #0]
 670:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1824              		.loc 1 670 0
 1825 0d62 4FF00003 		mov	r3, #0
 1826 0d66 7B60     		str	r3, [r7, #4]
 671:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1827              		.loc 1 671 0
 1828 0d68 4FF00003 		mov	r3, #0
 1829 0d6c BB60     		str	r3, [r7, #8]
 672:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1830              		.loc 1 672 0
 1831 0d6e 4FF00003 		mov	r3, #0
 1832 0d72 FB60     		str	r3, [r7, #12]
 673:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1833              		.loc 1 673 0
 1834 0d74 4FF00003 		mov	r3, #0
 1835 0d78 3B61     		str	r3, [r7, #16]
 674:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1836              		.loc 1 674 0
 1837 0d7a 4FF00003 		mov	r3, #0
 1838 0d7e 7B61     		str	r3, [r7, #20]
 675:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1839              		.loc 1 675 0
 1840 0d80 4FF00003 		mov	r3, #0
 1841 0d84 BB61     		str	r3, [r7, #24]
 676:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 1842              		.loc 1 676 0
 1843 0d86 4FF00403 		mov	r3, #4
 1844 0d8a 3B77     		strb	r3, [r7, #28]
 677:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 1845              		.loc 1 677 0
 1846 0d8c 3B46     		mov	r3, r7
 1847 0d8e 4FF48070 		mov	r0, #256
 1848 0d92 C5F20000 		movt	r0, 20480
 1849 0d96 1946     		mov	r1, r3
 1850 0d98 FFF7FEFF 		bl	ADC_Init
 678:../src/main.cpp **** 
 679:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 680:../src/main.cpp **** 
 681:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1851              		.loc 1 681 0
 1852 0d9c 4FF48070 		mov	r0, #256
 1853 0da0 C5F20000 		movt	r0, 20480
 1854 0da4 4FF00101 		mov	r1, #1
 1855 0da8 4FF00102 		mov	r2, #1
 1856 0dac 4FF00703 		mov	r3, #7
 1857 0db0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 682:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1858              		.loc 1 682 0
 1859 0db4 4FF48070 		mov	r0, #256
 1860 0db8 C5F20000 		movt	r0, 20480
 1861 0dbc 4FF00501 		mov	r1, #5
 1862 0dc0 4FF00202 		mov	r2, #2
 1863 0dc4 4FF00703 		mov	r3, #7
 1864 0dc8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 683:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 1865              		.loc 1 683 0
 1866 0dcc 4FF48070 		mov	r0, #256
 1867 0dd0 C5F20000 		movt	r0, 20480
 1868 0dd4 4FF00B01 		mov	r1, #11
 1869 0dd8 4FF00302 		mov	r2, #3
 1870 0ddc 4FF00703 		mov	r3, #7
 1871 0de0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 684:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 1872              		.loc 1 684 0
 1873 0de4 4FF48070 		mov	r0, #256
 1874 0de8 C5F20000 		movt	r0, 20480
 1875 0dec 4FF00C01 		mov	r1, #12
 1876 0df0 4FF00402 		mov	r2, #4
 1877 0df4 4FF00703 		mov	r3, #7
 1878 0df8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 685:../src/main.cpp **** 
 686:../src/main.cpp **** 	/* Enable ADC2 */
 687:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 1879              		.loc 1 687 0
 1880 0dfc 4FF48070 		mov	r0, #256
 1881 0e00 C5F20000 		movt	r0, 20480
 1882 0e04 4FF00101 		mov	r1, #1
 1883 0e08 FFF7FEFF 		bl	ADC_Cmd
 688:../src/main.cpp **** 
 689:../src/main.cpp **** 	/* wait for ADRDY */
 690:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 1884              		.loc 1 690 0
 1885 0e0c 00BF     		nop
 1886              	.L31:
 1887              		.loc 1 690 0 is_stmt 0 discriminator 1
 1888 0e0e 4FF48070 		mov	r0, #256
 1889 0e12 C5F20000 		movt	r0, 20480
 1890 0e16 4FF00101 		mov	r1, #1
 1891 0e1a FFF7FEFF 		bl	ADC_GetFlagStatus
 1892 0e1e 0346     		mov	r3, r0
 1893 0e20 002B     		cmp	r3, #0
 1894 0e22 14BF     		ite	ne
 1895 0e24 0023     		movne	r3, #0
 1896 0e26 0123     		moveq	r3, #1
 1897 0e28 DBB2     		uxtb	r3, r3
 1898 0e2a 002B     		cmp	r3, #0
 1899 0e2c EFD1     		bne	.L31
 691:../src/main.cpp **** 
 692:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 693:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 1900              		.loc 1 693 0 is_stmt 1
 1901 0e2e 4FF48070 		mov	r0, #256
 1902 0e32 C5F20000 		movt	r0, 20480
 1903 0e36 FFF7FEFF 		bl	ADC_StartConversion
 694:../src/main.cpp **** 
 695:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 1904              		.loc 1 695 0
 1905 0e3a 4FF00200 		mov	r0, #2
 1906 0e3e 4FF00101 		mov	r1, #1
 1907 0e42 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 696:../src/main.cpp **** 
 697:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 698:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1908              		.loc 1 698 0
 1909 0e46 07F12003 		add	r3, r7, #32
 1910 0e4a 1846     		mov	r0, r3
 1911 0e4c FFF7FEFF 		bl	DMA_StructInit
 699:../src/main.cpp **** 
 700:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 1912              		.loc 1 700 0
 1913 0e50 4FF48160 		mov	r0, #1032
 1914 0e54 C4F20200 		movt	r0, 16386
 1915 0e58 FFF7FEFF 		bl	DMA_DeInit
 701:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 1916              		.loc 1 701 0
 1917 0e5c 4FF4A073 		mov	r3, #320
 1918 0e60 C5F20003 		movt	r3, 20480
 1919 0e64 3B62     		str	r3, [r7, #32]
 702:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 1920              		.loc 1 702 0
 1921 0e66 40F20003 		movw	r3, #:lower16:adc2_data
 1922 0e6a C0F20003 		movt	r3, #:upper16:adc2_data
 1923 0e6e 7B62     		str	r3, [r7, #36]
 703:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1924              		.loc 1 703 0
 1925 0e70 4FF00003 		mov	r3, #0
 1926 0e74 BB62     		str	r3, [r7, #40]
 704:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 1927              		.loc 1 704 0
 1928 0e76 4FF00403 		mov	r3, #4
 1929 0e7a BB85     		strh	r3, [r7, #44]	@ movhi
 705:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1930              		.loc 1 705 0
 1931 0e7c 4FF00003 		mov	r3, #0
 1932 0e80 3B63     		str	r3, [r7, #48]
 706:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1933              		.loc 1 706 0
 1934 0e82 4FF08003 		mov	r3, #128
 1935 0e86 7B63     		str	r3, [r7, #52]
 707:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1936              		.loc 1 707 0
 1937 0e88 4FF40073 		mov	r3, #512
 1938 0e8c BB63     		str	r3, [r7, #56]
 708:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1939              		.loc 1 708 0
 1940 0e8e 4FF40063 		mov	r3, #2048
 1941 0e92 FB63     		str	r3, [r7, #60]
 709:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1942              		.loc 1 709 0
 1943 0e94 4FF02003 		mov	r3, #32
 1944 0e98 3B64     		str	r3, [r7, #64]
 710:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1945              		.loc 1 710 0
 1946 0e9a 4FF40053 		mov	r3, #8192
 1947 0e9e 7B64     		str	r3, [r7, #68]
 711:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1948              		.loc 1 711 0
 1949 0ea0 4FF00003 		mov	r3, #0
 1950 0ea4 BB64     		str	r3, [r7, #72]
 712:../src/main.cpp **** 
 713:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 1951              		.loc 1 713 0
 1952 0ea6 07F12003 		add	r3, r7, #32
 1953 0eaa 4FF48160 		mov	r0, #1032
 1954 0eae C4F20200 		movt	r0, 16386
 1955 0eb2 1946     		mov	r1, r3
 1956 0eb4 FFF7FEFF 		bl	DMA_Init
 714:../src/main.cpp **** 
 715:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 716:../src/main.cpp **** 
 717:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 1957              		.loc 1 717 0
 1958 0eb8 4FF03803 		mov	r3, #56
 1959 0ebc 87F84C30 		strb	r3, [r7, #76]
 718:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1960              		.loc 1 718 0
 1961 0ec0 4FF00203 		mov	r3, #2
 1962 0ec4 87F84D30 		strb	r3, [r7, #77]
 719:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1963              		.loc 1 719 0
 1964 0ec8 4FF00003 		mov	r3, #0
 1965 0ecc 87F84E30 		strb	r3, [r7, #78]
 720:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1966              		.loc 1 720 0
 1967 0ed0 4FF00103 		mov	r3, #1
 1968 0ed4 87F84F30 		strb	r3, [r7, #79]
 721:../src/main.cpp **** 
 722:../src/main.cpp **** 	NVIC_Init(&nv);
 1969              		.loc 1 722 0
 1970 0ed8 07F14C03 		add	r3, r7, #76
 1971 0edc 1846     		mov	r0, r3
 1972 0ede FFF7FEFF 		bl	NVIC_Init
 723:../src/main.cpp **** 
 724:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 1973              		.loc 1 724 0
 1974 0ee2 4FF48160 		mov	r0, #1032
 1975 0ee6 C4F20200 		movt	r0, 16386
 1976 0eea 4FF00201 		mov	r1, #2
 1977 0eee 4FF00102 		mov	r2, #1
 1978 0ef2 FFF7FEFF 		bl	DMA_ITConfig
 725:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 1979              		.loc 1 725 0
 1980 0ef6 4FF48160 		mov	r0, #1032
 1981 0efa C4F20200 		movt	r0, 16386
 1982 0efe 4FF00101 		mov	r1, #1
 1983 0f02 FFF7FEFF 		bl	DMA_Cmd
 726:../src/main.cpp **** 
 727:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 1984              		.loc 1 727 0
 1985 0f06 4FF48070 		mov	r0, #256
 1986 0f0a C5F20000 		movt	r0, 20480
 1987 0f0e 4FF00201 		mov	r1, #2
 1988 0f12 FFF7FEFF 		bl	ADC_DMAConfig
 728:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 1989              		.loc 1 728 0
 1990 0f16 4FF48070 		mov	r0, #256
 1991 0f1a C5F20000 		movt	r0, 20480
 1992 0f1e 4FF00101 		mov	r1, #1
 1993 0f22 FFF7FEFF 		bl	ADC_DMACmd
 1994              	.LBE11:
 729:../src/main.cpp **** }
 1995              		.loc 1 729 0
 1996 0f26 07F17007 		add	r7, r7, #112
 1997 0f2a BD46     		mov	sp, r7
 1998 0f2c 80BD     		pop	{r7, pc}
 1999              		.cfi_endproc
 2000              	.LFE121:
 2002 0f2e 00BF     		.align	2
 2003              		.global	_Z21battery_watchdog_initv
 2004              		.thumb
 2005              		.thumb_func
 2007              	_Z21battery_watchdog_initv:
 2008              	.LFB122:
 730:../src/main.cpp **** 
 731:../src/main.cpp **** void battery_watchdog_init(void)
 732:../src/main.cpp **** {
 2009              		.loc 1 732 0
 2010              		.cfi_startproc
 2011              		@ args = 0, pretend = 0, frame = 72
 2012              		@ frame_needed = 1, uses_anonymous_args = 0
 2013 0f30 80B5     		push	{r7, lr}
 2014              	.LCFI33:
 2015              		.cfi_def_cfa_offset 8
 2016              		.cfi_offset 7, -8
 2017              		.cfi_offset 14, -4
 2018 0f32 92B0     		sub	sp, sp, #72
 2019              	.LCFI34:
 2020              		.cfi_def_cfa_offset 80
 2021 0f34 00AF     		add	r7, sp, #0
 2022              	.LCFI35:
 2023              		.cfi_def_cfa_register 7
 2024              	.LBB12:
 733:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 734:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 735:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 736:../src/main.cpp **** 	/* Configure the ADC clock */
 737:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 2025              		.loc 1 737 0
 2026 0f36 4FF45050 		mov	r0, #13312
 2027 0f3a C1F20000 		movt	r0, 4096
 2028 0f3e FFF7FEFF 		bl	RCC_ADCCLKConfig
 738:../src/main.cpp **** 
 739:../src/main.cpp **** 	/* Enable ADC1 clock */
 740:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 2029              		.loc 1 740 0
 2030 0f42 4FF00050 		mov	r0, #536870912
 2031 0f46 4FF00101 		mov	r1, #1
 2032 0f4a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 741:../src/main.cpp **** 	/* ADC Channel configuration */
 742:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 743:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 2033              		.loc 1 743 0
 2034 0f4e 4FF41010 		mov	r0, #2359296
 2035 0f52 4FF00101 		mov	r1, #1
 2036 0f56 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 744:../src/main.cpp **** 
 745:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 746:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2037              		.loc 1 746 0
 2038 0f5a 07F12803 		add	r3, r7, #40
 2039 0f5e 1846     		mov	r0, r3
 2040 0f60 FFF7FEFF 		bl	GPIO_StructInit
 747:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 2041              		.loc 1 747 0
 2042 0f64 42F20203 		movw	r3, #8194
 2043 0f68 BB62     		str	r3, [r7, #40]
 748:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2044              		.loc 1 748 0
 2045 0f6a 4FF00303 		mov	r3, #3
 2046 0f6e 87F82C30 		strb	r3, [r7, #44]
 749:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2047              		.loc 1 749 0
 2048 0f72 4FF00003 		mov	r3, #0
 2049 0f76 87F82F30 		strb	r3, [r7, #47]
 750:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2050              		.loc 1 750 0
 2051 0f7a 07F12803 		add	r3, r7, #40
 2052 0f7e 4FF48060 		mov	r0, #1024
 2053 0f82 C4F60000 		movt	r0, 18432
 2054 0f86 1946     		mov	r1, r3
 2055 0f88 FFF7FEFF 		bl	GPIO_Init
 751:../src/main.cpp **** /*
 752:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 753:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 754:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 755:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 756:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 757:../src/main.cpp **** */
 758:../src/main.cpp **** 
 759:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2056              		.loc 1 759 0
 2057 0f8c 07F10403 		add	r3, r7, #4
 2058 0f90 1846     		mov	r0, r3
 2059 0f92 FFF7FEFF 		bl	ADC_StructInit
 760:../src/main.cpp **** 
 761:../src/main.cpp **** 	/* Calibration procedure */
 762:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 2060              		.loc 1 762 0
 2061 0f96 4FF48060 		mov	r0, #1024
 2062 0f9a C5F20000 		movt	r0, 20480
 2063 0f9e 4FF00101 		mov	r1, #1
 2064 0fa2 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 763:../src/main.cpp **** 
 764:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 765:../src/main.cpp **** 	int foo;
 766:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2065              		.loc 1 766 0
 2066 0fa6 4FF00003 		mov	r3, #0
 2067 0faa 7B64     		str	r3, [r7, #68]
 2068 0fac 07E0     		b	.L33
 2069              	.L34:
 767:../src/main.cpp **** 	{
 768:../src/main.cpp **** 	  ++foo;
 2070              		.loc 1 768 0 discriminator 2
 2071 0fae 7B6C     		ldr	r3, [r7, #68]
 2072 0fb0 03F10103 		add	r3, r3, #1
 2073 0fb4 7B64     		str	r3, [r7, #68]
 766:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2074              		.loc 1 766 0 discriminator 2
 2075 0fb6 7B6C     		ldr	r3, [r7, #68]
 2076 0fb8 03F10103 		add	r3, r3, #1
 2077 0fbc 7B64     		str	r3, [r7, #68]
 2078              	.L33:
 766:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2079              		.loc 1 766 0 is_stmt 0 discriminator 1
 2080 0fbe 7A6C     		ldr	r2, [r7, #68]
 2081 0fc0 47F6FF43 		movw	r3, #31999
 2082 0fc4 9A42     		cmp	r2, r3
 2083 0fc6 CCBF     		ite	gt
 2084 0fc8 0023     		movgt	r3, #0
 2085 0fca 0123     		movle	r3, #1
 2086 0fcc DBB2     		uxtb	r3, r3
 2087 0fce 002B     		cmp	r3, #0
 2088 0fd0 EDD1     		bne	.L34
 769:../src/main.cpp **** 	}
 770:../src/main.cpp **** 
 771:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 2089              		.loc 1 771 0 is_stmt 1
 2090 0fd2 4FF48060 		mov	r0, #1024
 2091 0fd6 C5F20000 		movt	r0, 20480
 2092 0fda 4FF00001 		mov	r1, #0
 2093 0fde FFF7FEFF 		bl	ADC_SelectCalibrationMode
 772:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 2094              		.loc 1 772 0
 2095 0fe2 4FF48060 		mov	r0, #1024
 2096 0fe6 C5F20000 		movt	r0, 20480
 2097 0fea FFF7FEFF 		bl	ADC_StartCalibration
 773:../src/main.cpp **** 
 774:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 2098              		.loc 1 774 0
 2099 0fee 00BF     		nop
 2100              	.L35:
 2101              		.loc 1 774 0 is_stmt 0 discriminator 1
 2102 0ff0 4FF48060 		mov	r0, #1024
 2103 0ff4 C5F20000 		movt	r0, 20480
 2104 0ff8 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2105 0ffc 0346     		mov	r3, r0
 2106 0ffe 002B     		cmp	r3, #0
 2107 1000 0CBF     		ite	eq
 2108 1002 0023     		moveq	r3, #0
 2109 1004 0123     		movne	r3, #1
 2110 1006 DBB2     		uxtb	r3, r3
 2111 1008 002B     		cmp	r3, #0
 2112 100a F1D1     		bne	.L35
 775:../src/main.cpp **** 
 776:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2113              		.loc 1 776 0 is_stmt 1
 2114 100c 4FF00003 		mov	r3, #0
 2115 1010 3B63     		str	r3, [r7, #48]
 777:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 2116              		.loc 1 777 0
 2117 1012 4FF44033 		mov	r3, #196608
 2118 1016 7B63     		str	r3, [r7, #52]
 778:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2119              		.loc 1 778 0
 2120 1018 4FF00003 		mov	r3, #0
 2121 101c BB63     		str	r3, [r7, #56]
 779:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2122              		.loc 1 779 0
 2123 101e 4FF00003 		mov	r3, #0
 2124 1022 FB63     		str	r3, [r7, #60]
 780:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2125              		.loc 1 780 0
 2126 1024 4FF00003 		mov	r3, #0
 2127 1028 87F84030 		strb	r3, [r7, #64]
 781:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 2128              		.loc 1 781 0
 2129 102c 07F13003 		add	r3, r7, #48
 2130 1030 4FF48060 		mov	r0, #1024
 2131 1034 C5F20000 		movt	r0, 20480
 2132 1038 1946     		mov	r1, r3
 2133 103a FFF7FEFF 		bl	ADC_CommonInit
 782:../src/main.cpp **** 
 783:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2134              		.loc 1 783 0
 2135 103e 4FF40053 		mov	r3, #8192
 2136 1042 7B60     		str	r3, [r7, #4]
 784:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2137              		.loc 1 784 0
 2138 1044 4FF00003 		mov	r3, #0
 2139 1048 BB60     		str	r3, [r7, #8]
 785:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2140              		.loc 1 785 0
 2141 104a 4FF00003 		mov	r3, #0
 2142 104e FB60     		str	r3, [r7, #12]
 786:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2143              		.loc 1 786 0
 2144 1050 4FF00003 		mov	r3, #0
 2145 1054 3B61     		str	r3, [r7, #16]
 787:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2146              		.loc 1 787 0
 2147 1056 4FF00003 		mov	r3, #0
 2148 105a 7B61     		str	r3, [r7, #20]
 788:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2149              		.loc 1 788 0
 2150 105c 4FF00003 		mov	r3, #0
 2151 1060 BB61     		str	r3, [r7, #24]
 789:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2152              		.loc 1 789 0
 2153 1062 4FF00003 		mov	r3, #0
 2154 1066 FB61     		str	r3, [r7, #28]
 790:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2155              		.loc 1 790 0
 2156 1068 4FF00203 		mov	r3, #2
 2157 106c 87F82030 		strb	r3, [r7, #32]
 791:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 2158              		.loc 1 791 0
 2159 1070 07F10403 		add	r3, r7, #4
 2160 1074 4FF48060 		mov	r0, #1024
 2161 1078 C5F20000 		movt	r0, 20480
 2162 107c 1946     		mov	r1, r3
 2163 107e FFF7FEFF 		bl	ADC_Init
 792:../src/main.cpp **** 
 793:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 794:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2164              		.loc 1 794 0
 2165 1082 4FF48060 		mov	r0, #1024
 2166 1086 C5F20000 		movt	r0, 20480
 2167 108a 4FF00101 		mov	r1, #1
 2168 108e 4FF00102 		mov	r2, #1
 2169 1092 4FF00703 		mov	r3, #7
 2170 1096 FFF7FEFF 		bl	ADC_RegularChannelConfig
 795:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2171              		.loc 1 795 0
 2172 109a 4FF48060 		mov	r0, #1024
 2173 109e C5F20000 		movt	r0, 20480
 2174 10a2 4FF00501 		mov	r1, #5
 2175 10a6 4FF00202 		mov	r2, #2
 2176 10aa 4FF00703 		mov	r3, #7
 2177 10ae FFF7FEFF 		bl	ADC_RegularChannelConfig
 796:../src/main.cpp **** 
 797:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 2178              		.loc 1 797 0
 2179 10b2 4FF48060 		mov	r0, #1024
 2180 10b6 C5F20000 		movt	r0, 20480
 2181 10ba 4FF00101 		mov	r1, #1
 2182 10be FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 798:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 2183              		.loc 1 798 0
 2184 10c2 4FF48060 		mov	r0, #1024
 2185 10c6 C5F20000 		movt	r0, 20480
 2186 10ca 4FF00501 		mov	r1, #5
 2187 10ce FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 799:../src/main.cpp **** 
 800:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 801:../src/main.cpp **** 
 802:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 2188              		.loc 1 802 0
 2189 10d2 4FF48060 		mov	r0, #1024
 2190 10d6 C5F20000 		movt	r0, 20480
 2191 10da 4FF40061 		mov	r1, #2048
 2192 10de 4FF00A02 		mov	r2, #10
 2193 10e2 FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 803:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 2194              		.loc 1 803 0
 2195 10e6 4FF48060 		mov	r0, #1024
 2196 10ea C5F20000 		movt	r0, 20480
 2197 10ee 4FF08001 		mov	r1, #128
 2198 10f2 4FF00002 		mov	r2, #0
 2199 10f6 FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 804:../src/main.cpp **** 
 805:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 2200              		.loc 1 805 0
 2201 10fa 4FF48060 		mov	r0, #1024
 2202 10fe C5F20000 		movt	r0, 20480
 2203 1102 4FF44001 		mov	r1, #12582912
 2204 1106 FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 806:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 807:../src/main.cpp **** 
 808:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 809:../src/main.cpp **** 
 810:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 811:../src/main.cpp **** 
 812:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 2205              		.loc 1 812 0
 2206 110a 4FF02F03 		mov	r3, #47
 2207 110e 87F82430 		strb	r3, [r7, #36]
 813:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 2208              		.loc 1 813 0
 2209 1112 4FF00003 		mov	r3, #0
 2210 1116 87F82530 		strb	r3, [r7, #37]
 814:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2211              		.loc 1 814 0
 2212 111a 4FF00003 		mov	r3, #0
 2213 111e 87F82630 		strb	r3, [r7, #38]
 815:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2214              		.loc 1 815 0
 2215 1122 4FF00103 		mov	r3, #1
 2216 1126 87F82730 		strb	r3, [r7, #39]
 816:../src/main.cpp **** 
 817:../src/main.cpp **** 	NVIC_Init(&nv);
 2217              		.loc 1 817 0
 2218 112a 07F12403 		add	r3, r7, #36
 2219 112e 1846     		mov	r0, r3
 2220 1130 FFF7FEFF 		bl	NVIC_Init
 818:../src/main.cpp **** 
 819:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 820:../src/main.cpp **** 
 821:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 2221              		.loc 1 821 0
 2222 1134 4FF48060 		mov	r0, #1024
 2223 1138 C5F20000 		movt	r0, 20480
 2224 113c 4FF4C071 		mov	r1, #384
 2225 1140 4FF00102 		mov	r2, #1
 2226 1144 FFF7FEFF 		bl	ADC_ITConfig
 822:../src/main.cpp **** 
 823:../src/main.cpp **** 	/* Enable ADC3 */
 824:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 2227              		.loc 1 824 0
 2228 1148 4FF48060 		mov	r0, #1024
 2229 114c C5F20000 		movt	r0, 20480
 2230 1150 4FF00101 		mov	r1, #1
 2231 1154 FFF7FEFF 		bl	ADC_Cmd
 825:../src/main.cpp **** 
 826:../src/main.cpp **** 	/* wait for ADRDY */
 827:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 2232              		.loc 1 827 0
 2233 1158 00BF     		nop
 2234              	.L36:
 2235              		.loc 1 827 0 is_stmt 0 discriminator 1
 2236 115a 4FF48060 		mov	r0, #1024
 2237 115e C5F20000 		movt	r0, 20480
 2238 1162 4FF00101 		mov	r1, #1
 2239 1166 FFF7FEFF 		bl	ADC_GetFlagStatus
 2240 116a 0346     		mov	r3, r0
 2241 116c 002B     		cmp	r3, #0
 2242 116e 14BF     		ite	ne
 2243 1170 0023     		movne	r3, #0
 2244 1172 0123     		moveq	r3, #1
 2245 1174 DBB2     		uxtb	r3, r3
 2246 1176 002B     		cmp	r3, #0
 2247 1178 EFD1     		bne	.L36
 828:../src/main.cpp **** 
 829:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 830:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 2248              		.loc 1 830 0 is_stmt 1
 2249 117a 4FF48060 		mov	r0, #1024
 2250 117e C5F20000 		movt	r0, 20480
 2251 1182 FFF7FEFF 		bl	ADC_StartConversion
 2252              	.LBE12:
 831:../src/main.cpp **** }
 2253              		.loc 1 831 0
 2254 1186 07F14807 		add	r7, r7, #72
 2255 118a BD46     		mov	sp, r7
 2256 118c 80BD     		pop	{r7, pc}
 2257              		.cfi_endproc
 2258              	.LFE122:
 2260 118e 00BF     		.align	2
 2261              		.global	_Z9adc1_initv
 2262              		.thumb
 2263              		.thumb_func
 2265              	_Z9adc1_initv:
 2266              	.LFB123:
 832:../src/main.cpp **** 
 833:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 834:../src/main.cpp ****  * @Args: Nothing
 835:../src/main.cpp ****  * @Return Val: Nothing
 836:../src/main.cpp ****  */
 837:../src/main.cpp **** 
 838:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 839:../src/main.cpp **** {
 2267              		.loc 1 839 0
 2268              		.cfi_startproc
 2269              		@ args = 0, pretend = 0, frame = 72
 2270              		@ frame_needed = 1, uses_anonymous_args = 0
 2271 1190 80B5     		push	{r7, lr}
 2272              	.LCFI36:
 2273              		.cfi_def_cfa_offset 8
 2274              		.cfi_offset 7, -8
 2275              		.cfi_offset 14, -4
 2276 1192 92B0     		sub	sp, sp, #72
 2277              	.LCFI37:
 2278              		.cfi_def_cfa_offset 80
 2279 1194 00AF     		add	r7, sp, #0
 2280              	.LCFI38:
 2281              		.cfi_def_cfa_register 7
 2282              	.LBB13:
 840:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 841:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 842:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 843:../src/main.cpp **** 	/* Configure the ADC clock */
 844:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2283              		.loc 1 844 0
 2284 1196 4FF48870 		mov	r0, #272
 2285 119a FFF7FEFF 		bl	RCC_ADCCLKConfig
 845:../src/main.cpp **** 
 846:../src/main.cpp **** 	/* Enable ADC1 clock */
 847:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2286              		.loc 1 847 0
 2287 119e 4FF08050 		mov	r0, #268435456
 2288 11a2 4FF00101 		mov	r1, #1
 2289 11a6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 848:../src/main.cpp **** 	/* ADC Channel configuration */
 849:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 850:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2290              		.loc 1 850 0
 2291 11aa 4FF40030 		mov	r0, #131072
 2292 11ae 4FF00101 		mov	r1, #1
 2293 11b2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 851:../src/main.cpp **** 
 852:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 853:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2294              		.loc 1 853 0
 2295 11b6 4FF00403 		mov	r3, #4
 2296 11ba BB62     		str	r3, [r7, #40]
 854:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2297              		.loc 1 854 0
 2298 11bc 4FF00303 		mov	r3, #3
 2299 11c0 87F82C30 		strb	r3, [r7, #44]
 855:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2300              		.loc 1 855 0
 2301 11c4 4FF00003 		mov	r3, #0
 2302 11c8 87F82F30 		strb	r3, [r7, #47]
 856:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2303              		.loc 1 856 0
 2304 11cc 07F12803 		add	r3, r7, #40
 2305 11d0 4FF09040 		mov	r0, #1207959552
 2306 11d4 1946     		mov	r1, r3
 2307 11d6 FFF7FEFF 		bl	GPIO_Init
 857:../src/main.cpp **** 
 858:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2308              		.loc 1 858 0
 2309 11da 07F10403 		add	r3, r7, #4
 2310 11de 1846     		mov	r0, r3
 2311 11e0 FFF7FEFF 		bl	ADC_StructInit
 859:../src/main.cpp **** 
 860:../src/main.cpp **** 	/* Calibration procedure */
 861:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2312              		.loc 1 861 0
 2313 11e4 4FF0A040 		mov	r0, #1342177280
 2314 11e8 4FF00101 		mov	r1, #1
 2315 11ec FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 862:../src/main.cpp **** 
 863:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 864:../src/main.cpp **** 	int foo;
 865:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2316              		.loc 1 865 0
 2317 11f0 4FF00003 		mov	r3, #0
 2318 11f4 7B64     		str	r3, [r7, #68]
 2319 11f6 07E0     		b	.L38
 2320              	.L39:
 866:../src/main.cpp **** 	{
 867:../src/main.cpp **** 	  ++foo;
 2321              		.loc 1 867 0 discriminator 2
 2322 11f8 7B6C     		ldr	r3, [r7, #68]
 2323 11fa 03F10103 		add	r3, r3, #1
 2324 11fe 7B64     		str	r3, [r7, #68]
 865:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2325              		.loc 1 865 0 discriminator 2
 2326 1200 7B6C     		ldr	r3, [r7, #68]
 2327 1202 03F10103 		add	r3, r3, #1
 2328 1206 7B64     		str	r3, [r7, #68]
 2329              	.L38:
 865:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2330              		.loc 1 865 0 is_stmt 0 discriminator 1
 2331 1208 7A6C     		ldr	r2, [r7, #68]
 2332 120a 47F6FF43 		movw	r3, #31999
 2333 120e 9A42     		cmp	r2, r3
 2334 1210 CCBF     		ite	gt
 2335 1212 0023     		movgt	r3, #0
 2336 1214 0123     		movle	r3, #1
 2337 1216 DBB2     		uxtb	r3, r3
 2338 1218 002B     		cmp	r3, #0
 2339 121a EDD1     		bne	.L39
 868:../src/main.cpp **** 	}
 869:../src/main.cpp **** 
 870:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2340              		.loc 1 870 0 is_stmt 1
 2341 121c 4FF0A040 		mov	r0, #1342177280
 2342 1220 4FF00001 		mov	r1, #0
 2343 1224 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 871:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2344              		.loc 1 871 0
 2345 1228 4FF0A040 		mov	r0, #1342177280
 2346 122c FFF7FEFF 		bl	ADC_StartCalibration
 872:../src/main.cpp **** 
 873:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2347              		.loc 1 873 0
 2348 1230 00BF     		nop
 2349              	.L40:
 2350              		.loc 1 873 0 is_stmt 0 discriminator 1
 2351 1232 4FF0A040 		mov	r0, #1342177280
 2352 1236 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2353 123a 0346     		mov	r3, r0
 2354 123c 002B     		cmp	r3, #0
 2355 123e 0CBF     		ite	eq
 2356 1240 0023     		moveq	r3, #0
 2357 1242 0123     		movne	r3, #1
 2358 1244 DBB2     		uxtb	r3, r3
 2359 1246 002B     		cmp	r3, #0
 2360 1248 F3D1     		bne	.L40
 874:../src/main.cpp **** 
 875:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2361              		.loc 1 875 0 is_stmt 1
 2362 124a 4FF00003 		mov	r3, #0
 2363 124e 3B63     		str	r3, [r7, #48]
 876:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2364              		.loc 1 876 0
 2365 1250 4FF00003 		mov	r3, #0
 2366 1254 7B63     		str	r3, [r7, #52]
 877:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2367              		.loc 1 877 0
 2368 1256 4FF00003 		mov	r3, #0
 2369 125a BB63     		str	r3, [r7, #56]
 878:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2370              		.loc 1 878 0
 2371 125c 4FF00003 		mov	r3, #0
 2372 1260 FB63     		str	r3, [r7, #60]
 879:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2373              		.loc 1 879 0
 2374 1262 4FF00003 		mov	r3, #0
 2375 1266 87F84030 		strb	r3, [r7, #64]
 880:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2376              		.loc 1 880 0
 2377 126a 07F13003 		add	r3, r7, #48
 2378 126e 4FF0A040 		mov	r0, #1342177280
 2379 1272 1946     		mov	r1, r3
 2380 1274 FFF7FEFF 		bl	ADC_CommonInit
 881:../src/main.cpp **** 
 882:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2381              		.loc 1 882 0
 2382 1278 4FF40053 		mov	r3, #8192
 2383 127c 7B60     		str	r3, [r7, #4]
 883:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2384              		.loc 1 883 0
 2385 127e 4FF00003 		mov	r3, #0
 2386 1282 BB60     		str	r3, [r7, #8]
 884:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2387              		.loc 1 884 0
 2388 1284 4FF00003 		mov	r3, #0
 2389 1288 FB60     		str	r3, [r7, #12]
 885:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2390              		.loc 1 885 0
 2391 128a 4FF00003 		mov	r3, #0
 2392 128e 3B61     		str	r3, [r7, #16]
 886:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2393              		.loc 1 886 0
 2394 1290 4FF00003 		mov	r3, #0
 2395 1294 7B61     		str	r3, [r7, #20]
 887:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2396              		.loc 1 887 0
 2397 1296 4FF00003 		mov	r3, #0
 2398 129a BB61     		str	r3, [r7, #24]
 888:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2399              		.loc 1 888 0
 2400 129c 4FF00003 		mov	r3, #0
 2401 12a0 FB61     		str	r3, [r7, #28]
 889:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2402              		.loc 1 889 0
 2403 12a2 4FF00103 		mov	r3, #1
 2404 12a6 87F82030 		strb	r3, [r7, #32]
 890:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2405              		.loc 1 890 0
 2406 12aa 07F10403 		add	r3, r7, #4
 2407 12ae 4FF0A040 		mov	r0, #1342177280
 2408 12b2 1946     		mov	r1, r3
 2409 12b4 FFF7FEFF 		bl	ADC_Init
 891:../src/main.cpp **** 
 892:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 893:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2410              		.loc 1 893 0
 2411 12b8 4FF0A040 		mov	r0, #1342177280
 2412 12bc 4FF00301 		mov	r1, #3
 2413 12c0 4FF00102 		mov	r2, #1
 2414 12c4 4FF00703 		mov	r3, #7
 2415 12c8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 894:../src/main.cpp **** 
 895:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 896:../src/main.cpp **** 
 897:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 898:../src/main.cpp **** 
 899:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2416              		.loc 1 899 0
 2417 12cc 4FF01203 		mov	r3, #18
 2418 12d0 87F82430 		strb	r3, [r7, #36]
 900:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2419              		.loc 1 900 0
 2420 12d4 4FF00203 		mov	r3, #2
 2421 12d8 87F82530 		strb	r3, [r7, #37]
 901:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2422              		.loc 1 901 0
 2423 12dc 4FF00003 		mov	r3, #0
 2424 12e0 87F82630 		strb	r3, [r7, #38]
 902:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2425              		.loc 1 902 0
 2426 12e4 4FF00103 		mov	r3, #1
 2427 12e8 87F82730 		strb	r3, [r7, #39]
 903:../src/main.cpp **** 
 904:../src/main.cpp **** 	NVIC_Init(&nv);
 2428              		.loc 1 904 0
 2429 12ec 07F12403 		add	r3, r7, #36
 2430 12f0 1846     		mov	r0, r3
 2431 12f2 FFF7FEFF 		bl	NVIC_Init
 905:../src/main.cpp **** 
 906:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 907:../src/main.cpp **** 
 908:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2432              		.loc 1 908 0
 2433 12f6 4FF0A040 		mov	r0, #1342177280
 2434 12fa 4FF00401 		mov	r1, #4
 2435 12fe 4FF00102 		mov	r2, #1
 2436 1302 FFF7FEFF 		bl	ADC_ITConfig
 909:../src/main.cpp **** 
 910:../src/main.cpp **** 	/* Enable ADC1 */
 911:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2437              		.loc 1 911 0
 2438 1306 4FF0A040 		mov	r0, #1342177280
 2439 130a 4FF00101 		mov	r1, #1
 2440 130e FFF7FEFF 		bl	ADC_Cmd
 912:../src/main.cpp **** 
 913:../src/main.cpp **** 	/* wait for ADRDY */
 914:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2441              		.loc 1 914 0
 2442 1312 00BF     		nop
 2443              	.L41:
 2444              		.loc 1 914 0 is_stmt 0 discriminator 1
 2445 1314 4FF0A040 		mov	r0, #1342177280
 2446 1318 4FF00101 		mov	r1, #1
 2447 131c FFF7FEFF 		bl	ADC_GetFlagStatus
 2448 1320 0346     		mov	r3, r0
 2449 1322 002B     		cmp	r3, #0
 2450 1324 14BF     		ite	ne
 2451 1326 0023     		movne	r3, #0
 2452 1328 0123     		moveq	r3, #1
 2453 132a DBB2     		uxtb	r3, r3
 2454 132c 002B     		cmp	r3, #0
 2455 132e F1D1     		bne	.L41
 915:../src/main.cpp **** 
 916:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 917:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2456              		.loc 1 917 0 is_stmt 1
 2457 1330 4FF0A040 		mov	r0, #1342177280
 2458 1334 FFF7FEFF 		bl	ADC_StartConversion
 2459              	.LBE13:
 918:../src/main.cpp **** }
 2460              		.loc 1 918 0
 2461 1338 07F14807 		add	r7, r7, #72
 2462 133c BD46     		mov	sp, r7
 2463 133e 80BD     		pop	{r7, pc}
 2464              		.cfi_endproc
 2465              	.LFE123:
 2467              	.Letext0:
 2468              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2469              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2470              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 2471              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 2472              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 2473              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 2474              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 2475              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 2476              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 2477              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 2478              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/cclJ52Nb.s:24     .bss:00000000 led_iter
     /tmp/cclJ52Nb.s:21     .bss:00000000 $d
     /tmp/cclJ52Nb.s:31     .data:00000000 led_matrix
     /tmp/cclJ52Nb.s:28     .data:00000000 $d
     /tmp/cclJ52Nb.s:45     .bss:00000004 left_enc
     /tmp/cclJ52Nb.s:51     .bss:0000002c right_enc
     /tmp/cclJ52Nb.s:57     .bss:00000054 gyro_angle_x
     /tmp/cclJ52Nb.s:63     .bss:00000058 gyro_bias_x
     /tmp/cclJ52Nb.s:69     .bss:0000005c adcval
     /tmp/cclJ52Nb.s:75     .bss:00000060 adcData
     /tmp/cclJ52Nb.s:81     .bss:00000068 new_data
     /tmp/cclJ52Nb.s:87     .bss:0000006c adc2_data
     /tmp/cclJ52Nb.s:92     .bss:0000007c adc2_new_data
     /tmp/cclJ52Nb.s:97     .bss:0000007d adc3_awd1
     /tmp/cclJ52Nb.s:102    .bss:0000007e adc3_awd2
     /tmp/cclJ52Nb.s:108    .bss:00000080 count
     /tmp/cclJ52Nb.s:114    .bss:00000084 stage
     /tmp/cclJ52Nb.s:120    .bss:00000088 drive_cmd
     /tmp/cclJ52Nb.s:126    .bss:0000008c err
     /tmp/cclJ52Nb.s:132    .bss:00000090 last_err
     /tmp/cclJ52Nb.s:138    .bss:00000094 diff_err
     /tmp/cclJ52Nb.s:144    .bss:00000098 rt
     /tmp/cclJ52Nb.s:150    .bss:0000009c d_front
     /tmp/cclJ52Nb.s:156    .bss:000000a0 integral
     /tmp/cclJ52Nb.s:162    .bss:000000a4 left
     /tmp/cclJ52Nb.s:168    .bss:000000a8 right
     /tmp/cclJ52Nb.s:174    .bss:000000ac state
     /tmp/cclJ52Nb.s:177    .rodata:00000000 $d
     /tmp/cclJ52Nb.s:178    .rodata:00000000 .LC0
     /tmp/cclJ52Nb.s:181    .text:00000000 $t
     /tmp/cclJ52Nb.s:186    .text:00000000 main
     /tmp/cclJ52Nb.s:714    .text:00000448 _Z15brake_pins_initv
     /tmp/cclJ52Nb.s:1371   .text:00000978 _Z13adc1_init_DMAv
     /tmp/cclJ52Nb.s:1655   .text:00000bec _Z13adc2_init_DMAv
     /tmp/cclJ52Nb.s:786    .text:000004c0 _Z13ping_pin_initv
     /tmp/cclJ52Nb.s:871    .text:00000550 _Z20timer2_timebase_initv
     /tmp/cclJ52Nb.s:557    .text:0000034c _Z19imu_update_ISR_initv
     /tmp/cclJ52Nb.s:930    .text:000005a4 _Z9comp_initv
     /tmp/cclJ52Nb.s:392    .text:000001c8 _Z11IR_distancei
     /tmp/cclJ52Nb.s:541    .text:0000032c $d
     /tmp/cclJ52Nb.s:552    .text:0000034c $t
     /tmp/cclJ52Nb.s:1280   .text:000008f0 _Z14calc_gyro_biasv
     /tmp/cclJ52Nb.s:674    .rodata:00000010 .LC1
     /tmp/cclJ52Nb.s:683    .text:00000430 L3GD20_TIMEOUT_UserCallback
     /tmp/cclJ52Nb.s:1362   .text:00000974 $d
     /tmp/cclJ52Nb.s:1366   .text:00000978 $t
     /tmp/cclJ52Nb.s:2007   .text:00000f30 _Z21battery_watchdog_initv
     /tmp/cclJ52Nb.s:2265   .text:00001190 _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.6b500163148c84ade0acac8214c38e88
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
_Z19LED_MATRIX_ISR_initv
printf
__aeabi_f2d
__aeabi_d2f
pow
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
RCC_AHBPeriphClockCmd
GPIO_StructInit
GPIO_Init
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
