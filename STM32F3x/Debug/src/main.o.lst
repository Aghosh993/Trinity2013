   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	led_iter
  20              		.bss
  21              		.align	2
  24              	led_iter:
  25 0000 00000000 		.space	4
  26              		.global	led_matrix
  27              		.data
  28              		.align	2
  31              	led_matrix:
  32 0000 00020000 		.word	512
  33 0004 00010000 		.word	256
  34 0008 00800000 		.word	32768
  35 000c 00200000 		.word	8192
  36 0010 00100000 		.word	4096
  37 0014 00080000 		.word	2048
  38 0018 00040000 		.word	1024
  39              		.global	left_enc
  40              		.bss
  41              		.align	2
  44              	left_enc:
  45 0004 00000000 		.space	40
  45      00000000 
  45      00000000 
  45      00000000 
  45      00000000 
  46              		.global	right_enc
  47              		.align	2
  50              	right_enc:
  51 002c 00000000 		.space	40
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	gyro_angle_x
  53              		.align	2
  56              	gyro_angle_x:
  57 0054 00000000 		.space	4
  58              		.global	gyro_bias_x
  59              		.align	2
  62              	gyro_bias_x:
  63 0058 00000000 		.space	4
  64              		.global	adcval
  65              		.align	2
  68              	adcval:
  69 005c 00000000 		.space	4
  70              		.global	adcData
  71              		.align	2
  74              	adcData:
  75 0060 00000000 		.space	8
  75      00000000 
  76              		.global	new_data
  77              		.align	2
  80              	new_data:
  81 0068 00000000 		.space	4
  82              		.global	adc2_data
  83              		.align	2
  86              	adc2_data:
  87 006c 00000000 		.space	16
  87      00000000 
  87      00000000 
  87      00000000 
  88              		.global	adc2_new_data
  91              	adc2_new_data:
  92 007c 00       		.space	1
  93              		.global	adc3_awd1
  96              	adc3_awd1:
  97 007d 00       		.space	1
  98              		.global	adc3_awd2
 101              	adc3_awd2:
 102 007e 00       		.space	1
 103              		.global	count
 104 007f 00       		.align	2
 107              	count:
 108 0080 00000000 		.space	4
 109              		.global	stage
 110              		.align	2
 113              	stage:
 114 0084 00000000 		.space	4
 115              		.global	drive_cmd
 116              		.align	2
 119              	drive_cmd:
 120 0088 00000000 		.space	4
 121              		.global	err
 122              		.align	2
 125              	err:
 126 008c 00000000 		.space	4
 127              		.global	last_err
 128              		.align	2
 131              	last_err:
 132 0090 00000000 		.space	4
 133              		.global	diff_err
 134              		.align	2
 137              	diff_err:
 138 0094 00000000 		.space	4
 139              		.global	rt
 140              		.align	2
 143              	rt:
 144 0098 00000000 		.space	4
 145              		.global	d_front
 146              		.align	2
 149              	d_front:
 150 009c 00000000 		.space	4
 151              		.global	integral
 152              		.align	2
 155              	integral:
 156 00a0 00000000 		.space	4
 157              		.global	left
 158              		.align	2
 161              	left:
 162 00a4 00000000 		.space	4
 163              		.global	right
 164              		.align	2
 167              	right:
 168 00a8 00000000 		.space	4
 169              		.global	state
 170              		.align	2
 173              	state:
 174 00ac 00000000 		.space	4
 175              		.section	.rodata
 176              		.align	2
 177              	.LC0:
 178 0000 25346420 		.ascii	"%4d %4d %4d\012\015\000"
 178      25346420 
 178      2534640A 
 178      0D00
 179              		.text
 180              		.align	2
 181              		.global	main
 182              		.thumb
 183              		.thumb_func
 185              	main:
 186              	.LFB111:
 187              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  *
  18:../src/main.cpp ****  * TIM1: 16-bit PWM output mode (PE14) [for BLDC control...]
  19:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  20:../src/main.cpp ****  *
  21:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  22:../src/main.cpp ****  *
  23:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  24:../src/main.cpp ****  *
  25:../src/main.cpp ****  * TIM6: LED matrix ISR
  26:../src/main.cpp ****  * TIM7: Encoder update ISR
  27:../src/main.cpp ****  *
  28:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  29:../src/main.cpp ****  *
  30:../src/main.cpp ****  *
  31:../src/main.cpp ****  * TIM17: IMU update ISR
  32:../src/main.cpp ****  *
  33:../src/main.cpp ****  * Other pins/resources used:
  34:../src/main.cpp ****  *
  35:../src/main.cpp ****  * Analog: 	PA2: adcData[0]
  36:../src/main.cpp ****  * 			PA3: adcData[1]
  37:../src/main.cpp ****  *
  38:../src/main.cpp ****  * 			PA4: adc2_data[0]
  39:../src/main.cpp ****  * 			PC4: adc2_data[1]
  40:../src/main.cpp ****  * 			PC5: adc2_data[2]
  41:../src/main.cpp ****  * 			PB2: adc2_data[3]
  42:../src/main.cpp ****  *
  43:../src/main.cpp ****  * Digital:
  44:../src/main.cpp ****  *
  45:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  46:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  47:../src/main.cpp ****  *
  48:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  49:../src/main.cpp ****  *
  50:../src/main.cpp ****  */
  51:../src/main.cpp **** 
  52:../src/main.cpp **** /*
  53:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  54:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  55:../src/main.cpp ****  */
  56:../src/main.cpp **** 
  57:../src/main.cpp **** volatile int led_iter;
  58:../src/main.cpp **** volatile int led_matrix[7] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_13,
  59:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  60:../src/main.cpp **** 
  61:../src/main.cpp **** void imu_update_ISR_init(void);
  62:../src/main.cpp **** int16_t calc_gyro_bias(void);
  63:../src/main.cpp **** 
  64:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  65:../src/main.cpp **** 
  66:../src/main.cpp **** void adc1_init_DMA(void);
  67:../src/main.cpp **** void adc2_init_DMA(void);
  68:../src/main.cpp **** void battery_watchdog_init(void);
  69:../src/main.cpp **** void adc1_init(void);
  70:../src/main.cpp **** 
  71:../src/main.cpp **** void brake_pins_init(void);
  72:../src/main.cpp **** 
  73:../src/main.cpp **** void ping_pin_init(void);
  74:../src/main.cpp **** void timer2_timebase_init(void);
  75:../src/main.cpp **** 
  76:../src/main.cpp **** void comp_init(void);
  77:../src/main.cpp **** 
  78:../src/main.cpp **** void trinity2013_waitForStart(void);
  79:../src/main.cpp **** 
  80:../src/main.cpp **** float IR_distance(int IR_ADC_VAL);
  81:../src/main.cpp **** 
  82:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  83:../src/main.cpp **** 
  84:../src/main.cpp **** encoderState left_enc, right_enc;
  85:../src/main.cpp **** 
  86:../src/main.cpp **** volatile float gyro_angle_x;
  87:../src/main.cpp **** int gyro_bias_x, adcval;
  88:../src/main.cpp **** 
  89:../src/main.cpp **** __IO uint32_t adcData[2];
  90:../src/main.cpp **** int new_data;
  91:../src/main.cpp **** 
  92:../src/main.cpp **** __IO uint32_t adc2_data[4];
  93:../src/main.cpp **** uint8_t adc2_new_data;
  94:../src/main.cpp **** 
  95:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
  96:../src/main.cpp **** 
  97:../src/main.cpp **** int count, stage;
  98:../src/main.cpp **** 
  99:../src/main.cpp **** float drive_cmd;// = 0.0f;
 100:../src/main.cpp **** float err;// = 0.0f;
 101:../src/main.cpp **** float last_err;// = 0.0f;
 102:../src/main.cpp **** float diff_err;
 103:../src/main.cpp **** float rt;// = 0.0f;
 104:../src/main.cpp **** float d_front;// = 1.0f;
 105:../src/main.cpp **** float integral;
 106:../src/main.cpp **** 
 107:../src/main.cpp **** float left, right;
 108:../src/main.cpp **** 
 109:../src/main.cpp **** int state;
 110:../src/main.cpp **** 
 111:../src/main.cpp **** // Initialize all encoder data structures to zero:
 112:../src/main.cpp **** 
 113:../src/main.cpp **** int main(void)
 114:../src/main.cpp **** {
 188              		.loc 1 114 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 32
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}
 193              	.LCFI0:
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0002 88B0     		sub	sp, sp, #32
 198              	.LCFI1:
 199              		.cfi_def_cfa_offset 40
 200 0004 00AF     		add	r7, sp, #0
 201              	.LCFI2:
 202              		.cfi_def_cfa_register 7
 203              	.LBB2:
 115:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 204              		.loc 1 115 0
 205 0006 FFF7FEFF 		bl	SystemInit
 116:../src/main.cpp **** 
 117:../src/main.cpp **** 	UART1_init(); // Debug bridge
 206              		.loc 1 117 0
 207 000a FFF7FEFF 		bl	_Z10UART1_initv
 118:../src/main.cpp **** 
 119:../src/main.cpp **** 	state = ST_READY;
 208              		.loc 1 119 0
 209 000e 40F20003 		movw	r3, #:lower16:state
 210 0012 C0F20003 		movt	r3, #:upper16:state
 211 0016 4FF0FF32 		mov	r2, #-1
 212 001a 1A60     		str	r2, [r3, #0]
 120:../src/main.cpp **** 
 121:../src/main.cpp **** 	LED_MATRIX_ISR_init();
 213              		.loc 1 121 0
 214 001c FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 122:../src/main.cpp **** 
 123:../src/main.cpp **** 	trinity2013_waitForStart();
 215              		.loc 1 123 0
 216 0020 FFF7FEFF 		bl	_Z24trinity2013_waitForStartv
 124:../src/main.cpp **** 
 125:../src/main.cpp **** 	state = ST_WANDER;
 217              		.loc 1 125 0
 218 0024 40F20003 		movw	r3, #:lower16:state
 219 0028 C0F20003 		movt	r3, #:upper16:state
 220 002c 4FF00002 		mov	r2, #0
 221 0030 1A60     		str	r2, [r3, #0]
 126:../src/main.cpp **** 
 127:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
 128:../src/main.cpp **** 
 129:../src/main.cpp **** 	adcData[0] = 0;
 222              		.loc 1 129 0
 223 0032 40F20003 		movw	r3, #:lower16:adcData
 224 0036 C0F20003 		movt	r3, #:upper16:adcData
 225 003a 4FF00002 		mov	r2, #0
 226 003e 1A60     		str	r2, [r3, #0]
 130:../src/main.cpp **** 	adcData[1] = 0;
 227              		.loc 1 130 0
 228 0040 40F20003 		movw	r3, #:lower16:adcData
 229 0044 C0F20003 		movt	r3, #:upper16:adcData
 230 0048 4FF00002 		mov	r2, #0
 231 004c 5A60     		str	r2, [r3, #4]
 131:../src/main.cpp **** 
 132:../src/main.cpp **** 	uint8_t iter = 0;
 232              		.loc 1 132 0
 233 004e 4FF00003 		mov	r3, #0
 234 0052 FB77     		strb	r3, [r7, #31]
 133:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 235              		.loc 1 133 0
 236 0054 4FF00003 		mov	r3, #0
 237 0058 FB77     		strb	r3, [r7, #31]
 238 005a 0CE0     		b	.L2
 239              	.L3:
 134:../src/main.cpp **** 	{
 135:../src/main.cpp **** 		adc2_data[iter] = 0;
 240              		.loc 1 135 0 discriminator 2
 241 005c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 242 005e 40F20003 		movw	r3, #:lower16:adc2_data
 243 0062 C0F20003 		movt	r3, #:upper16:adc2_data
 244 0066 4FF00001 		mov	r1, #0
 245 006a 43F82210 		str	r1, [r3, r2, lsl #2]
 133:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 246              		.loc 1 133 0 discriminator 2
 247 006e FB7F     		ldrb	r3, [r7, #31]
 248 0070 03F10103 		add	r3, r3, #1
 249 0074 FB77     		strb	r3, [r7, #31]
 250              	.L2:
 133:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 251              		.loc 1 133 0 is_stmt 0 discriminator 1
 252 0076 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 253 0078 062B     		cmp	r3, #6
 254 007a 8CBF     		ite	hi
 255 007c 0023     		movhi	r3, #0
 256 007e 0123     		movls	r3, #1
 257 0080 DBB2     		uxtb	r3, r3
 258 0082 002B     		cmp	r3, #0
 259 0084 EAD1     		bne	.L3
 136:../src/main.cpp **** 	}
 137:../src/main.cpp **** 
 138:../src/main.cpp **** 	adc3_awd1 = 0;
 260              		.loc 1 138 0 is_stmt 1
 261 0086 40F20003 		movw	r3, #:lower16:adc3_awd1
 262 008a C0F20003 		movt	r3, #:upper16:adc3_awd1
 263 008e 4FF00002 		mov	r2, #0
 264 0092 1A70     		strb	r2, [r3, #0]
 139:../src/main.cpp **** 	adc3_awd2 = 0;
 265              		.loc 1 139 0
 266 0094 40F20003 		movw	r3, #:lower16:adc3_awd2
 267 0098 C0F20003 		movt	r3, #:upper16:adc3_awd2
 268 009c 4FF00002 		mov	r2, #0
 269 00a0 1A70     		strb	r2, [r3, #0]
 140:../src/main.cpp **** 
 141:../src/main.cpp **** 	count = 0;
 270              		.loc 1 141 0
 271 00a2 40F20003 		movw	r3, #:lower16:count
 272 00a6 C0F20003 		movt	r3, #:upper16:count
 273 00aa 4FF00002 		mov	r2, #0
 274 00ae 1A60     		str	r2, [r3, #0]
 142:../src/main.cpp **** 	stage = 0;
 275              		.loc 1 142 0
 276 00b0 40F20003 		movw	r3, #:lower16:stage
 277 00b4 C0F20003 		movt	r3, #:upper16:stage
 278 00b8 4FF00002 		mov	r2, #0
 279 00bc 1A60     		str	r2, [r3, #0]
 143:../src/main.cpp **** 
 144:../src/main.cpp **** 	/*
 145:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 146:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 147:../src/main.cpp **** 	 */
 148:../src/main.cpp **** 
 149:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 280              		.loc 1 149 0
 281 00be 40F20000 		movw	r0, #:lower16:left_enc
 282 00c2 C0F20000 		movt	r0, #:upper16:left_enc
 283 00c6 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 150:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 284              		.loc 1 150 0
 285 00ca 40F20000 		movw	r0, #:lower16:right_enc
 286 00ce C0F20000 		movt	r0, #:upper16:right_enc
 287 00d2 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 151:../src/main.cpp **** 
 152:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 153:../src/main.cpp **** 
 154:../src/main.cpp **** 	brake_pins_init();
 288              		.loc 1 154 0
 289 00d6 FFF7FEFF 		bl	_Z15brake_pins_initv
 155:../src/main.cpp **** 	pwm_out1_init(2000);
 290              		.loc 1 155 0
 291 00da 4FF4FA60 		mov	r0, #2000
 292 00de FFF7FEFF 		bl	_Z13pwm_out1_initt
 156:../src/main.cpp **** 	pwm_out2_init(2000);
 293              		.loc 1 156 0
 294 00e2 4FF4FA60 		mov	r0, #2000
 295 00e6 FFF7FEFF 		bl	_Z13pwm_out2_initt
 157:../src/main.cpp **** 
 158:../src/main.cpp **** 	pwm_out3_init(50);
 296              		.loc 1 158 0
 297 00ea 4FF03200 		mov	r0, #50
 298 00ee FFF7FEFF 		bl	_Z13pwm_out3_initt
 159:../src/main.cpp **** 
 160:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 161:../src/main.cpp **** 
 162:../src/main.cpp **** 	TIM8_init_encoder();
 299              		.loc 1 162 0
 300 00f2 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 163:../src/main.cpp **** 	TIM4_init_encoder();
 301              		.loc 1 163 0
 302 00f6 FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 164:../src/main.cpp **** 
 165:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 166:../src/main.cpp **** 
 167:../src/main.cpp **** 	new_data = 0;
 303              		.loc 1 167 0
 304 00fa 40F20003 		movw	r3, #:lower16:new_data
 305 00fe C0F20003 		movt	r3, #:upper16:new_data
 306 0102 4FF00002 		mov	r2, #0
 307 0106 1A60     		str	r2, [r3, #0]
 168:../src/main.cpp **** 	adc2_new_data = 0;
 308              		.loc 1 168 0
 309 0108 40F20003 		movw	r3, #:lower16:adc2_new_data
 310 010c C0F20003 		movt	r3, #:upper16:adc2_new_data
 311 0110 4FF00002 		mov	r2, #0
 312 0114 1A70     		strb	r2, [r3, #0]
 169:../src/main.cpp **** 
 170:../src/main.cpp **** 	// Initialize ADC1 DMA:
 171:../src/main.cpp **** 	adc1_init_DMA();
 313              		.loc 1 171 0
 314 0116 FFF7FEFF 		bl	_Z13adc1_init_DMAv
 172:../src/main.cpp **** 
 173:../src/main.cpp **** 	// Initialize ADC2 DMA:
 174:../src/main.cpp **** 	adc2_init_DMA();
 315              		.loc 1 174 0
 316 011a FFF7FEFF 		bl	_Z13adc2_init_DMAv
 175:../src/main.cpp **** 
 176:../src/main.cpp **** 	//	battery_watchdog_init();
 177:../src/main.cpp **** 
 178:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 317              		.loc 1 178 0
 318 011e FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 179:../src/main.cpp **** 
 180:../src/main.cpp **** 	// Ping Sensor Init:
 181:../src/main.cpp **** 
 182:../src/main.cpp **** 	ping_pin_init();
 319              		.loc 1 182 0
 320 0122 FFF7FEFF 		bl	_Z13ping_pin_initv
 183:../src/main.cpp **** 	timer2_timebase_init();
 321              		.loc 1 183 0
 322 0126 FFF7FEFF 		bl	_Z20timer2_timebase_initv
 184:../src/main.cpp **** 	imu_update_ISR_init();
 323              		.loc 1 184 0
 324 012a FFF7FEFF 		bl	_Z19imu_update_ISR_initv
 185:../src/main.cpp **** 
 186:../src/main.cpp **** 	// Encoder comparator init for noise debounce:
 187:../src/main.cpp **** 	comp_init();
 325              		.loc 1 187 0
 326 012e FFF7FEFF 		bl	_Z9comp_initv
 188:../src/main.cpp **** 
 189:../src/main.cpp **** 	adcval = 0;
 327              		.loc 1 189 0
 328 0132 40F20003 		movw	r3, #:lower16:adcval
 329 0136 C0F20003 		movt	r3, #:upper16:adcval
 330 013a 4FF00002 		mov	r2, #0
 331 013e 1A60     		str	r2, [r3, #0]
 190:../src/main.cpp **** 
 191:../src/main.cpp **** 	drive_cmd = 0.0f;
 332              		.loc 1 191 0
 333 0140 40F20003 		movw	r3, #:lower16:drive_cmd
 334 0144 C0F20003 		movt	r3, #:upper16:drive_cmd
 335 0148 4FF00002 		mov	r2, #0
 336 014c 1A60     		str	r2, [r3, #0]	@ float
 192:../src/main.cpp **** 	err = 0.0f;
 337              		.loc 1 192 0
 338 014e 40F20003 		movw	r3, #:lower16:err
 339 0152 C0F20003 		movt	r3, #:upper16:err
 340 0156 4FF00002 		mov	r2, #0
 341 015a 1A60     		str	r2, [r3, #0]	@ float
 193:../src/main.cpp **** 	last_err = 0.0f;
 342              		.loc 1 193 0
 343 015c 40F20003 		movw	r3, #:lower16:last_err
 344 0160 C0F20003 		movt	r3, #:upper16:last_err
 345 0164 4FF00002 		mov	r2, #0
 346 0168 1A60     		str	r2, [r3, #0]	@ float
 194:../src/main.cpp **** 	diff_err = 0.0f;
 347              		.loc 1 194 0
 348 016a 40F20003 		movw	r3, #:lower16:diff_err
 349 016e C0F20003 		movt	r3, #:upper16:diff_err
 350 0172 4FF00002 		mov	r2, #0
 351 0176 1A60     		str	r2, [r3, #0]	@ float
 195:../src/main.cpp **** 	rt = 0.0f;
 352              		.loc 1 195 0
 353 0178 40F20003 		movw	r3, #:lower16:rt
 354 017c C0F20003 		movt	r3, #:upper16:rt
 355 0180 4FF00002 		mov	r2, #0
 356 0184 1A60     		str	r2, [r3, #0]	@ float
 196:../src/main.cpp **** 	d_front = 1.0f;
 357              		.loc 1 196 0
 358 0186 40F20003 		movw	r3, #:lower16:d_front
 359 018a C0F20003 		movt	r3, #:upper16:d_front
 360 018e 4FF07E52 		mov	r2, #1065353216
 361 0192 1A60     		str	r2, [r3, #0]	@ float
 197:../src/main.cpp **** 	integral = 0.0f;
 362              		.loc 1 197 0
 363 0194 40F20003 		movw	r3, #:lower16:integral
 364 0198 C0F20003 		movt	r3, #:upper16:integral
 365 019c 4FF00002 		mov	r2, #0
 366 01a0 1A60     		str	r2, [r3, #0]	@ float
 198:../src/main.cpp **** 
 199:../src/main.cpp **** 	int uv_avgBuf1 = 0;
 367              		.loc 1 199 0
 368 01a2 4FF00003 		mov	r3, #0
 369 01a6 BB61     		str	r3, [r7, #24]
 200:../src/main.cpp **** 	int uv_avgBuf2 = 0;
 370              		.loc 1 200 0
 371 01a8 4FF00003 		mov	r3, #0
 372 01ac 7B61     		str	r3, [r7, #20]
 201:../src/main.cpp **** 	int uv_iter = 0;
 373              		.loc 1 201 0
 374 01ae 4FF00003 		mov	r3, #0
 375 01b2 3B61     		str	r3, [r7, #16]
 202:../src/main.cpp **** 
 203:../src/main.cpp **** 	float uv1_avg, uv2_avg;
 204:../src/main.cpp **** 
 205:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 376              		.loc 1 205 0
 377 01b4 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 378 01b8 00E0     		b	.L15
 379              	.L17:
 206:../src/main.cpp **** 
 207:../src/main.cpp **** 	while(true)
 380              		.loc 1 207 0
 381 01ba 00BF     		nop
 382              	.L15:
 383              	.LBB3:
 208:../src/main.cpp **** 	{
 209:../src/main.cpp **** 		printf("%4d %4d %4d\n\r", (int)adcData[0] , (int)adc2_data[2], ((int)adcData[0] - (int)adc2_data[
 384              		.loc 1 209 0
 385 01bc 40F20003 		movw	r3, #:lower16:adcData
 386 01c0 C0F20003 		movt	r3, #:upper16:adcData
 387 01c4 1B68     		ldr	r3, [r3, #0]
 388 01c6 1946     		mov	r1, r3
 389 01c8 40F20003 		movw	r3, #:lower16:adc2_data
 390 01cc C0F20003 		movt	r3, #:upper16:adc2_data
 391 01d0 9B68     		ldr	r3, [r3, #8]
 392 01d2 1A46     		mov	r2, r3
 393 01d4 40F20003 		movw	r3, #:lower16:adcData
 394 01d8 C0F20003 		movt	r3, #:upper16:adcData
 395 01dc 1B68     		ldr	r3, [r3, #0]
 396 01de 1846     		mov	r0, r3
 397 01e0 40F20003 		movw	r3, #:lower16:adc2_data
 398 01e4 C0F20003 		movt	r3, #:upper16:adc2_data
 399 01e8 9B68     		ldr	r3, [r3, #8]
 400 01ea C31A     		subs	r3, r0, r3
 401 01ec 40F20000 		movw	r0, #:lower16:.LC0
 402 01f0 C0F20000 		movt	r0, #:upper16:.LC0
 403 01f4 FFF7FEFF 		bl	printf
 404              	.LBB4:
 210:../src/main.cpp **** 		if(((adc2_data[2] > 500 || adcData[0] > 500)) && state == ST_WANDER)
 405              		.loc 1 210 0
 406 01f8 40F20003 		movw	r3, #:lower16:adc2_data
 407 01fc C0F20003 		movt	r3, #:upper16:adc2_data
 408 0200 9B68     		ldr	r3, [r3, #8]
 409 0202 B3F5FA7F 		cmp	r3, #500
 410 0206 07D8     		bhi	.L4
 411              		.loc 1 210 0 is_stmt 0 discriminator 2
 412 0208 40F20003 		movw	r3, #:lower16:adcData
 413 020c C0F20003 		movt	r3, #:upper16:adcData
 414 0210 1B68     		ldr	r3, [r3, #0]
 415 0212 B3F5FA7F 		cmp	r3, #500
 416 0216 09D9     		bls	.L5
 417              	.L4:
 418              		.loc 1 210 0 discriminator 1
 419 0218 40F20003 		movw	r3, #:lower16:state
 420 021c C0F20003 		movt	r3, #:upper16:state
 421 0220 1B68     		ldr	r3, [r3, #0]
 422 0222 002B     		cmp	r3, #0
 423 0224 02D1     		bne	.L5
 424              		.loc 1 210 0 discriminator 4
 425 0226 4FF00103 		mov	r3, #1
 426 022a 01E0     		b	.L6
 427              	.L5:
 428              		.loc 1 210 0 discriminator 3
 429 022c 4FF00003 		mov	r3, #0
 430              	.L6:
 431              		.loc 1 210 0 discriminator 5
 432 0230 002B     		cmp	r3, #0
 433 0232 4FD0     		beq	.L7
 211:../src/main.cpp **** 		{
 212:../src/main.cpp **** 			for(uv_iter=0; uv_iter<300; ++uv_iter)
 434              		.loc 1 212 0 is_stmt 1
 435 0234 4FF00003 		mov	r3, #0
 436 0238 3B61     		str	r3, [r7, #16]
 437 023a 13E0     		b	.L8
 438              	.L9:
 213:../src/main.cpp **** 			{
 214:../src/main.cpp **** 				uv_avgBuf1 += (int)adcData[0];
 439              		.loc 1 214 0 discriminator 2
 440 023c 40F20003 		movw	r3, #:lower16:adcData
 441 0240 C0F20003 		movt	r3, #:upper16:adcData
 442 0244 1B68     		ldr	r3, [r3, #0]
 443 0246 BA69     		ldr	r2, [r7, #24]
 444 0248 D318     		adds	r3, r2, r3
 445 024a BB61     		str	r3, [r7, #24]
 215:../src/main.cpp **** 				uv_avgBuf2 += (int)adc2_data[2];
 446              		.loc 1 215 0 discriminator 2
 447 024c 40F20003 		movw	r3, #:lower16:adc2_data
 448 0250 C0F20003 		movt	r3, #:upper16:adc2_data
 449 0254 9B68     		ldr	r3, [r3, #8]
 450 0256 7A69     		ldr	r2, [r7, #20]
 451 0258 D318     		adds	r3, r2, r3
 452 025a 7B61     		str	r3, [r7, #20]
 212:../src/main.cpp **** 			for(uv_iter=0; uv_iter<300; ++uv_iter)
 453              		.loc 1 212 0 discriminator 2
 454 025c 3B69     		ldr	r3, [r7, #16]
 455 025e 03F10103 		add	r3, r3, #1
 456 0262 3B61     		str	r3, [r7, #16]
 457              	.L8:
 212:../src/main.cpp **** 			for(uv_iter=0; uv_iter<300; ++uv_iter)
 458              		.loc 1 212 0 is_stmt 0 discriminator 1
 459 0264 3A69     		ldr	r2, [r7, #16]
 460 0266 40F22B13 		movw	r3, #299
 461 026a 9A42     		cmp	r2, r3
 462 026c CCBF     		ite	gt
 463 026e 0023     		movgt	r3, #0
 464 0270 0123     		movle	r3, #1
 465 0272 DBB2     		uxtb	r3, r3
 466 0274 002B     		cmp	r3, #0
 467 0276 E1D1     		bne	.L9
 216:../src/main.cpp **** 			}
 217:../src/main.cpp **** 			uv1_avg = (float)uv_avgBuf1/(float)300;
 468              		.loc 1 217 0 is_stmt 1
 469 0278 D7ED067A 		flds	s15, [r7, #24]	@ int
 470 027c B8EEE77A 		fsitos	s14, s15
 471 0280 DFED327A 		flds	s15, .L18
 472 0284 C7EE277A 		fdivs	s15, s14, s15
 473 0288 C7ED027A 		fsts	s15, [r7, #8]
 218:../src/main.cpp **** 			uv2_avg = (float)uv_avgBuf2/(float)300;
 474              		.loc 1 218 0
 475 028c D7ED057A 		flds	s15, [r7, #20]	@ int
 476 0290 B8EEE77A 		fsitos	s14, s15
 477 0294 DFED2D7A 		flds	s15, .L18
 478 0298 C7EE277A 		fdivs	s15, s14, s15
 479 029c C7ED017A 		fsts	s15, [r7, #4]
 219:../src/main.cpp **** 
 220:../src/main.cpp **** 			if(uv1_avg > 500.00 || uv2_avg > 500.00)
 480              		.loc 1 220 0
 481 02a0 97ED027A 		flds	s14, [r7, #8]
 482 02a4 DFED2A7A 		flds	s15, .L18+4
 483 02a8 B4EEE77A 		fcmpes	s14, s15
 484 02ac F1EE10FA 		fmstat
 485 02b0 08DC     		bgt	.L10
 486              		.loc 1 220 0 is_stmt 0 discriminator 1
 487 02b2 97ED017A 		flds	s14, [r7, #4]
 488 02b6 DFED267A 		flds	s15, .L18+4
 489 02ba B4EEE77A 		fcmpes	s14, s15
 490 02be F1EE10FA 		fmstat
 491 02c2 42DD     		ble	.L16
 492              	.L10:
 221:../src/main.cpp **** 			{
 222:../src/main.cpp **** 				state = ST_HOMING;
 493              		.loc 1 222 0 is_stmt 1
 494 02c4 40F20003 		movw	r3, #:lower16:state
 495 02c8 C0F20003 		movt	r3, #:upper16:state
 496 02cc 4FF00102 		mov	r2, #1
 497 02d0 1A60     		str	r2, [r3, #0]
 498              	.LBE4:
 499              	.LBE3:
 207:../src/main.cpp **** 	while(true)
 500              		.loc 1 207 0
 501 02d2 72E7     		b	.L17
 502              	.L7:
 503              	.LBB9:
 504              	.LBB8:
 505              	.LBB5:
 506              	.LBB6:
 223:../src/main.cpp **** 			}
 224:../src/main.cpp **** 
 225:../src/main.cpp **** 		}
 226:../src/main.cpp **** 		else if (state == ST_FIREFIGHT)
 507              		.loc 1 226 0
 508 02d4 40F20003 		movw	r3, #:lower16:state
 509 02d8 C0F20003 		movt	r3, #:upper16:state
 510 02dc 1B68     		ldr	r3, [r3, #0]
 511 02de 022B     		cmp	r3, #2
 512 02e0 7FF46BAF 		bne	.L17
 513              	.LBB7:
 227:../src/main.cpp **** 		{
 228:../src/main.cpp **** 			pwm1_output(0.5);
 514              		.loc 1 228 0
 515 02e4 4FF07C50 		mov	r0, #1056964608
 516 02e8 FFF7FEFF 		bl	_Z11pwm1_outputf
 229:../src/main.cpp **** 			pwm2_output(0.5);
 517              		.loc 1 229 0
 518 02ec 4FF07C50 		mov	r0, #1056964608
 519 02f0 FFF7FEFF 		bl	_Z11pwm2_outputf
 230:../src/main.cpp **** 			int jk = 0;
 520              		.loc 1 230 0
 521 02f4 4FF00003 		mov	r3, #0
 522 02f8 FB60     		str	r3, [r7, #12]
 231:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 523              		.loc 1 231 0
 524 02fa 4FF00003 		mov	r3, #0
 525 02fe FB60     		str	r3, [r7, #12]
 526 0300 09E0     		b	.L13
 527              	.L14:
 232:../src/main.cpp **** 			{
 233:../src/main.cpp **** 				pwm3_output(0.06f);
 528              		.loc 1 233 0 discriminator 2
 529 0302 4CF28F20 		movw	r0, #49807
 530 0306 C3F67550 		movt	r0, 15733
 531 030a FFF7FEFF 		bl	_Z11pwm3_outputf
 231:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 532              		.loc 1 231 0 discriminator 2
 533 030e FB68     		ldr	r3, [r7, #12]
 534 0310 03F10103 		add	r3, r3, #1
 535 0314 FB60     		str	r3, [r7, #12]
 536              	.L13:
 231:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 537              		.loc 1 231 0 is_stmt 0 discriminator 1
 538 0316 FA68     		ldr	r2, [r7, #12]
 539 0318 41F2CF23 		movw	r3, #4815
 540 031c C0F21303 		movt	r3, 19
 541 0320 9A42     		cmp	r2, r3
 542 0322 CCBF     		ite	gt
 543 0324 0023     		movgt	r3, #0
 544 0326 0123     		movle	r3, #1
 545 0328 DBB2     		uxtb	r3, r3
 546 032a 002B     		cmp	r3, #0
 547 032c E9D1     		bne	.L14
 234:../src/main.cpp **** 			}
 235:../src/main.cpp **** 			pwm3_output(0.1f);
 548              		.loc 1 235 0 is_stmt 1
 549 032e 4CF6CD40 		movw	r0, #52429
 550 0332 C3F6CC50 		movt	r0, 15820
 551 0336 FFF7FEFF 		bl	_Z11pwm3_outputf
 236:../src/main.cpp **** 			state = ST_DONE;
 552              		.loc 1 236 0
 553 033a 40F20003 		movw	r3, #:lower16:state
 554 033e C0F20003 		movt	r3, #:upper16:state
 555 0342 4FF00302 		mov	r2, #3
 556 0346 1A60     		str	r2, [r3, #0]
 557              	.LBE7:
 558              	.LBE6:
 559              	.LBE5:
 560              	.LBE8:
 561              	.LBE9:
 207:../src/main.cpp **** 	while(true)
 562              		.loc 1 207 0
 563 0348 37E7     		b	.L17
 564              	.L16:
 565 034a 36E7     		b	.L17
 566              	.L19:
 567              		.align	2
 568              	.L18:
 569 034c 00009643 		.word	1133903872
 570 0350 0000FA43 		.word	1140457472
 571              	.LBE2:
 572              		.cfi_endproc
 573              	.LFE111:
 575              		.align	2
 576              		.global	_Z24trinity2013_waitForStartv
 577              		.thumb
 578              		.thumb_func
 580              	_Z24trinity2013_waitForStartv:
 581              	.LFB112:
 237:../src/main.cpp **** 		}
 238:../src/main.cpp **** 
 239:../src/main.cpp **** 	}
 240:../src/main.cpp **** 	return 0; // We should never manage to get here...
 241:../src/main.cpp **** }
 242:../src/main.cpp **** 
 243:../src/main.cpp **** void trinity2013_waitForStart(void)
 244:../src/main.cpp **** {
 582              		.loc 1 244 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 8
 585              		@ frame_needed = 1, uses_anonymous_args = 0
 586 0354 80B5     		push	{r7, lr}
 587              	.LCFI3:
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 7, -8
 590              		.cfi_offset 14, -4
 591 0356 82B0     		sub	sp, sp, #8
 592              	.LCFI4:
 593              		.cfi_def_cfa_offset 16
 594 0358 00AF     		add	r7, sp, #0
 595              	.LCFI5:
 596              		.cfi_def_cfa_register 7
 597              	.LBB10:
 245:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 598              		.loc 1 245 0
 599 035a 4FF48010 		mov	r0, #1048576
 600 035e 4FF00101 		mov	r1, #1
 601 0362 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 246:../src/main.cpp **** 	GPIO_DeInit(GPIOD);
 602              		.loc 1 246 0
 603 0366 4FF44060 		mov	r0, #3072
 604 036a C4F60000 		movt	r0, 18432
 605 036e FFF7FEFF 		bl	GPIO_DeInit
 247:../src/main.cpp **** 	GPIO_InitTypeDef g;
 248:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 606              		.loc 1 248 0
 607 0372 4FF00003 		mov	r3, #0
 608 0376 3B71     		strb	r3, [r7, #4]
 249:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 609              		.loc 1 249 0
 610 0378 4FF00103 		mov	r3, #1
 611 037c BB71     		strb	r3, [r7, #6]
 250:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_3;
 612              		.loc 1 250 0
 613 037e 4FF00803 		mov	r3, #8
 614 0382 3B60     		str	r3, [r7, #0]
 251:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_DOWN;
 615              		.loc 1 251 0
 616 0384 4FF00203 		mov	r3, #2
 617 0388 FB71     		strb	r3, [r7, #7]
 252:../src/main.cpp **** //	g.GPIO_Speed = GPIO_Speed_Level_2;
 253:../src/main.cpp **** 	GPIO_Init(GPIOD,&g);
 618              		.loc 1 253 0
 619 038a 3B46     		mov	r3, r7
 620 038c 4FF44060 		mov	r0, #3072
 621 0390 C4F60000 		movt	r0, 18432
 622 0394 1946     		mov	r1, r3
 623 0396 FFF7FEFF 		bl	GPIO_Init
 254:../src/main.cpp **** 
 255:../src/main.cpp **** 	while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_3) == (uint8_t)Bit_RESET);
 624              		.loc 1 255 0
 625 039a 00BF     		nop
 626              	.L21:
 627              		.loc 1 255 0 is_stmt 0 discriminator 1
 628 039c 4FF44060 		mov	r0, #3072
 629 03a0 C4F60000 		movt	r0, 18432
 630 03a4 4FF00801 		mov	r1, #8
 631 03a8 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 632 03ac 0346     		mov	r3, r0
 633 03ae 002B     		cmp	r3, #0
 634 03b0 14BF     		ite	ne
 635 03b2 0023     		movne	r3, #0
 636 03b4 0123     		moveq	r3, #1
 637 03b6 DBB2     		uxtb	r3, r3
 638 03b8 002B     		cmp	r3, #0
 639 03ba EFD1     		bne	.L21
 256:../src/main.cpp **** 	state = ST_WANDER;
 640              		.loc 1 256 0 is_stmt 1
 641 03bc 40F20003 		movw	r3, #:lower16:state
 642 03c0 C0F20003 		movt	r3, #:upper16:state
 643 03c4 4FF00002 		mov	r2, #0
 644 03c8 1A60     		str	r2, [r3, #0]
 645              	.LBE10:
 257:../src/main.cpp **** //	while(!(GPIOD->IDR & GPIO_Pin));
 258:../src/main.cpp **** 
 259:../src/main.cpp **** 	/*
 260:../src/main.cpp **** 	 * {
 261:../src/main.cpp **** 		if(GPIO_ReadInputDataBit(GPIOC, 11) == Bit_SET)
 262:../src/main.cpp **** 		{
 263:../src/main.cpp **** 			int i = 0;
 264:../src/main.cpp **** 			for(i=0; i< 10000;++i)
 265:../src/main.cpp **** 			{
 266:../src/main.cpp **** 				if(GPIO_ReadInputDataBit(GPIOC, 11) == Bit_SET)
 267:../src/main.cpp **** 				{
 268:../src/main.cpp **** 					break;
 269:../src/main.cpp **** 				}
 270:../src/main.cpp **** 			}
 271:../src/main.cpp **** 			return;
 272:../src/main.cpp **** 		}
 273:../src/main.cpp **** 	}
 274:../src/main.cpp **** 	 */
 275:../src/main.cpp **** 
 276:../src/main.cpp **** 
 277:../src/main.cpp **** }
 646              		.loc 1 277 0
 647 03ca 07F10807 		add	r7, r7, #8
 648 03ce BD46     		mov	sp, r7
 649 03d0 80BD     		pop	{r7, pc}
 650              		.cfi_endproc
 651              	.LFE112:
 653              		.global	__aeabi_f2d
 654              		.global	__aeabi_d2f
 655 03d2 00BF     		.align	2
 656              		.global	_Z11IR_distancei
 657              		.thumb
 658              		.thumb_func
 660              	_Z11IR_distancei:
 661              	.LFB113:
 278:../src/main.cpp **** 
 279:../src/main.cpp **** float IR_distance(int IR_ADC_VAL)
 280:../src/main.cpp **** {
 662              		.loc 1 280 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 16
 665              		@ frame_needed = 1, uses_anonymous_args = 0
 666 03d4 80B5     		push	{r7, lr}
 667              	.LCFI6:
 668              		.cfi_def_cfa_offset 8
 669              		.cfi_offset 7, -8
 670              		.cfi_offset 14, -4
 671 03d6 2DED028B 		fstmfdd	sp!, {d8}
 672              	.LCFI7:
 673              		.cfi_def_cfa_offset 16
 674              		.cfi_offset 80, -16
 675 03da 84B0     		sub	sp, sp, #16
 676              	.LCFI8:
 677              		.cfi_def_cfa_offset 32
 678 03dc 00AF     		add	r7, sp, #0
 679              	.LCFI9:
 680              		.cfi_def_cfa_register 7
 681 03de 7860     		str	r0, [r7, #4]
 682              	.LBB11:
 281:../src/main.cpp **** 	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 683              		.loc 1 281 0
 684 03e0 D7ED017A 		flds	s15, [r7, #4]	@ int
 685 03e4 B8EEE77A 		fsitos	s14, s15
 686 03e8 DFED537A 		flds	s15, .L24
 687 03ec 67EE277A 		fmuls	s15, s14, s15
 688 03f0 C7ED037A 		fsts	s15, [r7, #12]
 282:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 689              		.loc 1 282 0
 690 03f4 F868     		ldr	r0, [r7, #12]	@ float
 691 03f6 FFF7FEFF 		bl	__aeabi_f2d
 692 03fa 0246     		mov	r2, r0
 693 03fc 0B46     		mov	r3, r1
 694 03fe 1046     		mov	r0, r2
 695 0400 1946     		mov	r1, r3
 696 0402 4FF00002 		mov	r2, #0
 697 0406 4FF00003 		mov	r3, #0
 698 040a C4F21803 		movt	r3, 16408
 699 040e FFF7FEFF 		bl	pow
 700 0412 0246     		mov	r2, r0
 701 0414 0B46     		mov	r3, r1
 283:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 284:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 285:../src/main.cpp **** 			+ (float)60.24);
 702              		.loc 1 285 0
 703 0416 1046     		mov	r0, r2
 704 0418 1946     		mov	r1, r3
 705 041a FFF7FEFF 		bl	__aeabi_d2f
 706 041e 07EE100A 		fmsr	s14, r0
 707 0422 DFED467A 		flds	s15, .L24+4
 708 0426 27EE278A 		fmuls	s16, s14, s15
 282:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 709              		.loc 1 282 0
 710 042a F868     		ldr	r0, [r7, #12]	@ float
 711 042c FFF7FEFF 		bl	__aeabi_f2d
 712 0430 0246     		mov	r2, r0
 713 0432 0B46     		mov	r3, r1
 714 0434 1046     		mov	r0, r2
 715 0436 1946     		mov	r1, r3
 716 0438 4FF00002 		mov	r2, #0
 717 043c 4FF00003 		mov	r3, #0
 718 0440 C4F21403 		movt	r3, 16404
 719 0444 FFF7FEFF 		bl	pow
 720 0448 0246     		mov	r2, r0
 721 044a 0B46     		mov	r3, r1
 722              		.loc 1 285 0
 723 044c 1046     		mov	r0, r2
 724 044e 1946     		mov	r1, r3
 725 0450 FFF7FEFF 		bl	__aeabi_d2f
 726 0454 07EE100A 		fmsr	s14, r0
 727 0458 DFED397A 		flds	s15, .L24+8
 728 045c 67EE277A 		fmuls	s15, s14, s15
 729 0460 38EE678A 		fsubs	s16, s16, s15
 283:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 730              		.loc 1 283 0
 731 0464 F868     		ldr	r0, [r7, #12]	@ float
 732 0466 FFF7FEFF 		bl	__aeabi_f2d
 733 046a 0246     		mov	r2, r0
 734 046c 0B46     		mov	r3, r1
 735 046e 1046     		mov	r0, r2
 736 0470 1946     		mov	r1, r3
 737 0472 4FF00002 		mov	r2, #0
 738 0476 4FF00003 		mov	r3, #0
 739 047a C4F21003 		movt	r3, 16400
 740 047e FFF7FEFF 		bl	pow
 741 0482 0246     		mov	r2, r0
 742 0484 0B46     		mov	r3, r1
 743              		.loc 1 285 0
 744 0486 1046     		mov	r0, r2
 745 0488 1946     		mov	r1, r3
 746 048a FFF7FEFF 		bl	__aeabi_d2f
 747 048e 07EE100A 		fmsr	s14, r0
 748 0492 DFED2C7A 		flds	s15, .L24+12
 749 0496 67EE277A 		fmuls	s15, s14, s15
 750 049a 38EE278A 		fadds	s16, s16, s15
 283:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 751              		.loc 1 283 0
 752 049e F868     		ldr	r0, [r7, #12]	@ float
 753 04a0 FFF7FEFF 		bl	__aeabi_f2d
 754 04a4 0246     		mov	r2, r0
 755 04a6 0B46     		mov	r3, r1
 756 04a8 1046     		mov	r0, r2
 757 04aa 1946     		mov	r1, r3
 758 04ac 4FF00002 		mov	r2, #0
 759 04b0 4FF00003 		mov	r3, #0
 760 04b4 C4F20803 		movt	r3, 16392
 761 04b8 FFF7FEFF 		bl	pow
 762 04bc 0246     		mov	r2, r0
 763 04be 0B46     		mov	r3, r1
 764              		.loc 1 285 0
 765 04c0 1046     		mov	r0, r2
 766 04c2 1946     		mov	r1, r3
 767 04c4 FFF7FEFF 		bl	__aeabi_d2f
 768 04c8 07EE100A 		fmsr	s14, r0
 769 04cc DFED1E7A 		flds	s15, .L24+16
 770 04d0 67EE277A 		fmuls	s15, s14, s15
 771 04d4 38EE678A 		fsubs	s16, s16, s15
 284:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 772              		.loc 1 284 0
 773 04d8 F868     		ldr	r0, [r7, #12]	@ float
 774 04da FFF7FEFF 		bl	__aeabi_f2d
 775 04de 0246     		mov	r2, r0
 776 04e0 0B46     		mov	r3, r1
 777 04e2 1046     		mov	r0, r2
 778 04e4 1946     		mov	r1, r3
 779 04e6 4FF00002 		mov	r2, #0
 780 04ea 4FF08043 		mov	r3, #1073741824
 781 04ee FFF7FEFF 		bl	pow
 782 04f2 0246     		mov	r2, r0
 783 04f4 0B46     		mov	r3, r1
 784              		.loc 1 285 0
 785 04f6 1046     		mov	r0, r2
 786 04f8 1946     		mov	r1, r3
 787 04fa FFF7FEFF 		bl	__aeabi_d2f
 788 04fe 07EE100A 		fmsr	s14, r0
 789 0502 DFED127A 		flds	s15, .L24+20
 790 0506 67EE277A 		fmuls	s15, s14, s15
 791 050a 38EE277A 		fadds	s14, s16, s15
 792 050e D7ED036A 		flds	s13, [r7, #12]
 793 0512 DFED0F7A 		flds	s15, .L24+24
 794 0516 66EEA77A 		fmuls	s15, s13, s15
 795 051a 37EE677A 		fsubs	s14, s14, s15
 796 051e DFED0D7A 		flds	s15, .L24+28
 797 0522 77EE277A 		fadds	s15, s14, s15
 798 0526 17EE903A 		fmrs	r3, s15
 799              	.LBE11:
 286:../src/main.cpp **** }
 800              		.loc 1 286 0
 801 052a 1846     		mov	r0, r3	@ float
 802 052c 07F11007 		add	r7, r7, #16
 803 0530 BD46     		mov	sp, r7
 804 0532 BDEC028B 		fldmfdd	sp!, {d8}
 805 0536 80BD     		pop	{r7, pc}
 806              	.L25:
 807              		.align	2
 808              	.L24:
 809 0538 4A03643A 		.word	979632970
 810 053c C1CA213F 		.word	1059179201
 811 0540 27310041 		.word	1090531623
 812 0544 33332442 		.word	1109668659
 813 0548 6666DB42 		.word	1121674854
 814 054c 33B32443 		.word	1126478643
 815 0550 CDCC0A43 		.word	1124781261
 816 0554 C3F57042 		.word	1114699203
 817              		.cfi_endproc
 818              	.LFE113:
 820              		.align	2
 821              		.global	_Z19imu_update_ISR_initv
 822              		.thumb
 823              		.thumb_func
 825              	_Z19imu_update_ISR_initv:
 826              	.LFB114:
 287:../src/main.cpp **** 
 288:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 289:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 290:../src/main.cpp **** 
 291:../src/main.cpp **** void imu_update_ISR_init(void)
 292:../src/main.cpp **** {
 827              		.loc 1 292 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 24
 830              		@ frame_needed = 1, uses_anonymous_args = 0
 831 0558 80B5     		push	{r7, lr}
 832              	.LCFI10:
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 7, -8
 835              		.cfi_offset 14, -4
 836 055a 86B0     		sub	sp, sp, #24
 837              	.LCFI11:
 838              		.cfi_def_cfa_offset 32
 839 055c 00AF     		add	r7, sp, #0
 840              	.LCFI12:
 841              		.cfi_def_cfa_register 7
 842              	.LBB12:
 293:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 294:../src/main.cpp **** 
 295:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 843              		.loc 1 295 0
 844 055e 4FF00703 		mov	r3, #7
 845 0562 BB74     		strb	r3, [r7, #18]
 296:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 846              		.loc 1 296 0
 847 0564 4FF00003 		mov	r3, #0
 848 0568 FB74     		strb	r3, [r7, #19]
 297:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 849              		.loc 1 297 0
 850 056a 4FF00003 		mov	r3, #0
 851 056e 3B75     		strb	r3, [r7, #20]
 298:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 852              		.loc 1 298 0
 853 0570 4FF00003 		mov	r3, #0
 854 0574 7B75     		strb	r3, [r7, #21]
 299:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 855              		.loc 1 299 0
 856 0576 4FF00003 		mov	r3, #0
 857 057a BB75     		strb	r3, [r7, #22]
 300:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 858              		.loc 1 300 0
 859 057c 4FF00003 		mov	r3, #0
 860 0580 7B74     		strb	r3, [r7, #17]
 301:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 861              		.loc 1 301 0
 862 0582 4FF00803 		mov	r3, #8
 863 0586 3B74     		strb	r3, [r7, #16]
 302:../src/main.cpp **** 
 303:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 864              		.loc 1 303 0
 865 0588 07F11003 		add	r3, r7, #16
 866 058c 1846     		mov	r0, r3
 867 058e FFF7FEFF 		bl	L3GD20_Init
 304:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 868              		.loc 1 304 0
 869 0592 FFF7FEFF 		bl	_Z14calc_gyro_biasv
 870 0596 0346     		mov	r3, r0
 871 0598 1A46     		mov	r2, r3
 872 059a 40F20003 		movw	r3, #:lower16:gyro_bias_x
 873 059e C0F20003 		movt	r3, #:upper16:gyro_bias_x
 874 05a2 1A60     		str	r2, [r3, #0]
 305:../src/main.cpp **** 
 306:../src/main.cpp **** 	gyro_angle_x = 0;
 875              		.loc 1 306 0
 876 05a4 40F20003 		movw	r3, #:lower16:gyro_angle_x
 877 05a8 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 878 05ac 4FF00002 		mov	r2, #0
 879 05b0 1A60     		str	r2, [r3, #0]	@ float
 307:../src/main.cpp **** 
 308:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 309:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 310:../src/main.cpp **** 
 311:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 880              		.loc 1 311 0
 881 05b2 4FF01A03 		mov	r3, #26
 882 05b6 3B73     		strb	r3, [r7, #12]
 312:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 883              		.loc 1 312 0
 884 05b8 4FF00003 		mov	r3, #0
 885 05bc 7B73     		strb	r3, [r7, #13]
 313:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 886              		.loc 1 313 0
 887 05be 4FF00003 		mov	r3, #0
 888 05c2 BB73     		strb	r3, [r7, #14]
 314:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 889              		.loc 1 314 0
 890 05c4 4FF00103 		mov	r3, #1
 891 05c8 FB73     		strb	r3, [r7, #15]
 315:../src/main.cpp **** 
 316:../src/main.cpp **** 	NVIC_Init(&nv);
 892              		.loc 1 316 0
 893 05ca 07F10C03 		add	r3, r7, #12
 894 05ce 1846     		mov	r0, r3
 895 05d0 FFF7FEFF 		bl	NVIC_Init
 317:../src/main.cpp **** 
 318:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 896              		.loc 1 318 0
 897 05d4 4FF48020 		mov	r0, #262144
 898 05d8 4FF00101 		mov	r1, #1
 899 05dc FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 319:../src/main.cpp **** 
 320:../src/main.cpp **** 	/*
 321:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 322:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 323:../src/main.cpp **** 	 * 	  Period -> ARR
 324:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 325:../src/main.cpp **** 	 */
 326:../src/main.cpp **** 
 327:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 900              		.loc 1 327 0
 901 05e0 40F28F13 		movw	r3, #399
 902 05e4 7B60     		str	r3, [r7, #4]
 328:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 903              		.loc 1 328 0
 904 05e6 41F61F43 		movw	r3, #7199
 905 05ea 3B80     		strh	r3, [r7, #0]	@ movhi
 329:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 906              		.loc 1 329 0
 907 05ec 4FF00003 		mov	r3, #0
 908 05f0 BB72     		strb	r3, [r7, #10]
 330:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 909              		.loc 1 330 0
 910 05f2 4FF00003 		mov	r3, #0
 911 05f6 3B81     		strh	r3, [r7, #8]	@ movhi
 331:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 912              		.loc 1 331 0
 913 05f8 4FF00003 		mov	r3, #0
 914 05fc 7B80     		strh	r3, [r7, #2]	@ movhi
 332:../src/main.cpp **** 
 333:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 915              		.loc 1 333 0
 916 05fe 3B46     		mov	r3, r7
 917 0600 4FF49040 		mov	r0, #18432
 918 0604 C4F20100 		movt	r0, 16385
 919 0608 1946     		mov	r1, r3
 920 060a FFF7FEFF 		bl	TIM_TimeBaseInit
 334:../src/main.cpp **** 
 335:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 921              		.loc 1 335 0
 922 060e 4FF49040 		mov	r0, #18432
 923 0612 C4F20100 		movt	r0, 16385
 924 0616 4FF00101 		mov	r1, #1
 925 061a 4FF00102 		mov	r2, #1
 926 061e FFF7FEFF 		bl	TIM_ITConfig
 336:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 927              		.loc 1 336 0
 928 0622 4FF49040 		mov	r0, #18432
 929 0626 C4F20100 		movt	r0, 16385
 930 062a 4FF00101 		mov	r1, #1
 931 062e FFF7FEFF 		bl	TIM_Cmd
 932              	.LBE12:
 337:../src/main.cpp **** }
 933              		.loc 1 337 0
 934 0632 07F11807 		add	r7, r7, #24
 935 0636 BD46     		mov	sp, r7
 936 0638 80BD     		pop	{r7, pc}
 937              		.cfi_endproc
 938              	.LFE114:
 940              		.section	.rodata
 941 000e 0000     		.align	2
 942              	.LC1:
 943 0010 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 943      32302072 
 943      65616420 
 943      61747465 
 943      6D707420 
 944 0043 636F6465 		.ascii	"code!!!\012\015\000"
 944      2121210A 
 944      0D00
 945 004d 000000   		.text
 946 063a 00BF     		.align	2
 947              		.global	L3GD20_TIMEOUT_UserCallback
 948              		.thumb
 949              		.thumb_func
 951              	L3GD20_TIMEOUT_UserCallback:
 952              	.LFB115:
 338:../src/main.cpp **** 
 339:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 340:../src/main.cpp **** {
 953              		.loc 1 340 0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 0
 956              		@ frame_needed = 1, uses_anonymous_args = 0
 957 063c 80B5     		push	{r7, lr}
 958              	.LCFI13:
 959              		.cfi_def_cfa_offset 8
 960              		.cfi_offset 7, -8
 961              		.cfi_offset 14, -4
 962 063e 00AF     		add	r7, sp, #0
 963              	.LCFI14:
 964              		.cfi_def_cfa_register 7
 341:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 965              		.loc 1 341 0
 966 0640 40F20000 		movw	r0, #:lower16:.LC1
 967 0644 C0F20000 		movt	r0, #:upper16:.LC1
 968 0648 FFF7FEFF 		bl	printf
 342:../src/main.cpp **** 	return 0;
 969              		.loc 1 342 0
 970 064c 4FF00003 		mov	r3, #0
 343:../src/main.cpp **** }
 971              		.loc 1 343 0
 972 0650 1846     		mov	r0, r3
 973 0652 80BD     		pop	{r7, pc}
 974              		.cfi_endproc
 975              	.LFE115:
 977              		.align	2
 978              		.global	_Z15brake_pins_initv
 979              		.thumb
 980              		.thumb_func
 982              	_Z15brake_pins_initv:
 983              	.LFB116:
 344:../src/main.cpp **** 
 345:../src/main.cpp **** void brake_pins_init(void)
 346:../src/main.cpp **** {
 984              		.loc 1 346 0
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 8
 987              		@ frame_needed = 1, uses_anonymous_args = 0
 988 0654 80B5     		push	{r7, lr}
 989              	.LCFI15:
 990              		.cfi_def_cfa_offset 8
 991              		.cfi_offset 7, -8
 992              		.cfi_offset 14, -4
 993 0656 82B0     		sub	sp, sp, #8
 994              	.LCFI16:
 995              		.cfi_def_cfa_offset 16
 996 0658 00AF     		add	r7, sp, #0
 997              	.LCFI17:
 998              		.cfi_def_cfa_register 7
 999              	.LBB13:
 347:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 1000              		.loc 1 347 0
 1001 065a 4FF40010 		mov	r0, #2097152
 1002 065e 4FF00101 		mov	r1, #1
 1003 0662 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 348:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 349:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1004              		.loc 1 349 0
 1005 0666 3B46     		mov	r3, r7
 1006 0668 1846     		mov	r0, r3
 1007 066a FFF7FEFF 		bl	GPIO_StructInit
 350:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1008              		.loc 1 350 0
 1009 066e 4FF00C03 		mov	r3, #12
 1010 0672 3B60     		str	r3, [r7, #0]
 351:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 1011              		.loc 1 351 0
 1012 0674 4FF00003 		mov	r3, #0
 1013 0678 BB71     		strb	r3, [r7, #6]
 352:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 1014              		.loc 1 352 0
 1015 067a 4FF00103 		mov	r3, #1
 1016 067e 3B71     		strb	r3, [r7, #4]
 353:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1017              		.loc 1 353 0
 1018 0680 4FF00003 		mov	r3, #0
 1019 0684 FB71     		strb	r3, [r7, #7]
 354:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 1020              		.loc 1 354 0
 1021 0686 4FF00203 		mov	r3, #2
 1022 068a 7B71     		strb	r3, [r7, #5]
 355:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 1023              		.loc 1 355 0
 1024 068c 3B46     		mov	r3, r7
 1025 068e 4FF48050 		mov	r0, #4096
 1026 0692 C4F60000 		movt	r0, 18432
 1027 0696 1946     		mov	r1, r3
 1028 0698 FFF7FEFF 		bl	GPIO_Init
 356:../src/main.cpp **** 
 357:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 1029              		.loc 1 357 0
 1030 069c 4FF48050 		mov	r0, #4096
 1031 06a0 C4F60000 		movt	r0, 18432
 1032 06a4 4FF00401 		mov	r1, #4
 1033 06a8 4FF00002 		mov	r2, #0
 1034 06ac FFF7FEFF 		bl	GPIO_WriteBit
 358:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 1035              		.loc 1 358 0
 1036 06b0 4FF48050 		mov	r0, #4096
 1037 06b4 C4F60000 		movt	r0, 18432
 1038 06b8 4FF00801 		mov	r1, #8
 1039 06bc 4FF00002 		mov	r2, #0
 1040 06c0 FFF7FEFF 		bl	GPIO_WriteBit
 1041              	.LBE13:
 359:../src/main.cpp **** 
 360:../src/main.cpp **** 	/*
 361:../src/main.cpp **** 	 * 	a.GPIO_Mode = GPIO_Mode_OUT;
 362:../src/main.cpp **** 	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 363:../src/main.cpp **** 	a.GPIO_OType = GPIO_OType_PP;
 364:../src/main.cpp **** 	a.GPIO_Speed = GPIO_Speed_Level_2;
 365:../src/main.cpp **** 
 366:../src/main.cpp **** 	 */
 367:../src/main.cpp **** }
 1042              		.loc 1 367 0
 1043 06c4 07F10807 		add	r7, r7, #8
 1044 06c8 BD46     		mov	sp, r7
 1045 06ca 80BD     		pop	{r7, pc}
 1046              		.cfi_endproc
 1047              	.LFE116:
 1049              		.align	2
 1050              		.global	_Z13ping_pin_initv
 1051              		.thumb
 1052              		.thumb_func
 1054              	_Z13ping_pin_initv:
 1055              	.LFB117:
 368:../src/main.cpp **** /*
 369:../src/main.cpp ****  * PB0: OUTPUT
 370:../src/main.cpp ****  * PC1: INPUT
 371:../src/main.cpp ****  */
 372:../src/main.cpp **** void ping_pin_init(void)
 373:../src/main.cpp **** {
 1056              		.loc 1 373 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 8
 1059              		@ frame_needed = 1, uses_anonymous_args = 0
 1060 06cc 80B5     		push	{r7, lr}
 1061              	.LCFI18:
 1062              		.cfi_def_cfa_offset 8
 1063              		.cfi_offset 7, -8
 1064              		.cfi_offset 14, -4
 1065 06ce 82B0     		sub	sp, sp, #8
 1066              	.LCFI19:
 1067              		.cfi_def_cfa_offset 16
 1068 06d0 00AF     		add	r7, sp, #0
 1069              	.LCFI20:
 1070              		.cfi_def_cfa_register 7
 1071              	.LBB14:
 374:../src/main.cpp **** 
 375:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 1072              		.loc 1 375 0
 1073 06d2 4FF48800 		mov	r0, #4456448
 1074 06d6 4FF00101 		mov	r1, #1
 1075 06da FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 376:../src/main.cpp **** 
 377:../src/main.cpp **** 	GPIO_InitTypeDef g;
 378:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 1076              		.loc 1 378 0
 1077 06de 4FF00003 		mov	r3, #0
 1078 06e2 3B71     		strb	r3, [r7, #4]
 379:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 1079              		.loc 1 379 0
 1080 06e4 4FF00103 		mov	r3, #1
 1081 06e8 BB71     		strb	r3, [r7, #6]
 380:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 1082              		.loc 1 380 0
 1083 06ea 4FF40073 		mov	r3, #512
 1084 06ee 3B60     		str	r3, [r7, #0]
 381:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1085              		.loc 1 381 0
 1086 06f0 4FF00003 		mov	r3, #0
 1087 06f4 FB71     		strb	r3, [r7, #7]
 382:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 1088              		.loc 1 382 0
 1089 06f6 4FF00103 		mov	r3, #1
 1090 06fa 7B71     		strb	r3, [r7, #5]
 383:../src/main.cpp **** 
 384:../src/main.cpp **** 	GPIO_Init(GPIOF, &g);
 1091              		.loc 1 384 0
 1092 06fc 3B46     		mov	r3, r7
 1093 06fe 4FF4A050 		mov	r0, #5120
 1094 0702 C4F60000 		movt	r0, 18432
 1095 0706 1946     		mov	r1, r3
 1096 0708 FFF7FEFF 		bl	GPIO_Init
 385:../src/main.cpp **** 
 386:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 1097              		.loc 1 386 0
 1098 070c 4FF00103 		mov	r3, #1
 1099 0710 3B71     		strb	r3, [r7, #4]
 387:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1100              		.loc 1 387 0
 1101 0712 4FF00003 		mov	r3, #0
 1102 0716 BB71     		strb	r3, [r7, #6]
 388:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 1103              		.loc 1 388 0
 1104 0718 4FF00103 		mov	r3, #1
 1105 071c 3B60     		str	r3, [r7, #0]
 389:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1106              		.loc 1 389 0
 1107 071e 4FF00003 		mov	r3, #0
 1108 0722 FB71     		strb	r3, [r7, #7]
 390:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 1109              		.loc 1 390 0
 1110 0724 4FF00103 		mov	r3, #1
 1111 0728 7B71     		strb	r3, [r7, #5]
 391:../src/main.cpp **** 
 392:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1112              		.loc 1 392 0
 1113 072a 3B46     		mov	r3, r7
 1114 072c 4FF48060 		mov	r0, #1024
 1115 0730 C4F60000 		movt	r0, 18432
 1116 0734 1946     		mov	r1, r3
 1117 0736 FFF7FEFF 		bl	GPIO_Init
 393:../src/main.cpp **** 
 394:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1118              		.loc 1 394 0
 1119 073a 4FF00100 		mov	r0, #1
 1120 073e 4FF00101 		mov	r1, #1
 1121 0742 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 395:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 1122              		.loc 1 395 0
 1123 0746 4FF00500 		mov	r0, #5
 1124 074a 4FF00901 		mov	r1, #9
 1125 074e FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 1126              	.LBE14:
 396:../src/main.cpp **** 
 397:../src/main.cpp **** }
 1127              		.loc 1 397 0
 1128 0752 07F10807 		add	r7, r7, #8
 1129 0756 BD46     		mov	sp, r7
 1130 0758 80BD     		pop	{r7, pc}
 1131              		.cfi_endproc
 1132              	.LFE117:
 1134 075a 00BF     		.align	2
 1135              		.global	_Z20timer2_timebase_initv
 1136              		.thumb
 1137              		.thumb_func
 1139              	_Z20timer2_timebase_initv:
 1140              	.LFB118:
 398:../src/main.cpp **** 
 399:../src/main.cpp **** void timer2_timebase_init(void)
 400:../src/main.cpp **** {
 1141              		.loc 1 400 0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 16
 1144              		@ frame_needed = 1, uses_anonymous_args = 0
 1145 075c 80B5     		push	{r7, lr}
 1146              	.LCFI21:
 1147              		.cfi_def_cfa_offset 8
 1148              		.cfi_offset 7, -8
 1149              		.cfi_offset 14, -4
 1150 075e 84B0     		sub	sp, sp, #16
 1151              	.LCFI22:
 1152              		.cfi_def_cfa_offset 24
 1153 0760 00AF     		add	r7, sp, #0
 1154              	.LCFI23:
 1155              		.cfi_def_cfa_register 7
 1156              	.LBB15:
 401:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 402:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 1157              		.loc 1 402 0
 1158 0762 4FF00100 		mov	r0, #1
 1159 0766 4FF00101 		mov	r1, #1
 1160 076a FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 403:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 1161              		.loc 1 403 0
 1162 076e 44F24F63 		movw	r3, #17999
 1163 0772 BB60     		str	r3, [r7, #8]
 404:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 1164              		.loc 1 404 0
 1165 0774 4FF00003 		mov	r3, #0
 1166 0778 BB73     		strb	r3, [r7, #14]
 405:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 1167              		.loc 1 405 0
 1168 077a 4FF04703 		mov	r3, #71
 1169 077e BB80     		strh	r3, [r7, #4]	@ movhi
 406:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 1170              		.loc 1 406 0
 1171 0780 4FF00003 		mov	r3, #0
 1172 0784 BB81     		strh	r3, [r7, #12]	@ movhi
 407:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 1173              		.loc 1 407 0
 1174 0786 4FF00003 		mov	r3, #0
 1175 078a FB80     		strh	r3, [r7, #6]	@ movhi
 408:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 1176              		.loc 1 408 0
 1177 078c 07F10403 		add	r3, r7, #4
 1178 0790 4FF08040 		mov	r0, #1073741824
 1179 0794 1946     		mov	r1, r3
 1180 0796 FFF7FEFF 		bl	TIM_TimeBaseInit
 409:../src/main.cpp **** //	TIM_Cmd(TIM2, ENABLE);
 410:../src/main.cpp **** 
 411:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 1181              		.loc 1 411 0
 1182 079a 4FF08040 		mov	r0, #1073741824
 1183 079e 4FF00001 		mov	r1, #0
 1184 07a2 FFF7FEFF 		bl	TIM_SetCounter
 1185              	.LBE15:
 412:../src/main.cpp **** }
 1186              		.loc 1 412 0
 1187 07a6 07F11007 		add	r7, r7, #16
 1188 07aa BD46     		mov	sp, r7
 1189 07ac 80BD     		pop	{r7, pc}
 1190              		.cfi_endproc
 1191              	.LFE118:
 1193 07ae 00BF     		.align	2
 1194              		.global	_Z9comp_initv
 1195              		.thumb
 1196              		.thumb_func
 1198              	_Z9comp_initv:
 1199              	.LFB119:
 413:../src/main.cpp **** 
 414:../src/main.cpp **** /*
 415:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 416:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 417:../src/main.cpp ****  * 			Output->	PB9
 418:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 419:../src/main.cpp ****  * 			Output->	PA8
 420:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 421:../src/main.cpp ****  * 			Output->	PB1
 422:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 423:../src/main.cpp ****  * 			Output->	PC2
 424:../src/main.cpp ****  */
 425:../src/main.cpp **** 
 426:../src/main.cpp **** void comp_init(void)
 427:../src/main.cpp **** {
 1200              		.loc 1 427 0
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 40
 1203              		@ frame_needed = 1, uses_anonymous_args = 0
 1204 07b0 80B5     		push	{r7, lr}
 1205              	.LCFI24:
 1206              		.cfi_def_cfa_offset 8
 1207              		.cfi_offset 7, -8
 1208              		.cfi_offset 14, -4
 1209 07b2 8AB0     		sub	sp, sp, #40
 1210              	.LCFI25:
 1211              		.cfi_def_cfa_offset 48
 1212 07b4 00AF     		add	r7, sp, #0
 1213              	.LCFI26:
 1214              		.cfi_def_cfa_register 7
 1215              	.LBB16:
 428:../src/main.cpp **** 	//COMP2 Init:
 429:../src/main.cpp **** 
 430:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1216              		.loc 1 430 0
 1217 07b6 4FF00100 		mov	r0, #1
 1218 07ba 4FF00101 		mov	r1, #1
 1219 07be FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 431:../src/main.cpp **** 
 432:../src/main.cpp **** 	GPIO_InitTypeDef g;
 433:../src/main.cpp **** 
 434:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1220              		.loc 1 434 0
 1221 07c2 4FF00303 		mov	r3, #3
 1222 07c6 87F82430 		strb	r3, [r7, #36]
 435:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1223              		.loc 1 435 0
 1224 07ca 4FF00003 		mov	r3, #0
 1225 07ce 87F82730 		strb	r3, [r7, #39]
 436:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 1226              		.loc 1 436 0
 1227 07d2 4FF08003 		mov	r3, #128
 1228 07d6 3B62     		str	r3, [r7, #32]
 437:../src/main.cpp **** 
 438:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1229              		.loc 1 438 0
 1230 07d8 4FF40030 		mov	r0, #131072
 1231 07dc 4FF00101 		mov	r1, #1
 1232 07e0 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 439:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 1233              		.loc 1 439 0
 1234 07e4 07F12003 		add	r3, r7, #32
 1235 07e8 4FF09040 		mov	r0, #1207959552
 1236 07ec 1946     		mov	r1, r3
 1237 07ee FFF7FEFF 		bl	GPIO_Init
 440:../src/main.cpp **** 
 441:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1238              		.loc 1 441 0
 1239 07f2 4FF00203 		mov	r3, #2
 1240 07f6 87F82430 		strb	r3, [r7, #36]
 442:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1241              		.loc 1 442 0
 1242 07fa 4FF00003 		mov	r3, #0
 1243 07fe 87F82630 		strb	r3, [r7, #38]
 443:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1244              		.loc 1 443 0
 1245 0802 4FF00003 		mov	r3, #0
 1246 0806 87F82730 		strb	r3, [r7, #39]
 444:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 1247              		.loc 1 444 0
 1248 080a 4FF40073 		mov	r3, #512
 1249 080e 3B62     		str	r3, [r7, #32]
 445:../src/main.cpp **** 
 446:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 1250              		.loc 1 446 0
 1251 0810 4FF48060 		mov	r0, #1024
 1252 0814 C4F60000 		movt	r0, 18432
 1253 0818 4FF00901 		mov	r1, #9
 1254 081c 4FF00802 		mov	r2, #8
 1255 0820 FFF7FEFF 		bl	GPIO_PinAFConfig
 447:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1256              		.loc 1 447 0
 1257 0824 07F12003 		add	r3, r7, #32
 1258 0828 4FF48060 		mov	r0, #1024
 1259 082c C4F60000 		movt	r0, 18432
 1260 0830 1946     		mov	r1, r3
 1261 0832 FFF7FEFF 		bl	GPIO_Init
 448:../src/main.cpp **** 
 449:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1262              		.loc 1 449 0
 1263 0836 4FF00000 		mov	r0, #0
 1264 083a FFF7FEFF 		bl	RCC_PCLK2Config
 450:../src/main.cpp **** 
 451:../src/main.cpp **** 	COMP_InitTypeDef c;
 452:../src/main.cpp **** 
 453:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1265              		.loc 1 453 0
 1266 083e 4FF03003 		mov	r3, #48
 1267 0842 7B60     		str	r3, [r7, #4]
 454:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1268              		.loc 1 454 0
 1269 0844 4FF00003 		mov	r3, #0
 1270 0848 BB60     		str	r3, [r7, #8]
 455:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1271              		.loc 1 455 0
 1272 084a 4FF00403 		mov	r3, #4
 1273 084e FB61     		str	r3, [r7, #28]
 456:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1274              		.loc 1 456 0
 1275 0850 4FF00003 		mov	r3, #0
 1276 0854 FB60     		str	r3, [r7, #12]
 457:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1277              		.loc 1 457 0
 1278 0856 4FF00003 		mov	r3, #0
 1279 085a 7B61     		str	r3, [r7, #20]
 458:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1280              		.loc 1 458 0
 1281 085c 4FF48033 		mov	r3, #65536
 1282 0860 BB61     		str	r3, [r7, #24]
 459:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1283              		.loc 1 459 0
 1284 0862 4FF00003 		mov	r3, #0
 1285 0866 3B61     		str	r3, [r7, #16]
 460:../src/main.cpp **** 
 461:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 1286              		.loc 1 461 0
 1287 0868 07F10403 		add	r3, r7, #4
 1288 086c 4FF00400 		mov	r0, #4
 1289 0870 1946     		mov	r1, r3
 1290 0872 FFF7FEFF 		bl	COMP_Init
 462:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 1291              		.loc 1 462 0
 1292 0876 4FF00400 		mov	r0, #4
 1293 087a 4FF00101 		mov	r1, #1
 1294 087e FFF7FEFF 		bl	COMP_Cmd
 463:../src/main.cpp **** 
 464:../src/main.cpp **** 	//COMP3 Init:
 465:../src/main.cpp **** 
 466:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1295              		.loc 1 466 0
 1296 0882 4FF00100 		mov	r0, #1
 1297 0886 4FF00101 		mov	r1, #1
 1298 088a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 467:../src/main.cpp **** 
 468:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1299              		.loc 1 468 0
 1300 088e 4FF00303 		mov	r3, #3
 1301 0892 87F82430 		strb	r3, [r7, #36]
 469:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1302              		.loc 1 469 0
 1303 0896 4FF00003 		mov	r3, #0
 1304 089a 87F82730 		strb	r3, [r7, #39]
 470:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 1305              		.loc 1 470 0
 1306 089e 4FF48043 		mov	r3, #16384
 1307 08a2 3B62     		str	r3, [r7, #32]
 471:../src/main.cpp **** 
 472:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 1308              		.loc 1 472 0
 1309 08a4 4FF4C020 		mov	r0, #393216
 1310 08a8 4FF00101 		mov	r1, #1
 1311 08ac FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 473:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1312              		.loc 1 473 0
 1313 08b0 07F12003 		add	r3, r7, #32
 1314 08b4 4FF48060 		mov	r0, #1024
 1315 08b8 C4F60000 		movt	r0, 18432
 1316 08bc 1946     		mov	r1, r3
 1317 08be FFF7FEFF 		bl	GPIO_Init
 474:../src/main.cpp **** 
 475:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1318              		.loc 1 475 0
 1319 08c2 4FF00203 		mov	r3, #2
 1320 08c6 87F82430 		strb	r3, [r7, #36]
 476:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1321              		.loc 1 476 0
 1322 08ca 4FF00003 		mov	r3, #0
 1323 08ce 87F82630 		strb	r3, [r7, #38]
 477:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1324              		.loc 1 477 0
 1325 08d2 4FF00003 		mov	r3, #0
 1326 08d6 87F82730 		strb	r3, [r7, #39]
 478:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 1327              		.loc 1 478 0
 1328 08da 4FF48073 		mov	r3, #256
 1329 08de 3B62     		str	r3, [r7, #32]
 479:../src/main.cpp **** 
 480:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 1330              		.loc 1 480 0
 1331 08e0 4FF40060 		mov	r0, #2048
 1332 08e4 C4F60000 		movt	r0, 18432
 1333 08e8 4FF00801 		mov	r1, #8
 1334 08ec 4FF00702 		mov	r2, #7
 1335 08f0 FFF7FEFF 		bl	GPIO_PinAFConfig
 481:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1336              		.loc 1 481 0
 1337 08f4 07F12003 		add	r3, r7, #32
 1338 08f8 4FF40060 		mov	r0, #2048
 1339 08fc C4F60000 		movt	r0, 18432
 1340 0900 1946     		mov	r1, r3
 1341 0902 FFF7FEFF 		bl	GPIO_Init
 482:../src/main.cpp **** 
 483:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1342              		.loc 1 483 0
 1343 0906 4FF00000 		mov	r0, #0
 1344 090a FFF7FEFF 		bl	RCC_PCLK2Config
 484:../src/main.cpp **** 
 485:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1345              		.loc 1 485 0
 1346 090e 4FF03003 		mov	r3, #48
 1347 0912 7B60     		str	r3, [r7, #4]
 486:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1348              		.loc 1 486 0
 1349 0914 4FF00003 		mov	r3, #0
 1350 0918 BB60     		str	r3, [r7, #8]
 487:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1351              		.loc 1 487 0
 1352 091a 4FF00403 		mov	r3, #4
 1353 091e FB61     		str	r3, [r7, #28]
 488:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1354              		.loc 1 488 0
 1355 0920 4FF00003 		mov	r3, #0
 1356 0924 FB60     		str	r3, [r7, #12]
 489:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1357              		.loc 1 489 0
 1358 0926 4FF00003 		mov	r3, #0
 1359 092a 7B61     		str	r3, [r7, #20]
 490:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1360              		.loc 1 490 0
 1361 092c 4FF48033 		mov	r3, #65536
 1362 0930 BB61     		str	r3, [r7, #24]
 491:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1363              		.loc 1 491 0
 1364 0932 4FF00003 		mov	r3, #0
 1365 0936 3B61     		str	r3, [r7, #16]
 492:../src/main.cpp **** 
 493:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 1366              		.loc 1 493 0
 1367 0938 07F10403 		add	r3, r7, #4
 1368 093c 4FF00800 		mov	r0, #8
 1369 0940 1946     		mov	r1, r3
 1370 0942 FFF7FEFF 		bl	COMP_Init
 494:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 1371              		.loc 1 494 0
 1372 0946 4FF00800 		mov	r0, #8
 1373 094a 4FF00101 		mov	r1, #1
 1374 094e FFF7FEFF 		bl	COMP_Cmd
 495:../src/main.cpp **** 
 496:../src/main.cpp **** 	//COMP4 Init:
 497:../src/main.cpp **** 
 498:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1375              		.loc 1 498 0
 1376 0952 4FF00100 		mov	r0, #1
 1377 0956 4FF00101 		mov	r1, #1
 1378 095a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 499:../src/main.cpp **** 
 500:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1379              		.loc 1 500 0
 1380 095e 4FF00303 		mov	r3, #3
 1381 0962 87F82430 		strb	r3, [r7, #36]
 501:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1382              		.loc 1 501 0
 1383 0966 4FF00003 		mov	r3, #0
 1384 096a 87F82730 		strb	r3, [r7, #39]
 502:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 1385              		.loc 1 502 0
 1386 096e 4FF08003 		mov	r3, #128
 1387 0972 3B62     		str	r3, [r7, #32]
 503:../src/main.cpp **** 
 504:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 1388              		.loc 1 504 0
 1389 0974 4FF41010 		mov	r0, #2359296
 1390 0978 4FF00101 		mov	r1, #1
 1391 097c FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 505:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 1392              		.loc 1 505 0
 1393 0980 07F12003 		add	r3, r7, #32
 1394 0984 4FF48050 		mov	r0, #4096
 1395 0988 C4F60000 		movt	r0, 18432
 1396 098c 1946     		mov	r1, r3
 1397 098e FFF7FEFF 		bl	GPIO_Init
 506:../src/main.cpp **** 
 507:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1398              		.loc 1 507 0
 1399 0992 4FF00203 		mov	r3, #2
 1400 0996 87F82430 		strb	r3, [r7, #36]
 508:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1401              		.loc 1 508 0
 1402 099a 4FF00003 		mov	r3, #0
 1403 099e 87F82630 		strb	r3, [r7, #38]
 509:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1404              		.loc 1 509 0
 1405 09a2 4FF00003 		mov	r3, #0
 1406 09a6 87F82730 		strb	r3, [r7, #39]
 510:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 1407              		.loc 1 510 0
 1408 09aa 4FF00203 		mov	r3, #2
 1409 09ae 3B62     		str	r3, [r7, #32]
 511:../src/main.cpp **** 
 512:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 1410              		.loc 1 512 0
 1411 09b0 4FF48060 		mov	r0, #1024
 1412 09b4 C4F60000 		movt	r0, 18432
 1413 09b8 4FF00101 		mov	r1, #1
 1414 09bc 4FF00802 		mov	r2, #8
 1415 09c0 FFF7FEFF 		bl	GPIO_PinAFConfig
 513:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1416              		.loc 1 513 0
 1417 09c4 07F12003 		add	r3, r7, #32
 1418 09c8 4FF48060 		mov	r0, #1024
 1419 09cc C4F60000 		movt	r0, 18432
 1420 09d0 1946     		mov	r1, r3
 1421 09d2 FFF7FEFF 		bl	GPIO_Init
 514:../src/main.cpp **** 
 515:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1422              		.loc 1 515 0
 1423 09d6 4FF00000 		mov	r0, #0
 1424 09da FFF7FEFF 		bl	RCC_PCLK2Config
 516:../src/main.cpp **** 
 517:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1425              		.loc 1 517 0
 1426 09de 4FF03003 		mov	r3, #48
 1427 09e2 7B60     		str	r3, [r7, #4]
 518:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1428              		.loc 1 518 0
 1429 09e4 4FF08003 		mov	r3, #128
 1430 09e8 BB60     		str	r3, [r7, #8]
 519:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1431              		.loc 1 519 0
 1432 09ea 4FF00403 		mov	r3, #4
 1433 09ee FB61     		str	r3, [r7, #28]
 520:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1434              		.loc 1 520 0
 1435 09f0 4FF00003 		mov	r3, #0
 1436 09f4 FB60     		str	r3, [r7, #12]
 521:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1437              		.loc 1 521 0
 1438 09f6 4FF00003 		mov	r3, #0
 1439 09fa 7B61     		str	r3, [r7, #20]
 522:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1440              		.loc 1 522 0
 1441 09fc 4FF48033 		mov	r3, #65536
 1442 0a00 BB61     		str	r3, [r7, #24]
 523:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1443              		.loc 1 523 0
 1444 0a02 4FF00003 		mov	r3, #0
 1445 0a06 3B61     		str	r3, [r7, #16]
 524:../src/main.cpp **** 
 525:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 1446              		.loc 1 525 0
 1447 0a08 07F10403 		add	r3, r7, #4
 1448 0a0c 4FF00C00 		mov	r0, #12
 1449 0a10 1946     		mov	r1, r3
 1450 0a12 FFF7FEFF 		bl	COMP_Init
 526:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 1451              		.loc 1 526 0
 1452 0a16 4FF00C00 		mov	r0, #12
 1453 0a1a 4FF00101 		mov	r1, #1
 1454 0a1e FFF7FEFF 		bl	COMP_Cmd
 527:../src/main.cpp **** 
 528:../src/main.cpp **** 	//COMP7 Init:
 529:../src/main.cpp **** 
 530:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1455              		.loc 1 530 0
 1456 0a22 4FF00100 		mov	r0, #1
 1457 0a26 4FF00101 		mov	r1, #1
 1458 0a2a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 531:../src/main.cpp **** 
 532:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1459              		.loc 1 532 0
 1460 0a2e 4FF00303 		mov	r3, #3
 1461 0a32 87F82430 		strb	r3, [r7, #36]
 533:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1462              		.loc 1 533 0
 1463 0a36 4FF00003 		mov	r3, #0
 1464 0a3a 87F82730 		strb	r3, [r7, #39]
 534:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 1465              		.loc 1 534 0
 1466 0a3e 4FF00203 		mov	r3, #2
 1467 0a42 3B62     		str	r3, [r7, #32]
 535:../src/main.cpp **** 
 536:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 1468              		.loc 1 536 0
 1469 0a44 4FF40020 		mov	r0, #524288
 1470 0a48 4FF00101 		mov	r1, #1
 1471 0a4c FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 537:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1472              		.loc 1 537 0
 1473 0a50 07F12003 		add	r3, r7, #32
 1474 0a54 4FF40060 		mov	r0, #2048
 1475 0a58 C4F60000 		movt	r0, 18432
 1476 0a5c 1946     		mov	r1, r3
 1477 0a5e FFF7FEFF 		bl	GPIO_Init
 538:../src/main.cpp **** 
 539:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1478              		.loc 1 539 0
 1479 0a62 4FF00203 		mov	r3, #2
 1480 0a66 87F82430 		strb	r3, [r7, #36]
 540:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1481              		.loc 1 540 0
 1482 0a6a 4FF00003 		mov	r3, #0
 1483 0a6e 87F82630 		strb	r3, [r7, #38]
 541:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1484              		.loc 1 541 0
 1485 0a72 4FF00003 		mov	r3, #0
 1486 0a76 87F82730 		strb	r3, [r7, #39]
 542:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 1487              		.loc 1 542 0
 1488 0a7a 4FF00403 		mov	r3, #4
 1489 0a7e 3B62     		str	r3, [r7, #32]
 543:../src/main.cpp **** 
 544:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 1490              		.loc 1 544 0
 1491 0a80 4FF40060 		mov	r0, #2048
 1492 0a84 C4F60000 		movt	r0, 18432
 1493 0a88 4FF00201 		mov	r1, #2
 1494 0a8c 4FF00302 		mov	r2, #3
 1495 0a90 FFF7FEFF 		bl	GPIO_PinAFConfig
 545:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1496              		.loc 1 545 0
 1497 0a94 07F12003 		add	r3, r7, #32
 1498 0a98 4FF40060 		mov	r0, #2048
 1499 0a9c C4F60000 		movt	r0, 18432
 1500 0aa0 1946     		mov	r1, r3
 1501 0aa2 FFF7FEFF 		bl	GPIO_Init
 546:../src/main.cpp **** 
 547:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1502              		.loc 1 547 0
 1503 0aa6 4FF00000 		mov	r0, #0
 1504 0aaa FFF7FEFF 		bl	RCC_PCLK2Config
 548:../src/main.cpp **** 
 549:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1505              		.loc 1 549 0
 1506 0aae 4FF03003 		mov	r3, #48
 1507 0ab2 7B60     		str	r3, [r7, #4]
 550:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1508              		.loc 1 550 0
 1509 0ab4 4FF08003 		mov	r3, #128
 1510 0ab8 BB60     		str	r3, [r7, #8]
 551:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1511              		.loc 1 551 0
 1512 0aba 4FF00403 		mov	r3, #4
 1513 0abe FB61     		str	r3, [r7, #28]
 552:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1514              		.loc 1 552 0
 1515 0ac0 4FF00003 		mov	r3, #0
 1516 0ac4 FB60     		str	r3, [r7, #12]
 553:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1517              		.loc 1 553 0
 1518 0ac6 4FF00003 		mov	r3, #0
 1519 0aca 7B61     		str	r3, [r7, #20]
 554:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1520              		.loc 1 554 0
 1521 0acc 4FF48033 		mov	r3, #65536
 1522 0ad0 BB61     		str	r3, [r7, #24]
 555:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1523              		.loc 1 555 0
 1524 0ad2 4FF00003 		mov	r3, #0
 1525 0ad6 3B61     		str	r3, [r7, #16]
 556:../src/main.cpp **** 
 557:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 1526              		.loc 1 557 0
 1527 0ad8 07F10403 		add	r3, r7, #4
 1528 0adc 4FF01800 		mov	r0, #24
 1529 0ae0 1946     		mov	r1, r3
 1530 0ae2 FFF7FEFF 		bl	COMP_Init
 558:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 1531              		.loc 1 558 0
 1532 0ae6 4FF01800 		mov	r0, #24
 1533 0aea 4FF00101 		mov	r1, #1
 1534 0aee FFF7FEFF 		bl	COMP_Cmd
 1535              	.LBE16:
 559:../src/main.cpp **** }
 1536              		.loc 1 559 0
 1537 0af2 07F12807 		add	r7, r7, #40
 1538 0af6 BD46     		mov	sp, r7
 1539 0af8 80BD     		pop	{r7, pc}
 1540              		.cfi_endproc
 1541              	.LFE119:
 1543 0afa 00BF     		.align	2
 1544              		.global	_Z14calc_gyro_biasv
 1545              		.thumb
 1546              		.thumb_func
 1548              	_Z14calc_gyro_biasv:
 1549              	.LFB120:
 560:../src/main.cpp **** 
 561:../src/main.cpp **** int16_t calc_gyro_bias(void)
 562:../src/main.cpp **** {
 1550              		.loc 1 562 0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 16
 1553              		@ frame_needed = 1, uses_anonymous_args = 0
 1554 0afc 80B5     		push	{r7, lr}
 1555              	.LCFI27:
 1556              		.cfi_def_cfa_offset 8
 1557              		.cfi_offset 7, -8
 1558              		.cfi_offset 14, -4
 1559 0afe 84B0     		sub	sp, sp, #16
 1560              	.LCFI28:
 1561              		.cfi_def_cfa_offset 24
 1562 0b00 00AF     		add	r7, sp, #0
 1563              	.LCFI29:
 1564              		.cfi_def_cfa_register 7
 1565              	.LBB17:
 563:../src/main.cpp **** 	int i = 0;
 1566              		.loc 1 563 0
 1567 0b02 4FF00003 		mov	r3, #0
 1568 0b06 FB60     		str	r3, [r7, #12]
 564:../src/main.cpp **** 	int accum_x = 0;
 1569              		.loc 1 564 0
 1570 0b08 4FF00003 		mov	r3, #0
 1571 0b0c BB60     		str	r3, [r7, #8]
 565:../src/main.cpp **** 
 566:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 567:../src/main.cpp **** 		uint16_t un_signed;
 568:../src/main.cpp **** 		int16_t output;
 569:../src/main.cpp **** 	} convert;
 570:../src/main.cpp **** 
 571:../src/main.cpp **** 	uint8_t bytes[2];
 572:../src/main.cpp **** 
 573:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1572              		.loc 1 573 0
 1573 0b0e 4FF00003 		mov	r3, #0
 1574 0b12 FB60     		str	r3, [r7, #12]
 1575 0b14 19E0     		b	.L34
 1576              	.L35:
 574:../src/main.cpp **** 	{
 575:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1577              		.loc 1 575 0 discriminator 2
 1578 0b16 3B46     		mov	r3, r7
 1579 0b18 1846     		mov	r0, r3
 1580 0b1a 4FF02801 		mov	r1, #40
 1581 0b1e 4FF00202 		mov	r2, #2
 1582 0b22 FFF7FEFF 		bl	L3GD20_Read
 576:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1583              		.loc 1 576 0 discriminator 2
 1584 0b26 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1585 0b28 4FEA0323 		lsl	r3, r3, #8
 1586 0b2c 9AB2     		uxth	r2, r3
 1587 0b2e 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1588 0b30 1343     		orrs	r3, r3, r2
 1589 0b32 9BB2     		uxth	r3, r3
 1590 0b34 9BB2     		uxth	r3, r3
 1591 0b36 BB80     		strh	r3, [r7, #4]	@ movhi
 577:../src/main.cpp **** 		accum_x += convert.output;
 1592              		.loc 1 577 0 discriminator 2
 1593 0b38 BB88     		ldrh	r3, [r7, #4]
 1594 0b3a 1BB2     		sxth	r3, r3
 1595 0b3c BA68     		ldr	r2, [r7, #8]
 1596 0b3e D318     		adds	r3, r2, r3
 1597 0b40 BB60     		str	r3, [r7, #8]
 573:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1598              		.loc 1 573 0 discriminator 2
 1599 0b42 FB68     		ldr	r3, [r7, #12]
 1600 0b44 03F10103 		add	r3, r3, #1
 1601 0b48 FB60     		str	r3, [r7, #12]
 1602              	.L34:
 573:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1603              		.loc 1 573 0 is_stmt 0 discriminator 1
 1604 0b4a FB68     		ldr	r3, [r7, #12]
 1605 0b4c F92B     		cmp	r3, #249
 1606 0b4e CCBF     		ite	gt
 1607 0b50 0023     		movgt	r3, #0
 1608 0b52 0123     		movle	r3, #1
 1609 0b54 DBB2     		uxtb	r3, r3
 1610 0b56 002B     		cmp	r3, #0
 1611 0b58 DDD1     		bne	.L35
 578:../src/main.cpp **** 	}
 579:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1612              		.loc 1 579 0 is_stmt 1
 1613 0b5a D7ED027A 		flds	s15, [r7, #8]	@ int
 1614 0b5e B8EEE77A 		fsitos	s14, s15
 1615 0b62 DFED077A 		flds	s15, .L37
 1616 0b66 C7EE277A 		fdivs	s15, s14, s15
 1617 0b6a FDEEE77A 		ftosizs	s15, s15
 1618 0b6e 17EE903A 		fmrs	r3, s15	@ int
 1619 0b72 9BB2     		uxth	r3, r3
 1620 0b74 1BB2     		sxth	r3, r3
 1621              	.LBE17:
 580:../src/main.cpp **** }
 1622              		.loc 1 580 0
 1623 0b76 1846     		mov	r0, r3
 1624 0b78 07F11007 		add	r7, r7, #16
 1625 0b7c BD46     		mov	sp, r7
 1626 0b7e 80BD     		pop	{r7, pc}
 1627              	.L38:
 1628              		.align	2
 1629              	.L37:
 1630 0b80 00007A43 		.word	1132068864
 1631              		.cfi_endproc
 1632              	.LFE120:
 1634              		.align	2
 1635              		.global	_Z13adc1_init_DMAv
 1636              		.thumb
 1637              		.thumb_func
 1639              	_Z13adc1_init_DMAv:
 1640              	.LFB121:
 581:../src/main.cpp **** 
 582:../src/main.cpp **** /*
 583:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 584:../src/main.cpp ****  * a user-supplied location in memory
 585:../src/main.cpp ****  * @Args: None
 586:../src/main.cpp ****  * @Return Val: None
 587:../src/main.cpp ****  */
 588:../src/main.cpp **** 
 589:../src/main.cpp **** void adc1_init_DMA(void)
 590:../src/main.cpp **** {
 1641              		.loc 1 590 0
 1642              		.cfi_startproc
 1643              		@ args = 0, pretend = 0, frame = 112
 1644              		@ frame_needed = 1, uses_anonymous_args = 0
 1645 0b84 80B5     		push	{r7, lr}
 1646              	.LCFI30:
 1647              		.cfi_def_cfa_offset 8
 1648              		.cfi_offset 7, -8
 1649              		.cfi_offset 14, -4
 1650 0b86 9CB0     		sub	sp, sp, #112
 1651              	.LCFI31:
 1652              		.cfi_def_cfa_offset 120
 1653 0b88 00AF     		add	r7, sp, #0
 1654              	.LCFI32:
 1655              		.cfi_def_cfa_register 7
 1656              	.LBB18:
 591:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 592:../src/main.cpp **** 
 593:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 594:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 595:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 596:../src/main.cpp **** 
 597:../src/main.cpp **** 	/* Configure the ADC clock */
 598:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1657              		.loc 1 598 0
 1658 0b8a 4FF48870 		mov	r0, #272
 1659 0b8e FFF7FEFF 		bl	RCC_ADCCLKConfig
 599:../src/main.cpp **** 	/* Enable ADC1 clock */
 600:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1660              		.loc 1 600 0
 1661 0b92 4FF08050 		mov	r0, #268435456
 1662 0b96 4FF00101 		mov	r1, #1
 1663 0b9a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 601:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 602:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1664              		.loc 1 602 0
 1665 0b9e 4FF40030 		mov	r0, #131072
 1666 0ba2 4FF00101 		mov	r1, #1
 1667 0ba6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 603:../src/main.cpp **** 
 604:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 605:../src/main.cpp **** 
 606:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1668              		.loc 1 606 0
 1669 0baa 07F15003 		add	r3, r7, #80
 1670 0bae 1846     		mov	r0, r3
 1671 0bb0 FFF7FEFF 		bl	GPIO_StructInit
 607:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1672              		.loc 1 607 0
 1673 0bb4 4FF00C03 		mov	r3, #12
 1674 0bb8 3B65     		str	r3, [r7, #80]
 608:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1675              		.loc 1 608 0
 1676 0bba 4FF00303 		mov	r3, #3
 1677 0bbe 87F85430 		strb	r3, [r7, #84]
 609:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1678              		.loc 1 609 0
 1679 0bc2 4FF00003 		mov	r3, #0
 1680 0bc6 87F85730 		strb	r3, [r7, #87]
 610:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1681              		.loc 1 610 0
 1682 0bca 07F15003 		add	r3, r7, #80
 1683 0bce 4FF09040 		mov	r0, #1207959552
 1684 0bd2 1946     		mov	r1, r3
 1685 0bd4 FFF7FEFF 		bl	GPIO_Init
 611:../src/main.cpp **** 
 612:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1686              		.loc 1 612 0
 1687 0bd8 3B46     		mov	r3, r7
 1688 0bda 1846     		mov	r0, r3
 1689 0bdc FFF7FEFF 		bl	ADC_StructInit
 613:../src/main.cpp **** 
 614:../src/main.cpp **** 	/* Calibration procedure */
 615:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1690              		.loc 1 615 0
 1691 0be0 4FF0A040 		mov	r0, #1342177280
 1692 0be4 4FF00101 		mov	r1, #1
 1693 0be8 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 616:../src/main.cpp **** 
 617:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 618:../src/main.cpp **** 	int foo;
 619:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1694              		.loc 1 619 0
 1695 0bec 4FF00003 		mov	r3, #0
 1696 0bf0 FB66     		str	r3, [r7, #108]
 1697 0bf2 07E0     		b	.L40
 1698              	.L41:
 620:../src/main.cpp **** 	{
 621:../src/main.cpp **** 	  ++foo;
 1699              		.loc 1 621 0 discriminator 2
 1700 0bf4 FB6E     		ldr	r3, [r7, #108]
 1701 0bf6 03F10103 		add	r3, r3, #1
 1702 0bfa FB66     		str	r3, [r7, #108]
 619:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1703              		.loc 1 619 0 discriminator 2
 1704 0bfc FB6E     		ldr	r3, [r7, #108]
 1705 0bfe 03F10103 		add	r3, r3, #1
 1706 0c02 FB66     		str	r3, [r7, #108]
 1707              	.L40:
 619:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1708              		.loc 1 619 0 is_stmt 0 discriminator 1
 1709 0c04 FA6E     		ldr	r2, [r7, #108]
 1710 0c06 4FF6FF13 		movw	r3, #63999
 1711 0c0a 9A42     		cmp	r2, r3
 1712 0c0c CCBF     		ite	gt
 1713 0c0e 0023     		movgt	r3, #0
 1714 0c10 0123     		movle	r3, #1
 1715 0c12 DBB2     		uxtb	r3, r3
 1716 0c14 002B     		cmp	r3, #0
 1717 0c16 EDD1     		bne	.L41
 622:../src/main.cpp **** 	}
 623:../src/main.cpp **** 
 624:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1718              		.loc 1 624 0 is_stmt 1
 1719 0c18 4FF0A040 		mov	r0, #1342177280
 1720 0c1c 4FF00001 		mov	r1, #0
 1721 0c20 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 625:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1722              		.loc 1 625 0
 1723 0c24 4FF0A040 		mov	r0, #1342177280
 1724 0c28 FFF7FEFF 		bl	ADC_StartCalibration
 626:../src/main.cpp **** 
 627:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1725              		.loc 1 627 0
 1726 0c2c 00BF     		nop
 1727              	.L42:
 1728              		.loc 1 627 0 is_stmt 0 discriminator 1
 1729 0c2e 4FF0A040 		mov	r0, #1342177280
 1730 0c32 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1731 0c36 0346     		mov	r3, r0
 1732 0c38 002B     		cmp	r3, #0
 1733 0c3a 0CBF     		ite	eq
 1734 0c3c 0023     		moveq	r3, #0
 1735 0c3e 0123     		movne	r3, #1
 1736 0c40 DBB2     		uxtb	r3, r3
 1737 0c42 002B     		cmp	r3, #0
 1738 0c44 F3D1     		bne	.L42
 628:../src/main.cpp **** 
 629:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1739              		.loc 1 629 0 is_stmt 1
 1740 0c46 4FF00003 		mov	r3, #0
 1741 0c4a BB65     		str	r3, [r7, #88]
 630:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 1742              		.loc 1 630 0
 1743 0c4c 4FF00003 		mov	r3, #0
 1744 0c50 FB65     		str	r3, [r7, #92]
 631:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1745              		.loc 1 631 0
 1746 0c52 4FF40043 		mov	r3, #32768
 1747 0c56 3B66     		str	r3, [r7, #96]
 632:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1748              		.loc 1 632 0
 1749 0c58 4FF00203 		mov	r3, #2
 1750 0c5c 7B66     		str	r3, [r7, #100]
 633:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1751              		.loc 1 633 0
 1752 0c5e 4FF00F03 		mov	r3, #15
 1753 0c62 87F86830 		strb	r3, [r7, #104]
 634:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1754              		.loc 1 634 0
 1755 0c66 07F15803 		add	r3, r7, #88
 1756 0c6a 4FF0A040 		mov	r0, #1342177280
 1757 0c6e 1946     		mov	r1, r3
 1758 0c70 FFF7FEFF 		bl	ADC_CommonInit
 635:../src/main.cpp **** 
 636:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1759              		.loc 1 636 0
 1760 0c74 4FF40053 		mov	r3, #8192
 1761 0c78 3B60     		str	r3, [r7, #0]
 637:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1762              		.loc 1 637 0
 1763 0c7a 4FF00003 		mov	r3, #0
 1764 0c7e 7B60     		str	r3, [r7, #4]
 638:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1765              		.loc 1 638 0
 1766 0c80 4FF00003 		mov	r3, #0
 1767 0c84 BB60     		str	r3, [r7, #8]
 639:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1768              		.loc 1 639 0
 1769 0c86 4FF00003 		mov	r3, #0
 1770 0c8a FB60     		str	r3, [r7, #12]
 640:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1771              		.loc 1 640 0
 1772 0c8c 4FF00003 		mov	r3, #0
 1773 0c90 3B61     		str	r3, [r7, #16]
 641:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1774              		.loc 1 641 0
 1775 0c92 4FF00003 		mov	r3, #0
 1776 0c96 7B61     		str	r3, [r7, #20]
 642:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1777              		.loc 1 642 0
 1778 0c98 4FF00003 		mov	r3, #0
 1779 0c9c BB61     		str	r3, [r7, #24]
 643:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1780              		.loc 1 643 0
 1781 0c9e 4FF00203 		mov	r3, #2
 1782 0ca2 3B77     		strb	r3, [r7, #28]
 644:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1783              		.loc 1 644 0
 1784 0ca4 3B46     		mov	r3, r7
 1785 0ca6 4FF0A040 		mov	r0, #1342177280
 1786 0caa 1946     		mov	r1, r3
 1787 0cac FFF7FEFF 		bl	ADC_Init
 645:../src/main.cpp **** 
 646:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 647:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1788              		.loc 1 647 0
 1789 0cb0 4FF0A040 		mov	r0, #1342177280
 1790 0cb4 4FF00301 		mov	r1, #3
 1791 0cb8 4FF00102 		mov	r2, #1
 1792 0cbc 4FF00703 		mov	r3, #7
 1793 0cc0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 648:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1794              		.loc 1 648 0
 1795 0cc4 4FF0A040 		mov	r0, #1342177280
 1796 0cc8 4FF00401 		mov	r1, #4
 1797 0ccc 4FF00202 		mov	r2, #2
 1798 0cd0 4FF00703 		mov	r3, #7
 1799 0cd4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 649:../src/main.cpp **** 
 650:../src/main.cpp **** 	/* Enable ADC1 */
 651:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1800              		.loc 1 651 0
 1801 0cd8 4FF0A040 		mov	r0, #1342177280
 1802 0cdc 4FF00101 		mov	r1, #1
 1803 0ce0 FFF7FEFF 		bl	ADC_Cmd
 652:../src/main.cpp **** 
 653:../src/main.cpp **** 	/* wait for ADRDY */
 654:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1804              		.loc 1 654 0
 1805 0ce4 00BF     		nop
 1806              	.L43:
 1807              		.loc 1 654 0 is_stmt 0 discriminator 1
 1808 0ce6 4FF0A040 		mov	r0, #1342177280
 1809 0cea 4FF00101 		mov	r1, #1
 1810 0cee FFF7FEFF 		bl	ADC_GetFlagStatus
 1811 0cf2 0346     		mov	r3, r0
 1812 0cf4 002B     		cmp	r3, #0
 1813 0cf6 14BF     		ite	ne
 1814 0cf8 0023     		movne	r3, #0
 1815 0cfa 0123     		moveq	r3, #1
 1816 0cfc DBB2     		uxtb	r3, r3
 1817 0cfe 002B     		cmp	r3, #0
 1818 0d00 F1D1     		bne	.L43
 655:../src/main.cpp **** 
 656:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 657:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1819              		.loc 1 657 0 is_stmt 1
 1820 0d02 4FF0A040 		mov	r0, #1342177280
 1821 0d06 FFF7FEFF 		bl	ADC_StartConversion
 658:../src/main.cpp **** 
 659:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1822              		.loc 1 659 0
 1823 0d0a 4FF00100 		mov	r0, #1
 1824 0d0e 4FF00101 		mov	r1, #1
 1825 0d12 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 660:../src/main.cpp **** 
 661:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 662:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1826              		.loc 1 662 0
 1827 0d16 07F12003 		add	r3, r7, #32
 1828 0d1a 1846     		mov	r0, r3
 1829 0d1c FFF7FEFF 		bl	DMA_StructInit
 663:../src/main.cpp **** 
 664:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1830              		.loc 1 664 0
 1831 0d20 4FF00800 		mov	r0, #8
 1832 0d24 C4F20200 		movt	r0, 16386
 1833 0d28 FFF7FEFF 		bl	DMA_DeInit
 665:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1834              		.loc 1 665 0
 1835 0d2c 4FF04003 		mov	r3, #64
 1836 0d30 C5F20003 		movt	r3, 20480
 1837 0d34 3B62     		str	r3, [r7, #32]
 666:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1838              		.loc 1 666 0
 1839 0d36 40F20003 		movw	r3, #:lower16:adcData
 1840 0d3a C0F20003 		movt	r3, #:upper16:adcData
 1841 0d3e 7B62     		str	r3, [r7, #36]
 667:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1842              		.loc 1 667 0
 1843 0d40 4FF00003 		mov	r3, #0
 1844 0d44 BB62     		str	r3, [r7, #40]
 668:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1845              		.loc 1 668 0
 1846 0d46 4FF00203 		mov	r3, #2
 1847 0d4a BB85     		strh	r3, [r7, #44]	@ movhi
 669:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1848              		.loc 1 669 0
 1849 0d4c 4FF00003 		mov	r3, #0
 1850 0d50 3B63     		str	r3, [r7, #48]
 670:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1851              		.loc 1 670 0
 1852 0d52 4FF08003 		mov	r3, #128
 1853 0d56 7B63     		str	r3, [r7, #52]
 671:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1854              		.loc 1 671 0
 1855 0d58 4FF40073 		mov	r3, #512
 1856 0d5c BB63     		str	r3, [r7, #56]
 672:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1857              		.loc 1 672 0
 1858 0d5e 4FF40063 		mov	r3, #2048
 1859 0d62 FB63     		str	r3, [r7, #60]
 673:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1860              		.loc 1 673 0
 1861 0d64 4FF02003 		mov	r3, #32
 1862 0d68 3B64     		str	r3, [r7, #64]
 674:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1863              		.loc 1 674 0
 1864 0d6a 4FF40053 		mov	r3, #8192
 1865 0d6e 7B64     		str	r3, [r7, #68]
 675:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1866              		.loc 1 675 0
 1867 0d70 4FF00003 		mov	r3, #0
 1868 0d74 BB64     		str	r3, [r7, #72]
 676:../src/main.cpp **** 
 677:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1869              		.loc 1 677 0
 1870 0d76 07F12003 		add	r3, r7, #32
 1871 0d7a 4FF00800 		mov	r0, #8
 1872 0d7e C4F20200 		movt	r0, 16386
 1873 0d82 1946     		mov	r1, r3
 1874 0d84 FFF7FEFF 		bl	DMA_Init
 678:../src/main.cpp **** 
 679:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 680:../src/main.cpp **** 
 681:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1875              		.loc 1 681 0
 1876 0d88 4FF00B03 		mov	r3, #11
 1877 0d8c 87F84C30 		strb	r3, [r7, #76]
 682:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1878              		.loc 1 682 0
 1879 0d90 4FF00203 		mov	r3, #2
 1880 0d94 87F84D30 		strb	r3, [r7, #77]
 683:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1881              		.loc 1 683 0
 1882 0d98 4FF00003 		mov	r3, #0
 1883 0d9c 87F84E30 		strb	r3, [r7, #78]
 684:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1884              		.loc 1 684 0
 1885 0da0 4FF00103 		mov	r3, #1
 1886 0da4 87F84F30 		strb	r3, [r7, #79]
 685:../src/main.cpp **** 
 686:../src/main.cpp **** 	NVIC_Init(&nv);
 1887              		.loc 1 686 0
 1888 0da8 07F14C03 		add	r3, r7, #76
 1889 0dac 1846     		mov	r0, r3
 1890 0dae FFF7FEFF 		bl	NVIC_Init
 687:../src/main.cpp **** 
 688:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1891              		.loc 1 688 0
 1892 0db2 4FF00800 		mov	r0, #8
 1893 0db6 C4F20200 		movt	r0, 16386
 1894 0dba 4FF00201 		mov	r1, #2
 1895 0dbe 4FF00102 		mov	r2, #1
 1896 0dc2 FFF7FEFF 		bl	DMA_ITConfig
 689:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1897              		.loc 1 689 0
 1898 0dc6 4FF00800 		mov	r0, #8
 1899 0dca C4F20200 		movt	r0, 16386
 1900 0dce 4FF00101 		mov	r1, #1
 1901 0dd2 FFF7FEFF 		bl	DMA_Cmd
 690:../src/main.cpp **** 
 691:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1902              		.loc 1 691 0
 1903 0dd6 4FF0A040 		mov	r0, #1342177280
 1904 0dda 4FF00201 		mov	r1, #2
 1905 0dde FFF7FEFF 		bl	ADC_DMAConfig
 692:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1906              		.loc 1 692 0
 1907 0de2 4FF0A040 		mov	r0, #1342177280
 1908 0de6 4FF00101 		mov	r1, #1
 1909 0dea FFF7FEFF 		bl	ADC_DMACmd
 1910              	.LBE18:
 693:../src/main.cpp **** }
 1911              		.loc 1 693 0
 1912 0dee 07F17007 		add	r7, r7, #112
 1913 0df2 BD46     		mov	sp, r7
 1914 0df4 80BD     		pop	{r7, pc}
 1915              		.cfi_endproc
 1916              	.LFE121:
 1918 0df6 00BF     		.align	2
 1919              		.global	_Z13adc2_init_DMAv
 1920              		.thumb
 1921              		.thumb_func
 1923              	_Z13adc2_init_DMAv:
 1924              	.LFB122:
 694:../src/main.cpp **** 
 695:../src/main.cpp **** void adc2_init_DMA(void)
 696:../src/main.cpp **** {
 1925              		.loc 1 696 0
 1926              		.cfi_startproc
 1927              		@ args = 0, pretend = 0, frame = 112
 1928              		@ frame_needed = 1, uses_anonymous_args = 0
 1929 0df8 80B5     		push	{r7, lr}
 1930              	.LCFI33:
 1931              		.cfi_def_cfa_offset 8
 1932              		.cfi_offset 7, -8
 1933              		.cfi_offset 14, -4
 1934 0dfa 9CB0     		sub	sp, sp, #112
 1935              	.LCFI34:
 1936              		.cfi_def_cfa_offset 120
 1937 0dfc 00AF     		add	r7, sp, #0
 1938              	.LCFI35:
 1939              		.cfi_def_cfa_register 7
 1940              	.LBB19:
 697:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 698:../src/main.cpp **** 
 699:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 700:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 701:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 702:../src/main.cpp **** 
 703:../src/main.cpp **** 	/* Configure the ADC clock */
 704:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1941              		.loc 1 704 0
 1942 0dfe 4FF48870 		mov	r0, #272
 1943 0e02 FFF7FEFF 		bl	RCC_ADCCLKConfig
 705:../src/main.cpp **** 	/* Enable ADC2 clock */
 706:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1944              		.loc 1 706 0
 1945 0e06 4FF08050 		mov	r0, #268435456
 1946 0e0a 4FF00101 		mov	r1, #1
 1947 0e0e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 707:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 708:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1948              		.loc 1 708 0
 1949 0e12 4FF46020 		mov	r0, #917504
 1950 0e16 4FF00101 		mov	r1, #1
 1951 0e1a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 709:../src/main.cpp **** 
 710:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 711:../src/main.cpp **** 
 712:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1952              		.loc 1 712 0
 1953 0e1e 07F15003 		add	r3, r7, #80
 1954 0e22 1846     		mov	r0, r3
 1955 0e24 FFF7FEFF 		bl	GPIO_StructInit
 713:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1956              		.loc 1 713 0
 1957 0e28 4FF01003 		mov	r3, #16
 1958 0e2c 3B65     		str	r3, [r7, #80]
 714:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1959              		.loc 1 714 0
 1960 0e2e 4FF00303 		mov	r3, #3
 1961 0e32 87F85430 		strb	r3, [r7, #84]
 715:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1962              		.loc 1 715 0
 1963 0e36 4FF00003 		mov	r3, #0
 1964 0e3a 87F85730 		strb	r3, [r7, #87]
 716:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1965              		.loc 1 716 0
 1966 0e3e 4FF00303 		mov	r3, #3
 1967 0e42 87F85530 		strb	r3, [r7, #85]
 717:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1968              		.loc 1 717 0
 1969 0e46 07F15003 		add	r3, r7, #80
 1970 0e4a 4FF09040 		mov	r0, #1207959552
 1971 0e4e 1946     		mov	r1, r3
 1972 0e50 FFF7FEFF 		bl	GPIO_Init
 718:../src/main.cpp **** 
 719:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1973              		.loc 1 719 0
 1974 0e54 07F15003 		add	r3, r7, #80
 1975 0e58 1846     		mov	r0, r3
 1976 0e5a FFF7FEFF 		bl	GPIO_StructInit
 720:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1977              		.loc 1 720 0
 1978 0e5e 4FF00403 		mov	r3, #4
 1979 0e62 3B65     		str	r3, [r7, #80]
 721:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1980              		.loc 1 721 0
 1981 0e64 4FF00303 		mov	r3, #3
 1982 0e68 87F85430 		strb	r3, [r7, #84]
 722:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1983              		.loc 1 722 0
 1984 0e6c 4FF00003 		mov	r3, #0
 1985 0e70 87F85730 		strb	r3, [r7, #87]
 723:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1986              		.loc 1 723 0
 1987 0e74 07F15003 		add	r3, r7, #80
 1988 0e78 4FF48060 		mov	r0, #1024
 1989 0e7c C4F60000 		movt	r0, 18432
 1990 0e80 1946     		mov	r1, r3
 1991 0e82 FFF7FEFF 		bl	GPIO_Init
 724:../src/main.cpp **** 
 725:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1992              		.loc 1 725 0
 1993 0e86 07F15003 		add	r3, r7, #80
 1994 0e8a 1846     		mov	r0, r3
 1995 0e8c FFF7FEFF 		bl	GPIO_StructInit
 726:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 1996              		.loc 1 726 0
 1997 0e90 4FF03003 		mov	r3, #48
 1998 0e94 3B65     		str	r3, [r7, #80]
 727:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1999              		.loc 1 727 0
 2000 0e96 4FF00303 		mov	r3, #3
 2001 0e9a 87F85430 		strb	r3, [r7, #84]
 728:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2002              		.loc 1 728 0
 2003 0e9e 4FF00003 		mov	r3, #0
 2004 0ea2 87F85730 		strb	r3, [r7, #87]
 729:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 2005              		.loc 1 729 0
 2006 0ea6 07F15003 		add	r3, r7, #80
 2007 0eaa 4FF40060 		mov	r0, #2048
 2008 0eae C4F60000 		movt	r0, 18432
 2009 0eb2 1946     		mov	r1, r3
 2010 0eb4 FFF7FEFF 		bl	GPIO_Init
 730:../src/main.cpp **** 
 731:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2011              		.loc 1 731 0
 2012 0eb8 3B46     		mov	r3, r7
 2013 0eba 1846     		mov	r0, r3
 2014 0ebc FFF7FEFF 		bl	ADC_StructInit
 732:../src/main.cpp **** 
 733:../src/main.cpp **** 	/* Calibration procedure */
 734:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 2015              		.loc 1 734 0
 2016 0ec0 4FF48070 		mov	r0, #256
 2017 0ec4 C5F20000 		movt	r0, 20480
 2018 0ec8 4FF00101 		mov	r1, #1
 2019 0ecc FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 735:../src/main.cpp **** 
 736:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 737:../src/main.cpp **** 	int foo;
 738:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2020              		.loc 1 738 0
 2021 0ed0 4FF00003 		mov	r3, #0
 2022 0ed4 FB66     		str	r3, [r7, #108]
 2023 0ed6 07E0     		b	.L45
 2024              	.L46:
 739:../src/main.cpp **** 	{
 740:../src/main.cpp **** 	  ++foo;
 2025              		.loc 1 740 0 discriminator 2
 2026 0ed8 FB6E     		ldr	r3, [r7, #108]
 2027 0eda 03F10103 		add	r3, r3, #1
 2028 0ede FB66     		str	r3, [r7, #108]
 738:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2029              		.loc 1 738 0 discriminator 2
 2030 0ee0 FB6E     		ldr	r3, [r7, #108]
 2031 0ee2 03F10103 		add	r3, r3, #1
 2032 0ee6 FB66     		str	r3, [r7, #108]
 2033              	.L45:
 738:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2034              		.loc 1 738 0 is_stmt 0 discriminator 1
 2035 0ee8 FA6E     		ldr	r2, [r7, #108]
 2036 0eea 4FF6FF13 		movw	r3, #63999
 2037 0eee 9A42     		cmp	r2, r3
 2038 0ef0 CCBF     		ite	gt
 2039 0ef2 0023     		movgt	r3, #0
 2040 0ef4 0123     		movle	r3, #1
 2041 0ef6 DBB2     		uxtb	r3, r3
 2042 0ef8 002B     		cmp	r3, #0
 2043 0efa EDD1     		bne	.L46
 741:../src/main.cpp **** 	}
 742:../src/main.cpp **** 
 743:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 2044              		.loc 1 743 0 is_stmt 1
 2045 0efc 4FF48070 		mov	r0, #256
 2046 0f00 C5F20000 		movt	r0, 20480
 2047 0f04 4FF00001 		mov	r1, #0
 2048 0f08 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 744:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 2049              		.loc 1 744 0
 2050 0f0c 4FF48070 		mov	r0, #256
 2051 0f10 C5F20000 		movt	r0, 20480
 2052 0f14 FFF7FEFF 		bl	ADC_StartCalibration
 745:../src/main.cpp **** 
 746:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 2053              		.loc 1 746 0
 2054 0f18 00BF     		nop
 2055              	.L47:
 2056              		.loc 1 746 0 is_stmt 0 discriminator 1
 2057 0f1a 4FF48070 		mov	r0, #256
 2058 0f1e C5F20000 		movt	r0, 20480
 2059 0f22 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2060 0f26 0346     		mov	r3, r0
 2061 0f28 002B     		cmp	r3, #0
 2062 0f2a 0CBF     		ite	eq
 2063 0f2c 0023     		moveq	r3, #0
 2064 0f2e 0123     		movne	r3, #1
 2065 0f30 DBB2     		uxtb	r3, r3
 2066 0f32 002B     		cmp	r3, #0
 2067 0f34 F1D1     		bne	.L47
 747:../src/main.cpp **** 
 748:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2068              		.loc 1 748 0 is_stmt 1
 2069 0f36 4FF00003 		mov	r3, #0
 2070 0f3a BB65     		str	r3, [r7, #88]
 749:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2071              		.loc 1 749 0
 2072 0f3c 4FF00003 		mov	r3, #0
 2073 0f40 FB65     		str	r3, [r7, #92]
 750:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 2074              		.loc 1 750 0
 2075 0f42 4FF40043 		mov	r3, #32768
 2076 0f46 3B66     		str	r3, [r7, #96]
 751:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 2077              		.loc 1 751 0
 2078 0f48 4FF00203 		mov	r3, #2
 2079 0f4c 7B66     		str	r3, [r7, #100]
 752:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 2080              		.loc 1 752 0
 2081 0f4e 4FF00F03 		mov	r3, #15
 2082 0f52 87F86830 		strb	r3, [r7, #104]
 753:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 2083              		.loc 1 753 0
 2084 0f56 07F15803 		add	r3, r7, #88
 2085 0f5a 4FF48070 		mov	r0, #256
 2086 0f5e C5F20000 		movt	r0, 20480
 2087 0f62 1946     		mov	r1, r3
 2088 0f64 FFF7FEFF 		bl	ADC_CommonInit
 754:../src/main.cpp **** 
 755:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2089              		.loc 1 755 0
 2090 0f68 4FF40053 		mov	r3, #8192
 2091 0f6c 3B60     		str	r3, [r7, #0]
 756:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2092              		.loc 1 756 0
 2093 0f6e 4FF00003 		mov	r3, #0
 2094 0f72 7B60     		str	r3, [r7, #4]
 757:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2095              		.loc 1 757 0
 2096 0f74 4FF00003 		mov	r3, #0
 2097 0f78 BB60     		str	r3, [r7, #8]
 758:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2098              		.loc 1 758 0
 2099 0f7a 4FF00003 		mov	r3, #0
 2100 0f7e FB60     		str	r3, [r7, #12]
 759:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2101              		.loc 1 759 0
 2102 0f80 4FF00003 		mov	r3, #0
 2103 0f84 3B61     		str	r3, [r7, #16]
 760:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2104              		.loc 1 760 0
 2105 0f86 4FF00003 		mov	r3, #0
 2106 0f8a 7B61     		str	r3, [r7, #20]
 761:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2107              		.loc 1 761 0
 2108 0f8c 4FF00003 		mov	r3, #0
 2109 0f90 BB61     		str	r3, [r7, #24]
 762:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 2110              		.loc 1 762 0
 2111 0f92 4FF00403 		mov	r3, #4
 2112 0f96 3B77     		strb	r3, [r7, #28]
 763:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 2113              		.loc 1 763 0
 2114 0f98 3B46     		mov	r3, r7
 2115 0f9a 4FF48070 		mov	r0, #256
 2116 0f9e C5F20000 		movt	r0, 20480
 2117 0fa2 1946     		mov	r1, r3
 2118 0fa4 FFF7FEFF 		bl	ADC_Init
 764:../src/main.cpp **** 
 765:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 766:../src/main.cpp **** 
 767:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2119              		.loc 1 767 0
 2120 0fa8 4FF48070 		mov	r0, #256
 2121 0fac C5F20000 		movt	r0, 20480
 2122 0fb0 4FF00101 		mov	r1, #1
 2123 0fb4 4FF00102 		mov	r2, #1
 2124 0fb8 4FF00703 		mov	r3, #7
 2125 0fbc FFF7FEFF 		bl	ADC_RegularChannelConfig
 768:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2126              		.loc 1 768 0
 2127 0fc0 4FF48070 		mov	r0, #256
 2128 0fc4 C5F20000 		movt	r0, 20480
 2129 0fc8 4FF00501 		mov	r1, #5
 2130 0fcc 4FF00202 		mov	r2, #2
 2131 0fd0 4FF00703 		mov	r3, #7
 2132 0fd4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 769:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 2133              		.loc 1 769 0
 2134 0fd8 4FF48070 		mov	r0, #256
 2135 0fdc C5F20000 		movt	r0, 20480
 2136 0fe0 4FF00B01 		mov	r1, #11
 2137 0fe4 4FF00302 		mov	r2, #3
 2138 0fe8 4FF00703 		mov	r3, #7
 2139 0fec FFF7FEFF 		bl	ADC_RegularChannelConfig
 770:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 2140              		.loc 1 770 0
 2141 0ff0 4FF48070 		mov	r0, #256
 2142 0ff4 C5F20000 		movt	r0, 20480
 2143 0ff8 4FF00C01 		mov	r1, #12
 2144 0ffc 4FF00402 		mov	r2, #4
 2145 1000 4FF00703 		mov	r3, #7
 2146 1004 FFF7FEFF 		bl	ADC_RegularChannelConfig
 771:../src/main.cpp **** 
 772:../src/main.cpp **** 	/* Enable ADC2 */
 773:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 2147              		.loc 1 773 0
 2148 1008 4FF48070 		mov	r0, #256
 2149 100c C5F20000 		movt	r0, 20480
 2150 1010 4FF00101 		mov	r1, #1
 2151 1014 FFF7FEFF 		bl	ADC_Cmd
 774:../src/main.cpp **** 
 775:../src/main.cpp **** 	/* wait for ADRDY */
 776:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 2152              		.loc 1 776 0
 2153 1018 00BF     		nop
 2154              	.L48:
 2155              		.loc 1 776 0 is_stmt 0 discriminator 1
 2156 101a 4FF48070 		mov	r0, #256
 2157 101e C5F20000 		movt	r0, 20480
 2158 1022 4FF00101 		mov	r1, #1
 2159 1026 FFF7FEFF 		bl	ADC_GetFlagStatus
 2160 102a 0346     		mov	r3, r0
 2161 102c 002B     		cmp	r3, #0
 2162 102e 14BF     		ite	ne
 2163 1030 0023     		movne	r3, #0
 2164 1032 0123     		moveq	r3, #1
 2165 1034 DBB2     		uxtb	r3, r3
 2166 1036 002B     		cmp	r3, #0
 2167 1038 EFD1     		bne	.L48
 777:../src/main.cpp **** 
 778:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 779:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 2168              		.loc 1 779 0 is_stmt 1
 2169 103a 4FF48070 		mov	r0, #256
 2170 103e C5F20000 		movt	r0, 20480
 2171 1042 FFF7FEFF 		bl	ADC_StartConversion
 780:../src/main.cpp **** 
 781:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 2172              		.loc 1 781 0
 2173 1046 4FF00200 		mov	r0, #2
 2174 104a 4FF00101 		mov	r1, #1
 2175 104e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 782:../src/main.cpp **** 
 783:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 784:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 2176              		.loc 1 784 0
 2177 1052 07F12003 		add	r3, r7, #32
 2178 1056 1846     		mov	r0, r3
 2179 1058 FFF7FEFF 		bl	DMA_StructInit
 785:../src/main.cpp **** 
 786:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 2180              		.loc 1 786 0
 2181 105c 4FF48160 		mov	r0, #1032
 2182 1060 C4F20200 		movt	r0, 16386
 2183 1064 FFF7FEFF 		bl	DMA_DeInit
 787:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 2184              		.loc 1 787 0
 2185 1068 4FF4A073 		mov	r3, #320
 2186 106c C5F20003 		movt	r3, 20480
 2187 1070 3B62     		str	r3, [r7, #32]
 788:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 2188              		.loc 1 788 0
 2189 1072 40F20003 		movw	r3, #:lower16:adc2_data
 2190 1076 C0F20003 		movt	r3, #:upper16:adc2_data
 2191 107a 7B62     		str	r3, [r7, #36]
 789:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 2192              		.loc 1 789 0
 2193 107c 4FF00003 		mov	r3, #0
 2194 1080 BB62     		str	r3, [r7, #40]
 790:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 2195              		.loc 1 790 0
 2196 1082 4FF00403 		mov	r3, #4
 2197 1086 BB85     		strh	r3, [r7, #44]	@ movhi
 791:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 2198              		.loc 1 791 0
 2199 1088 4FF00003 		mov	r3, #0
 2200 108c 3B63     		str	r3, [r7, #48]
 792:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 2201              		.loc 1 792 0
 2202 108e 4FF08003 		mov	r3, #128
 2203 1092 7B63     		str	r3, [r7, #52]
 793:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 2204              		.loc 1 793 0
 2205 1094 4FF40073 		mov	r3, #512
 2206 1098 BB63     		str	r3, [r7, #56]
 794:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 2207              		.loc 1 794 0
 2208 109a 4FF40063 		mov	r3, #2048
 2209 109e FB63     		str	r3, [r7, #60]
 795:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 2210              		.loc 1 795 0
 2211 10a0 4FF02003 		mov	r3, #32
 2212 10a4 3B64     		str	r3, [r7, #64]
 796:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 2213              		.loc 1 796 0
 2214 10a6 4FF40053 		mov	r3, #8192
 2215 10aa 7B64     		str	r3, [r7, #68]
 797:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 2216              		.loc 1 797 0
 2217 10ac 4FF00003 		mov	r3, #0
 2218 10b0 BB64     		str	r3, [r7, #72]
 798:../src/main.cpp **** 
 799:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 2219              		.loc 1 799 0
 2220 10b2 07F12003 		add	r3, r7, #32
 2221 10b6 4FF48160 		mov	r0, #1032
 2222 10ba C4F20200 		movt	r0, 16386
 2223 10be 1946     		mov	r1, r3
 2224 10c0 FFF7FEFF 		bl	DMA_Init
 800:../src/main.cpp **** 
 801:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 802:../src/main.cpp **** 
 803:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 2225              		.loc 1 803 0
 2226 10c4 4FF03803 		mov	r3, #56
 2227 10c8 87F84C30 		strb	r3, [r7, #76]
 804:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2228              		.loc 1 804 0
 2229 10cc 4FF00203 		mov	r3, #2
 2230 10d0 87F84D30 		strb	r3, [r7, #77]
 805:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2231              		.loc 1 805 0
 2232 10d4 4FF00003 		mov	r3, #0
 2233 10d8 87F84E30 		strb	r3, [r7, #78]
 806:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2234              		.loc 1 806 0
 2235 10dc 4FF00103 		mov	r3, #1
 2236 10e0 87F84F30 		strb	r3, [r7, #79]
 807:../src/main.cpp **** 
 808:../src/main.cpp **** 	NVIC_Init(&nv);
 2237              		.loc 1 808 0
 2238 10e4 07F14C03 		add	r3, r7, #76
 2239 10e8 1846     		mov	r0, r3
 2240 10ea FFF7FEFF 		bl	NVIC_Init
 809:../src/main.cpp **** 
 810:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 2241              		.loc 1 810 0
 2242 10ee 4FF48160 		mov	r0, #1032
 2243 10f2 C4F20200 		movt	r0, 16386
 2244 10f6 4FF00201 		mov	r1, #2
 2245 10fa 4FF00102 		mov	r2, #1
 2246 10fe FFF7FEFF 		bl	DMA_ITConfig
 811:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 2247              		.loc 1 811 0
 2248 1102 4FF48160 		mov	r0, #1032
 2249 1106 C4F20200 		movt	r0, 16386
 2250 110a 4FF00101 		mov	r1, #1
 2251 110e FFF7FEFF 		bl	DMA_Cmd
 812:../src/main.cpp **** 
 813:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 2252              		.loc 1 813 0
 2253 1112 4FF48070 		mov	r0, #256
 2254 1116 C5F20000 		movt	r0, 20480
 2255 111a 4FF00201 		mov	r1, #2
 2256 111e FFF7FEFF 		bl	ADC_DMAConfig
 814:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 2257              		.loc 1 814 0
 2258 1122 4FF48070 		mov	r0, #256
 2259 1126 C5F20000 		movt	r0, 20480
 2260 112a 4FF00101 		mov	r1, #1
 2261 112e FFF7FEFF 		bl	ADC_DMACmd
 2262              	.LBE19:
 815:../src/main.cpp **** }
 2263              		.loc 1 815 0
 2264 1132 07F17007 		add	r7, r7, #112
 2265 1136 BD46     		mov	sp, r7
 2266 1138 80BD     		pop	{r7, pc}
 2267              		.cfi_endproc
 2268              	.LFE122:
 2270 113a 00BF     		.align	2
 2271              		.global	_Z21battery_watchdog_initv
 2272              		.thumb
 2273              		.thumb_func
 2275              	_Z21battery_watchdog_initv:
 2276              	.LFB123:
 816:../src/main.cpp **** 
 817:../src/main.cpp **** void battery_watchdog_init(void)
 818:../src/main.cpp **** {
 2277              		.loc 1 818 0
 2278              		.cfi_startproc
 2279              		@ args = 0, pretend = 0, frame = 72
 2280              		@ frame_needed = 1, uses_anonymous_args = 0
 2281 113c 80B5     		push	{r7, lr}
 2282              	.LCFI36:
 2283              		.cfi_def_cfa_offset 8
 2284              		.cfi_offset 7, -8
 2285              		.cfi_offset 14, -4
 2286 113e 92B0     		sub	sp, sp, #72
 2287              	.LCFI37:
 2288              		.cfi_def_cfa_offset 80
 2289 1140 00AF     		add	r7, sp, #0
 2290              	.LCFI38:
 2291              		.cfi_def_cfa_register 7
 2292              	.LBB20:
 819:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 820:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 821:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 822:../src/main.cpp **** 	/* Configure the ADC clock */
 823:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 2293              		.loc 1 823 0
 2294 1142 4FF45050 		mov	r0, #13312
 2295 1146 C1F20000 		movt	r0, 4096
 2296 114a FFF7FEFF 		bl	RCC_ADCCLKConfig
 824:../src/main.cpp **** 
 825:../src/main.cpp **** 	/* Enable ADC1 clock */
 826:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 2297              		.loc 1 826 0
 2298 114e 4FF00050 		mov	r0, #536870912
 2299 1152 4FF00101 		mov	r1, #1
 2300 1156 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 827:../src/main.cpp **** 	/* ADC Channel configuration */
 828:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 829:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 2301              		.loc 1 829 0
 2302 115a 4FF41010 		mov	r0, #2359296
 2303 115e 4FF00101 		mov	r1, #1
 2304 1162 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 830:../src/main.cpp **** 
 831:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 832:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2305              		.loc 1 832 0
 2306 1166 07F12803 		add	r3, r7, #40
 2307 116a 1846     		mov	r0, r3
 2308 116c FFF7FEFF 		bl	GPIO_StructInit
 833:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 2309              		.loc 1 833 0
 2310 1170 42F20203 		movw	r3, #8194
 2311 1174 BB62     		str	r3, [r7, #40]
 834:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2312              		.loc 1 834 0
 2313 1176 4FF00303 		mov	r3, #3
 2314 117a 87F82C30 		strb	r3, [r7, #44]
 835:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2315              		.loc 1 835 0
 2316 117e 4FF00003 		mov	r3, #0
 2317 1182 87F82F30 		strb	r3, [r7, #47]
 836:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2318              		.loc 1 836 0
 2319 1186 07F12803 		add	r3, r7, #40
 2320 118a 4FF48060 		mov	r0, #1024
 2321 118e C4F60000 		movt	r0, 18432
 2322 1192 1946     		mov	r1, r3
 2323 1194 FFF7FEFF 		bl	GPIO_Init
 837:../src/main.cpp **** /*
 838:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 839:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 840:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 841:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 842:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 843:../src/main.cpp **** */
 844:../src/main.cpp **** 
 845:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2324              		.loc 1 845 0
 2325 1198 07F10403 		add	r3, r7, #4
 2326 119c 1846     		mov	r0, r3
 2327 119e FFF7FEFF 		bl	ADC_StructInit
 846:../src/main.cpp **** 
 847:../src/main.cpp **** 	/* Calibration procedure */
 848:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 2328              		.loc 1 848 0
 2329 11a2 4FF48060 		mov	r0, #1024
 2330 11a6 C5F20000 		movt	r0, 20480
 2331 11aa 4FF00101 		mov	r1, #1
 2332 11ae FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 849:../src/main.cpp **** 
 850:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 851:../src/main.cpp **** 	int foo;
 852:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2333              		.loc 1 852 0
 2334 11b2 4FF00003 		mov	r3, #0
 2335 11b6 7B64     		str	r3, [r7, #68]
 2336 11b8 07E0     		b	.L50
 2337              	.L51:
 853:../src/main.cpp **** 	{
 854:../src/main.cpp **** 	  ++foo;
 2338              		.loc 1 854 0 discriminator 2
 2339 11ba 7B6C     		ldr	r3, [r7, #68]
 2340 11bc 03F10103 		add	r3, r3, #1
 2341 11c0 7B64     		str	r3, [r7, #68]
 852:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2342              		.loc 1 852 0 discriminator 2
 2343 11c2 7B6C     		ldr	r3, [r7, #68]
 2344 11c4 03F10103 		add	r3, r3, #1
 2345 11c8 7B64     		str	r3, [r7, #68]
 2346              	.L50:
 852:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2347              		.loc 1 852 0 is_stmt 0 discriminator 1
 2348 11ca 7A6C     		ldr	r2, [r7, #68]
 2349 11cc 47F6FF43 		movw	r3, #31999
 2350 11d0 9A42     		cmp	r2, r3
 2351 11d2 CCBF     		ite	gt
 2352 11d4 0023     		movgt	r3, #0
 2353 11d6 0123     		movle	r3, #1
 2354 11d8 DBB2     		uxtb	r3, r3
 2355 11da 002B     		cmp	r3, #0
 2356 11dc EDD1     		bne	.L51
 855:../src/main.cpp **** 	}
 856:../src/main.cpp **** 
 857:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 2357              		.loc 1 857 0 is_stmt 1
 2358 11de 4FF48060 		mov	r0, #1024
 2359 11e2 C5F20000 		movt	r0, 20480
 2360 11e6 4FF00001 		mov	r1, #0
 2361 11ea FFF7FEFF 		bl	ADC_SelectCalibrationMode
 858:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 2362              		.loc 1 858 0
 2363 11ee 4FF48060 		mov	r0, #1024
 2364 11f2 C5F20000 		movt	r0, 20480
 2365 11f6 FFF7FEFF 		bl	ADC_StartCalibration
 859:../src/main.cpp **** 
 860:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 2366              		.loc 1 860 0
 2367 11fa 00BF     		nop
 2368              	.L52:
 2369              		.loc 1 860 0 is_stmt 0 discriminator 1
 2370 11fc 4FF48060 		mov	r0, #1024
 2371 1200 C5F20000 		movt	r0, 20480
 2372 1204 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2373 1208 0346     		mov	r3, r0
 2374 120a 002B     		cmp	r3, #0
 2375 120c 0CBF     		ite	eq
 2376 120e 0023     		moveq	r3, #0
 2377 1210 0123     		movne	r3, #1
 2378 1212 DBB2     		uxtb	r3, r3
 2379 1214 002B     		cmp	r3, #0
 2380 1216 F1D1     		bne	.L52
 861:../src/main.cpp **** 
 862:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2381              		.loc 1 862 0 is_stmt 1
 2382 1218 4FF00003 		mov	r3, #0
 2383 121c 3B63     		str	r3, [r7, #48]
 863:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 2384              		.loc 1 863 0
 2385 121e 4FF44033 		mov	r3, #196608
 2386 1222 7B63     		str	r3, [r7, #52]
 864:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2387              		.loc 1 864 0
 2388 1224 4FF00003 		mov	r3, #0
 2389 1228 BB63     		str	r3, [r7, #56]
 865:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2390              		.loc 1 865 0
 2391 122a 4FF00003 		mov	r3, #0
 2392 122e FB63     		str	r3, [r7, #60]
 866:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2393              		.loc 1 866 0
 2394 1230 4FF00003 		mov	r3, #0
 2395 1234 87F84030 		strb	r3, [r7, #64]
 867:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 2396              		.loc 1 867 0
 2397 1238 07F13003 		add	r3, r7, #48
 2398 123c 4FF48060 		mov	r0, #1024
 2399 1240 C5F20000 		movt	r0, 20480
 2400 1244 1946     		mov	r1, r3
 2401 1246 FFF7FEFF 		bl	ADC_CommonInit
 868:../src/main.cpp **** 
 869:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2402              		.loc 1 869 0
 2403 124a 4FF40053 		mov	r3, #8192
 2404 124e 7B60     		str	r3, [r7, #4]
 870:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2405              		.loc 1 870 0
 2406 1250 4FF00003 		mov	r3, #0
 2407 1254 BB60     		str	r3, [r7, #8]
 871:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2408              		.loc 1 871 0
 2409 1256 4FF00003 		mov	r3, #0
 2410 125a FB60     		str	r3, [r7, #12]
 872:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2411              		.loc 1 872 0
 2412 125c 4FF00003 		mov	r3, #0
 2413 1260 3B61     		str	r3, [r7, #16]
 873:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2414              		.loc 1 873 0
 2415 1262 4FF00003 		mov	r3, #0
 2416 1266 7B61     		str	r3, [r7, #20]
 874:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2417              		.loc 1 874 0
 2418 1268 4FF00003 		mov	r3, #0
 2419 126c BB61     		str	r3, [r7, #24]
 875:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2420              		.loc 1 875 0
 2421 126e 4FF00003 		mov	r3, #0
 2422 1272 FB61     		str	r3, [r7, #28]
 876:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2423              		.loc 1 876 0
 2424 1274 4FF00203 		mov	r3, #2
 2425 1278 87F82030 		strb	r3, [r7, #32]
 877:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 2426              		.loc 1 877 0
 2427 127c 07F10403 		add	r3, r7, #4
 2428 1280 4FF48060 		mov	r0, #1024
 2429 1284 C5F20000 		movt	r0, 20480
 2430 1288 1946     		mov	r1, r3
 2431 128a FFF7FEFF 		bl	ADC_Init
 878:../src/main.cpp **** 
 879:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 880:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2432              		.loc 1 880 0
 2433 128e 4FF48060 		mov	r0, #1024
 2434 1292 C5F20000 		movt	r0, 20480
 2435 1296 4FF00101 		mov	r1, #1
 2436 129a 4FF00102 		mov	r2, #1
 2437 129e 4FF00703 		mov	r3, #7
 2438 12a2 FFF7FEFF 		bl	ADC_RegularChannelConfig
 881:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2439              		.loc 1 881 0
 2440 12a6 4FF48060 		mov	r0, #1024
 2441 12aa C5F20000 		movt	r0, 20480
 2442 12ae 4FF00501 		mov	r1, #5
 2443 12b2 4FF00202 		mov	r2, #2
 2444 12b6 4FF00703 		mov	r3, #7
 2445 12ba FFF7FEFF 		bl	ADC_RegularChannelConfig
 882:../src/main.cpp **** 
 883:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 2446              		.loc 1 883 0
 2447 12be 4FF48060 		mov	r0, #1024
 2448 12c2 C5F20000 		movt	r0, 20480
 2449 12c6 4FF00101 		mov	r1, #1
 2450 12ca FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 884:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 2451              		.loc 1 884 0
 2452 12ce 4FF48060 		mov	r0, #1024
 2453 12d2 C5F20000 		movt	r0, 20480
 2454 12d6 4FF00501 		mov	r1, #5
 2455 12da FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 885:../src/main.cpp **** 
 886:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 887:../src/main.cpp **** 
 888:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 2456              		.loc 1 888 0
 2457 12de 4FF48060 		mov	r0, #1024
 2458 12e2 C5F20000 		movt	r0, 20480
 2459 12e6 4FF40061 		mov	r1, #2048
 2460 12ea 4FF00A02 		mov	r2, #10
 2461 12ee FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 889:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 2462              		.loc 1 889 0
 2463 12f2 4FF48060 		mov	r0, #1024
 2464 12f6 C5F20000 		movt	r0, 20480
 2465 12fa 4FF08001 		mov	r1, #128
 2466 12fe 4FF00002 		mov	r2, #0
 2467 1302 FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 890:../src/main.cpp **** 
 891:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 2468              		.loc 1 891 0
 2469 1306 4FF48060 		mov	r0, #1024
 2470 130a C5F20000 		movt	r0, 20480
 2471 130e 4FF44001 		mov	r1, #12582912
 2472 1312 FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 892:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 893:../src/main.cpp **** 
 894:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 895:../src/main.cpp **** 
 896:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 897:../src/main.cpp **** 
 898:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 2473              		.loc 1 898 0
 2474 1316 4FF02F03 		mov	r3, #47
 2475 131a 87F82430 		strb	r3, [r7, #36]
 899:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 2476              		.loc 1 899 0
 2477 131e 4FF00003 		mov	r3, #0
 2478 1322 87F82530 		strb	r3, [r7, #37]
 900:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2479              		.loc 1 900 0
 2480 1326 4FF00003 		mov	r3, #0
 2481 132a 87F82630 		strb	r3, [r7, #38]
 901:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2482              		.loc 1 901 0
 2483 132e 4FF00103 		mov	r3, #1
 2484 1332 87F82730 		strb	r3, [r7, #39]
 902:../src/main.cpp **** 
 903:../src/main.cpp **** 	NVIC_Init(&nv);
 2485              		.loc 1 903 0
 2486 1336 07F12403 		add	r3, r7, #36
 2487 133a 1846     		mov	r0, r3
 2488 133c FFF7FEFF 		bl	NVIC_Init
 904:../src/main.cpp **** 
 905:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 906:../src/main.cpp **** 
 907:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 2489              		.loc 1 907 0
 2490 1340 4FF48060 		mov	r0, #1024
 2491 1344 C5F20000 		movt	r0, 20480
 2492 1348 4FF4C071 		mov	r1, #384
 2493 134c 4FF00102 		mov	r2, #1
 2494 1350 FFF7FEFF 		bl	ADC_ITConfig
 908:../src/main.cpp **** 
 909:../src/main.cpp **** 	/* Enable ADC3 */
 910:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 2495              		.loc 1 910 0
 2496 1354 4FF48060 		mov	r0, #1024
 2497 1358 C5F20000 		movt	r0, 20480
 2498 135c 4FF00101 		mov	r1, #1
 2499 1360 FFF7FEFF 		bl	ADC_Cmd
 911:../src/main.cpp **** 
 912:../src/main.cpp **** 	/* wait for ADRDY */
 913:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 2500              		.loc 1 913 0
 2501 1364 00BF     		nop
 2502              	.L53:
 2503              		.loc 1 913 0 is_stmt 0 discriminator 1
 2504 1366 4FF48060 		mov	r0, #1024
 2505 136a C5F20000 		movt	r0, 20480
 2506 136e 4FF00101 		mov	r1, #1
 2507 1372 FFF7FEFF 		bl	ADC_GetFlagStatus
 2508 1376 0346     		mov	r3, r0
 2509 1378 002B     		cmp	r3, #0
 2510 137a 14BF     		ite	ne
 2511 137c 0023     		movne	r3, #0
 2512 137e 0123     		moveq	r3, #1
 2513 1380 DBB2     		uxtb	r3, r3
 2514 1382 002B     		cmp	r3, #0
 2515 1384 EFD1     		bne	.L53
 914:../src/main.cpp **** 
 915:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 916:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 2516              		.loc 1 916 0 is_stmt 1
 2517 1386 4FF48060 		mov	r0, #1024
 2518 138a C5F20000 		movt	r0, 20480
 2519 138e FFF7FEFF 		bl	ADC_StartConversion
 2520              	.LBE20:
 917:../src/main.cpp **** }
 2521              		.loc 1 917 0
 2522 1392 07F14807 		add	r7, r7, #72
 2523 1396 BD46     		mov	sp, r7
 2524 1398 80BD     		pop	{r7, pc}
 2525              		.cfi_endproc
 2526              	.LFE123:
 2528 139a 00BF     		.align	2
 2529              		.global	_Z9adc1_initv
 2530              		.thumb
 2531              		.thumb_func
 2533              	_Z9adc1_initv:
 2534              	.LFB124:
 918:../src/main.cpp **** 
 919:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 920:../src/main.cpp ****  * @Args: Nothing
 921:../src/main.cpp ****  * @Return Val: Nothing
 922:../src/main.cpp ****  */
 923:../src/main.cpp **** 
 924:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 925:../src/main.cpp **** {
 2535              		.loc 1 925 0
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 72
 2538              		@ frame_needed = 1, uses_anonymous_args = 0
 2539 139c 80B5     		push	{r7, lr}
 2540              	.LCFI39:
 2541              		.cfi_def_cfa_offset 8
 2542              		.cfi_offset 7, -8
 2543              		.cfi_offset 14, -4
 2544 139e 92B0     		sub	sp, sp, #72
 2545              	.LCFI40:
 2546              		.cfi_def_cfa_offset 80
 2547 13a0 00AF     		add	r7, sp, #0
 2548              	.LCFI41:
 2549              		.cfi_def_cfa_register 7
 2550              	.LBB21:
 926:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 927:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 928:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 929:../src/main.cpp **** 	/* Configure the ADC clock */
 930:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2551              		.loc 1 930 0
 2552 13a2 4FF48870 		mov	r0, #272
 2553 13a6 FFF7FEFF 		bl	RCC_ADCCLKConfig
 931:../src/main.cpp **** 
 932:../src/main.cpp **** 	/* Enable ADC1 clock */
 933:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2554              		.loc 1 933 0
 2555 13aa 4FF08050 		mov	r0, #268435456
 2556 13ae 4FF00101 		mov	r1, #1
 2557 13b2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 934:../src/main.cpp **** 	/* ADC Channel configuration */
 935:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 936:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2558              		.loc 1 936 0
 2559 13b6 4FF40030 		mov	r0, #131072
 2560 13ba 4FF00101 		mov	r1, #1
 2561 13be FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 937:../src/main.cpp **** 
 938:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 939:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2562              		.loc 1 939 0
 2563 13c2 4FF00403 		mov	r3, #4
 2564 13c6 BB62     		str	r3, [r7, #40]
 940:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2565              		.loc 1 940 0
 2566 13c8 4FF00303 		mov	r3, #3
 2567 13cc 87F82C30 		strb	r3, [r7, #44]
 941:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2568              		.loc 1 941 0
 2569 13d0 4FF00003 		mov	r3, #0
 2570 13d4 87F82F30 		strb	r3, [r7, #47]
 942:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2571              		.loc 1 942 0
 2572 13d8 07F12803 		add	r3, r7, #40
 2573 13dc 4FF09040 		mov	r0, #1207959552
 2574 13e0 1946     		mov	r1, r3
 2575 13e2 FFF7FEFF 		bl	GPIO_Init
 943:../src/main.cpp **** 
 944:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2576              		.loc 1 944 0
 2577 13e6 07F10403 		add	r3, r7, #4
 2578 13ea 1846     		mov	r0, r3
 2579 13ec FFF7FEFF 		bl	ADC_StructInit
 945:../src/main.cpp **** 
 946:../src/main.cpp **** 	/* Calibration procedure */
 947:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2580              		.loc 1 947 0
 2581 13f0 4FF0A040 		mov	r0, #1342177280
 2582 13f4 4FF00101 		mov	r1, #1
 2583 13f8 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 948:../src/main.cpp **** 
 949:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 950:../src/main.cpp **** 	int foo;
 951:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2584              		.loc 1 951 0
 2585 13fc 4FF00003 		mov	r3, #0
 2586 1400 7B64     		str	r3, [r7, #68]
 2587 1402 07E0     		b	.L55
 2588              	.L56:
 952:../src/main.cpp **** 	{
 953:../src/main.cpp **** 	  ++foo;
 2589              		.loc 1 953 0 discriminator 2
 2590 1404 7B6C     		ldr	r3, [r7, #68]
 2591 1406 03F10103 		add	r3, r3, #1
 2592 140a 7B64     		str	r3, [r7, #68]
 951:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2593              		.loc 1 951 0 discriminator 2
 2594 140c 7B6C     		ldr	r3, [r7, #68]
 2595 140e 03F10103 		add	r3, r3, #1
 2596 1412 7B64     		str	r3, [r7, #68]
 2597              	.L55:
 951:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2598              		.loc 1 951 0 is_stmt 0 discriminator 1
 2599 1414 7A6C     		ldr	r2, [r7, #68]
 2600 1416 47F6FF43 		movw	r3, #31999
 2601 141a 9A42     		cmp	r2, r3
 2602 141c CCBF     		ite	gt
 2603 141e 0023     		movgt	r3, #0
 2604 1420 0123     		movle	r3, #1
 2605 1422 DBB2     		uxtb	r3, r3
 2606 1424 002B     		cmp	r3, #0
 2607 1426 EDD1     		bne	.L56
 954:../src/main.cpp **** 	}
 955:../src/main.cpp **** 
 956:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2608              		.loc 1 956 0 is_stmt 1
 2609 1428 4FF0A040 		mov	r0, #1342177280
 2610 142c 4FF00001 		mov	r1, #0
 2611 1430 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 957:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2612              		.loc 1 957 0
 2613 1434 4FF0A040 		mov	r0, #1342177280
 2614 1438 FFF7FEFF 		bl	ADC_StartCalibration
 958:../src/main.cpp **** 
 959:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2615              		.loc 1 959 0
 2616 143c 00BF     		nop
 2617              	.L57:
 2618              		.loc 1 959 0 is_stmt 0 discriminator 1
 2619 143e 4FF0A040 		mov	r0, #1342177280
 2620 1442 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2621 1446 0346     		mov	r3, r0
 2622 1448 002B     		cmp	r3, #0
 2623 144a 0CBF     		ite	eq
 2624 144c 0023     		moveq	r3, #0
 2625 144e 0123     		movne	r3, #1
 2626 1450 DBB2     		uxtb	r3, r3
 2627 1452 002B     		cmp	r3, #0
 2628 1454 F3D1     		bne	.L57
 960:../src/main.cpp **** 
 961:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2629              		.loc 1 961 0 is_stmt 1
 2630 1456 4FF00003 		mov	r3, #0
 2631 145a 3B63     		str	r3, [r7, #48]
 962:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2632              		.loc 1 962 0
 2633 145c 4FF00003 		mov	r3, #0
 2634 1460 7B63     		str	r3, [r7, #52]
 963:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2635              		.loc 1 963 0
 2636 1462 4FF00003 		mov	r3, #0
 2637 1466 BB63     		str	r3, [r7, #56]
 964:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2638              		.loc 1 964 0
 2639 1468 4FF00003 		mov	r3, #0
 2640 146c FB63     		str	r3, [r7, #60]
 965:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2641              		.loc 1 965 0
 2642 146e 4FF00003 		mov	r3, #0
 2643 1472 87F84030 		strb	r3, [r7, #64]
 966:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2644              		.loc 1 966 0
 2645 1476 07F13003 		add	r3, r7, #48
 2646 147a 4FF0A040 		mov	r0, #1342177280
 2647 147e 1946     		mov	r1, r3
 2648 1480 FFF7FEFF 		bl	ADC_CommonInit
 967:../src/main.cpp **** 
 968:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2649              		.loc 1 968 0
 2650 1484 4FF40053 		mov	r3, #8192
 2651 1488 7B60     		str	r3, [r7, #4]
 969:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2652              		.loc 1 969 0
 2653 148a 4FF00003 		mov	r3, #0
 2654 148e BB60     		str	r3, [r7, #8]
 970:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2655              		.loc 1 970 0
 2656 1490 4FF00003 		mov	r3, #0
 2657 1494 FB60     		str	r3, [r7, #12]
 971:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2658              		.loc 1 971 0
 2659 1496 4FF00003 		mov	r3, #0
 2660 149a 3B61     		str	r3, [r7, #16]
 972:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2661              		.loc 1 972 0
 2662 149c 4FF00003 		mov	r3, #0
 2663 14a0 7B61     		str	r3, [r7, #20]
 973:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2664              		.loc 1 973 0
 2665 14a2 4FF00003 		mov	r3, #0
 2666 14a6 BB61     		str	r3, [r7, #24]
 974:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2667              		.loc 1 974 0
 2668 14a8 4FF00003 		mov	r3, #0
 2669 14ac FB61     		str	r3, [r7, #28]
 975:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2670              		.loc 1 975 0
 2671 14ae 4FF00103 		mov	r3, #1
 2672 14b2 87F82030 		strb	r3, [r7, #32]
 976:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2673              		.loc 1 976 0
 2674 14b6 07F10403 		add	r3, r7, #4
 2675 14ba 4FF0A040 		mov	r0, #1342177280
 2676 14be 1946     		mov	r1, r3
 2677 14c0 FFF7FEFF 		bl	ADC_Init
 977:../src/main.cpp **** 
 978:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 979:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2678              		.loc 1 979 0
 2679 14c4 4FF0A040 		mov	r0, #1342177280
 2680 14c8 4FF00301 		mov	r1, #3
 2681 14cc 4FF00102 		mov	r2, #1
 2682 14d0 4FF00703 		mov	r3, #7
 2683 14d4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 980:../src/main.cpp **** 
 981:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 982:../src/main.cpp **** 
 983:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 984:../src/main.cpp **** 
 985:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2684              		.loc 1 985 0
 2685 14d8 4FF01203 		mov	r3, #18
 2686 14dc 87F82430 		strb	r3, [r7, #36]
 986:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2687              		.loc 1 986 0
 2688 14e0 4FF00203 		mov	r3, #2
 2689 14e4 87F82530 		strb	r3, [r7, #37]
 987:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2690              		.loc 1 987 0
 2691 14e8 4FF00003 		mov	r3, #0
 2692 14ec 87F82630 		strb	r3, [r7, #38]
 988:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2693              		.loc 1 988 0
 2694 14f0 4FF00103 		mov	r3, #1
 2695 14f4 87F82730 		strb	r3, [r7, #39]
 989:../src/main.cpp **** 
 990:../src/main.cpp **** 	NVIC_Init(&nv);
 2696              		.loc 1 990 0
 2697 14f8 07F12403 		add	r3, r7, #36
 2698 14fc 1846     		mov	r0, r3
 2699 14fe FFF7FEFF 		bl	NVIC_Init
 991:../src/main.cpp **** 
 992:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 993:../src/main.cpp **** 
 994:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2700              		.loc 1 994 0
 2701 1502 4FF0A040 		mov	r0, #1342177280
 2702 1506 4FF00401 		mov	r1, #4
 2703 150a 4FF00102 		mov	r2, #1
 2704 150e FFF7FEFF 		bl	ADC_ITConfig
 995:../src/main.cpp **** 
 996:../src/main.cpp **** 	/* Enable ADC1 */
 997:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2705              		.loc 1 997 0
 2706 1512 4FF0A040 		mov	r0, #1342177280
 2707 1516 4FF00101 		mov	r1, #1
 2708 151a FFF7FEFF 		bl	ADC_Cmd
 998:../src/main.cpp **** 
 999:../src/main.cpp **** 	/* wait for ADRDY */
1000:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2709              		.loc 1 1000 0
 2710 151e 00BF     		nop
 2711              	.L58:
 2712              		.loc 1 1000 0 is_stmt 0 discriminator 1
 2713 1520 4FF0A040 		mov	r0, #1342177280
 2714 1524 4FF00101 		mov	r1, #1
 2715 1528 FFF7FEFF 		bl	ADC_GetFlagStatus
 2716 152c 0346     		mov	r3, r0
 2717 152e 002B     		cmp	r3, #0
 2718 1530 14BF     		ite	ne
 2719 1532 0023     		movne	r3, #0
 2720 1534 0123     		moveq	r3, #1
 2721 1536 DBB2     		uxtb	r3, r3
 2722 1538 002B     		cmp	r3, #0
 2723 153a F1D1     		bne	.L58
1001:../src/main.cpp **** 
1002:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
1003:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2724              		.loc 1 1003 0 is_stmt 1
 2725 153c 4FF0A040 		mov	r0, #1342177280
 2726 1540 FFF7FEFF 		bl	ADC_StartConversion
 2727              	.LBE21:
1004:../src/main.cpp **** }
 2728              		.loc 1 1004 0
 2729 1544 07F14807 		add	r7, r7, #72
 2730 1548 BD46     		mov	sp, r7
 2731 154a 80BD     		pop	{r7, pc}
 2732              		.cfi_endproc
 2733              	.LFE124:
 2735              	.Letext0:
 2736              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2737              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2738              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 2739              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 2740              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 2741              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 2742              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 2743              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 2744              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 2745              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 2746              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/ccMmRAjc.s:24     .bss:00000000 led_iter
     /tmp/ccMmRAjc.s:21     .bss:00000000 $d
     /tmp/ccMmRAjc.s:31     .data:00000000 led_matrix
     /tmp/ccMmRAjc.s:28     .data:00000000 $d
     /tmp/ccMmRAjc.s:44     .bss:00000004 left_enc
     /tmp/ccMmRAjc.s:50     .bss:0000002c right_enc
     /tmp/ccMmRAjc.s:56     .bss:00000054 gyro_angle_x
     /tmp/ccMmRAjc.s:62     .bss:00000058 gyro_bias_x
     /tmp/ccMmRAjc.s:68     .bss:0000005c adcval
     /tmp/ccMmRAjc.s:74     .bss:00000060 adcData
     /tmp/ccMmRAjc.s:80     .bss:00000068 new_data
     /tmp/ccMmRAjc.s:86     .bss:0000006c adc2_data
     /tmp/ccMmRAjc.s:91     .bss:0000007c adc2_new_data
     /tmp/ccMmRAjc.s:96     .bss:0000007d adc3_awd1
     /tmp/ccMmRAjc.s:101    .bss:0000007e adc3_awd2
     /tmp/ccMmRAjc.s:107    .bss:00000080 count
     /tmp/ccMmRAjc.s:113    .bss:00000084 stage
     /tmp/ccMmRAjc.s:119    .bss:00000088 drive_cmd
     /tmp/ccMmRAjc.s:125    .bss:0000008c err
     /tmp/ccMmRAjc.s:131    .bss:00000090 last_err
     /tmp/ccMmRAjc.s:137    .bss:00000094 diff_err
     /tmp/ccMmRAjc.s:143    .bss:00000098 rt
     /tmp/ccMmRAjc.s:149    .bss:0000009c d_front
     /tmp/ccMmRAjc.s:155    .bss:000000a0 integral
     /tmp/ccMmRAjc.s:161    .bss:000000a4 left
     /tmp/ccMmRAjc.s:167    .bss:000000a8 right
     /tmp/ccMmRAjc.s:173    .bss:000000ac state
     /tmp/ccMmRAjc.s:176    .rodata:00000000 $d
     /tmp/ccMmRAjc.s:177    .rodata:00000000 .LC0
     /tmp/ccMmRAjc.s:180    .text:00000000 $t
     /tmp/ccMmRAjc.s:185    .text:00000000 main
     /tmp/ccMmRAjc.s:580    .text:00000354 _Z24trinity2013_waitForStartv
     /tmp/ccMmRAjc.s:982    .text:00000654 _Z15brake_pins_initv
     /tmp/ccMmRAjc.s:1639   .text:00000b84 _Z13adc1_init_DMAv
     /tmp/ccMmRAjc.s:1923   .text:00000df8 _Z13adc2_init_DMAv
     /tmp/ccMmRAjc.s:1054   .text:000006cc _Z13ping_pin_initv
     /tmp/ccMmRAjc.s:1139   .text:0000075c _Z20timer2_timebase_initv
     /tmp/ccMmRAjc.s:825    .text:00000558 _Z19imu_update_ISR_initv
     /tmp/ccMmRAjc.s:1198   .text:000007b0 _Z9comp_initv
     /tmp/ccMmRAjc.s:569    .text:0000034c $d
     /tmp/ccMmRAjc.s:575    .text:00000354 $t
     /tmp/ccMmRAjc.s:660    .text:000003d4 _Z11IR_distancei
     /tmp/ccMmRAjc.s:809    .text:00000538 $d
     /tmp/ccMmRAjc.s:820    .text:00000558 $t
     /tmp/ccMmRAjc.s:1548   .text:00000afc _Z14calc_gyro_biasv
     /tmp/ccMmRAjc.s:942    .rodata:00000010 .LC1
     /tmp/ccMmRAjc.s:951    .text:0000063c L3GD20_TIMEOUT_UserCallback
     /tmp/ccMmRAjc.s:1630   .text:00000b80 $d
     /tmp/ccMmRAjc.s:1634   .text:00000b84 $t
     /tmp/ccMmRAjc.s:2275   .text:0000113c _Z21battery_watchdog_initv
     /tmp/ccMmRAjc.s:2533   .text:0000139c _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.bee3b9d0a2c217fdd5fb4ac309fc4a67
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z19LED_MATRIX_ISR_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z13pwm_out3_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
printf
_Z11pwm1_outputf
_Z11pwm2_outputf
_Z11pwm3_outputf
RCC_AHBPeriphClockCmd
GPIO_DeInit
GPIO_Init
GPIO_ReadInputDataBit
__aeabi_f2d
__aeabi_d2f
pow
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
GPIO_StructInit
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
