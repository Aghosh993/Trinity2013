   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	led_iter
  20              		.bss
  21              		.align	2
  24              	led_iter:
  25 0000 00000000 		.space	4
  26              		.global	led_matrix
  27              		.data
  28              		.align	2
  31              	led_matrix:
  32 0000 00020000 		.word	512
  33 0004 00010000 		.word	256
  34 0008 00800000 		.word	32768
  35 000c 00200000 		.word	8192
  36 0010 00100000 		.word	4096
  37 0014 00080000 		.word	2048
  38 0018 00040000 		.word	1024
  39              		.global	left_enc
  40              		.bss
  41              		.align	2
  44              	left_enc:
  45 0004 00000000 		.space	40
  45      00000000 
  45      00000000 
  45      00000000 
  45      00000000 
  46              		.global	right_enc
  47              		.align	2
  50              	right_enc:
  51 002c 00000000 		.space	40
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	gyro_angle_x
  53              		.align	2
  56              	gyro_angle_x:
  57 0054 00000000 		.space	4
  58              		.global	gyro_bias_x
  59              		.align	2
  62              	gyro_bias_x:
  63 0058 00000000 		.space	4
  64              		.global	adcval
  65              		.align	2
  68              	adcval:
  69 005c 00000000 		.space	4
  70              		.global	adcData
  71              		.align	2
  74              	adcData:
  75 0060 00000000 		.space	8
  75      00000000 
  76              		.global	new_data
  77              		.align	2
  80              	new_data:
  81 0068 00000000 		.space	4
  82              		.global	adc2_data
  83              		.align	2
  86              	adc2_data:
  87 006c 00000000 		.space	16
  87      00000000 
  87      00000000 
  87      00000000 
  88              		.global	adc2_new_data
  91              	adc2_new_data:
  92 007c 00       		.space	1
  93              		.global	adc3_awd1
  96              	adc3_awd1:
  97 007d 00       		.space	1
  98              		.global	adc3_awd2
 101              	adc3_awd2:
 102 007e 00       		.space	1
 103              		.global	count
 104 007f 00       		.align	2
 107              	count:
 108 0080 00000000 		.space	4
 109              		.global	stage
 110              		.align	2
 113              	stage:
 114 0084 00000000 		.space	4
 115              		.global	drive_cmd
 116              		.align	2
 119              	drive_cmd:
 120 0088 00000000 		.space	4
 121              		.global	err
 122              		.align	2
 125              	err:
 126 008c 00000000 		.space	4
 127              		.global	last_err
 128              		.align	2
 131              	last_err:
 132 0090 00000000 		.space	4
 133              		.global	diff_err
 134              		.align	2
 137              	diff_err:
 138 0094 00000000 		.space	4
 139              		.global	rt
 140              		.align	2
 143              	rt:
 144 0098 00000000 		.space	4
 145              		.global	d_front
 146              		.align	2
 149              	d_front:
 150 009c 00000000 		.space	4
 151              		.global	integral
 152              		.align	2
 155              	integral:
 156 00a0 00000000 		.space	4
 157              		.global	left
 158              		.align	2
 161              	left:
 162 00a4 00000000 		.space	4
 163              		.global	right
 164              		.align	2
 167              	right:
 168 00a8 00000000 		.space	4
 169              		.global	state
 170              		.align	2
 173              	state:
 174 00ac 00000000 		.space	4
 175              		.global	match_time_counter
 176              		.align	2
 179              	match_time_counter:
 180 00b0 00000000 		.space	4
 181              		.global	t_firefight_start
 182              		.align	2
 185              	t_firefight_start:
 186 00b4 00000000 		.space	4
 187              		.global	leds_on
 188              		.align	2
 191              	leds_on:
 192 00b8 00000000 		.space	4
 193              		.section	.rodata
 194              		.align	2
 195              	.LC0:
 196 0000 25346420 		.ascii	"%4d %4d %4d\012\015\000"
 196      25346420 
 196      2534640A 
 196      0D00
 197              		.text
 198              		.align	2
 199              		.global	main
 200              		.thumb
 201              		.thumb_func
 203              	main:
 204              	.LFB111:
 205              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****     This program (program referring to all source and header files in this repository (repository
  17:../src/main.cpp ****     referring to https://github.com/Aghosh993/Trinity2013/tree) not containing code covered
  18:../src/main.cpp ****     under the terms of STMicroelectronic's Liberty v2 License) is free software: you can redistribu
  19:../src/main.cpp ****     it and/or modify it ("it" refers to all sections of this code as covered in the aforementioned 
  20:../src/main.cpp ****     under the terms of the GNU General Public License as published by the Free Software Foundation,
  21:../src/main.cpp ****     either version 3 of the License, or (at your option) any later version.
  22:../src/main.cpp **** 
  23:../src/main.cpp ****     This program is distributed in the hope that it will be useful,
  24:../src/main.cpp ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  25:../src/main.cpp ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  26:../src/main.cpp ****     GNU General Public License for more details.
  27:../src/main.cpp **** 
  28:../src/main.cpp ****     You should have received a copy of the GNU General Public License
  29:../src/main.cpp ****     along with this program (please refer to the file COPYING in the root of
  30:../src/main.cpp ****     the repository).  If not, see <http://www.gnu.org/licenses/>.
  31:../src/main.cpp **** 
  32:../src/main.cpp ****     (c) Abhimanyu Ghosh, Polytechnic Institute of NYU (2013-2014)
  33:../src/main.cpp ****  */
  34:../src/main.cpp **** 
  35:../src/main.cpp **** /*
  36:../src/main.cpp ****  * All other code is covered by the following terms:
  37:../src/main.cpp ****  *
  38:../src/main.cpp ****  *   ******************************************************************************
  39:../src/main.cpp ****   * @attention
  40:../src/main.cpp ****   *
  41:../src/main.cpp ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  42:../src/main.cpp ****   *
  43:../src/main.cpp ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:../src/main.cpp ****   * You may not use this file except in compliance with the License.
  45:../src/main.cpp ****   * You may obtain a copy of the License at:
  46:../src/main.cpp ****   *
  47:../src/main.cpp ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:../src/main.cpp ****   *
  49:../src/main.cpp ****   * Unless required by applicable law or agreed to in writing, software
  50:../src/main.cpp ****   * distributed under the License is distributed on an "AS IS" BASIS,
  51:../src/main.cpp ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:../src/main.cpp ****   * See the License for the specific language governing permissions and
  53:../src/main.cpp ****   * limitations under the License.
  54:../src/main.cpp ****   *
  55:../src/main.cpp ****   ******************************************************************************
  56:../src/main.cpp ****  */
  57:../src/main.cpp **** 
  58:../src/main.cpp **** /*
  59:../src/main.cpp ****  * Timer usage manifest:
  60:../src/main.cpp ****  *
  61:../src/main.cpp ****  * TIM1: 16-bit PWM output mode (PE14) [for BLDC control...]
  62:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  63:../src/main.cpp ****  *
  64:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  65:../src/main.cpp ****  *
  66:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  67:../src/main.cpp ****  *
  68:../src/main.cpp ****  * TIM6: LED matrix ISR
  69:../src/main.cpp ****  * TIM7: Encoder update ISR
  70:../src/main.cpp ****  *
  71:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  72:../src/main.cpp ****  *
  73:../src/main.cpp ****  *
  74:../src/main.cpp ****  * TIM17: IMU update ISR
  75:../src/main.cpp ****  *
  76:../src/main.cpp ****  * Other pins/resources used:
  77:../src/main.cpp ****  *
  78:../src/main.cpp ****  * Analog: 	PA2: adcData[0]
  79:../src/main.cpp ****  * 			PA3: adcData[1]
  80:../src/main.cpp ****  *
  81:../src/main.cpp ****  * 			PA4: adc2_data[0]
  82:../src/main.cpp ****  * 			PC4: adc2_data[1]
  83:../src/main.cpp ****  * 			PC5: adc2_data[2]
  84:../src/main.cpp ****  * 			PB2: adc2_data[3]
  85:../src/main.cpp ****  *
  86:../src/main.cpp ****  * Digital:
  87:../src/main.cpp ****  *
  88:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  89:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  90:../src/main.cpp ****  *
  91:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  92:../src/main.cpp ****  *
  93:../src/main.cpp ****  */
  94:../src/main.cpp **** 
  95:../src/main.cpp **** /*
  96:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  97:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  98:../src/main.cpp ****  */
  99:../src/main.cpp **** 
 100:../src/main.cpp **** volatile int led_iter;
 101:../src/main.cpp **** volatile int led_matrix[7] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_13,
 102:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
 103:../src/main.cpp **** 
 104:../src/main.cpp **** void imu_update_ISR_init(void);
 105:../src/main.cpp **** int16_t calc_gyro_bias(void);
 106:../src/main.cpp **** 
 107:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
 108:../src/main.cpp **** 
 109:../src/main.cpp **** void adc1_init_DMA(void);
 110:../src/main.cpp **** void adc2_init_DMA(void);
 111:../src/main.cpp **** void battery_watchdog_init(void);
 112:../src/main.cpp **** void adc1_init(void);
 113:../src/main.cpp **** 
 114:../src/main.cpp **** void brake_pins_init(void);
 115:../src/main.cpp **** 
 116:../src/main.cpp **** void ping_pin_init(void);
 117:../src/main.cpp **** void timer2_timebase_init(void);
 118:../src/main.cpp **** 
 119:../src/main.cpp **** void comp_init(void);
 120:../src/main.cpp **** 
 121:../src/main.cpp **** void trinity2013_waitForStart(void);
 122:../src/main.cpp **** 
 123:../src/main.cpp **** float IR_distance(int IR_ADC_VAL);
 124:../src/main.cpp **** 
 125:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
 126:../src/main.cpp **** 
 127:../src/main.cpp **** encoderState left_enc, right_enc;
 128:../src/main.cpp **** 
 129:../src/main.cpp **** volatile float gyro_angle_x;
 130:../src/main.cpp **** int gyro_bias_x, adcval;
 131:../src/main.cpp **** 
 132:../src/main.cpp **** __IO uint32_t adcData[2];
 133:../src/main.cpp **** int new_data;
 134:../src/main.cpp **** 
 135:../src/main.cpp **** __IO uint32_t adc2_data[4];
 136:../src/main.cpp **** uint8_t adc2_new_data;
 137:../src/main.cpp **** 
 138:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
 139:../src/main.cpp **** 
 140:../src/main.cpp **** int count, stage;
 141:../src/main.cpp **** 
 142:../src/main.cpp **** float drive_cmd;// = 0.0f;
 143:../src/main.cpp **** float err;// = 0.0f;
 144:../src/main.cpp **** float last_err;// = 0.0f;
 145:../src/main.cpp **** float diff_err;
 146:../src/main.cpp **** float rt;// = 0.0f;
 147:../src/main.cpp **** float d_front;// = 1.0f;
 148:../src/main.cpp **** float integral;
 149:../src/main.cpp **** 
 150:../src/main.cpp **** float left, right;
 151:../src/main.cpp **** 
 152:../src/main.cpp **** int state;
 153:../src/main.cpp **** 
 154:../src/main.cpp **** float match_time_counter;
 155:../src/main.cpp **** float t_firefight_start;
 156:../src/main.cpp **** int leds_on;
 157:../src/main.cpp **** 
 158:../src/main.cpp **** // Initialize all encoder data structures to zero:
 159:../src/main.cpp **** 
 160:../src/main.cpp **** int main(void)
 161:../src/main.cpp **** {
 206              		.loc 1 161 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 32
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210 0000 80B5     		push	{r7, lr}
 211              	.LCFI0:
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 7, -8
 214              		.cfi_offset 14, -4
 215 0002 88B0     		sub	sp, sp, #32
 216              	.LCFI1:
 217              		.cfi_def_cfa_offset 40
 218 0004 00AF     		add	r7, sp, #0
 219              	.LCFI2:
 220              		.cfi_def_cfa_register 7
 221              	.LBB2:
 162:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 222              		.loc 1 162 0
 223 0006 FFF7FEFF 		bl	SystemInit
 163:../src/main.cpp **** 
 164:../src/main.cpp **** 	UART1_init(); // Debug bridge
 224              		.loc 1 164 0
 225 000a FFF7FEFF 		bl	_Z10UART1_initv
 165:../src/main.cpp **** 
 166:../src/main.cpp **** 	state = ST_READY;
 226              		.loc 1 166 0
 227 000e 40F20003 		movw	r3, #:lower16:state
 228 0012 C0F20003 		movt	r3, #:upper16:state
 229 0016 4FF0FF32 		mov	r2, #-1
 230 001a 1A60     		str	r2, [r3, #0]
 167:../src/main.cpp **** 
 168:../src/main.cpp **** 	LED_MATRIX_ISR_init();
 231              		.loc 1 168 0
 232 001c FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 169:../src/main.cpp **** 
 170:../src/main.cpp **** 	trinity2013_waitForStart();
 233              		.loc 1 170 0
 234 0020 FFF7FEFF 		bl	_Z24trinity2013_waitForStartv
 171:../src/main.cpp **** 
 172:../src/main.cpp **** 	state = ST_WANDER;
 235              		.loc 1 172 0
 236 0024 40F20003 		movw	r3, #:lower16:state
 237 0028 C0F20003 		movt	r3, #:upper16:state
 238 002c 4FF00002 		mov	r2, #0
 239 0030 1A60     		str	r2, [r3, #0]
 173:../src/main.cpp **** 
 174:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
 175:../src/main.cpp **** 
 176:../src/main.cpp **** 	adcData[0] = 0;
 240              		.loc 1 176 0
 241 0032 40F20003 		movw	r3, #:lower16:adcData
 242 0036 C0F20003 		movt	r3, #:upper16:adcData
 243 003a 4FF00002 		mov	r2, #0
 244 003e 1A60     		str	r2, [r3, #0]
 177:../src/main.cpp **** 	adcData[1] = 0;
 245              		.loc 1 177 0
 246 0040 40F20003 		movw	r3, #:lower16:adcData
 247 0044 C0F20003 		movt	r3, #:upper16:adcData
 248 0048 4FF00002 		mov	r2, #0
 249 004c 5A60     		str	r2, [r3, #4]
 178:../src/main.cpp **** 
 179:../src/main.cpp **** 	uint8_t iter = 0;
 250              		.loc 1 179 0
 251 004e 4FF00003 		mov	r3, #0
 252 0052 FB77     		strb	r3, [r7, #31]
 180:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 253              		.loc 1 180 0
 254 0054 4FF00003 		mov	r3, #0
 255 0058 FB77     		strb	r3, [r7, #31]
 256 005a 0CE0     		b	.L2
 257              	.L3:
 181:../src/main.cpp **** 	{
 182:../src/main.cpp **** 		adc2_data[iter] = 0;
 258              		.loc 1 182 0 discriminator 2
 259 005c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 260 005e 40F20003 		movw	r3, #:lower16:adc2_data
 261 0062 C0F20003 		movt	r3, #:upper16:adc2_data
 262 0066 4FF00001 		mov	r1, #0
 263 006a 43F82210 		str	r1, [r3, r2, lsl #2]
 180:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 264              		.loc 1 180 0 discriminator 2
 265 006e FB7F     		ldrb	r3, [r7, #31]
 266 0070 03F10103 		add	r3, r3, #1
 267 0074 FB77     		strb	r3, [r7, #31]
 268              	.L2:
 180:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 269              		.loc 1 180 0 is_stmt 0 discriminator 1
 270 0076 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 271 0078 062B     		cmp	r3, #6
 272 007a 8CBF     		ite	hi
 273 007c 0023     		movhi	r3, #0
 274 007e 0123     		movls	r3, #1
 275 0080 DBB2     		uxtb	r3, r3
 276 0082 002B     		cmp	r3, #0
 277 0084 EAD1     		bne	.L3
 183:../src/main.cpp **** 	}
 184:../src/main.cpp **** 
 185:../src/main.cpp **** 	adc3_awd1 = 0;
 278              		.loc 1 185 0 is_stmt 1
 279 0086 40F20003 		movw	r3, #:lower16:adc3_awd1
 280 008a C0F20003 		movt	r3, #:upper16:adc3_awd1
 281 008e 4FF00002 		mov	r2, #0
 282 0092 1A70     		strb	r2, [r3, #0]
 186:../src/main.cpp **** 	adc3_awd2 = 0;
 283              		.loc 1 186 0
 284 0094 40F20003 		movw	r3, #:lower16:adc3_awd2
 285 0098 C0F20003 		movt	r3, #:upper16:adc3_awd2
 286 009c 4FF00002 		mov	r2, #0
 287 00a0 1A70     		strb	r2, [r3, #0]
 187:../src/main.cpp **** 
 188:../src/main.cpp **** 	count = 0;
 288              		.loc 1 188 0
 289 00a2 40F20003 		movw	r3, #:lower16:count
 290 00a6 C0F20003 		movt	r3, #:upper16:count
 291 00aa 4FF00002 		mov	r2, #0
 292 00ae 1A60     		str	r2, [r3, #0]
 189:../src/main.cpp **** 	stage = 0;
 293              		.loc 1 189 0
 294 00b0 40F20003 		movw	r3, #:lower16:stage
 295 00b4 C0F20003 		movt	r3, #:upper16:stage
 296 00b8 4FF00002 		mov	r2, #0
 297 00bc 1A60     		str	r2, [r3, #0]
 190:../src/main.cpp **** 
 191:../src/main.cpp **** 	/*
 192:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 193:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 194:../src/main.cpp **** 	 */
 195:../src/main.cpp **** 
 196:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 298              		.loc 1 196 0
 299 00be 40F20000 		movw	r0, #:lower16:left_enc
 300 00c2 C0F20000 		movt	r0, #:upper16:left_enc
 301 00c6 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 197:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 302              		.loc 1 197 0
 303 00ca 40F20000 		movw	r0, #:lower16:right_enc
 304 00ce C0F20000 		movt	r0, #:upper16:right_enc
 305 00d2 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 198:../src/main.cpp **** 
 199:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 200:../src/main.cpp **** 
 201:../src/main.cpp **** 	brake_pins_init();
 306              		.loc 1 201 0
 307 00d6 FFF7FEFF 		bl	_Z15brake_pins_initv
 202:../src/main.cpp **** 	pwm_out1_init(2000);
 308              		.loc 1 202 0
 309 00da 4FF4FA60 		mov	r0, #2000
 310 00de FFF7FEFF 		bl	_Z13pwm_out1_initt
 203:../src/main.cpp **** 	pwm_out2_init(2000);
 311              		.loc 1 203 0
 312 00e2 4FF4FA60 		mov	r0, #2000
 313 00e6 FFF7FEFF 		bl	_Z13pwm_out2_initt
 204:../src/main.cpp **** 
 205:../src/main.cpp **** 	pwm_out3_init(50);
 314              		.loc 1 205 0
 315 00ea 4FF03200 		mov	r0, #50
 316 00ee FFF7FEFF 		bl	_Z13pwm_out3_initt
 206:../src/main.cpp **** 
 207:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 208:../src/main.cpp **** 
 209:../src/main.cpp **** 	TIM8_init_encoder();
 317              		.loc 1 209 0
 318 00f2 FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 210:../src/main.cpp **** 	TIM4_init_encoder();
 319              		.loc 1 210 0
 320 00f6 FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 211:../src/main.cpp **** 
 212:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 213:../src/main.cpp **** 
 214:../src/main.cpp **** 	new_data = 0;
 321              		.loc 1 214 0
 322 00fa 40F20003 		movw	r3, #:lower16:new_data
 323 00fe C0F20003 		movt	r3, #:upper16:new_data
 324 0102 4FF00002 		mov	r2, #0
 325 0106 1A60     		str	r2, [r3, #0]
 215:../src/main.cpp **** 	adc2_new_data = 0;
 326              		.loc 1 215 0
 327 0108 40F20003 		movw	r3, #:lower16:adc2_new_data
 328 010c C0F20003 		movt	r3, #:upper16:adc2_new_data
 329 0110 4FF00002 		mov	r2, #0
 330 0114 1A70     		strb	r2, [r3, #0]
 216:../src/main.cpp **** 
 217:../src/main.cpp **** 	// Initialize ADC1 DMA:
 218:../src/main.cpp **** 	adc1_init_DMA();
 331              		.loc 1 218 0
 332 0116 FFF7FEFF 		bl	_Z13adc1_init_DMAv
 219:../src/main.cpp **** 
 220:../src/main.cpp **** 	// Initialize ADC2 DMA:
 221:../src/main.cpp **** 	adc2_init_DMA();
 333              		.loc 1 221 0
 334 011a FFF7FEFF 		bl	_Z13adc2_init_DMAv
 222:../src/main.cpp **** 
 223:../src/main.cpp **** 	//	battery_watchdog_init();
 224:../src/main.cpp **** 
 225:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 335              		.loc 1 225 0
 336 011e FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 226:../src/main.cpp **** 
 227:../src/main.cpp **** 	// Ping Sensor Init:
 228:../src/main.cpp **** 
 229:../src/main.cpp **** 	ping_pin_init();
 337              		.loc 1 229 0
 338 0122 FFF7FEFF 		bl	_Z13ping_pin_initv
 230:../src/main.cpp **** 	timer2_timebase_init();
 339              		.loc 1 230 0
 340 0126 FFF7FEFF 		bl	_Z20timer2_timebase_initv
 231:../src/main.cpp **** 	imu_update_ISR_init();
 341              		.loc 1 231 0
 342 012a FFF7FEFF 		bl	_Z19imu_update_ISR_initv
 232:../src/main.cpp **** 
 233:../src/main.cpp **** 	// Encoder comparator init for noise debounce:
 234:../src/main.cpp **** 	comp_init();
 343              		.loc 1 234 0
 344 012e FFF7FEFF 		bl	_Z9comp_initv
 235:../src/main.cpp **** 
 236:../src/main.cpp **** 	adcval = 0;
 345              		.loc 1 236 0
 346 0132 40F20003 		movw	r3, #:lower16:adcval
 347 0136 C0F20003 		movt	r3, #:upper16:adcval
 348 013a 4FF00002 		mov	r2, #0
 349 013e 1A60     		str	r2, [r3, #0]
 237:../src/main.cpp **** 
 238:../src/main.cpp **** 	drive_cmd = 0.0f;
 350              		.loc 1 238 0
 351 0140 40F20003 		movw	r3, #:lower16:drive_cmd
 352 0144 C0F20003 		movt	r3, #:upper16:drive_cmd
 353 0148 4FF00002 		mov	r2, #0
 354 014c 1A60     		str	r2, [r3, #0]	@ float
 239:../src/main.cpp **** 	err = 0.0f;
 355              		.loc 1 239 0
 356 014e 40F20003 		movw	r3, #:lower16:err
 357 0152 C0F20003 		movt	r3, #:upper16:err
 358 0156 4FF00002 		mov	r2, #0
 359 015a 1A60     		str	r2, [r3, #0]	@ float
 240:../src/main.cpp **** 	last_err = 0.0f;
 360              		.loc 1 240 0
 361 015c 40F20003 		movw	r3, #:lower16:last_err
 362 0160 C0F20003 		movt	r3, #:upper16:last_err
 363 0164 4FF00002 		mov	r2, #0
 364 0168 1A60     		str	r2, [r3, #0]	@ float
 241:../src/main.cpp **** 	diff_err = 0.0f;
 365              		.loc 1 241 0
 366 016a 40F20003 		movw	r3, #:lower16:diff_err
 367 016e C0F20003 		movt	r3, #:upper16:diff_err
 368 0172 4FF00002 		mov	r2, #0
 369 0176 1A60     		str	r2, [r3, #0]	@ float
 242:../src/main.cpp **** 	rt = 0.0f;
 370              		.loc 1 242 0
 371 0178 40F20003 		movw	r3, #:lower16:rt
 372 017c C0F20003 		movt	r3, #:upper16:rt
 373 0180 4FF00002 		mov	r2, #0
 374 0184 1A60     		str	r2, [r3, #0]	@ float
 243:../src/main.cpp **** 	d_front = 1.0f;
 375              		.loc 1 243 0
 376 0186 40F20003 		movw	r3, #:lower16:d_front
 377 018a C0F20003 		movt	r3, #:upper16:d_front
 378 018e 4FF07E52 		mov	r2, #1065353216
 379 0192 1A60     		str	r2, [r3, #0]	@ float
 244:../src/main.cpp **** 	integral = 0.0f;
 380              		.loc 1 244 0
 381 0194 40F20003 		movw	r3, #:lower16:integral
 382 0198 C0F20003 		movt	r3, #:upper16:integral
 383 019c 4FF00002 		mov	r2, #0
 384 01a0 1A60     		str	r2, [r3, #0]	@ float
 245:../src/main.cpp **** 
 246:../src/main.cpp **** 	int uv_avgBuf1 = 0;
 385              		.loc 1 246 0
 386 01a2 4FF00003 		mov	r3, #0
 387 01a6 BB61     		str	r3, [r7, #24]
 247:../src/main.cpp **** 	int uv_avgBuf2 = 0;
 388              		.loc 1 247 0
 389 01a8 4FF00003 		mov	r3, #0
 390 01ac 7B61     		str	r3, [r7, #20]
 248:../src/main.cpp **** 	int uv_iter = 0;
 391              		.loc 1 248 0
 392 01ae 4FF00003 		mov	r3, #0
 393 01b2 3B61     		str	r3, [r7, #16]
 249:../src/main.cpp **** 
 250:../src/main.cpp **** 	float uv1_avg, uv2_avg;
 251:../src/main.cpp **** 
 252:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 394              		.loc 1 252 0
 395 01b4 FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 253:../src/main.cpp **** 	leds_on = 0;
 396              		.loc 1 253 0
 397 01b8 40F20003 		movw	r3, #:lower16:leds_on
 398 01bc C0F20003 		movt	r3, #:upper16:leds_on
 399 01c0 4FF00002 		mov	r2, #0
 400 01c4 1A60     		str	r2, [r3, #0]
 401 01c6 00E0     		b	.L15
 402              	.L17:
 254:../src/main.cpp **** 
 255:../src/main.cpp **** 	while(true)
 403              		.loc 1 255 0
 404 01c8 00BF     		nop
 405              	.L15:
 406              	.LBB3:
 256:../src/main.cpp **** 	{
 257:../src/main.cpp **** 		printf("%4d %4d %4d\n\r", (int)adcData[0] , (int)adc2_data[2], ((int)adcData[0] - (int)adc2_data[
 407              		.loc 1 257 0
 408 01ca 40F20003 		movw	r3, #:lower16:adcData
 409 01ce C0F20003 		movt	r3, #:upper16:adcData
 410 01d2 1B68     		ldr	r3, [r3, #0]
 411 01d4 1946     		mov	r1, r3
 412 01d6 40F20003 		movw	r3, #:lower16:adc2_data
 413 01da C0F20003 		movt	r3, #:upper16:adc2_data
 414 01de 9B68     		ldr	r3, [r3, #8]
 415 01e0 1A46     		mov	r2, r3
 416 01e2 40F20003 		movw	r3, #:lower16:adcData
 417 01e6 C0F20003 		movt	r3, #:upper16:adcData
 418 01ea 1B68     		ldr	r3, [r3, #0]
 419 01ec 1846     		mov	r0, r3
 420 01ee 40F20003 		movw	r3, #:lower16:adc2_data
 421 01f2 C0F20003 		movt	r3, #:upper16:adc2_data
 422 01f6 9B68     		ldr	r3, [r3, #8]
 423 01f8 C31A     		subs	r3, r0, r3
 424 01fa 40F20000 		movw	r0, #:lower16:.LC0
 425 01fe C0F20000 		movt	r0, #:upper16:.LC0
 426 0202 FFF7FEFF 		bl	printf
 427              	.LBB4:
 258:../src/main.cpp **** //		printf("%d %1.3f \n\r", (int)adc2_data[3], d_front);
 259:../src/main.cpp **** //		printf("Time elapsed since start: %1.3f \n\r", match_time_counter);
 260:../src/main.cpp **** 		if(((adc2_data[2] > UV_THRESHOLD || adcData[0] > UV_THRESHOLD)) && state == ST_WANDER) //500
 428              		.loc 1 260 0
 429 0206 40F20003 		movw	r3, #:lower16:adc2_data
 430 020a C0F20003 		movt	r3, #:upper16:adc2_data
 431 020e 9A68     		ldr	r2, [r3, #8]
 432 0210 40F22713 		movw	r3, #295
 433 0214 9A42     		cmp	r2, r3
 434 0216 08D8     		bhi	.L4
 435              		.loc 1 260 0 is_stmt 0 discriminator 2
 436 0218 40F20003 		movw	r3, #:lower16:adcData
 437 021c C0F20003 		movt	r3, #:upper16:adcData
 438 0220 1A68     		ldr	r2, [r3, #0]
 439 0222 40F22713 		movw	r3, #295
 440 0226 9A42     		cmp	r2, r3
 441 0228 09D9     		bls	.L5
 442              	.L4:
 443              		.loc 1 260 0 discriminator 1
 444 022a 40F20003 		movw	r3, #:lower16:state
 445 022e C0F20003 		movt	r3, #:upper16:state
 446 0232 1B68     		ldr	r3, [r3, #0]
 447 0234 002B     		cmp	r3, #0
 448 0236 02D1     		bne	.L5
 449              		.loc 1 260 0 discriminator 4
 450 0238 4FF00103 		mov	r3, #1
 451 023c 01E0     		b	.L6
 452              	.L5:
 453              		.loc 1 260 0 discriminator 3
 454 023e 4FF00003 		mov	r3, #0
 455              	.L6:
 456              		.loc 1 260 0 discriminator 5
 457 0242 002B     		cmp	r3, #0
 458 0244 4FD0     		beq	.L7
 261:../src/main.cpp **** 		{
 262:../src/main.cpp **** 			for(uv_iter=0; uv_iter<UV_NUMSAMPLES; ++uv_iter)
 459              		.loc 1 262 0 is_stmt 1
 460 0246 4FF00003 		mov	r3, #0
 461 024a 3B61     		str	r3, [r7, #16]
 462 024c 13E0     		b	.L8
 463              	.L9:
 263:../src/main.cpp **** 			{
 264:../src/main.cpp **** 				uv_avgBuf1 += (int)adcData[0];
 464              		.loc 1 264 0 discriminator 2
 465 024e 40F20003 		movw	r3, #:lower16:adcData
 466 0252 C0F20003 		movt	r3, #:upper16:adcData
 467 0256 1B68     		ldr	r3, [r3, #0]
 468 0258 BA69     		ldr	r2, [r7, #24]
 469 025a D318     		adds	r3, r2, r3
 470 025c BB61     		str	r3, [r7, #24]
 265:../src/main.cpp **** 				uv_avgBuf2 += (int)adc2_data[2];
 471              		.loc 1 265 0 discriminator 2
 472 025e 40F20003 		movw	r3, #:lower16:adc2_data
 473 0262 C0F20003 		movt	r3, #:upper16:adc2_data
 474 0266 9B68     		ldr	r3, [r3, #8]
 475 0268 7A69     		ldr	r2, [r7, #20]
 476 026a D318     		adds	r3, r2, r3
 477 026c 7B61     		str	r3, [r7, #20]
 262:../src/main.cpp **** 			for(uv_iter=0; uv_iter<UV_NUMSAMPLES; ++uv_iter)
 478              		.loc 1 262 0 discriminator 2
 479 026e 3B69     		ldr	r3, [r7, #16]
 480 0270 03F10103 		add	r3, r3, #1
 481 0274 3B61     		str	r3, [r7, #16]
 482              	.L8:
 262:../src/main.cpp **** 			for(uv_iter=0; uv_iter<UV_NUMSAMPLES; ++uv_iter)
 483              		.loc 1 262 0 is_stmt 0 discriminator 1
 484 0276 3A69     		ldr	r2, [r7, #16]
 485 0278 40F22B13 		movw	r3, #299
 486 027c 9A42     		cmp	r2, r3
 487 027e CCBF     		ite	gt
 488 0280 0023     		movgt	r3, #0
 489 0282 0123     		movle	r3, #1
 490 0284 DBB2     		uxtb	r3, r3
 491 0286 002B     		cmp	r3, #0
 492 0288 E1D1     		bne	.L9
 266:../src/main.cpp **** 			}
 267:../src/main.cpp **** 			uv1_avg = (float)uv_avgBuf1/(float)UV_NUMSAMPLES;
 493              		.loc 1 267 0 is_stmt 1
 494 028a D7ED067A 		flds	s15, [r7, #24]	@ int
 495 028e B8EEE77A 		fsitos	s14, s15
 496 0292 DFED387A 		flds	s15, .L18
 497 0296 C7EE277A 		fdivs	s15, s14, s15
 498 029a C7ED027A 		fsts	s15, [r7, #8]
 268:../src/main.cpp **** 			uv2_avg = (float)uv_avgBuf2/(float)UV_NUMSAMPLES;
 499              		.loc 1 268 0
 500 029e D7ED057A 		flds	s15, [r7, #20]	@ int
 501 02a2 B8EEE77A 		fsitos	s14, s15
 502 02a6 DFED337A 		flds	s15, .L18
 503 02aa C7EE277A 		fdivs	s15, s14, s15
 504 02ae C7ED017A 		fsts	s15, [r7, #4]
 269:../src/main.cpp **** 
 270:../src/main.cpp **** 			if(uv1_avg > (float)UV_THRESHOLD || uv2_avg > (float)UV_THRESHOLD)
 505              		.loc 1 270 0
 506 02b2 97ED027A 		flds	s14, [r7, #8]
 507 02b6 DFED307A 		flds	s15, .L18+4
 508 02ba B4EEE77A 		fcmpes	s14, s15
 509 02be F1EE10FA 		fmstat
 510 02c2 08DC     		bgt	.L10
 511              		.loc 1 270 0 is_stmt 0 discriminator 1
 512 02c4 97ED017A 		flds	s14, [r7, #4]
 513 02c8 DFED2B7A 		flds	s15, .L18+4
 514 02cc B4EEE77A 		fcmpes	s14, s15
 515 02d0 F1EE10FA 		fmstat
 516 02d4 4CDD     		ble	.L16
 517              	.L10:
 271:../src/main.cpp **** 			{
 272:../src/main.cpp **** 				state = ST_HOMING;
 518              		.loc 1 272 0 is_stmt 1
 519 02d6 40F20003 		movw	r3, #:lower16:state
 520 02da C0F20003 		movt	r3, #:upper16:state
 521 02de 4FF00102 		mov	r2, #1
 522 02e2 1A60     		str	r2, [r3, #0]
 523              	.LBE4:
 524              	.LBE3:
 255:../src/main.cpp **** 	while(true)
 525              		.loc 1 255 0
 526 02e4 70E7     		b	.L17
 527              	.L7:
 528              	.LBB9:
 529              	.LBB8:
 530              	.LBB5:
 531              	.LBB6:
 273:../src/main.cpp **** 			}
 274:../src/main.cpp **** 
 275:../src/main.cpp **** 		}
 276:../src/main.cpp **** 		else if (state == ST_FIREFIGHT)
 532              		.loc 1 276 0
 533 02e6 40F20003 		movw	r3, #:lower16:state
 534 02ea C0F20003 		movt	r3, #:upper16:state
 535 02ee 1B68     		ldr	r3, [r3, #0]
 536 02f0 022B     		cmp	r3, #2
 537 02f2 7FF469AF 		bne	.L17
 538              	.LBB7:
 277:../src/main.cpp **** 		{
 278:../src/main.cpp **** 			pwm1_output(0.5);
 539              		.loc 1 278 0
 540 02f6 4FF07C50 		mov	r0, #1056964608
 541 02fa FFF7FEFF 		bl	_Z11pwm1_outputf
 279:../src/main.cpp **** 			pwm2_output(0.5);
 542              		.loc 1 279 0
 543 02fe 4FF07C50 		mov	r0, #1056964608
 544 0302 FFF7FEFF 		bl	_Z11pwm2_outputf
 280:../src/main.cpp **** 			int jk = 0;
 545              		.loc 1 280 0
 546 0306 4FF00003 		mov	r3, #0
 547 030a FB60     		str	r3, [r7, #12]
 281:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 548              		.loc 1 281 0
 549 030c 4FF00003 		mov	r3, #0
 550 0310 FB60     		str	r3, [r7, #12]
 551 0312 09E0     		b	.L13
 552              	.L14:
 282:../src/main.cpp **** 			{
 283:../src/main.cpp **** 				pwm3_output(0.06f);
 553              		.loc 1 283 0 discriminator 2
 554 0314 4CF28F20 		movw	r0, #49807
 555 0318 C3F67550 		movt	r0, 15733
 556 031c FFF7FEFF 		bl	_Z11pwm3_outputf
 281:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 557              		.loc 1 281 0 discriminator 2
 558 0320 FB68     		ldr	r3, [r7, #12]
 559 0322 03F10103 		add	r3, r3, #1
 560 0326 FB60     		str	r3, [r7, #12]
 561              	.L13:
 281:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 562              		.loc 1 281 0 is_stmt 0 discriminator 1
 563 0328 FA68     		ldr	r2, [r7, #12]
 564 032a 41F2CF23 		movw	r3, #4815
 565 032e C0F21303 		movt	r3, 19
 566 0332 9A42     		cmp	r2, r3
 567 0334 CCBF     		ite	gt
 568 0336 0023     		movgt	r3, #0
 569 0338 0123     		movle	r3, #1
 570 033a DBB2     		uxtb	r3, r3
 571 033c 002B     		cmp	r3, #0
 572 033e E9D1     		bne	.L14
 284:../src/main.cpp **** 			}
 285:../src/main.cpp **** 			pwm3_output(0.1f);
 573              		.loc 1 285 0 is_stmt 1
 574 0340 4CF6CD40 		movw	r0, #52429
 575 0344 C3F6CC50 		movt	r0, 15820
 576 0348 FFF7FEFF 		bl	_Z11pwm3_outputf
 286:../src/main.cpp **** 			t_firefight_start = match_time_counter;
 577              		.loc 1 286 0
 578 034c 40F20003 		movw	r3, #:lower16:match_time_counter
 579 0350 C0F20003 		movt	r3, #:upper16:match_time_counter
 580 0354 1A68     		ldr	r2, [r3, #0]	@ float
 581 0356 40F20003 		movw	r3, #:lower16:t_firefight_start
 582 035a C0F20003 		movt	r3, #:upper16:t_firefight_start
 583 035e 1A60     		str	r2, [r3, #0]	@ float
 287:../src/main.cpp **** 			state = ST_CANDLE_BLOWOUT;
 584              		.loc 1 287 0
 585 0360 40F20003 		movw	r3, #:lower16:state
 586 0364 C0F20003 		movt	r3, #:upper16:state
 587 0368 4FF00302 		mov	r2, #3
 588 036c 1A60     		str	r2, [r3, #0]
 589              	.LBE7:
 590              	.LBE6:
 591              	.LBE5:
 592              	.LBE8:
 593              	.LBE9:
 255:../src/main.cpp **** 	while(true)
 594              		.loc 1 255 0
 595 036e 2BE7     		b	.L17
 596              	.L16:
 597 0370 2AE7     		b	.L17
 598              	.L19:
 599 0372 00BF     		.align	2
 600              	.L18:
 601 0374 00009643 		.word	1133903872
 602 0378 00809343 		.word	1133740032
 603              	.LBE2:
 604              		.cfi_endproc
 605              	.LFE111:
 607              		.align	2
 608              		.global	_Z24trinity2013_waitForStartv
 609              		.thumb
 610              		.thumb_func
 612              	_Z24trinity2013_waitForStartv:
 613              	.LFB112:
 288:../src/main.cpp **** 		}
 289:../src/main.cpp **** 
 290:../src/main.cpp **** 	}
 291:../src/main.cpp **** 	return 0; // We should never manage to get here...
 292:../src/main.cpp **** }
 293:../src/main.cpp **** 
 294:../src/main.cpp **** void trinity2013_waitForStart(void)
 295:../src/main.cpp **** {
 614              		.loc 1 295 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 8
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618 037c 80B5     		push	{r7, lr}
 619              	.LCFI3:
 620              		.cfi_def_cfa_offset 8
 621              		.cfi_offset 7, -8
 622              		.cfi_offset 14, -4
 623 037e 82B0     		sub	sp, sp, #8
 624              	.LCFI4:
 625              		.cfi_def_cfa_offset 16
 626 0380 00AF     		add	r7, sp, #0
 627              	.LCFI5:
 628              		.cfi_def_cfa_register 7
 629              	.LBB10:
 296:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 630              		.loc 1 296 0
 631 0382 4FF48010 		mov	r0, #1048576
 632 0386 4FF00101 		mov	r1, #1
 633 038a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 297:../src/main.cpp **** 	GPIO_DeInit(GPIOD);
 634              		.loc 1 297 0
 635 038e 4FF44060 		mov	r0, #3072
 636 0392 C4F60000 		movt	r0, 18432
 637 0396 FFF7FEFF 		bl	GPIO_DeInit
 298:../src/main.cpp **** 	GPIO_InitTypeDef g;
 299:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 638              		.loc 1 299 0
 639 039a 4FF00003 		mov	r3, #0
 640 039e 3B71     		strb	r3, [r7, #4]
 300:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 641              		.loc 1 300 0
 642 03a0 4FF00103 		mov	r3, #1
 643 03a4 BB71     		strb	r3, [r7, #6]
 301:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_3;
 644              		.loc 1 301 0
 645 03a6 4FF00803 		mov	r3, #8
 646 03aa 3B60     		str	r3, [r7, #0]
 302:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_DOWN;
 647              		.loc 1 302 0
 648 03ac 4FF00203 		mov	r3, #2
 649 03b0 FB71     		strb	r3, [r7, #7]
 303:../src/main.cpp **** 	GPIO_Init(GPIOD,&g);
 650              		.loc 1 303 0
 651 03b2 3B46     		mov	r3, r7
 652 03b4 4FF44060 		mov	r0, #3072
 653 03b8 C4F60000 		movt	r0, 18432
 654 03bc 1946     		mov	r1, r3
 655 03be FFF7FEFF 		bl	GPIO_Init
 304:../src/main.cpp **** 
 305:../src/main.cpp **** 	while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_3) == (uint8_t)Bit_RESET);
 656              		.loc 1 305 0
 657 03c2 00BF     		nop
 658              	.L21:
 659              		.loc 1 305 0 is_stmt 0 discriminator 1
 660 03c4 4FF44060 		mov	r0, #3072
 661 03c8 C4F60000 		movt	r0, 18432
 662 03cc 4FF00801 		mov	r1, #8
 663 03d0 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 664 03d4 0346     		mov	r3, r0
 665 03d6 002B     		cmp	r3, #0
 666 03d8 14BF     		ite	ne
 667 03da 0023     		movne	r3, #0
 668 03dc 0123     		moveq	r3, #1
 669 03de DBB2     		uxtb	r3, r3
 670 03e0 002B     		cmp	r3, #0
 671 03e2 EFD1     		bne	.L21
 306:../src/main.cpp **** 	match_time_counter = 0.0f;
 672              		.loc 1 306 0 is_stmt 1
 673 03e4 40F20003 		movw	r3, #:lower16:match_time_counter
 674 03e8 C0F20003 		movt	r3, #:upper16:match_time_counter
 675 03ec 4FF00002 		mov	r2, #0
 676 03f0 1A60     		str	r2, [r3, #0]	@ float
 307:../src/main.cpp **** 	state = ST_WANDER;
 677              		.loc 1 307 0
 678 03f2 40F20003 		movw	r3, #:lower16:state
 679 03f6 C0F20003 		movt	r3, #:upper16:state
 680 03fa 4FF00002 		mov	r2, #0
 681 03fe 1A60     		str	r2, [r3, #0]
 682              	.LBE10:
 308:../src/main.cpp **** }
 683              		.loc 1 308 0
 684 0400 07F10807 		add	r7, r7, #8
 685 0404 BD46     		mov	sp, r7
 686 0406 80BD     		pop	{r7, pc}
 687              		.cfi_endproc
 688              	.LFE112:
 690              		.global	__aeabi_f2d
 691              		.global	__aeabi_d2f
 692              		.align	2
 693              		.global	_Z11IR_distancei
 694              		.thumb
 695              		.thumb_func
 697              	_Z11IR_distancei:
 698              	.LFB113:
 309:../src/main.cpp **** 
 310:../src/main.cpp **** float IR_distance(int IR_ADC_VAL)
 311:../src/main.cpp **** {
 699              		.loc 1 311 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 16
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703 0408 80B5     		push	{r7, lr}
 704              	.LCFI6:
 705              		.cfi_def_cfa_offset 8
 706              		.cfi_offset 7, -8
 707              		.cfi_offset 14, -4
 708 040a 2DED028B 		fstmfdd	sp!, {d8}
 709              	.LCFI7:
 710              		.cfi_def_cfa_offset 16
 711              		.cfi_offset 80, -16
 712 040e 84B0     		sub	sp, sp, #16
 713              	.LCFI8:
 714              		.cfi_def_cfa_offset 32
 715 0410 00AF     		add	r7, sp, #0
 716              	.LCFI9:
 717              		.cfi_def_cfa_register 7
 718 0412 7860     		str	r0, [r7, #4]
 719              	.LBB11:
 312:../src/main.cpp **** 	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 720              		.loc 1 312 0
 721 0414 D7ED017A 		flds	s15, [r7, #4]	@ int
 722 0418 B8EEE77A 		fsitos	s14, s15
 723 041c DFED537A 		flds	s15, .L24
 724 0420 67EE277A 		fmuls	s15, s14, s15
 725 0424 C7ED037A 		fsts	s15, [r7, #12]
 313:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 726              		.loc 1 313 0
 727 0428 F868     		ldr	r0, [r7, #12]	@ float
 728 042a FFF7FEFF 		bl	__aeabi_f2d
 729 042e 0246     		mov	r2, r0
 730 0430 0B46     		mov	r3, r1
 731 0432 1046     		mov	r0, r2
 732 0434 1946     		mov	r1, r3
 733 0436 4FF00002 		mov	r2, #0
 734 043a 4FF00003 		mov	r3, #0
 735 043e C4F21803 		movt	r3, 16408
 736 0442 FFF7FEFF 		bl	pow
 737 0446 0246     		mov	r2, r0
 738 0448 0B46     		mov	r3, r1
 314:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 315:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 316:../src/main.cpp **** 			+ (float)60.24);
 739              		.loc 1 316 0
 740 044a 1046     		mov	r0, r2
 741 044c 1946     		mov	r1, r3
 742 044e FFF7FEFF 		bl	__aeabi_d2f
 743 0452 07EE100A 		fmsr	s14, r0
 744 0456 DFED467A 		flds	s15, .L24+4
 745 045a 27EE278A 		fmuls	s16, s14, s15
 313:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 746              		.loc 1 313 0
 747 045e F868     		ldr	r0, [r7, #12]	@ float
 748 0460 FFF7FEFF 		bl	__aeabi_f2d
 749 0464 0246     		mov	r2, r0
 750 0466 0B46     		mov	r3, r1
 751 0468 1046     		mov	r0, r2
 752 046a 1946     		mov	r1, r3
 753 046c 4FF00002 		mov	r2, #0
 754 0470 4FF00003 		mov	r3, #0
 755 0474 C4F21403 		movt	r3, 16404
 756 0478 FFF7FEFF 		bl	pow
 757 047c 0246     		mov	r2, r0
 758 047e 0B46     		mov	r3, r1
 759              		.loc 1 316 0
 760 0480 1046     		mov	r0, r2
 761 0482 1946     		mov	r1, r3
 762 0484 FFF7FEFF 		bl	__aeabi_d2f
 763 0488 07EE100A 		fmsr	s14, r0
 764 048c DFED397A 		flds	s15, .L24+8
 765 0490 67EE277A 		fmuls	s15, s14, s15
 766 0494 38EE678A 		fsubs	s16, s16, s15
 314:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 767              		.loc 1 314 0
 768 0498 F868     		ldr	r0, [r7, #12]	@ float
 769 049a FFF7FEFF 		bl	__aeabi_f2d
 770 049e 0246     		mov	r2, r0
 771 04a0 0B46     		mov	r3, r1
 772 04a2 1046     		mov	r0, r2
 773 04a4 1946     		mov	r1, r3
 774 04a6 4FF00002 		mov	r2, #0
 775 04aa 4FF00003 		mov	r3, #0
 776 04ae C4F21003 		movt	r3, 16400
 777 04b2 FFF7FEFF 		bl	pow
 778 04b6 0246     		mov	r2, r0
 779 04b8 0B46     		mov	r3, r1
 780              		.loc 1 316 0
 781 04ba 1046     		mov	r0, r2
 782 04bc 1946     		mov	r1, r3
 783 04be FFF7FEFF 		bl	__aeabi_d2f
 784 04c2 07EE100A 		fmsr	s14, r0
 785 04c6 DFED2C7A 		flds	s15, .L24+12
 786 04ca 67EE277A 		fmuls	s15, s14, s15
 787 04ce 38EE278A 		fadds	s16, s16, s15
 314:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 788              		.loc 1 314 0
 789 04d2 F868     		ldr	r0, [r7, #12]	@ float
 790 04d4 FFF7FEFF 		bl	__aeabi_f2d
 791 04d8 0246     		mov	r2, r0
 792 04da 0B46     		mov	r3, r1
 793 04dc 1046     		mov	r0, r2
 794 04de 1946     		mov	r1, r3
 795 04e0 4FF00002 		mov	r2, #0
 796 04e4 4FF00003 		mov	r3, #0
 797 04e8 C4F20803 		movt	r3, 16392
 798 04ec FFF7FEFF 		bl	pow
 799 04f0 0246     		mov	r2, r0
 800 04f2 0B46     		mov	r3, r1
 801              		.loc 1 316 0
 802 04f4 1046     		mov	r0, r2
 803 04f6 1946     		mov	r1, r3
 804 04f8 FFF7FEFF 		bl	__aeabi_d2f
 805 04fc 07EE100A 		fmsr	s14, r0
 806 0500 DFED1E7A 		flds	s15, .L24+16
 807 0504 67EE277A 		fmuls	s15, s14, s15
 808 0508 38EE678A 		fsubs	s16, s16, s15
 315:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 809              		.loc 1 315 0
 810 050c F868     		ldr	r0, [r7, #12]	@ float
 811 050e FFF7FEFF 		bl	__aeabi_f2d
 812 0512 0246     		mov	r2, r0
 813 0514 0B46     		mov	r3, r1
 814 0516 1046     		mov	r0, r2
 815 0518 1946     		mov	r1, r3
 816 051a 4FF00002 		mov	r2, #0
 817 051e 4FF08043 		mov	r3, #1073741824
 818 0522 FFF7FEFF 		bl	pow
 819 0526 0246     		mov	r2, r0
 820 0528 0B46     		mov	r3, r1
 821              		.loc 1 316 0
 822 052a 1046     		mov	r0, r2
 823 052c 1946     		mov	r1, r3
 824 052e FFF7FEFF 		bl	__aeabi_d2f
 825 0532 07EE100A 		fmsr	s14, r0
 826 0536 DFED127A 		flds	s15, .L24+20
 827 053a 67EE277A 		fmuls	s15, s14, s15
 828 053e 38EE277A 		fadds	s14, s16, s15
 829 0542 D7ED036A 		flds	s13, [r7, #12]
 830 0546 DFED0F7A 		flds	s15, .L24+24
 831 054a 66EEA77A 		fmuls	s15, s13, s15
 832 054e 37EE677A 		fsubs	s14, s14, s15
 833 0552 DFED0D7A 		flds	s15, .L24+28
 834 0556 77EE277A 		fadds	s15, s14, s15
 835 055a 17EE903A 		fmrs	r3, s15
 836              	.LBE11:
 317:../src/main.cpp **** }
 837              		.loc 1 317 0
 838 055e 1846     		mov	r0, r3	@ float
 839 0560 07F11007 		add	r7, r7, #16
 840 0564 BD46     		mov	sp, r7
 841 0566 BDEC028B 		fldmfdd	sp!, {d8}
 842 056a 80BD     		pop	{r7, pc}
 843              	.L25:
 844              		.align	2
 845              	.L24:
 846 056c 4A03643A 		.word	979632970
 847 0570 C1CA213F 		.word	1059179201
 848 0574 27310041 		.word	1090531623
 849 0578 33332442 		.word	1109668659
 850 057c 6666DB42 		.word	1121674854
 851 0580 33B32443 		.word	1126478643
 852 0584 CDCC0A43 		.word	1124781261
 853 0588 C3F57042 		.word	1114699203
 854              		.cfi_endproc
 855              	.LFE113:
 857              		.align	2
 858              		.global	_Z19imu_update_ISR_initv
 859              		.thumb
 860              		.thumb_func
 862              	_Z19imu_update_ISR_initv:
 863              	.LFB114:
 318:../src/main.cpp **** 
 319:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 320:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 321:../src/main.cpp **** 
 322:../src/main.cpp **** void imu_update_ISR_init(void)
 323:../src/main.cpp **** {
 864              		.loc 1 323 0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 24
 867              		@ frame_needed = 1, uses_anonymous_args = 0
 868 058c 80B5     		push	{r7, lr}
 869              	.LCFI10:
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 058e 86B0     		sub	sp, sp, #24
 874              	.LCFI11:
 875              		.cfi_def_cfa_offset 32
 876 0590 00AF     		add	r7, sp, #0
 877              	.LCFI12:
 878              		.cfi_def_cfa_register 7
 879              	.LBB12:
 324:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 325:../src/main.cpp **** 
 326:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 880              		.loc 1 326 0
 881 0592 4FF00703 		mov	r3, #7
 882 0596 BB74     		strb	r3, [r7, #18]
 327:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 883              		.loc 1 327 0
 884 0598 4FF00003 		mov	r3, #0
 885 059c FB74     		strb	r3, [r7, #19]
 328:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 886              		.loc 1 328 0
 887 059e 4FF00003 		mov	r3, #0
 888 05a2 3B75     		strb	r3, [r7, #20]
 329:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 889              		.loc 1 329 0
 890 05a4 4FF00003 		mov	r3, #0
 891 05a8 7B75     		strb	r3, [r7, #21]
 330:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 892              		.loc 1 330 0
 893 05aa 4FF00003 		mov	r3, #0
 894 05ae BB75     		strb	r3, [r7, #22]
 331:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 895              		.loc 1 331 0
 896 05b0 4FF00003 		mov	r3, #0
 897 05b4 7B74     		strb	r3, [r7, #17]
 332:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 898              		.loc 1 332 0
 899 05b6 4FF00803 		mov	r3, #8
 900 05ba 3B74     		strb	r3, [r7, #16]
 333:../src/main.cpp **** 
 334:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 901              		.loc 1 334 0
 902 05bc 07F11003 		add	r3, r7, #16
 903 05c0 1846     		mov	r0, r3
 904 05c2 FFF7FEFF 		bl	L3GD20_Init
 335:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 905              		.loc 1 335 0
 906 05c6 FFF7FEFF 		bl	_Z14calc_gyro_biasv
 907 05ca 0346     		mov	r3, r0
 908 05cc 1A46     		mov	r2, r3
 909 05ce 40F20003 		movw	r3, #:lower16:gyro_bias_x
 910 05d2 C0F20003 		movt	r3, #:upper16:gyro_bias_x
 911 05d6 1A60     		str	r2, [r3, #0]
 336:../src/main.cpp **** 
 337:../src/main.cpp **** 	gyro_angle_x = 0;
 912              		.loc 1 337 0
 913 05d8 40F20003 		movw	r3, #:lower16:gyro_angle_x
 914 05dc C0F20003 		movt	r3, #:upper16:gyro_angle_x
 915 05e0 4FF00002 		mov	r2, #0
 916 05e4 1A60     		str	r2, [r3, #0]	@ float
 338:../src/main.cpp **** 
 339:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 340:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 341:../src/main.cpp **** 
 342:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 917              		.loc 1 342 0
 918 05e6 4FF01A03 		mov	r3, #26
 919 05ea 3B73     		strb	r3, [r7, #12]
 343:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 920              		.loc 1 343 0
 921 05ec 4FF00003 		mov	r3, #0
 922 05f0 7B73     		strb	r3, [r7, #13]
 344:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 923              		.loc 1 344 0
 924 05f2 4FF00003 		mov	r3, #0
 925 05f6 BB73     		strb	r3, [r7, #14]
 345:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 926              		.loc 1 345 0
 927 05f8 4FF00103 		mov	r3, #1
 928 05fc FB73     		strb	r3, [r7, #15]
 346:../src/main.cpp **** 
 347:../src/main.cpp **** 	NVIC_Init(&nv);
 929              		.loc 1 347 0
 930 05fe 07F10C03 		add	r3, r7, #12
 931 0602 1846     		mov	r0, r3
 932 0604 FFF7FEFF 		bl	NVIC_Init
 348:../src/main.cpp **** 
 349:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 933              		.loc 1 349 0
 934 0608 4FF48020 		mov	r0, #262144
 935 060c 4FF00101 		mov	r1, #1
 936 0610 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 350:../src/main.cpp **** 
 351:../src/main.cpp **** 	/*
 352:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 353:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 354:../src/main.cpp **** 	 * 	  Period -> ARR
 355:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 356:../src/main.cpp **** 	 */
 357:../src/main.cpp **** 
 358:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 937              		.loc 1 358 0
 938 0614 40F28F13 		movw	r3, #399
 939 0618 7B60     		str	r3, [r7, #4]
 359:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 940              		.loc 1 359 0
 941 061a 41F61F43 		movw	r3, #7199
 942 061e 3B80     		strh	r3, [r7, #0]	@ movhi
 360:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 943              		.loc 1 360 0
 944 0620 4FF00003 		mov	r3, #0
 945 0624 BB72     		strb	r3, [r7, #10]
 361:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 946              		.loc 1 361 0
 947 0626 4FF00003 		mov	r3, #0
 948 062a 3B81     		strh	r3, [r7, #8]	@ movhi
 362:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 949              		.loc 1 362 0
 950 062c 4FF00003 		mov	r3, #0
 951 0630 7B80     		strh	r3, [r7, #2]	@ movhi
 363:../src/main.cpp **** 
 364:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 952              		.loc 1 364 0
 953 0632 3B46     		mov	r3, r7
 954 0634 4FF49040 		mov	r0, #18432
 955 0638 C4F20100 		movt	r0, 16385
 956 063c 1946     		mov	r1, r3
 957 063e FFF7FEFF 		bl	TIM_TimeBaseInit
 365:../src/main.cpp **** 
 366:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 958              		.loc 1 366 0
 959 0642 4FF49040 		mov	r0, #18432
 960 0646 C4F20100 		movt	r0, 16385
 961 064a 4FF00101 		mov	r1, #1
 962 064e 4FF00102 		mov	r2, #1
 963 0652 FFF7FEFF 		bl	TIM_ITConfig
 367:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 964              		.loc 1 367 0
 965 0656 4FF49040 		mov	r0, #18432
 966 065a C4F20100 		movt	r0, 16385
 967 065e 4FF00101 		mov	r1, #1
 968 0662 FFF7FEFF 		bl	TIM_Cmd
 969              	.LBE12:
 368:../src/main.cpp **** }
 970              		.loc 1 368 0
 971 0666 07F11807 		add	r7, r7, #24
 972 066a BD46     		mov	sp, r7
 973 066c 80BD     		pop	{r7, pc}
 974              		.cfi_endproc
 975              	.LFE114:
 977              		.section	.rodata
 978 000e 0000     		.align	2
 979              	.LC1:
 980 0010 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 980      32302072 
 980      65616420 
 980      61747465 
 980      6D707420 
 981 0043 636F6465 		.ascii	"code!!!\012\015\000"
 981      2121210A 
 981      0D00
 982 004d 000000   		.text
 983 066e 00BF     		.align	2
 984              		.global	L3GD20_TIMEOUT_UserCallback
 985              		.thumb
 986              		.thumb_func
 988              	L3GD20_TIMEOUT_UserCallback:
 989              	.LFB115:
 369:../src/main.cpp **** 
 370:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 371:../src/main.cpp **** {
 990              		.loc 1 371 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 1, uses_anonymous_args = 0
 994 0670 80B5     		push	{r7, lr}
 995              	.LCFI13:
 996              		.cfi_def_cfa_offset 8
 997              		.cfi_offset 7, -8
 998              		.cfi_offset 14, -4
 999 0672 00AF     		add	r7, sp, #0
 1000              	.LCFI14:
 1001              		.cfi_def_cfa_register 7
 372:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 1002              		.loc 1 372 0
 1003 0674 40F20000 		movw	r0, #:lower16:.LC1
 1004 0678 C0F20000 		movt	r0, #:upper16:.LC1
 1005 067c FFF7FEFF 		bl	printf
 373:../src/main.cpp **** 	return 0;
 1006              		.loc 1 373 0
 1007 0680 4FF00003 		mov	r3, #0
 374:../src/main.cpp **** }
 1008              		.loc 1 374 0
 1009 0684 1846     		mov	r0, r3
 1010 0686 80BD     		pop	{r7, pc}
 1011              		.cfi_endproc
 1012              	.LFE115:
 1014              		.align	2
 1015              		.global	_Z15brake_pins_initv
 1016              		.thumb
 1017              		.thumb_func
 1019              	_Z15brake_pins_initv:
 1020              	.LFB116:
 375:../src/main.cpp **** 
 376:../src/main.cpp **** void brake_pins_init(void)
 377:../src/main.cpp **** {
 1021              		.loc 1 377 0
 1022              		.cfi_startproc
 1023              		@ args = 0, pretend = 0, frame = 8
 1024              		@ frame_needed = 1, uses_anonymous_args = 0
 1025 0688 80B5     		push	{r7, lr}
 1026              	.LCFI15:
 1027              		.cfi_def_cfa_offset 8
 1028              		.cfi_offset 7, -8
 1029              		.cfi_offset 14, -4
 1030 068a 82B0     		sub	sp, sp, #8
 1031              	.LCFI16:
 1032              		.cfi_def_cfa_offset 16
 1033 068c 00AF     		add	r7, sp, #0
 1034              	.LCFI17:
 1035              		.cfi_def_cfa_register 7
 1036              	.LBB13:
 378:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 1037              		.loc 1 378 0
 1038 068e 4FF40010 		mov	r0, #2097152
 1039 0692 4FF00101 		mov	r1, #1
 1040 0696 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 379:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 380:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1041              		.loc 1 380 0
 1042 069a 3B46     		mov	r3, r7
 1043 069c 1846     		mov	r0, r3
 1044 069e FFF7FEFF 		bl	GPIO_StructInit
 381:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1045              		.loc 1 381 0
 1046 06a2 4FF00C03 		mov	r3, #12
 1047 06a6 3B60     		str	r3, [r7, #0]
 382:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 1048              		.loc 1 382 0
 1049 06a8 4FF00003 		mov	r3, #0
 1050 06ac BB71     		strb	r3, [r7, #6]
 383:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 1051              		.loc 1 383 0
 1052 06ae 4FF00103 		mov	r3, #1
 1053 06b2 3B71     		strb	r3, [r7, #4]
 384:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1054              		.loc 1 384 0
 1055 06b4 4FF00003 		mov	r3, #0
 1056 06b8 FB71     		strb	r3, [r7, #7]
 385:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 1057              		.loc 1 385 0
 1058 06ba 4FF00203 		mov	r3, #2
 1059 06be 7B71     		strb	r3, [r7, #5]
 386:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 1060              		.loc 1 386 0
 1061 06c0 3B46     		mov	r3, r7
 1062 06c2 4FF48050 		mov	r0, #4096
 1063 06c6 C4F60000 		movt	r0, 18432
 1064 06ca 1946     		mov	r1, r3
 1065 06cc FFF7FEFF 		bl	GPIO_Init
 387:../src/main.cpp **** 
 388:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 1066              		.loc 1 388 0
 1067 06d0 4FF48050 		mov	r0, #4096
 1068 06d4 C4F60000 		movt	r0, 18432
 1069 06d8 4FF00401 		mov	r1, #4
 1070 06dc 4FF00002 		mov	r2, #0
 1071 06e0 FFF7FEFF 		bl	GPIO_WriteBit
 389:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 1072              		.loc 1 389 0
 1073 06e4 4FF48050 		mov	r0, #4096
 1074 06e8 C4F60000 		movt	r0, 18432
 1075 06ec 4FF00801 		mov	r1, #8
 1076 06f0 4FF00002 		mov	r2, #0
 1077 06f4 FFF7FEFF 		bl	GPIO_WriteBit
 1078              	.LBE13:
 390:../src/main.cpp **** }
 1079              		.loc 1 390 0
 1080 06f8 07F10807 		add	r7, r7, #8
 1081 06fc BD46     		mov	sp, r7
 1082 06fe 80BD     		pop	{r7, pc}
 1083              		.cfi_endproc
 1084              	.LFE116:
 1086              		.align	2
 1087              		.global	_Z13ping_pin_initv
 1088              		.thumb
 1089              		.thumb_func
 1091              	_Z13ping_pin_initv:
 1092              	.LFB117:
 391:../src/main.cpp **** /*
 392:../src/main.cpp ****  * PB0: OUTPUT
 393:../src/main.cpp ****  * PC1: INPUT
 394:../src/main.cpp ****  */
 395:../src/main.cpp **** void ping_pin_init(void)
 396:../src/main.cpp **** {
 1093              		.loc 1 396 0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 8
 1096              		@ frame_needed = 1, uses_anonymous_args = 0
 1097 0700 80B5     		push	{r7, lr}
 1098              	.LCFI18:
 1099              		.cfi_def_cfa_offset 8
 1100              		.cfi_offset 7, -8
 1101              		.cfi_offset 14, -4
 1102 0702 82B0     		sub	sp, sp, #8
 1103              	.LCFI19:
 1104              		.cfi_def_cfa_offset 16
 1105 0704 00AF     		add	r7, sp, #0
 1106              	.LCFI20:
 1107              		.cfi_def_cfa_register 7
 1108              	.LBB14:
 397:../src/main.cpp **** 
 398:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 1109              		.loc 1 398 0
 1110 0706 4FF48800 		mov	r0, #4456448
 1111 070a 4FF00101 		mov	r1, #1
 1112 070e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 399:../src/main.cpp **** 
 400:../src/main.cpp **** 	GPIO_InitTypeDef g;
 401:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 1113              		.loc 1 401 0
 1114 0712 4FF00003 		mov	r3, #0
 1115 0716 3B71     		strb	r3, [r7, #4]
 402:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 1116              		.loc 1 402 0
 1117 0718 4FF00103 		mov	r3, #1
 1118 071c BB71     		strb	r3, [r7, #6]
 403:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 1119              		.loc 1 403 0
 1120 071e 4FF40073 		mov	r3, #512
 1121 0722 3B60     		str	r3, [r7, #0]
 404:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1122              		.loc 1 404 0
 1123 0724 4FF00003 		mov	r3, #0
 1124 0728 FB71     		strb	r3, [r7, #7]
 405:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 1125              		.loc 1 405 0
 1126 072a 4FF00103 		mov	r3, #1
 1127 072e 7B71     		strb	r3, [r7, #5]
 406:../src/main.cpp **** 
 407:../src/main.cpp **** 	GPIO_Init(GPIOF, &g);
 1128              		.loc 1 407 0
 1129 0730 3B46     		mov	r3, r7
 1130 0732 4FF4A050 		mov	r0, #5120
 1131 0736 C4F60000 		movt	r0, 18432
 1132 073a 1946     		mov	r1, r3
 1133 073c FFF7FEFF 		bl	GPIO_Init
 408:../src/main.cpp **** 
 409:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 1134              		.loc 1 409 0
 1135 0740 4FF00103 		mov	r3, #1
 1136 0744 3B71     		strb	r3, [r7, #4]
 410:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1137              		.loc 1 410 0
 1138 0746 4FF00003 		mov	r3, #0
 1139 074a BB71     		strb	r3, [r7, #6]
 411:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 1140              		.loc 1 411 0
 1141 074c 4FF00103 		mov	r3, #1
 1142 0750 3B60     		str	r3, [r7, #0]
 412:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1143              		.loc 1 412 0
 1144 0752 4FF00003 		mov	r3, #0
 1145 0756 FB71     		strb	r3, [r7, #7]
 413:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 1146              		.loc 1 413 0
 1147 0758 4FF00103 		mov	r3, #1
 1148 075c 7B71     		strb	r3, [r7, #5]
 414:../src/main.cpp **** 
 415:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1149              		.loc 1 415 0
 1150 075e 3B46     		mov	r3, r7
 1151 0760 4FF48060 		mov	r0, #1024
 1152 0764 C4F60000 		movt	r0, 18432
 1153 0768 1946     		mov	r1, r3
 1154 076a FFF7FEFF 		bl	GPIO_Init
 416:../src/main.cpp **** 
 417:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1155              		.loc 1 417 0
 1156 076e 4FF00100 		mov	r0, #1
 1157 0772 4FF00101 		mov	r1, #1
 1158 0776 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 418:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 1159              		.loc 1 418 0
 1160 077a 4FF00500 		mov	r0, #5
 1161 077e 4FF00901 		mov	r1, #9
 1162 0782 FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 1163              	.LBE14:
 419:../src/main.cpp **** 
 420:../src/main.cpp **** }
 1164              		.loc 1 420 0
 1165 0786 07F10807 		add	r7, r7, #8
 1166 078a BD46     		mov	sp, r7
 1167 078c 80BD     		pop	{r7, pc}
 1168              		.cfi_endproc
 1169              	.LFE117:
 1171 078e 00BF     		.align	2
 1172              		.global	_Z20timer2_timebase_initv
 1173              		.thumb
 1174              		.thumb_func
 1176              	_Z20timer2_timebase_initv:
 1177              	.LFB118:
 421:../src/main.cpp **** 
 422:../src/main.cpp **** void timer2_timebase_init(void)
 423:../src/main.cpp **** {
 1178              		.loc 1 423 0
 1179              		.cfi_startproc
 1180              		@ args = 0, pretend = 0, frame = 16
 1181              		@ frame_needed = 1, uses_anonymous_args = 0
 1182 0790 80B5     		push	{r7, lr}
 1183              	.LCFI21:
 1184              		.cfi_def_cfa_offset 8
 1185              		.cfi_offset 7, -8
 1186              		.cfi_offset 14, -4
 1187 0792 84B0     		sub	sp, sp, #16
 1188              	.LCFI22:
 1189              		.cfi_def_cfa_offset 24
 1190 0794 00AF     		add	r7, sp, #0
 1191              	.LCFI23:
 1192              		.cfi_def_cfa_register 7
 1193              	.LBB15:
 424:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 425:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 1194              		.loc 1 425 0
 1195 0796 4FF00100 		mov	r0, #1
 1196 079a 4FF00101 		mov	r1, #1
 1197 079e FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 426:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 1198              		.loc 1 426 0
 1199 07a2 44F24F63 		movw	r3, #17999
 1200 07a6 BB60     		str	r3, [r7, #8]
 427:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 1201              		.loc 1 427 0
 1202 07a8 4FF00003 		mov	r3, #0
 1203 07ac BB73     		strb	r3, [r7, #14]
 428:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 1204              		.loc 1 428 0
 1205 07ae 4FF04703 		mov	r3, #71
 1206 07b2 BB80     		strh	r3, [r7, #4]	@ movhi
 429:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 1207              		.loc 1 429 0
 1208 07b4 4FF00003 		mov	r3, #0
 1209 07b8 BB81     		strh	r3, [r7, #12]	@ movhi
 430:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 1210              		.loc 1 430 0
 1211 07ba 4FF00003 		mov	r3, #0
 1212 07be FB80     		strh	r3, [r7, #6]	@ movhi
 431:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 1213              		.loc 1 431 0
 1214 07c0 07F10403 		add	r3, r7, #4
 1215 07c4 4FF08040 		mov	r0, #1073741824
 1216 07c8 1946     		mov	r1, r3
 1217 07ca FFF7FEFF 		bl	TIM_TimeBaseInit
 432:../src/main.cpp **** 
 433:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 1218              		.loc 1 433 0
 1219 07ce 4FF08040 		mov	r0, #1073741824
 1220 07d2 4FF00001 		mov	r1, #0
 1221 07d6 FFF7FEFF 		bl	TIM_SetCounter
 1222              	.LBE15:
 434:../src/main.cpp **** }
 1223              		.loc 1 434 0
 1224 07da 07F11007 		add	r7, r7, #16
 1225 07de BD46     		mov	sp, r7
 1226 07e0 80BD     		pop	{r7, pc}
 1227              		.cfi_endproc
 1228              	.LFE118:
 1230 07e2 00BF     		.align	2
 1231              		.global	_Z9comp_initv
 1232              		.thumb
 1233              		.thumb_func
 1235              	_Z9comp_initv:
 1236              	.LFB119:
 435:../src/main.cpp **** 
 436:../src/main.cpp **** /*
 437:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 438:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 439:../src/main.cpp ****  * 			Output->	PB9
 440:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 441:../src/main.cpp ****  * 			Output->	PA8
 442:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 443:../src/main.cpp ****  * 			Output->	PB1
 444:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 445:../src/main.cpp ****  * 			Output->	PC2
 446:../src/main.cpp ****  */
 447:../src/main.cpp **** 
 448:../src/main.cpp **** void comp_init(void)
 449:../src/main.cpp **** {
 1237              		.loc 1 449 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 40
 1240              		@ frame_needed = 1, uses_anonymous_args = 0
 1241 07e4 80B5     		push	{r7, lr}
 1242              	.LCFI24:
 1243              		.cfi_def_cfa_offset 8
 1244              		.cfi_offset 7, -8
 1245              		.cfi_offset 14, -4
 1246 07e6 8AB0     		sub	sp, sp, #40
 1247              	.LCFI25:
 1248              		.cfi_def_cfa_offset 48
 1249 07e8 00AF     		add	r7, sp, #0
 1250              	.LCFI26:
 1251              		.cfi_def_cfa_register 7
 1252              	.LBB16:
 450:../src/main.cpp **** 	//COMP2 Init:
 451:../src/main.cpp **** 
 452:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1253              		.loc 1 452 0
 1254 07ea 4FF00100 		mov	r0, #1
 1255 07ee 4FF00101 		mov	r1, #1
 1256 07f2 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 453:../src/main.cpp **** 
 454:../src/main.cpp **** 	GPIO_InitTypeDef g;
 455:../src/main.cpp **** 
 456:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1257              		.loc 1 456 0
 1258 07f6 4FF00303 		mov	r3, #3
 1259 07fa 87F82430 		strb	r3, [r7, #36]
 457:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1260              		.loc 1 457 0
 1261 07fe 4FF00003 		mov	r3, #0
 1262 0802 87F82730 		strb	r3, [r7, #39]
 458:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 1263              		.loc 1 458 0
 1264 0806 4FF08003 		mov	r3, #128
 1265 080a 3B62     		str	r3, [r7, #32]
 459:../src/main.cpp **** 
 460:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1266              		.loc 1 460 0
 1267 080c 4FF40030 		mov	r0, #131072
 1268 0810 4FF00101 		mov	r1, #1
 1269 0814 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 461:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 1270              		.loc 1 461 0
 1271 0818 07F12003 		add	r3, r7, #32
 1272 081c 4FF09040 		mov	r0, #1207959552
 1273 0820 1946     		mov	r1, r3
 1274 0822 FFF7FEFF 		bl	GPIO_Init
 462:../src/main.cpp **** 
 463:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1275              		.loc 1 463 0
 1276 0826 4FF00203 		mov	r3, #2
 1277 082a 87F82430 		strb	r3, [r7, #36]
 464:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1278              		.loc 1 464 0
 1279 082e 4FF00003 		mov	r3, #0
 1280 0832 87F82630 		strb	r3, [r7, #38]
 465:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1281              		.loc 1 465 0
 1282 0836 4FF00003 		mov	r3, #0
 1283 083a 87F82730 		strb	r3, [r7, #39]
 466:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 1284              		.loc 1 466 0
 1285 083e 4FF40073 		mov	r3, #512
 1286 0842 3B62     		str	r3, [r7, #32]
 467:../src/main.cpp **** 
 468:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 1287              		.loc 1 468 0
 1288 0844 4FF48060 		mov	r0, #1024
 1289 0848 C4F60000 		movt	r0, 18432
 1290 084c 4FF00901 		mov	r1, #9
 1291 0850 4FF00802 		mov	r2, #8
 1292 0854 FFF7FEFF 		bl	GPIO_PinAFConfig
 469:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1293              		.loc 1 469 0
 1294 0858 07F12003 		add	r3, r7, #32
 1295 085c 4FF48060 		mov	r0, #1024
 1296 0860 C4F60000 		movt	r0, 18432
 1297 0864 1946     		mov	r1, r3
 1298 0866 FFF7FEFF 		bl	GPIO_Init
 470:../src/main.cpp **** 
 471:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1299              		.loc 1 471 0
 1300 086a 4FF00000 		mov	r0, #0
 1301 086e FFF7FEFF 		bl	RCC_PCLK2Config
 472:../src/main.cpp **** 
 473:../src/main.cpp **** 	COMP_InitTypeDef c;
 474:../src/main.cpp **** 
 475:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1302              		.loc 1 475 0
 1303 0872 4FF03003 		mov	r3, #48
 1304 0876 7B60     		str	r3, [r7, #4]
 476:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1305              		.loc 1 476 0
 1306 0878 4FF00003 		mov	r3, #0
 1307 087c BB60     		str	r3, [r7, #8]
 477:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1308              		.loc 1 477 0
 1309 087e 4FF00403 		mov	r3, #4
 1310 0882 FB61     		str	r3, [r7, #28]
 478:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1311              		.loc 1 478 0
 1312 0884 4FF00003 		mov	r3, #0
 1313 0888 FB60     		str	r3, [r7, #12]
 479:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1314              		.loc 1 479 0
 1315 088a 4FF00003 		mov	r3, #0
 1316 088e 7B61     		str	r3, [r7, #20]
 480:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1317              		.loc 1 480 0
 1318 0890 4FF48033 		mov	r3, #65536
 1319 0894 BB61     		str	r3, [r7, #24]
 481:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1320              		.loc 1 481 0
 1321 0896 4FF00003 		mov	r3, #0
 1322 089a 3B61     		str	r3, [r7, #16]
 482:../src/main.cpp **** 
 483:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 1323              		.loc 1 483 0
 1324 089c 07F10403 		add	r3, r7, #4
 1325 08a0 4FF00400 		mov	r0, #4
 1326 08a4 1946     		mov	r1, r3
 1327 08a6 FFF7FEFF 		bl	COMP_Init
 484:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 1328              		.loc 1 484 0
 1329 08aa 4FF00400 		mov	r0, #4
 1330 08ae 4FF00101 		mov	r1, #1
 1331 08b2 FFF7FEFF 		bl	COMP_Cmd
 485:../src/main.cpp **** 
 486:../src/main.cpp **** 	//COMP3 Init:
 487:../src/main.cpp **** 
 488:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1332              		.loc 1 488 0
 1333 08b6 4FF00100 		mov	r0, #1
 1334 08ba 4FF00101 		mov	r1, #1
 1335 08be FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 489:../src/main.cpp **** 
 490:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1336              		.loc 1 490 0
 1337 08c2 4FF00303 		mov	r3, #3
 1338 08c6 87F82430 		strb	r3, [r7, #36]
 491:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1339              		.loc 1 491 0
 1340 08ca 4FF00003 		mov	r3, #0
 1341 08ce 87F82730 		strb	r3, [r7, #39]
 492:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 1342              		.loc 1 492 0
 1343 08d2 4FF48043 		mov	r3, #16384
 1344 08d6 3B62     		str	r3, [r7, #32]
 493:../src/main.cpp **** 
 494:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 1345              		.loc 1 494 0
 1346 08d8 4FF4C020 		mov	r0, #393216
 1347 08dc 4FF00101 		mov	r1, #1
 1348 08e0 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 495:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1349              		.loc 1 495 0
 1350 08e4 07F12003 		add	r3, r7, #32
 1351 08e8 4FF48060 		mov	r0, #1024
 1352 08ec C4F60000 		movt	r0, 18432
 1353 08f0 1946     		mov	r1, r3
 1354 08f2 FFF7FEFF 		bl	GPIO_Init
 496:../src/main.cpp **** 
 497:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1355              		.loc 1 497 0
 1356 08f6 4FF00203 		mov	r3, #2
 1357 08fa 87F82430 		strb	r3, [r7, #36]
 498:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1358              		.loc 1 498 0
 1359 08fe 4FF00003 		mov	r3, #0
 1360 0902 87F82630 		strb	r3, [r7, #38]
 499:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1361              		.loc 1 499 0
 1362 0906 4FF00003 		mov	r3, #0
 1363 090a 87F82730 		strb	r3, [r7, #39]
 500:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 1364              		.loc 1 500 0
 1365 090e 4FF48073 		mov	r3, #256
 1366 0912 3B62     		str	r3, [r7, #32]
 501:../src/main.cpp **** 
 502:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 1367              		.loc 1 502 0
 1368 0914 4FF40060 		mov	r0, #2048
 1369 0918 C4F60000 		movt	r0, 18432
 1370 091c 4FF00801 		mov	r1, #8
 1371 0920 4FF00702 		mov	r2, #7
 1372 0924 FFF7FEFF 		bl	GPIO_PinAFConfig
 503:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1373              		.loc 1 503 0
 1374 0928 07F12003 		add	r3, r7, #32
 1375 092c 4FF40060 		mov	r0, #2048
 1376 0930 C4F60000 		movt	r0, 18432
 1377 0934 1946     		mov	r1, r3
 1378 0936 FFF7FEFF 		bl	GPIO_Init
 504:../src/main.cpp **** 
 505:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1379              		.loc 1 505 0
 1380 093a 4FF00000 		mov	r0, #0
 1381 093e FFF7FEFF 		bl	RCC_PCLK2Config
 506:../src/main.cpp **** 
 507:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1382              		.loc 1 507 0
 1383 0942 4FF03003 		mov	r3, #48
 1384 0946 7B60     		str	r3, [r7, #4]
 508:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1385              		.loc 1 508 0
 1386 0948 4FF00003 		mov	r3, #0
 1387 094c BB60     		str	r3, [r7, #8]
 509:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1388              		.loc 1 509 0
 1389 094e 4FF00403 		mov	r3, #4
 1390 0952 FB61     		str	r3, [r7, #28]
 510:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1391              		.loc 1 510 0
 1392 0954 4FF00003 		mov	r3, #0
 1393 0958 FB60     		str	r3, [r7, #12]
 511:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1394              		.loc 1 511 0
 1395 095a 4FF00003 		mov	r3, #0
 1396 095e 7B61     		str	r3, [r7, #20]
 512:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1397              		.loc 1 512 0
 1398 0960 4FF48033 		mov	r3, #65536
 1399 0964 BB61     		str	r3, [r7, #24]
 513:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1400              		.loc 1 513 0
 1401 0966 4FF00003 		mov	r3, #0
 1402 096a 3B61     		str	r3, [r7, #16]
 514:../src/main.cpp **** 
 515:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 1403              		.loc 1 515 0
 1404 096c 07F10403 		add	r3, r7, #4
 1405 0970 4FF00800 		mov	r0, #8
 1406 0974 1946     		mov	r1, r3
 1407 0976 FFF7FEFF 		bl	COMP_Init
 516:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 1408              		.loc 1 516 0
 1409 097a 4FF00800 		mov	r0, #8
 1410 097e 4FF00101 		mov	r1, #1
 1411 0982 FFF7FEFF 		bl	COMP_Cmd
 517:../src/main.cpp **** 
 518:../src/main.cpp **** 	//COMP4 Init:
 519:../src/main.cpp **** 
 520:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1412              		.loc 1 520 0
 1413 0986 4FF00100 		mov	r0, #1
 1414 098a 4FF00101 		mov	r1, #1
 1415 098e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 521:../src/main.cpp **** 
 522:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1416              		.loc 1 522 0
 1417 0992 4FF00303 		mov	r3, #3
 1418 0996 87F82430 		strb	r3, [r7, #36]
 523:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1419              		.loc 1 523 0
 1420 099a 4FF00003 		mov	r3, #0
 1421 099e 87F82730 		strb	r3, [r7, #39]
 524:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 1422              		.loc 1 524 0
 1423 09a2 4FF08003 		mov	r3, #128
 1424 09a6 3B62     		str	r3, [r7, #32]
 525:../src/main.cpp **** 
 526:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 1425              		.loc 1 526 0
 1426 09a8 4FF41010 		mov	r0, #2359296
 1427 09ac 4FF00101 		mov	r1, #1
 1428 09b0 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 527:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 1429              		.loc 1 527 0
 1430 09b4 07F12003 		add	r3, r7, #32
 1431 09b8 4FF48050 		mov	r0, #4096
 1432 09bc C4F60000 		movt	r0, 18432
 1433 09c0 1946     		mov	r1, r3
 1434 09c2 FFF7FEFF 		bl	GPIO_Init
 528:../src/main.cpp **** 
 529:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1435              		.loc 1 529 0
 1436 09c6 4FF00203 		mov	r3, #2
 1437 09ca 87F82430 		strb	r3, [r7, #36]
 530:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1438              		.loc 1 530 0
 1439 09ce 4FF00003 		mov	r3, #0
 1440 09d2 87F82630 		strb	r3, [r7, #38]
 531:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1441              		.loc 1 531 0
 1442 09d6 4FF00003 		mov	r3, #0
 1443 09da 87F82730 		strb	r3, [r7, #39]
 532:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 1444              		.loc 1 532 0
 1445 09de 4FF00203 		mov	r3, #2
 1446 09e2 3B62     		str	r3, [r7, #32]
 533:../src/main.cpp **** 
 534:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 1447              		.loc 1 534 0
 1448 09e4 4FF48060 		mov	r0, #1024
 1449 09e8 C4F60000 		movt	r0, 18432
 1450 09ec 4FF00101 		mov	r1, #1
 1451 09f0 4FF00802 		mov	r2, #8
 1452 09f4 FFF7FEFF 		bl	GPIO_PinAFConfig
 535:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1453              		.loc 1 535 0
 1454 09f8 07F12003 		add	r3, r7, #32
 1455 09fc 4FF48060 		mov	r0, #1024
 1456 0a00 C4F60000 		movt	r0, 18432
 1457 0a04 1946     		mov	r1, r3
 1458 0a06 FFF7FEFF 		bl	GPIO_Init
 536:../src/main.cpp **** 
 537:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1459              		.loc 1 537 0
 1460 0a0a 4FF00000 		mov	r0, #0
 1461 0a0e FFF7FEFF 		bl	RCC_PCLK2Config
 538:../src/main.cpp **** 
 539:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1462              		.loc 1 539 0
 1463 0a12 4FF03003 		mov	r3, #48
 1464 0a16 7B60     		str	r3, [r7, #4]
 540:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1465              		.loc 1 540 0
 1466 0a18 4FF08003 		mov	r3, #128
 1467 0a1c BB60     		str	r3, [r7, #8]
 541:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1468              		.loc 1 541 0
 1469 0a1e 4FF00403 		mov	r3, #4
 1470 0a22 FB61     		str	r3, [r7, #28]
 542:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1471              		.loc 1 542 0
 1472 0a24 4FF00003 		mov	r3, #0
 1473 0a28 FB60     		str	r3, [r7, #12]
 543:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1474              		.loc 1 543 0
 1475 0a2a 4FF00003 		mov	r3, #0
 1476 0a2e 7B61     		str	r3, [r7, #20]
 544:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1477              		.loc 1 544 0
 1478 0a30 4FF48033 		mov	r3, #65536
 1479 0a34 BB61     		str	r3, [r7, #24]
 545:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1480              		.loc 1 545 0
 1481 0a36 4FF00003 		mov	r3, #0
 1482 0a3a 3B61     		str	r3, [r7, #16]
 546:../src/main.cpp **** 
 547:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 1483              		.loc 1 547 0
 1484 0a3c 07F10403 		add	r3, r7, #4
 1485 0a40 4FF00C00 		mov	r0, #12
 1486 0a44 1946     		mov	r1, r3
 1487 0a46 FFF7FEFF 		bl	COMP_Init
 548:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 1488              		.loc 1 548 0
 1489 0a4a 4FF00C00 		mov	r0, #12
 1490 0a4e 4FF00101 		mov	r1, #1
 1491 0a52 FFF7FEFF 		bl	COMP_Cmd
 549:../src/main.cpp **** 
 550:../src/main.cpp **** 	//COMP7 Init:
 551:../src/main.cpp **** 
 552:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1492              		.loc 1 552 0
 1493 0a56 4FF00100 		mov	r0, #1
 1494 0a5a 4FF00101 		mov	r1, #1
 1495 0a5e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 553:../src/main.cpp **** 
 554:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1496              		.loc 1 554 0
 1497 0a62 4FF00303 		mov	r3, #3
 1498 0a66 87F82430 		strb	r3, [r7, #36]
 555:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1499              		.loc 1 555 0
 1500 0a6a 4FF00003 		mov	r3, #0
 1501 0a6e 87F82730 		strb	r3, [r7, #39]
 556:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 1502              		.loc 1 556 0
 1503 0a72 4FF00203 		mov	r3, #2
 1504 0a76 3B62     		str	r3, [r7, #32]
 557:../src/main.cpp **** 
 558:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 1505              		.loc 1 558 0
 1506 0a78 4FF40020 		mov	r0, #524288
 1507 0a7c 4FF00101 		mov	r1, #1
 1508 0a80 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 559:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1509              		.loc 1 559 0
 1510 0a84 07F12003 		add	r3, r7, #32
 1511 0a88 4FF40060 		mov	r0, #2048
 1512 0a8c C4F60000 		movt	r0, 18432
 1513 0a90 1946     		mov	r1, r3
 1514 0a92 FFF7FEFF 		bl	GPIO_Init
 560:../src/main.cpp **** 
 561:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1515              		.loc 1 561 0
 1516 0a96 4FF00203 		mov	r3, #2
 1517 0a9a 87F82430 		strb	r3, [r7, #36]
 562:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1518              		.loc 1 562 0
 1519 0a9e 4FF00003 		mov	r3, #0
 1520 0aa2 87F82630 		strb	r3, [r7, #38]
 563:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1521              		.loc 1 563 0
 1522 0aa6 4FF00003 		mov	r3, #0
 1523 0aaa 87F82730 		strb	r3, [r7, #39]
 564:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 1524              		.loc 1 564 0
 1525 0aae 4FF00403 		mov	r3, #4
 1526 0ab2 3B62     		str	r3, [r7, #32]
 565:../src/main.cpp **** 
 566:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 1527              		.loc 1 566 0
 1528 0ab4 4FF40060 		mov	r0, #2048
 1529 0ab8 C4F60000 		movt	r0, 18432
 1530 0abc 4FF00201 		mov	r1, #2
 1531 0ac0 4FF00302 		mov	r2, #3
 1532 0ac4 FFF7FEFF 		bl	GPIO_PinAFConfig
 567:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1533              		.loc 1 567 0
 1534 0ac8 07F12003 		add	r3, r7, #32
 1535 0acc 4FF40060 		mov	r0, #2048
 1536 0ad0 C4F60000 		movt	r0, 18432
 1537 0ad4 1946     		mov	r1, r3
 1538 0ad6 FFF7FEFF 		bl	GPIO_Init
 568:../src/main.cpp **** 
 569:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1539              		.loc 1 569 0
 1540 0ada 4FF00000 		mov	r0, #0
 1541 0ade FFF7FEFF 		bl	RCC_PCLK2Config
 570:../src/main.cpp **** 
 571:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1542              		.loc 1 571 0
 1543 0ae2 4FF03003 		mov	r3, #48
 1544 0ae6 7B60     		str	r3, [r7, #4]
 572:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1545              		.loc 1 572 0
 1546 0ae8 4FF08003 		mov	r3, #128
 1547 0aec BB60     		str	r3, [r7, #8]
 573:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1548              		.loc 1 573 0
 1549 0aee 4FF00403 		mov	r3, #4
 1550 0af2 FB61     		str	r3, [r7, #28]
 574:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1551              		.loc 1 574 0
 1552 0af4 4FF00003 		mov	r3, #0
 1553 0af8 FB60     		str	r3, [r7, #12]
 575:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1554              		.loc 1 575 0
 1555 0afa 4FF00003 		mov	r3, #0
 1556 0afe 7B61     		str	r3, [r7, #20]
 576:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1557              		.loc 1 576 0
 1558 0b00 4FF48033 		mov	r3, #65536
 1559 0b04 BB61     		str	r3, [r7, #24]
 577:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1560              		.loc 1 577 0
 1561 0b06 4FF00003 		mov	r3, #0
 1562 0b0a 3B61     		str	r3, [r7, #16]
 578:../src/main.cpp **** 
 579:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 1563              		.loc 1 579 0
 1564 0b0c 07F10403 		add	r3, r7, #4
 1565 0b10 4FF01800 		mov	r0, #24
 1566 0b14 1946     		mov	r1, r3
 1567 0b16 FFF7FEFF 		bl	COMP_Init
 580:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 1568              		.loc 1 580 0
 1569 0b1a 4FF01800 		mov	r0, #24
 1570 0b1e 4FF00101 		mov	r1, #1
 1571 0b22 FFF7FEFF 		bl	COMP_Cmd
 1572              	.LBE16:
 581:../src/main.cpp **** }
 1573              		.loc 1 581 0
 1574 0b26 07F12807 		add	r7, r7, #40
 1575 0b2a BD46     		mov	sp, r7
 1576 0b2c 80BD     		pop	{r7, pc}
 1577              		.cfi_endproc
 1578              	.LFE119:
 1580 0b2e 00BF     		.align	2
 1581              		.global	_Z14calc_gyro_biasv
 1582              		.thumb
 1583              		.thumb_func
 1585              	_Z14calc_gyro_biasv:
 1586              	.LFB120:
 582:../src/main.cpp **** 
 583:../src/main.cpp **** int16_t calc_gyro_bias(void)
 584:../src/main.cpp **** {
 1587              		.loc 1 584 0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 16
 1590              		@ frame_needed = 1, uses_anonymous_args = 0
 1591 0b30 80B5     		push	{r7, lr}
 1592              	.LCFI27:
 1593              		.cfi_def_cfa_offset 8
 1594              		.cfi_offset 7, -8
 1595              		.cfi_offset 14, -4
 1596 0b32 84B0     		sub	sp, sp, #16
 1597              	.LCFI28:
 1598              		.cfi_def_cfa_offset 24
 1599 0b34 00AF     		add	r7, sp, #0
 1600              	.LCFI29:
 1601              		.cfi_def_cfa_register 7
 1602              	.LBB17:
 585:../src/main.cpp **** 	int i = 0;
 1603              		.loc 1 585 0
 1604 0b36 4FF00003 		mov	r3, #0
 1605 0b3a FB60     		str	r3, [r7, #12]
 586:../src/main.cpp **** 	int accum_x = 0;
 1606              		.loc 1 586 0
 1607 0b3c 4FF00003 		mov	r3, #0
 1608 0b40 BB60     		str	r3, [r7, #8]
 587:../src/main.cpp **** 
 588:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 589:../src/main.cpp **** 		uint16_t un_signed;
 590:../src/main.cpp **** 		int16_t output;
 591:../src/main.cpp **** 	} convert;
 592:../src/main.cpp **** 
 593:../src/main.cpp **** 	uint8_t bytes[2];
 594:../src/main.cpp **** 
 595:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1609              		.loc 1 595 0
 1610 0b42 4FF00003 		mov	r3, #0
 1611 0b46 FB60     		str	r3, [r7, #12]
 1612 0b48 19E0     		b	.L34
 1613              	.L35:
 596:../src/main.cpp **** 	{
 597:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1614              		.loc 1 597 0 discriminator 2
 1615 0b4a 3B46     		mov	r3, r7
 1616 0b4c 1846     		mov	r0, r3
 1617 0b4e 4FF02801 		mov	r1, #40
 1618 0b52 4FF00202 		mov	r2, #2
 1619 0b56 FFF7FEFF 		bl	L3GD20_Read
 598:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1620              		.loc 1 598 0 discriminator 2
 1621 0b5a 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1622 0b5c 4FEA0323 		lsl	r3, r3, #8
 1623 0b60 9AB2     		uxth	r2, r3
 1624 0b62 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1625 0b64 1343     		orrs	r3, r3, r2
 1626 0b66 9BB2     		uxth	r3, r3
 1627 0b68 9BB2     		uxth	r3, r3
 1628 0b6a BB80     		strh	r3, [r7, #4]	@ movhi
 599:../src/main.cpp **** 		accum_x += convert.output;
 1629              		.loc 1 599 0 discriminator 2
 1630 0b6c BB88     		ldrh	r3, [r7, #4]
 1631 0b6e 1BB2     		sxth	r3, r3
 1632 0b70 BA68     		ldr	r2, [r7, #8]
 1633 0b72 D318     		adds	r3, r2, r3
 1634 0b74 BB60     		str	r3, [r7, #8]
 595:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1635              		.loc 1 595 0 discriminator 2
 1636 0b76 FB68     		ldr	r3, [r7, #12]
 1637 0b78 03F10103 		add	r3, r3, #1
 1638 0b7c FB60     		str	r3, [r7, #12]
 1639              	.L34:
 595:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1640              		.loc 1 595 0 is_stmt 0 discriminator 1
 1641 0b7e FB68     		ldr	r3, [r7, #12]
 1642 0b80 F92B     		cmp	r3, #249
 1643 0b82 CCBF     		ite	gt
 1644 0b84 0023     		movgt	r3, #0
 1645 0b86 0123     		movle	r3, #1
 1646 0b88 DBB2     		uxtb	r3, r3
 1647 0b8a 002B     		cmp	r3, #0
 1648 0b8c DDD1     		bne	.L35
 600:../src/main.cpp **** 	}
 601:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1649              		.loc 1 601 0 is_stmt 1
 1650 0b8e D7ED027A 		flds	s15, [r7, #8]	@ int
 1651 0b92 B8EEE77A 		fsitos	s14, s15
 1652 0b96 DFED077A 		flds	s15, .L37
 1653 0b9a C7EE277A 		fdivs	s15, s14, s15
 1654 0b9e FDEEE77A 		ftosizs	s15, s15
 1655 0ba2 17EE903A 		fmrs	r3, s15	@ int
 1656 0ba6 9BB2     		uxth	r3, r3
 1657 0ba8 1BB2     		sxth	r3, r3
 1658              	.LBE17:
 602:../src/main.cpp **** }
 1659              		.loc 1 602 0
 1660 0baa 1846     		mov	r0, r3
 1661 0bac 07F11007 		add	r7, r7, #16
 1662 0bb0 BD46     		mov	sp, r7
 1663 0bb2 80BD     		pop	{r7, pc}
 1664              	.L38:
 1665              		.align	2
 1666              	.L37:
 1667 0bb4 00007A43 		.word	1132068864
 1668              		.cfi_endproc
 1669              	.LFE120:
 1671              		.align	2
 1672              		.global	_Z13adc1_init_DMAv
 1673              		.thumb
 1674              		.thumb_func
 1676              	_Z13adc1_init_DMAv:
 1677              	.LFB121:
 603:../src/main.cpp **** 
 604:../src/main.cpp **** /*
 605:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 606:../src/main.cpp ****  * a user-supplied location in memory
 607:../src/main.cpp ****  * @Args: None
 608:../src/main.cpp ****  * @Return Val: None
 609:../src/main.cpp ****  */
 610:../src/main.cpp **** 
 611:../src/main.cpp **** void adc1_init_DMA(void)
 612:../src/main.cpp **** {
 1678              		.loc 1 612 0
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 112
 1681              		@ frame_needed = 1, uses_anonymous_args = 0
 1682 0bb8 80B5     		push	{r7, lr}
 1683              	.LCFI30:
 1684              		.cfi_def_cfa_offset 8
 1685              		.cfi_offset 7, -8
 1686              		.cfi_offset 14, -4
 1687 0bba 9CB0     		sub	sp, sp, #112
 1688              	.LCFI31:
 1689              		.cfi_def_cfa_offset 120
 1690 0bbc 00AF     		add	r7, sp, #0
 1691              	.LCFI32:
 1692              		.cfi_def_cfa_register 7
 1693              	.LBB18:
 613:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 614:../src/main.cpp **** 
 615:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 616:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 617:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 618:../src/main.cpp **** 
 619:../src/main.cpp **** 	/* Configure the ADC clock */
 620:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1694              		.loc 1 620 0
 1695 0bbe 4FF48870 		mov	r0, #272
 1696 0bc2 FFF7FEFF 		bl	RCC_ADCCLKConfig
 621:../src/main.cpp **** 	/* Enable ADC1 clock */
 622:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1697              		.loc 1 622 0
 1698 0bc6 4FF08050 		mov	r0, #268435456
 1699 0bca 4FF00101 		mov	r1, #1
 1700 0bce FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 623:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 624:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1701              		.loc 1 624 0
 1702 0bd2 4FF40030 		mov	r0, #131072
 1703 0bd6 4FF00101 		mov	r1, #1
 1704 0bda FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 625:../src/main.cpp **** 
 626:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 627:../src/main.cpp **** 
 628:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1705              		.loc 1 628 0
 1706 0bde 07F15003 		add	r3, r7, #80
 1707 0be2 1846     		mov	r0, r3
 1708 0be4 FFF7FEFF 		bl	GPIO_StructInit
 629:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1709              		.loc 1 629 0
 1710 0be8 4FF00C03 		mov	r3, #12
 1711 0bec 3B65     		str	r3, [r7, #80]
 630:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1712              		.loc 1 630 0
 1713 0bee 4FF00303 		mov	r3, #3
 1714 0bf2 87F85430 		strb	r3, [r7, #84]
 631:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1715              		.loc 1 631 0
 1716 0bf6 4FF00003 		mov	r3, #0
 1717 0bfa 87F85730 		strb	r3, [r7, #87]
 632:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1718              		.loc 1 632 0
 1719 0bfe 07F15003 		add	r3, r7, #80
 1720 0c02 4FF09040 		mov	r0, #1207959552
 1721 0c06 1946     		mov	r1, r3
 1722 0c08 FFF7FEFF 		bl	GPIO_Init
 633:../src/main.cpp **** 
 634:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1723              		.loc 1 634 0
 1724 0c0c 3B46     		mov	r3, r7
 1725 0c0e 1846     		mov	r0, r3
 1726 0c10 FFF7FEFF 		bl	ADC_StructInit
 635:../src/main.cpp **** 
 636:../src/main.cpp **** 	/* Calibration procedure */
 637:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1727              		.loc 1 637 0
 1728 0c14 4FF0A040 		mov	r0, #1342177280
 1729 0c18 4FF00101 		mov	r1, #1
 1730 0c1c FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 638:../src/main.cpp **** 
 639:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 640:../src/main.cpp **** 	int foo;
 641:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1731              		.loc 1 641 0
 1732 0c20 4FF00003 		mov	r3, #0
 1733 0c24 FB66     		str	r3, [r7, #108]
 1734 0c26 07E0     		b	.L40
 1735              	.L41:
 642:../src/main.cpp **** 	{
 643:../src/main.cpp **** 	  ++foo;
 1736              		.loc 1 643 0 discriminator 2
 1737 0c28 FB6E     		ldr	r3, [r7, #108]
 1738 0c2a 03F10103 		add	r3, r3, #1
 1739 0c2e FB66     		str	r3, [r7, #108]
 641:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1740              		.loc 1 641 0 discriminator 2
 1741 0c30 FB6E     		ldr	r3, [r7, #108]
 1742 0c32 03F10103 		add	r3, r3, #1
 1743 0c36 FB66     		str	r3, [r7, #108]
 1744              	.L40:
 641:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1745              		.loc 1 641 0 is_stmt 0 discriminator 1
 1746 0c38 FA6E     		ldr	r2, [r7, #108]
 1747 0c3a 4FF6FF13 		movw	r3, #63999
 1748 0c3e 9A42     		cmp	r2, r3
 1749 0c40 CCBF     		ite	gt
 1750 0c42 0023     		movgt	r3, #0
 1751 0c44 0123     		movle	r3, #1
 1752 0c46 DBB2     		uxtb	r3, r3
 1753 0c48 002B     		cmp	r3, #0
 1754 0c4a EDD1     		bne	.L41
 644:../src/main.cpp **** 	}
 645:../src/main.cpp **** 
 646:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1755              		.loc 1 646 0 is_stmt 1
 1756 0c4c 4FF0A040 		mov	r0, #1342177280
 1757 0c50 4FF00001 		mov	r1, #0
 1758 0c54 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 647:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1759              		.loc 1 647 0
 1760 0c58 4FF0A040 		mov	r0, #1342177280
 1761 0c5c FFF7FEFF 		bl	ADC_StartCalibration
 648:../src/main.cpp **** 
 649:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1762              		.loc 1 649 0
 1763 0c60 00BF     		nop
 1764              	.L42:
 1765              		.loc 1 649 0 is_stmt 0 discriminator 1
 1766 0c62 4FF0A040 		mov	r0, #1342177280
 1767 0c66 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1768 0c6a 0346     		mov	r3, r0
 1769 0c6c 002B     		cmp	r3, #0
 1770 0c6e 0CBF     		ite	eq
 1771 0c70 0023     		moveq	r3, #0
 1772 0c72 0123     		movne	r3, #1
 1773 0c74 DBB2     		uxtb	r3, r3
 1774 0c76 002B     		cmp	r3, #0
 1775 0c78 F3D1     		bne	.L42
 650:../src/main.cpp **** 
 651:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1776              		.loc 1 651 0 is_stmt 1
 1777 0c7a 4FF00003 		mov	r3, #0
 1778 0c7e BB65     		str	r3, [r7, #88]
 652:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 1779              		.loc 1 652 0
 1780 0c80 4FF00003 		mov	r3, #0
 1781 0c84 FB65     		str	r3, [r7, #92]
 653:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1782              		.loc 1 653 0
 1783 0c86 4FF40043 		mov	r3, #32768
 1784 0c8a 3B66     		str	r3, [r7, #96]
 654:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1785              		.loc 1 654 0
 1786 0c8c 4FF00203 		mov	r3, #2
 1787 0c90 7B66     		str	r3, [r7, #100]
 655:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1788              		.loc 1 655 0
 1789 0c92 4FF00F03 		mov	r3, #15
 1790 0c96 87F86830 		strb	r3, [r7, #104]
 656:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1791              		.loc 1 656 0
 1792 0c9a 07F15803 		add	r3, r7, #88
 1793 0c9e 4FF0A040 		mov	r0, #1342177280
 1794 0ca2 1946     		mov	r1, r3
 1795 0ca4 FFF7FEFF 		bl	ADC_CommonInit
 657:../src/main.cpp **** 
 658:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1796              		.loc 1 658 0
 1797 0ca8 4FF40053 		mov	r3, #8192
 1798 0cac 3B60     		str	r3, [r7, #0]
 659:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1799              		.loc 1 659 0
 1800 0cae 4FF00003 		mov	r3, #0
 1801 0cb2 7B60     		str	r3, [r7, #4]
 660:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1802              		.loc 1 660 0
 1803 0cb4 4FF00003 		mov	r3, #0
 1804 0cb8 BB60     		str	r3, [r7, #8]
 661:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1805              		.loc 1 661 0
 1806 0cba 4FF00003 		mov	r3, #0
 1807 0cbe FB60     		str	r3, [r7, #12]
 662:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1808              		.loc 1 662 0
 1809 0cc0 4FF00003 		mov	r3, #0
 1810 0cc4 3B61     		str	r3, [r7, #16]
 663:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1811              		.loc 1 663 0
 1812 0cc6 4FF00003 		mov	r3, #0
 1813 0cca 7B61     		str	r3, [r7, #20]
 664:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1814              		.loc 1 664 0
 1815 0ccc 4FF00003 		mov	r3, #0
 1816 0cd0 BB61     		str	r3, [r7, #24]
 665:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1817              		.loc 1 665 0
 1818 0cd2 4FF00203 		mov	r3, #2
 1819 0cd6 3B77     		strb	r3, [r7, #28]
 666:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1820              		.loc 1 666 0
 1821 0cd8 3B46     		mov	r3, r7
 1822 0cda 4FF0A040 		mov	r0, #1342177280
 1823 0cde 1946     		mov	r1, r3
 1824 0ce0 FFF7FEFF 		bl	ADC_Init
 667:../src/main.cpp **** 
 668:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 669:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1825              		.loc 1 669 0
 1826 0ce4 4FF0A040 		mov	r0, #1342177280
 1827 0ce8 4FF00301 		mov	r1, #3
 1828 0cec 4FF00102 		mov	r2, #1
 1829 0cf0 4FF00703 		mov	r3, #7
 1830 0cf4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 670:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1831              		.loc 1 670 0
 1832 0cf8 4FF0A040 		mov	r0, #1342177280
 1833 0cfc 4FF00401 		mov	r1, #4
 1834 0d00 4FF00202 		mov	r2, #2
 1835 0d04 4FF00703 		mov	r3, #7
 1836 0d08 FFF7FEFF 		bl	ADC_RegularChannelConfig
 671:../src/main.cpp **** 
 672:../src/main.cpp **** 	/* Enable ADC1 */
 673:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1837              		.loc 1 673 0
 1838 0d0c 4FF0A040 		mov	r0, #1342177280
 1839 0d10 4FF00101 		mov	r1, #1
 1840 0d14 FFF7FEFF 		bl	ADC_Cmd
 674:../src/main.cpp **** 
 675:../src/main.cpp **** 	/* wait for ADRDY */
 676:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1841              		.loc 1 676 0
 1842 0d18 00BF     		nop
 1843              	.L43:
 1844              		.loc 1 676 0 is_stmt 0 discriminator 1
 1845 0d1a 4FF0A040 		mov	r0, #1342177280
 1846 0d1e 4FF00101 		mov	r1, #1
 1847 0d22 FFF7FEFF 		bl	ADC_GetFlagStatus
 1848 0d26 0346     		mov	r3, r0
 1849 0d28 002B     		cmp	r3, #0
 1850 0d2a 14BF     		ite	ne
 1851 0d2c 0023     		movne	r3, #0
 1852 0d2e 0123     		moveq	r3, #1
 1853 0d30 DBB2     		uxtb	r3, r3
 1854 0d32 002B     		cmp	r3, #0
 1855 0d34 F1D1     		bne	.L43
 677:../src/main.cpp **** 
 678:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 679:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1856              		.loc 1 679 0 is_stmt 1
 1857 0d36 4FF0A040 		mov	r0, #1342177280
 1858 0d3a FFF7FEFF 		bl	ADC_StartConversion
 680:../src/main.cpp **** 
 681:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1859              		.loc 1 681 0
 1860 0d3e 4FF00100 		mov	r0, #1
 1861 0d42 4FF00101 		mov	r1, #1
 1862 0d46 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 682:../src/main.cpp **** 
 683:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 684:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1863              		.loc 1 684 0
 1864 0d4a 07F12003 		add	r3, r7, #32
 1865 0d4e 1846     		mov	r0, r3
 1866 0d50 FFF7FEFF 		bl	DMA_StructInit
 685:../src/main.cpp **** 
 686:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1867              		.loc 1 686 0
 1868 0d54 4FF00800 		mov	r0, #8
 1869 0d58 C4F20200 		movt	r0, 16386
 1870 0d5c FFF7FEFF 		bl	DMA_DeInit
 687:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1871              		.loc 1 687 0
 1872 0d60 4FF04003 		mov	r3, #64
 1873 0d64 C5F20003 		movt	r3, 20480
 1874 0d68 3B62     		str	r3, [r7, #32]
 688:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1875              		.loc 1 688 0
 1876 0d6a 40F20003 		movw	r3, #:lower16:adcData
 1877 0d6e C0F20003 		movt	r3, #:upper16:adcData
 1878 0d72 7B62     		str	r3, [r7, #36]
 689:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1879              		.loc 1 689 0
 1880 0d74 4FF00003 		mov	r3, #0
 1881 0d78 BB62     		str	r3, [r7, #40]
 690:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1882              		.loc 1 690 0
 1883 0d7a 4FF00203 		mov	r3, #2
 1884 0d7e BB85     		strh	r3, [r7, #44]	@ movhi
 691:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1885              		.loc 1 691 0
 1886 0d80 4FF00003 		mov	r3, #0
 1887 0d84 3B63     		str	r3, [r7, #48]
 692:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1888              		.loc 1 692 0
 1889 0d86 4FF08003 		mov	r3, #128
 1890 0d8a 7B63     		str	r3, [r7, #52]
 693:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1891              		.loc 1 693 0
 1892 0d8c 4FF40073 		mov	r3, #512
 1893 0d90 BB63     		str	r3, [r7, #56]
 694:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1894              		.loc 1 694 0
 1895 0d92 4FF40063 		mov	r3, #2048
 1896 0d96 FB63     		str	r3, [r7, #60]
 695:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1897              		.loc 1 695 0
 1898 0d98 4FF02003 		mov	r3, #32
 1899 0d9c 3B64     		str	r3, [r7, #64]
 696:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1900              		.loc 1 696 0
 1901 0d9e 4FF40053 		mov	r3, #8192
 1902 0da2 7B64     		str	r3, [r7, #68]
 697:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1903              		.loc 1 697 0
 1904 0da4 4FF00003 		mov	r3, #0
 1905 0da8 BB64     		str	r3, [r7, #72]
 698:../src/main.cpp **** 
 699:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1906              		.loc 1 699 0
 1907 0daa 07F12003 		add	r3, r7, #32
 1908 0dae 4FF00800 		mov	r0, #8
 1909 0db2 C4F20200 		movt	r0, 16386
 1910 0db6 1946     		mov	r1, r3
 1911 0db8 FFF7FEFF 		bl	DMA_Init
 700:../src/main.cpp **** 
 701:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 702:../src/main.cpp **** 
 703:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1912              		.loc 1 703 0
 1913 0dbc 4FF00B03 		mov	r3, #11
 1914 0dc0 87F84C30 		strb	r3, [r7, #76]
 704:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1915              		.loc 1 704 0
 1916 0dc4 4FF00203 		mov	r3, #2
 1917 0dc8 87F84D30 		strb	r3, [r7, #77]
 705:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1918              		.loc 1 705 0
 1919 0dcc 4FF00003 		mov	r3, #0
 1920 0dd0 87F84E30 		strb	r3, [r7, #78]
 706:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1921              		.loc 1 706 0
 1922 0dd4 4FF00103 		mov	r3, #1
 1923 0dd8 87F84F30 		strb	r3, [r7, #79]
 707:../src/main.cpp **** 
 708:../src/main.cpp **** 	NVIC_Init(&nv);
 1924              		.loc 1 708 0
 1925 0ddc 07F14C03 		add	r3, r7, #76
 1926 0de0 1846     		mov	r0, r3
 1927 0de2 FFF7FEFF 		bl	NVIC_Init
 709:../src/main.cpp **** 
 710:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1928              		.loc 1 710 0
 1929 0de6 4FF00800 		mov	r0, #8
 1930 0dea C4F20200 		movt	r0, 16386
 1931 0dee 4FF00201 		mov	r1, #2
 1932 0df2 4FF00102 		mov	r2, #1
 1933 0df6 FFF7FEFF 		bl	DMA_ITConfig
 711:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1934              		.loc 1 711 0
 1935 0dfa 4FF00800 		mov	r0, #8
 1936 0dfe C4F20200 		movt	r0, 16386
 1937 0e02 4FF00101 		mov	r1, #1
 1938 0e06 FFF7FEFF 		bl	DMA_Cmd
 712:../src/main.cpp **** 
 713:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1939              		.loc 1 713 0
 1940 0e0a 4FF0A040 		mov	r0, #1342177280
 1941 0e0e 4FF00201 		mov	r1, #2
 1942 0e12 FFF7FEFF 		bl	ADC_DMAConfig
 714:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1943              		.loc 1 714 0
 1944 0e16 4FF0A040 		mov	r0, #1342177280
 1945 0e1a 4FF00101 		mov	r1, #1
 1946 0e1e FFF7FEFF 		bl	ADC_DMACmd
 1947              	.LBE18:
 715:../src/main.cpp **** }
 1948              		.loc 1 715 0
 1949 0e22 07F17007 		add	r7, r7, #112
 1950 0e26 BD46     		mov	sp, r7
 1951 0e28 80BD     		pop	{r7, pc}
 1952              		.cfi_endproc
 1953              	.LFE121:
 1955 0e2a 00BF     		.align	2
 1956              		.global	_Z13adc2_init_DMAv
 1957              		.thumb
 1958              		.thumb_func
 1960              	_Z13adc2_init_DMAv:
 1961              	.LFB122:
 716:../src/main.cpp **** 
 717:../src/main.cpp **** void adc2_init_DMA(void)
 718:../src/main.cpp **** {
 1962              		.loc 1 718 0
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 112
 1965              		@ frame_needed = 1, uses_anonymous_args = 0
 1966 0e2c 80B5     		push	{r7, lr}
 1967              	.LCFI33:
 1968              		.cfi_def_cfa_offset 8
 1969              		.cfi_offset 7, -8
 1970              		.cfi_offset 14, -4
 1971 0e2e 9CB0     		sub	sp, sp, #112
 1972              	.LCFI34:
 1973              		.cfi_def_cfa_offset 120
 1974 0e30 00AF     		add	r7, sp, #0
 1975              	.LCFI35:
 1976              		.cfi_def_cfa_register 7
 1977              	.LBB19:
 719:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 720:../src/main.cpp **** 
 721:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 722:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 723:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 724:../src/main.cpp **** 
 725:../src/main.cpp **** 	/* Configure the ADC clock */
 726:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1978              		.loc 1 726 0
 1979 0e32 4FF48870 		mov	r0, #272
 1980 0e36 FFF7FEFF 		bl	RCC_ADCCLKConfig
 727:../src/main.cpp **** 	/* Enable ADC2 clock */
 728:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1981              		.loc 1 728 0
 1982 0e3a 4FF08050 		mov	r0, #268435456
 1983 0e3e 4FF00101 		mov	r1, #1
 1984 0e42 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 729:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 730:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1985              		.loc 1 730 0
 1986 0e46 4FF46020 		mov	r0, #917504
 1987 0e4a 4FF00101 		mov	r1, #1
 1988 0e4e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 731:../src/main.cpp **** 
 732:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 733:../src/main.cpp **** 
 734:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1989              		.loc 1 734 0
 1990 0e52 07F15003 		add	r3, r7, #80
 1991 0e56 1846     		mov	r0, r3
 1992 0e58 FFF7FEFF 		bl	GPIO_StructInit
 735:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1993              		.loc 1 735 0
 1994 0e5c 4FF01003 		mov	r3, #16
 1995 0e60 3B65     		str	r3, [r7, #80]
 736:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1996              		.loc 1 736 0
 1997 0e62 4FF00303 		mov	r3, #3
 1998 0e66 87F85430 		strb	r3, [r7, #84]
 737:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1999              		.loc 1 737 0
 2000 0e6a 4FF00003 		mov	r3, #0
 2001 0e6e 87F85730 		strb	r3, [r7, #87]
 738:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 2002              		.loc 1 738 0
 2003 0e72 4FF00303 		mov	r3, #3
 2004 0e76 87F85530 		strb	r3, [r7, #85]
 739:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2005              		.loc 1 739 0
 2006 0e7a 07F15003 		add	r3, r7, #80
 2007 0e7e 4FF09040 		mov	r0, #1207959552
 2008 0e82 1946     		mov	r1, r3
 2009 0e84 FFF7FEFF 		bl	GPIO_Init
 740:../src/main.cpp **** 
 741:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2010              		.loc 1 741 0
 2011 0e88 07F15003 		add	r3, r7, #80
 2012 0e8c 1846     		mov	r0, r3
 2013 0e8e FFF7FEFF 		bl	GPIO_StructInit
 742:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2014              		.loc 1 742 0
 2015 0e92 4FF00403 		mov	r3, #4
 2016 0e96 3B65     		str	r3, [r7, #80]
 743:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2017              		.loc 1 743 0
 2018 0e98 4FF00303 		mov	r3, #3
 2019 0e9c 87F85430 		strb	r3, [r7, #84]
 744:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2020              		.loc 1 744 0
 2021 0ea0 4FF00003 		mov	r3, #0
 2022 0ea4 87F85730 		strb	r3, [r7, #87]
 745:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2023              		.loc 1 745 0
 2024 0ea8 07F15003 		add	r3, r7, #80
 2025 0eac 4FF48060 		mov	r0, #1024
 2026 0eb0 C4F60000 		movt	r0, 18432
 2027 0eb4 1946     		mov	r1, r3
 2028 0eb6 FFF7FEFF 		bl	GPIO_Init
 746:../src/main.cpp **** 
 747:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2029              		.loc 1 747 0
 2030 0eba 07F15003 		add	r3, r7, #80
 2031 0ebe 1846     		mov	r0, r3
 2032 0ec0 FFF7FEFF 		bl	GPIO_StructInit
 748:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 2033              		.loc 1 748 0
 2034 0ec4 4FF03003 		mov	r3, #48
 2035 0ec8 3B65     		str	r3, [r7, #80]
 749:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2036              		.loc 1 749 0
 2037 0eca 4FF00303 		mov	r3, #3
 2038 0ece 87F85430 		strb	r3, [r7, #84]
 750:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2039              		.loc 1 750 0
 2040 0ed2 4FF00003 		mov	r3, #0
 2041 0ed6 87F85730 		strb	r3, [r7, #87]
 751:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 2042              		.loc 1 751 0
 2043 0eda 07F15003 		add	r3, r7, #80
 2044 0ede 4FF40060 		mov	r0, #2048
 2045 0ee2 C4F60000 		movt	r0, 18432
 2046 0ee6 1946     		mov	r1, r3
 2047 0ee8 FFF7FEFF 		bl	GPIO_Init
 752:../src/main.cpp **** 
 753:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2048              		.loc 1 753 0
 2049 0eec 3B46     		mov	r3, r7
 2050 0eee 1846     		mov	r0, r3
 2051 0ef0 FFF7FEFF 		bl	ADC_StructInit
 754:../src/main.cpp **** 
 755:../src/main.cpp **** 	/* Calibration procedure */
 756:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 2052              		.loc 1 756 0
 2053 0ef4 4FF48070 		mov	r0, #256
 2054 0ef8 C5F20000 		movt	r0, 20480
 2055 0efc 4FF00101 		mov	r1, #1
 2056 0f00 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 757:../src/main.cpp **** 
 758:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 759:../src/main.cpp **** 	int foo;
 760:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2057              		.loc 1 760 0
 2058 0f04 4FF00003 		mov	r3, #0
 2059 0f08 FB66     		str	r3, [r7, #108]
 2060 0f0a 07E0     		b	.L45
 2061              	.L46:
 761:../src/main.cpp **** 	{
 762:../src/main.cpp **** 	  ++foo;
 2062              		.loc 1 762 0 discriminator 2
 2063 0f0c FB6E     		ldr	r3, [r7, #108]
 2064 0f0e 03F10103 		add	r3, r3, #1
 2065 0f12 FB66     		str	r3, [r7, #108]
 760:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2066              		.loc 1 760 0 discriminator 2
 2067 0f14 FB6E     		ldr	r3, [r7, #108]
 2068 0f16 03F10103 		add	r3, r3, #1
 2069 0f1a FB66     		str	r3, [r7, #108]
 2070              	.L45:
 760:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 2071              		.loc 1 760 0 is_stmt 0 discriminator 1
 2072 0f1c FA6E     		ldr	r2, [r7, #108]
 2073 0f1e 4FF6FF13 		movw	r3, #63999
 2074 0f22 9A42     		cmp	r2, r3
 2075 0f24 CCBF     		ite	gt
 2076 0f26 0023     		movgt	r3, #0
 2077 0f28 0123     		movle	r3, #1
 2078 0f2a DBB2     		uxtb	r3, r3
 2079 0f2c 002B     		cmp	r3, #0
 2080 0f2e EDD1     		bne	.L46
 763:../src/main.cpp **** 	}
 764:../src/main.cpp **** 
 765:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 2081              		.loc 1 765 0 is_stmt 1
 2082 0f30 4FF48070 		mov	r0, #256
 2083 0f34 C5F20000 		movt	r0, 20480
 2084 0f38 4FF00001 		mov	r1, #0
 2085 0f3c FFF7FEFF 		bl	ADC_SelectCalibrationMode
 766:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 2086              		.loc 1 766 0
 2087 0f40 4FF48070 		mov	r0, #256
 2088 0f44 C5F20000 		movt	r0, 20480
 2089 0f48 FFF7FEFF 		bl	ADC_StartCalibration
 767:../src/main.cpp **** 
 768:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 2090              		.loc 1 768 0
 2091 0f4c 00BF     		nop
 2092              	.L47:
 2093              		.loc 1 768 0 is_stmt 0 discriminator 1
 2094 0f4e 4FF48070 		mov	r0, #256
 2095 0f52 C5F20000 		movt	r0, 20480
 2096 0f56 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2097 0f5a 0346     		mov	r3, r0
 2098 0f5c 002B     		cmp	r3, #0
 2099 0f5e 0CBF     		ite	eq
 2100 0f60 0023     		moveq	r3, #0
 2101 0f62 0123     		movne	r3, #1
 2102 0f64 DBB2     		uxtb	r3, r3
 2103 0f66 002B     		cmp	r3, #0
 2104 0f68 F1D1     		bne	.L47
 769:../src/main.cpp **** 
 770:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2105              		.loc 1 770 0 is_stmt 1
 2106 0f6a 4FF00003 		mov	r3, #0
 2107 0f6e BB65     		str	r3, [r7, #88]
 771:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2108              		.loc 1 771 0
 2109 0f70 4FF00003 		mov	r3, #0
 2110 0f74 FB65     		str	r3, [r7, #92]
 772:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 2111              		.loc 1 772 0
 2112 0f76 4FF40043 		mov	r3, #32768
 2113 0f7a 3B66     		str	r3, [r7, #96]
 773:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 2114              		.loc 1 773 0
 2115 0f7c 4FF00203 		mov	r3, #2
 2116 0f80 7B66     		str	r3, [r7, #100]
 774:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 2117              		.loc 1 774 0
 2118 0f82 4FF00F03 		mov	r3, #15
 2119 0f86 87F86830 		strb	r3, [r7, #104]
 775:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 2120              		.loc 1 775 0
 2121 0f8a 07F15803 		add	r3, r7, #88
 2122 0f8e 4FF48070 		mov	r0, #256
 2123 0f92 C5F20000 		movt	r0, 20480
 2124 0f96 1946     		mov	r1, r3
 2125 0f98 FFF7FEFF 		bl	ADC_CommonInit
 776:../src/main.cpp **** 
 777:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2126              		.loc 1 777 0
 2127 0f9c 4FF40053 		mov	r3, #8192
 2128 0fa0 3B60     		str	r3, [r7, #0]
 778:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2129              		.loc 1 778 0
 2130 0fa2 4FF00003 		mov	r3, #0
 2131 0fa6 7B60     		str	r3, [r7, #4]
 779:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2132              		.loc 1 779 0
 2133 0fa8 4FF00003 		mov	r3, #0
 2134 0fac BB60     		str	r3, [r7, #8]
 780:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2135              		.loc 1 780 0
 2136 0fae 4FF00003 		mov	r3, #0
 2137 0fb2 FB60     		str	r3, [r7, #12]
 781:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2138              		.loc 1 781 0
 2139 0fb4 4FF00003 		mov	r3, #0
 2140 0fb8 3B61     		str	r3, [r7, #16]
 782:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2141              		.loc 1 782 0
 2142 0fba 4FF00003 		mov	r3, #0
 2143 0fbe 7B61     		str	r3, [r7, #20]
 783:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2144              		.loc 1 783 0
 2145 0fc0 4FF00003 		mov	r3, #0
 2146 0fc4 BB61     		str	r3, [r7, #24]
 784:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 2147              		.loc 1 784 0
 2148 0fc6 4FF00403 		mov	r3, #4
 2149 0fca 3B77     		strb	r3, [r7, #28]
 785:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 2150              		.loc 1 785 0
 2151 0fcc 3B46     		mov	r3, r7
 2152 0fce 4FF48070 		mov	r0, #256
 2153 0fd2 C5F20000 		movt	r0, 20480
 2154 0fd6 1946     		mov	r1, r3
 2155 0fd8 FFF7FEFF 		bl	ADC_Init
 786:../src/main.cpp **** 
 787:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 788:../src/main.cpp **** 
 789:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2156              		.loc 1 789 0
 2157 0fdc 4FF48070 		mov	r0, #256
 2158 0fe0 C5F20000 		movt	r0, 20480
 2159 0fe4 4FF00101 		mov	r1, #1
 2160 0fe8 4FF00102 		mov	r2, #1
 2161 0fec 4FF00703 		mov	r3, #7
 2162 0ff0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 790:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2163              		.loc 1 790 0
 2164 0ff4 4FF48070 		mov	r0, #256
 2165 0ff8 C5F20000 		movt	r0, 20480
 2166 0ffc 4FF00501 		mov	r1, #5
 2167 1000 4FF00202 		mov	r2, #2
 2168 1004 4FF00703 		mov	r3, #7
 2169 1008 FFF7FEFF 		bl	ADC_RegularChannelConfig
 791:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 2170              		.loc 1 791 0
 2171 100c 4FF48070 		mov	r0, #256
 2172 1010 C5F20000 		movt	r0, 20480
 2173 1014 4FF00B01 		mov	r1, #11
 2174 1018 4FF00302 		mov	r2, #3
 2175 101c 4FF00703 		mov	r3, #7
 2176 1020 FFF7FEFF 		bl	ADC_RegularChannelConfig
 792:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 2177              		.loc 1 792 0
 2178 1024 4FF48070 		mov	r0, #256
 2179 1028 C5F20000 		movt	r0, 20480
 2180 102c 4FF00C01 		mov	r1, #12
 2181 1030 4FF00402 		mov	r2, #4
 2182 1034 4FF00703 		mov	r3, #7
 2183 1038 FFF7FEFF 		bl	ADC_RegularChannelConfig
 793:../src/main.cpp **** 
 794:../src/main.cpp **** 	/* Enable ADC2 */
 795:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 2184              		.loc 1 795 0
 2185 103c 4FF48070 		mov	r0, #256
 2186 1040 C5F20000 		movt	r0, 20480
 2187 1044 4FF00101 		mov	r1, #1
 2188 1048 FFF7FEFF 		bl	ADC_Cmd
 796:../src/main.cpp **** 
 797:../src/main.cpp **** 	/* wait for ADRDY */
 798:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 2189              		.loc 1 798 0
 2190 104c 00BF     		nop
 2191              	.L48:
 2192              		.loc 1 798 0 is_stmt 0 discriminator 1
 2193 104e 4FF48070 		mov	r0, #256
 2194 1052 C5F20000 		movt	r0, 20480
 2195 1056 4FF00101 		mov	r1, #1
 2196 105a FFF7FEFF 		bl	ADC_GetFlagStatus
 2197 105e 0346     		mov	r3, r0
 2198 1060 002B     		cmp	r3, #0
 2199 1062 14BF     		ite	ne
 2200 1064 0023     		movne	r3, #0
 2201 1066 0123     		moveq	r3, #1
 2202 1068 DBB2     		uxtb	r3, r3
 2203 106a 002B     		cmp	r3, #0
 2204 106c EFD1     		bne	.L48
 799:../src/main.cpp **** 
 800:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 801:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 2205              		.loc 1 801 0 is_stmt 1
 2206 106e 4FF48070 		mov	r0, #256
 2207 1072 C5F20000 		movt	r0, 20480
 2208 1076 FFF7FEFF 		bl	ADC_StartConversion
 802:../src/main.cpp **** 
 803:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 2209              		.loc 1 803 0
 2210 107a 4FF00200 		mov	r0, #2
 2211 107e 4FF00101 		mov	r1, #1
 2212 1082 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 804:../src/main.cpp **** 
 805:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 806:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 2213              		.loc 1 806 0
 2214 1086 07F12003 		add	r3, r7, #32
 2215 108a 1846     		mov	r0, r3
 2216 108c FFF7FEFF 		bl	DMA_StructInit
 807:../src/main.cpp **** 
 808:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 2217              		.loc 1 808 0
 2218 1090 4FF48160 		mov	r0, #1032
 2219 1094 C4F20200 		movt	r0, 16386
 2220 1098 FFF7FEFF 		bl	DMA_DeInit
 809:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 2221              		.loc 1 809 0
 2222 109c 4FF4A073 		mov	r3, #320
 2223 10a0 C5F20003 		movt	r3, 20480
 2224 10a4 3B62     		str	r3, [r7, #32]
 810:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 2225              		.loc 1 810 0
 2226 10a6 40F20003 		movw	r3, #:lower16:adc2_data
 2227 10aa C0F20003 		movt	r3, #:upper16:adc2_data
 2228 10ae 7B62     		str	r3, [r7, #36]
 811:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 2229              		.loc 1 811 0
 2230 10b0 4FF00003 		mov	r3, #0
 2231 10b4 BB62     		str	r3, [r7, #40]
 812:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 2232              		.loc 1 812 0
 2233 10b6 4FF00403 		mov	r3, #4
 2234 10ba BB85     		strh	r3, [r7, #44]	@ movhi
 813:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 2235              		.loc 1 813 0
 2236 10bc 4FF00003 		mov	r3, #0
 2237 10c0 3B63     		str	r3, [r7, #48]
 814:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 2238              		.loc 1 814 0
 2239 10c2 4FF08003 		mov	r3, #128
 2240 10c6 7B63     		str	r3, [r7, #52]
 815:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 2241              		.loc 1 815 0
 2242 10c8 4FF40073 		mov	r3, #512
 2243 10cc BB63     		str	r3, [r7, #56]
 816:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 2244              		.loc 1 816 0
 2245 10ce 4FF40063 		mov	r3, #2048
 2246 10d2 FB63     		str	r3, [r7, #60]
 817:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 2247              		.loc 1 817 0
 2248 10d4 4FF02003 		mov	r3, #32
 2249 10d8 3B64     		str	r3, [r7, #64]
 818:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 2250              		.loc 1 818 0
 2251 10da 4FF40053 		mov	r3, #8192
 2252 10de 7B64     		str	r3, [r7, #68]
 819:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 2253              		.loc 1 819 0
 2254 10e0 4FF00003 		mov	r3, #0
 2255 10e4 BB64     		str	r3, [r7, #72]
 820:../src/main.cpp **** 
 821:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 2256              		.loc 1 821 0
 2257 10e6 07F12003 		add	r3, r7, #32
 2258 10ea 4FF48160 		mov	r0, #1032
 2259 10ee C4F20200 		movt	r0, 16386
 2260 10f2 1946     		mov	r1, r3
 2261 10f4 FFF7FEFF 		bl	DMA_Init
 822:../src/main.cpp **** 
 823:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 824:../src/main.cpp **** 
 825:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 2262              		.loc 1 825 0
 2263 10f8 4FF03803 		mov	r3, #56
 2264 10fc 87F84C30 		strb	r3, [r7, #76]
 826:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2265              		.loc 1 826 0
 2266 1100 4FF00203 		mov	r3, #2
 2267 1104 87F84D30 		strb	r3, [r7, #77]
 827:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2268              		.loc 1 827 0
 2269 1108 4FF00003 		mov	r3, #0
 2270 110c 87F84E30 		strb	r3, [r7, #78]
 828:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2271              		.loc 1 828 0
 2272 1110 4FF00103 		mov	r3, #1
 2273 1114 87F84F30 		strb	r3, [r7, #79]
 829:../src/main.cpp **** 
 830:../src/main.cpp **** 	NVIC_Init(&nv);
 2274              		.loc 1 830 0
 2275 1118 07F14C03 		add	r3, r7, #76
 2276 111c 1846     		mov	r0, r3
 2277 111e FFF7FEFF 		bl	NVIC_Init
 831:../src/main.cpp **** 
 832:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 2278              		.loc 1 832 0
 2279 1122 4FF48160 		mov	r0, #1032
 2280 1126 C4F20200 		movt	r0, 16386
 2281 112a 4FF00201 		mov	r1, #2
 2282 112e 4FF00102 		mov	r2, #1
 2283 1132 FFF7FEFF 		bl	DMA_ITConfig
 833:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 2284              		.loc 1 833 0
 2285 1136 4FF48160 		mov	r0, #1032
 2286 113a C4F20200 		movt	r0, 16386
 2287 113e 4FF00101 		mov	r1, #1
 2288 1142 FFF7FEFF 		bl	DMA_Cmd
 834:../src/main.cpp **** 
 835:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 2289              		.loc 1 835 0
 2290 1146 4FF48070 		mov	r0, #256
 2291 114a C5F20000 		movt	r0, 20480
 2292 114e 4FF00201 		mov	r1, #2
 2293 1152 FFF7FEFF 		bl	ADC_DMAConfig
 836:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 2294              		.loc 1 836 0
 2295 1156 4FF48070 		mov	r0, #256
 2296 115a C5F20000 		movt	r0, 20480
 2297 115e 4FF00101 		mov	r1, #1
 2298 1162 FFF7FEFF 		bl	ADC_DMACmd
 2299              	.LBE19:
 837:../src/main.cpp **** }
 2300              		.loc 1 837 0
 2301 1166 07F17007 		add	r7, r7, #112
 2302 116a BD46     		mov	sp, r7
 2303 116c 80BD     		pop	{r7, pc}
 2304              		.cfi_endproc
 2305              	.LFE122:
 2307 116e 00BF     		.align	2
 2308              		.global	_Z21battery_watchdog_initv
 2309              		.thumb
 2310              		.thumb_func
 2312              	_Z21battery_watchdog_initv:
 2313              	.LFB123:
 838:../src/main.cpp **** 
 839:../src/main.cpp **** void battery_watchdog_init(void)
 840:../src/main.cpp **** {
 2314              		.loc 1 840 0
 2315              		.cfi_startproc
 2316              		@ args = 0, pretend = 0, frame = 72
 2317              		@ frame_needed = 1, uses_anonymous_args = 0
 2318 1170 80B5     		push	{r7, lr}
 2319              	.LCFI36:
 2320              		.cfi_def_cfa_offset 8
 2321              		.cfi_offset 7, -8
 2322              		.cfi_offset 14, -4
 2323 1172 92B0     		sub	sp, sp, #72
 2324              	.LCFI37:
 2325              		.cfi_def_cfa_offset 80
 2326 1174 00AF     		add	r7, sp, #0
 2327              	.LCFI38:
 2328              		.cfi_def_cfa_register 7
 2329              	.LBB20:
 841:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 842:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 843:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 844:../src/main.cpp **** 	/* Configure the ADC clock */
 845:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 2330              		.loc 1 845 0
 2331 1176 4FF45050 		mov	r0, #13312
 2332 117a C1F20000 		movt	r0, 4096
 2333 117e FFF7FEFF 		bl	RCC_ADCCLKConfig
 846:../src/main.cpp **** 
 847:../src/main.cpp **** 	/* Enable ADC1 clock */
 848:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 2334              		.loc 1 848 0
 2335 1182 4FF00050 		mov	r0, #536870912
 2336 1186 4FF00101 		mov	r1, #1
 2337 118a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 849:../src/main.cpp **** 	/* ADC Channel configuration */
 850:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 851:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 2338              		.loc 1 851 0
 2339 118e 4FF41010 		mov	r0, #2359296
 2340 1192 4FF00101 		mov	r1, #1
 2341 1196 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 852:../src/main.cpp **** 
 853:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 854:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2342              		.loc 1 854 0
 2343 119a 07F12803 		add	r3, r7, #40
 2344 119e 1846     		mov	r0, r3
 2345 11a0 FFF7FEFF 		bl	GPIO_StructInit
 855:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 2346              		.loc 1 855 0
 2347 11a4 42F20203 		movw	r3, #8194
 2348 11a8 BB62     		str	r3, [r7, #40]
 856:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2349              		.loc 1 856 0
 2350 11aa 4FF00303 		mov	r3, #3
 2351 11ae 87F82C30 		strb	r3, [r7, #44]
 857:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2352              		.loc 1 857 0
 2353 11b2 4FF00003 		mov	r3, #0
 2354 11b6 87F82F30 		strb	r3, [r7, #47]
 858:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2355              		.loc 1 858 0
 2356 11ba 07F12803 		add	r3, r7, #40
 2357 11be 4FF48060 		mov	r0, #1024
 2358 11c2 C4F60000 		movt	r0, 18432
 2359 11c6 1946     		mov	r1, r3
 2360 11c8 FFF7FEFF 		bl	GPIO_Init
 859:../src/main.cpp **** /*
 860:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 861:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 862:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 863:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 864:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 865:../src/main.cpp **** */
 866:../src/main.cpp **** 
 867:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2361              		.loc 1 867 0
 2362 11cc 07F10403 		add	r3, r7, #4
 2363 11d0 1846     		mov	r0, r3
 2364 11d2 FFF7FEFF 		bl	ADC_StructInit
 868:../src/main.cpp **** 
 869:../src/main.cpp **** 	/* Calibration procedure */
 870:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 2365              		.loc 1 870 0
 2366 11d6 4FF48060 		mov	r0, #1024
 2367 11da C5F20000 		movt	r0, 20480
 2368 11de 4FF00101 		mov	r1, #1
 2369 11e2 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 871:../src/main.cpp **** 
 872:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 873:../src/main.cpp **** 	int foo;
 874:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2370              		.loc 1 874 0
 2371 11e6 4FF00003 		mov	r3, #0
 2372 11ea 7B64     		str	r3, [r7, #68]
 2373 11ec 07E0     		b	.L50
 2374              	.L51:
 875:../src/main.cpp **** 	{
 876:../src/main.cpp **** 	  ++foo;
 2375              		.loc 1 876 0 discriminator 2
 2376 11ee 7B6C     		ldr	r3, [r7, #68]
 2377 11f0 03F10103 		add	r3, r3, #1
 2378 11f4 7B64     		str	r3, [r7, #68]
 874:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2379              		.loc 1 874 0 discriminator 2
 2380 11f6 7B6C     		ldr	r3, [r7, #68]
 2381 11f8 03F10103 		add	r3, r3, #1
 2382 11fc 7B64     		str	r3, [r7, #68]
 2383              	.L50:
 874:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2384              		.loc 1 874 0 is_stmt 0 discriminator 1
 2385 11fe 7A6C     		ldr	r2, [r7, #68]
 2386 1200 47F6FF43 		movw	r3, #31999
 2387 1204 9A42     		cmp	r2, r3
 2388 1206 CCBF     		ite	gt
 2389 1208 0023     		movgt	r3, #0
 2390 120a 0123     		movle	r3, #1
 2391 120c DBB2     		uxtb	r3, r3
 2392 120e 002B     		cmp	r3, #0
 2393 1210 EDD1     		bne	.L51
 877:../src/main.cpp **** 	}
 878:../src/main.cpp **** 
 879:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 2394              		.loc 1 879 0 is_stmt 1
 2395 1212 4FF48060 		mov	r0, #1024
 2396 1216 C5F20000 		movt	r0, 20480
 2397 121a 4FF00001 		mov	r1, #0
 2398 121e FFF7FEFF 		bl	ADC_SelectCalibrationMode
 880:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 2399              		.loc 1 880 0
 2400 1222 4FF48060 		mov	r0, #1024
 2401 1226 C5F20000 		movt	r0, 20480
 2402 122a FFF7FEFF 		bl	ADC_StartCalibration
 881:../src/main.cpp **** 
 882:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 2403              		.loc 1 882 0
 2404 122e 00BF     		nop
 2405              	.L52:
 2406              		.loc 1 882 0 is_stmt 0 discriminator 1
 2407 1230 4FF48060 		mov	r0, #1024
 2408 1234 C5F20000 		movt	r0, 20480
 2409 1238 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2410 123c 0346     		mov	r3, r0
 2411 123e 002B     		cmp	r3, #0
 2412 1240 0CBF     		ite	eq
 2413 1242 0023     		moveq	r3, #0
 2414 1244 0123     		movne	r3, #1
 2415 1246 DBB2     		uxtb	r3, r3
 2416 1248 002B     		cmp	r3, #0
 2417 124a F1D1     		bne	.L52
 883:../src/main.cpp **** 
 884:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2418              		.loc 1 884 0 is_stmt 1
 2419 124c 4FF00003 		mov	r3, #0
 2420 1250 3B63     		str	r3, [r7, #48]
 885:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 2421              		.loc 1 885 0
 2422 1252 4FF44033 		mov	r3, #196608
 2423 1256 7B63     		str	r3, [r7, #52]
 886:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2424              		.loc 1 886 0
 2425 1258 4FF00003 		mov	r3, #0
 2426 125c BB63     		str	r3, [r7, #56]
 887:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2427              		.loc 1 887 0
 2428 125e 4FF00003 		mov	r3, #0
 2429 1262 FB63     		str	r3, [r7, #60]
 888:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2430              		.loc 1 888 0
 2431 1264 4FF00003 		mov	r3, #0
 2432 1268 87F84030 		strb	r3, [r7, #64]
 889:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 2433              		.loc 1 889 0
 2434 126c 07F13003 		add	r3, r7, #48
 2435 1270 4FF48060 		mov	r0, #1024
 2436 1274 C5F20000 		movt	r0, 20480
 2437 1278 1946     		mov	r1, r3
 2438 127a FFF7FEFF 		bl	ADC_CommonInit
 890:../src/main.cpp **** 
 891:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2439              		.loc 1 891 0
 2440 127e 4FF40053 		mov	r3, #8192
 2441 1282 7B60     		str	r3, [r7, #4]
 892:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2442              		.loc 1 892 0
 2443 1284 4FF00003 		mov	r3, #0
 2444 1288 BB60     		str	r3, [r7, #8]
 893:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2445              		.loc 1 893 0
 2446 128a 4FF00003 		mov	r3, #0
 2447 128e FB60     		str	r3, [r7, #12]
 894:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2448              		.loc 1 894 0
 2449 1290 4FF00003 		mov	r3, #0
 2450 1294 3B61     		str	r3, [r7, #16]
 895:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2451              		.loc 1 895 0
 2452 1296 4FF00003 		mov	r3, #0
 2453 129a 7B61     		str	r3, [r7, #20]
 896:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2454              		.loc 1 896 0
 2455 129c 4FF00003 		mov	r3, #0
 2456 12a0 BB61     		str	r3, [r7, #24]
 897:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2457              		.loc 1 897 0
 2458 12a2 4FF00003 		mov	r3, #0
 2459 12a6 FB61     		str	r3, [r7, #28]
 898:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2460              		.loc 1 898 0
 2461 12a8 4FF00203 		mov	r3, #2
 2462 12ac 87F82030 		strb	r3, [r7, #32]
 899:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 2463              		.loc 1 899 0
 2464 12b0 07F10403 		add	r3, r7, #4
 2465 12b4 4FF48060 		mov	r0, #1024
 2466 12b8 C5F20000 		movt	r0, 20480
 2467 12bc 1946     		mov	r1, r3
 2468 12be FFF7FEFF 		bl	ADC_Init
 900:../src/main.cpp **** 
 901:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 902:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2469              		.loc 1 902 0
 2470 12c2 4FF48060 		mov	r0, #1024
 2471 12c6 C5F20000 		movt	r0, 20480
 2472 12ca 4FF00101 		mov	r1, #1
 2473 12ce 4FF00102 		mov	r2, #1
 2474 12d2 4FF00703 		mov	r3, #7
 2475 12d6 FFF7FEFF 		bl	ADC_RegularChannelConfig
 903:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2476              		.loc 1 903 0
 2477 12da 4FF48060 		mov	r0, #1024
 2478 12de C5F20000 		movt	r0, 20480
 2479 12e2 4FF00501 		mov	r1, #5
 2480 12e6 4FF00202 		mov	r2, #2
 2481 12ea 4FF00703 		mov	r3, #7
 2482 12ee FFF7FEFF 		bl	ADC_RegularChannelConfig
 904:../src/main.cpp **** 
 905:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 2483              		.loc 1 905 0
 2484 12f2 4FF48060 		mov	r0, #1024
 2485 12f6 C5F20000 		movt	r0, 20480
 2486 12fa 4FF00101 		mov	r1, #1
 2487 12fe FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 906:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 2488              		.loc 1 906 0
 2489 1302 4FF48060 		mov	r0, #1024
 2490 1306 C5F20000 		movt	r0, 20480
 2491 130a 4FF00501 		mov	r1, #5
 2492 130e FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 907:../src/main.cpp **** 
 908:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 909:../src/main.cpp **** 
 910:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 2493              		.loc 1 910 0
 2494 1312 4FF48060 		mov	r0, #1024
 2495 1316 C5F20000 		movt	r0, 20480
 2496 131a 4FF40061 		mov	r1, #2048
 2497 131e 4FF00A02 		mov	r2, #10
 2498 1322 FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 911:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 2499              		.loc 1 911 0
 2500 1326 4FF48060 		mov	r0, #1024
 2501 132a C5F20000 		movt	r0, 20480
 2502 132e 4FF08001 		mov	r1, #128
 2503 1332 4FF00002 		mov	r2, #0
 2504 1336 FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 912:../src/main.cpp **** 
 913:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 2505              		.loc 1 913 0
 2506 133a 4FF48060 		mov	r0, #1024
 2507 133e C5F20000 		movt	r0, 20480
 2508 1342 4FF44001 		mov	r1, #12582912
 2509 1346 FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 914:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 915:../src/main.cpp **** 
 916:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 917:../src/main.cpp **** 
 918:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 919:../src/main.cpp **** 
 920:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 2510              		.loc 1 920 0
 2511 134a 4FF02F03 		mov	r3, #47
 2512 134e 87F82430 		strb	r3, [r7, #36]
 921:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 2513              		.loc 1 921 0
 2514 1352 4FF00003 		mov	r3, #0
 2515 1356 87F82530 		strb	r3, [r7, #37]
 922:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2516              		.loc 1 922 0
 2517 135a 4FF00003 		mov	r3, #0
 2518 135e 87F82630 		strb	r3, [r7, #38]
 923:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2519              		.loc 1 923 0
 2520 1362 4FF00103 		mov	r3, #1
 2521 1366 87F82730 		strb	r3, [r7, #39]
 924:../src/main.cpp **** 
 925:../src/main.cpp **** 	NVIC_Init(&nv);
 2522              		.loc 1 925 0
 2523 136a 07F12403 		add	r3, r7, #36
 2524 136e 1846     		mov	r0, r3
 2525 1370 FFF7FEFF 		bl	NVIC_Init
 926:../src/main.cpp **** 
 927:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 928:../src/main.cpp **** 
 929:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 2526              		.loc 1 929 0
 2527 1374 4FF48060 		mov	r0, #1024
 2528 1378 C5F20000 		movt	r0, 20480
 2529 137c 4FF4C071 		mov	r1, #384
 2530 1380 4FF00102 		mov	r2, #1
 2531 1384 FFF7FEFF 		bl	ADC_ITConfig
 930:../src/main.cpp **** 
 931:../src/main.cpp **** 	/* Enable ADC3 */
 932:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 2532              		.loc 1 932 0
 2533 1388 4FF48060 		mov	r0, #1024
 2534 138c C5F20000 		movt	r0, 20480
 2535 1390 4FF00101 		mov	r1, #1
 2536 1394 FFF7FEFF 		bl	ADC_Cmd
 933:../src/main.cpp **** 
 934:../src/main.cpp **** 	/* wait for ADRDY */
 935:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 2537              		.loc 1 935 0
 2538 1398 00BF     		nop
 2539              	.L53:
 2540              		.loc 1 935 0 is_stmt 0 discriminator 1
 2541 139a 4FF48060 		mov	r0, #1024
 2542 139e C5F20000 		movt	r0, 20480
 2543 13a2 4FF00101 		mov	r1, #1
 2544 13a6 FFF7FEFF 		bl	ADC_GetFlagStatus
 2545 13aa 0346     		mov	r3, r0
 2546 13ac 002B     		cmp	r3, #0
 2547 13ae 14BF     		ite	ne
 2548 13b0 0023     		movne	r3, #0
 2549 13b2 0123     		moveq	r3, #1
 2550 13b4 DBB2     		uxtb	r3, r3
 2551 13b6 002B     		cmp	r3, #0
 2552 13b8 EFD1     		bne	.L53
 936:../src/main.cpp **** 
 937:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 938:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 2553              		.loc 1 938 0 is_stmt 1
 2554 13ba 4FF48060 		mov	r0, #1024
 2555 13be C5F20000 		movt	r0, 20480
 2556 13c2 FFF7FEFF 		bl	ADC_StartConversion
 2557              	.LBE20:
 939:../src/main.cpp **** }
 2558              		.loc 1 939 0
 2559 13c6 07F14807 		add	r7, r7, #72
 2560 13ca BD46     		mov	sp, r7
 2561 13cc 80BD     		pop	{r7, pc}
 2562              		.cfi_endproc
 2563              	.LFE123:
 2565 13ce 00BF     		.align	2
 2566              		.global	_Z9adc1_initv
 2567              		.thumb
 2568              		.thumb_func
 2570              	_Z9adc1_initv:
 2571              	.LFB124:
 940:../src/main.cpp **** 
 941:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 942:../src/main.cpp ****  * @Args: Nothing
 943:../src/main.cpp ****  * @Return Val: Nothing
 944:../src/main.cpp ****  */
 945:../src/main.cpp **** 
 946:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 947:../src/main.cpp **** {
 2572              		.loc 1 947 0
 2573              		.cfi_startproc
 2574              		@ args = 0, pretend = 0, frame = 72
 2575              		@ frame_needed = 1, uses_anonymous_args = 0
 2576 13d0 80B5     		push	{r7, lr}
 2577              	.LCFI39:
 2578              		.cfi_def_cfa_offset 8
 2579              		.cfi_offset 7, -8
 2580              		.cfi_offset 14, -4
 2581 13d2 92B0     		sub	sp, sp, #72
 2582              	.LCFI40:
 2583              		.cfi_def_cfa_offset 80
 2584 13d4 00AF     		add	r7, sp, #0
 2585              	.LCFI41:
 2586              		.cfi_def_cfa_register 7
 2587              	.LBB21:
 948:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 949:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 950:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 951:../src/main.cpp **** 	/* Configure the ADC clock */
 952:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2588              		.loc 1 952 0
 2589 13d6 4FF48870 		mov	r0, #272
 2590 13da FFF7FEFF 		bl	RCC_ADCCLKConfig
 953:../src/main.cpp **** 
 954:../src/main.cpp **** 	/* Enable ADC1 clock */
 955:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2591              		.loc 1 955 0
 2592 13de 4FF08050 		mov	r0, #268435456
 2593 13e2 4FF00101 		mov	r1, #1
 2594 13e6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 956:../src/main.cpp **** 	/* ADC Channel configuration */
 957:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 958:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2595              		.loc 1 958 0
 2596 13ea 4FF40030 		mov	r0, #131072
 2597 13ee 4FF00101 		mov	r1, #1
 2598 13f2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 959:../src/main.cpp **** 
 960:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 961:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2599              		.loc 1 961 0
 2600 13f6 4FF00403 		mov	r3, #4
 2601 13fa BB62     		str	r3, [r7, #40]
 962:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2602              		.loc 1 962 0
 2603 13fc 4FF00303 		mov	r3, #3
 2604 1400 87F82C30 		strb	r3, [r7, #44]
 963:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2605              		.loc 1 963 0
 2606 1404 4FF00003 		mov	r3, #0
 2607 1408 87F82F30 		strb	r3, [r7, #47]
 964:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2608              		.loc 1 964 0
 2609 140c 07F12803 		add	r3, r7, #40
 2610 1410 4FF09040 		mov	r0, #1207959552
 2611 1414 1946     		mov	r1, r3
 2612 1416 FFF7FEFF 		bl	GPIO_Init
 965:../src/main.cpp **** 
 966:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2613              		.loc 1 966 0
 2614 141a 07F10403 		add	r3, r7, #4
 2615 141e 1846     		mov	r0, r3
 2616 1420 FFF7FEFF 		bl	ADC_StructInit
 967:../src/main.cpp **** 
 968:../src/main.cpp **** 	/* Calibration procedure */
 969:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2617              		.loc 1 969 0
 2618 1424 4FF0A040 		mov	r0, #1342177280
 2619 1428 4FF00101 		mov	r1, #1
 2620 142c FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 970:../src/main.cpp **** 
 971:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 972:../src/main.cpp **** 	int foo;
 973:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2621              		.loc 1 973 0
 2622 1430 4FF00003 		mov	r3, #0
 2623 1434 7B64     		str	r3, [r7, #68]
 2624 1436 07E0     		b	.L55
 2625              	.L56:
 974:../src/main.cpp **** 	{
 975:../src/main.cpp **** 	  ++foo;
 2626              		.loc 1 975 0 discriminator 2
 2627 1438 7B6C     		ldr	r3, [r7, #68]
 2628 143a 03F10103 		add	r3, r3, #1
 2629 143e 7B64     		str	r3, [r7, #68]
 973:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2630              		.loc 1 973 0 discriminator 2
 2631 1440 7B6C     		ldr	r3, [r7, #68]
 2632 1442 03F10103 		add	r3, r3, #1
 2633 1446 7B64     		str	r3, [r7, #68]
 2634              	.L55:
 973:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2635              		.loc 1 973 0 is_stmt 0 discriminator 1
 2636 1448 7A6C     		ldr	r2, [r7, #68]
 2637 144a 47F6FF43 		movw	r3, #31999
 2638 144e 9A42     		cmp	r2, r3
 2639 1450 CCBF     		ite	gt
 2640 1452 0023     		movgt	r3, #0
 2641 1454 0123     		movle	r3, #1
 2642 1456 DBB2     		uxtb	r3, r3
 2643 1458 002B     		cmp	r3, #0
 2644 145a EDD1     		bne	.L56
 976:../src/main.cpp **** 	}
 977:../src/main.cpp **** 
 978:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2645              		.loc 1 978 0 is_stmt 1
 2646 145c 4FF0A040 		mov	r0, #1342177280
 2647 1460 4FF00001 		mov	r1, #0
 2648 1464 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 979:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2649              		.loc 1 979 0
 2650 1468 4FF0A040 		mov	r0, #1342177280
 2651 146c FFF7FEFF 		bl	ADC_StartCalibration
 980:../src/main.cpp **** 
 981:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2652              		.loc 1 981 0
 2653 1470 00BF     		nop
 2654              	.L57:
 2655              		.loc 1 981 0 is_stmt 0 discriminator 1
 2656 1472 4FF0A040 		mov	r0, #1342177280
 2657 1476 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2658 147a 0346     		mov	r3, r0
 2659 147c 002B     		cmp	r3, #0
 2660 147e 0CBF     		ite	eq
 2661 1480 0023     		moveq	r3, #0
 2662 1482 0123     		movne	r3, #1
 2663 1484 DBB2     		uxtb	r3, r3
 2664 1486 002B     		cmp	r3, #0
 2665 1488 F3D1     		bne	.L57
 982:../src/main.cpp **** 
 983:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2666              		.loc 1 983 0 is_stmt 1
 2667 148a 4FF00003 		mov	r3, #0
 2668 148e 3B63     		str	r3, [r7, #48]
 984:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2669              		.loc 1 984 0
 2670 1490 4FF00003 		mov	r3, #0
 2671 1494 7B63     		str	r3, [r7, #52]
 985:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2672              		.loc 1 985 0
 2673 1496 4FF00003 		mov	r3, #0
 2674 149a BB63     		str	r3, [r7, #56]
 986:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2675              		.loc 1 986 0
 2676 149c 4FF00003 		mov	r3, #0
 2677 14a0 FB63     		str	r3, [r7, #60]
 987:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2678              		.loc 1 987 0
 2679 14a2 4FF00003 		mov	r3, #0
 2680 14a6 87F84030 		strb	r3, [r7, #64]
 988:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2681              		.loc 1 988 0
 2682 14aa 07F13003 		add	r3, r7, #48
 2683 14ae 4FF0A040 		mov	r0, #1342177280
 2684 14b2 1946     		mov	r1, r3
 2685 14b4 FFF7FEFF 		bl	ADC_CommonInit
 989:../src/main.cpp **** 
 990:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2686              		.loc 1 990 0
 2687 14b8 4FF40053 		mov	r3, #8192
 2688 14bc 7B60     		str	r3, [r7, #4]
 991:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2689              		.loc 1 991 0
 2690 14be 4FF00003 		mov	r3, #0
 2691 14c2 BB60     		str	r3, [r7, #8]
 992:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2692              		.loc 1 992 0
 2693 14c4 4FF00003 		mov	r3, #0
 2694 14c8 FB60     		str	r3, [r7, #12]
 993:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2695              		.loc 1 993 0
 2696 14ca 4FF00003 		mov	r3, #0
 2697 14ce 3B61     		str	r3, [r7, #16]
 994:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2698              		.loc 1 994 0
 2699 14d0 4FF00003 		mov	r3, #0
 2700 14d4 7B61     		str	r3, [r7, #20]
 995:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2701              		.loc 1 995 0
 2702 14d6 4FF00003 		mov	r3, #0
 2703 14da BB61     		str	r3, [r7, #24]
 996:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2704              		.loc 1 996 0
 2705 14dc 4FF00003 		mov	r3, #0
 2706 14e0 FB61     		str	r3, [r7, #28]
 997:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2707              		.loc 1 997 0
 2708 14e2 4FF00103 		mov	r3, #1
 2709 14e6 87F82030 		strb	r3, [r7, #32]
 998:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2710              		.loc 1 998 0
 2711 14ea 07F10403 		add	r3, r7, #4
 2712 14ee 4FF0A040 		mov	r0, #1342177280
 2713 14f2 1946     		mov	r1, r3
 2714 14f4 FFF7FEFF 		bl	ADC_Init
 999:../src/main.cpp **** 
1000:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
1001:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2715              		.loc 1 1001 0
 2716 14f8 4FF0A040 		mov	r0, #1342177280
 2717 14fc 4FF00301 		mov	r1, #3
 2718 1500 4FF00102 		mov	r2, #1
 2719 1504 4FF00703 		mov	r3, #7
 2720 1508 FFF7FEFF 		bl	ADC_RegularChannelConfig
1002:../src/main.cpp **** 
1003:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
1004:../src/main.cpp **** 
1005:../src/main.cpp **** 	NVIC_InitTypeDef nv;
1006:../src/main.cpp **** 
1007:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2721              		.loc 1 1007 0
 2722 150c 4FF01203 		mov	r3, #18
 2723 1510 87F82430 		strb	r3, [r7, #36]
1008:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2724              		.loc 1 1008 0
 2725 1514 4FF00203 		mov	r3, #2
 2726 1518 87F82530 		strb	r3, [r7, #37]
1009:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2727              		.loc 1 1009 0
 2728 151c 4FF00003 		mov	r3, #0
 2729 1520 87F82630 		strb	r3, [r7, #38]
1010:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2730              		.loc 1 1010 0
 2731 1524 4FF00103 		mov	r3, #1
 2732 1528 87F82730 		strb	r3, [r7, #39]
1011:../src/main.cpp **** 
1012:../src/main.cpp **** 	NVIC_Init(&nv);
 2733              		.loc 1 1012 0
 2734 152c 07F12403 		add	r3, r7, #36
 2735 1530 1846     		mov	r0, r3
 2736 1532 FFF7FEFF 		bl	NVIC_Init
1013:../src/main.cpp **** 
1014:../src/main.cpp **** 	// Enable ADC1's global interrupt:
1015:../src/main.cpp **** 
1016:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2737              		.loc 1 1016 0
 2738 1536 4FF0A040 		mov	r0, #1342177280
 2739 153a 4FF00401 		mov	r1, #4
 2740 153e 4FF00102 		mov	r2, #1
 2741 1542 FFF7FEFF 		bl	ADC_ITConfig
1017:../src/main.cpp **** 
1018:../src/main.cpp **** 	/* Enable ADC1 */
1019:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2742              		.loc 1 1019 0
 2743 1546 4FF0A040 		mov	r0, #1342177280
 2744 154a 4FF00101 		mov	r1, #1
 2745 154e FFF7FEFF 		bl	ADC_Cmd
1020:../src/main.cpp **** 
1021:../src/main.cpp **** 	/* wait for ADRDY */
1022:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2746              		.loc 1 1022 0
 2747 1552 00BF     		nop
 2748              	.L58:
 2749              		.loc 1 1022 0 is_stmt 0 discriminator 1
 2750 1554 4FF0A040 		mov	r0, #1342177280
 2751 1558 4FF00101 		mov	r1, #1
 2752 155c FFF7FEFF 		bl	ADC_GetFlagStatus
 2753 1560 0346     		mov	r3, r0
 2754 1562 002B     		cmp	r3, #0
 2755 1564 14BF     		ite	ne
 2756 1566 0023     		movne	r3, #0
 2757 1568 0123     		moveq	r3, #1
 2758 156a DBB2     		uxtb	r3, r3
 2759 156c 002B     		cmp	r3, #0
 2760 156e F1D1     		bne	.L58
1023:../src/main.cpp **** 
1024:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
1025:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2761              		.loc 1 1025 0 is_stmt 1
 2762 1570 4FF0A040 		mov	r0, #1342177280
 2763 1574 FFF7FEFF 		bl	ADC_StartConversion
 2764              	.LBE21:
1026:../src/main.cpp **** }
 2765              		.loc 1 1026 0
 2766 1578 07F14807 		add	r7, r7, #72
 2767 157c BD46     		mov	sp, r7
 2768 157e 80BD     		pop	{r7, pc}
 2769              		.cfi_endproc
 2770              	.LFE124:
 2772              	.Letext0:
 2773              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2774              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2775              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 2776              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 2777              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 2778              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 2779              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 2780              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 2781              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 2782              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 2783              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/ccLdgLuG.s:24     .bss:00000000 led_iter
     /tmp/ccLdgLuG.s:21     .bss:00000000 $d
     /tmp/ccLdgLuG.s:31     .data:00000000 led_matrix
     /tmp/ccLdgLuG.s:28     .data:00000000 $d
     /tmp/ccLdgLuG.s:44     .bss:00000004 left_enc
     /tmp/ccLdgLuG.s:50     .bss:0000002c right_enc
     /tmp/ccLdgLuG.s:56     .bss:00000054 gyro_angle_x
     /tmp/ccLdgLuG.s:62     .bss:00000058 gyro_bias_x
     /tmp/ccLdgLuG.s:68     .bss:0000005c adcval
     /tmp/ccLdgLuG.s:74     .bss:00000060 adcData
     /tmp/ccLdgLuG.s:80     .bss:00000068 new_data
     /tmp/ccLdgLuG.s:86     .bss:0000006c adc2_data
     /tmp/ccLdgLuG.s:91     .bss:0000007c adc2_new_data
     /tmp/ccLdgLuG.s:96     .bss:0000007d adc3_awd1
     /tmp/ccLdgLuG.s:101    .bss:0000007e adc3_awd2
     /tmp/ccLdgLuG.s:107    .bss:00000080 count
     /tmp/ccLdgLuG.s:113    .bss:00000084 stage
     /tmp/ccLdgLuG.s:119    .bss:00000088 drive_cmd
     /tmp/ccLdgLuG.s:125    .bss:0000008c err
     /tmp/ccLdgLuG.s:131    .bss:00000090 last_err
     /tmp/ccLdgLuG.s:137    .bss:00000094 diff_err
     /tmp/ccLdgLuG.s:143    .bss:00000098 rt
     /tmp/ccLdgLuG.s:149    .bss:0000009c d_front
     /tmp/ccLdgLuG.s:155    .bss:000000a0 integral
     /tmp/ccLdgLuG.s:161    .bss:000000a4 left
     /tmp/ccLdgLuG.s:167    .bss:000000a8 right
     /tmp/ccLdgLuG.s:173    .bss:000000ac state
     /tmp/ccLdgLuG.s:179    .bss:000000b0 match_time_counter
     /tmp/ccLdgLuG.s:185    .bss:000000b4 t_firefight_start
     /tmp/ccLdgLuG.s:191    .bss:000000b8 leds_on
     /tmp/ccLdgLuG.s:194    .rodata:00000000 $d
     /tmp/ccLdgLuG.s:195    .rodata:00000000 .LC0
     /tmp/ccLdgLuG.s:198    .text:00000000 $t
     /tmp/ccLdgLuG.s:203    .text:00000000 main
     /tmp/ccLdgLuG.s:612    .text:0000037c _Z24trinity2013_waitForStartv
     /tmp/ccLdgLuG.s:1019   .text:00000688 _Z15brake_pins_initv
     /tmp/ccLdgLuG.s:1676   .text:00000bb8 _Z13adc1_init_DMAv
     /tmp/ccLdgLuG.s:1960   .text:00000e2c _Z13adc2_init_DMAv
     /tmp/ccLdgLuG.s:1091   .text:00000700 _Z13ping_pin_initv
     /tmp/ccLdgLuG.s:1176   .text:00000790 _Z20timer2_timebase_initv
     /tmp/ccLdgLuG.s:862    .text:0000058c _Z19imu_update_ISR_initv
     /tmp/ccLdgLuG.s:1235   .text:000007e4 _Z9comp_initv
     /tmp/ccLdgLuG.s:601    .text:00000374 $d
     /tmp/ccLdgLuG.s:607    .text:0000037c $t
     /tmp/ccLdgLuG.s:697    .text:00000408 _Z11IR_distancei
     /tmp/ccLdgLuG.s:846    .text:0000056c $d
     /tmp/ccLdgLuG.s:857    .text:0000058c $t
     /tmp/ccLdgLuG.s:1585   .text:00000b30 _Z14calc_gyro_biasv
     /tmp/ccLdgLuG.s:979    .rodata:00000010 .LC1
     /tmp/ccLdgLuG.s:988    .text:00000670 L3GD20_TIMEOUT_UserCallback
     /tmp/ccLdgLuG.s:1667   .text:00000bb4 $d
     /tmp/ccLdgLuG.s:1671   .text:00000bb8 $t
     /tmp/ccLdgLuG.s:2312   .text:00001170 _Z21battery_watchdog_initv
     /tmp/ccLdgLuG.s:2570   .text:000013d0 _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.0807ea068105522ac6d873d27913cd99
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z19LED_MATRIX_ISR_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z13pwm_out3_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
printf
_Z11pwm1_outputf
_Z11pwm2_outputf
_Z11pwm3_outputf
RCC_AHBPeriphClockCmd
GPIO_DeInit
GPIO_Init
GPIO_ReadInputDataBit
__aeabi_f2d
__aeabi_d2f
pow
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
GPIO_StructInit
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
