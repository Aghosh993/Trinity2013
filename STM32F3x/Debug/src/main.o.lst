   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	led_iter
  20              		.bss
  21              		.align	2
  24              	led_iter:
  25 0000 00000000 		.space	4
  26              		.global	led_matrix
  27              		.data
  28              		.align	2
  31              	led_matrix:
  32 0000 00020000 		.word	512
  33 0004 00010000 		.word	256
  34 0008 00800000 		.word	32768
  35 000c 00200000 		.word	8192
  36 0010 00100000 		.word	4096
  37 0014 00080000 		.word	2048
  38 0018 00040000 		.word	1024
  39              		.global	left_enc
  40              		.bss
  41              		.align	2
  44              	left_enc:
  45 0004 00000000 		.space	40
  45      00000000 
  45      00000000 
  45      00000000 
  45      00000000 
  46              		.global	right_enc
  47              		.align	2
  50              	right_enc:
  51 002c 00000000 		.space	40
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	gyro_angle_x
  53              		.align	2
  56              	gyro_angle_x:
  57 0054 00000000 		.space	4
  58              		.global	gyro_bias_x
  59              		.align	2
  62              	gyro_bias_x:
  63 0058 00000000 		.space	4
  64              		.global	adcval
  65              		.align	2
  68              	adcval:
  69 005c 00000000 		.space	4
  70              		.global	adcData
  71              		.align	2
  74              	adcData:
  75 0060 00000000 		.space	8
  75      00000000 
  76              		.global	new_data
  77              		.align	2
  80              	new_data:
  81 0068 00000000 		.space	4
  82              		.global	adc2_data
  83              		.align	2
  86              	adc2_data:
  87 006c 00000000 		.space	16
  87      00000000 
  87      00000000 
  87      00000000 
  88              		.global	adc2_new_data
  91              	adc2_new_data:
  92 007c 00       		.space	1
  93              		.global	adc3_awd1
  96              	adc3_awd1:
  97 007d 00       		.space	1
  98              		.global	adc3_awd2
 101              	adc3_awd2:
 102 007e 00       		.space	1
 103              		.global	count
 104 007f 00       		.align	2
 107              	count:
 108 0080 00000000 		.space	4
 109              		.global	stage
 110              		.align	2
 113              	stage:
 114 0084 00000000 		.space	4
 115              		.global	drive_cmd
 116              		.align	2
 119              	drive_cmd:
 120 0088 00000000 		.space	4
 121              		.global	err
 122              		.align	2
 125              	err:
 126 008c 00000000 		.space	4
 127              		.global	last_err
 128              		.align	2
 131              	last_err:
 132 0090 00000000 		.space	4
 133              		.global	diff_err
 134              		.align	2
 137              	diff_err:
 138 0094 00000000 		.space	4
 139              		.global	rt
 140              		.align	2
 143              	rt:
 144 0098 00000000 		.space	4
 145              		.global	d_front
 146              		.align	2
 149              	d_front:
 150 009c 00000000 		.space	4
 151              		.global	integral
 152              		.align	2
 155              	integral:
 156 00a0 00000000 		.space	4
 157              		.global	left
 158              		.align	2
 161              	left:
 162 00a4 00000000 		.space	4
 163              		.global	right
 164              		.align	2
 167              	right:
 168 00a8 00000000 		.space	4
 169              		.global	state
 170              		.align	2
 173              	state:
 174 00ac 00000000 		.space	4
 175              		.section	.rodata
 176              		.align	2
 177              	.LC0:
 178 0000 25346420 		.ascii	"%4d %4d %4d\012\015\000"
 178      25346420 
 178      2534640A 
 178      0D00
 179              		.text
 180              		.align	2
 181              		.global	main
 182              		.thumb
 183              		.thumb_func
 185              	main:
 186              	.LFB111:
 187              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****  * Timer usage manifest:
  17:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  18:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  19:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  20:../src/main.cpp ****  *
  21:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  22:../src/main.cpp ****  *
  23:../src/main.cpp ****  * TIM6: LED matrix ISR
  24:../src/main.cpp ****  * TIM7: Encoder update ISR
  25:../src/main.cpp ****  * TIM17: IMU update ISR
  26:../src/main.cpp ****  *
  27:../src/main.cpp ****  * Other pins/resources used:
  28:../src/main.cpp ****  *
  29:../src/main.cpp ****  * Analog: 	PA2: adcData[0]
  30:../src/main.cpp ****  * 			PA3: adcData[1]
  31:../src/main.cpp ****  *
  32:../src/main.cpp ****  * 			PA4: adc2_data[0]
  33:../src/main.cpp ****  * 			PC4: adc2_data[1]
  34:../src/main.cpp ****  * 			PC5: adc2_data[2]
  35:../src/main.cpp ****  * 			PB2: adc2_data[3]
  36:../src/main.cpp ****  *
  37:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  38:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  39:../src/main.cpp ****  *
  40:../src/main.cpp ****  * Purpose: Trinity 2013 (Theseus) Primary code development tree
  41:../src/main.cpp ****  *
  42:../src/main.cpp ****  */
  43:../src/main.cpp **** 
  44:../src/main.cpp **** /*
  45:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  46:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  47:../src/main.cpp ****  */
  48:../src/main.cpp **** 
  49:../src/main.cpp **** volatile int led_iter;
  50:../src/main.cpp **** volatile int led_matrix[7] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_13,
  51:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
  52:../src/main.cpp **** 
  53:../src/main.cpp **** void imu_update_ISR_init(void);
  54:../src/main.cpp **** int16_t calc_gyro_bias(void);
  55:../src/main.cpp **** 
  56:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
  57:../src/main.cpp **** 
  58:../src/main.cpp **** void adc1_init_DMA(void);
  59:../src/main.cpp **** void adc2_init_DMA(void);
  60:../src/main.cpp **** void battery_watchdog_init(void);
  61:../src/main.cpp **** void adc1_init(void);
  62:../src/main.cpp **** 
  63:../src/main.cpp **** void brake_pins_init(void);
  64:../src/main.cpp **** 
  65:../src/main.cpp **** void ping_pin_init(void);
  66:../src/main.cpp **** void timer2_timebase_init(void);
  67:../src/main.cpp **** 
  68:../src/main.cpp **** void comp_init(void);
  69:../src/main.cpp **** 
  70:../src/main.cpp **** float IR_distance(int IR_ADC_VAL);
  71:../src/main.cpp **** 
  72:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
  73:../src/main.cpp **** 
  74:../src/main.cpp **** encoderState left_enc, right_enc;
  75:../src/main.cpp **** 
  76:../src/main.cpp **** volatile float gyro_angle_x;
  77:../src/main.cpp **** int gyro_bias_x, adcval;
  78:../src/main.cpp **** 
  79:../src/main.cpp **** __IO uint32_t adcData[2];
  80:../src/main.cpp **** int new_data;
  81:../src/main.cpp **** 
  82:../src/main.cpp **** __IO uint32_t adc2_data[4];
  83:../src/main.cpp **** uint8_t adc2_new_data;
  84:../src/main.cpp **** 
  85:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
  86:../src/main.cpp **** 
  87:../src/main.cpp **** int count, stage;
  88:../src/main.cpp **** 
  89:../src/main.cpp **** float drive_cmd;// = 0.0f;
  90:../src/main.cpp **** float err;// = 0.0f;
  91:../src/main.cpp **** float last_err;// = 0.0f;
  92:../src/main.cpp **** float diff_err;
  93:../src/main.cpp **** float rt;// = 0.0f;
  94:../src/main.cpp **** float d_front;// = 1.0f;
  95:../src/main.cpp **** float integral;
  96:../src/main.cpp **** 
  97:../src/main.cpp **** float left, right;
  98:../src/main.cpp **** 
  99:../src/main.cpp **** int state;
 100:../src/main.cpp **** 
 101:../src/main.cpp **** // Initialize all encoder data structures to zero:
 102:../src/main.cpp **** 
 103:../src/main.cpp **** int main(void)
 104:../src/main.cpp **** {
 188              		.loc 1 104 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 8
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}
 193              	.LCFI0:
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0002 82B0     		sub	sp, sp, #8
 198              	.LCFI1:
 199              		.cfi_def_cfa_offset 16
 200 0004 00AF     		add	r7, sp, #0
 201              	.LCFI2:
 202              		.cfi_def_cfa_register 7
 203              	.LBB2:
 105:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 204              		.loc 1 105 0
 205 0006 FFF7FEFF 		bl	SystemInit
 106:../src/main.cpp **** 
 107:../src/main.cpp **** 	UART1_init(); // Debug bridge
 206              		.loc 1 107 0
 207 000a FFF7FEFF 		bl	_Z10UART1_initv
 108:../src/main.cpp **** 
 109:../src/main.cpp **** 	state = ST_WANDER;
 208              		.loc 1 109 0
 209 000e 40F20003 		movw	r3, #:lower16:state
 210 0012 C0F20003 		movt	r3, #:upper16:state
 211 0016 4FF00002 		mov	r2, #0
 212 001a 1A60     		str	r2, [r3, #0]
 110:../src/main.cpp **** 
 111:../src/main.cpp **** 	// Initialize ADC data buffers to 0;
 112:../src/main.cpp **** 
 113:../src/main.cpp **** 	adcData[0] = 0;
 213              		.loc 1 113 0
 214 001c 40F20003 		movw	r3, #:lower16:adcData
 215 0020 C0F20003 		movt	r3, #:upper16:adcData
 216 0024 4FF00002 		mov	r2, #0
 217 0028 1A60     		str	r2, [r3, #0]
 114:../src/main.cpp **** 	adcData[1] = 0;
 218              		.loc 1 114 0
 219 002a 40F20003 		movw	r3, #:lower16:adcData
 220 002e C0F20003 		movt	r3, #:upper16:adcData
 221 0032 4FF00002 		mov	r2, #0
 222 0036 5A60     		str	r2, [r3, #4]
 115:../src/main.cpp **** 
 116:../src/main.cpp **** 	uint8_t iter = 0;
 223              		.loc 1 116 0
 224 0038 4FF00003 		mov	r3, #0
 225 003c FB71     		strb	r3, [r7, #7]
 117:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 226              		.loc 1 117 0
 227 003e 4FF00003 		mov	r3, #0
 228 0042 FB71     		strb	r3, [r7, #7]
 229 0044 0CE0     		b	.L2
 230              	.L3:
 118:../src/main.cpp **** 	{
 119:../src/main.cpp **** 		adc2_data[iter] = 0;
 231              		.loc 1 119 0 discriminator 2
 232 0046 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 233 0048 40F20003 		movw	r3, #:lower16:adc2_data
 234 004c C0F20003 		movt	r3, #:upper16:adc2_data
 235 0050 4FF00001 		mov	r1, #0
 236 0054 43F82210 		str	r1, [r3, r2, lsl #2]
 117:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 237              		.loc 1 117 0 discriminator 2
 238 0058 FB79     		ldrb	r3, [r7, #7]
 239 005a 03F10103 		add	r3, r3, #1
 240 005e FB71     		strb	r3, [r7, #7]
 241              	.L2:
 117:../src/main.cpp **** 	for(iter=0; iter < 7; ++iter)
 242              		.loc 1 117 0 is_stmt 0 discriminator 1
 243 0060 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 244 0062 062B     		cmp	r3, #6
 245 0064 8CBF     		ite	hi
 246 0066 0023     		movhi	r3, #0
 247 0068 0123     		movls	r3, #1
 248 006a DBB2     		uxtb	r3, r3
 249 006c 002B     		cmp	r3, #0
 250 006e EAD1     		bne	.L3
 120:../src/main.cpp **** 	}
 121:../src/main.cpp **** 
 122:../src/main.cpp **** 	adc3_awd1 = 0;
 251              		.loc 1 122 0 is_stmt 1
 252 0070 40F20003 		movw	r3, #:lower16:adc3_awd1
 253 0074 C0F20003 		movt	r3, #:upper16:adc3_awd1
 254 0078 4FF00002 		mov	r2, #0
 255 007c 1A70     		strb	r2, [r3, #0]
 123:../src/main.cpp **** 	adc3_awd2 = 0;
 256              		.loc 1 123 0
 257 007e 40F20003 		movw	r3, #:lower16:adc3_awd2
 258 0082 C0F20003 		movt	r3, #:upper16:adc3_awd2
 259 0086 4FF00002 		mov	r2, #0
 260 008a 1A70     		strb	r2, [r3, #0]
 124:../src/main.cpp **** 
 125:../src/main.cpp **** 	count = 0;
 261              		.loc 1 125 0
 262 008c 40F20003 		movw	r3, #:lower16:count
 263 0090 C0F20003 		movt	r3, #:upper16:count
 264 0094 4FF00002 		mov	r2, #0
 265 0098 1A60     		str	r2, [r3, #0]
 126:../src/main.cpp **** 	stage = 0;
 266              		.loc 1 126 0
 267 009a 40F20003 		movw	r3, #:lower16:stage
 268 009e C0F20003 		movt	r3, #:upper16:stage
 269 00a2 4FF00002 		mov	r2, #0
 270 00a6 1A60     		str	r2, [r3, #0]
 127:../src/main.cpp **** 
 128:../src/main.cpp **** 	/*
 129:../src/main.cpp **** 	 * Initialize global encoder data structure for left and right encoders,
 130:../src/main.cpp **** 	 * and set position/speed targets as necessary:
 131:../src/main.cpp **** 	 */
 132:../src/main.cpp **** 
 133:../src/main.cpp **** 	init_encoder_struct(&left_enc);
 271              		.loc 1 133 0
 272 00a8 40F20000 		movw	r0, #:lower16:left_enc
 273 00ac C0F20000 		movt	r0, #:upper16:left_enc
 274 00b0 FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 134:../src/main.cpp **** 	init_encoder_struct(&right_enc);
 275              		.loc 1 134 0
 276 00b4 40F20000 		movw	r0, #:lower16:right_enc
 277 00b8 C0F20000 		movt	r0, #:upper16:right_enc
 278 00bc FFF7FEFF 		bl	_Z19init_encoder_structP12encoderState
 135:../src/main.cpp **** 
 136:../src/main.cpp **** 	// Initialize PWM outputs 1 and 2 at 5.0 kHz duty frequency:
 137:../src/main.cpp **** 
 138:../src/main.cpp **** 	brake_pins_init();
 279              		.loc 1 138 0
 280 00c0 FFF7FEFF 		bl	_Z15brake_pins_initv
 139:../src/main.cpp **** 	pwm_out1_init(2000);
 281              		.loc 1 139 0
 282 00c4 4FF4FA60 		mov	r0, #2000
 283 00c8 FFF7FEFF 		bl	_Z13pwm_out1_initt
 140:../src/main.cpp **** 	pwm_out2_init(2000);
 284              		.loc 1 140 0
 285 00cc 4FF4FA60 		mov	r0, #2000
 286 00d0 FFF7FEFF 		bl	_Z13pwm_out2_initt
 141:../src/main.cpp **** 
 142:../src/main.cpp **** 	pwm_out3_init(50);
 287              		.loc 1 142 0
 288 00d4 4FF03200 		mov	r0, #50
 289 00d8 FFF7FEFF 		bl	_Z13pwm_out3_initt
 143:../src/main.cpp **** 
 144:../src/main.cpp **** 	// Initialize hardware quadrature encoder input interfaces:
 145:../src/main.cpp **** 
 146:../src/main.cpp **** 	TIM8_init_encoder();
 290              		.loc 1 146 0
 291 00dc FFF7FEFF 		bl	_Z17TIM8_init_encoderv
 147:../src/main.cpp **** 	TIM4_init_encoder();
 292              		.loc 1 147 0
 293 00e0 FFF7FEFF 		bl	_Z17TIM4_init_encoderv
 148:../src/main.cpp **** 
 149:../src/main.cpp **** 	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:
 150:../src/main.cpp **** 
 151:../src/main.cpp **** 	new_data = 0;
 294              		.loc 1 151 0
 295 00e4 40F20003 		movw	r3, #:lower16:new_data
 296 00e8 C0F20003 		movt	r3, #:upper16:new_data
 297 00ec 4FF00002 		mov	r2, #0
 298 00f0 1A60     		str	r2, [r3, #0]
 152:../src/main.cpp **** 	adc2_new_data = 0;
 299              		.loc 1 152 0
 300 00f2 40F20003 		movw	r3, #:lower16:adc2_new_data
 301 00f6 C0F20003 		movt	r3, #:upper16:adc2_new_data
 302 00fa 4FF00002 		mov	r2, #0
 303 00fe 1A70     		strb	r2, [r3, #0]
 153:../src/main.cpp **** 
 154:../src/main.cpp **** 	// Initialize ADC1 DMA:
 155:../src/main.cpp **** 	adc1_init_DMA();
 304              		.loc 1 155 0
 305 0100 FFF7FEFF 		bl	_Z13adc1_init_DMAv
 156:../src/main.cpp **** 
 157:../src/main.cpp **** 	// Initialize ADC2 DMA:
 158:../src/main.cpp **** 	adc2_init_DMA();
 306              		.loc 1 158 0
 307 0104 FFF7FEFF 		bl	_Z13adc2_init_DMAv
 159:../src/main.cpp **** //	battery_watchdog_init();
 160:../src/main.cpp **** 
 161:../src/main.cpp **** 	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 308              		.loc 1 161 0
 309 0108 FFF7FEFF 		bl	_Z23encoder_update_ISR_initv
 162:../src/main.cpp **** 	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 310              		.loc 1 162 0
 311 010c FFF7FEFF 		bl	_Z19LED_MATRIX_ISR_initv
 163:../src/main.cpp **** 
 164:../src/main.cpp **** 	// Ping Sensor Init:
 165:../src/main.cpp **** 
 166:../src/main.cpp **** 	ping_pin_init();
 312              		.loc 1 166 0
 313 0110 FFF7FEFF 		bl	_Z13ping_pin_initv
 167:../src/main.cpp **** 	timer2_timebase_init();
 314              		.loc 1 167 0
 315 0114 FFF7FEFF 		bl	_Z20timer2_timebase_initv
 168:../src/main.cpp **** 	imu_update_ISR_init();
 316              		.loc 1 168 0
 317 0118 FFF7FEFF 		bl	_Z19imu_update_ISR_initv
 169:../src/main.cpp **** 
 170:../src/main.cpp **** 	// Encoder comparator init for noise debounce:
 171:../src/main.cpp **** 	comp_init();
 318              		.loc 1 171 0
 319 011c FFF7FEFF 		bl	_Z9comp_initv
 172:../src/main.cpp **** 
 173:../src/main.cpp **** 	adcval = 0;
 320              		.loc 1 173 0
 321 0120 40F20003 		movw	r3, #:lower16:adcval
 322 0124 C0F20003 		movt	r3, #:upper16:adcval
 323 0128 4FF00002 		mov	r2, #0
 324 012c 1A60     		str	r2, [r3, #0]
 174:../src/main.cpp **** //	mtr_out = 0;
 175:../src/main.cpp **** 
 176:../src/main.cpp **** 	drive_cmd = 0.0f;
 325              		.loc 1 176 0
 326 012e 40F20003 		movw	r3, #:lower16:drive_cmd
 327 0132 C0F20003 		movt	r3, #:upper16:drive_cmd
 328 0136 4FF00002 		mov	r2, #0
 329 013a 1A60     		str	r2, [r3, #0]	@ float
 177:../src/main.cpp **** 	err = 0.0f;
 330              		.loc 1 177 0
 331 013c 40F20003 		movw	r3, #:lower16:err
 332 0140 C0F20003 		movt	r3, #:upper16:err
 333 0144 4FF00002 		mov	r2, #0
 334 0148 1A60     		str	r2, [r3, #0]	@ float
 178:../src/main.cpp **** 	last_err = 0.0f;
 335              		.loc 1 178 0
 336 014a 40F20003 		movw	r3, #:lower16:last_err
 337 014e C0F20003 		movt	r3, #:upper16:last_err
 338 0152 4FF00002 		mov	r2, #0
 339 0156 1A60     		str	r2, [r3, #0]	@ float
 179:../src/main.cpp **** 	diff_err = 0.0f;
 340              		.loc 1 179 0
 341 0158 40F20003 		movw	r3, #:lower16:diff_err
 342 015c C0F20003 		movt	r3, #:upper16:diff_err
 343 0160 4FF00002 		mov	r2, #0
 344 0164 1A60     		str	r2, [r3, #0]	@ float
 180:../src/main.cpp **** 	rt = 0.0f;
 345              		.loc 1 180 0
 346 0166 40F20003 		movw	r3, #:lower16:rt
 347 016a C0F20003 		movt	r3, #:upper16:rt
 348 016e 4FF00002 		mov	r2, #0
 349 0172 1A60     		str	r2, [r3, #0]	@ float
 181:../src/main.cpp **** 	d_front = 1.0f;
 350              		.loc 1 181 0
 351 0174 40F20003 		movw	r3, #:lower16:d_front
 352 0178 C0F20003 		movt	r3, #:upper16:d_front
 353 017c 4FF07E52 		mov	r2, #1065353216
 354 0180 1A60     		str	r2, [r3, #0]	@ float
 182:../src/main.cpp **** 	integral = 0.0f;
 355              		.loc 1 182 0
 356 0182 40F20003 		movw	r3, #:lower16:integral
 357 0186 C0F20003 		movt	r3, #:upper16:integral
 358 018a 4FF00002 		mov	r2, #0
 359 018e 1A60     		str	r2, [r3, #0]	@ float
 360 0190 00E0     		b	.L11
 361              	.L12:
 183:../src/main.cpp **** 
 184:../src/main.cpp **** 	while(true)
 362              		.loc 1 184 0
 363 0192 00BF     		nop
 364              	.L11:
 365              	.LBB3:
 185:../src/main.cpp **** 	{
 186:../src/main.cpp **** 		printf("%4d %4d %4d\n\r", (int)adcData[0] , (int)adc2_data[2], ((int)adcData[0] - (int)adc2_data[
 366              		.loc 1 186 0
 367 0194 40F20003 		movw	r3, #:lower16:adcData
 368 0198 C0F20003 		movt	r3, #:upper16:adcData
 369 019c 1B68     		ldr	r3, [r3, #0]
 370 019e 1946     		mov	r1, r3
 371 01a0 40F20003 		movw	r3, #:lower16:adc2_data
 372 01a4 C0F20003 		movt	r3, #:upper16:adc2_data
 373 01a8 9B68     		ldr	r3, [r3, #8]
 374 01aa 1A46     		mov	r2, r3
 375 01ac 40F20003 		movw	r3, #:lower16:adcData
 376 01b0 C0F20003 		movt	r3, #:upper16:adcData
 377 01b4 1B68     		ldr	r3, [r3, #0]
 378 01b6 1846     		mov	r0, r3
 379 01b8 40F20003 		movw	r3, #:lower16:adc2_data
 380 01bc C0F20003 		movt	r3, #:upper16:adc2_data
 381 01c0 9B68     		ldr	r3, [r3, #8]
 382 01c2 C31A     		subs	r3, r0, r3
 383 01c4 40F20000 		movw	r0, #:lower16:.LC0
 384 01c8 C0F20000 		movt	r0, #:upper16:.LC0
 385 01cc FFF7FEFF 		bl	printf
 386              	.LBB4:
 187:../src/main.cpp **** 	//	pwm3_output(0.1f); // Fan full-throttle
 188:../src/main.cpp **** 		if(((adc2_data[2] > 600 || adcData[0] > 600)) && state == ST_WANDER)
 387              		.loc 1 188 0
 388 01d0 40F20003 		movw	r3, #:lower16:adc2_data
 389 01d4 C0F20003 		movt	r3, #:upper16:adc2_data
 390 01d8 9B68     		ldr	r3, [r3, #8]
 391 01da B3F5167F 		cmp	r3, #600
 392 01de 07D8     		bhi	.L4
 393              		.loc 1 188 0 is_stmt 0 discriminator 2
 394 01e0 40F20003 		movw	r3, #:lower16:adcData
 395 01e4 C0F20003 		movt	r3, #:upper16:adcData
 396 01e8 1B68     		ldr	r3, [r3, #0]
 397 01ea B3F5167F 		cmp	r3, #600
 398 01ee 09D9     		bls	.L5
 399              	.L4:
 400              		.loc 1 188 0 discriminator 1
 401 01f0 40F20003 		movw	r3, #:lower16:state
 402 01f4 C0F20003 		movt	r3, #:upper16:state
 403 01f8 1B68     		ldr	r3, [r3, #0]
 404 01fa 002B     		cmp	r3, #0
 405 01fc 02D1     		bne	.L5
 406              		.loc 1 188 0 discriminator 4
 407 01fe 4FF00103 		mov	r3, #1
 408 0202 01E0     		b	.L6
 409              	.L5:
 410              		.loc 1 188 0 discriminator 3
 411 0204 4FF00003 		mov	r3, #0
 412              	.L6:
 413              		.loc 1 188 0 discriminator 5
 414 0208 002B     		cmp	r3, #0
 415 020a 07D0     		beq	.L7
 189:../src/main.cpp **** 		{
 190:../src/main.cpp **** 			state = ST_HOMING;
 416              		.loc 1 190 0 is_stmt 1
 417 020c 40F20003 		movw	r3, #:lower16:state
 418 0210 C0F20003 		movt	r3, #:upper16:state
 419 0214 4FF00102 		mov	r2, #1
 420 0218 1A60     		str	r2, [r3, #0]
 421              	.LBE4:
 422              	.LBE3:
 184:../src/main.cpp **** 	while(true)
 423              		.loc 1 184 0
 424 021a BAE7     		b	.L12
 425              	.L7:
 426              	.LBB9:
 427              	.LBB8:
 428              	.LBB5:
 429              	.LBB6:
 191:../src/main.cpp **** 		}
 192:../src/main.cpp **** 		else if (state == ST_FIREFIGHT)
 430              		.loc 1 192 0
 431 021c 40F20003 		movw	r3, #:lower16:state
 432 0220 C0F20003 		movt	r3, #:upper16:state
 433 0224 1B68     		ldr	r3, [r3, #0]
 434 0226 022B     		cmp	r3, #2
 435 0228 B3D1     		bne	.L12
 436              	.LBB7:
 193:../src/main.cpp **** 		{
 194:../src/main.cpp **** 			pwm1_output(0.5);
 437              		.loc 1 194 0
 438 022a 4FF07C50 		mov	r0, #1056964608
 439 022e FFF7FEFF 		bl	_Z11pwm1_outputf
 195:../src/main.cpp **** 			pwm2_output(0.5);
 440              		.loc 1 195 0
 441 0232 4FF07C50 		mov	r0, #1056964608
 442 0236 FFF7FEFF 		bl	_Z11pwm2_outputf
 196:../src/main.cpp **** 			int jk = 0;
 443              		.loc 1 196 0
 444 023a 4FF00003 		mov	r3, #0
 445 023e 3B60     		str	r3, [r7, #0]
 197:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 446              		.loc 1 197 0
 447 0240 4FF00003 		mov	r3, #0
 448 0244 3B60     		str	r3, [r7, #0]
 449 0246 09E0     		b	.L9
 450              	.L10:
 198:../src/main.cpp **** 			{
 199:../src/main.cpp **** 				pwm3_output(0.06f);
 451              		.loc 1 199 0 discriminator 2
 452 0248 4CF28F20 		movw	r0, #49807
 453 024c C3F67550 		movt	r0, 15733
 454 0250 FFF7FEFF 		bl	_Z11pwm3_outputf
 197:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 455              		.loc 1 197 0 discriminator 2
 456 0254 3B68     		ldr	r3, [r7, #0]
 457 0256 03F10103 		add	r3, r3, #1
 458 025a 3B60     		str	r3, [r7, #0]
 459              	.L9:
 197:../src/main.cpp **** 			for(jk=0;jk<1250000;++jk)
 460              		.loc 1 197 0 is_stmt 0 discriminator 1
 461 025c 3A68     		ldr	r2, [r7, #0]
 462 025e 41F2CF23 		movw	r3, #4815
 463 0262 C0F21303 		movt	r3, 19
 464 0266 9A42     		cmp	r2, r3
 465 0268 CCBF     		ite	gt
 466 026a 0023     		movgt	r3, #0
 467 026c 0123     		movle	r3, #1
 468 026e DBB2     		uxtb	r3, r3
 469 0270 002B     		cmp	r3, #0
 470 0272 E9D1     		bne	.L10
 200:../src/main.cpp **** 			}
 201:../src/main.cpp **** 			pwm3_output(0.1f);
 471              		.loc 1 201 0 is_stmt 1
 472 0274 4CF6CD40 		movw	r0, #52429
 473 0278 C3F6CC50 		movt	r0, 15820
 474 027c FFF7FEFF 		bl	_Z11pwm3_outputf
 202:../src/main.cpp **** 			state = ST_DONE;
 475              		.loc 1 202 0
 476 0280 40F20003 		movw	r3, #:lower16:state
 477 0284 C0F20003 		movt	r3, #:upper16:state
 478 0288 4FF00302 		mov	r2, #3
 479 028c 1A60     		str	r2, [r3, #0]
 480              	.LBE7:
 481              	.LBE6:
 482              	.LBE5:
 483              	.LBE8:
 484              	.LBE9:
 184:../src/main.cpp **** 	while(true)
 485              		.loc 1 184 0
 486 028e 80E7     		b	.L12
 487              	.LBE2:
 488              		.cfi_endproc
 489              	.LFE111:
 491              		.global	__aeabi_f2d
 492              		.global	__aeabi_d2f
 493              		.align	2
 494              		.global	_Z11IR_distancei
 495              		.thumb
 496              		.thumb_func
 498              	_Z11IR_distancei:
 499              	.LFB112:
 203:../src/main.cpp **** 		}
 204:../src/main.cpp **** 
 205:../src/main.cpp **** 	}
 206:../src/main.cpp **** 	return 0; // We should never manage to get here...
 207:../src/main.cpp **** }
 208:../src/main.cpp **** 
 209:../src/main.cpp **** float IR_distance(int IR_ADC_VAL)
 210:../src/main.cpp **** {
 500              		.loc 1 210 0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 16
 503              		@ frame_needed = 1, uses_anonymous_args = 0
 504 0290 80B5     		push	{r7, lr}
 505              	.LCFI3:
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 7, -8
 508              		.cfi_offset 14, -4
 509 0292 2DED028B 		fstmfdd	sp!, {d8}
 510              	.LCFI4:
 511              		.cfi_def_cfa_offset 16
 512              		.cfi_offset 80, -16
 513 0296 84B0     		sub	sp, sp, #16
 514              	.LCFI5:
 515              		.cfi_def_cfa_offset 32
 516 0298 00AF     		add	r7, sp, #0
 517              	.LCFI6:
 518              		.cfi_def_cfa_register 7
 519 029a 7860     		str	r0, [r7, #4]
 520              	.LBB10:
 211:../src/main.cpp **** 	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 521              		.loc 1 211 0
 522 029c D7ED017A 		flds	s15, [r7, #4]	@ int
 523 02a0 B8EEE77A 		fsitos	s14, s15
 524 02a4 DFED537A 		flds	s15, .L15
 525 02a8 67EE277A 		fmuls	s15, s14, s15
 526 02ac C7ED037A 		fsts	s15, [r7, #12]
 212:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 527              		.loc 1 212 0
 528 02b0 F868     		ldr	r0, [r7, #12]	@ float
 529 02b2 FFF7FEFF 		bl	__aeabi_f2d
 530 02b6 0246     		mov	r2, r0
 531 02b8 0B46     		mov	r3, r1
 532 02ba 1046     		mov	r0, r2
 533 02bc 1946     		mov	r1, r3
 534 02be 4FF00002 		mov	r2, #0
 535 02c2 4FF00003 		mov	r3, #0
 536 02c6 C4F21803 		movt	r3, 16408
 537 02ca FFF7FEFF 		bl	pow
 538 02ce 0246     		mov	r2, r0
 539 02d0 0B46     		mov	r3, r1
 213:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 214:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 215:../src/main.cpp **** 			+ (float)60.24);
 540              		.loc 1 215 0
 541 02d2 1046     		mov	r0, r2
 542 02d4 1946     		mov	r1, r3
 543 02d6 FFF7FEFF 		bl	__aeabi_d2f
 544 02da 07EE100A 		fmsr	s14, r0
 545 02de DFED467A 		flds	s15, .L15+4
 546 02e2 27EE278A 		fmuls	s16, s14, s15
 212:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 547              		.loc 1 212 0
 548 02e6 F868     		ldr	r0, [r7, #12]	@ float
 549 02e8 FFF7FEFF 		bl	__aeabi_f2d
 550 02ec 0246     		mov	r2, r0
 551 02ee 0B46     		mov	r3, r1
 552 02f0 1046     		mov	r0, r2
 553 02f2 1946     		mov	r1, r3
 554 02f4 4FF00002 		mov	r2, #0
 555 02f8 4FF00003 		mov	r3, #0
 556 02fc C4F21403 		movt	r3, 16404
 557 0300 FFF7FEFF 		bl	pow
 558 0304 0246     		mov	r2, r0
 559 0306 0B46     		mov	r3, r1
 560              		.loc 1 215 0
 561 0308 1046     		mov	r0, r2
 562 030a 1946     		mov	r1, r3
 563 030c FFF7FEFF 		bl	__aeabi_d2f
 564 0310 07EE100A 		fmsr	s14, r0
 565 0314 DFED397A 		flds	s15, .L15+8
 566 0318 67EE277A 		fmuls	s15, s14, s15
 567 031c 38EE678A 		fsubs	s16, s16, s15
 213:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 568              		.loc 1 213 0
 569 0320 F868     		ldr	r0, [r7, #12]	@ float
 570 0322 FFF7FEFF 		bl	__aeabi_f2d
 571 0326 0246     		mov	r2, r0
 572 0328 0B46     		mov	r3, r1
 573 032a 1046     		mov	r0, r2
 574 032c 1946     		mov	r1, r3
 575 032e 4FF00002 		mov	r2, #0
 576 0332 4FF00003 		mov	r3, #0
 577 0336 C4F21003 		movt	r3, 16400
 578 033a FFF7FEFF 		bl	pow
 579 033e 0246     		mov	r2, r0
 580 0340 0B46     		mov	r3, r1
 581              		.loc 1 215 0
 582 0342 1046     		mov	r0, r2
 583 0344 1946     		mov	r1, r3
 584 0346 FFF7FEFF 		bl	__aeabi_d2f
 585 034a 07EE100A 		fmsr	s14, r0
 586 034e DFED2C7A 		flds	s15, .L15+12
 587 0352 67EE277A 		fmuls	s15, s14, s15
 588 0356 38EE278A 		fadds	s16, s16, s15
 213:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 589              		.loc 1 213 0
 590 035a F868     		ldr	r0, [r7, #12]	@ float
 591 035c FFF7FEFF 		bl	__aeabi_f2d
 592 0360 0246     		mov	r2, r0
 593 0362 0B46     		mov	r3, r1
 594 0364 1046     		mov	r0, r2
 595 0366 1946     		mov	r1, r3
 596 0368 4FF00002 		mov	r2, #0
 597 036c 4FF00003 		mov	r3, #0
 598 0370 C4F20803 		movt	r3, 16392
 599 0374 FFF7FEFF 		bl	pow
 600 0378 0246     		mov	r2, r0
 601 037a 0B46     		mov	r3, r1
 602              		.loc 1 215 0
 603 037c 1046     		mov	r0, r2
 604 037e 1946     		mov	r1, r3
 605 0380 FFF7FEFF 		bl	__aeabi_d2f
 606 0384 07EE100A 		fmsr	s14, r0
 607 0388 DFED1E7A 		flds	s15, .L15+16
 608 038c 67EE277A 		fmuls	s15, s14, s15
 609 0390 38EE678A 		fsubs	s16, s16, s15
 214:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 610              		.loc 1 214 0
 611 0394 F868     		ldr	r0, [r7, #12]	@ float
 612 0396 FFF7FEFF 		bl	__aeabi_f2d
 613 039a 0246     		mov	r2, r0
 614 039c 0B46     		mov	r3, r1
 615 039e 1046     		mov	r0, r2
 616 03a0 1946     		mov	r1, r3
 617 03a2 4FF00002 		mov	r2, #0
 618 03a6 4FF08043 		mov	r3, #1073741824
 619 03aa FFF7FEFF 		bl	pow
 620 03ae 0246     		mov	r2, r0
 621 03b0 0B46     		mov	r3, r1
 622              		.loc 1 215 0
 623 03b2 1046     		mov	r0, r2
 624 03b4 1946     		mov	r1, r3
 625 03b6 FFF7FEFF 		bl	__aeabi_d2f
 626 03ba 07EE100A 		fmsr	s14, r0
 627 03be DFED127A 		flds	s15, .L15+20
 628 03c2 67EE277A 		fmuls	s15, s14, s15
 629 03c6 38EE277A 		fadds	s14, s16, s15
 630 03ca D7ED036A 		flds	s13, [r7, #12]
 631 03ce DFED0F7A 		flds	s15, .L15+24
 632 03d2 66EEA77A 		fmuls	s15, s13, s15
 633 03d6 37EE677A 		fsubs	s14, s14, s15
 634 03da DFED0D7A 		flds	s15, .L15+28
 635 03de 77EE277A 		fadds	s15, s14, s15
 636 03e2 17EE903A 		fmrs	r3, s15
 637              	.LBE10:
 216:../src/main.cpp **** }
 638              		.loc 1 216 0
 639 03e6 1846     		mov	r0, r3	@ float
 640 03e8 07F11007 		add	r7, r7, #16
 641 03ec BD46     		mov	sp, r7
 642 03ee BDEC028B 		fldmfdd	sp!, {d8}
 643 03f2 80BD     		pop	{r7, pc}
 644              	.L16:
 645              		.align	2
 646              	.L15:
 647 03f4 4A03643A 		.word	979632970
 648 03f8 C1CA213F 		.word	1059179201
 649 03fc 27310041 		.word	1090531623
 650 0400 33332442 		.word	1109668659
 651 0404 6666DB42 		.word	1121674854
 652 0408 33B32443 		.word	1126478643
 653 040c CDCC0A43 		.word	1124781261
 654 0410 C3F57042 		.word	1114699203
 655              		.cfi_endproc
 656              	.LFE112:
 658              		.align	2
 659              		.global	_Z19imu_update_ISR_initv
 660              		.thumb
 661              		.thumb_func
 663              	_Z19imu_update_ISR_initv:
 664              	.LFB113:
 217:../src/main.cpp **** 
 218:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 219:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 220:../src/main.cpp **** 
 221:../src/main.cpp **** void imu_update_ISR_init(void)
 222:../src/main.cpp **** {
 665              		.loc 1 222 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 24
 668              		@ frame_needed = 1, uses_anonymous_args = 0
 669 0414 80B5     		push	{r7, lr}
 670              	.LCFI7:
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0416 86B0     		sub	sp, sp, #24
 675              	.LCFI8:
 676              		.cfi_def_cfa_offset 32
 677 0418 00AF     		add	r7, sp, #0
 678              	.LCFI9:
 679              		.cfi_def_cfa_register 7
 680              	.LBB11:
 223:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 224:../src/main.cpp **** 
 225:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 681              		.loc 1 225 0
 682 041a 4FF00703 		mov	r3, #7
 683 041e BB74     		strb	r3, [r7, #18]
 226:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 684              		.loc 1 226 0
 685 0420 4FF00003 		mov	r3, #0
 686 0424 FB74     		strb	r3, [r7, #19]
 227:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 687              		.loc 1 227 0
 688 0426 4FF00003 		mov	r3, #0
 689 042a 3B75     		strb	r3, [r7, #20]
 228:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 690              		.loc 1 228 0
 691 042c 4FF00003 		mov	r3, #0
 692 0430 7B75     		strb	r3, [r7, #21]
 229:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 693              		.loc 1 229 0
 694 0432 4FF00003 		mov	r3, #0
 695 0436 BB75     		strb	r3, [r7, #22]
 230:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 696              		.loc 1 230 0
 697 0438 4FF00003 		mov	r3, #0
 698 043c 7B74     		strb	r3, [r7, #17]
 231:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 699              		.loc 1 231 0
 700 043e 4FF00803 		mov	r3, #8
 701 0442 3B74     		strb	r3, [r7, #16]
 232:../src/main.cpp **** 
 233:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 702              		.loc 1 233 0
 703 0444 07F11003 		add	r3, r7, #16
 704 0448 1846     		mov	r0, r3
 705 044a FFF7FEFF 		bl	L3GD20_Init
 234:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 706              		.loc 1 234 0
 707 044e FFF7FEFF 		bl	_Z14calc_gyro_biasv
 708 0452 0346     		mov	r3, r0
 709 0454 1A46     		mov	r2, r3
 710 0456 40F20003 		movw	r3, #:lower16:gyro_bias_x
 711 045a C0F20003 		movt	r3, #:upper16:gyro_bias_x
 712 045e 1A60     		str	r2, [r3, #0]
 235:../src/main.cpp **** 
 236:../src/main.cpp **** 	gyro_angle_x = 0;
 713              		.loc 1 236 0
 714 0460 40F20003 		movw	r3, #:lower16:gyro_angle_x
 715 0464 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 716 0468 4FF00002 		mov	r2, #0
 717 046c 1A60     		str	r2, [r3, #0]	@ float
 237:../src/main.cpp **** 
 238:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 239:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 240:../src/main.cpp **** 
 241:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 718              		.loc 1 241 0
 719 046e 4FF01A03 		mov	r3, #26
 720 0472 3B73     		strb	r3, [r7, #12]
 242:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 721              		.loc 1 242 0
 722 0474 4FF00003 		mov	r3, #0
 723 0478 7B73     		strb	r3, [r7, #13]
 243:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 724              		.loc 1 243 0
 725 047a 4FF00003 		mov	r3, #0
 726 047e BB73     		strb	r3, [r7, #14]
 244:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 727              		.loc 1 244 0
 728 0480 4FF00103 		mov	r3, #1
 729 0484 FB73     		strb	r3, [r7, #15]
 245:../src/main.cpp **** 
 246:../src/main.cpp **** 	NVIC_Init(&nv);
 730              		.loc 1 246 0
 731 0486 07F10C03 		add	r3, r7, #12
 732 048a 1846     		mov	r0, r3
 733 048c FFF7FEFF 		bl	NVIC_Init
 247:../src/main.cpp **** 
 248:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 734              		.loc 1 248 0
 735 0490 4FF48020 		mov	r0, #262144
 736 0494 4FF00101 		mov	r1, #1
 737 0498 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 249:../src/main.cpp **** 
 250:../src/main.cpp **** 	/*
 251:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 252:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 253:../src/main.cpp **** 	 * 	  Period -> ARR
 254:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 255:../src/main.cpp **** 	 */
 256:../src/main.cpp **** 
 257:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 738              		.loc 1 257 0
 739 049c 40F28F13 		movw	r3, #399
 740 04a0 7B60     		str	r3, [r7, #4]
 258:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 741              		.loc 1 258 0
 742 04a2 41F61F43 		movw	r3, #7199
 743 04a6 3B80     		strh	r3, [r7, #0]	@ movhi
 259:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 744              		.loc 1 259 0
 745 04a8 4FF00003 		mov	r3, #0
 746 04ac BB72     		strb	r3, [r7, #10]
 260:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 747              		.loc 1 260 0
 748 04ae 4FF00003 		mov	r3, #0
 749 04b2 3B81     		strh	r3, [r7, #8]	@ movhi
 261:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 750              		.loc 1 261 0
 751 04b4 4FF00003 		mov	r3, #0
 752 04b8 7B80     		strh	r3, [r7, #2]	@ movhi
 262:../src/main.cpp **** 
 263:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 753              		.loc 1 263 0
 754 04ba 3B46     		mov	r3, r7
 755 04bc 4FF49040 		mov	r0, #18432
 756 04c0 C4F20100 		movt	r0, 16385
 757 04c4 1946     		mov	r1, r3
 758 04c6 FFF7FEFF 		bl	TIM_TimeBaseInit
 264:../src/main.cpp **** 
 265:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 759              		.loc 1 265 0
 760 04ca 4FF49040 		mov	r0, #18432
 761 04ce C4F20100 		movt	r0, 16385
 762 04d2 4FF00101 		mov	r1, #1
 763 04d6 4FF00102 		mov	r2, #1
 764 04da FFF7FEFF 		bl	TIM_ITConfig
 266:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 765              		.loc 1 266 0
 766 04de 4FF49040 		mov	r0, #18432
 767 04e2 C4F20100 		movt	r0, 16385
 768 04e6 4FF00101 		mov	r1, #1
 769 04ea FFF7FEFF 		bl	TIM_Cmd
 770              	.LBE11:
 267:../src/main.cpp **** }
 771              		.loc 1 267 0
 772 04ee 07F11807 		add	r7, r7, #24
 773 04f2 BD46     		mov	sp, r7
 774 04f4 80BD     		pop	{r7, pc}
 775              		.cfi_endproc
 776              	.LFE113:
 778              		.section	.rodata
 779 000e 0000     		.align	2
 780              	.LC1:
 781 0010 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 781      32302072 
 781      65616420 
 781      61747465 
 781      6D707420 
 782 0043 636F6465 		.ascii	"code!!!\012\015\000"
 782      2121210A 
 782      0D00
 783 004d 000000   		.text
 784 04f6 00BF     		.align	2
 785              		.global	L3GD20_TIMEOUT_UserCallback
 786              		.thumb
 787              		.thumb_func
 789              	L3GD20_TIMEOUT_UserCallback:
 790              	.LFB114:
 268:../src/main.cpp **** 
 269:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 270:../src/main.cpp **** {
 791              		.loc 1 270 0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 1, uses_anonymous_args = 0
 795 04f8 80B5     		push	{r7, lr}
 796              	.LCFI10:
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 800 04fa 00AF     		add	r7, sp, #0
 801              	.LCFI11:
 802              		.cfi_def_cfa_register 7
 271:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 803              		.loc 1 271 0
 804 04fc 40F20000 		movw	r0, #:lower16:.LC1
 805 0500 C0F20000 		movt	r0, #:upper16:.LC1
 806 0504 FFF7FEFF 		bl	printf
 272:../src/main.cpp **** 	return 0;
 807              		.loc 1 272 0
 808 0508 4FF00003 		mov	r3, #0
 273:../src/main.cpp **** }
 809              		.loc 1 273 0
 810 050c 1846     		mov	r0, r3
 811 050e 80BD     		pop	{r7, pc}
 812              		.cfi_endproc
 813              	.LFE114:
 815              		.align	2
 816              		.global	_Z15brake_pins_initv
 817              		.thumb
 818              		.thumb_func
 820              	_Z15brake_pins_initv:
 821              	.LFB115:
 274:../src/main.cpp **** 
 275:../src/main.cpp **** void brake_pins_init(void)
 276:../src/main.cpp **** {
 822              		.loc 1 276 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 8
 825              		@ frame_needed = 1, uses_anonymous_args = 0
 826 0510 80B5     		push	{r7, lr}
 827              	.LCFI12:
 828              		.cfi_def_cfa_offset 8
 829              		.cfi_offset 7, -8
 830              		.cfi_offset 14, -4
 831 0512 82B0     		sub	sp, sp, #8
 832              	.LCFI13:
 833              		.cfi_def_cfa_offset 16
 834 0514 00AF     		add	r7, sp, #0
 835              	.LCFI14:
 836              		.cfi_def_cfa_register 7
 837              	.LBB12:
 277:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 838              		.loc 1 277 0
 839 0516 4FF40010 		mov	r0, #2097152
 840 051a 4FF00101 		mov	r1, #1
 841 051e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 278:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 279:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 842              		.loc 1 279 0
 843 0522 3B46     		mov	r3, r7
 844 0524 1846     		mov	r0, r3
 845 0526 FFF7FEFF 		bl	GPIO_StructInit
 280:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 846              		.loc 1 280 0
 847 052a 4FF00C03 		mov	r3, #12
 848 052e 3B60     		str	r3, [r7, #0]
 281:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 849              		.loc 1 281 0
 850 0530 4FF00003 		mov	r3, #0
 851 0534 BB71     		strb	r3, [r7, #6]
 282:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 852              		.loc 1 282 0
 853 0536 4FF00103 		mov	r3, #1
 854 053a 3B71     		strb	r3, [r7, #4]
 283:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 855              		.loc 1 283 0
 856 053c 4FF00003 		mov	r3, #0
 857 0540 FB71     		strb	r3, [r7, #7]
 284:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 858              		.loc 1 284 0
 859 0542 4FF00203 		mov	r3, #2
 860 0546 7B71     		strb	r3, [r7, #5]
 285:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 861              		.loc 1 285 0
 862 0548 3B46     		mov	r3, r7
 863 054a 4FF48050 		mov	r0, #4096
 864 054e C4F60000 		movt	r0, 18432
 865 0552 1946     		mov	r1, r3
 866 0554 FFF7FEFF 		bl	GPIO_Init
 286:../src/main.cpp **** 
 287:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 867              		.loc 1 287 0
 868 0558 4FF48050 		mov	r0, #4096
 869 055c C4F60000 		movt	r0, 18432
 870 0560 4FF00401 		mov	r1, #4
 871 0564 4FF00002 		mov	r2, #0
 872 0568 FFF7FEFF 		bl	GPIO_WriteBit
 288:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 873              		.loc 1 288 0
 874 056c 4FF48050 		mov	r0, #4096
 875 0570 C4F60000 		movt	r0, 18432
 876 0574 4FF00801 		mov	r1, #8
 877 0578 4FF00002 		mov	r2, #0
 878 057c FFF7FEFF 		bl	GPIO_WriteBit
 879              	.LBE12:
 289:../src/main.cpp **** 
 290:../src/main.cpp **** 	/*
 291:../src/main.cpp **** 	 * 	a.GPIO_Mode = GPIO_Mode_OUT;
 292:../src/main.cpp **** 	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 293:../src/main.cpp **** 	a.GPIO_OType = GPIO_OType_PP;
 294:../src/main.cpp **** 	a.GPIO_Speed = GPIO_Speed_Level_2;
 295:../src/main.cpp **** 
 296:../src/main.cpp **** 	 */
 297:../src/main.cpp **** }
 880              		.loc 1 297 0
 881 0580 07F10807 		add	r7, r7, #8
 882 0584 BD46     		mov	sp, r7
 883 0586 80BD     		pop	{r7, pc}
 884              		.cfi_endproc
 885              	.LFE115:
 887              		.align	2
 888              		.global	_Z13ping_pin_initv
 889              		.thumb
 890              		.thumb_func
 892              	_Z13ping_pin_initv:
 893              	.LFB116:
 298:../src/main.cpp **** /*
 299:../src/main.cpp ****  * PB0: OUTPUT
 300:../src/main.cpp ****  * PC1: INPUT
 301:../src/main.cpp ****  */
 302:../src/main.cpp **** void ping_pin_init(void)
 303:../src/main.cpp **** {
 894              		.loc 1 303 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 8
 897              		@ frame_needed = 1, uses_anonymous_args = 0
 898 0588 80B5     		push	{r7, lr}
 899              	.LCFI15:
 900              		.cfi_def_cfa_offset 8
 901              		.cfi_offset 7, -8
 902              		.cfi_offset 14, -4
 903 058a 82B0     		sub	sp, sp, #8
 904              	.LCFI16:
 905              		.cfi_def_cfa_offset 16
 906 058c 00AF     		add	r7, sp, #0
 907              	.LCFI17:
 908              		.cfi_def_cfa_register 7
 909              	.LBB13:
 304:../src/main.cpp **** 
 305:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 910              		.loc 1 305 0
 911 058e 4FF48800 		mov	r0, #4456448
 912 0592 4FF00101 		mov	r1, #1
 913 0596 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 306:../src/main.cpp **** 
 307:../src/main.cpp **** 	GPIO_InitTypeDef g;
 308:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 914              		.loc 1 308 0
 915 059a 4FF00003 		mov	r3, #0
 916 059e 3B71     		strb	r3, [r7, #4]
 309:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 917              		.loc 1 309 0
 918 05a0 4FF00103 		mov	r3, #1
 919 05a4 BB71     		strb	r3, [r7, #6]
 310:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 920              		.loc 1 310 0
 921 05a6 4FF40073 		mov	r3, #512
 922 05aa 3B60     		str	r3, [r7, #0]
 311:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 923              		.loc 1 311 0
 924 05ac 4FF00003 		mov	r3, #0
 925 05b0 FB71     		strb	r3, [r7, #7]
 312:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 926              		.loc 1 312 0
 927 05b2 4FF00103 		mov	r3, #1
 928 05b6 7B71     		strb	r3, [r7, #5]
 313:../src/main.cpp **** 
 314:../src/main.cpp **** 	GPIO_Init(GPIOF, &g);
 929              		.loc 1 314 0
 930 05b8 3B46     		mov	r3, r7
 931 05ba 4FF4A050 		mov	r0, #5120
 932 05be C4F60000 		movt	r0, 18432
 933 05c2 1946     		mov	r1, r3
 934 05c4 FFF7FEFF 		bl	GPIO_Init
 315:../src/main.cpp **** 
 316:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 935              		.loc 1 316 0
 936 05c8 4FF00103 		mov	r3, #1
 937 05cc 3B71     		strb	r3, [r7, #4]
 317:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 938              		.loc 1 317 0
 939 05ce 4FF00003 		mov	r3, #0
 940 05d2 BB71     		strb	r3, [r7, #6]
 318:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 941              		.loc 1 318 0
 942 05d4 4FF00103 		mov	r3, #1
 943 05d8 3B60     		str	r3, [r7, #0]
 319:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 944              		.loc 1 319 0
 945 05da 4FF00003 		mov	r3, #0
 946 05de FB71     		strb	r3, [r7, #7]
 320:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 947              		.loc 1 320 0
 948 05e0 4FF00103 		mov	r3, #1
 949 05e4 7B71     		strb	r3, [r7, #5]
 321:../src/main.cpp **** 
 322:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 950              		.loc 1 322 0
 951 05e6 3B46     		mov	r3, r7
 952 05e8 4FF48060 		mov	r0, #1024
 953 05ec C4F60000 		movt	r0, 18432
 954 05f0 1946     		mov	r1, r3
 955 05f2 FFF7FEFF 		bl	GPIO_Init
 323:../src/main.cpp **** 
 324:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 956              		.loc 1 324 0
 957 05f6 4FF00100 		mov	r0, #1
 958 05fa 4FF00101 		mov	r1, #1
 959 05fe FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 325:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 960              		.loc 1 325 0
 961 0602 4FF00500 		mov	r0, #5
 962 0606 4FF00901 		mov	r1, #9
 963 060a FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 964              	.LBE13:
 326:../src/main.cpp **** 
 327:../src/main.cpp **** }
 965              		.loc 1 327 0
 966 060e 07F10807 		add	r7, r7, #8
 967 0612 BD46     		mov	sp, r7
 968 0614 80BD     		pop	{r7, pc}
 969              		.cfi_endproc
 970              	.LFE116:
 972 0616 00BF     		.align	2
 973              		.global	_Z20timer2_timebase_initv
 974              		.thumb
 975              		.thumb_func
 977              	_Z20timer2_timebase_initv:
 978              	.LFB117:
 328:../src/main.cpp **** 
 329:../src/main.cpp **** void timer2_timebase_init(void)
 330:../src/main.cpp **** {
 979              		.loc 1 330 0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 16
 982              		@ frame_needed = 1, uses_anonymous_args = 0
 983 0618 80B5     		push	{r7, lr}
 984              	.LCFI18:
 985              		.cfi_def_cfa_offset 8
 986              		.cfi_offset 7, -8
 987              		.cfi_offset 14, -4
 988 061a 84B0     		sub	sp, sp, #16
 989              	.LCFI19:
 990              		.cfi_def_cfa_offset 24
 991 061c 00AF     		add	r7, sp, #0
 992              	.LCFI20:
 993              		.cfi_def_cfa_register 7
 994              	.LBB14:
 331:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 332:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 995              		.loc 1 332 0
 996 061e 4FF00100 		mov	r0, #1
 997 0622 4FF00101 		mov	r1, #1
 998 0626 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 333:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 999              		.loc 1 333 0
 1000 062a 44F24F63 		movw	r3, #17999
 1001 062e BB60     		str	r3, [r7, #8]
 334:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 1002              		.loc 1 334 0
 1003 0630 4FF00003 		mov	r3, #0
 1004 0634 BB73     		strb	r3, [r7, #14]
 335:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 1005              		.loc 1 335 0
 1006 0636 4FF04703 		mov	r3, #71
 1007 063a BB80     		strh	r3, [r7, #4]	@ movhi
 336:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 1008              		.loc 1 336 0
 1009 063c 4FF00003 		mov	r3, #0
 1010 0640 BB81     		strh	r3, [r7, #12]	@ movhi
 337:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 1011              		.loc 1 337 0
 1012 0642 4FF00003 		mov	r3, #0
 1013 0646 FB80     		strh	r3, [r7, #6]	@ movhi
 338:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 1014              		.loc 1 338 0
 1015 0648 07F10403 		add	r3, r7, #4
 1016 064c 4FF08040 		mov	r0, #1073741824
 1017 0650 1946     		mov	r1, r3
 1018 0652 FFF7FEFF 		bl	TIM_TimeBaseInit
 339:../src/main.cpp **** //	TIM_Cmd(TIM2, ENABLE);
 340:../src/main.cpp **** 
 341:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 1019              		.loc 1 341 0
 1020 0656 4FF08040 		mov	r0, #1073741824
 1021 065a 4FF00001 		mov	r1, #0
 1022 065e FFF7FEFF 		bl	TIM_SetCounter
 1023              	.LBE14:
 342:../src/main.cpp **** }
 1024              		.loc 1 342 0
 1025 0662 07F11007 		add	r7, r7, #16
 1026 0666 BD46     		mov	sp, r7
 1027 0668 80BD     		pop	{r7, pc}
 1028              		.cfi_endproc
 1029              	.LFE117:
 1031 066a 00BF     		.align	2
 1032              		.global	_Z9comp_initv
 1033              		.thumb
 1034              		.thumb_func
 1036              	_Z9comp_initv:
 1037              	.LFB118:
 343:../src/main.cpp **** 
 344:../src/main.cpp **** /*
 345:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 346:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 347:../src/main.cpp ****  * 			Output->	PB9
 348:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 349:../src/main.cpp ****  * 			Output->	PA8
 350:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 351:../src/main.cpp ****  * 			Output->	PB1
 352:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 353:../src/main.cpp ****  * 			Output->	PC2
 354:../src/main.cpp ****  */
 355:../src/main.cpp **** 
 356:../src/main.cpp **** void comp_init(void)
 357:../src/main.cpp **** {
 1038              		.loc 1 357 0
 1039              		.cfi_startproc
 1040              		@ args = 0, pretend = 0, frame = 40
 1041              		@ frame_needed = 1, uses_anonymous_args = 0
 1042 066c 80B5     		push	{r7, lr}
 1043              	.LCFI21:
 1044              		.cfi_def_cfa_offset 8
 1045              		.cfi_offset 7, -8
 1046              		.cfi_offset 14, -4
 1047 066e 8AB0     		sub	sp, sp, #40
 1048              	.LCFI22:
 1049              		.cfi_def_cfa_offset 48
 1050 0670 00AF     		add	r7, sp, #0
 1051              	.LCFI23:
 1052              		.cfi_def_cfa_register 7
 1053              	.LBB15:
 358:../src/main.cpp **** 	//COMP2 Init:
 359:../src/main.cpp **** 
 360:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1054              		.loc 1 360 0
 1055 0672 4FF00100 		mov	r0, #1
 1056 0676 4FF00101 		mov	r1, #1
 1057 067a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 361:../src/main.cpp **** 
 362:../src/main.cpp **** 	GPIO_InitTypeDef g;
 363:../src/main.cpp **** 
 364:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1058              		.loc 1 364 0
 1059 067e 4FF00303 		mov	r3, #3
 1060 0682 87F82430 		strb	r3, [r7, #36]
 365:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1061              		.loc 1 365 0
 1062 0686 4FF00003 		mov	r3, #0
 1063 068a 87F82730 		strb	r3, [r7, #39]
 366:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 1064              		.loc 1 366 0
 1065 068e 4FF08003 		mov	r3, #128
 1066 0692 3B62     		str	r3, [r7, #32]
 367:../src/main.cpp **** 
 368:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1067              		.loc 1 368 0
 1068 0694 4FF40030 		mov	r0, #131072
 1069 0698 4FF00101 		mov	r1, #1
 1070 069c FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 369:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 1071              		.loc 1 369 0
 1072 06a0 07F12003 		add	r3, r7, #32
 1073 06a4 4FF09040 		mov	r0, #1207959552
 1074 06a8 1946     		mov	r1, r3
 1075 06aa FFF7FEFF 		bl	GPIO_Init
 370:../src/main.cpp **** 
 371:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1076              		.loc 1 371 0
 1077 06ae 4FF00203 		mov	r3, #2
 1078 06b2 87F82430 		strb	r3, [r7, #36]
 372:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1079              		.loc 1 372 0
 1080 06b6 4FF00003 		mov	r3, #0
 1081 06ba 87F82630 		strb	r3, [r7, #38]
 373:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1082              		.loc 1 373 0
 1083 06be 4FF00003 		mov	r3, #0
 1084 06c2 87F82730 		strb	r3, [r7, #39]
 374:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 1085              		.loc 1 374 0
 1086 06c6 4FF40073 		mov	r3, #512
 1087 06ca 3B62     		str	r3, [r7, #32]
 375:../src/main.cpp **** 
 376:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 1088              		.loc 1 376 0
 1089 06cc 4FF48060 		mov	r0, #1024
 1090 06d0 C4F60000 		movt	r0, 18432
 1091 06d4 4FF00901 		mov	r1, #9
 1092 06d8 4FF00802 		mov	r2, #8
 1093 06dc FFF7FEFF 		bl	GPIO_PinAFConfig
 377:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1094              		.loc 1 377 0
 1095 06e0 07F12003 		add	r3, r7, #32
 1096 06e4 4FF48060 		mov	r0, #1024
 1097 06e8 C4F60000 		movt	r0, 18432
 1098 06ec 1946     		mov	r1, r3
 1099 06ee FFF7FEFF 		bl	GPIO_Init
 378:../src/main.cpp **** 
 379:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1100              		.loc 1 379 0
 1101 06f2 4FF00000 		mov	r0, #0
 1102 06f6 FFF7FEFF 		bl	RCC_PCLK2Config
 380:../src/main.cpp **** 
 381:../src/main.cpp **** 	COMP_InitTypeDef c;
 382:../src/main.cpp **** 
 383:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1103              		.loc 1 383 0
 1104 06fa 4FF03003 		mov	r3, #48
 1105 06fe 7B60     		str	r3, [r7, #4]
 384:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1106              		.loc 1 384 0
 1107 0700 4FF00003 		mov	r3, #0
 1108 0704 BB60     		str	r3, [r7, #8]
 385:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1109              		.loc 1 385 0
 1110 0706 4FF00403 		mov	r3, #4
 1111 070a FB61     		str	r3, [r7, #28]
 386:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1112              		.loc 1 386 0
 1113 070c 4FF00003 		mov	r3, #0
 1114 0710 FB60     		str	r3, [r7, #12]
 387:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1115              		.loc 1 387 0
 1116 0712 4FF00003 		mov	r3, #0
 1117 0716 7B61     		str	r3, [r7, #20]
 388:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1118              		.loc 1 388 0
 1119 0718 4FF48033 		mov	r3, #65536
 1120 071c BB61     		str	r3, [r7, #24]
 389:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1121              		.loc 1 389 0
 1122 071e 4FF00003 		mov	r3, #0
 1123 0722 3B61     		str	r3, [r7, #16]
 390:../src/main.cpp **** 
 391:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 1124              		.loc 1 391 0
 1125 0724 07F10403 		add	r3, r7, #4
 1126 0728 4FF00400 		mov	r0, #4
 1127 072c 1946     		mov	r1, r3
 1128 072e FFF7FEFF 		bl	COMP_Init
 392:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 1129              		.loc 1 392 0
 1130 0732 4FF00400 		mov	r0, #4
 1131 0736 4FF00101 		mov	r1, #1
 1132 073a FFF7FEFF 		bl	COMP_Cmd
 393:../src/main.cpp **** 
 394:../src/main.cpp **** 	//COMP3 Init:
 395:../src/main.cpp **** 
 396:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1133              		.loc 1 396 0
 1134 073e 4FF00100 		mov	r0, #1
 1135 0742 4FF00101 		mov	r1, #1
 1136 0746 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 397:../src/main.cpp **** 
 398:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1137              		.loc 1 398 0
 1138 074a 4FF00303 		mov	r3, #3
 1139 074e 87F82430 		strb	r3, [r7, #36]
 399:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1140              		.loc 1 399 0
 1141 0752 4FF00003 		mov	r3, #0
 1142 0756 87F82730 		strb	r3, [r7, #39]
 400:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 1143              		.loc 1 400 0
 1144 075a 4FF48043 		mov	r3, #16384
 1145 075e 3B62     		str	r3, [r7, #32]
 401:../src/main.cpp **** 
 402:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 1146              		.loc 1 402 0
 1147 0760 4FF4C020 		mov	r0, #393216
 1148 0764 4FF00101 		mov	r1, #1
 1149 0768 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 403:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1150              		.loc 1 403 0
 1151 076c 07F12003 		add	r3, r7, #32
 1152 0770 4FF48060 		mov	r0, #1024
 1153 0774 C4F60000 		movt	r0, 18432
 1154 0778 1946     		mov	r1, r3
 1155 077a FFF7FEFF 		bl	GPIO_Init
 404:../src/main.cpp **** 
 405:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1156              		.loc 1 405 0
 1157 077e 4FF00203 		mov	r3, #2
 1158 0782 87F82430 		strb	r3, [r7, #36]
 406:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1159              		.loc 1 406 0
 1160 0786 4FF00003 		mov	r3, #0
 1161 078a 87F82630 		strb	r3, [r7, #38]
 407:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1162              		.loc 1 407 0
 1163 078e 4FF00003 		mov	r3, #0
 1164 0792 87F82730 		strb	r3, [r7, #39]
 408:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 1165              		.loc 1 408 0
 1166 0796 4FF48073 		mov	r3, #256
 1167 079a 3B62     		str	r3, [r7, #32]
 409:../src/main.cpp **** 
 410:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 1168              		.loc 1 410 0
 1169 079c 4FF40060 		mov	r0, #2048
 1170 07a0 C4F60000 		movt	r0, 18432
 1171 07a4 4FF00801 		mov	r1, #8
 1172 07a8 4FF00702 		mov	r2, #7
 1173 07ac FFF7FEFF 		bl	GPIO_PinAFConfig
 411:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1174              		.loc 1 411 0
 1175 07b0 07F12003 		add	r3, r7, #32
 1176 07b4 4FF40060 		mov	r0, #2048
 1177 07b8 C4F60000 		movt	r0, 18432
 1178 07bc 1946     		mov	r1, r3
 1179 07be FFF7FEFF 		bl	GPIO_Init
 412:../src/main.cpp **** 
 413:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1180              		.loc 1 413 0
 1181 07c2 4FF00000 		mov	r0, #0
 1182 07c6 FFF7FEFF 		bl	RCC_PCLK2Config
 414:../src/main.cpp **** 
 415:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1183              		.loc 1 415 0
 1184 07ca 4FF03003 		mov	r3, #48
 1185 07ce 7B60     		str	r3, [r7, #4]
 416:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1186              		.loc 1 416 0
 1187 07d0 4FF00003 		mov	r3, #0
 1188 07d4 BB60     		str	r3, [r7, #8]
 417:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1189              		.loc 1 417 0
 1190 07d6 4FF00403 		mov	r3, #4
 1191 07da FB61     		str	r3, [r7, #28]
 418:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1192              		.loc 1 418 0
 1193 07dc 4FF00003 		mov	r3, #0
 1194 07e0 FB60     		str	r3, [r7, #12]
 419:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1195              		.loc 1 419 0
 1196 07e2 4FF00003 		mov	r3, #0
 1197 07e6 7B61     		str	r3, [r7, #20]
 420:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1198              		.loc 1 420 0
 1199 07e8 4FF48033 		mov	r3, #65536
 1200 07ec BB61     		str	r3, [r7, #24]
 421:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1201              		.loc 1 421 0
 1202 07ee 4FF00003 		mov	r3, #0
 1203 07f2 3B61     		str	r3, [r7, #16]
 422:../src/main.cpp **** 
 423:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 1204              		.loc 1 423 0
 1205 07f4 07F10403 		add	r3, r7, #4
 1206 07f8 4FF00800 		mov	r0, #8
 1207 07fc 1946     		mov	r1, r3
 1208 07fe FFF7FEFF 		bl	COMP_Init
 424:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 1209              		.loc 1 424 0
 1210 0802 4FF00800 		mov	r0, #8
 1211 0806 4FF00101 		mov	r1, #1
 1212 080a FFF7FEFF 		bl	COMP_Cmd
 425:../src/main.cpp **** 
 426:../src/main.cpp **** 	//COMP4 Init:
 427:../src/main.cpp **** 
 428:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1213              		.loc 1 428 0
 1214 080e 4FF00100 		mov	r0, #1
 1215 0812 4FF00101 		mov	r1, #1
 1216 0816 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 429:../src/main.cpp **** 
 430:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1217              		.loc 1 430 0
 1218 081a 4FF00303 		mov	r3, #3
 1219 081e 87F82430 		strb	r3, [r7, #36]
 431:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1220              		.loc 1 431 0
 1221 0822 4FF00003 		mov	r3, #0
 1222 0826 87F82730 		strb	r3, [r7, #39]
 432:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 1223              		.loc 1 432 0
 1224 082a 4FF08003 		mov	r3, #128
 1225 082e 3B62     		str	r3, [r7, #32]
 433:../src/main.cpp **** 
 434:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 1226              		.loc 1 434 0
 1227 0830 4FF41010 		mov	r0, #2359296
 1228 0834 4FF00101 		mov	r1, #1
 1229 0838 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 435:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 1230              		.loc 1 435 0
 1231 083c 07F12003 		add	r3, r7, #32
 1232 0840 4FF48050 		mov	r0, #4096
 1233 0844 C4F60000 		movt	r0, 18432
 1234 0848 1946     		mov	r1, r3
 1235 084a FFF7FEFF 		bl	GPIO_Init
 436:../src/main.cpp **** 
 437:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1236              		.loc 1 437 0
 1237 084e 4FF00203 		mov	r3, #2
 1238 0852 87F82430 		strb	r3, [r7, #36]
 438:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1239              		.loc 1 438 0
 1240 0856 4FF00003 		mov	r3, #0
 1241 085a 87F82630 		strb	r3, [r7, #38]
 439:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1242              		.loc 1 439 0
 1243 085e 4FF00003 		mov	r3, #0
 1244 0862 87F82730 		strb	r3, [r7, #39]
 440:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 1245              		.loc 1 440 0
 1246 0866 4FF00203 		mov	r3, #2
 1247 086a 3B62     		str	r3, [r7, #32]
 441:../src/main.cpp **** 
 442:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 1248              		.loc 1 442 0
 1249 086c 4FF48060 		mov	r0, #1024
 1250 0870 C4F60000 		movt	r0, 18432
 1251 0874 4FF00101 		mov	r1, #1
 1252 0878 4FF00802 		mov	r2, #8
 1253 087c FFF7FEFF 		bl	GPIO_PinAFConfig
 443:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1254              		.loc 1 443 0
 1255 0880 07F12003 		add	r3, r7, #32
 1256 0884 4FF48060 		mov	r0, #1024
 1257 0888 C4F60000 		movt	r0, 18432
 1258 088c 1946     		mov	r1, r3
 1259 088e FFF7FEFF 		bl	GPIO_Init
 444:../src/main.cpp **** 
 445:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1260              		.loc 1 445 0
 1261 0892 4FF00000 		mov	r0, #0
 1262 0896 FFF7FEFF 		bl	RCC_PCLK2Config
 446:../src/main.cpp **** 
 447:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1263              		.loc 1 447 0
 1264 089a 4FF03003 		mov	r3, #48
 1265 089e 7B60     		str	r3, [r7, #4]
 448:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1266              		.loc 1 448 0
 1267 08a0 4FF08003 		mov	r3, #128
 1268 08a4 BB60     		str	r3, [r7, #8]
 449:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1269              		.loc 1 449 0
 1270 08a6 4FF00403 		mov	r3, #4
 1271 08aa FB61     		str	r3, [r7, #28]
 450:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1272              		.loc 1 450 0
 1273 08ac 4FF00003 		mov	r3, #0
 1274 08b0 FB60     		str	r3, [r7, #12]
 451:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1275              		.loc 1 451 0
 1276 08b2 4FF00003 		mov	r3, #0
 1277 08b6 7B61     		str	r3, [r7, #20]
 452:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1278              		.loc 1 452 0
 1279 08b8 4FF48033 		mov	r3, #65536
 1280 08bc BB61     		str	r3, [r7, #24]
 453:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1281              		.loc 1 453 0
 1282 08be 4FF00003 		mov	r3, #0
 1283 08c2 3B61     		str	r3, [r7, #16]
 454:../src/main.cpp **** 
 455:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 1284              		.loc 1 455 0
 1285 08c4 07F10403 		add	r3, r7, #4
 1286 08c8 4FF00C00 		mov	r0, #12
 1287 08cc 1946     		mov	r1, r3
 1288 08ce FFF7FEFF 		bl	COMP_Init
 456:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 1289              		.loc 1 456 0
 1290 08d2 4FF00C00 		mov	r0, #12
 1291 08d6 4FF00101 		mov	r1, #1
 1292 08da FFF7FEFF 		bl	COMP_Cmd
 457:../src/main.cpp **** 
 458:../src/main.cpp **** 	//COMP7 Init:
 459:../src/main.cpp **** 
 460:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1293              		.loc 1 460 0
 1294 08de 4FF00100 		mov	r0, #1
 1295 08e2 4FF00101 		mov	r1, #1
 1296 08e6 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 461:../src/main.cpp **** 
 462:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1297              		.loc 1 462 0
 1298 08ea 4FF00303 		mov	r3, #3
 1299 08ee 87F82430 		strb	r3, [r7, #36]
 463:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1300              		.loc 1 463 0
 1301 08f2 4FF00003 		mov	r3, #0
 1302 08f6 87F82730 		strb	r3, [r7, #39]
 464:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 1303              		.loc 1 464 0
 1304 08fa 4FF00203 		mov	r3, #2
 1305 08fe 3B62     		str	r3, [r7, #32]
 465:../src/main.cpp **** 
 466:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 1306              		.loc 1 466 0
 1307 0900 4FF40020 		mov	r0, #524288
 1308 0904 4FF00101 		mov	r1, #1
 1309 0908 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 467:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1310              		.loc 1 467 0
 1311 090c 07F12003 		add	r3, r7, #32
 1312 0910 4FF40060 		mov	r0, #2048
 1313 0914 C4F60000 		movt	r0, 18432
 1314 0918 1946     		mov	r1, r3
 1315 091a FFF7FEFF 		bl	GPIO_Init
 468:../src/main.cpp **** 
 469:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1316              		.loc 1 469 0
 1317 091e 4FF00203 		mov	r3, #2
 1318 0922 87F82430 		strb	r3, [r7, #36]
 470:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1319              		.loc 1 470 0
 1320 0926 4FF00003 		mov	r3, #0
 1321 092a 87F82630 		strb	r3, [r7, #38]
 471:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1322              		.loc 1 471 0
 1323 092e 4FF00003 		mov	r3, #0
 1324 0932 87F82730 		strb	r3, [r7, #39]
 472:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 1325              		.loc 1 472 0
 1326 0936 4FF00403 		mov	r3, #4
 1327 093a 3B62     		str	r3, [r7, #32]
 473:../src/main.cpp **** 
 474:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 1328              		.loc 1 474 0
 1329 093c 4FF40060 		mov	r0, #2048
 1330 0940 C4F60000 		movt	r0, 18432
 1331 0944 4FF00201 		mov	r1, #2
 1332 0948 4FF00302 		mov	r2, #3
 1333 094c FFF7FEFF 		bl	GPIO_PinAFConfig
 475:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1334              		.loc 1 475 0
 1335 0950 07F12003 		add	r3, r7, #32
 1336 0954 4FF40060 		mov	r0, #2048
 1337 0958 C4F60000 		movt	r0, 18432
 1338 095c 1946     		mov	r1, r3
 1339 095e FFF7FEFF 		bl	GPIO_Init
 476:../src/main.cpp **** 
 477:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1340              		.loc 1 477 0
 1341 0962 4FF00000 		mov	r0, #0
 1342 0966 FFF7FEFF 		bl	RCC_PCLK2Config
 478:../src/main.cpp **** 
 479:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1343              		.loc 1 479 0
 1344 096a 4FF03003 		mov	r3, #48
 1345 096e 7B60     		str	r3, [r7, #4]
 480:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1346              		.loc 1 480 0
 1347 0970 4FF08003 		mov	r3, #128
 1348 0974 BB60     		str	r3, [r7, #8]
 481:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1349              		.loc 1 481 0
 1350 0976 4FF00403 		mov	r3, #4
 1351 097a FB61     		str	r3, [r7, #28]
 482:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1352              		.loc 1 482 0
 1353 097c 4FF00003 		mov	r3, #0
 1354 0980 FB60     		str	r3, [r7, #12]
 483:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1355              		.loc 1 483 0
 1356 0982 4FF00003 		mov	r3, #0
 1357 0986 7B61     		str	r3, [r7, #20]
 484:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1358              		.loc 1 484 0
 1359 0988 4FF48033 		mov	r3, #65536
 1360 098c BB61     		str	r3, [r7, #24]
 485:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1361              		.loc 1 485 0
 1362 098e 4FF00003 		mov	r3, #0
 1363 0992 3B61     		str	r3, [r7, #16]
 486:../src/main.cpp **** 
 487:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 1364              		.loc 1 487 0
 1365 0994 07F10403 		add	r3, r7, #4
 1366 0998 4FF01800 		mov	r0, #24
 1367 099c 1946     		mov	r1, r3
 1368 099e FFF7FEFF 		bl	COMP_Init
 488:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 1369              		.loc 1 488 0
 1370 09a2 4FF01800 		mov	r0, #24
 1371 09a6 4FF00101 		mov	r1, #1
 1372 09aa FFF7FEFF 		bl	COMP_Cmd
 1373              	.LBE15:
 489:../src/main.cpp **** }
 1374              		.loc 1 489 0
 1375 09ae 07F12807 		add	r7, r7, #40
 1376 09b2 BD46     		mov	sp, r7
 1377 09b4 80BD     		pop	{r7, pc}
 1378              		.cfi_endproc
 1379              	.LFE118:
 1381 09b6 00BF     		.align	2
 1382              		.global	_Z14calc_gyro_biasv
 1383              		.thumb
 1384              		.thumb_func
 1386              	_Z14calc_gyro_biasv:
 1387              	.LFB119:
 490:../src/main.cpp **** 
 491:../src/main.cpp **** int16_t calc_gyro_bias(void)
 492:../src/main.cpp **** {
 1388              		.loc 1 492 0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 16
 1391              		@ frame_needed = 1, uses_anonymous_args = 0
 1392 09b8 80B5     		push	{r7, lr}
 1393              	.LCFI24:
 1394              		.cfi_def_cfa_offset 8
 1395              		.cfi_offset 7, -8
 1396              		.cfi_offset 14, -4
 1397 09ba 84B0     		sub	sp, sp, #16
 1398              	.LCFI25:
 1399              		.cfi_def_cfa_offset 24
 1400 09bc 00AF     		add	r7, sp, #0
 1401              	.LCFI26:
 1402              		.cfi_def_cfa_register 7
 1403              	.LBB16:
 493:../src/main.cpp **** 	int i = 0;
 1404              		.loc 1 493 0
 1405 09be 4FF00003 		mov	r3, #0
 1406 09c2 FB60     		str	r3, [r7, #12]
 494:../src/main.cpp **** 	int accum_x = 0;
 1407              		.loc 1 494 0
 1408 09c4 4FF00003 		mov	r3, #0
 1409 09c8 BB60     		str	r3, [r7, #8]
 495:../src/main.cpp **** 
 496:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 497:../src/main.cpp **** 		uint16_t un_signed;
 498:../src/main.cpp **** 		int16_t output;
 499:../src/main.cpp **** 	} convert;
 500:../src/main.cpp **** 
 501:../src/main.cpp **** 	uint8_t bytes[2];
 502:../src/main.cpp **** 
 503:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1410              		.loc 1 503 0
 1411 09ca 4FF00003 		mov	r3, #0
 1412 09ce FB60     		str	r3, [r7, #12]
 1413 09d0 19E0     		b	.L25
 1414              	.L26:
 504:../src/main.cpp **** 	{
 505:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1415              		.loc 1 505 0 discriminator 2
 1416 09d2 3B46     		mov	r3, r7
 1417 09d4 1846     		mov	r0, r3
 1418 09d6 4FF02801 		mov	r1, #40
 1419 09da 4FF00202 		mov	r2, #2
 1420 09de FFF7FEFF 		bl	L3GD20_Read
 506:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1421              		.loc 1 506 0 discriminator 2
 1422 09e2 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1423 09e4 4FEA0323 		lsl	r3, r3, #8
 1424 09e8 9AB2     		uxth	r2, r3
 1425 09ea 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1426 09ec 1343     		orrs	r3, r3, r2
 1427 09ee 9BB2     		uxth	r3, r3
 1428 09f0 9BB2     		uxth	r3, r3
 1429 09f2 BB80     		strh	r3, [r7, #4]	@ movhi
 507:../src/main.cpp **** 		accum_x += convert.output;
 1430              		.loc 1 507 0 discriminator 2
 1431 09f4 BB88     		ldrh	r3, [r7, #4]
 1432 09f6 1BB2     		sxth	r3, r3
 1433 09f8 BA68     		ldr	r2, [r7, #8]
 1434 09fa D318     		adds	r3, r2, r3
 1435 09fc BB60     		str	r3, [r7, #8]
 503:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1436              		.loc 1 503 0 discriminator 2
 1437 09fe FB68     		ldr	r3, [r7, #12]
 1438 0a00 03F10103 		add	r3, r3, #1
 1439 0a04 FB60     		str	r3, [r7, #12]
 1440              	.L25:
 503:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1441              		.loc 1 503 0 is_stmt 0 discriminator 1
 1442 0a06 FB68     		ldr	r3, [r7, #12]
 1443 0a08 F92B     		cmp	r3, #249
 1444 0a0a CCBF     		ite	gt
 1445 0a0c 0023     		movgt	r3, #0
 1446 0a0e 0123     		movle	r3, #1
 1447 0a10 DBB2     		uxtb	r3, r3
 1448 0a12 002B     		cmp	r3, #0
 1449 0a14 DDD1     		bne	.L26
 508:../src/main.cpp **** 	}
 509:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1450              		.loc 1 509 0 is_stmt 1
 1451 0a16 D7ED027A 		flds	s15, [r7, #8]	@ int
 1452 0a1a B8EEE77A 		fsitos	s14, s15
 1453 0a1e DFED077A 		flds	s15, .L28
 1454 0a22 C7EE277A 		fdivs	s15, s14, s15
 1455 0a26 FDEEE77A 		ftosizs	s15, s15
 1456 0a2a 17EE903A 		fmrs	r3, s15	@ int
 1457 0a2e 9BB2     		uxth	r3, r3
 1458 0a30 1BB2     		sxth	r3, r3
 1459              	.LBE16:
 510:../src/main.cpp **** }
 1460              		.loc 1 510 0
 1461 0a32 1846     		mov	r0, r3
 1462 0a34 07F11007 		add	r7, r7, #16
 1463 0a38 BD46     		mov	sp, r7
 1464 0a3a 80BD     		pop	{r7, pc}
 1465              	.L29:
 1466              		.align	2
 1467              	.L28:
 1468 0a3c 00007A43 		.word	1132068864
 1469              		.cfi_endproc
 1470              	.LFE119:
 1472              		.align	2
 1473              		.global	_Z13adc1_init_DMAv
 1474              		.thumb
 1475              		.thumb_func
 1477              	_Z13adc1_init_DMAv:
 1478              	.LFB120:
 511:../src/main.cpp **** 
 512:../src/main.cpp **** /*
 513:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 514:../src/main.cpp ****  * a user-supplied location in memory
 515:../src/main.cpp ****  * @Args: None
 516:../src/main.cpp ****  * @Return Val: None
 517:../src/main.cpp ****  */
 518:../src/main.cpp **** 
 519:../src/main.cpp **** void adc1_init_DMA(void)
 520:../src/main.cpp **** {
 1479              		.loc 1 520 0
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 112
 1482              		@ frame_needed = 1, uses_anonymous_args = 0
 1483 0a40 80B5     		push	{r7, lr}
 1484              	.LCFI27:
 1485              		.cfi_def_cfa_offset 8
 1486              		.cfi_offset 7, -8
 1487              		.cfi_offset 14, -4
 1488 0a42 9CB0     		sub	sp, sp, #112
 1489              	.LCFI28:
 1490              		.cfi_def_cfa_offset 120
 1491 0a44 00AF     		add	r7, sp, #0
 1492              	.LCFI29:
 1493              		.cfi_def_cfa_register 7
 1494              	.LBB17:
 521:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 522:../src/main.cpp **** 
 523:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 524:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 525:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 526:../src/main.cpp **** 
 527:../src/main.cpp **** 	/* Configure the ADC clock */
 528:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1495              		.loc 1 528 0
 1496 0a46 4FF48870 		mov	r0, #272
 1497 0a4a FFF7FEFF 		bl	RCC_ADCCLKConfig
 529:../src/main.cpp **** 	/* Enable ADC1 clock */
 530:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1498              		.loc 1 530 0
 1499 0a4e 4FF08050 		mov	r0, #268435456
 1500 0a52 4FF00101 		mov	r1, #1
 1501 0a56 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 531:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 532:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1502              		.loc 1 532 0
 1503 0a5a 4FF40030 		mov	r0, #131072
 1504 0a5e 4FF00101 		mov	r1, #1
 1505 0a62 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 533:../src/main.cpp **** 
 534:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 535:../src/main.cpp **** 
 536:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1506              		.loc 1 536 0
 1507 0a66 07F15003 		add	r3, r7, #80
 1508 0a6a 1846     		mov	r0, r3
 1509 0a6c FFF7FEFF 		bl	GPIO_StructInit
 537:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1510              		.loc 1 537 0
 1511 0a70 4FF00C03 		mov	r3, #12
 1512 0a74 3B65     		str	r3, [r7, #80]
 538:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1513              		.loc 1 538 0
 1514 0a76 4FF00303 		mov	r3, #3
 1515 0a7a 87F85430 		strb	r3, [r7, #84]
 539:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1516              		.loc 1 539 0
 1517 0a7e 4FF00003 		mov	r3, #0
 1518 0a82 87F85730 		strb	r3, [r7, #87]
 540:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1519              		.loc 1 540 0
 1520 0a86 07F15003 		add	r3, r7, #80
 1521 0a8a 4FF09040 		mov	r0, #1207959552
 1522 0a8e 1946     		mov	r1, r3
 1523 0a90 FFF7FEFF 		bl	GPIO_Init
 541:../src/main.cpp **** 
 542:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1524              		.loc 1 542 0
 1525 0a94 3B46     		mov	r3, r7
 1526 0a96 1846     		mov	r0, r3
 1527 0a98 FFF7FEFF 		bl	ADC_StructInit
 543:../src/main.cpp **** 
 544:../src/main.cpp **** 	/* Calibration procedure */
 545:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1528              		.loc 1 545 0
 1529 0a9c 4FF0A040 		mov	r0, #1342177280
 1530 0aa0 4FF00101 		mov	r1, #1
 1531 0aa4 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 546:../src/main.cpp **** 
 547:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 548:../src/main.cpp **** 	int foo;
 549:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1532              		.loc 1 549 0
 1533 0aa8 4FF00003 		mov	r3, #0
 1534 0aac FB66     		str	r3, [r7, #108]
 1535 0aae 07E0     		b	.L31
 1536              	.L32:
 550:../src/main.cpp **** 	{
 551:../src/main.cpp **** 	  ++foo;
 1537              		.loc 1 551 0 discriminator 2
 1538 0ab0 FB6E     		ldr	r3, [r7, #108]
 1539 0ab2 03F10103 		add	r3, r3, #1
 1540 0ab6 FB66     		str	r3, [r7, #108]
 549:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1541              		.loc 1 549 0 discriminator 2
 1542 0ab8 FB6E     		ldr	r3, [r7, #108]
 1543 0aba 03F10103 		add	r3, r3, #1
 1544 0abe FB66     		str	r3, [r7, #108]
 1545              	.L31:
 549:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1546              		.loc 1 549 0 is_stmt 0 discriminator 1
 1547 0ac0 FA6E     		ldr	r2, [r7, #108]
 1548 0ac2 4FF6FF13 		movw	r3, #63999
 1549 0ac6 9A42     		cmp	r2, r3
 1550 0ac8 CCBF     		ite	gt
 1551 0aca 0023     		movgt	r3, #0
 1552 0acc 0123     		movle	r3, #1
 1553 0ace DBB2     		uxtb	r3, r3
 1554 0ad0 002B     		cmp	r3, #0
 1555 0ad2 EDD1     		bne	.L32
 552:../src/main.cpp **** 	}
 553:../src/main.cpp **** 
 554:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1556              		.loc 1 554 0 is_stmt 1
 1557 0ad4 4FF0A040 		mov	r0, #1342177280
 1558 0ad8 4FF00001 		mov	r1, #0
 1559 0adc FFF7FEFF 		bl	ADC_SelectCalibrationMode
 555:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1560              		.loc 1 555 0
 1561 0ae0 4FF0A040 		mov	r0, #1342177280
 1562 0ae4 FFF7FEFF 		bl	ADC_StartCalibration
 556:../src/main.cpp **** 
 557:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1563              		.loc 1 557 0
 1564 0ae8 00BF     		nop
 1565              	.L33:
 1566              		.loc 1 557 0 is_stmt 0 discriminator 1
 1567 0aea 4FF0A040 		mov	r0, #1342177280
 1568 0aee FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1569 0af2 0346     		mov	r3, r0
 1570 0af4 002B     		cmp	r3, #0
 1571 0af6 0CBF     		ite	eq
 1572 0af8 0023     		moveq	r3, #0
 1573 0afa 0123     		movne	r3, #1
 1574 0afc DBB2     		uxtb	r3, r3
 1575 0afe 002B     		cmp	r3, #0
 1576 0b00 F3D1     		bne	.L33
 558:../src/main.cpp **** 
 559:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1577              		.loc 1 559 0 is_stmt 1
 1578 0b02 4FF00003 		mov	r3, #0
 1579 0b06 BB65     		str	r3, [r7, #88]
 560:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 1580              		.loc 1 560 0
 1581 0b08 4FF00003 		mov	r3, #0
 1582 0b0c FB65     		str	r3, [r7, #92]
 561:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1583              		.loc 1 561 0
 1584 0b0e 4FF40043 		mov	r3, #32768
 1585 0b12 3B66     		str	r3, [r7, #96]
 562:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1586              		.loc 1 562 0
 1587 0b14 4FF00203 		mov	r3, #2
 1588 0b18 7B66     		str	r3, [r7, #100]
 563:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1589              		.loc 1 563 0
 1590 0b1a 4FF00F03 		mov	r3, #15
 1591 0b1e 87F86830 		strb	r3, [r7, #104]
 564:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1592              		.loc 1 564 0
 1593 0b22 07F15803 		add	r3, r7, #88
 1594 0b26 4FF0A040 		mov	r0, #1342177280
 1595 0b2a 1946     		mov	r1, r3
 1596 0b2c FFF7FEFF 		bl	ADC_CommonInit
 565:../src/main.cpp **** 
 566:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1597              		.loc 1 566 0
 1598 0b30 4FF40053 		mov	r3, #8192
 1599 0b34 3B60     		str	r3, [r7, #0]
 567:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1600              		.loc 1 567 0
 1601 0b36 4FF00003 		mov	r3, #0
 1602 0b3a 7B60     		str	r3, [r7, #4]
 568:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1603              		.loc 1 568 0
 1604 0b3c 4FF00003 		mov	r3, #0
 1605 0b40 BB60     		str	r3, [r7, #8]
 569:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1606              		.loc 1 569 0
 1607 0b42 4FF00003 		mov	r3, #0
 1608 0b46 FB60     		str	r3, [r7, #12]
 570:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1609              		.loc 1 570 0
 1610 0b48 4FF00003 		mov	r3, #0
 1611 0b4c 3B61     		str	r3, [r7, #16]
 571:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1612              		.loc 1 571 0
 1613 0b4e 4FF00003 		mov	r3, #0
 1614 0b52 7B61     		str	r3, [r7, #20]
 572:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1615              		.loc 1 572 0
 1616 0b54 4FF00003 		mov	r3, #0
 1617 0b58 BB61     		str	r3, [r7, #24]
 573:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1618              		.loc 1 573 0
 1619 0b5a 4FF00203 		mov	r3, #2
 1620 0b5e 3B77     		strb	r3, [r7, #28]
 574:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1621              		.loc 1 574 0
 1622 0b60 3B46     		mov	r3, r7
 1623 0b62 4FF0A040 		mov	r0, #1342177280
 1624 0b66 1946     		mov	r1, r3
 1625 0b68 FFF7FEFF 		bl	ADC_Init
 575:../src/main.cpp **** 
 576:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 577:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1626              		.loc 1 577 0
 1627 0b6c 4FF0A040 		mov	r0, #1342177280
 1628 0b70 4FF00301 		mov	r1, #3
 1629 0b74 4FF00102 		mov	r2, #1
 1630 0b78 4FF00703 		mov	r3, #7
 1631 0b7c FFF7FEFF 		bl	ADC_RegularChannelConfig
 578:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1632              		.loc 1 578 0
 1633 0b80 4FF0A040 		mov	r0, #1342177280
 1634 0b84 4FF00401 		mov	r1, #4
 1635 0b88 4FF00202 		mov	r2, #2
 1636 0b8c 4FF00703 		mov	r3, #7
 1637 0b90 FFF7FEFF 		bl	ADC_RegularChannelConfig
 579:../src/main.cpp **** 
 580:../src/main.cpp **** 	/* Enable ADC1 */
 581:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1638              		.loc 1 581 0
 1639 0b94 4FF0A040 		mov	r0, #1342177280
 1640 0b98 4FF00101 		mov	r1, #1
 1641 0b9c FFF7FEFF 		bl	ADC_Cmd
 582:../src/main.cpp **** 
 583:../src/main.cpp **** 	/* wait for ADRDY */
 584:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1642              		.loc 1 584 0
 1643 0ba0 00BF     		nop
 1644              	.L34:
 1645              		.loc 1 584 0 is_stmt 0 discriminator 1
 1646 0ba2 4FF0A040 		mov	r0, #1342177280
 1647 0ba6 4FF00101 		mov	r1, #1
 1648 0baa FFF7FEFF 		bl	ADC_GetFlagStatus
 1649 0bae 0346     		mov	r3, r0
 1650 0bb0 002B     		cmp	r3, #0
 1651 0bb2 14BF     		ite	ne
 1652 0bb4 0023     		movne	r3, #0
 1653 0bb6 0123     		moveq	r3, #1
 1654 0bb8 DBB2     		uxtb	r3, r3
 1655 0bba 002B     		cmp	r3, #0
 1656 0bbc F1D1     		bne	.L34
 585:../src/main.cpp **** 
 586:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 587:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1657              		.loc 1 587 0 is_stmt 1
 1658 0bbe 4FF0A040 		mov	r0, #1342177280
 1659 0bc2 FFF7FEFF 		bl	ADC_StartConversion
 588:../src/main.cpp **** 
 589:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1660              		.loc 1 589 0
 1661 0bc6 4FF00100 		mov	r0, #1
 1662 0bca 4FF00101 		mov	r1, #1
 1663 0bce FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 590:../src/main.cpp **** 
 591:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 592:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1664              		.loc 1 592 0
 1665 0bd2 07F12003 		add	r3, r7, #32
 1666 0bd6 1846     		mov	r0, r3
 1667 0bd8 FFF7FEFF 		bl	DMA_StructInit
 593:../src/main.cpp **** 
 594:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1668              		.loc 1 594 0
 1669 0bdc 4FF00800 		mov	r0, #8
 1670 0be0 C4F20200 		movt	r0, 16386
 1671 0be4 FFF7FEFF 		bl	DMA_DeInit
 595:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1672              		.loc 1 595 0
 1673 0be8 4FF04003 		mov	r3, #64
 1674 0bec C5F20003 		movt	r3, 20480
 1675 0bf0 3B62     		str	r3, [r7, #32]
 596:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1676              		.loc 1 596 0
 1677 0bf2 40F20003 		movw	r3, #:lower16:adcData
 1678 0bf6 C0F20003 		movt	r3, #:upper16:adcData
 1679 0bfa 7B62     		str	r3, [r7, #36]
 597:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1680              		.loc 1 597 0
 1681 0bfc 4FF00003 		mov	r3, #0
 1682 0c00 BB62     		str	r3, [r7, #40]
 598:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1683              		.loc 1 598 0
 1684 0c02 4FF00203 		mov	r3, #2
 1685 0c06 BB85     		strh	r3, [r7, #44]	@ movhi
 599:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1686              		.loc 1 599 0
 1687 0c08 4FF00003 		mov	r3, #0
 1688 0c0c 3B63     		str	r3, [r7, #48]
 600:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1689              		.loc 1 600 0
 1690 0c0e 4FF08003 		mov	r3, #128
 1691 0c12 7B63     		str	r3, [r7, #52]
 601:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1692              		.loc 1 601 0
 1693 0c14 4FF40073 		mov	r3, #512
 1694 0c18 BB63     		str	r3, [r7, #56]
 602:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1695              		.loc 1 602 0
 1696 0c1a 4FF40063 		mov	r3, #2048
 1697 0c1e FB63     		str	r3, [r7, #60]
 603:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1698              		.loc 1 603 0
 1699 0c20 4FF02003 		mov	r3, #32
 1700 0c24 3B64     		str	r3, [r7, #64]
 604:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1701              		.loc 1 604 0
 1702 0c26 4FF40053 		mov	r3, #8192
 1703 0c2a 7B64     		str	r3, [r7, #68]
 605:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1704              		.loc 1 605 0
 1705 0c2c 4FF00003 		mov	r3, #0
 1706 0c30 BB64     		str	r3, [r7, #72]
 606:../src/main.cpp **** 
 607:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1707              		.loc 1 607 0
 1708 0c32 07F12003 		add	r3, r7, #32
 1709 0c36 4FF00800 		mov	r0, #8
 1710 0c3a C4F20200 		movt	r0, 16386
 1711 0c3e 1946     		mov	r1, r3
 1712 0c40 FFF7FEFF 		bl	DMA_Init
 608:../src/main.cpp **** 
 609:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 610:../src/main.cpp **** 
 611:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1713              		.loc 1 611 0
 1714 0c44 4FF00B03 		mov	r3, #11
 1715 0c48 87F84C30 		strb	r3, [r7, #76]
 612:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1716              		.loc 1 612 0
 1717 0c4c 4FF00203 		mov	r3, #2
 1718 0c50 87F84D30 		strb	r3, [r7, #77]
 613:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1719              		.loc 1 613 0
 1720 0c54 4FF00003 		mov	r3, #0
 1721 0c58 87F84E30 		strb	r3, [r7, #78]
 614:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1722              		.loc 1 614 0
 1723 0c5c 4FF00103 		mov	r3, #1
 1724 0c60 87F84F30 		strb	r3, [r7, #79]
 615:../src/main.cpp **** 
 616:../src/main.cpp **** 	NVIC_Init(&nv);
 1725              		.loc 1 616 0
 1726 0c64 07F14C03 		add	r3, r7, #76
 1727 0c68 1846     		mov	r0, r3
 1728 0c6a FFF7FEFF 		bl	NVIC_Init
 617:../src/main.cpp **** 
 618:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1729              		.loc 1 618 0
 1730 0c6e 4FF00800 		mov	r0, #8
 1731 0c72 C4F20200 		movt	r0, 16386
 1732 0c76 4FF00201 		mov	r1, #2
 1733 0c7a 4FF00102 		mov	r2, #1
 1734 0c7e FFF7FEFF 		bl	DMA_ITConfig
 619:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1735              		.loc 1 619 0
 1736 0c82 4FF00800 		mov	r0, #8
 1737 0c86 C4F20200 		movt	r0, 16386
 1738 0c8a 4FF00101 		mov	r1, #1
 1739 0c8e FFF7FEFF 		bl	DMA_Cmd
 620:../src/main.cpp **** 
 621:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1740              		.loc 1 621 0
 1741 0c92 4FF0A040 		mov	r0, #1342177280
 1742 0c96 4FF00201 		mov	r1, #2
 1743 0c9a FFF7FEFF 		bl	ADC_DMAConfig
 622:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1744              		.loc 1 622 0
 1745 0c9e 4FF0A040 		mov	r0, #1342177280
 1746 0ca2 4FF00101 		mov	r1, #1
 1747 0ca6 FFF7FEFF 		bl	ADC_DMACmd
 1748              	.LBE17:
 623:../src/main.cpp **** }
 1749              		.loc 1 623 0
 1750 0caa 07F17007 		add	r7, r7, #112
 1751 0cae BD46     		mov	sp, r7
 1752 0cb0 80BD     		pop	{r7, pc}
 1753              		.cfi_endproc
 1754              	.LFE120:
 1756 0cb2 00BF     		.align	2
 1757              		.global	_Z13adc2_init_DMAv
 1758              		.thumb
 1759              		.thumb_func
 1761              	_Z13adc2_init_DMAv:
 1762              	.LFB121:
 624:../src/main.cpp **** 
 625:../src/main.cpp **** void adc2_init_DMA(void)
 626:../src/main.cpp **** {
 1763              		.loc 1 626 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 112
 1766              		@ frame_needed = 1, uses_anonymous_args = 0
 1767 0cb4 80B5     		push	{r7, lr}
 1768              	.LCFI30:
 1769              		.cfi_def_cfa_offset 8
 1770              		.cfi_offset 7, -8
 1771              		.cfi_offset 14, -4
 1772 0cb6 9CB0     		sub	sp, sp, #112
 1773              	.LCFI31:
 1774              		.cfi_def_cfa_offset 120
 1775 0cb8 00AF     		add	r7, sp, #0
 1776              	.LCFI32:
 1777              		.cfi_def_cfa_register 7
 1778              	.LBB18:
 627:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 628:../src/main.cpp **** 
 629:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 630:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 631:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 632:../src/main.cpp **** 
 633:../src/main.cpp **** 	/* Configure the ADC clock */
 634:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1779              		.loc 1 634 0
 1780 0cba 4FF48870 		mov	r0, #272
 1781 0cbe FFF7FEFF 		bl	RCC_ADCCLKConfig
 635:../src/main.cpp **** 	/* Enable ADC2 clock */
 636:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1782              		.loc 1 636 0
 1783 0cc2 4FF08050 		mov	r0, #268435456
 1784 0cc6 4FF00101 		mov	r1, #1
 1785 0cca FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 637:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 638:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1786              		.loc 1 638 0
 1787 0cce 4FF46020 		mov	r0, #917504
 1788 0cd2 4FF00101 		mov	r1, #1
 1789 0cd6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 639:../src/main.cpp **** 
 640:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 641:../src/main.cpp **** 
 642:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1790              		.loc 1 642 0
 1791 0cda 07F15003 		add	r3, r7, #80
 1792 0cde 1846     		mov	r0, r3
 1793 0ce0 FFF7FEFF 		bl	GPIO_StructInit
 643:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1794              		.loc 1 643 0
 1795 0ce4 4FF01003 		mov	r3, #16
 1796 0ce8 3B65     		str	r3, [r7, #80]
 644:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1797              		.loc 1 644 0
 1798 0cea 4FF00303 		mov	r3, #3
 1799 0cee 87F85430 		strb	r3, [r7, #84]
 645:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1800              		.loc 1 645 0
 1801 0cf2 4FF00003 		mov	r3, #0
 1802 0cf6 87F85730 		strb	r3, [r7, #87]
 646:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1803              		.loc 1 646 0
 1804 0cfa 4FF00303 		mov	r3, #3
 1805 0cfe 87F85530 		strb	r3, [r7, #85]
 647:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1806              		.loc 1 647 0
 1807 0d02 07F15003 		add	r3, r7, #80
 1808 0d06 4FF09040 		mov	r0, #1207959552
 1809 0d0a 1946     		mov	r1, r3
 1810 0d0c FFF7FEFF 		bl	GPIO_Init
 648:../src/main.cpp **** 
 649:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1811              		.loc 1 649 0
 1812 0d10 07F15003 		add	r3, r7, #80
 1813 0d14 1846     		mov	r0, r3
 1814 0d16 FFF7FEFF 		bl	GPIO_StructInit
 650:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1815              		.loc 1 650 0
 1816 0d1a 4FF00403 		mov	r3, #4
 1817 0d1e 3B65     		str	r3, [r7, #80]
 651:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1818              		.loc 1 651 0
 1819 0d20 4FF00303 		mov	r3, #3
 1820 0d24 87F85430 		strb	r3, [r7, #84]
 652:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1821              		.loc 1 652 0
 1822 0d28 4FF00003 		mov	r3, #0
 1823 0d2c 87F85730 		strb	r3, [r7, #87]
 653:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1824              		.loc 1 653 0
 1825 0d30 07F15003 		add	r3, r7, #80
 1826 0d34 4FF48060 		mov	r0, #1024
 1827 0d38 C4F60000 		movt	r0, 18432
 1828 0d3c 1946     		mov	r1, r3
 1829 0d3e FFF7FEFF 		bl	GPIO_Init
 654:../src/main.cpp **** 
 655:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1830              		.loc 1 655 0
 1831 0d42 07F15003 		add	r3, r7, #80
 1832 0d46 1846     		mov	r0, r3
 1833 0d48 FFF7FEFF 		bl	GPIO_StructInit
 656:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 1834              		.loc 1 656 0
 1835 0d4c 4FF03003 		mov	r3, #48
 1836 0d50 3B65     		str	r3, [r7, #80]
 657:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1837              		.loc 1 657 0
 1838 0d52 4FF00303 		mov	r3, #3
 1839 0d56 87F85430 		strb	r3, [r7, #84]
 658:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1840              		.loc 1 658 0
 1841 0d5a 4FF00003 		mov	r3, #0
 1842 0d5e 87F85730 		strb	r3, [r7, #87]
 659:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 1843              		.loc 1 659 0
 1844 0d62 07F15003 		add	r3, r7, #80
 1845 0d66 4FF40060 		mov	r0, #2048
 1846 0d6a C4F60000 		movt	r0, 18432
 1847 0d6e 1946     		mov	r1, r3
 1848 0d70 FFF7FEFF 		bl	GPIO_Init
 660:../src/main.cpp **** 
 661:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1849              		.loc 1 661 0
 1850 0d74 3B46     		mov	r3, r7
 1851 0d76 1846     		mov	r0, r3
 1852 0d78 FFF7FEFF 		bl	ADC_StructInit
 662:../src/main.cpp **** 
 663:../src/main.cpp **** 	/* Calibration procedure */
 664:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 1853              		.loc 1 664 0
 1854 0d7c 4FF48070 		mov	r0, #256
 1855 0d80 C5F20000 		movt	r0, 20480
 1856 0d84 4FF00101 		mov	r1, #1
 1857 0d88 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 665:../src/main.cpp **** 
 666:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 667:../src/main.cpp **** 	int foo;
 668:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1858              		.loc 1 668 0
 1859 0d8c 4FF00003 		mov	r3, #0
 1860 0d90 FB66     		str	r3, [r7, #108]
 1861 0d92 07E0     		b	.L36
 1862              	.L37:
 669:../src/main.cpp **** 	{
 670:../src/main.cpp **** 	  ++foo;
 1863              		.loc 1 670 0 discriminator 2
 1864 0d94 FB6E     		ldr	r3, [r7, #108]
 1865 0d96 03F10103 		add	r3, r3, #1
 1866 0d9a FB66     		str	r3, [r7, #108]
 668:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1867              		.loc 1 668 0 discriminator 2
 1868 0d9c FB6E     		ldr	r3, [r7, #108]
 1869 0d9e 03F10103 		add	r3, r3, #1
 1870 0da2 FB66     		str	r3, [r7, #108]
 1871              	.L36:
 668:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1872              		.loc 1 668 0 is_stmt 0 discriminator 1
 1873 0da4 FA6E     		ldr	r2, [r7, #108]
 1874 0da6 4FF6FF13 		movw	r3, #63999
 1875 0daa 9A42     		cmp	r2, r3
 1876 0dac CCBF     		ite	gt
 1877 0dae 0023     		movgt	r3, #0
 1878 0db0 0123     		movle	r3, #1
 1879 0db2 DBB2     		uxtb	r3, r3
 1880 0db4 002B     		cmp	r3, #0
 1881 0db6 EDD1     		bne	.L37
 671:../src/main.cpp **** 	}
 672:../src/main.cpp **** 
 673:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 1882              		.loc 1 673 0 is_stmt 1
 1883 0db8 4FF48070 		mov	r0, #256
 1884 0dbc C5F20000 		movt	r0, 20480
 1885 0dc0 4FF00001 		mov	r1, #0
 1886 0dc4 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 674:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 1887              		.loc 1 674 0
 1888 0dc8 4FF48070 		mov	r0, #256
 1889 0dcc C5F20000 		movt	r0, 20480
 1890 0dd0 FFF7FEFF 		bl	ADC_StartCalibration
 675:../src/main.cpp **** 
 676:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 1891              		.loc 1 676 0
 1892 0dd4 00BF     		nop
 1893              	.L38:
 1894              		.loc 1 676 0 is_stmt 0 discriminator 1
 1895 0dd6 4FF48070 		mov	r0, #256
 1896 0dda C5F20000 		movt	r0, 20480
 1897 0dde FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1898 0de2 0346     		mov	r3, r0
 1899 0de4 002B     		cmp	r3, #0
 1900 0de6 0CBF     		ite	eq
 1901 0de8 0023     		moveq	r3, #0
 1902 0dea 0123     		movne	r3, #1
 1903 0dec DBB2     		uxtb	r3, r3
 1904 0dee 002B     		cmp	r3, #0
 1905 0df0 F1D1     		bne	.L38
 677:../src/main.cpp **** 
 678:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1906              		.loc 1 678 0 is_stmt 1
 1907 0df2 4FF00003 		mov	r3, #0
 1908 0df6 BB65     		str	r3, [r7, #88]
 679:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1909              		.loc 1 679 0
 1910 0df8 4FF00003 		mov	r3, #0
 1911 0dfc FB65     		str	r3, [r7, #92]
 680:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1912              		.loc 1 680 0
 1913 0dfe 4FF40043 		mov	r3, #32768
 1914 0e02 3B66     		str	r3, [r7, #96]
 681:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1915              		.loc 1 681 0
 1916 0e04 4FF00203 		mov	r3, #2
 1917 0e08 7B66     		str	r3, [r7, #100]
 682:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 1918              		.loc 1 682 0
 1919 0e0a 4FF00F03 		mov	r3, #15
 1920 0e0e 87F86830 		strb	r3, [r7, #104]
 683:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 1921              		.loc 1 683 0
 1922 0e12 07F15803 		add	r3, r7, #88
 1923 0e16 4FF48070 		mov	r0, #256
 1924 0e1a C5F20000 		movt	r0, 20480
 1925 0e1e 1946     		mov	r1, r3
 1926 0e20 FFF7FEFF 		bl	ADC_CommonInit
 684:../src/main.cpp **** 
 685:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1927              		.loc 1 685 0
 1928 0e24 4FF40053 		mov	r3, #8192
 1929 0e28 3B60     		str	r3, [r7, #0]
 686:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1930              		.loc 1 686 0
 1931 0e2a 4FF00003 		mov	r3, #0
 1932 0e2e 7B60     		str	r3, [r7, #4]
 687:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1933              		.loc 1 687 0
 1934 0e30 4FF00003 		mov	r3, #0
 1935 0e34 BB60     		str	r3, [r7, #8]
 688:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1936              		.loc 1 688 0
 1937 0e36 4FF00003 		mov	r3, #0
 1938 0e3a FB60     		str	r3, [r7, #12]
 689:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1939              		.loc 1 689 0
 1940 0e3c 4FF00003 		mov	r3, #0
 1941 0e40 3B61     		str	r3, [r7, #16]
 690:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1942              		.loc 1 690 0
 1943 0e42 4FF00003 		mov	r3, #0
 1944 0e46 7B61     		str	r3, [r7, #20]
 691:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1945              		.loc 1 691 0
 1946 0e48 4FF00003 		mov	r3, #0
 1947 0e4c BB61     		str	r3, [r7, #24]
 692:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 1948              		.loc 1 692 0
 1949 0e4e 4FF00403 		mov	r3, #4
 1950 0e52 3B77     		strb	r3, [r7, #28]
 693:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 1951              		.loc 1 693 0
 1952 0e54 3B46     		mov	r3, r7
 1953 0e56 4FF48070 		mov	r0, #256
 1954 0e5a C5F20000 		movt	r0, 20480
 1955 0e5e 1946     		mov	r1, r3
 1956 0e60 FFF7FEFF 		bl	ADC_Init
 694:../src/main.cpp **** 
 695:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 696:../src/main.cpp **** 
 697:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1957              		.loc 1 697 0
 1958 0e64 4FF48070 		mov	r0, #256
 1959 0e68 C5F20000 		movt	r0, 20480
 1960 0e6c 4FF00101 		mov	r1, #1
 1961 0e70 4FF00102 		mov	r2, #1
 1962 0e74 4FF00703 		mov	r3, #7
 1963 0e78 FFF7FEFF 		bl	ADC_RegularChannelConfig
 698:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1964              		.loc 1 698 0
 1965 0e7c 4FF48070 		mov	r0, #256
 1966 0e80 C5F20000 		movt	r0, 20480
 1967 0e84 4FF00501 		mov	r1, #5
 1968 0e88 4FF00202 		mov	r2, #2
 1969 0e8c 4FF00703 		mov	r3, #7
 1970 0e90 FFF7FEFF 		bl	ADC_RegularChannelConfig
 699:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 1971              		.loc 1 699 0
 1972 0e94 4FF48070 		mov	r0, #256
 1973 0e98 C5F20000 		movt	r0, 20480
 1974 0e9c 4FF00B01 		mov	r1, #11
 1975 0ea0 4FF00302 		mov	r2, #3
 1976 0ea4 4FF00703 		mov	r3, #7
 1977 0ea8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 700:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 1978              		.loc 1 700 0
 1979 0eac 4FF48070 		mov	r0, #256
 1980 0eb0 C5F20000 		movt	r0, 20480
 1981 0eb4 4FF00C01 		mov	r1, #12
 1982 0eb8 4FF00402 		mov	r2, #4
 1983 0ebc 4FF00703 		mov	r3, #7
 1984 0ec0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 701:../src/main.cpp **** 
 702:../src/main.cpp **** 	/* Enable ADC2 */
 703:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 1985              		.loc 1 703 0
 1986 0ec4 4FF48070 		mov	r0, #256
 1987 0ec8 C5F20000 		movt	r0, 20480
 1988 0ecc 4FF00101 		mov	r1, #1
 1989 0ed0 FFF7FEFF 		bl	ADC_Cmd
 704:../src/main.cpp **** 
 705:../src/main.cpp **** 	/* wait for ADRDY */
 706:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 1990              		.loc 1 706 0
 1991 0ed4 00BF     		nop
 1992              	.L39:
 1993              		.loc 1 706 0 is_stmt 0 discriminator 1
 1994 0ed6 4FF48070 		mov	r0, #256
 1995 0eda C5F20000 		movt	r0, 20480
 1996 0ede 4FF00101 		mov	r1, #1
 1997 0ee2 FFF7FEFF 		bl	ADC_GetFlagStatus
 1998 0ee6 0346     		mov	r3, r0
 1999 0ee8 002B     		cmp	r3, #0
 2000 0eea 14BF     		ite	ne
 2001 0eec 0023     		movne	r3, #0
 2002 0eee 0123     		moveq	r3, #1
 2003 0ef0 DBB2     		uxtb	r3, r3
 2004 0ef2 002B     		cmp	r3, #0
 2005 0ef4 EFD1     		bne	.L39
 707:../src/main.cpp **** 
 708:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 709:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 2006              		.loc 1 709 0 is_stmt 1
 2007 0ef6 4FF48070 		mov	r0, #256
 2008 0efa C5F20000 		movt	r0, 20480
 2009 0efe FFF7FEFF 		bl	ADC_StartConversion
 710:../src/main.cpp **** 
 711:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 2010              		.loc 1 711 0
 2011 0f02 4FF00200 		mov	r0, #2
 2012 0f06 4FF00101 		mov	r1, #1
 2013 0f0a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 712:../src/main.cpp **** 
 713:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 714:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 2014              		.loc 1 714 0
 2015 0f0e 07F12003 		add	r3, r7, #32
 2016 0f12 1846     		mov	r0, r3
 2017 0f14 FFF7FEFF 		bl	DMA_StructInit
 715:../src/main.cpp **** 
 716:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 2018              		.loc 1 716 0
 2019 0f18 4FF48160 		mov	r0, #1032
 2020 0f1c C4F20200 		movt	r0, 16386
 2021 0f20 FFF7FEFF 		bl	DMA_DeInit
 717:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 2022              		.loc 1 717 0
 2023 0f24 4FF4A073 		mov	r3, #320
 2024 0f28 C5F20003 		movt	r3, 20480
 2025 0f2c 3B62     		str	r3, [r7, #32]
 718:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 2026              		.loc 1 718 0
 2027 0f2e 40F20003 		movw	r3, #:lower16:adc2_data
 2028 0f32 C0F20003 		movt	r3, #:upper16:adc2_data
 2029 0f36 7B62     		str	r3, [r7, #36]
 719:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 2030              		.loc 1 719 0
 2031 0f38 4FF00003 		mov	r3, #0
 2032 0f3c BB62     		str	r3, [r7, #40]
 720:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 2033              		.loc 1 720 0
 2034 0f3e 4FF00403 		mov	r3, #4
 2035 0f42 BB85     		strh	r3, [r7, #44]	@ movhi
 721:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 2036              		.loc 1 721 0
 2037 0f44 4FF00003 		mov	r3, #0
 2038 0f48 3B63     		str	r3, [r7, #48]
 722:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 2039              		.loc 1 722 0
 2040 0f4a 4FF08003 		mov	r3, #128
 2041 0f4e 7B63     		str	r3, [r7, #52]
 723:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 2042              		.loc 1 723 0
 2043 0f50 4FF40073 		mov	r3, #512
 2044 0f54 BB63     		str	r3, [r7, #56]
 724:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 2045              		.loc 1 724 0
 2046 0f56 4FF40063 		mov	r3, #2048
 2047 0f5a FB63     		str	r3, [r7, #60]
 725:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 2048              		.loc 1 725 0
 2049 0f5c 4FF02003 		mov	r3, #32
 2050 0f60 3B64     		str	r3, [r7, #64]
 726:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 2051              		.loc 1 726 0
 2052 0f62 4FF40053 		mov	r3, #8192
 2053 0f66 7B64     		str	r3, [r7, #68]
 727:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 2054              		.loc 1 727 0
 2055 0f68 4FF00003 		mov	r3, #0
 2056 0f6c BB64     		str	r3, [r7, #72]
 728:../src/main.cpp **** 
 729:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 2057              		.loc 1 729 0
 2058 0f6e 07F12003 		add	r3, r7, #32
 2059 0f72 4FF48160 		mov	r0, #1032
 2060 0f76 C4F20200 		movt	r0, 16386
 2061 0f7a 1946     		mov	r1, r3
 2062 0f7c FFF7FEFF 		bl	DMA_Init
 730:../src/main.cpp **** 
 731:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 732:../src/main.cpp **** 
 733:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 2063              		.loc 1 733 0
 2064 0f80 4FF03803 		mov	r3, #56
 2065 0f84 87F84C30 		strb	r3, [r7, #76]
 734:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2066              		.loc 1 734 0
 2067 0f88 4FF00203 		mov	r3, #2
 2068 0f8c 87F84D30 		strb	r3, [r7, #77]
 735:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2069              		.loc 1 735 0
 2070 0f90 4FF00003 		mov	r3, #0
 2071 0f94 87F84E30 		strb	r3, [r7, #78]
 736:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2072              		.loc 1 736 0
 2073 0f98 4FF00103 		mov	r3, #1
 2074 0f9c 87F84F30 		strb	r3, [r7, #79]
 737:../src/main.cpp **** 
 738:../src/main.cpp **** 	NVIC_Init(&nv);
 2075              		.loc 1 738 0
 2076 0fa0 07F14C03 		add	r3, r7, #76
 2077 0fa4 1846     		mov	r0, r3
 2078 0fa6 FFF7FEFF 		bl	NVIC_Init
 739:../src/main.cpp **** 
 740:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 2079              		.loc 1 740 0
 2080 0faa 4FF48160 		mov	r0, #1032
 2081 0fae C4F20200 		movt	r0, 16386
 2082 0fb2 4FF00201 		mov	r1, #2
 2083 0fb6 4FF00102 		mov	r2, #1
 2084 0fba FFF7FEFF 		bl	DMA_ITConfig
 741:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 2085              		.loc 1 741 0
 2086 0fbe 4FF48160 		mov	r0, #1032
 2087 0fc2 C4F20200 		movt	r0, 16386
 2088 0fc6 4FF00101 		mov	r1, #1
 2089 0fca FFF7FEFF 		bl	DMA_Cmd
 742:../src/main.cpp **** 
 743:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 2090              		.loc 1 743 0
 2091 0fce 4FF48070 		mov	r0, #256
 2092 0fd2 C5F20000 		movt	r0, 20480
 2093 0fd6 4FF00201 		mov	r1, #2
 2094 0fda FFF7FEFF 		bl	ADC_DMAConfig
 744:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 2095              		.loc 1 744 0
 2096 0fde 4FF48070 		mov	r0, #256
 2097 0fe2 C5F20000 		movt	r0, 20480
 2098 0fe6 4FF00101 		mov	r1, #1
 2099 0fea FFF7FEFF 		bl	ADC_DMACmd
 2100              	.LBE18:
 745:../src/main.cpp **** }
 2101              		.loc 1 745 0
 2102 0fee 07F17007 		add	r7, r7, #112
 2103 0ff2 BD46     		mov	sp, r7
 2104 0ff4 80BD     		pop	{r7, pc}
 2105              		.cfi_endproc
 2106              	.LFE121:
 2108 0ff6 00BF     		.align	2
 2109              		.global	_Z21battery_watchdog_initv
 2110              		.thumb
 2111              		.thumb_func
 2113              	_Z21battery_watchdog_initv:
 2114              	.LFB122:
 746:../src/main.cpp **** 
 747:../src/main.cpp **** void battery_watchdog_init(void)
 748:../src/main.cpp **** {
 2115              		.loc 1 748 0
 2116              		.cfi_startproc
 2117              		@ args = 0, pretend = 0, frame = 72
 2118              		@ frame_needed = 1, uses_anonymous_args = 0
 2119 0ff8 80B5     		push	{r7, lr}
 2120              	.LCFI33:
 2121              		.cfi_def_cfa_offset 8
 2122              		.cfi_offset 7, -8
 2123              		.cfi_offset 14, -4
 2124 0ffa 92B0     		sub	sp, sp, #72
 2125              	.LCFI34:
 2126              		.cfi_def_cfa_offset 80
 2127 0ffc 00AF     		add	r7, sp, #0
 2128              	.LCFI35:
 2129              		.cfi_def_cfa_register 7
 2130              	.LBB19:
 749:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 750:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 751:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 752:../src/main.cpp **** 	/* Configure the ADC clock */
 753:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 2131              		.loc 1 753 0
 2132 0ffe 4FF45050 		mov	r0, #13312
 2133 1002 C1F20000 		movt	r0, 4096
 2134 1006 FFF7FEFF 		bl	RCC_ADCCLKConfig
 754:../src/main.cpp **** 
 755:../src/main.cpp **** 	/* Enable ADC1 clock */
 756:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 2135              		.loc 1 756 0
 2136 100a 4FF00050 		mov	r0, #536870912
 2137 100e 4FF00101 		mov	r1, #1
 2138 1012 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 757:../src/main.cpp **** 	/* ADC Channel configuration */
 758:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 759:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 2139              		.loc 1 759 0
 2140 1016 4FF41010 		mov	r0, #2359296
 2141 101a 4FF00101 		mov	r1, #1
 2142 101e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 760:../src/main.cpp **** 
 761:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 762:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2143              		.loc 1 762 0
 2144 1022 07F12803 		add	r3, r7, #40
 2145 1026 1846     		mov	r0, r3
 2146 1028 FFF7FEFF 		bl	GPIO_StructInit
 763:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 2147              		.loc 1 763 0
 2148 102c 42F20203 		movw	r3, #8194
 2149 1030 BB62     		str	r3, [r7, #40]
 764:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2150              		.loc 1 764 0
 2151 1032 4FF00303 		mov	r3, #3
 2152 1036 87F82C30 		strb	r3, [r7, #44]
 765:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2153              		.loc 1 765 0
 2154 103a 4FF00003 		mov	r3, #0
 2155 103e 87F82F30 		strb	r3, [r7, #47]
 766:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2156              		.loc 1 766 0
 2157 1042 07F12803 		add	r3, r7, #40
 2158 1046 4FF48060 		mov	r0, #1024
 2159 104a C4F60000 		movt	r0, 18432
 2160 104e 1946     		mov	r1, r3
 2161 1050 FFF7FEFF 		bl	GPIO_Init
 767:../src/main.cpp **** /*
 768:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 769:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 770:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 771:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 772:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 773:../src/main.cpp **** */
 774:../src/main.cpp **** 
 775:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2162              		.loc 1 775 0
 2163 1054 07F10403 		add	r3, r7, #4
 2164 1058 1846     		mov	r0, r3
 2165 105a FFF7FEFF 		bl	ADC_StructInit
 776:../src/main.cpp **** 
 777:../src/main.cpp **** 	/* Calibration procedure */
 778:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 2166              		.loc 1 778 0
 2167 105e 4FF48060 		mov	r0, #1024
 2168 1062 C5F20000 		movt	r0, 20480
 2169 1066 4FF00101 		mov	r1, #1
 2170 106a FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 779:../src/main.cpp **** 
 780:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 781:../src/main.cpp **** 	int foo;
 782:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2171              		.loc 1 782 0
 2172 106e 4FF00003 		mov	r3, #0
 2173 1072 7B64     		str	r3, [r7, #68]
 2174 1074 07E0     		b	.L41
 2175              	.L42:
 783:../src/main.cpp **** 	{
 784:../src/main.cpp **** 	  ++foo;
 2176              		.loc 1 784 0 discriminator 2
 2177 1076 7B6C     		ldr	r3, [r7, #68]
 2178 1078 03F10103 		add	r3, r3, #1
 2179 107c 7B64     		str	r3, [r7, #68]
 782:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2180              		.loc 1 782 0 discriminator 2
 2181 107e 7B6C     		ldr	r3, [r7, #68]
 2182 1080 03F10103 		add	r3, r3, #1
 2183 1084 7B64     		str	r3, [r7, #68]
 2184              	.L41:
 782:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2185              		.loc 1 782 0 is_stmt 0 discriminator 1
 2186 1086 7A6C     		ldr	r2, [r7, #68]
 2187 1088 47F6FF43 		movw	r3, #31999
 2188 108c 9A42     		cmp	r2, r3
 2189 108e CCBF     		ite	gt
 2190 1090 0023     		movgt	r3, #0
 2191 1092 0123     		movle	r3, #1
 2192 1094 DBB2     		uxtb	r3, r3
 2193 1096 002B     		cmp	r3, #0
 2194 1098 EDD1     		bne	.L42
 785:../src/main.cpp **** 	}
 786:../src/main.cpp **** 
 787:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 2195              		.loc 1 787 0 is_stmt 1
 2196 109a 4FF48060 		mov	r0, #1024
 2197 109e C5F20000 		movt	r0, 20480
 2198 10a2 4FF00001 		mov	r1, #0
 2199 10a6 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 788:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 2200              		.loc 1 788 0
 2201 10aa 4FF48060 		mov	r0, #1024
 2202 10ae C5F20000 		movt	r0, 20480
 2203 10b2 FFF7FEFF 		bl	ADC_StartCalibration
 789:../src/main.cpp **** 
 790:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 2204              		.loc 1 790 0
 2205 10b6 00BF     		nop
 2206              	.L43:
 2207              		.loc 1 790 0 is_stmt 0 discriminator 1
 2208 10b8 4FF48060 		mov	r0, #1024
 2209 10bc C5F20000 		movt	r0, 20480
 2210 10c0 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2211 10c4 0346     		mov	r3, r0
 2212 10c6 002B     		cmp	r3, #0
 2213 10c8 0CBF     		ite	eq
 2214 10ca 0023     		moveq	r3, #0
 2215 10cc 0123     		movne	r3, #1
 2216 10ce DBB2     		uxtb	r3, r3
 2217 10d0 002B     		cmp	r3, #0
 2218 10d2 F1D1     		bne	.L43
 791:../src/main.cpp **** 
 792:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2219              		.loc 1 792 0 is_stmt 1
 2220 10d4 4FF00003 		mov	r3, #0
 2221 10d8 3B63     		str	r3, [r7, #48]
 793:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 2222              		.loc 1 793 0
 2223 10da 4FF44033 		mov	r3, #196608
 2224 10de 7B63     		str	r3, [r7, #52]
 794:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2225              		.loc 1 794 0
 2226 10e0 4FF00003 		mov	r3, #0
 2227 10e4 BB63     		str	r3, [r7, #56]
 795:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2228              		.loc 1 795 0
 2229 10e6 4FF00003 		mov	r3, #0
 2230 10ea FB63     		str	r3, [r7, #60]
 796:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2231              		.loc 1 796 0
 2232 10ec 4FF00003 		mov	r3, #0
 2233 10f0 87F84030 		strb	r3, [r7, #64]
 797:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 2234              		.loc 1 797 0
 2235 10f4 07F13003 		add	r3, r7, #48
 2236 10f8 4FF48060 		mov	r0, #1024
 2237 10fc C5F20000 		movt	r0, 20480
 2238 1100 1946     		mov	r1, r3
 2239 1102 FFF7FEFF 		bl	ADC_CommonInit
 798:../src/main.cpp **** 
 799:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2240              		.loc 1 799 0
 2241 1106 4FF40053 		mov	r3, #8192
 2242 110a 7B60     		str	r3, [r7, #4]
 800:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2243              		.loc 1 800 0
 2244 110c 4FF00003 		mov	r3, #0
 2245 1110 BB60     		str	r3, [r7, #8]
 801:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2246              		.loc 1 801 0
 2247 1112 4FF00003 		mov	r3, #0
 2248 1116 FB60     		str	r3, [r7, #12]
 802:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2249              		.loc 1 802 0
 2250 1118 4FF00003 		mov	r3, #0
 2251 111c 3B61     		str	r3, [r7, #16]
 803:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2252              		.loc 1 803 0
 2253 111e 4FF00003 		mov	r3, #0
 2254 1122 7B61     		str	r3, [r7, #20]
 804:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2255              		.loc 1 804 0
 2256 1124 4FF00003 		mov	r3, #0
 2257 1128 BB61     		str	r3, [r7, #24]
 805:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2258              		.loc 1 805 0
 2259 112a 4FF00003 		mov	r3, #0
 2260 112e FB61     		str	r3, [r7, #28]
 806:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2261              		.loc 1 806 0
 2262 1130 4FF00203 		mov	r3, #2
 2263 1134 87F82030 		strb	r3, [r7, #32]
 807:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 2264              		.loc 1 807 0
 2265 1138 07F10403 		add	r3, r7, #4
 2266 113c 4FF48060 		mov	r0, #1024
 2267 1140 C5F20000 		movt	r0, 20480
 2268 1144 1946     		mov	r1, r3
 2269 1146 FFF7FEFF 		bl	ADC_Init
 808:../src/main.cpp **** 
 809:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 810:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2270              		.loc 1 810 0
 2271 114a 4FF48060 		mov	r0, #1024
 2272 114e C5F20000 		movt	r0, 20480
 2273 1152 4FF00101 		mov	r1, #1
 2274 1156 4FF00102 		mov	r2, #1
 2275 115a 4FF00703 		mov	r3, #7
 2276 115e FFF7FEFF 		bl	ADC_RegularChannelConfig
 811:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2277              		.loc 1 811 0
 2278 1162 4FF48060 		mov	r0, #1024
 2279 1166 C5F20000 		movt	r0, 20480
 2280 116a 4FF00501 		mov	r1, #5
 2281 116e 4FF00202 		mov	r2, #2
 2282 1172 4FF00703 		mov	r3, #7
 2283 1176 FFF7FEFF 		bl	ADC_RegularChannelConfig
 812:../src/main.cpp **** 
 813:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 2284              		.loc 1 813 0
 2285 117a 4FF48060 		mov	r0, #1024
 2286 117e C5F20000 		movt	r0, 20480
 2287 1182 4FF00101 		mov	r1, #1
 2288 1186 FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 814:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 2289              		.loc 1 814 0
 2290 118a 4FF48060 		mov	r0, #1024
 2291 118e C5F20000 		movt	r0, 20480
 2292 1192 4FF00501 		mov	r1, #5
 2293 1196 FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 815:../src/main.cpp **** 
 816:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 817:../src/main.cpp **** 
 818:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 2294              		.loc 1 818 0
 2295 119a 4FF48060 		mov	r0, #1024
 2296 119e C5F20000 		movt	r0, 20480
 2297 11a2 4FF40061 		mov	r1, #2048
 2298 11a6 4FF00A02 		mov	r2, #10
 2299 11aa FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 819:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 2300              		.loc 1 819 0
 2301 11ae 4FF48060 		mov	r0, #1024
 2302 11b2 C5F20000 		movt	r0, 20480
 2303 11b6 4FF08001 		mov	r1, #128
 2304 11ba 4FF00002 		mov	r2, #0
 2305 11be FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 820:../src/main.cpp **** 
 821:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 2306              		.loc 1 821 0
 2307 11c2 4FF48060 		mov	r0, #1024
 2308 11c6 C5F20000 		movt	r0, 20480
 2309 11ca 4FF44001 		mov	r1, #12582912
 2310 11ce FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 822:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 823:../src/main.cpp **** 
 824:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 825:../src/main.cpp **** 
 826:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 827:../src/main.cpp **** 
 828:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 2311              		.loc 1 828 0
 2312 11d2 4FF02F03 		mov	r3, #47
 2313 11d6 87F82430 		strb	r3, [r7, #36]
 829:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 2314              		.loc 1 829 0
 2315 11da 4FF00003 		mov	r3, #0
 2316 11de 87F82530 		strb	r3, [r7, #37]
 830:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2317              		.loc 1 830 0
 2318 11e2 4FF00003 		mov	r3, #0
 2319 11e6 87F82630 		strb	r3, [r7, #38]
 831:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2320              		.loc 1 831 0
 2321 11ea 4FF00103 		mov	r3, #1
 2322 11ee 87F82730 		strb	r3, [r7, #39]
 832:../src/main.cpp **** 
 833:../src/main.cpp **** 	NVIC_Init(&nv);
 2323              		.loc 1 833 0
 2324 11f2 07F12403 		add	r3, r7, #36
 2325 11f6 1846     		mov	r0, r3
 2326 11f8 FFF7FEFF 		bl	NVIC_Init
 834:../src/main.cpp **** 
 835:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 836:../src/main.cpp **** 
 837:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 2327              		.loc 1 837 0
 2328 11fc 4FF48060 		mov	r0, #1024
 2329 1200 C5F20000 		movt	r0, 20480
 2330 1204 4FF4C071 		mov	r1, #384
 2331 1208 4FF00102 		mov	r2, #1
 2332 120c FFF7FEFF 		bl	ADC_ITConfig
 838:../src/main.cpp **** 
 839:../src/main.cpp **** 	/* Enable ADC3 */
 840:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 2333              		.loc 1 840 0
 2334 1210 4FF48060 		mov	r0, #1024
 2335 1214 C5F20000 		movt	r0, 20480
 2336 1218 4FF00101 		mov	r1, #1
 2337 121c FFF7FEFF 		bl	ADC_Cmd
 841:../src/main.cpp **** 
 842:../src/main.cpp **** 	/* wait for ADRDY */
 843:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 2338              		.loc 1 843 0
 2339 1220 00BF     		nop
 2340              	.L44:
 2341              		.loc 1 843 0 is_stmt 0 discriminator 1
 2342 1222 4FF48060 		mov	r0, #1024
 2343 1226 C5F20000 		movt	r0, 20480
 2344 122a 4FF00101 		mov	r1, #1
 2345 122e FFF7FEFF 		bl	ADC_GetFlagStatus
 2346 1232 0346     		mov	r3, r0
 2347 1234 002B     		cmp	r3, #0
 2348 1236 14BF     		ite	ne
 2349 1238 0023     		movne	r3, #0
 2350 123a 0123     		moveq	r3, #1
 2351 123c DBB2     		uxtb	r3, r3
 2352 123e 002B     		cmp	r3, #0
 2353 1240 EFD1     		bne	.L44
 844:../src/main.cpp **** 
 845:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 846:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 2354              		.loc 1 846 0 is_stmt 1
 2355 1242 4FF48060 		mov	r0, #1024
 2356 1246 C5F20000 		movt	r0, 20480
 2357 124a FFF7FEFF 		bl	ADC_StartConversion
 2358              	.LBE19:
 847:../src/main.cpp **** }
 2359              		.loc 1 847 0
 2360 124e 07F14807 		add	r7, r7, #72
 2361 1252 BD46     		mov	sp, r7
 2362 1254 80BD     		pop	{r7, pc}
 2363              		.cfi_endproc
 2364              	.LFE122:
 2366 1256 00BF     		.align	2
 2367              		.global	_Z9adc1_initv
 2368              		.thumb
 2369              		.thumb_func
 2371              	_Z9adc1_initv:
 2372              	.LFB123:
 848:../src/main.cpp **** 
 849:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 850:../src/main.cpp ****  * @Args: Nothing
 851:../src/main.cpp ****  * @Return Val: Nothing
 852:../src/main.cpp ****  */
 853:../src/main.cpp **** 
 854:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 855:../src/main.cpp **** {
 2373              		.loc 1 855 0
 2374              		.cfi_startproc
 2375              		@ args = 0, pretend = 0, frame = 72
 2376              		@ frame_needed = 1, uses_anonymous_args = 0
 2377 1258 80B5     		push	{r7, lr}
 2378              	.LCFI36:
 2379              		.cfi_def_cfa_offset 8
 2380              		.cfi_offset 7, -8
 2381              		.cfi_offset 14, -4
 2382 125a 92B0     		sub	sp, sp, #72
 2383              	.LCFI37:
 2384              		.cfi_def_cfa_offset 80
 2385 125c 00AF     		add	r7, sp, #0
 2386              	.LCFI38:
 2387              		.cfi_def_cfa_register 7
 2388              	.LBB20:
 856:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 857:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 858:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 859:../src/main.cpp **** 	/* Configure the ADC clock */
 860:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2389              		.loc 1 860 0
 2390 125e 4FF48870 		mov	r0, #272
 2391 1262 FFF7FEFF 		bl	RCC_ADCCLKConfig
 861:../src/main.cpp **** 
 862:../src/main.cpp **** 	/* Enable ADC1 clock */
 863:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2392              		.loc 1 863 0
 2393 1266 4FF08050 		mov	r0, #268435456
 2394 126a 4FF00101 		mov	r1, #1
 2395 126e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 864:../src/main.cpp **** 	/* ADC Channel configuration */
 865:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 866:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2396              		.loc 1 866 0
 2397 1272 4FF40030 		mov	r0, #131072
 2398 1276 4FF00101 		mov	r1, #1
 2399 127a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 867:../src/main.cpp **** 
 868:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 869:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2400              		.loc 1 869 0
 2401 127e 4FF00403 		mov	r3, #4
 2402 1282 BB62     		str	r3, [r7, #40]
 870:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2403              		.loc 1 870 0
 2404 1284 4FF00303 		mov	r3, #3
 2405 1288 87F82C30 		strb	r3, [r7, #44]
 871:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2406              		.loc 1 871 0
 2407 128c 4FF00003 		mov	r3, #0
 2408 1290 87F82F30 		strb	r3, [r7, #47]
 872:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2409              		.loc 1 872 0
 2410 1294 07F12803 		add	r3, r7, #40
 2411 1298 4FF09040 		mov	r0, #1207959552
 2412 129c 1946     		mov	r1, r3
 2413 129e FFF7FEFF 		bl	GPIO_Init
 873:../src/main.cpp **** 
 874:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2414              		.loc 1 874 0
 2415 12a2 07F10403 		add	r3, r7, #4
 2416 12a6 1846     		mov	r0, r3
 2417 12a8 FFF7FEFF 		bl	ADC_StructInit
 875:../src/main.cpp **** 
 876:../src/main.cpp **** 	/* Calibration procedure */
 877:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2418              		.loc 1 877 0
 2419 12ac 4FF0A040 		mov	r0, #1342177280
 2420 12b0 4FF00101 		mov	r1, #1
 2421 12b4 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 878:../src/main.cpp **** 
 879:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 880:../src/main.cpp **** 	int foo;
 881:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2422              		.loc 1 881 0
 2423 12b8 4FF00003 		mov	r3, #0
 2424 12bc 7B64     		str	r3, [r7, #68]
 2425 12be 07E0     		b	.L46
 2426              	.L47:
 882:../src/main.cpp **** 	{
 883:../src/main.cpp **** 	  ++foo;
 2427              		.loc 1 883 0 discriminator 2
 2428 12c0 7B6C     		ldr	r3, [r7, #68]
 2429 12c2 03F10103 		add	r3, r3, #1
 2430 12c6 7B64     		str	r3, [r7, #68]
 881:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2431              		.loc 1 881 0 discriminator 2
 2432 12c8 7B6C     		ldr	r3, [r7, #68]
 2433 12ca 03F10103 		add	r3, r3, #1
 2434 12ce 7B64     		str	r3, [r7, #68]
 2435              	.L46:
 881:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2436              		.loc 1 881 0 is_stmt 0 discriminator 1
 2437 12d0 7A6C     		ldr	r2, [r7, #68]
 2438 12d2 47F6FF43 		movw	r3, #31999
 2439 12d6 9A42     		cmp	r2, r3
 2440 12d8 CCBF     		ite	gt
 2441 12da 0023     		movgt	r3, #0
 2442 12dc 0123     		movle	r3, #1
 2443 12de DBB2     		uxtb	r3, r3
 2444 12e0 002B     		cmp	r3, #0
 2445 12e2 EDD1     		bne	.L47
 884:../src/main.cpp **** 	}
 885:../src/main.cpp **** 
 886:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2446              		.loc 1 886 0 is_stmt 1
 2447 12e4 4FF0A040 		mov	r0, #1342177280
 2448 12e8 4FF00001 		mov	r1, #0
 2449 12ec FFF7FEFF 		bl	ADC_SelectCalibrationMode
 887:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2450              		.loc 1 887 0
 2451 12f0 4FF0A040 		mov	r0, #1342177280
 2452 12f4 FFF7FEFF 		bl	ADC_StartCalibration
 888:../src/main.cpp **** 
 889:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2453              		.loc 1 889 0
 2454 12f8 00BF     		nop
 2455              	.L48:
 2456              		.loc 1 889 0 is_stmt 0 discriminator 1
 2457 12fa 4FF0A040 		mov	r0, #1342177280
 2458 12fe FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2459 1302 0346     		mov	r3, r0
 2460 1304 002B     		cmp	r3, #0
 2461 1306 0CBF     		ite	eq
 2462 1308 0023     		moveq	r3, #0
 2463 130a 0123     		movne	r3, #1
 2464 130c DBB2     		uxtb	r3, r3
 2465 130e 002B     		cmp	r3, #0
 2466 1310 F3D1     		bne	.L48
 890:../src/main.cpp **** 
 891:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2467              		.loc 1 891 0 is_stmt 1
 2468 1312 4FF00003 		mov	r3, #0
 2469 1316 3B63     		str	r3, [r7, #48]
 892:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2470              		.loc 1 892 0
 2471 1318 4FF00003 		mov	r3, #0
 2472 131c 7B63     		str	r3, [r7, #52]
 893:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2473              		.loc 1 893 0
 2474 131e 4FF00003 		mov	r3, #0
 2475 1322 BB63     		str	r3, [r7, #56]
 894:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2476              		.loc 1 894 0
 2477 1324 4FF00003 		mov	r3, #0
 2478 1328 FB63     		str	r3, [r7, #60]
 895:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2479              		.loc 1 895 0
 2480 132a 4FF00003 		mov	r3, #0
 2481 132e 87F84030 		strb	r3, [r7, #64]
 896:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2482              		.loc 1 896 0
 2483 1332 07F13003 		add	r3, r7, #48
 2484 1336 4FF0A040 		mov	r0, #1342177280
 2485 133a 1946     		mov	r1, r3
 2486 133c FFF7FEFF 		bl	ADC_CommonInit
 897:../src/main.cpp **** 
 898:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2487              		.loc 1 898 0
 2488 1340 4FF40053 		mov	r3, #8192
 2489 1344 7B60     		str	r3, [r7, #4]
 899:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2490              		.loc 1 899 0
 2491 1346 4FF00003 		mov	r3, #0
 2492 134a BB60     		str	r3, [r7, #8]
 900:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2493              		.loc 1 900 0
 2494 134c 4FF00003 		mov	r3, #0
 2495 1350 FB60     		str	r3, [r7, #12]
 901:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2496              		.loc 1 901 0
 2497 1352 4FF00003 		mov	r3, #0
 2498 1356 3B61     		str	r3, [r7, #16]
 902:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2499              		.loc 1 902 0
 2500 1358 4FF00003 		mov	r3, #0
 2501 135c 7B61     		str	r3, [r7, #20]
 903:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2502              		.loc 1 903 0
 2503 135e 4FF00003 		mov	r3, #0
 2504 1362 BB61     		str	r3, [r7, #24]
 904:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2505              		.loc 1 904 0
 2506 1364 4FF00003 		mov	r3, #0
 2507 1368 FB61     		str	r3, [r7, #28]
 905:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2508              		.loc 1 905 0
 2509 136a 4FF00103 		mov	r3, #1
 2510 136e 87F82030 		strb	r3, [r7, #32]
 906:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2511              		.loc 1 906 0
 2512 1372 07F10403 		add	r3, r7, #4
 2513 1376 4FF0A040 		mov	r0, #1342177280
 2514 137a 1946     		mov	r1, r3
 2515 137c FFF7FEFF 		bl	ADC_Init
 907:../src/main.cpp **** 
 908:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 909:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2516              		.loc 1 909 0
 2517 1380 4FF0A040 		mov	r0, #1342177280
 2518 1384 4FF00301 		mov	r1, #3
 2519 1388 4FF00102 		mov	r2, #1
 2520 138c 4FF00703 		mov	r3, #7
 2521 1390 FFF7FEFF 		bl	ADC_RegularChannelConfig
 910:../src/main.cpp **** 
 911:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 912:../src/main.cpp **** 
 913:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 914:../src/main.cpp **** 
 915:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2522              		.loc 1 915 0
 2523 1394 4FF01203 		mov	r3, #18
 2524 1398 87F82430 		strb	r3, [r7, #36]
 916:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2525              		.loc 1 916 0
 2526 139c 4FF00203 		mov	r3, #2
 2527 13a0 87F82530 		strb	r3, [r7, #37]
 917:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2528              		.loc 1 917 0
 2529 13a4 4FF00003 		mov	r3, #0
 2530 13a8 87F82630 		strb	r3, [r7, #38]
 918:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2531              		.loc 1 918 0
 2532 13ac 4FF00103 		mov	r3, #1
 2533 13b0 87F82730 		strb	r3, [r7, #39]
 919:../src/main.cpp **** 
 920:../src/main.cpp **** 	NVIC_Init(&nv);
 2534              		.loc 1 920 0
 2535 13b4 07F12403 		add	r3, r7, #36
 2536 13b8 1846     		mov	r0, r3
 2537 13ba FFF7FEFF 		bl	NVIC_Init
 921:../src/main.cpp **** 
 922:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 923:../src/main.cpp **** 
 924:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2538              		.loc 1 924 0
 2539 13be 4FF0A040 		mov	r0, #1342177280
 2540 13c2 4FF00401 		mov	r1, #4
 2541 13c6 4FF00102 		mov	r2, #1
 2542 13ca FFF7FEFF 		bl	ADC_ITConfig
 925:../src/main.cpp **** 
 926:../src/main.cpp **** 	/* Enable ADC1 */
 927:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2543              		.loc 1 927 0
 2544 13ce 4FF0A040 		mov	r0, #1342177280
 2545 13d2 4FF00101 		mov	r1, #1
 2546 13d6 FFF7FEFF 		bl	ADC_Cmd
 928:../src/main.cpp **** 
 929:../src/main.cpp **** 	/* wait for ADRDY */
 930:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2547              		.loc 1 930 0
 2548 13da 00BF     		nop
 2549              	.L49:
 2550              		.loc 1 930 0 is_stmt 0 discriminator 1
 2551 13dc 4FF0A040 		mov	r0, #1342177280
 2552 13e0 4FF00101 		mov	r1, #1
 2553 13e4 FFF7FEFF 		bl	ADC_GetFlagStatus
 2554 13e8 0346     		mov	r3, r0
 2555 13ea 002B     		cmp	r3, #0
 2556 13ec 14BF     		ite	ne
 2557 13ee 0023     		movne	r3, #0
 2558 13f0 0123     		moveq	r3, #1
 2559 13f2 DBB2     		uxtb	r3, r3
 2560 13f4 002B     		cmp	r3, #0
 2561 13f6 F1D1     		bne	.L49
 931:../src/main.cpp **** 
 932:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 933:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2562              		.loc 1 933 0 is_stmt 1
 2563 13f8 4FF0A040 		mov	r0, #1342177280
 2564 13fc FFF7FEFF 		bl	ADC_StartConversion
 2565              	.LBE20:
 934:../src/main.cpp **** }
 2566              		.loc 1 934 0
 2567 1400 07F14807 		add	r7, r7, #72
 2568 1404 BD46     		mov	sp, r7
 2569 1406 80BD     		pop	{r7, pc}
 2570              		.cfi_endproc
 2571              	.LFE123:
 2573              	.Letext0:
 2574              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2575              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2576              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 2577              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 2578              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 2579              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 2580              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 2581              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 2582              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 2583              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 2584              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/cc0m0H3b.s:24     .bss:00000000 led_iter
     /tmp/cc0m0H3b.s:21     .bss:00000000 $d
     /tmp/cc0m0H3b.s:31     .data:00000000 led_matrix
     /tmp/cc0m0H3b.s:28     .data:00000000 $d
     /tmp/cc0m0H3b.s:44     .bss:00000004 left_enc
     /tmp/cc0m0H3b.s:50     .bss:0000002c right_enc
     /tmp/cc0m0H3b.s:56     .bss:00000054 gyro_angle_x
     /tmp/cc0m0H3b.s:62     .bss:00000058 gyro_bias_x
     /tmp/cc0m0H3b.s:68     .bss:0000005c adcval
     /tmp/cc0m0H3b.s:74     .bss:00000060 adcData
     /tmp/cc0m0H3b.s:80     .bss:00000068 new_data
     /tmp/cc0m0H3b.s:86     .bss:0000006c adc2_data
     /tmp/cc0m0H3b.s:91     .bss:0000007c adc2_new_data
     /tmp/cc0m0H3b.s:96     .bss:0000007d adc3_awd1
     /tmp/cc0m0H3b.s:101    .bss:0000007e adc3_awd2
     /tmp/cc0m0H3b.s:107    .bss:00000080 count
     /tmp/cc0m0H3b.s:113    .bss:00000084 stage
     /tmp/cc0m0H3b.s:119    .bss:00000088 drive_cmd
     /tmp/cc0m0H3b.s:125    .bss:0000008c err
     /tmp/cc0m0H3b.s:131    .bss:00000090 last_err
     /tmp/cc0m0H3b.s:137    .bss:00000094 diff_err
     /tmp/cc0m0H3b.s:143    .bss:00000098 rt
     /tmp/cc0m0H3b.s:149    .bss:0000009c d_front
     /tmp/cc0m0H3b.s:155    .bss:000000a0 integral
     /tmp/cc0m0H3b.s:161    .bss:000000a4 left
     /tmp/cc0m0H3b.s:167    .bss:000000a8 right
     /tmp/cc0m0H3b.s:173    .bss:000000ac state
     /tmp/cc0m0H3b.s:176    .rodata:00000000 $d
     /tmp/cc0m0H3b.s:177    .rodata:00000000 .LC0
     /tmp/cc0m0H3b.s:180    .text:00000000 $t
     /tmp/cc0m0H3b.s:185    .text:00000000 main
     /tmp/cc0m0H3b.s:820    .text:00000510 _Z15brake_pins_initv
     /tmp/cc0m0H3b.s:1477   .text:00000a40 _Z13adc1_init_DMAv
     /tmp/cc0m0H3b.s:1761   .text:00000cb4 _Z13adc2_init_DMAv
     /tmp/cc0m0H3b.s:892    .text:00000588 _Z13ping_pin_initv
     /tmp/cc0m0H3b.s:977    .text:00000618 _Z20timer2_timebase_initv
     /tmp/cc0m0H3b.s:663    .text:00000414 _Z19imu_update_ISR_initv
     /tmp/cc0m0H3b.s:1036   .text:0000066c _Z9comp_initv
     /tmp/cc0m0H3b.s:498    .text:00000290 _Z11IR_distancei
     /tmp/cc0m0H3b.s:647    .text:000003f4 $d
     /tmp/cc0m0H3b.s:658    .text:00000414 $t
     /tmp/cc0m0H3b.s:1386   .text:000009b8 _Z14calc_gyro_biasv
     /tmp/cc0m0H3b.s:780    .rodata:00000010 .LC1
     /tmp/cc0m0H3b.s:789    .text:000004f8 L3GD20_TIMEOUT_UserCallback
     /tmp/cc0m0H3b.s:1468   .text:00000a3c $d
     /tmp/cc0m0H3b.s:1472   .text:00000a40 $t
     /tmp/cc0m0H3b.s:2113   .text:00000ff8 _Z21battery_watchdog_initv
     /tmp/cc0m0H3b.s:2371   .text:00001258 _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.071a1fb1765528594ea6643cada8c0ec
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z19init_encoder_structP12encoderState
_Z13pwm_out1_initt
_Z13pwm_out2_initt
_Z13pwm_out3_initt
_Z17TIM8_init_encoderv
_Z17TIM4_init_encoderv
_Z23encoder_update_ISR_initv
_Z19LED_MATRIX_ISR_initv
printf
_Z11pwm1_outputf
_Z11pwm2_outputf
_Z11pwm3_outputf
__aeabi_f2d
__aeabi_d2f
pow
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
RCC_AHBPeriphClockCmd
GPIO_StructInit
GPIO_Init
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
