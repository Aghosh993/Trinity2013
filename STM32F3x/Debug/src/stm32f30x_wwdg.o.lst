   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f30x_wwdg.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	WWDG_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	WWDG_DeInit:
  25              	.LFB111:
  26              		.file 1 "../src/stm32f30x_wwdg.c"
   1:../src/stm32f30x_wwdg.c **** /**
   2:../src/stm32f30x_wwdg.c ****   ******************************************************************************
   3:../src/stm32f30x_wwdg.c ****   * @file    stm32f30x_wwdg.c
   4:../src/stm32f30x_wwdg.c ****   * @author  MCD Application Team
   5:../src/stm32f30x_wwdg.c ****   * @version V1.0.1
   6:../src/stm32f30x_wwdg.c ****   * @date    23-October-2012
   7:../src/stm32f30x_wwdg.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../src/stm32f30x_wwdg.c ****   *          functionalities of the Window watchdog (WWDG) peripheral:
   9:../src/stm32f30x_wwdg.c ****   *           + Prescaler, Refresh window and Counter configuration
  10:../src/stm32f30x_wwdg.c ****   *           + WWDG activation
  11:../src/stm32f30x_wwdg.c ****   *           + Interrupts and flags management
  12:../src/stm32f30x_wwdg.c ****   *             
  13:../src/stm32f30x_wwdg.c ****   *  @verbatim
  14:../src/stm32f30x_wwdg.c ****   *    
  15:../src/stm32f30x_wwdg.c ****   ==============================================================================
  16:../src/stm32f30x_wwdg.c ****                            ##### WWDG features #####
  17:../src/stm32f30x_wwdg.c ****   ==============================================================================
  18:../src/stm32f30x_wwdg.c ****                                         
  19:../src/stm32f30x_wwdg.c ****     [..] Once enabled the WWDG generates a system reset on expiry of a programmed
  20:../src/stm32f30x_wwdg.c ****         time period, unless the program refreshes the counter (downcounter) 
  21:../src/stm32f30x_wwdg.c ****         before to reach 0x3F value (i.e. a reset is generated when the counter
  22:../src/stm32f30x_wwdg.c ****         value rolls over from 0x40 to 0x3F). 
  23:../src/stm32f30x_wwdg.c ****     [..] An MCU reset is also generated if the counter value is refreshed
  24:../src/stm32f30x_wwdg.c ****         before the counter has reached the refresh window value. This 
  25:../src/stm32f30x_wwdg.c ****         implies that the counter must be refreshed in a limited window.
  26:../src/stm32f30x_wwdg.c ****             
  27:../src/stm32f30x_wwdg.c ****     [..] Once enabled the WWDG cannot be disabled except by a system reset.
  28:../src/stm32f30x_wwdg.c ****          
  29:../src/stm32f30x_wwdg.c ****     [..] WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
  30:../src/stm32f30x_wwdg.c ****         reset occurs.
  31:../src/stm32f30x_wwdg.c ****             
  32:../src/stm32f30x_wwdg.c ****     [..] The WWDG counter input clock is derived from the APB clock divided 
  33:../src/stm32f30x_wwdg.c ****         by a programmable prescaler.
  34:../src/stm32f30x_wwdg.c ****               
  35:../src/stm32f30x_wwdg.c ****     [..] WWDG counter clock = PCLK1 / Prescaler.
  36:../src/stm32f30x_wwdg.c ****     [..] WWDG timeout = (WWDG counter clock) * (counter value).
  37:../src/stm32f30x_wwdg.c ****                      
  38:../src/stm32f30x_wwdg.c ****     [..] Min-max timeout value @36MHz (PCLK1): ~114us / ~58.3ms. 
  39:../src/stm32f30x_wwdg.c **** 
  40:../src/stm32f30x_wwdg.c ****                      ##### How to use this driver #####
  41:../src/stm32f30x_wwdg.c ****   ============================================================================== 
  42:../src/stm32f30x_wwdg.c ****     [..]         
  43:../src/stm32f30x_wwdg.c ****           (#) Enable WWDG clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE) 
  44:../src/stm32f30x_wwdg.c ****               function.
  45:../src/stm32f30x_wwdg.c ****             
  46:../src/stm32f30x_wwdg.c ****           (#) Configure the WWDG prescaler using WWDG_SetPrescaler() function.
  47:../src/stm32f30x_wwdg.c ****                            
  48:../src/stm32f30x_wwdg.c ****           (#) Configure the WWDG refresh window using WWDG_SetWindowValue() function.
  49:../src/stm32f30x_wwdg.c ****             
  50:../src/stm32f30x_wwdg.c ****           (#) Set the WWDG counter value and start it using WWDG_Enable() function.
  51:../src/stm32f30x_wwdg.c ****              When the WWDG is enabled the counter value should be configured to 
  52:../src/stm32f30x_wwdg.c ****              a value greater than 0x40 to prevent generating an immediate reset.     
  53:../src/stm32f30x_wwdg.c ****             
  54:../src/stm32f30x_wwdg.c ****           (#) Optionally you can enable the Early wakeup interrupt which is 
  55:../src/stm32f30x_wwdg.c ****              generated when the counter reach 0x40.
  56:../src/stm32f30x_wwdg.c ****              Once enabled this interrupt cannot be disabled except by a system reset.
  57:../src/stm32f30x_wwdg.c ****                  
  58:../src/stm32f30x_wwdg.c ****           (#) Then the application program must refresh the WWDG counter at regular
  59:../src/stm32f30x_wwdg.c ****              intervals during normal operation to prevent an MCU reset, using
  60:../src/stm32f30x_wwdg.c ****              WWDG_SetCounter() function. This operation must occur only when
  61:../src/stm32f30x_wwdg.c ****              the counter value is lower than the refresh window value, 
  62:../src/stm32f30x_wwdg.c ****              programmed using WWDG_SetWindowValue().         
  63:../src/stm32f30x_wwdg.c **** 
  64:../src/stm32f30x_wwdg.c ****   @endverbatim  
  65:../src/stm32f30x_wwdg.c ****                              
  66:../src/stm32f30x_wwdg.c ****   ******************************************************************************
  67:../src/stm32f30x_wwdg.c ****   * @attention
  68:../src/stm32f30x_wwdg.c ****   *
  69:../src/stm32f30x_wwdg.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  70:../src/stm32f30x_wwdg.c ****   *
  71:../src/stm32f30x_wwdg.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  72:../src/stm32f30x_wwdg.c ****   * You may not use this file except in compliance with the License.
  73:../src/stm32f30x_wwdg.c ****   * You may obtain a copy of the License at:
  74:../src/stm32f30x_wwdg.c ****   *
  75:../src/stm32f30x_wwdg.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  76:../src/stm32f30x_wwdg.c ****   *
  77:../src/stm32f30x_wwdg.c ****   * Unless required by applicable law or agreed to in writing, software 
  78:../src/stm32f30x_wwdg.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  79:../src/stm32f30x_wwdg.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  80:../src/stm32f30x_wwdg.c ****   * See the License for the specific language governing permissions and
  81:../src/stm32f30x_wwdg.c ****   * limitations under the License.
  82:../src/stm32f30x_wwdg.c ****   *
  83:../src/stm32f30x_wwdg.c ****   ******************************************************************************
  84:../src/stm32f30x_wwdg.c ****   */
  85:../src/stm32f30x_wwdg.c **** 
  86:../src/stm32f30x_wwdg.c **** /* Includes ------------------------------------------------------------------*/
  87:../src/stm32f30x_wwdg.c **** #include "stm32f30x_wwdg.h"
  88:../src/stm32f30x_wwdg.c **** #include "stm32f30x_rcc.h"
  89:../src/stm32f30x_wwdg.c **** 
  90:../src/stm32f30x_wwdg.c **** /** @addtogroup STM32F30x_StdPeriph_Driver
  91:../src/stm32f30x_wwdg.c ****   * @{
  92:../src/stm32f30x_wwdg.c ****   */
  93:../src/stm32f30x_wwdg.c **** 
  94:../src/stm32f30x_wwdg.c **** /** @defgroup WWDG 
  95:../src/stm32f30x_wwdg.c ****   * @brief WWDG driver modules
  96:../src/stm32f30x_wwdg.c ****   * @{
  97:../src/stm32f30x_wwdg.c ****   */
  98:../src/stm32f30x_wwdg.c **** 
  99:../src/stm32f30x_wwdg.c **** /* Private typedef -----------------------------------------------------------*/
 100:../src/stm32f30x_wwdg.c **** /* Private define ------------------------------------------------------------*/
 101:../src/stm32f30x_wwdg.c **** /* --------------------- WWDG registers bit mask ---------------------------- */
 102:../src/stm32f30x_wwdg.c **** /* CFR register bit mask */
 103:../src/stm32f30x_wwdg.c **** #define CFR_WDGTB_MASK    ((uint32_t)0xFFFFFE7F)
 104:../src/stm32f30x_wwdg.c **** #define CFR_W_MASK        ((uint32_t)0xFFFFFF80)
 105:../src/stm32f30x_wwdg.c **** #define BIT_MASK          ((uint8_t)0x7F)
 106:../src/stm32f30x_wwdg.c **** 
 107:../src/stm32f30x_wwdg.c **** /* Private macro -------------------------------------------------------------*/
 108:../src/stm32f30x_wwdg.c **** /* Private variables ---------------------------------------------------------*/
 109:../src/stm32f30x_wwdg.c **** /* Private function prototypes -----------------------------------------------*/
 110:../src/stm32f30x_wwdg.c **** /* Private functions ---------------------------------------------------------*/
 111:../src/stm32f30x_wwdg.c **** 
 112:../src/stm32f30x_wwdg.c **** /** @defgroup WWDG_Private_Functions
 113:../src/stm32f30x_wwdg.c ****   * @{
 114:../src/stm32f30x_wwdg.c ****   */
 115:../src/stm32f30x_wwdg.c **** 
 116:../src/stm32f30x_wwdg.c **** /** @defgroup WWDG_Group1 Prescaler, Refresh window and Counter configuration functions
 117:../src/stm32f30x_wwdg.c ****  *  @brief   Prescaler, Refresh window and Counter configuration functions 
 118:../src/stm32f30x_wwdg.c ****  *
 119:../src/stm32f30x_wwdg.c **** @verbatim   
 120:../src/stm32f30x_wwdg.c ****   ==============================================================================
 121:../src/stm32f30x_wwdg.c ****     ##### Prescaler, Refresh window and Counter configuration functions #####
 122:../src/stm32f30x_wwdg.c ****   ==============================================================================  
 123:../src/stm32f30x_wwdg.c **** 
 124:../src/stm32f30x_wwdg.c **** @endverbatim
 125:../src/stm32f30x_wwdg.c ****   * @{
 126:../src/stm32f30x_wwdg.c ****   */
 127:../src/stm32f30x_wwdg.c **** 
 128:../src/stm32f30x_wwdg.c **** /**
 129:../src/stm32f30x_wwdg.c ****   * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
 130:../src/stm32f30x_wwdg.c ****   * @param  None
 131:../src/stm32f30x_wwdg.c ****   * @retval None
 132:../src/stm32f30x_wwdg.c ****   */
 133:../src/stm32f30x_wwdg.c **** void WWDG_DeInit(void)
 134:../src/stm32f30x_wwdg.c **** {
  27              		.loc 1 134 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
 135:../src/stm32f30x_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  39              		.loc 1 135 0
  40 0004 4FF40060 		mov	r0, #2048
  41 0008 4FF00101 		mov	r1, #1
  42 000c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 136:../src/stm32f30x_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
  43              		.loc 1 136 0
  44 0010 4FF40060 		mov	r0, #2048
  45 0014 4FF00001 		mov	r1, #0
  46 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 137:../src/stm32f30x_wwdg.c **** }
  47              		.loc 1 137 0
  48 001c 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE111:
  52 001e 00BF     		.align	2
  53              		.global	WWDG_SetPrescaler
  54              		.thumb
  55              		.thumb_func
  57              	WWDG_SetPrescaler:
  58              	.LFB112:
 138:../src/stm32f30x_wwdg.c **** 
 139:../src/stm32f30x_wwdg.c **** /**
 140:../src/stm32f30x_wwdg.c ****   * @brief  Sets the WWDG Prescaler.
 141:../src/stm32f30x_wwdg.c ****   * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
 142:../src/stm32f30x_wwdg.c ****   *   This parameter can be one of the following values:
 143:../src/stm32f30x_wwdg.c ****   *     @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
 144:../src/stm32f30x_wwdg.c ****   *     @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
 145:../src/stm32f30x_wwdg.c ****   *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
 146:../src/stm32f30x_wwdg.c ****   *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
 147:../src/stm32f30x_wwdg.c ****   * @retval None
 148:../src/stm32f30x_wwdg.c ****   */
 149:../src/stm32f30x_wwdg.c **** void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
 150:../src/stm32f30x_wwdg.c **** {
  59              		.loc 1 150 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 16
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64 0020 80B4     		push	{r7}
  65              	.LCFI2:
  66              		.cfi_def_cfa_offset 4
  67              		.cfi_offset 7, -4
  68 0022 85B0     		sub	sp, sp, #20
  69              	.LCFI3:
  70              		.cfi_def_cfa_offset 24
  71 0024 00AF     		add	r7, sp, #0
  72              	.LCFI4:
  73              		.cfi_def_cfa_register 7
  74 0026 7860     		str	r0, [r7, #4]
 151:../src/stm32f30x_wwdg.c ****   uint32_t tmpreg = 0;
  75              		.loc 1 151 0
  76 0028 4FF00003 		mov	r3, #0
  77 002c FB60     		str	r3, [r7, #12]
 152:../src/stm32f30x_wwdg.c ****   /* Check the parameters */
 153:../src/stm32f30x_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
 154:../src/stm32f30x_wwdg.c ****   /* Clear WDGTB[1:0] bits */
 155:../src/stm32f30x_wwdg.c ****   tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
  78              		.loc 1 155 0
  79 002e 4FF43053 		mov	r3, #11264
  80 0032 C4F20003 		movt	r3, 16384
  81 0036 5B68     		ldr	r3, [r3, #4]
  82 0038 23F4C073 		bic	r3, r3, #384
  83 003c FB60     		str	r3, [r7, #12]
 156:../src/stm32f30x_wwdg.c ****   /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
 157:../src/stm32f30x_wwdg.c ****   tmpreg |= WWDG_Prescaler;
  84              		.loc 1 157 0
  85 003e FA68     		ldr	r2, [r7, #12]
  86 0040 7B68     		ldr	r3, [r7, #4]
  87 0042 1343     		orrs	r3, r3, r2
  88 0044 FB60     		str	r3, [r7, #12]
 158:../src/stm32f30x_wwdg.c ****   /* Store the new value */
 159:../src/stm32f30x_wwdg.c ****   WWDG->CFR = tmpreg;
  89              		.loc 1 159 0
  90 0046 4FF43053 		mov	r3, #11264
  91 004a C4F20003 		movt	r3, 16384
  92 004e FA68     		ldr	r2, [r7, #12]
  93 0050 5A60     		str	r2, [r3, #4]
 160:../src/stm32f30x_wwdg.c **** }
  94              		.loc 1 160 0
  95 0052 07F11407 		add	r7, r7, #20
  96 0056 BD46     		mov	sp, r7
  97 0058 80BC     		pop	{r7}
  98 005a 7047     		bx	lr
  99              		.cfi_endproc
 100              	.LFE112:
 102              		.align	2
 103              		.global	WWDG_SetWindowValue
 104              		.thumb
 105              		.thumb_func
 107              	WWDG_SetWindowValue:
 108              	.LFB113:
 161:../src/stm32f30x_wwdg.c **** 
 162:../src/stm32f30x_wwdg.c **** /**
 163:../src/stm32f30x_wwdg.c ****   * @brief  Sets the WWDG window value.
 164:../src/stm32f30x_wwdg.c ****   * @param  WindowValue: specifies the window value to be compared to the downcounter.
 165:../src/stm32f30x_wwdg.c ****   *   This parameter value must be lower than 0x80.
 166:../src/stm32f30x_wwdg.c ****   * @retval None
 167:../src/stm32f30x_wwdg.c ****   */
 168:../src/stm32f30x_wwdg.c **** void WWDG_SetWindowValue(uint8_t WindowValue)
 169:../src/stm32f30x_wwdg.c **** {
 109              		.loc 1 169 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 16
 112              		@ frame_needed = 1, uses_anonymous_args = 0
 113              		@ link register save eliminated.
 114 005c 80B4     		push	{r7}
 115              	.LCFI5:
 116              		.cfi_def_cfa_offset 4
 117              		.cfi_offset 7, -4
 118 005e 85B0     		sub	sp, sp, #20
 119              	.LCFI6:
 120              		.cfi_def_cfa_offset 24
 121 0060 00AF     		add	r7, sp, #0
 122              	.LCFI7:
 123              		.cfi_def_cfa_register 7
 124 0062 0346     		mov	r3, r0
 125 0064 FB71     		strb	r3, [r7, #7]
 170:../src/stm32f30x_wwdg.c ****   __IO uint32_t tmpreg = 0;
 126              		.loc 1 170 0
 127 0066 4FF00003 		mov	r3, #0
 128 006a FB60     		str	r3, [r7, #12]
 171:../src/stm32f30x_wwdg.c **** 
 172:../src/stm32f30x_wwdg.c ****   /* Check the parameters */
 173:../src/stm32f30x_wwdg.c ****   assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
 174:../src/stm32f30x_wwdg.c ****   /* Clear W[6:0] bits */
 175:../src/stm32f30x_wwdg.c **** 
 176:../src/stm32f30x_wwdg.c ****   tmpreg = WWDG->CFR & CFR_W_MASK;
 129              		.loc 1 176 0
 130 006c 4FF43053 		mov	r3, #11264
 131 0070 C4F20003 		movt	r3, 16384
 132 0074 5B68     		ldr	r3, [r3, #4]
 133 0076 23F07F03 		bic	r3, r3, #127
 134 007a FB60     		str	r3, [r7, #12]
 177:../src/stm32f30x_wwdg.c **** 
 178:../src/stm32f30x_wwdg.c ****   /* Set W[6:0] bits according to WindowValue value */
 179:../src/stm32f30x_wwdg.c ****   tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 135              		.loc 1 179 0
 136 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 137 007e 03F07F02 		and	r2, r3, #127
 138 0082 FB68     		ldr	r3, [r7, #12]
 139 0084 1343     		orrs	r3, r3, r2
 140 0086 FB60     		str	r3, [r7, #12]
 180:../src/stm32f30x_wwdg.c **** 
 181:../src/stm32f30x_wwdg.c ****   /* Store the new value */
 182:../src/stm32f30x_wwdg.c ****   WWDG->CFR = tmpreg;
 141              		.loc 1 182 0
 142 0088 4FF43053 		mov	r3, #11264
 143 008c C4F20003 		movt	r3, 16384
 144 0090 FA68     		ldr	r2, [r7, #12]
 145 0092 5A60     		str	r2, [r3, #4]
 183:../src/stm32f30x_wwdg.c **** }
 146              		.loc 1 183 0
 147 0094 07F11407 		add	r7, r7, #20
 148 0098 BD46     		mov	sp, r7
 149 009a 80BC     		pop	{r7}
 150 009c 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE113:
 154 009e 00BF     		.align	2
 155              		.global	WWDG_EnableIT
 156              		.thumb
 157              		.thumb_func
 159              	WWDG_EnableIT:
 160              	.LFB114:
 184:../src/stm32f30x_wwdg.c **** 
 185:../src/stm32f30x_wwdg.c **** /**
 186:../src/stm32f30x_wwdg.c ****   * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
 187:../src/stm32f30x_wwdg.c ****   * @note   Once enabled this interrupt cannot be disabled except by a system reset. 
 188:../src/stm32f30x_wwdg.c ****   * @param  None
 189:../src/stm32f30x_wwdg.c ****   * @retval None
 190:../src/stm32f30x_wwdg.c ****   */
 191:../src/stm32f30x_wwdg.c **** void WWDG_EnableIT(void)
 192:../src/stm32f30x_wwdg.c **** {
 161              		.loc 1 192 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 1, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 166 00a0 80B4     		push	{r7}
 167              	.LCFI8:
 168              		.cfi_def_cfa_offset 4
 169              		.cfi_offset 7, -4
 170 00a2 00AF     		add	r7, sp, #0
 171              	.LCFI9:
 172              		.cfi_def_cfa_register 7
 193:../src/stm32f30x_wwdg.c ****   WWDG->CFR |= WWDG_CFR_EWI;
 173              		.loc 1 193 0
 174 00a4 4FF43053 		mov	r3, #11264
 175 00a8 C4F20003 		movt	r3, 16384
 176 00ac 4FF43052 		mov	r2, #11264
 177 00b0 C4F20002 		movt	r2, 16384
 178 00b4 5268     		ldr	r2, [r2, #4]
 179 00b6 42F40072 		orr	r2, r2, #512
 180 00ba 5A60     		str	r2, [r3, #4]
 194:../src/stm32f30x_wwdg.c **** }
 181              		.loc 1 194 0
 182 00bc BD46     		mov	sp, r7
 183 00be 80BC     		pop	{r7}
 184 00c0 7047     		bx	lr
 185              		.cfi_endproc
 186              	.LFE114:
 188 00c2 00BF     		.align	2
 189              		.global	WWDG_SetCounter
 190              		.thumb
 191              		.thumb_func
 193              	WWDG_SetCounter:
 194              	.LFB115:
 195:../src/stm32f30x_wwdg.c **** 
 196:../src/stm32f30x_wwdg.c **** /**
 197:../src/stm32f30x_wwdg.c ****   * @brief  Sets the WWDG counter value.
 198:../src/stm32f30x_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 199:../src/stm32f30x_wwdg.c ****   *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
 200:../src/stm32f30x_wwdg.c ****   *   an immediate reset).  
 201:../src/stm32f30x_wwdg.c ****   * @retval None
 202:../src/stm32f30x_wwdg.c ****   */
 203:../src/stm32f30x_wwdg.c **** void WWDG_SetCounter(uint8_t Counter)
 204:../src/stm32f30x_wwdg.c **** {
 195              		.loc 1 204 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 8
 198              		@ frame_needed = 1, uses_anonymous_args = 0
 199              		@ link register save eliminated.
 200 00c4 80B4     		push	{r7}
 201              	.LCFI10:
 202              		.cfi_def_cfa_offset 4
 203              		.cfi_offset 7, -4
 204 00c6 83B0     		sub	sp, sp, #12
 205              	.LCFI11:
 206              		.cfi_def_cfa_offset 16
 207 00c8 00AF     		add	r7, sp, #0
 208              	.LCFI12:
 209              		.cfi_def_cfa_register 7
 210 00ca 0346     		mov	r3, r0
 211 00cc FB71     		strb	r3, [r7, #7]
 205:../src/stm32f30x_wwdg.c ****   /* Check the parameters */
 206:../src/stm32f30x_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 207:../src/stm32f30x_wwdg.c ****   /* Write to T[6:0] bits to configure the counter value, no need to do
 208:../src/stm32f30x_wwdg.c ****      a read-modify-write; writing a 0 to WDGA bit does nothing */
 209:../src/stm32f30x_wwdg.c ****   WWDG->CR = Counter & BIT_MASK;
 212              		.loc 1 209 0
 213 00ce 4FF43053 		mov	r3, #11264
 214 00d2 C4F20003 		movt	r3, 16384
 215 00d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 216 00d8 02F07F02 		and	r2, r2, #127
 217 00dc 1A60     		str	r2, [r3, #0]
 210:../src/stm32f30x_wwdg.c **** }
 218              		.loc 1 210 0
 219 00de 07F10C07 		add	r7, r7, #12
 220 00e2 BD46     		mov	sp, r7
 221 00e4 80BC     		pop	{r7}
 222 00e6 7047     		bx	lr
 223              		.cfi_endproc
 224              	.LFE115:
 226              		.align	2
 227              		.global	WWDG_Enable
 228              		.thumb
 229              		.thumb_func
 231              	WWDG_Enable:
 232              	.LFB116:
 211:../src/stm32f30x_wwdg.c **** 
 212:../src/stm32f30x_wwdg.c **** /**
 213:../src/stm32f30x_wwdg.c ****   * @}
 214:../src/stm32f30x_wwdg.c ****   */
 215:../src/stm32f30x_wwdg.c **** 
 216:../src/stm32f30x_wwdg.c **** /** @defgroup WWDG_Group2 WWDG activation functions
 217:../src/stm32f30x_wwdg.c ****  *  @brief   WWDG activation functions 
 218:../src/stm32f30x_wwdg.c ****  *
 219:../src/stm32f30x_wwdg.c **** @verbatim   
 220:../src/stm32f30x_wwdg.c ****   ==============================================================================
 221:../src/stm32f30x_wwdg.c ****                     ##### WWDG activation function #####
 222:../src/stm32f30x_wwdg.c ****   ==============================================================================  
 223:../src/stm32f30x_wwdg.c **** 
 224:../src/stm32f30x_wwdg.c **** @endverbatim
 225:../src/stm32f30x_wwdg.c ****   * @{
 226:../src/stm32f30x_wwdg.c ****   */
 227:../src/stm32f30x_wwdg.c **** 
 228:../src/stm32f30x_wwdg.c **** /**
 229:../src/stm32f30x_wwdg.c ****   * @brief  Enables WWDG and load the counter value.                  
 230:../src/stm32f30x_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 231:../src/stm32f30x_wwdg.c ****   *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
 232:../src/stm32f30x_wwdg.c ****   *   an immediate reset).
 233:../src/stm32f30x_wwdg.c ****   * @retval None
 234:../src/stm32f30x_wwdg.c ****   */
 235:../src/stm32f30x_wwdg.c **** void WWDG_Enable(uint8_t Counter)
 236:../src/stm32f30x_wwdg.c **** {
 233              		.loc 1 236 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 8
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238 00e8 80B4     		push	{r7}
 239              	.LCFI13:
 240              		.cfi_def_cfa_offset 4
 241              		.cfi_offset 7, -4
 242 00ea 83B0     		sub	sp, sp, #12
 243              	.LCFI14:
 244              		.cfi_def_cfa_offset 16
 245 00ec 00AF     		add	r7, sp, #0
 246              	.LCFI15:
 247              		.cfi_def_cfa_register 7
 248 00ee 0346     		mov	r3, r0
 249 00f0 FB71     		strb	r3, [r7, #7]
 237:../src/stm32f30x_wwdg.c ****   /* Check the parameters */
 238:../src/stm32f30x_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 239:../src/stm32f30x_wwdg.c ****   WWDG->CR = WWDG_CR_WDGA | Counter;
 250              		.loc 1 239 0
 251 00f2 4FF43053 		mov	r3, #11264
 252 00f6 C4F20003 		movt	r3, 16384
 253 00fa FA79     		ldrb	r2, [r7, #7]
 254 00fc 62F07F02 		orn	r2, r2, #127
 255 0100 D2B2     		uxtb	r2, r2
 256 0102 1A60     		str	r2, [r3, #0]
 240:../src/stm32f30x_wwdg.c **** }
 257              		.loc 1 240 0
 258 0104 07F10C07 		add	r7, r7, #12
 259 0108 BD46     		mov	sp, r7
 260 010a 80BC     		pop	{r7}
 261 010c 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE116:
 265 010e 00BF     		.align	2
 266              		.global	WWDG_GetFlagStatus
 267              		.thumb
 268              		.thumb_func
 270              	WWDG_GetFlagStatus:
 271              	.LFB117:
 241:../src/stm32f30x_wwdg.c **** 
 242:../src/stm32f30x_wwdg.c **** /**
 243:../src/stm32f30x_wwdg.c ****   * @}
 244:../src/stm32f30x_wwdg.c ****   */
 245:../src/stm32f30x_wwdg.c **** 
 246:../src/stm32f30x_wwdg.c **** /** @defgroup WWDG_Group3 Interrupts and flags management functions
 247:../src/stm32f30x_wwdg.c ****  *  @brief   Interrupts and flags management functions 
 248:../src/stm32f30x_wwdg.c ****  *
 249:../src/stm32f30x_wwdg.c **** @verbatim   
 250:../src/stm32f30x_wwdg.c ****   ==============================================================================
 251:../src/stm32f30x_wwdg.c ****               ##### Interrupts and flags management functions #####
 252:../src/stm32f30x_wwdg.c ****   ==============================================================================  
 253:../src/stm32f30x_wwdg.c **** 
 254:../src/stm32f30x_wwdg.c **** @endverbatim
 255:../src/stm32f30x_wwdg.c ****   * @{
 256:../src/stm32f30x_wwdg.c ****   */
 257:../src/stm32f30x_wwdg.c **** 
 258:../src/stm32f30x_wwdg.c **** /**
 259:../src/stm32f30x_wwdg.c ****   * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
 260:../src/stm32f30x_wwdg.c ****   * @param  None
 261:../src/stm32f30x_wwdg.c ****   * @retval The new state of the Early Wakeup interrupt flag (SET or RESET).
 262:../src/stm32f30x_wwdg.c ****   */
 263:../src/stm32f30x_wwdg.c **** FlagStatus WWDG_GetFlagStatus(void)
 264:../src/stm32f30x_wwdg.c **** {
 272              		.loc 1 264 0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 8
 275              		@ frame_needed = 1, uses_anonymous_args = 0
 276              		@ link register save eliminated.
 277 0110 80B4     		push	{r7}
 278              	.LCFI16:
 279              		.cfi_def_cfa_offset 4
 280              		.cfi_offset 7, -4
 281 0112 83B0     		sub	sp, sp, #12
 282              	.LCFI17:
 283              		.cfi_def_cfa_offset 16
 284 0114 00AF     		add	r7, sp, #0
 285              	.LCFI18:
 286              		.cfi_def_cfa_register 7
 265:../src/stm32f30x_wwdg.c ****   FlagStatus bitstatus = RESET;
 287              		.loc 1 265 0
 288 0116 4FF00003 		mov	r3, #0
 289 011a FB71     		strb	r3, [r7, #7]
 266:../src/stm32f30x_wwdg.c ****     
 267:../src/stm32f30x_wwdg.c ****   if ((WWDG->SR) != (uint32_t)RESET)
 290              		.loc 1 267 0
 291 011c 4FF43053 		mov	r3, #11264
 292 0120 C4F20003 		movt	r3, 16384
 293 0124 9B68     		ldr	r3, [r3, #8]
 294 0126 002B     		cmp	r3, #0
 295 0128 03D0     		beq	.L8
 268:../src/stm32f30x_wwdg.c ****   {
 269:../src/stm32f30x_wwdg.c ****     bitstatus = SET;
 296              		.loc 1 269 0
 297 012a 4FF00103 		mov	r3, #1
 298 012e FB71     		strb	r3, [r7, #7]
 299 0130 02E0     		b	.L9
 300              	.L8:
 270:../src/stm32f30x_wwdg.c ****   }
 271:../src/stm32f30x_wwdg.c ****   else
 272:../src/stm32f30x_wwdg.c ****   {
 273:../src/stm32f30x_wwdg.c ****     bitstatus = RESET;
 301              		.loc 1 273 0
 302 0132 4FF00003 		mov	r3, #0
 303 0136 FB71     		strb	r3, [r7, #7]
 304              	.L9:
 274:../src/stm32f30x_wwdg.c ****   }
 275:../src/stm32f30x_wwdg.c ****   return bitstatus;
 305              		.loc 1 275 0
 306 0138 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 276:../src/stm32f30x_wwdg.c **** }
 307              		.loc 1 276 0
 308 013a 1846     		mov	r0, r3
 309 013c 07F10C07 		add	r7, r7, #12
 310 0140 BD46     		mov	sp, r7
 311 0142 80BC     		pop	{r7}
 312 0144 7047     		bx	lr
 313              		.cfi_endproc
 314              	.LFE117:
 316 0146 00BF     		.align	2
 317              		.global	WWDG_ClearFlag
 318              		.thumb
 319              		.thumb_func
 321              	WWDG_ClearFlag:
 322              	.LFB118:
 277:../src/stm32f30x_wwdg.c **** 
 278:../src/stm32f30x_wwdg.c **** /**
 279:../src/stm32f30x_wwdg.c ****   * @brief  Clears Early Wakeup interrupt flag.
 280:../src/stm32f30x_wwdg.c ****   * @param  None
 281:../src/stm32f30x_wwdg.c ****   * @retval None
 282:../src/stm32f30x_wwdg.c ****   */
 283:../src/stm32f30x_wwdg.c **** void WWDG_ClearFlag(void)
 284:../src/stm32f30x_wwdg.c **** {
 323              		.loc 1 284 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 1, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328 0148 80B4     		push	{r7}
 329              	.LCFI19:
 330              		.cfi_def_cfa_offset 4
 331              		.cfi_offset 7, -4
 332 014a 00AF     		add	r7, sp, #0
 333              	.LCFI20:
 334              		.cfi_def_cfa_register 7
 285:../src/stm32f30x_wwdg.c ****   WWDG->SR = (uint32_t)RESET;
 335              		.loc 1 285 0
 336 014c 4FF43053 		mov	r3, #11264
 337 0150 C4F20003 		movt	r3, 16384
 338 0154 4FF00002 		mov	r2, #0
 339 0158 9A60     		str	r2, [r3, #8]
 286:../src/stm32f30x_wwdg.c **** }
 340              		.loc 1 286 0
 341 015a BD46     		mov	sp, r7
 342 015c 80BC     		pop	{r7}
 343 015e 7047     		bx	lr
 344              		.cfi_endproc
 345              	.LFE118:
 347              	.Letext0:
 348              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 349              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 350              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f30x_wwdg.c
     /tmp/cc8U9I2h.s:19     .text:00000000 $t
     /tmp/cc8U9I2h.s:24     .text:00000000 WWDG_DeInit
     /tmp/cc8U9I2h.s:57     .text:00000020 WWDG_SetPrescaler
     /tmp/cc8U9I2h.s:107    .text:0000005c WWDG_SetWindowValue
     /tmp/cc8U9I2h.s:159    .text:000000a0 WWDG_EnableIT
     /tmp/cc8U9I2h.s:193    .text:000000c4 WWDG_SetCounter
     /tmp/cc8U9I2h.s:231    .text:000000e8 WWDG_Enable
     /tmp/cc8U9I2h.s:270    .text:00000110 WWDG_GetFlagStatus
     /tmp/cc8U9I2h.s:321    .text:00000148 WWDG_ClearFlag
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.323dce8664331a0daf4a2675e107c70c
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.cf7c793e178943e1bbf613f1b21cd51a
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
