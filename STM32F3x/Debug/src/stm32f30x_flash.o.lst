   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f30x_flash.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	2
  21              		.global	FLASH_SetLatency
  22              		.thumb
  23              		.thumb_func
  25              	FLASH_SetLatency:
  26              	.LFB111:
  27              		.file 1 "../src/stm32f30x_flash.c"
   1:../src/stm32f30x_flash.c **** /**
   2:../src/stm32f30x_flash.c ****   ******************************************************************************
   3:../src/stm32f30x_flash.c ****   * @file    stm32f30x_flash.c
   4:../src/stm32f30x_flash.c ****   * @author  MCD Application Team
   5:../src/stm32f30x_flash.c ****   * @version V1.0.1
   6:../src/stm32f30x_flash.c ****   * @date    23-October-2012
   7:../src/stm32f30x_flash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../src/stm32f30x_flash.c ****   *          functionalities of the FLASH peripheral:
   9:../src/stm32f30x_flash.c ****   *            + FLASH Interface configuration
  10:../src/stm32f30x_flash.c ****   *            + FLASH Memory Programming
  11:../src/stm32f30x_flash.c ****   *            + Option Bytes Programming
  12:../src/stm32f30x_flash.c ****   *            + Interrupts and flags management
  13:../src/stm32f30x_flash.c ****   *  
  14:../src/stm32f30x_flash.c ****   @verbatim
  15:../src/stm32f30x_flash.c ****   
  16:../src/stm32f30x_flash.c ****  ===============================================================================
  17:../src/stm32f30x_flash.c ****                       ##### How to use this driver #####
  18:../src/stm32f30x_flash.c ****  ===============================================================================
  19:../src/stm32f30x_flash.c ****     [..] This driver provides functions to configure and program the FLASH 
  20:../src/stm32f30x_flash.c ****          memory of all STM32F30x devices. These functions are split in 4 groups:
  21:../src/stm32f30x_flash.c ****          (#) FLASH Interface configuration functions: this group includes the
  22:../src/stm32f30x_flash.c ****              management of following features:
  23:../src/stm32f30x_flash.c ****              (++) Set the latency.
  24:../src/stm32f30x_flash.c ****              (++) Enable/Disable the Half Cycle Access.
  25:../src/stm32f30x_flash.c ****              (++) Enable/Disable the prefetch buffer.
  26:../src/stm32f30x_flash.c ****          (#) FLASH Memory Programming functions: this group includes all needed
  27:../src/stm32f30x_flash.c ****              functions to erase and program the main memory:
  28:../src/stm32f30x_flash.c ****              (++) Lock and Unlock the FLASH interface.
  29:../src/stm32f30x_flash.c ****              (++) Erase function: Erase page, erase all pages.
  30:../src/stm32f30x_flash.c ****              (++) Program functions: Half Word and Word write.
  31:../src/stm32f30x_flash.c ****          (#) FLASH Option Bytes Programming functions: this group includes all 
  32:../src/stm32f30x_flash.c ****              needed functions to manage the Option Bytes:
  33:../src/stm32f30x_flash.c ****              (++) Lock and Unlock the Flash Option bytes.
  34:../src/stm32f30x_flash.c ****              (++) Launch the Option Bytes loader
  35:../src/stm32f30x_flash.c ****              (++) Erase the Option Bytes
  36:../src/stm32f30x_flash.c ****              (++) Set/Reset the write protection
  37:../src/stm32f30x_flash.c ****              (++) Set the Read protection Level
  38:../src/stm32f30x_flash.c ****              (++) Program the user option Bytes
  39:../src/stm32f30x_flash.c ****              (++) Set/Reset the BOOT1 bit
  40:../src/stm32f30x_flash.c ****              (++) Enable/Disable the VDDA Analog Monitoring
  41:../src/stm32f30x_flash.c ****              (++) Enable/Disable the SRAM parity
  42:../src/stm32f30x_flash.c ****              (++) Get the user option bytes
  43:../src/stm32f30x_flash.c ****              (++) Get the Write protection
  44:../src/stm32f30x_flash.c ****              (++) Get the read protection status
  45:../src/stm32f30x_flash.c ****          (#) FLASH Interrupts and flags management functions: this group includes 
  46:../src/stm32f30x_flash.c ****              all needed functions to:
  47:../src/stm32f30x_flash.c ****              (++) Enable/Disable the FLASH interrupt sources.
  48:../src/stm32f30x_flash.c ****              (++) Get flags status.
  49:../src/stm32f30x_flash.c ****              (++) Clear flags.
  50:../src/stm32f30x_flash.c ****              (++) Get FLASH operation status.
  51:../src/stm32f30x_flash.c ****              (++) Wait for last FLASH operation.
  52:../src/stm32f30x_flash.c ****  
  53:../src/stm32f30x_flash.c ****   @endverbatim
  54:../src/stm32f30x_flash.c ****                       
  55:../src/stm32f30x_flash.c ****   ******************************************************************************
  56:../src/stm32f30x_flash.c ****   * @attention
  57:../src/stm32f30x_flash.c ****   *
  58:../src/stm32f30x_flash.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  59:../src/stm32f30x_flash.c ****   *
  60:../src/stm32f30x_flash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  61:../src/stm32f30x_flash.c ****   * You may not use this file except in compliance with the License.
  62:../src/stm32f30x_flash.c ****   * You may obtain a copy of the License at:
  63:../src/stm32f30x_flash.c ****   *
  64:../src/stm32f30x_flash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  65:../src/stm32f30x_flash.c ****   *
  66:../src/stm32f30x_flash.c ****   * Unless required by applicable law or agreed to in writing, software 
  67:../src/stm32f30x_flash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  68:../src/stm32f30x_flash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  69:../src/stm32f30x_flash.c ****   * See the License for the specific language governing permissions and
  70:../src/stm32f30x_flash.c ****   * limitations under the License.
  71:../src/stm32f30x_flash.c ****   *
  72:../src/stm32f30x_flash.c ****   ******************************************************************************
  73:../src/stm32f30x_flash.c ****   */
  74:../src/stm32f30x_flash.c **** 
  75:../src/stm32f30x_flash.c **** /* Includes ------------------------------------------------------------------*/
  76:../src/stm32f30x_flash.c **** #include "stm32f30x_flash.h"
  77:../src/stm32f30x_flash.c **** 
  78:../src/stm32f30x_flash.c **** /** @addtogroup STM32F30x_StdPeriph_Driver
  79:../src/stm32f30x_flash.c ****   * @{
  80:../src/stm32f30x_flash.c ****   */
  81:../src/stm32f30x_flash.c **** 
  82:../src/stm32f30x_flash.c **** /** @defgroup FLASH 
  83:../src/stm32f30x_flash.c ****   * @brief FLASH driver modules
  84:../src/stm32f30x_flash.c ****   * @{
  85:../src/stm32f30x_flash.c ****   */ 
  86:../src/stm32f30x_flash.c **** 
  87:../src/stm32f30x_flash.c **** /* Private typedef -----------------------------------------------------------*/
  88:../src/stm32f30x_flash.c **** /* Private define ------------------------------------------------------------*/
  89:../src/stm32f30x_flash.c **** 
  90:../src/stm32f30x_flash.c **** /* FLASH Mask */
  91:../src/stm32f30x_flash.c **** #define RDPRT_MASK                 ((uint32_t)0x00000002)
  92:../src/stm32f30x_flash.c **** #define WRP01_MASK                 ((uint32_t)0x0000FFFF)
  93:../src/stm32f30x_flash.c **** #define WRP23_MASK                 ((uint32_t)0xFFFF0000)
  94:../src/stm32f30x_flash.c ****  
  95:../src/stm32f30x_flash.c **** /* Private macro -------------------------------------------------------------*/
  96:../src/stm32f30x_flash.c **** /* Private variables ---------------------------------------------------------*/
  97:../src/stm32f30x_flash.c **** /* Private function prototypes -----------------------------------------------*/
  98:../src/stm32f30x_flash.c **** /* Private functions ---------------------------------------------------------*/
  99:../src/stm32f30x_flash.c **** 
 100:../src/stm32f30x_flash.c **** /** @defgroup FLASH_Private_Functions
 101:../src/stm32f30x_flash.c ****   * @{
 102:../src/stm32f30x_flash.c ****   */ 
 103:../src/stm32f30x_flash.c **** 
 104:../src/stm32f30x_flash.c **** /** @defgroup FLASH_Group1 FLASH Interface configuration functions
 105:../src/stm32f30x_flash.c ****   *  @brief   FLASH Interface configuration functions 
 106:../src/stm32f30x_flash.c ****  *
 107:../src/stm32f30x_flash.c **** 
 108:../src/stm32f30x_flash.c **** @verbatim   
 109:../src/stm32f30x_flash.c ****  ===============================================================================
 110:../src/stm32f30x_flash.c ****             ##### FLASH Interface configuration functions #####
 111:../src/stm32f30x_flash.c ****  ===============================================================================
 112:../src/stm32f30x_flash.c ****     [..] This group includes the following functions:
 113:../src/stm32f30x_flash.c ****          (+) void FLASH_SetLatency(uint32_t FLASH_Latency); 
 114:../src/stm32f30x_flash.c ****          (+) void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess);     
 115:../src/stm32f30x_flash.c ****          (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState);
 116:../src/stm32f30x_flash.c ****     [..] The unlock sequence is not needed for these functions.
 117:../src/stm32f30x_flash.c ****  
 118:../src/stm32f30x_flash.c **** @endverbatim
 119:../src/stm32f30x_flash.c ****   * @{
 120:../src/stm32f30x_flash.c ****   */
 121:../src/stm32f30x_flash.c ****  
 122:../src/stm32f30x_flash.c **** /**
 123:../src/stm32f30x_flash.c ****   * @brief  Sets the code latency value.
 124:../src/stm32f30x_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 125:../src/stm32f30x_flash.c ****   *          This parameter can be one of the following values:
 126:../src/stm32f30x_flash.c ****   *            @arg FLASH_Latency_0: FLASH Zero Latency cycle
 127:../src/stm32f30x_flash.c ****   *            @arg FLASH_Latency_1: FLASH One Latency cycle
 128:../src/stm32f30x_flash.c ****   *            @arg FLASH_Latency_2: FLASH Two Latency cycles      
 129:../src/stm32f30x_flash.c ****   * @retval None
 130:../src/stm32f30x_flash.c ****   */
 131:../src/stm32f30x_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 132:../src/stm32f30x_flash.c **** {
  28              		.loc 1 132 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 85B0     		sub	sp, sp, #20
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 133:../src/stm32f30x_flash.c ****    uint32_t tmpreg = 0;
  44              		.loc 1 133 0
  45 0008 4FF00003 		mov	r3, #0
  46 000c FB60     		str	r3, [r7, #12]
 134:../src/stm32f30x_flash.c ****   
 135:../src/stm32f30x_flash.c ****   /* Check the parameters */
 136:../src/stm32f30x_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
 137:../src/stm32f30x_flash.c ****   
 138:../src/stm32f30x_flash.c ****   /* Read the ACR register */
 139:../src/stm32f30x_flash.c ****   tmpreg = FLASH->ACR;  
  47              		.loc 1 139 0
  48 000e 4FF40053 		mov	r3, #8192
  49 0012 C4F20203 		movt	r3, 16386
  50 0016 1B68     		ldr	r3, [r3, #0]
  51 0018 FB60     		str	r3, [r7, #12]
 140:../src/stm32f30x_flash.c ****   
 141:../src/stm32f30x_flash.c ****   /* Sets the Latency value */
 142:../src/stm32f30x_flash.c ****   tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
  52              		.loc 1 142 0
  53 001a FB68     		ldr	r3, [r7, #12]
  54 001c 23F00303 		bic	r3, r3, #3
  55 0020 FB60     		str	r3, [r7, #12]
 143:../src/stm32f30x_flash.c ****   tmpreg |= FLASH_Latency;
  56              		.loc 1 143 0
  57 0022 FA68     		ldr	r2, [r7, #12]
  58 0024 7B68     		ldr	r3, [r7, #4]
  59 0026 1343     		orrs	r3, r3, r2
  60 0028 FB60     		str	r3, [r7, #12]
 144:../src/stm32f30x_flash.c ****   
 145:../src/stm32f30x_flash.c ****   /* Write the ACR register */
 146:../src/stm32f30x_flash.c ****   FLASH->ACR = tmpreg;
  61              		.loc 1 146 0
  62 002a 4FF40053 		mov	r3, #8192
  63 002e C4F20203 		movt	r3, 16386
  64 0032 FA68     		ldr	r2, [r7, #12]
  65 0034 1A60     		str	r2, [r3, #0]
 147:../src/stm32f30x_flash.c **** }
  66              		.loc 1 147 0
  67 0036 07F11407 		add	r7, r7, #20
  68 003a BD46     		mov	sp, r7
  69 003c 80BC     		pop	{r7}
  70 003e 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE111:
  74              		.align	2
  75              		.global	FLASH_HalfCycleAccessCmd
  76              		.thumb
  77              		.thumb_func
  79              	FLASH_HalfCycleAccessCmd:
  80              	.LFB112:
 148:../src/stm32f30x_flash.c **** 
 149:../src/stm32f30x_flash.c **** /**
 150:../src/stm32f30x_flash.c ****   * @brief  Enables or disables the Half cycle flash access.
 151:../src/stm32f30x_flash.c ****   * @param  FLASH_HalfCycleAccess: specifies the FLASH Half cycle Access mode.
 152:../src/stm32f30x_flash.c ****   *          This parameter can be one of the following values:
 153:../src/stm32f30x_flash.c ****   *            @arg FLASH_HalfCycleAccess_Enable: FLASH Half Cycle Enable
 154:../src/stm32f30x_flash.c ****   *            @arg FLASH_HalfCycleAccess_Disable: FLASH Half Cycle Disable
 155:../src/stm32f30x_flash.c ****   * @retval None
 156:../src/stm32f30x_flash.c ****   */
 157:../src/stm32f30x_flash.c **** void FLASH_HalfCycleAccessCmd(FunctionalState NewState)
 158:../src/stm32f30x_flash.c **** {
  81              		.loc 1 158 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 8
  84              		@ frame_needed = 1, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86 0040 80B4     		push	{r7}
  87              	.LCFI3:
  88              		.cfi_def_cfa_offset 4
  89              		.cfi_offset 7, -4
  90 0042 83B0     		sub	sp, sp, #12
  91              	.LCFI4:
  92              		.cfi_def_cfa_offset 16
  93 0044 00AF     		add	r7, sp, #0
  94              	.LCFI5:
  95              		.cfi_def_cfa_register 7
  96 0046 0346     		mov	r3, r0
  97 0048 FB71     		strb	r3, [r7, #7]
 159:../src/stm32f30x_flash.c ****   /* Check the parameters */
 160:../src/stm32f30x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 161:../src/stm32f30x_flash.c ****    
 162:../src/stm32f30x_flash.c ****   if(NewState != DISABLE)
  98              		.loc 1 162 0
  99 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 100 004c 002B     		cmp	r3, #0
 101 004e 0CD0     		beq	.L3
 163:../src/stm32f30x_flash.c ****   {
 164:../src/stm32f30x_flash.c ****     FLASH->ACR |= FLASH_ACR_HLFCYA;
 102              		.loc 1 164 0
 103 0050 4FF40053 		mov	r3, #8192
 104 0054 C4F20203 		movt	r3, 16386
 105 0058 4FF40052 		mov	r2, #8192
 106 005c C4F20202 		movt	r2, 16386
 107 0060 1268     		ldr	r2, [r2, #0]
 108 0062 42F00802 		orr	r2, r2, #8
 109 0066 1A60     		str	r2, [r3, #0]
 110 0068 0BE0     		b	.L2
 111              	.L3:
 165:../src/stm32f30x_flash.c ****   }
 166:../src/stm32f30x_flash.c ****   else
 167:../src/stm32f30x_flash.c ****   {
 168:../src/stm32f30x_flash.c ****     FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_HLFCYA));
 112              		.loc 1 168 0
 113 006a 4FF40053 		mov	r3, #8192
 114 006e C4F20203 		movt	r3, 16386
 115 0072 4FF40052 		mov	r2, #8192
 116 0076 C4F20202 		movt	r2, 16386
 117 007a 1268     		ldr	r2, [r2, #0]
 118 007c 22F00802 		bic	r2, r2, #8
 119 0080 1A60     		str	r2, [r3, #0]
 120              	.L2:
 169:../src/stm32f30x_flash.c ****   }
 170:../src/stm32f30x_flash.c **** }
 121              		.loc 1 170 0
 122 0082 07F10C07 		add	r7, r7, #12
 123 0086 BD46     		mov	sp, r7
 124 0088 80BC     		pop	{r7}
 125 008a 7047     		bx	lr
 126              		.cfi_endproc
 127              	.LFE112:
 129              		.align	2
 130              		.global	FLASH_PrefetchBufferCmd
 131              		.thumb
 132              		.thumb_func
 134              	FLASH_PrefetchBufferCmd:
 135              	.LFB113:
 171:../src/stm32f30x_flash.c **** 
 172:../src/stm32f30x_flash.c **** /**
 173:../src/stm32f30x_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 174:../src/stm32f30x_flash.c ****   * @param  NewState: new state of the Prefetch Buffer.
 175:../src/stm32f30x_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 176:../src/stm32f30x_flash.c ****   * @retval None
 177:../src/stm32f30x_flash.c ****   */
 178:../src/stm32f30x_flash.c **** void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 179:../src/stm32f30x_flash.c **** {
 136              		.loc 1 179 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 8
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141 008c 80B4     		push	{r7}
 142              	.LCFI6:
 143              		.cfi_def_cfa_offset 4
 144              		.cfi_offset 7, -4
 145 008e 83B0     		sub	sp, sp, #12
 146              	.LCFI7:
 147              		.cfi_def_cfa_offset 16
 148 0090 00AF     		add	r7, sp, #0
 149              	.LCFI8:
 150              		.cfi_def_cfa_register 7
 151 0092 0346     		mov	r3, r0
 152 0094 FB71     		strb	r3, [r7, #7]
 180:../src/stm32f30x_flash.c ****   /* Check the parameters */
 181:../src/stm32f30x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 182:../src/stm32f30x_flash.c ****    
 183:../src/stm32f30x_flash.c ****   if(NewState != DISABLE)
 153              		.loc 1 183 0
 154 0096 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 155 0098 002B     		cmp	r3, #0
 156 009a 0CD0     		beq	.L6
 184:../src/stm32f30x_flash.c ****   {
 185:../src/stm32f30x_flash.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 157              		.loc 1 185 0
 158 009c 4FF40053 		mov	r3, #8192
 159 00a0 C4F20203 		movt	r3, 16386
 160 00a4 4FF40052 		mov	r2, #8192
 161 00a8 C4F20202 		movt	r2, 16386
 162 00ac 1268     		ldr	r2, [r2, #0]
 163 00ae 42F01002 		orr	r2, r2, #16
 164 00b2 1A60     		str	r2, [r3, #0]
 165 00b4 0BE0     		b	.L5
 166              	.L6:
 186:../src/stm32f30x_flash.c ****   }
 187:../src/stm32f30x_flash.c ****   else
 188:../src/stm32f30x_flash.c ****   {
 189:../src/stm32f30x_flash.c ****     FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
 167              		.loc 1 189 0
 168 00b6 4FF40053 		mov	r3, #8192
 169 00ba C4F20203 		movt	r3, 16386
 170 00be 4FF40052 		mov	r2, #8192
 171 00c2 C4F20202 		movt	r2, 16386
 172 00c6 1268     		ldr	r2, [r2, #0]
 173 00c8 22F01002 		bic	r2, r2, #16
 174 00cc 1A60     		str	r2, [r3, #0]
 175              	.L5:
 190:../src/stm32f30x_flash.c ****   }
 191:../src/stm32f30x_flash.c **** }
 176              		.loc 1 191 0
 177 00ce 07F10C07 		add	r7, r7, #12
 178 00d2 BD46     		mov	sp, r7
 179 00d4 80BC     		pop	{r7}
 180 00d6 7047     		bx	lr
 181              		.cfi_endproc
 182              	.LFE113:
 184              		.align	2
 185              		.global	FLASH_Unlock
 186              		.thumb
 187              		.thumb_func
 189              	FLASH_Unlock:
 190              	.LFB114:
 192:../src/stm32f30x_flash.c **** 
 193:../src/stm32f30x_flash.c **** /**
 194:../src/stm32f30x_flash.c ****   * @}
 195:../src/stm32f30x_flash.c ****   */
 196:../src/stm32f30x_flash.c **** 
 197:../src/stm32f30x_flash.c **** /** @defgroup FLASH_Group2 FLASH Memory Programming functions
 198:../src/stm32f30x_flash.c ****  *  @brief   FLASH Memory Programming functions
 199:../src/stm32f30x_flash.c ****  *
 200:../src/stm32f30x_flash.c **** @verbatim   
 201:../src/stm32f30x_flash.c ****  ===============================================================================
 202:../src/stm32f30x_flash.c ****               ##### FLASH Memory Programming functions #####
 203:../src/stm32f30x_flash.c ****  ===============================================================================   
 204:../src/stm32f30x_flash.c ****     [..] This group includes the following functions:
 205:../src/stm32f30x_flash.c ****          (+) void FLASH_Unlock(void);
 206:../src/stm32f30x_flash.c ****          (+) void FLASH_Lock(void);
 207:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_ErasePage(uint32_t Page_Address);
 208:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_EraseAllPages(void);
 209:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data);
 210:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data);
 211:../src/stm32f30x_flash.c ****     [..] Any operation of erase or program should follow these steps:
 212:../src/stm32f30x_flash.c ****          (#) Call the FLASH_Unlock() function to enable the FLASH control register 
 213:../src/stm32f30x_flash.c ****              program memory access.
 214:../src/stm32f30x_flash.c ****          (#) Call the desired function to erase page or program data.
 215:../src/stm32f30x_flash.c ****          (#) Call the FLASH_Lock() function to disable the FLASH control register 
 216:../src/stm32f30x_flash.c ****              access (recommended to protect the FLASH memory against possible 
 217:../src/stm32f30x_flash.c ****              unwanted operation).
 218:../src/stm32f30x_flash.c ****     
 219:../src/stm32f30x_flash.c **** @endverbatim
 220:../src/stm32f30x_flash.c ****   * @{
 221:../src/stm32f30x_flash.c ****   */
 222:../src/stm32f30x_flash.c **** 
 223:../src/stm32f30x_flash.c **** /**
 224:../src/stm32f30x_flash.c ****   * @brief  Unlocks the FLASH control register access
 225:../src/stm32f30x_flash.c ****   * @param  None
 226:../src/stm32f30x_flash.c ****   * @retval None
 227:../src/stm32f30x_flash.c ****   */
 228:../src/stm32f30x_flash.c **** void FLASH_Unlock(void)
 229:../src/stm32f30x_flash.c **** {
 191              		.loc 1 229 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 1, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196 00d8 80B4     		push	{r7}
 197              	.LCFI9:
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 7, -4
 200 00da 00AF     		add	r7, sp, #0
 201              	.LCFI10:
 202              		.cfi_def_cfa_register 7
 230:../src/stm32f30x_flash.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 203              		.loc 1 230 0
 204 00dc 4FF40053 		mov	r3, #8192
 205 00e0 C4F20203 		movt	r3, 16386
 206 00e4 1B69     		ldr	r3, [r3, #16]
 207 00e6 03F08003 		and	r3, r3, #128
 208 00ea 002B     		cmp	r3, #0
 209 00ec 11D0     		beq	.L8
 231:../src/stm32f30x_flash.c ****   {
 232:../src/stm32f30x_flash.c ****     /* Authorize the FLASH Registers access */
 233:../src/stm32f30x_flash.c ****     FLASH->KEYR = FLASH_KEY1;
 210              		.loc 1 233 0
 211 00ee 4FF40053 		mov	r3, #8192
 212 00f2 C4F20203 		movt	r3, 16386
 213 00f6 40F22312 		movw	r2, #291
 214 00fa C4F26752 		movt	r2, 17767
 215 00fe 5A60     		str	r2, [r3, #4]
 234:../src/stm32f30x_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 216              		.loc 1 234 0
 217 0100 4FF40053 		mov	r3, #8192
 218 0104 C4F20203 		movt	r3, 16386
 219 0108 48F6AB12 		movw	r2, #35243
 220 010c CCF6EF52 		movt	r2, 52719
 221 0110 5A60     		str	r2, [r3, #4]
 222              	.L8:
 235:../src/stm32f30x_flash.c ****   }  
 236:../src/stm32f30x_flash.c **** }
 223              		.loc 1 236 0
 224 0112 BD46     		mov	sp, r7
 225 0114 80BC     		pop	{r7}
 226 0116 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE114:
 230              		.align	2
 231              		.global	FLASH_Lock
 232              		.thumb
 233              		.thumb_func
 235              	FLASH_Lock:
 236              	.LFB115:
 237:../src/stm32f30x_flash.c **** 
 238:../src/stm32f30x_flash.c **** /**
 239:../src/stm32f30x_flash.c ****   * @brief  Locks the FLASH control register access
 240:../src/stm32f30x_flash.c ****   * @param  None
 241:../src/stm32f30x_flash.c ****   * @retval None
 242:../src/stm32f30x_flash.c ****   */
 243:../src/stm32f30x_flash.c **** void FLASH_Lock(void)
 244:../src/stm32f30x_flash.c **** {
 237              		.loc 1 244 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242 0118 80B4     		push	{r7}
 243              	.LCFI11:
 244              		.cfi_def_cfa_offset 4
 245              		.cfi_offset 7, -4
 246 011a 00AF     		add	r7, sp, #0
 247              	.LCFI12:
 248              		.cfi_def_cfa_register 7
 245:../src/stm32f30x_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 246:../src/stm32f30x_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 249              		.loc 1 246 0
 250 011c 4FF40053 		mov	r3, #8192
 251 0120 C4F20203 		movt	r3, 16386
 252 0124 4FF40052 		mov	r2, #8192
 253 0128 C4F20202 		movt	r2, 16386
 254 012c 1269     		ldr	r2, [r2, #16]
 255 012e 42F08002 		orr	r2, r2, #128
 256 0132 1A61     		str	r2, [r3, #16]
 247:../src/stm32f30x_flash.c **** }
 257              		.loc 1 247 0
 258 0134 BD46     		mov	sp, r7
 259 0136 80BC     		pop	{r7}
 260 0138 7047     		bx	lr
 261              		.cfi_endproc
 262              	.LFE115:
 264 013a 00BF     		.align	2
 265              		.global	FLASH_ErasePage
 266              		.thumb
 267              		.thumb_func
 269              	FLASH_ErasePage:
 270              	.LFB116:
 248:../src/stm32f30x_flash.c **** 
 249:../src/stm32f30x_flash.c **** /**
 250:../src/stm32f30x_flash.c ****   * @brief  Erases a specified page in program memory.
 251:../src/stm32f30x_flash.c ****   * @note   To correctly run this function, the FLASH_Unlock() function
 252:../src/stm32f30x_flash.c ****   *         must be called before.
 253:../src/stm32f30x_flash.c ****   * @note   Call the FLASH_Lock() to disable the flash memory access 
 254:../src/stm32f30x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)  
 255:../src/stm32f30x_flash.c ****   * @param  Page_Address: The page address in program memory to be erased.
 256:../src/stm32f30x_flash.c ****   * @note   A Page is erased in the Program memory only if the address to load 
 257:../src/stm32f30x_flash.c ****   *         is the start address of a page (multiple of 1024 bytes).  
 258:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: 
 259:../src/stm32f30x_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 260:../src/stm32f30x_flash.c ****   */
 261:../src/stm32f30x_flash.c **** FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
 262:../src/stm32f30x_flash.c **** {
 271              		.loc 1 262 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 16
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275 013c 80B5     		push	{r7, lr}
 276              	.LCFI13:
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 7, -8
 279              		.cfi_offset 14, -4
 280 013e 84B0     		sub	sp, sp, #16
 281              	.LCFI14:
 282              		.cfi_def_cfa_offset 24
 283 0140 00AF     		add	r7, sp, #0
 284              	.LCFI15:
 285              		.cfi_def_cfa_register 7
 286 0142 7860     		str	r0, [r7, #4]
 263:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 287              		.loc 1 263 0
 288 0144 4FF00403 		mov	r3, #4
 289 0148 FB73     		strb	r3, [r7, #15]
 264:../src/stm32f30x_flash.c **** 
 265:../src/stm32f30x_flash.c ****   /* Check the parameters */
 266:../src/stm32f30x_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 267:../src/stm32f30x_flash.c ****  
 268:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 269:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 290              		.loc 1 269 0
 291 014a 4FF43020 		mov	r0, #720896
 292 014e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 293 0152 0346     		mov	r3, r0
 294 0154 FB73     		strb	r3, [r7, #15]
 270:../src/stm32f30x_flash.c ****   
 271:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 295              		.loc 1 271 0
 296 0156 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 297 0158 042B     		cmp	r3, #4
 298 015a 2FD1     		bne	.L12
 272:../src/stm32f30x_flash.c ****   { 
 273:../src/stm32f30x_flash.c ****     /* If the previous operation is completed, proceed to erase the page */
 274:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_PER;
 299              		.loc 1 274 0
 300 015c 4FF40053 		mov	r3, #8192
 301 0160 C4F20203 		movt	r3, 16386
 302 0164 4FF40052 		mov	r2, #8192
 303 0168 C4F20202 		movt	r2, 16386
 304 016c 1269     		ldr	r2, [r2, #16]
 305 016e 42F00202 		orr	r2, r2, #2
 306 0172 1A61     		str	r2, [r3, #16]
 275:../src/stm32f30x_flash.c ****     FLASH->AR  = Page_Address; 
 307              		.loc 1 275 0
 308 0174 4FF40053 		mov	r3, #8192
 309 0178 C4F20203 		movt	r3, 16386
 310 017c 7A68     		ldr	r2, [r7, #4]
 311 017e 5A61     		str	r2, [r3, #20]
 276:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 312              		.loc 1 276 0
 313 0180 4FF40053 		mov	r3, #8192
 314 0184 C4F20203 		movt	r3, 16386
 315 0188 4FF40052 		mov	r2, #8192
 316 018c C4F20202 		movt	r2, 16386
 317 0190 1269     		ldr	r2, [r2, #16]
 318 0192 42F04002 		orr	r2, r2, #64
 319 0196 1A61     		str	r2, [r3, #16]
 277:../src/stm32f30x_flash.c ****     
 278:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 279:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 320              		.loc 1 279 0
 321 0198 4FF43020 		mov	r0, #720896
 322 019c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 323 01a0 0346     		mov	r3, r0
 324 01a2 FB73     		strb	r3, [r7, #15]
 280:../src/stm32f30x_flash.c ****     
 281:../src/stm32f30x_flash.c ****     /* Disable the PER Bit */
 282:../src/stm32f30x_flash.c ****     FLASH->CR &= ~FLASH_CR_PER;
 325              		.loc 1 282 0
 326 01a4 4FF40053 		mov	r3, #8192
 327 01a8 C4F20203 		movt	r3, 16386
 328 01ac 4FF40052 		mov	r2, #8192
 329 01b0 C4F20202 		movt	r2, 16386
 330 01b4 1269     		ldr	r2, [r2, #16]
 331 01b6 22F00202 		bic	r2, r2, #2
 332 01ba 1A61     		str	r2, [r3, #16]
 333              	.L12:
 283:../src/stm32f30x_flash.c ****   }
 284:../src/stm32f30x_flash.c ****     
 285:../src/stm32f30x_flash.c ****   /* Return the Erase Status */
 286:../src/stm32f30x_flash.c ****   return status;
 334              		.loc 1 286 0
 335 01bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 287:../src/stm32f30x_flash.c **** }
 336              		.loc 1 287 0
 337 01be 1846     		mov	r0, r3
 338 01c0 07F11007 		add	r7, r7, #16
 339 01c4 BD46     		mov	sp, r7
 340 01c6 80BD     		pop	{r7, pc}
 341              		.cfi_endproc
 342              	.LFE116:
 344              		.align	2
 345              		.global	FLASH_EraseAllPages
 346              		.thumb
 347              		.thumb_func
 349              	FLASH_EraseAllPages:
 350              	.LFB117:
 288:../src/stm32f30x_flash.c **** 
 289:../src/stm32f30x_flash.c **** /**
 290:../src/stm32f30x_flash.c ****   * @brief  Erases all FLASH pages.
 291:../src/stm32f30x_flash.c ****   * @note   To correctly run this function, the FLASH_Unlock() function
 292:../src/stm32f30x_flash.c ****   *         must be called before.
 293:../src/stm32f30x_flash.c ****   *         all the FLASH_Lock() to disable the flash memory access 
 294:../src/stm32f30x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)
 295:../src/stm32f30x_flash.c ****   * @param  None
 296:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 297:../src/stm32f30x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 298:../src/stm32f30x_flash.c ****   */
 299:../src/stm32f30x_flash.c **** FLASH_Status FLASH_EraseAllPages(void)
 300:../src/stm32f30x_flash.c **** {
 351              		.loc 1 300 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 8
 354              		@ frame_needed = 1, uses_anonymous_args = 0
 355 01c8 80B5     		push	{r7, lr}
 356              	.LCFI16:
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 7, -8
 359              		.cfi_offset 14, -4
 360 01ca 82B0     		sub	sp, sp, #8
 361              	.LCFI17:
 362              		.cfi_def_cfa_offset 16
 363 01cc 00AF     		add	r7, sp, #0
 364              	.LCFI18:
 365              		.cfi_def_cfa_register 7
 301:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 366              		.loc 1 301 0
 367 01ce 4FF00403 		mov	r3, #4
 368 01d2 FB71     		strb	r3, [r7, #7]
 302:../src/stm32f30x_flash.c **** 
 303:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 304:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 369              		.loc 1 304 0
 370 01d4 4FF43020 		mov	r0, #720896
 371 01d8 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 372 01dc 0346     		mov	r3, r0
 373 01de FB71     		strb	r3, [r7, #7]
 305:../src/stm32f30x_flash.c ****   
 306:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 374              		.loc 1 306 0
 375 01e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 376 01e2 042B     		cmp	r3, #4
 377 01e4 29D1     		bne	.L15
 307:../src/stm32f30x_flash.c ****   {
 308:../src/stm32f30x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 309:../src/stm32f30x_flash.c ****      FLASH->CR |= FLASH_CR_MER;
 378              		.loc 1 309 0
 379 01e6 4FF40053 		mov	r3, #8192
 380 01ea C4F20203 		movt	r3, 16386
 381 01ee 4FF40052 		mov	r2, #8192
 382 01f2 C4F20202 		movt	r2, 16386
 383 01f6 1269     		ldr	r2, [r2, #16]
 384 01f8 42F00402 		orr	r2, r2, #4
 385 01fc 1A61     		str	r2, [r3, #16]
 310:../src/stm32f30x_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 386              		.loc 1 310 0
 387 01fe 4FF40053 		mov	r3, #8192
 388 0202 C4F20203 		movt	r3, 16386
 389 0206 4FF40052 		mov	r2, #8192
 390 020a C4F20202 		movt	r2, 16386
 391 020e 1269     		ldr	r2, [r2, #16]
 392 0210 42F04002 		orr	r2, r2, #64
 393 0214 1A61     		str	r2, [r3, #16]
 311:../src/stm32f30x_flash.c ****     
 312:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 313:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 394              		.loc 1 313 0
 395 0216 4FF43020 		mov	r0, #720896
 396 021a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 397 021e 0346     		mov	r3, r0
 398 0220 FB71     		strb	r3, [r7, #7]
 314:../src/stm32f30x_flash.c **** 
 315:../src/stm32f30x_flash.c ****     /* Disable the MER Bit */
 316:../src/stm32f30x_flash.c ****     FLASH->CR &= ~FLASH_CR_MER;
 399              		.loc 1 316 0
 400 0222 4FF40053 		mov	r3, #8192
 401 0226 C4F20203 		movt	r3, 16386
 402 022a 4FF40052 		mov	r2, #8192
 403 022e C4F20202 		movt	r2, 16386
 404 0232 1269     		ldr	r2, [r2, #16]
 405 0234 22F00402 		bic	r2, r2, #4
 406 0238 1A61     		str	r2, [r3, #16]
 407              	.L15:
 317:../src/stm32f30x_flash.c ****   }
 318:../src/stm32f30x_flash.c **** 
 319:../src/stm32f30x_flash.c ****   /* Return the Erase Status */
 320:../src/stm32f30x_flash.c ****   return status;
 408              		.loc 1 320 0
 409 023a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 321:../src/stm32f30x_flash.c **** }
 410              		.loc 1 321 0
 411 023c 1846     		mov	r0, r3
 412 023e 07F10807 		add	r7, r7, #8
 413 0242 BD46     		mov	sp, r7
 414 0244 80BD     		pop	{r7, pc}
 415              		.cfi_endproc
 416              	.LFE117:
 418 0246 00BF     		.align	2
 419              		.global	FLASH_ProgramWord
 420              		.thumb
 421              		.thumb_func
 423              	FLASH_ProgramWord:
 424              	.LFB118:
 322:../src/stm32f30x_flash.c **** 
 323:../src/stm32f30x_flash.c **** /**
 324:../src/stm32f30x_flash.c ****   * @brief  Programs a word at a specified address.
 325:../src/stm32f30x_flash.c ****   * @note   To correctly run this function, the FLASH_Unlock() function
 326:../src/stm32f30x_flash.c ****   *         must be called before.
 327:../src/stm32f30x_flash.c ****   *         Call the FLASH_Lock() to disable the flash memory access 
 328:../src/stm32f30x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)  
 329:../src/stm32f30x_flash.c ****   * @param  Address: specifies the address to be programmed.
 330:../src/stm32f30x_flash.c ****   * @param  Data: specifies the data to be programmed.
 331:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 332:../src/stm32f30x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 333:../src/stm32f30x_flash.c ****   */
 334:../src/stm32f30x_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 335:../src/stm32f30x_flash.c **** {
 425              		.loc 1 335 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 16
 428              		@ frame_needed = 1, uses_anonymous_args = 0
 429 0248 80B5     		push	{r7, lr}
 430              	.LCFI19:
 431              		.cfi_def_cfa_offset 8
 432              		.cfi_offset 7, -8
 433              		.cfi_offset 14, -4
 434 024a 84B0     		sub	sp, sp, #16
 435              	.LCFI20:
 436              		.cfi_def_cfa_offset 24
 437 024c 00AF     		add	r7, sp, #0
 438              	.LCFI21:
 439              		.cfi_def_cfa_register 7
 440 024e 7860     		str	r0, [r7, #4]
 441 0250 3960     		str	r1, [r7, #0]
 336:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 442              		.loc 1 336 0
 443 0252 4FF00403 		mov	r3, #4
 444 0256 FB73     		strb	r3, [r7, #15]
 337:../src/stm32f30x_flash.c ****   __IO uint32_t tmp = 0;
 445              		.loc 1 337 0
 446 0258 4FF00003 		mov	r3, #0
 447 025c BB60     		str	r3, [r7, #8]
 338:../src/stm32f30x_flash.c **** 
 339:../src/stm32f30x_flash.c ****   /* Check the parameters */
 340:../src/stm32f30x_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 341:../src/stm32f30x_flash.c **** 
 342:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 343:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 448              		.loc 1 343 0
 449 025e 4FF43020 		mov	r0, #720896
 450 0262 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 451 0266 0346     		mov	r3, r0
 452 0268 FB73     		strb	r3, [r7, #15]
 344:../src/stm32f30x_flash.c ****   
 345:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 453              		.loc 1 345 0
 454 026a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 455 026c 042B     		cmp	r3, #4
 456 026e 41D1     		bne	.L18
 346:../src/stm32f30x_flash.c ****   {
 347:../src/stm32f30x_flash.c ****     /* If the previous operation is completed, proceed to program the new first 
 348:../src/stm32f30x_flash.c ****     half word */
 349:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 457              		.loc 1 349 0
 458 0270 4FF40053 		mov	r3, #8192
 459 0274 C4F20203 		movt	r3, 16386
 460 0278 4FF40052 		mov	r2, #8192
 461 027c C4F20202 		movt	r2, 16386
 462 0280 1269     		ldr	r2, [r2, #16]
 463 0282 42F00102 		orr	r2, r2, #1
 464 0286 1A61     		str	r2, [r3, #16]
 350:../src/stm32f30x_flash.c ****   
 351:../src/stm32f30x_flash.c ****     *(__IO uint16_t*)Address = (uint16_t)Data;
 465              		.loc 1 351 0
 466 0288 7B68     		ldr	r3, [r7, #4]
 467 028a 3A68     		ldr	r2, [r7, #0]
 468 028c 92B2     		uxth	r2, r2
 469 028e 1A80     		strh	r2, [r3, #0]	@ movhi
 352:../src/stm32f30x_flash.c ****     
 353:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 354:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 470              		.loc 1 354 0
 471 0290 4FF43020 		mov	r0, #720896
 472 0294 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 473 0298 0346     		mov	r3, r0
 474 029a FB73     		strb	r3, [r7, #15]
 355:../src/stm32f30x_flash.c ****  
 356:../src/stm32f30x_flash.c ****     if(status == FLASH_COMPLETE)
 475              		.loc 1 356 0
 476 029c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 477 029e 042B     		cmp	r3, #4
 478 02a0 1CD1     		bne	.L19
 357:../src/stm32f30x_flash.c ****     {
 358:../src/stm32f30x_flash.c ****       /* If the previous operation is completed, proceed to program the new second 
 359:../src/stm32f30x_flash.c ****       half word */
 360:../src/stm32f30x_flash.c ****       tmp = Address + 2;
 479              		.loc 1 360 0
 480 02a2 7B68     		ldr	r3, [r7, #4]
 481 02a4 03F10203 		add	r3, r3, #2
 482 02a8 BB60     		str	r3, [r7, #8]
 361:../src/stm32f30x_flash.c **** 
 362:../src/stm32f30x_flash.c ****       *(__IO uint16_t*) tmp = Data >> 16;
 483              		.loc 1 362 0
 484 02aa BB68     		ldr	r3, [r7, #8]
 485 02ac 3A68     		ldr	r2, [r7, #0]
 486 02ae 4FEA1242 		lsr	r2, r2, #16
 487 02b2 92B2     		uxth	r2, r2
 488 02b4 1A80     		strh	r2, [r3, #0]	@ movhi
 363:../src/stm32f30x_flash.c ****     
 364:../src/stm32f30x_flash.c ****       /* Wait for last operation to be completed */
 365:../src/stm32f30x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 489              		.loc 1 365 0
 490 02b6 4FF43020 		mov	r0, #720896
 491 02ba FFF7FEFF 		bl	FLASH_WaitForLastOperation
 492 02be 0346     		mov	r3, r0
 493 02c0 FB73     		strb	r3, [r7, #15]
 366:../src/stm32f30x_flash.c ****         
 367:../src/stm32f30x_flash.c ****       /* Disable the PG Bit */
 368:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_PG;
 494              		.loc 1 368 0
 495 02c2 4FF40053 		mov	r3, #8192
 496 02c6 C4F20203 		movt	r3, 16386
 497 02ca 4FF40052 		mov	r2, #8192
 498 02ce C4F20202 		movt	r2, 16386
 499 02d2 1269     		ldr	r2, [r2, #16]
 500 02d4 22F00102 		bic	r2, r2, #1
 501 02d8 1A61     		str	r2, [r3, #16]
 502 02da 0BE0     		b	.L18
 503              	.L19:
 369:../src/stm32f30x_flash.c ****     }
 370:../src/stm32f30x_flash.c ****     else
 371:../src/stm32f30x_flash.c ****     {
 372:../src/stm32f30x_flash.c ****       /* Disable the PG Bit */
 373:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_PG;
 504              		.loc 1 373 0
 505 02dc 4FF40053 		mov	r3, #8192
 506 02e0 C4F20203 		movt	r3, 16386
 507 02e4 4FF40052 		mov	r2, #8192
 508 02e8 C4F20202 		movt	r2, 16386
 509 02ec 1269     		ldr	r2, [r2, #16]
 510 02ee 22F00102 		bic	r2, r2, #1
 511 02f2 1A61     		str	r2, [r3, #16]
 512              	.L18:
 374:../src/stm32f30x_flash.c ****     }
 375:../src/stm32f30x_flash.c ****   }
 376:../src/stm32f30x_flash.c ****    
 377:../src/stm32f30x_flash.c ****   /* Return the Program Status */
 378:../src/stm32f30x_flash.c ****   return status;
 513              		.loc 1 378 0
 514 02f4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 379:../src/stm32f30x_flash.c **** }
 515              		.loc 1 379 0
 516 02f6 1846     		mov	r0, r3
 517 02f8 07F11007 		add	r7, r7, #16
 518 02fc BD46     		mov	sp, r7
 519 02fe 80BD     		pop	{r7, pc}
 520              		.cfi_endproc
 521              	.LFE118:
 523              		.align	2
 524              		.global	FLASH_ProgramHalfWord
 525              		.thumb
 526              		.thumb_func
 528              	FLASH_ProgramHalfWord:
 529              	.LFB119:
 380:../src/stm32f30x_flash.c **** 
 381:../src/stm32f30x_flash.c **** /**
 382:../src/stm32f30x_flash.c ****   * @brief  Programs a half word at a specified address.
 383:../src/stm32f30x_flash.c ****   * @note   To correctly run this function, the FLASH_Unlock() function
 384:../src/stm32f30x_flash.c ****   *         must be called before.
 385:../src/stm32f30x_flash.c ****   *         Call the FLASH_Lock() to disable the flash memory access 
 386:../src/stm32f30x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation) 
 387:../src/stm32f30x_flash.c ****   * @param  Address: specifies the address to be programmed.
 388:../src/stm32f30x_flash.c ****   * @param  Data: specifies the data to be programmed.
 389:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 390:../src/stm32f30x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 391:../src/stm32f30x_flash.c ****   */
 392:../src/stm32f30x_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 393:../src/stm32f30x_flash.c **** {
 530              		.loc 1 393 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 16
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534 0300 80B5     		push	{r7, lr}
 535              	.LCFI22:
 536              		.cfi_def_cfa_offset 8
 537              		.cfi_offset 7, -8
 538              		.cfi_offset 14, -4
 539 0302 84B0     		sub	sp, sp, #16
 540              	.LCFI23:
 541              		.cfi_def_cfa_offset 24
 542 0304 00AF     		add	r7, sp, #0
 543              	.LCFI24:
 544              		.cfi_def_cfa_register 7
 545 0306 7860     		str	r0, [r7, #4]
 546 0308 0B46     		mov	r3, r1
 547 030a 7B80     		strh	r3, [r7, #2]	@ movhi
 394:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 548              		.loc 1 394 0
 549 030c 4FF00403 		mov	r3, #4
 550 0310 FB73     		strb	r3, [r7, #15]
 395:../src/stm32f30x_flash.c **** 
 396:../src/stm32f30x_flash.c ****   /* Check the parameters */
 397:../src/stm32f30x_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 398:../src/stm32f30x_flash.c **** 
 399:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 400:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 551              		.loc 1 400 0
 552 0312 4FF43020 		mov	r0, #720896
 553 0316 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 554 031a 0346     		mov	r3, r0
 555 031c FB73     		strb	r3, [r7, #15]
 401:../src/stm32f30x_flash.c ****   
 402:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 556              		.loc 1 402 0
 557 031e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 558 0320 042B     		cmp	r3, #4
 559 0322 20D1     		bne	.L22
 403:../src/stm32f30x_flash.c ****   {
 404:../src/stm32f30x_flash.c ****     /* If the previous operation is completed, proceed to program the new data */
 405:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 560              		.loc 1 405 0
 561 0324 4FF40053 		mov	r3, #8192
 562 0328 C4F20203 		movt	r3, 16386
 563 032c 4FF40052 		mov	r2, #8192
 564 0330 C4F20202 		movt	r2, 16386
 565 0334 1269     		ldr	r2, [r2, #16]
 566 0336 42F00102 		orr	r2, r2, #1
 567 033a 1A61     		str	r2, [r3, #16]
 406:../src/stm32f30x_flash.c ****   
 407:../src/stm32f30x_flash.c ****     *(__IO uint16_t*)Address = Data;
 568              		.loc 1 407 0
 569 033c 7B68     		ldr	r3, [r7, #4]
 570 033e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 571 0340 1A80     		strh	r2, [r3, #0]	@ movhi
 408:../src/stm32f30x_flash.c **** 
 409:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 410:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 572              		.loc 1 410 0
 573 0342 4FF43020 		mov	r0, #720896
 574 0346 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 575 034a 0346     		mov	r3, r0
 576 034c FB73     		strb	r3, [r7, #15]
 411:../src/stm32f30x_flash.c ****     
 412:../src/stm32f30x_flash.c ****     /* Disable the PG Bit */
 413:../src/stm32f30x_flash.c ****     FLASH->CR &= ~FLASH_CR_PG;
 577              		.loc 1 413 0
 578 034e 4FF40053 		mov	r3, #8192
 579 0352 C4F20203 		movt	r3, 16386
 580 0356 4FF40052 		mov	r2, #8192
 581 035a C4F20202 		movt	r2, 16386
 582 035e 1269     		ldr	r2, [r2, #16]
 583 0360 22F00102 		bic	r2, r2, #1
 584 0364 1A61     		str	r2, [r3, #16]
 585              	.L22:
 414:../src/stm32f30x_flash.c ****   } 
 415:../src/stm32f30x_flash.c ****   
 416:../src/stm32f30x_flash.c ****   /* Return the Program Status */
 417:../src/stm32f30x_flash.c ****   return status;
 586              		.loc 1 417 0
 587 0366 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 418:../src/stm32f30x_flash.c **** }
 588              		.loc 1 418 0
 589 0368 1846     		mov	r0, r3
 590 036a 07F11007 		add	r7, r7, #16
 591 036e BD46     		mov	sp, r7
 592 0370 80BD     		pop	{r7, pc}
 593              		.cfi_endproc
 594              	.LFE119:
 596 0372 00BF     		.align	2
 597              		.global	FLASH_OB_Unlock
 598              		.thumb
 599              		.thumb_func
 601              	FLASH_OB_Unlock:
 602              	.LFB120:
 419:../src/stm32f30x_flash.c **** 
 420:../src/stm32f30x_flash.c **** /**
 421:../src/stm32f30x_flash.c ****   * @}
 422:../src/stm32f30x_flash.c ****   */
 423:../src/stm32f30x_flash.c ****   
 424:../src/stm32f30x_flash.c **** /** @defgroup FLASH_Group3 Option Bytes Programming functions
 425:../src/stm32f30x_flash.c ****  *  @brief   Option Bytes Programming functions 
 426:../src/stm32f30x_flash.c ****  *
 427:../src/stm32f30x_flash.c **** @verbatim   
 428:../src/stm32f30x_flash.c ****  ===============================================================================
 429:../src/stm32f30x_flash.c ****                 ##### Option Bytes Programming functions #####
 430:../src/stm32f30x_flash.c ****  ===============================================================================  
 431:../src/stm32f30x_flash.c ****     [..] This group includes the following functions:
 432:../src/stm32f30x_flash.c ****          (+) void FLASH_OB_Unlock(void);
 433:../src/stm32f30x_flash.c ****          (+) void FLASH_OB_Lock(void);
 434:../src/stm32f30x_flash.c ****          (+) void FLASH_OB_Erase(void);
 435:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState);
 436:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP);
 437:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY);
 438:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1);
 439:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG);
 440:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_OB_SRMParityConfig(uint8_t OB_SRAM_Parity);
 441:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER);					
 442:../src/stm32f30x_flash.c ****          (+) FLASH_Status FLASH_OB_Launch(void);
 443:../src/stm32f30x_flash.c ****          (+) uint32_t FLASH_OB_GetUser(void);						
 444:../src/stm32f30x_flash.c ****          (+) uint8_t FLASH_OB_GetWRP(void);						
 445:../src/stm32f30x_flash.c ****          (+) uint8_t FLASH_OB_GetRDP(void);							
 446:../src/stm32f30x_flash.c ****     [..] Any operation of erase or program should follow these steps:
 447:../src/stm32f30x_flash.c ****          (#) Call the FLASH_OB_Unlock() function to enable the FLASH option control 
 448:../src/stm32f30x_flash.c ****              register access.
 449:../src/stm32f30x_flash.c ****          (#) Call one or several functions to program the desired Option Bytes:
 450:../src/stm32f30x_flash.c ****              (++) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState); 
 451:../src/stm32f30x_flash.c ****                   => to Enable/Disable the desired sector write protection.
 452:../src/stm32f30x_flash.c ****              (++) FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the 
 453:../src/stm32f30x_flash.c ****                   desired read Protection Level.
 454:../src/stm32f30x_flash.c ****              (++) FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STD
 455:../src/stm32f30x_flash.c ****                   => to configure the user Option Bytes.
 456:../src/stm32f30x_flash.c ****  	         (++) FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1); 
 457:../src/stm32f30x_flash.c ****                   => to set the boot1 mode
 458:../src/stm32f30x_flash.c ****              (++) FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG); 
 459:../src/stm32f30x_flash.c ****                   => to Enable/Disable the VDDA monotoring.
 460:../src/stm32f30x_flash.c ****              (++) FLASH_Status FLASH_OB_SRMParityConfig(uint8_t OB_SRAM_Parity); 
 461:../src/stm32f30x_flash.c ****                   => to Enable/Disable the SRAM Parity check.		 
 462:../src/stm32f30x_flash.c **** 	         (++) FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER); 
 463:../src/stm32f30x_flash.c ****                   => to write all user option bytes: OB_IWDG, OB_STOP, OB_STDBY, 
 464:../src/stm32f30x_flash.c ****                      OB_BOOT1, OB_VDDA_ANALOG and OB_VDD_SD12.  
 465:../src/stm32f30x_flash.c ****          (#) Once all needed Option Bytes to be programmed are correctly written, 
 466:../src/stm32f30x_flash.c ****              call the FLASH_OB_Launch() function to launch the Option Bytes 
 467:../src/stm32f30x_flash.c ****              programming process.
 468:../src/stm32f30x_flash.c ****          (#@) When changing the IWDG mode from HW to SW or from SW to HW, a system 
 469:../src/stm32f30x_flash.c ****               reset is needed to make the change effective.  
 470:../src/stm32f30x_flash.c ****          (#) Call the FLASH_OB_Lock() function to disable the FLASH option control 
 471:../src/stm32f30x_flash.c ****              register access (recommended to protect the Option Bytes against 
 472:../src/stm32f30x_flash.c ****              possible unwanted operations).
 473:../src/stm32f30x_flash.c ****     
 474:../src/stm32f30x_flash.c **** @endverbatim
 475:../src/stm32f30x_flash.c ****   * @{
 476:../src/stm32f30x_flash.c ****   */
 477:../src/stm32f30x_flash.c **** 
 478:../src/stm32f30x_flash.c **** /**
 479:../src/stm32f30x_flash.c ****   * @brief  Unlocks the option bytes block access.
 480:../src/stm32f30x_flash.c ****   * @param  None
 481:../src/stm32f30x_flash.c ****   * @retval None
 482:../src/stm32f30x_flash.c ****   */
 483:../src/stm32f30x_flash.c **** void FLASH_OB_Unlock(void)
 484:../src/stm32f30x_flash.c **** {
 603              		.loc 1 484 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 1, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 608 0374 80B4     		push	{r7}
 609              	.LCFI25:
 610              		.cfi_def_cfa_offset 4
 611              		.cfi_offset 7, -4
 612 0376 00AF     		add	r7, sp, #0
 613              	.LCFI26:
 614              		.cfi_def_cfa_register 7
 485:../src/stm32f30x_flash.c ****   if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
 615              		.loc 1 485 0
 616 0378 4FF40053 		mov	r3, #8192
 617 037c C4F20203 		movt	r3, 16386
 618 0380 1B69     		ldr	r3, [r3, #16]
 619 0382 03F40073 		and	r3, r3, #512
 620 0386 002B     		cmp	r3, #0
 621 0388 11D1     		bne	.L24
 486:../src/stm32f30x_flash.c ****   { 
 487:../src/stm32f30x_flash.c ****     /* Unlocking the option bytes block access */
 488:../src/stm32f30x_flash.c ****     FLASH->OPTKEYR = FLASH_OPTKEY1;
 622              		.loc 1 488 0
 623 038a 4FF40053 		mov	r3, #8192
 624 038e C4F20203 		movt	r3, 16386
 625 0392 40F22312 		movw	r2, #291
 626 0396 C4F26752 		movt	r2, 17767
 627 039a 9A60     		str	r2, [r3, #8]
 489:../src/stm32f30x_flash.c ****     FLASH->OPTKEYR = FLASH_OPTKEY2;
 628              		.loc 1 489 0
 629 039c 4FF40053 		mov	r3, #8192
 630 03a0 C4F20203 		movt	r3, 16386
 631 03a4 48F6AB12 		movw	r2, #35243
 632 03a8 CCF6EF52 		movt	r2, 52719
 633 03ac 9A60     		str	r2, [r3, #8]
 634              	.L24:
 490:../src/stm32f30x_flash.c ****   }
 491:../src/stm32f30x_flash.c **** }
 635              		.loc 1 491 0
 636 03ae BD46     		mov	sp, r7
 637 03b0 80BC     		pop	{r7}
 638 03b2 7047     		bx	lr
 639              		.cfi_endproc
 640              	.LFE120:
 642              		.align	2
 643              		.global	FLASH_OB_Lock
 644              		.thumb
 645              		.thumb_func
 647              	FLASH_OB_Lock:
 648              	.LFB121:
 492:../src/stm32f30x_flash.c **** 
 493:../src/stm32f30x_flash.c **** /**
 494:../src/stm32f30x_flash.c ****   * @brief  Locks the option bytes block access.
 495:../src/stm32f30x_flash.c ****   * @param  None
 496:../src/stm32f30x_flash.c ****   * @retval None
 497:../src/stm32f30x_flash.c ****   */
 498:../src/stm32f30x_flash.c **** void FLASH_OB_Lock(void)
 499:../src/stm32f30x_flash.c **** {
 649              		.loc 1 499 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 0
 652              		@ frame_needed = 1, uses_anonymous_args = 0
 653              		@ link register save eliminated.
 654 03b4 80B4     		push	{r7}
 655              	.LCFI27:
 656              		.cfi_def_cfa_offset 4
 657              		.cfi_offset 7, -4
 658 03b6 00AF     		add	r7, sp, #0
 659              	.LCFI28:
 660              		.cfi_def_cfa_register 7
 500:../src/stm32f30x_flash.c ****   /* Set the OPTWREN Bit to lock the option bytes block access */
 501:../src/stm32f30x_flash.c ****   FLASH->CR &= ~FLASH_CR_OPTWRE;
 661              		.loc 1 501 0
 662 03b8 4FF40053 		mov	r3, #8192
 663 03bc C4F20203 		movt	r3, 16386
 664 03c0 4FF40052 		mov	r2, #8192
 665 03c4 C4F20202 		movt	r2, 16386
 666 03c8 1269     		ldr	r2, [r2, #16]
 667 03ca 22F40072 		bic	r2, r2, #512
 668 03ce 1A61     		str	r2, [r3, #16]
 502:../src/stm32f30x_flash.c **** }
 669              		.loc 1 502 0
 670 03d0 BD46     		mov	sp, r7
 671 03d2 80BC     		pop	{r7}
 672 03d4 7047     		bx	lr
 673              		.cfi_endproc
 674              	.LFE121:
 676 03d6 00BF     		.align	2
 677              		.global	FLASH_OB_Launch
 678              		.thumb
 679              		.thumb_func
 681              	FLASH_OB_Launch:
 682              	.LFB122:
 503:../src/stm32f30x_flash.c **** 
 504:../src/stm32f30x_flash.c **** /**
 505:../src/stm32f30x_flash.c ****   * @brief  Launch the option byte loading.
 506:../src/stm32f30x_flash.c ****   * @param  None
 507:../src/stm32f30x_flash.c ****   * @retval None
 508:../src/stm32f30x_flash.c ****   */
 509:../src/stm32f30x_flash.c **** void FLASH_OB_Launch(void)
 510:../src/stm32f30x_flash.c **** {
 683              		.loc 1 510 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688 03d8 80B4     		push	{r7}
 689              	.LCFI29:
 690              		.cfi_def_cfa_offset 4
 691              		.cfi_offset 7, -4
 692 03da 00AF     		add	r7, sp, #0
 693              	.LCFI30:
 694              		.cfi_def_cfa_register 7
 511:../src/stm32f30x_flash.c ****   /* Set the OBL_Launch bit to launch the option byte loading */
 512:../src/stm32f30x_flash.c ****   FLASH->CR |= FLASH_CR_OBL_LAUNCH; 
 695              		.loc 1 512 0
 696 03dc 4FF40053 		mov	r3, #8192
 697 03e0 C4F20203 		movt	r3, 16386
 698 03e4 4FF40052 		mov	r2, #8192
 699 03e8 C4F20202 		movt	r2, 16386
 700 03ec 1269     		ldr	r2, [r2, #16]
 701 03ee 42F40052 		orr	r2, r2, #8192
 702 03f2 1A61     		str	r2, [r3, #16]
 513:../src/stm32f30x_flash.c **** }
 703              		.loc 1 513 0
 704 03f4 BD46     		mov	sp, r7
 705 03f6 80BC     		pop	{r7}
 706 03f8 7047     		bx	lr
 707              		.cfi_endproc
 708              	.LFE122:
 710 03fa 00BF     		.align	2
 711              		.global	FLASH_OB_Erase
 712              		.thumb
 713              		.thumb_func
 715              	FLASH_OB_Erase:
 716              	.LFB123:
 514:../src/stm32f30x_flash.c **** 
 515:../src/stm32f30x_flash.c **** /**
 516:../src/stm32f30x_flash.c ****   * @brief  Erases the FLASH option bytes.
 517:../src/stm32f30x_flash.c ****   * @note   This functions erases all option bytes except the Read protection (RDP). 
 518:../src/stm32f30x_flash.c ****   * @param  None
 519:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 520:../src/stm32f30x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 521:../src/stm32f30x_flash.c ****   */
 522:../src/stm32f30x_flash.c **** FLASH_Status FLASH_OB_Erase(void)
 523:../src/stm32f30x_flash.c **** {
 717              		.loc 1 523 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 8
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721 03fc 80B5     		push	{r7, lr}
 722              	.LCFI31:
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 03fe 82B0     		sub	sp, sp, #8
 727              	.LCFI32:
 728              		.cfi_def_cfa_offset 16
 729 0400 00AF     		add	r7, sp, #0
 730              	.LCFI33:
 731              		.cfi_def_cfa_register 7
 524:../src/stm32f30x_flash.c ****   uint16_t rdptmp = OB_RDP_Level_0;
 732              		.loc 1 524 0
 733 0402 4FF0AA03 		mov	r3, #170
 734 0406 FB80     		strh	r3, [r7, #6]	@ movhi
 525:../src/stm32f30x_flash.c **** 
 526:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 735              		.loc 1 526 0
 736 0408 4FF00403 		mov	r3, #4
 737 040c 7B71     		strb	r3, [r7, #5]
 527:../src/stm32f30x_flash.c **** 
 528:../src/stm32f30x_flash.c ****   /* Get the actual read protection Option Byte value */ 
 529:../src/stm32f30x_flash.c ****   if(FLASH_OB_GetRDP() != RESET)
 738              		.loc 1 529 0
 739 040e FFF7FEFF 		bl	FLASH_OB_GetRDP
 740 0412 0346     		mov	r3, r0
 741 0414 002B     		cmp	r3, #0
 742 0416 02D0     		beq	.L29
 530:../src/stm32f30x_flash.c ****   {
 531:../src/stm32f30x_flash.c ****     rdptmp = 0x00;  
 743              		.loc 1 531 0
 744 0418 4FF00003 		mov	r3, #0
 745 041c FB80     		strh	r3, [r7, #6]	@ movhi
 746              	.L29:
 532:../src/stm32f30x_flash.c ****   }
 533:../src/stm32f30x_flash.c **** 
 534:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 535:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 747              		.loc 1 535 0
 748 041e 4FF43020 		mov	r0, #720896
 749 0422 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 750 0426 0346     		mov	r3, r0
 751 0428 7B71     		strb	r3, [r7, #5]
 536:../src/stm32f30x_flash.c **** 
 537:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 752              		.loc 1 537 0
 753 042a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 754 042c 042B     		cmp	r3, #4
 755 042e 63D1     		bne	.L30
 538:../src/stm32f30x_flash.c ****   {   
 539:../src/stm32f30x_flash.c ****     /* If the previous operation is completed, proceed to erase the option bytes */
 540:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_OPTER;
 756              		.loc 1 540 0
 757 0430 4FF40053 		mov	r3, #8192
 758 0434 C4F20203 		movt	r3, 16386
 759 0438 4FF40052 		mov	r2, #8192
 760 043c C4F20202 		movt	r2, 16386
 761 0440 1269     		ldr	r2, [r2, #16]
 762 0442 42F02002 		orr	r2, r2, #32
 763 0446 1A61     		str	r2, [r3, #16]
 541:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 764              		.loc 1 541 0
 765 0448 4FF40053 		mov	r3, #8192
 766 044c C4F20203 		movt	r3, 16386
 767 0450 4FF40052 		mov	r2, #8192
 768 0454 C4F20202 		movt	r2, 16386
 769 0458 1269     		ldr	r2, [r2, #16]
 770 045a 42F04002 		orr	r2, r2, #64
 771 045e 1A61     		str	r2, [r3, #16]
 542:../src/stm32f30x_flash.c **** 
 543:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 544:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 772              		.loc 1 544 0
 773 0460 4FF43020 		mov	r0, #720896
 774 0464 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 775 0468 0346     		mov	r3, r0
 776 046a 7B71     		strb	r3, [r7, #5]
 545:../src/stm32f30x_flash.c ****     
 546:../src/stm32f30x_flash.c ****     if(status == FLASH_COMPLETE)
 777              		.loc 1 546 0
 778 046c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 779 046e 042B     		cmp	r3, #4
 780 0470 33D1     		bne	.L31
 547:../src/stm32f30x_flash.c ****     {
 548:../src/stm32f30x_flash.c ****       /* If the erase operation is completed, disable the OPTER Bit */
 549:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTER;
 781              		.loc 1 549 0
 782 0472 4FF40053 		mov	r3, #8192
 783 0476 C4F20203 		movt	r3, 16386
 784 047a 4FF40052 		mov	r2, #8192
 785 047e C4F20202 		movt	r2, 16386
 786 0482 1269     		ldr	r2, [r2, #16]
 787 0484 22F02002 		bic	r2, r2, #32
 788 0488 1A61     		str	r2, [r3, #16]
 550:../src/stm32f30x_flash.c ****        
 551:../src/stm32f30x_flash.c ****       /* Enable the Option Bytes Programming operation */
 552:../src/stm32f30x_flash.c ****       FLASH->CR |= FLASH_CR_OPTPG;
 789              		.loc 1 552 0
 790 048a 4FF40053 		mov	r3, #8192
 791 048e C4F20203 		movt	r3, 16386
 792 0492 4FF40052 		mov	r2, #8192
 793 0496 C4F20202 		movt	r2, 16386
 794 049a 1269     		ldr	r2, [r2, #16]
 795 049c 42F01002 		orr	r2, r2, #16
 796 04a0 1A61     		str	r2, [r3, #16]
 553:../src/stm32f30x_flash.c **** 
 554:../src/stm32f30x_flash.c ****       /* Restore the last read protection Option Byte value */
 555:../src/stm32f30x_flash.c ****       OB->RDP = (uint16_t)rdptmp; 
 797              		.loc 1 555 0
 798 04a2 4FF47843 		mov	r3, #63488
 799 04a6 C1F6FF73 		movt	r3, 8191
 800 04aa FA88     		ldrh	r2, [r7, #6]	@ movhi
 801 04ac 1A80     		strh	r2, [r3, #0]	@ movhi
 556:../src/stm32f30x_flash.c **** 
 557:../src/stm32f30x_flash.c ****       /* Wait for last operation to be completed */
 558:../src/stm32f30x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 802              		.loc 1 558 0
 803 04ae 4FF43020 		mov	r0, #720896
 804 04b2 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 805 04b6 0346     		mov	r3, r0
 806 04b8 7B71     		strb	r3, [r7, #5]
 559:../src/stm32f30x_flash.c ****  
 560:../src/stm32f30x_flash.c ****       if(status != FLASH_TIMEOUT)
 807              		.loc 1 560 0
 808 04ba 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 809 04bc 052B     		cmp	r3, #5
 810 04be 1BD0     		beq	.L30
 561:../src/stm32f30x_flash.c ****       {
 562:../src/stm32f30x_flash.c ****         /* if the program operation is completed, disable the OPTPG Bit */
 563:../src/stm32f30x_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTPG;
 811              		.loc 1 563 0
 812 04c0 4FF40053 		mov	r3, #8192
 813 04c4 C4F20203 		movt	r3, 16386
 814 04c8 4FF40052 		mov	r2, #8192
 815 04cc C4F20202 		movt	r2, 16386
 816 04d0 1269     		ldr	r2, [r2, #16]
 817 04d2 22F01002 		bic	r2, r2, #16
 818 04d6 1A61     		str	r2, [r3, #16]
 819 04d8 0EE0     		b	.L30
 820              	.L31:
 564:../src/stm32f30x_flash.c ****       }
 565:../src/stm32f30x_flash.c ****     }
 566:../src/stm32f30x_flash.c ****     else
 567:../src/stm32f30x_flash.c ****     {
 568:../src/stm32f30x_flash.c ****       if (status != FLASH_TIMEOUT)
 821              		.loc 1 568 0
 822 04da 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 823 04dc 052B     		cmp	r3, #5
 824 04de 0BD0     		beq	.L30
 569:../src/stm32f30x_flash.c ****       {
 570:../src/stm32f30x_flash.c ****         /* Disable the OPTPG Bit */
 571:../src/stm32f30x_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTPG;
 825              		.loc 1 571 0
 826 04e0 4FF40053 		mov	r3, #8192
 827 04e4 C4F20203 		movt	r3, 16386
 828 04e8 4FF40052 		mov	r2, #8192
 829 04ec C4F20202 		movt	r2, 16386
 830 04f0 1269     		ldr	r2, [r2, #16]
 831 04f2 22F01002 		bic	r2, r2, #16
 832 04f6 1A61     		str	r2, [r3, #16]
 833              	.L30:
 572:../src/stm32f30x_flash.c ****       }
 573:../src/stm32f30x_flash.c ****     }  
 574:../src/stm32f30x_flash.c ****   }
 575:../src/stm32f30x_flash.c ****   /* Return the erase status */
 576:../src/stm32f30x_flash.c ****   return status;
 834              		.loc 1 576 0
 835 04f8 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 577:../src/stm32f30x_flash.c **** }
 836              		.loc 1 577 0
 837 04fa 1846     		mov	r0, r3
 838 04fc 07F10807 		add	r7, r7, #8
 839 0500 BD46     		mov	sp, r7
 840 0502 80BD     		pop	{r7, pc}
 841              		.cfi_endproc
 842              	.LFE123:
 844              		.align	2
 845              		.global	FLASH_OB_EnableWRP
 846              		.thumb
 847              		.thumb_func
 849              	FLASH_OB_EnableWRP:
 850              	.LFB124:
 578:../src/stm32f30x_flash.c **** 
 579:../src/stm32f30x_flash.c **** /**
 580:../src/stm32f30x_flash.c ****   * @brief  Write protects the desired pages
 581:../src/stm32f30x_flash.c ****   * @note   To correctly run this function, the FLASH_OB_Unlock() function
 582:../src/stm32f30x_flash.c ****   *         must be called before.
 583:../src/stm32f30x_flash.c ****   * @note   Call the FLASH_OB_Lock() to disable the flash control register access and the option by
 584:../src/stm32f30x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)    
 585:../src/stm32f30x_flash.c ****   * @param  OB_WRP: specifies the address of the pages to be write protected.
 586:../src/stm32f30x_flash.c ****   *   This parameter can be:
 587:../src/stm32f30x_flash.c ****   *     @arg  value between OB_WRP_Pages0to35 and OB_WRP_Pages60to63
 588:../src/stm32f30x_flash.c ****   *     @arg OB_WRP_AllPages
 589:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: 
 590:../src/stm32f30x_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 591:../src/stm32f30x_flash.c ****   */
 592:../src/stm32f30x_flash.c **** FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
 593:../src/stm32f30x_flash.c **** {
 851              		.loc 1 593 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 16
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855 0504 80B5     		push	{r7, lr}
 856              	.LCFI34:
 857              		.cfi_def_cfa_offset 8
 858              		.cfi_offset 7, -8
 859              		.cfi_offset 14, -4
 860 0506 84B0     		sub	sp, sp, #16
 861              	.LCFI35:
 862              		.cfi_def_cfa_offset 24
 863 0508 00AF     		add	r7, sp, #0
 864              	.LCFI36:
 865              		.cfi_def_cfa_register 7
 866 050a 7860     		str	r0, [r7, #4]
 594:../src/stm32f30x_flash.c ****   uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF;
 867              		.loc 1 594 0
 868 050c 4FF6FF73 		movw	r3, #65535
 869 0510 BB81     		strh	r3, [r7, #12]	@ movhi
 870 0512 4FF6FF73 		movw	r3, #65535
 871 0516 7B81     		strh	r3, [r7, #10]	@ movhi
 595:../src/stm32f30x_flash.c ****   
 596:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 872              		.loc 1 596 0
 873 0518 4FF00403 		mov	r3, #4
 874 051c FB73     		strb	r3, [r7, #15]
 597:../src/stm32f30x_flash.c ****   
 598:../src/stm32f30x_flash.c ****   /* Check the parameters */
 599:../src/stm32f30x_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
 600:../src/stm32f30x_flash.c ****     
 601:../src/stm32f30x_flash.c ****   OB_WRP = (uint32_t)(~OB_WRP);
 875              		.loc 1 601 0
 876 051e 7B68     		ldr	r3, [r7, #4]
 877 0520 6FEA0303 		mvn	r3, r3
 878 0524 7B60     		str	r3, [r7, #4]
 602:../src/stm32f30x_flash.c ****   WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
 879              		.loc 1 602 0
 880 0526 7B68     		ldr	r3, [r7, #4]
 881 0528 9BB2     		uxth	r3, r3
 882 052a DBB2     		uxtb	r3, r3
 883 052c BB81     		strh	r3, [r7, #12]	@ movhi
 603:../src/stm32f30x_flash.c ****   WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8);
 884              		.loc 1 603 0
 885 052e 7B68     		ldr	r3, [r7, #4]
 886 0530 03F47F43 		and	r3, r3, #65280
 887 0534 4FEA1323 		lsr	r3, r3, #8
 888 0538 7B81     		strh	r3, [r7, #10]	@ movhi
 604:../src/stm32f30x_flash.c ****   
 605:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 606:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 889              		.loc 1 606 0
 890 053a 4FF43020 		mov	r0, #720896
 891 053e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 892 0542 0346     		mov	r3, r0
 893 0544 FB73     		strb	r3, [r7, #15]
 607:../src/stm32f30x_flash.c ****   
 608:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 894              		.loc 1 608 0
 895 0546 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 896 0548 042B     		cmp	r3, #4
 897 054a 3BD1     		bne	.L34
 609:../src/stm32f30x_flash.c ****   {
 610:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG;
 898              		.loc 1 610 0
 899 054c 4FF40053 		mov	r3, #8192
 900 0550 C4F20203 		movt	r3, 16386
 901 0554 4FF40052 		mov	r2, #8192
 902 0558 C4F20202 		movt	r2, 16386
 903 055c 1269     		ldr	r2, [r2, #16]
 904 055e 42F01002 		orr	r2, r2, #16
 905 0562 1A61     		str	r2, [r3, #16]
 611:../src/stm32f30x_flash.c **** 
 612:../src/stm32f30x_flash.c ****     if(WRP0_Data != 0xFF)
 906              		.loc 1 612 0
 907 0564 BB89     		ldrh	r3, [r7, #12]
 908 0566 FF2B     		cmp	r3, #255
 909 0568 0BD0     		beq	.L35
 613:../src/stm32f30x_flash.c ****     {
 614:../src/stm32f30x_flash.c ****       OB->WRP0 = WRP0_Data;
 910              		.loc 1 614 0
 911 056a 4FF47843 		mov	r3, #63488
 912 056e C1F6FF73 		movt	r3, 8191
 913 0572 BA89     		ldrh	r2, [r7, #12]	@ movhi
 914 0574 1A81     		strh	r2, [r3, #8]	@ movhi
 615:../src/stm32f30x_flash.c ****       
 616:../src/stm32f30x_flash.c ****       /* Wait for last operation to be completed */
 617:../src/stm32f30x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 915              		.loc 1 617 0
 916 0576 4FF43020 		mov	r0, #720896
 917 057a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 918 057e 0346     		mov	r3, r0
 919 0580 FB73     		strb	r3, [r7, #15]
 920              	.L35:
 618:../src/stm32f30x_flash.c ****     }
 619:../src/stm32f30x_flash.c ****     if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 921              		.loc 1 619 0
 922 0582 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 923 0584 042B     		cmp	r3, #4
 924 0586 0ED1     		bne	.L36
 925              		.loc 1 619 0 is_stmt 0 discriminator 1
 926 0588 7B89     		ldrh	r3, [r7, #10]
 927 058a FF2B     		cmp	r3, #255
 928 058c 0BD0     		beq	.L36
 620:../src/stm32f30x_flash.c ****     {
 621:../src/stm32f30x_flash.c ****       OB->WRP1 = WRP1_Data;
 929              		.loc 1 621 0 is_stmt 1
 930 058e 4FF47843 		mov	r3, #63488
 931 0592 C1F6FF73 		movt	r3, 8191
 932 0596 7A89     		ldrh	r2, [r7, #10]	@ movhi
 933 0598 5A81     		strh	r2, [r3, #10]	@ movhi
 622:../src/stm32f30x_flash.c ****       
 623:../src/stm32f30x_flash.c ****       /* Wait for last operation to be completed */
 624:../src/stm32f30x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 934              		.loc 1 624 0
 935 059a 4FF43020 		mov	r0, #720896
 936 059e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 937 05a2 0346     		mov	r3, r0
 938 05a4 FB73     		strb	r3, [r7, #15]
 939              	.L36:
 625:../src/stm32f30x_flash.c ****     }
 626:../src/stm32f30x_flash.c ****           
 627:../src/stm32f30x_flash.c ****     if(status != FLASH_TIMEOUT)
 940              		.loc 1 627 0
 941 05a6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 942 05a8 052B     		cmp	r3, #5
 943 05aa 0BD0     		beq	.L34
 628:../src/stm32f30x_flash.c ****     {
 629:../src/stm32f30x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 630:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 944              		.loc 1 630 0
 945 05ac 4FF40053 		mov	r3, #8192
 946 05b0 C4F20203 		movt	r3, 16386
 947 05b4 4FF40052 		mov	r2, #8192
 948 05b8 C4F20202 		movt	r2, 16386
 949 05bc 1269     		ldr	r2, [r2, #16]
 950 05be 22F01002 		bic	r2, r2, #16
 951 05c2 1A61     		str	r2, [r3, #16]
 952              	.L34:
 631:../src/stm32f30x_flash.c ****     }
 632:../src/stm32f30x_flash.c ****   } 
 633:../src/stm32f30x_flash.c ****   /* Return the write protection operation Status */
 634:../src/stm32f30x_flash.c ****   return status;      
 953              		.loc 1 634 0
 954 05c4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 635:../src/stm32f30x_flash.c **** }
 955              		.loc 1 635 0
 956 05c6 1846     		mov	r0, r3
 957 05c8 07F11007 		add	r7, r7, #16
 958 05cc BD46     		mov	sp, r7
 959 05ce 80BD     		pop	{r7, pc}
 960              		.cfi_endproc
 961              	.LFE124:
 963              		.align	2
 964              		.global	FLASH_OB_RDPConfig
 965              		.thumb
 966              		.thumb_func
 968              	FLASH_OB_RDPConfig:
 969              	.LFB125:
 636:../src/stm32f30x_flash.c **** 
 637:../src/stm32f30x_flash.c **** /**
 638:../src/stm32f30x_flash.c ****   * @brief  Enables or disables the read out protection.
 639:../src/stm32f30x_flash.c ****   * @note   To correctly run this function, the FLASH_OB_Unlock() function
 640:../src/stm32f30x_flash.c ****   *         must be called before.
 641:../src/stm32f30x_flash.c ****   * @note   Call the FLASH_OB_Lock() to disable the flash control register access and the option by
 642:../src/stm32f30x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)   
 643:../src/stm32f30x_flash.c ****   * @param  FLASH_ReadProtection_Level: specifies the read protection level. 
 644:../src/stm32f30x_flash.c ****   *   This parameter can be:
 645:../src/stm32f30x_flash.c ****   *     @arg OB_RDP_Level_0: No protection
 646:../src/stm32f30x_flash.c ****   *     @arg OB_RDP_Level_1: Read protection of the memory                     
 647:../src/stm32f30x_flash.c ****   *     @arg OB_RDP_Level_2: Chip protection
 648:../src/stm32f30x_flash.c ****   *     @retval FLASH Status: The returned value can be: 
 649:../src/stm32f30x_flash.c ****   * FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 650:../src/stm32f30x_flash.c ****   */
 651:../src/stm32f30x_flash.c **** FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
 652:../src/stm32f30x_flash.c **** {
 970              		.loc 1 652 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 16
 973              		@ frame_needed = 1, uses_anonymous_args = 0
 974 05d0 80B5     		push	{r7, lr}
 975              	.LCFI37:
 976              		.cfi_def_cfa_offset 8
 977              		.cfi_offset 7, -8
 978              		.cfi_offset 14, -4
 979 05d2 84B0     		sub	sp, sp, #16
 980              	.LCFI38:
 981              		.cfi_def_cfa_offset 24
 982 05d4 00AF     		add	r7, sp, #0
 983              	.LCFI39:
 984              		.cfi_def_cfa_register 7
 985 05d6 0346     		mov	r3, r0
 986 05d8 FB71     		strb	r3, [r7, #7]
 653:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 987              		.loc 1 653 0
 988 05da 4FF00403 		mov	r3, #4
 989 05de FB73     		strb	r3, [r7, #15]
 654:../src/stm32f30x_flash.c ****   
 655:../src/stm32f30x_flash.c ****   /* Check the parameters */
 656:../src/stm32f30x_flash.c ****   assert_param(IS_OB_RDP(OB_RDP));
 657:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 990              		.loc 1 657 0
 991 05e0 4FF43020 		mov	r0, #720896
 992 05e4 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 993 05e8 0346     		mov	r3, r0
 994 05ea FB73     		strb	r3, [r7, #15]
 658:../src/stm32f30x_flash.c ****   
 659:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 995              		.loc 1 659 0
 996 05ec FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 997 05ee 042B     		cmp	r3, #4
 998 05f0 64D1     		bne	.L39
 660:../src/stm32f30x_flash.c ****   {
 661:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_OPTER;
 999              		.loc 1 661 0
 1000 05f2 4FF40053 		mov	r3, #8192
 1001 05f6 C4F20203 		movt	r3, 16386
 1002 05fa 4FF40052 		mov	r2, #8192
 1003 05fe C4F20202 		movt	r2, 16386
 1004 0602 1269     		ldr	r2, [r2, #16]
 1005 0604 42F02002 		orr	r2, r2, #32
 1006 0608 1A61     		str	r2, [r3, #16]
 662:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1007              		.loc 1 662 0
 1008 060a 4FF40053 		mov	r3, #8192
 1009 060e C4F20203 		movt	r3, 16386
 1010 0612 4FF40052 		mov	r2, #8192
 1011 0616 C4F20202 		movt	r2, 16386
 1012 061a 1269     		ldr	r2, [r2, #16]
 1013 061c 42F04002 		orr	r2, r2, #64
 1014 0620 1A61     		str	r2, [r3, #16]
 663:../src/stm32f30x_flash.c ****     
 664:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 665:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1015              		.loc 1 665 0
 1016 0622 4FF43020 		mov	r0, #720896
 1017 0626 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1018 062a 0346     		mov	r3, r0
 1019 062c FB73     		strb	r3, [r7, #15]
 666:../src/stm32f30x_flash.c ****     
 667:../src/stm32f30x_flash.c ****     if(status == FLASH_COMPLETE)
 1020              		.loc 1 667 0
 1021 062e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1022 0630 042B     		cmp	r3, #4
 1023 0632 34D1     		bne	.L40
 668:../src/stm32f30x_flash.c ****     {
 669:../src/stm32f30x_flash.c ****       /* If the erase operation is completed, disable the OPTER Bit */
 670:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTER;
 1024              		.loc 1 670 0
 1025 0634 4FF40053 		mov	r3, #8192
 1026 0638 C4F20203 		movt	r3, 16386
 1027 063c 4FF40052 		mov	r2, #8192
 1028 0640 C4F20202 		movt	r2, 16386
 1029 0644 1269     		ldr	r2, [r2, #16]
 1030 0646 22F02002 		bic	r2, r2, #32
 1031 064a 1A61     		str	r2, [r3, #16]
 671:../src/stm32f30x_flash.c ****       
 672:../src/stm32f30x_flash.c ****       /* Enable the Option Bytes Programming operation */
 673:../src/stm32f30x_flash.c ****       FLASH->CR |= FLASH_CR_OPTPG;
 1032              		.loc 1 673 0
 1033 064c 4FF40053 		mov	r3, #8192
 1034 0650 C4F20203 		movt	r3, 16386
 1035 0654 4FF40052 		mov	r2, #8192
 1036 0658 C4F20202 		movt	r2, 16386
 1037 065c 1269     		ldr	r2, [r2, #16]
 1038 065e 42F01002 		orr	r2, r2, #16
 1039 0662 1A61     		str	r2, [r3, #16]
 674:../src/stm32f30x_flash.c ****        
 675:../src/stm32f30x_flash.c ****       OB->RDP = OB_RDP;
 1040              		.loc 1 675 0
 1041 0664 4FF47843 		mov	r3, #63488
 1042 0668 C1F6FF73 		movt	r3, 8191
 1043 066c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1044 066e 92B2     		uxth	r2, r2
 1045 0670 1A80     		strh	r2, [r3, #0]	@ movhi
 676:../src/stm32f30x_flash.c **** 
 677:../src/stm32f30x_flash.c ****       /* Wait for last operation to be completed */
 678:../src/stm32f30x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 1046              		.loc 1 678 0
 1047 0672 4FF43020 		mov	r0, #720896
 1048 0676 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1049 067a 0346     		mov	r3, r0
 1050 067c FB73     		strb	r3, [r7, #15]
 679:../src/stm32f30x_flash.c ****     
 680:../src/stm32f30x_flash.c ****       if(status != FLASH_TIMEOUT)
 1051              		.loc 1 680 0
 1052 067e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1053 0680 052B     		cmp	r3, #5
 1054 0682 1BD0     		beq	.L39
 681:../src/stm32f30x_flash.c ****       {
 682:../src/stm32f30x_flash.c ****         /* if the program operation is completed, disable the OPTPG Bit */
 683:../src/stm32f30x_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTPG;
 1055              		.loc 1 683 0
 1056 0684 4FF40053 		mov	r3, #8192
 1057 0688 C4F20203 		movt	r3, 16386
 1058 068c 4FF40052 		mov	r2, #8192
 1059 0690 C4F20202 		movt	r2, 16386
 1060 0694 1269     		ldr	r2, [r2, #16]
 1061 0696 22F01002 		bic	r2, r2, #16
 1062 069a 1A61     		str	r2, [r3, #16]
 1063 069c 0EE0     		b	.L39
 1064              	.L40:
 684:../src/stm32f30x_flash.c ****       }
 685:../src/stm32f30x_flash.c ****     }
 686:../src/stm32f30x_flash.c ****     else 
 687:../src/stm32f30x_flash.c ****     {
 688:../src/stm32f30x_flash.c ****       if(status != FLASH_TIMEOUT)
 1065              		.loc 1 688 0
 1066 069e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1067 06a0 052B     		cmp	r3, #5
 1068 06a2 0BD0     		beq	.L39
 689:../src/stm32f30x_flash.c ****       {
 690:../src/stm32f30x_flash.c ****         /* Disable the OPTER Bit */
 691:../src/stm32f30x_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTER;
 1069              		.loc 1 691 0
 1070 06a4 4FF40053 		mov	r3, #8192
 1071 06a8 C4F20203 		movt	r3, 16386
 1072 06ac 4FF40052 		mov	r2, #8192
 1073 06b0 C4F20202 		movt	r2, 16386
 1074 06b4 1269     		ldr	r2, [r2, #16]
 1075 06b6 22F02002 		bic	r2, r2, #32
 1076 06ba 1A61     		str	r2, [r3, #16]
 1077              	.L39:
 692:../src/stm32f30x_flash.c ****       }
 693:../src/stm32f30x_flash.c ****     }
 694:../src/stm32f30x_flash.c ****   }
 695:../src/stm32f30x_flash.c ****   /* Return the protection operation Status */
 696:../src/stm32f30x_flash.c ****   return status;             
 1078              		.loc 1 696 0
 1079 06bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 697:../src/stm32f30x_flash.c **** }
 1080              		.loc 1 697 0
 1081 06be 1846     		mov	r0, r3
 1082 06c0 07F11007 		add	r7, r7, #16
 1083 06c4 BD46     		mov	sp, r7
 1084 06c6 80BD     		pop	{r7, pc}
 1085              		.cfi_endproc
 1086              	.LFE125:
 1088              		.align	2
 1089              		.global	FLASH_OB_UserConfig
 1090              		.thumb
 1091              		.thumb_func
 1093              	FLASH_OB_UserConfig:
 1094              	.LFB126:
 698:../src/stm32f30x_flash.c **** 
 699:../src/stm32f30x_flash.c **** /**
 700:../src/stm32f30x_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.
 701:../src/stm32f30x_flash.c ****   * @param  OB_IWDG: Selects the IWDG mode
 702:../src/stm32f30x_flash.c ****   *   This parameter can be one of the following values:
 703:../src/stm32f30x_flash.c ****   *     @arg OB_IWDG_SW: Software IWDG selected
 704:../src/stm32f30x_flash.c ****   *     @arg OB_IWDG_HW: Hardware IWDG selected
 705:../src/stm32f30x_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
 706:../src/stm32f30x_flash.c ****   *   This parameter can be one of the following values:
 707:../src/stm32f30x_flash.c ****   *     @arg OB_STOP_NoRST: No reset generated when entering in STOP
 708:../src/stm32f30x_flash.c ****   *     @arg OB_STOP_RST: Reset generated when entering in STOP
 709:../src/stm32f30x_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
 710:../src/stm32f30x_flash.c ****   *   This parameter can be one of the following values:
 711:../src/stm32f30x_flash.c ****   *     @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
 712:../src/stm32f30x_flash.c ****   *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
 713:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
 714:../src/stm32f30x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 715:../src/stm32f30x_flash.c ****   */
 716:../src/stm32f30x_flash.c **** FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
 717:../src/stm32f30x_flash.c **** {
 1095              		.loc 1 717 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 16
 1098              		@ frame_needed = 1, uses_anonymous_args = 0
 1099 06c8 80B5     		push	{r7, lr}
 1100              	.LCFI40:
 1101              		.cfi_def_cfa_offset 8
 1102              		.cfi_offset 7, -8
 1103              		.cfi_offset 14, -4
 1104 06ca 84B0     		sub	sp, sp, #16
 1105              	.LCFI41:
 1106              		.cfi_def_cfa_offset 24
 1107 06cc 00AF     		add	r7, sp, #0
 1108              	.LCFI42:
 1109              		.cfi_def_cfa_register 7
 1110 06ce 1346     		mov	r3, r2
 1111 06d0 0246     		mov	r2, r0
 1112 06d2 FA71     		strb	r2, [r7, #7]
 1113 06d4 0A46     		mov	r2, r1
 1114 06d6 BA71     		strb	r2, [r7, #6]
 1115 06d8 7B71     		strb	r3, [r7, #5]
 718:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1116              		.loc 1 718 0
 1117 06da 4FF00403 		mov	r3, #4
 1118 06de FB73     		strb	r3, [r7, #15]
 719:../src/stm32f30x_flash.c **** 
 720:../src/stm32f30x_flash.c ****   /* Check the parameters */
 721:../src/stm32f30x_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
 722:../src/stm32f30x_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
 723:../src/stm32f30x_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
 724:../src/stm32f30x_flash.c **** 
 725:../src/stm32f30x_flash.c ****   /* Authorize the small information block programming */
 726:../src/stm32f30x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY1;
 1119              		.loc 1 726 0
 1120 06e0 4FF40053 		mov	r3, #8192
 1121 06e4 C4F20203 		movt	r3, 16386
 1122 06e8 40F22312 		movw	r2, #291
 1123 06ec C4F26752 		movt	r2, 17767
 1124 06f0 9A60     		str	r2, [r3, #8]
 727:../src/stm32f30x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY2;
 1125              		.loc 1 727 0
 1126 06f2 4FF40053 		mov	r3, #8192
 1127 06f6 C4F20203 		movt	r3, 16386
 1128 06fa 48F6AB12 		movw	r2, #35243
 1129 06fe CCF6EF52 		movt	r2, 52719
 1130 0702 9A60     		str	r2, [r3, #8]
 728:../src/stm32f30x_flash.c ****   
 729:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 730:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1131              		.loc 1 730 0
 1132 0704 4FF43020 		mov	r0, #720896
 1133 0708 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1134 070c 0346     		mov	r3, r0
 1135 070e FB73     		strb	r3, [r7, #15]
 731:../src/stm32f30x_flash.c ****   
 732:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 1136              		.loc 1 732 0
 1137 0710 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1138 0712 042B     		cmp	r3, #4
 1139 0714 2FD1     		bne	.L43
 733:../src/stm32f30x_flash.c ****   {  
 734:../src/stm32f30x_flash.c ****     /* Enable the Option Bytes Programming operation */
 735:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 1140              		.loc 1 735 0
 1141 0716 4FF40053 		mov	r3, #8192
 1142 071a C4F20203 		movt	r3, 16386
 1143 071e 4FF40052 		mov	r2, #8192
 1144 0722 C4F20202 		movt	r2, 16386
 1145 0726 1269     		ldr	r2, [r2, #16]
 1146 0728 42F01002 		orr	r2, r2, #16
 1147 072c 1A61     		str	r2, [r3, #16]
 736:../src/stm32f30x_flash.c ****            
 737:../src/stm32f30x_flash.c ****     OB->USER = (uint8_t)((uint8_t)(OB_IWDG | OB_STOP) | (uint8_t)(OB_STDBY |0xF8));
 1148              		.loc 1 737 0
 1149 072e 4FF47843 		mov	r3, #63488
 1150 0732 C1F6FF73 		movt	r3, 8191
 1151 0736 F979     		ldrb	r1, [r7, #7]
 1152 0738 BA79     		ldrb	r2, [r7, #6]
 1153 073a 0A43     		orrs	r2, r2, r1
 1154 073c D1B2     		uxtb	r1, r2
 1155 073e 7A79     		ldrb	r2, [r7, #5]
 1156 0740 0A43     		orrs	r2, r2, r1
 1157 0742 D2B2     		uxtb	r2, r2
 1158 0744 62F00702 		orn	r2, r2, #7
 1159 0748 D2B2     		uxtb	r2, r2
 1160 074a 5A80     		strh	r2, [r3, #2]	@ movhi
 738:../src/stm32f30x_flash.c ****   
 739:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 740:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1161              		.loc 1 740 0
 1162 074c 4FF43020 		mov	r0, #720896
 1163 0750 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1164 0754 0346     		mov	r3, r0
 1165 0756 FB73     		strb	r3, [r7, #15]
 741:../src/stm32f30x_flash.c **** 
 742:../src/stm32f30x_flash.c ****     if(status != FLASH_TIMEOUT)
 1166              		.loc 1 742 0
 1167 0758 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1168 075a 052B     		cmp	r3, #5
 1169 075c 0BD0     		beq	.L43
 743:../src/stm32f30x_flash.c ****     {
 744:../src/stm32f30x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 745:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1170              		.loc 1 745 0
 1171 075e 4FF40053 		mov	r3, #8192
 1172 0762 C4F20203 		movt	r3, 16386
 1173 0766 4FF40052 		mov	r2, #8192
 1174 076a C4F20202 		movt	r2, 16386
 1175 076e 1269     		ldr	r2, [r2, #16]
 1176 0770 22F01002 		bic	r2, r2, #16
 1177 0774 1A61     		str	r2, [r3, #16]
 1178              	.L43:
 746:../src/stm32f30x_flash.c ****     }
 747:../src/stm32f30x_flash.c ****   }    
 748:../src/stm32f30x_flash.c ****   /* Return the Option Byte program Status */
 749:../src/stm32f30x_flash.c ****   return status;
 1179              		.loc 1 749 0
 1180 0776 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 750:../src/stm32f30x_flash.c **** }
 1181              		.loc 1 750 0
 1182 0778 1846     		mov	r0, r3
 1183 077a 07F11007 		add	r7, r7, #16
 1184 077e BD46     		mov	sp, r7
 1185 0780 80BD     		pop	{r7, pc}
 1186              		.cfi_endproc
 1187              	.LFE126:
 1189 0782 00BF     		.align	2
 1190              		.global	FLASH_OB_BOOTConfig
 1191              		.thumb
 1192              		.thumb_func
 1194              	FLASH_OB_BOOTConfig:
 1195              	.LFB127:
 751:../src/stm32f30x_flash.c **** 
 752:../src/stm32f30x_flash.c **** /**
 753:../src/stm32f30x_flash.c ****   * @brief  Sets or resets the BOOT1. 
 754:../src/stm32f30x_flash.c ****   * @param  OB_BOOT1: Set or Reset the BOOT1.
 755:../src/stm32f30x_flash.c ****   *   This parameter can be one of the following values:
 756:../src/stm32f30x_flash.c ****   *     @arg OB_BOOT1_RESET: BOOT1 Reset
 757:../src/stm32f30x_flash.c ****   *     @arg OB_BOOT1_SET: BOOT1 Set
 758:../src/stm32f30x_flash.c ****   * @retval None
 759:../src/stm32f30x_flash.c ****   */
 760:../src/stm32f30x_flash.c **** FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
 761:../src/stm32f30x_flash.c **** {
 1196              		.loc 1 761 0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 16
 1199              		@ frame_needed = 1, uses_anonymous_args = 0
 1200 0784 80B5     		push	{r7, lr}
 1201              	.LCFI43:
 1202              		.cfi_def_cfa_offset 8
 1203              		.cfi_offset 7, -8
 1204              		.cfi_offset 14, -4
 1205 0786 84B0     		sub	sp, sp, #16
 1206              	.LCFI44:
 1207              		.cfi_def_cfa_offset 24
 1208 0788 00AF     		add	r7, sp, #0
 1209              	.LCFI45:
 1210              		.cfi_def_cfa_register 7
 1211 078a 0346     		mov	r3, r0
 1212 078c FB71     		strb	r3, [r7, #7]
 762:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1213              		.loc 1 762 0
 1214 078e 4FF00403 		mov	r3, #4
 1215 0792 FB73     		strb	r3, [r7, #15]
 763:../src/stm32f30x_flash.c **** 
 764:../src/stm32f30x_flash.c ****   /* Check the parameters */
 765:../src/stm32f30x_flash.c ****   assert_param(IS_OB_BOOT1(OB_BOOT1));
 766:../src/stm32f30x_flash.c **** 
 767:../src/stm32f30x_flash.c ****   /* Authorize the small information block programming */
 768:../src/stm32f30x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY1;
 1216              		.loc 1 768 0
 1217 0794 4FF40053 		mov	r3, #8192
 1218 0798 C4F20203 		movt	r3, 16386
 1219 079c 40F22312 		movw	r2, #291
 1220 07a0 C4F26752 		movt	r2, 17767
 1221 07a4 9A60     		str	r2, [r3, #8]
 769:../src/stm32f30x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY2;
 1222              		.loc 1 769 0
 1223 07a6 4FF40053 		mov	r3, #8192
 1224 07aa C4F20203 		movt	r3, 16386
 1225 07ae 48F6AB12 		movw	r2, #35243
 1226 07b2 CCF6EF52 		movt	r2, 52719
 1227 07b6 9A60     		str	r2, [r3, #8]
 770:../src/stm32f30x_flash.c ****   
 771:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 772:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1228              		.loc 1 772 0
 1229 07b8 4FF43020 		mov	r0, #720896
 1230 07bc FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1231 07c0 0346     		mov	r3, r0
 1232 07c2 FB73     		strb	r3, [r7, #15]
 773:../src/stm32f30x_flash.c ****   
 774:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 1233              		.loc 1 774 0
 1234 07c4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1235 07c6 042B     		cmp	r3, #4
 1236 07c8 29D1     		bne	.L46
 775:../src/stm32f30x_flash.c ****   {  
 776:../src/stm32f30x_flash.c ****     /* Enable the Option Bytes Programming operation */
 777:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 1237              		.loc 1 777 0
 1238 07ca 4FF40053 		mov	r3, #8192
 1239 07ce C4F20203 		movt	r3, 16386
 1240 07d2 4FF40052 		mov	r2, #8192
 1241 07d6 C4F20202 		movt	r2, 16386
 1242 07da 1269     		ldr	r2, [r2, #16]
 1243 07dc 42F01002 		orr	r2, r2, #16
 1244 07e0 1A61     		str	r2, [r3, #16]
 778:../src/stm32f30x_flash.c ****            
 779:../src/stm32f30x_flash.c **** 	OB->USER = OB_BOOT1|0xEF;
 1245              		.loc 1 779 0
 1246 07e2 4FF47843 		mov	r3, #63488
 1247 07e6 C1F6FF73 		movt	r3, 8191
 1248 07ea FA79     		ldrb	r2, [r7, #7]
 1249 07ec 62F01002 		orn	r2, r2, #16
 1250 07f0 D2B2     		uxtb	r2, r2
 1251 07f2 5A80     		strh	r2, [r3, #2]	@ movhi
 780:../src/stm32f30x_flash.c ****   
 781:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 782:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1252              		.loc 1 782 0
 1253 07f4 4FF43020 		mov	r0, #720896
 1254 07f8 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1255 07fc 0346     		mov	r3, r0
 1256 07fe FB73     		strb	r3, [r7, #15]
 783:../src/stm32f30x_flash.c **** 
 784:../src/stm32f30x_flash.c ****     if(status != FLASH_TIMEOUT)
 1257              		.loc 1 784 0
 1258 0800 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1259 0802 052B     		cmp	r3, #5
 1260 0804 0BD0     		beq	.L46
 785:../src/stm32f30x_flash.c ****     {
 786:../src/stm32f30x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 787:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1261              		.loc 1 787 0
 1262 0806 4FF40053 		mov	r3, #8192
 1263 080a C4F20203 		movt	r3, 16386
 1264 080e 4FF40052 		mov	r2, #8192
 1265 0812 C4F20202 		movt	r2, 16386
 1266 0816 1269     		ldr	r2, [r2, #16]
 1267 0818 22F01002 		bic	r2, r2, #16
 1268 081c 1A61     		str	r2, [r3, #16]
 1269              	.L46:
 788:../src/stm32f30x_flash.c ****     }
 789:../src/stm32f30x_flash.c ****   }    
 790:../src/stm32f30x_flash.c ****   /* Return the Option Byte program Status */
 791:../src/stm32f30x_flash.c ****   return status;
 1270              		.loc 1 791 0
 1271 081e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 792:../src/stm32f30x_flash.c **** }
 1272              		.loc 1 792 0
 1273 0820 1846     		mov	r0, r3
 1274 0822 07F11007 		add	r7, r7, #16
 1275 0826 BD46     		mov	sp, r7
 1276 0828 80BD     		pop	{r7, pc}
 1277              		.cfi_endproc
 1278              	.LFE127:
 1280 082a 00BF     		.align	2
 1281              		.global	FLASH_OB_VDDAConfig
 1282              		.thumb
 1283              		.thumb_func
 1285              	FLASH_OB_VDDAConfig:
 1286              	.LFB128:
 793:../src/stm32f30x_flash.c **** 
 794:../src/stm32f30x_flash.c **** /**
 795:../src/stm32f30x_flash.c ****   * @brief  Sets or resets the analogue monitoring on VDDA Power source. 
 796:../src/stm32f30x_flash.c ****   * @param  OB_VDDA_ANALOG: Selects the analog monitoring on VDDA Power source.
 797:../src/stm32f30x_flash.c ****   *   This parameter can be one of the following values:
 798:../src/stm32f30x_flash.c ****   *     @arg OB_VDDA_ANALOG_ON: Analog monitoring on VDDA Power source ON
 799:../src/stm32f30x_flash.c ****   *     @arg OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source OFF
 800:../src/stm32f30x_flash.c ****   * @retval None
 801:../src/stm32f30x_flash.c ****   */
 802:../src/stm32f30x_flash.c **** FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
 803:../src/stm32f30x_flash.c **** {
 1287              		.loc 1 803 0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 16
 1290              		@ frame_needed = 1, uses_anonymous_args = 0
 1291 082c 80B5     		push	{r7, lr}
 1292              	.LCFI46:
 1293              		.cfi_def_cfa_offset 8
 1294              		.cfi_offset 7, -8
 1295              		.cfi_offset 14, -4
 1296 082e 84B0     		sub	sp, sp, #16
 1297              	.LCFI47:
 1298              		.cfi_def_cfa_offset 24
 1299 0830 00AF     		add	r7, sp, #0
 1300              	.LCFI48:
 1301              		.cfi_def_cfa_register 7
 1302 0832 0346     		mov	r3, r0
 1303 0834 FB71     		strb	r3, [r7, #7]
 804:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1304              		.loc 1 804 0
 1305 0836 4FF00403 		mov	r3, #4
 1306 083a FB73     		strb	r3, [r7, #15]
 805:../src/stm32f30x_flash.c **** 
 806:../src/stm32f30x_flash.c ****   /* Check the parameters */
 807:../src/stm32f30x_flash.c ****   assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));
 808:../src/stm32f30x_flash.c **** 
 809:../src/stm32f30x_flash.c ****   /* Authorize the small information block programming */
 810:../src/stm32f30x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY1;
 1307              		.loc 1 810 0
 1308 083c 4FF40053 		mov	r3, #8192
 1309 0840 C4F20203 		movt	r3, 16386
 1310 0844 40F22312 		movw	r2, #291
 1311 0848 C4F26752 		movt	r2, 17767
 1312 084c 9A60     		str	r2, [r3, #8]
 811:../src/stm32f30x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY2;
 1313              		.loc 1 811 0
 1314 084e 4FF40053 		mov	r3, #8192
 1315 0852 C4F20203 		movt	r3, 16386
 1316 0856 48F6AB12 		movw	r2, #35243
 1317 085a CCF6EF52 		movt	r2, 52719
 1318 085e 9A60     		str	r2, [r3, #8]
 812:../src/stm32f30x_flash.c ****   
 813:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 814:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1319              		.loc 1 814 0
 1320 0860 4FF43020 		mov	r0, #720896
 1321 0864 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1322 0868 0346     		mov	r3, r0
 1323 086a FB73     		strb	r3, [r7, #15]
 815:../src/stm32f30x_flash.c ****   
 816:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 1324              		.loc 1 816 0
 1325 086c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1326 086e 042B     		cmp	r3, #4
 1327 0870 29D1     		bne	.L49
 817:../src/stm32f30x_flash.c ****   {  
 818:../src/stm32f30x_flash.c ****     /* Enable the Option Bytes Programming operation */
 819:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 1328              		.loc 1 819 0
 1329 0872 4FF40053 		mov	r3, #8192
 1330 0876 C4F20203 		movt	r3, 16386
 1331 087a 4FF40052 		mov	r2, #8192
 1332 087e C4F20202 		movt	r2, 16386
 1333 0882 1269     		ldr	r2, [r2, #16]
 1334 0884 42F01002 		orr	r2, r2, #16
 1335 0888 1A61     		str	r2, [r3, #16]
 820:../src/stm32f30x_flash.c ****            
 821:../src/stm32f30x_flash.c **** 	OB->USER = OB_VDDA_ANALOG |0xDF;
 1336              		.loc 1 821 0
 1337 088a 4FF47843 		mov	r3, #63488
 1338 088e C1F6FF73 		movt	r3, 8191
 1339 0892 FA79     		ldrb	r2, [r7, #7]
 1340 0894 62F02002 		orn	r2, r2, #32
 1341 0898 D2B2     		uxtb	r2, r2
 1342 089a 5A80     		strh	r2, [r3, #2]	@ movhi
 822:../src/stm32f30x_flash.c ****   
 823:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 824:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1343              		.loc 1 824 0
 1344 089c 4FF43020 		mov	r0, #720896
 1345 08a0 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1346 08a4 0346     		mov	r3, r0
 1347 08a6 FB73     		strb	r3, [r7, #15]
 825:../src/stm32f30x_flash.c **** 
 826:../src/stm32f30x_flash.c ****     if(status != FLASH_TIMEOUT)
 1348              		.loc 1 826 0
 1349 08a8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1350 08aa 052B     		cmp	r3, #5
 1351 08ac 0BD0     		beq	.L49
 827:../src/stm32f30x_flash.c ****     {
 828:../src/stm32f30x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 829:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1352              		.loc 1 829 0
 1353 08ae 4FF40053 		mov	r3, #8192
 1354 08b2 C4F20203 		movt	r3, 16386
 1355 08b6 4FF40052 		mov	r2, #8192
 1356 08ba C4F20202 		movt	r2, 16386
 1357 08be 1269     		ldr	r2, [r2, #16]
 1358 08c0 22F01002 		bic	r2, r2, #16
 1359 08c4 1A61     		str	r2, [r3, #16]
 1360              	.L49:
 830:../src/stm32f30x_flash.c ****     }
 831:../src/stm32f30x_flash.c ****   }    
 832:../src/stm32f30x_flash.c ****   /* Return the Option Byte program Status */
 833:../src/stm32f30x_flash.c ****   return status;
 1361              		.loc 1 833 0
 1362 08c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 834:../src/stm32f30x_flash.c **** }
 1363              		.loc 1 834 0
 1364 08c8 1846     		mov	r0, r3
 1365 08ca 07F11007 		add	r7, r7, #16
 1366 08ce BD46     		mov	sp, r7
 1367 08d0 80BD     		pop	{r7, pc}
 1368              		.cfi_endproc
 1369              	.LFE128:
 1371 08d2 00BF     		.align	2
 1372              		.global	FLASH_OB_SRAMParityConfig
 1373              		.thumb
 1374              		.thumb_func
 1376              	FLASH_OB_SRAMParityConfig:
 1377              	.LFB129:
 835:../src/stm32f30x_flash.c **** 
 836:../src/stm32f30x_flash.c **** /**
 837:../src/stm32f30x_flash.c ****   * @brief  Sets or resets the SRAM partiy.
 838:../src/stm32f30x_flash.c ****   * @param  OB_SRAM_Parity: Set or Reset the SRAM partiy enable bit.
 839:../src/stm32f30x_flash.c ****   *         This parameter can be one of the following values:
 840:../src/stm32f30x_flash.c ****   *             @arg OB_SRAM_PARITY_SET: Set SRAM partiy.
 841:../src/stm32f30x_flash.c ****   *             @arg OB_SRAM_PARITY_RESET: Reset SRAM partiy.
 842:../src/stm32f30x_flash.c ****   * @retval None
 843:../src/stm32f30x_flash.c ****   */
 844:../src/stm32f30x_flash.c **** FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
 845:../src/stm32f30x_flash.c **** {
 1378              		.loc 1 845 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 16
 1381              		@ frame_needed = 1, uses_anonymous_args = 0
 1382 08d4 80B5     		push	{r7, lr}
 1383              	.LCFI49:
 1384              		.cfi_def_cfa_offset 8
 1385              		.cfi_offset 7, -8
 1386              		.cfi_offset 14, -4
 1387 08d6 84B0     		sub	sp, sp, #16
 1388              	.LCFI50:
 1389              		.cfi_def_cfa_offset 24
 1390 08d8 00AF     		add	r7, sp, #0
 1391              	.LCFI51:
 1392              		.cfi_def_cfa_register 7
 1393 08da 0346     		mov	r3, r0
 1394 08dc FB71     		strb	r3, [r7, #7]
 846:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1395              		.loc 1 846 0
 1396 08de 4FF00403 		mov	r3, #4
 1397 08e2 FB73     		strb	r3, [r7, #15]
 847:../src/stm32f30x_flash.c **** 
 848:../src/stm32f30x_flash.c ****   /* Check the parameters */
 849:../src/stm32f30x_flash.c ****   assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));
 850:../src/stm32f30x_flash.c **** 
 851:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 852:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1398              		.loc 1 852 0
 1399 08e4 4FF43020 		mov	r0, #720896
 1400 08e8 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1401 08ec 0346     		mov	r3, r0
 1402 08ee FB73     		strb	r3, [r7, #15]
 853:../src/stm32f30x_flash.c ****   
 854:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 1403              		.loc 1 854 0
 1404 08f0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1405 08f2 042B     		cmp	r3, #4
 1406 08f4 29D1     		bne	.L52
 855:../src/stm32f30x_flash.c ****   {  
 856:../src/stm32f30x_flash.c ****     /* Enable the Option Bytes Programming operation */
 857:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 1407              		.loc 1 857 0
 1408 08f6 4FF40053 		mov	r3, #8192
 1409 08fa C4F20203 		movt	r3, 16386
 1410 08fe 4FF40052 		mov	r2, #8192
 1411 0902 C4F20202 		movt	r2, 16386
 1412 0906 1269     		ldr	r2, [r2, #16]
 1413 0908 42F01002 		orr	r2, r2, #16
 1414 090c 1A61     		str	r2, [r3, #16]
 858:../src/stm32f30x_flash.c **** 
 859:../src/stm32f30x_flash.c ****     OB->USER = OB_SRAM_Parity | 0xBF;
 1415              		.loc 1 859 0
 1416 090e 4FF47843 		mov	r3, #63488
 1417 0912 C1F6FF73 		movt	r3, 8191
 1418 0916 FA79     		ldrb	r2, [r7, #7]
 1419 0918 62F04002 		orn	r2, r2, #64
 1420 091c D2B2     		uxtb	r2, r2
 1421 091e 5A80     		strh	r2, [r3, #2]	@ movhi
 860:../src/stm32f30x_flash.c ****   
 861:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 862:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1422              		.loc 1 862 0
 1423 0920 4FF43020 		mov	r0, #720896
 1424 0924 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1425 0928 0346     		mov	r3, r0
 1426 092a FB73     		strb	r3, [r7, #15]
 863:../src/stm32f30x_flash.c **** 
 864:../src/stm32f30x_flash.c ****     if(status != FLASH_TIMEOUT)
 1427              		.loc 1 864 0
 1428 092c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1429 092e 052B     		cmp	r3, #5
 1430 0930 0BD0     		beq	.L52
 865:../src/stm32f30x_flash.c ****     {
 866:../src/stm32f30x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 867:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1431              		.loc 1 867 0
 1432 0932 4FF40053 		mov	r3, #8192
 1433 0936 C4F20203 		movt	r3, 16386
 1434 093a 4FF40052 		mov	r2, #8192
 1435 093e C4F20202 		movt	r2, 16386
 1436 0942 1269     		ldr	r2, [r2, #16]
 1437 0944 22F01002 		bic	r2, r2, #16
 1438 0948 1A61     		str	r2, [r3, #16]
 1439              	.L52:
 868:../src/stm32f30x_flash.c ****     }
 869:../src/stm32f30x_flash.c ****   }
 870:../src/stm32f30x_flash.c ****   /* Return the Option Byte program Status */
 871:../src/stm32f30x_flash.c ****   return status;
 1440              		.loc 1 871 0
 1441 094a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 872:../src/stm32f30x_flash.c **** }
 1442              		.loc 1 872 0
 1443 094c 1846     		mov	r0, r3
 1444 094e 07F11007 		add	r7, r7, #16
 1445 0952 BD46     		mov	sp, r7
 1446 0954 80BD     		pop	{r7, pc}
 1447              		.cfi_endproc
 1448              	.LFE129:
 1450 0956 00BF     		.align	2
 1451              		.global	FLASH_OB_WriteUser
 1452              		.thumb
 1453              		.thumb_func
 1455              	FLASH_OB_WriteUser:
 1456              	.LFB130:
 873:../src/stm32f30x_flash.c **** 
 874:../src/stm32f30x_flash.c **** /**
 875:../src/stm32f30x_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY/ BOOT1 and OB_VDDA_
 876:../src/stm32f30x_flash.c ****   * @note   To correctly run this function, the FLASH_OB_Unlock() function
 877:../src/stm32f30x_flash.c ****   *         must be called before.
 878:../src/stm32f30x_flash.c ****   * @note   Call the FLASH_OB_Lock() to disable the flash control register access and the option by
 879:../src/stm32f30x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)   
 880:../src/stm32f30x_flash.c ****   * @param  OB_USER: Selects all user option bytes
 881:../src/stm32f30x_flash.c ****   *   This parameter is a combination of the following values:
 882:../src/stm32f30x_flash.c ****   *     @arg OB_IWDG_SW / OB_IWDG_HW: Software / Hardware WDG selected
 883:../src/stm32f30x_flash.c ****   *     @arg OB_STOP_NoRST / OB_STOP_RST: No reset / Reset generated when entering in STOP
 884:../src/stm32f30x_flash.c ****   *     @arg OB_STDBY_NoRST / OB_STDBY_RST: No reset / Reset generated when entering in STANDBY
 885:../src/stm32f30x_flash.c ****   *     @arg OB_BOOT1_RESET / OB_BOOT1_SET: BOOT1 Reset / Set
 886:../src/stm32f30x_flash.c ****   *     @arg OB_VDDA_ANALOG_ON / OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source ON / OF
 887:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: 
 888:../src/stm32f30x_flash.c ****   * FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 889:../src/stm32f30x_flash.c ****   */
 890:../src/stm32f30x_flash.c **** FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
 891:../src/stm32f30x_flash.c **** {
 1457              		.loc 1 891 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 16
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461 0958 80B5     		push	{r7, lr}
 1462              	.LCFI52:
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 7, -8
 1465              		.cfi_offset 14, -4
 1466 095a 84B0     		sub	sp, sp, #16
 1467              	.LCFI53:
 1468              		.cfi_def_cfa_offset 24
 1469 095c 00AF     		add	r7, sp, #0
 1470              	.LCFI54:
 1471              		.cfi_def_cfa_register 7
 1472 095e 0346     		mov	r3, r0
 1473 0960 FB71     		strb	r3, [r7, #7]
 892:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1474              		.loc 1 892 0
 1475 0962 4FF00403 		mov	r3, #4
 1476 0966 FB73     		strb	r3, [r7, #15]
 893:../src/stm32f30x_flash.c **** 
 894:../src/stm32f30x_flash.c ****   /* Authorize the small information block programming */
 895:../src/stm32f30x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY1;
 1477              		.loc 1 895 0
 1478 0968 4FF40053 		mov	r3, #8192
 1479 096c C4F20203 		movt	r3, 16386
 1480 0970 40F22312 		movw	r2, #291
 1481 0974 C4F26752 		movt	r2, 17767
 1482 0978 9A60     		str	r2, [r3, #8]
 896:../src/stm32f30x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY2;
 1483              		.loc 1 896 0
 1484 097a 4FF40053 		mov	r3, #8192
 1485 097e C4F20203 		movt	r3, 16386
 1486 0982 48F6AB12 		movw	r2, #35243
 1487 0986 CCF6EF52 		movt	r2, 52719
 1488 098a 9A60     		str	r2, [r3, #8]
 897:../src/stm32f30x_flash.c ****   
 898:../src/stm32f30x_flash.c ****   /* Wait for last operation to be completed */
 899:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1489              		.loc 1 899 0
 1490 098c 4FF43020 		mov	r0, #720896
 1491 0990 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1492 0994 0346     		mov	r3, r0
 1493 0996 FB73     		strb	r3, [r7, #15]
 900:../src/stm32f30x_flash.c ****   
 901:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 1494              		.loc 1 901 0
 1495 0998 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1496 099a 042B     		cmp	r3, #4
 1497 099c 29D1     		bne	.L55
 902:../src/stm32f30x_flash.c ****   {  
 903:../src/stm32f30x_flash.c ****     /* Enable the Option Bytes Programming operation */
 904:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 1498              		.loc 1 904 0
 1499 099e 4FF40053 		mov	r3, #8192
 1500 09a2 C4F20203 		movt	r3, 16386
 1501 09a6 4FF40052 		mov	r2, #8192
 1502 09aa C4F20202 		movt	r2, 16386
 1503 09ae 1269     		ldr	r2, [r2, #16]
 1504 09b0 42F01002 		orr	r2, r2, #16
 1505 09b4 1A61     		str	r2, [r3, #16]
 905:../src/stm32f30x_flash.c ****            
 906:../src/stm32f30x_flash.c **** 	  OB->USER = OB_USER | 0x88;
 1506              		.loc 1 906 0
 1507 09b6 4FF47843 		mov	r3, #63488
 1508 09ba C1F6FF73 		movt	r3, 8191
 1509 09be FA79     		ldrb	r2, [r7, #7]
 1510 09c0 62F07702 		orn	r2, r2, #119
 1511 09c4 D2B2     		uxtb	r2, r2
 1512 09c6 5A80     		strh	r2, [r3, #2]	@ movhi
 907:../src/stm32f30x_flash.c ****   
 908:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 909:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1513              		.loc 1 909 0
 1514 09c8 4FF43020 		mov	r0, #720896
 1515 09cc FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1516 09d0 0346     		mov	r3, r0
 1517 09d2 FB73     		strb	r3, [r7, #15]
 910:../src/stm32f30x_flash.c **** 
 911:../src/stm32f30x_flash.c ****     if(status != FLASH_TIMEOUT)
 1518              		.loc 1 911 0
 1519 09d4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1520 09d6 052B     		cmp	r3, #5
 1521 09d8 0BD0     		beq	.L55
 912:../src/stm32f30x_flash.c ****     {
 913:../src/stm32f30x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 914:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1522              		.loc 1 914 0
 1523 09da 4FF40053 		mov	r3, #8192
 1524 09de C4F20203 		movt	r3, 16386
 1525 09e2 4FF40052 		mov	r2, #8192
 1526 09e6 C4F20202 		movt	r2, 16386
 1527 09ea 1269     		ldr	r2, [r2, #16]
 1528 09ec 22F01002 		bic	r2, r2, #16
 1529 09f0 1A61     		str	r2, [r3, #16]
 1530              	.L55:
 915:../src/stm32f30x_flash.c ****     }
 916:../src/stm32f30x_flash.c ****   }    
 917:../src/stm32f30x_flash.c ****   /* Return the Option Byte program Status */
 918:../src/stm32f30x_flash.c ****   return status;
 1531              		.loc 1 918 0
 1532 09f2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 919:../src/stm32f30x_flash.c **** 
 920:../src/stm32f30x_flash.c **** }
 1533              		.loc 1 920 0
 1534 09f4 1846     		mov	r0, r3
 1535 09f6 07F11007 		add	r7, r7, #16
 1536 09fa BD46     		mov	sp, r7
 1537 09fc 80BD     		pop	{r7, pc}
 1538              		.cfi_endproc
 1539              	.LFE130:
 1541 09fe 00BF     		.align	2
 1542              		.global	FLASH_ProgramOptionByteData
 1543              		.thumb
 1544              		.thumb_func
 1546              	FLASH_ProgramOptionByteData:
 1547              	.LFB131:
 921:../src/stm32f30x_flash.c **** 
 922:../src/stm32f30x_flash.c **** /**
 923:../src/stm32f30x_flash.c ****   * @brief  Programs a half word at a specified Option Byte Data address.
 924:../src/stm32f30x_flash.c ****   * @note    To correctly run this function, the FLASH_OB_Unlock() function
 925:../src/stm32f30x_flash.c ****   *           must be called before.
 926:../src/stm32f30x_flash.c ****   *          Call the FLASH_OB_Lock() to disable the flash control register access and the option b
 927:../src/stm32f30x_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 928:../src/stm32f30x_flash.c ****   * @param  Address: specifies the address to be programmed.
 929:../src/stm32f30x_flash.c ****   *   This parameter can be 0x1FFFF804 or 0x1FFFF806. 
 930:../src/stm32f30x_flash.c ****   * @param  Data: specifies the data to be programmed.
 931:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 932:../src/stm32f30x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 933:../src/stm32f30x_flash.c ****   */
 934:../src/stm32f30x_flash.c **** FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
 935:../src/stm32f30x_flash.c **** {
 1548              		.loc 1 935 0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 16
 1551              		@ frame_needed = 1, uses_anonymous_args = 0
 1552 0a00 80B5     		push	{r7, lr}
 1553              	.LCFI55:
 1554              		.cfi_def_cfa_offset 8
 1555              		.cfi_offset 7, -8
 1556              		.cfi_offset 14, -4
 1557 0a02 84B0     		sub	sp, sp, #16
 1558              	.LCFI56:
 1559              		.cfi_def_cfa_offset 24
 1560 0a04 00AF     		add	r7, sp, #0
 1561              	.LCFI57:
 1562              		.cfi_def_cfa_register 7
 1563 0a06 7860     		str	r0, [r7, #4]
 1564 0a08 0B46     		mov	r3, r1
 1565 0a0a FB70     		strb	r3, [r7, #3]
 936:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1566              		.loc 1 936 0
 1567 0a0c 4FF00403 		mov	r3, #4
 1568 0a10 FB73     		strb	r3, [r7, #15]
 937:../src/stm32f30x_flash.c ****   /* Check the parameters */
 938:../src/stm32f30x_flash.c ****   assert_param(IS_OB_DATA_ADDRESS(Address));
 939:../src/stm32f30x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1569              		.loc 1 939 0
 1570 0a12 4FF43020 		mov	r0, #720896
 1571 0a16 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1572 0a1a 0346     		mov	r3, r0
 1573 0a1c FB73     		strb	r3, [r7, #15]
 940:../src/stm32f30x_flash.c **** 
 941:../src/stm32f30x_flash.c ****   if(status == FLASH_COMPLETE)
 1574              		.loc 1 941 0
 1575 0a1e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1576 0a20 042B     		cmp	r3, #4
 1577 0a22 24D1     		bne	.L58
 942:../src/stm32f30x_flash.c ****   {
 943:../src/stm32f30x_flash.c ****     /* Enables the Option Bytes Programming operation */
 944:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 1578              		.loc 1 944 0
 1579 0a24 4FF40053 		mov	r3, #8192
 1580 0a28 C4F20203 		movt	r3, 16386
 1581 0a2c 4FF40052 		mov	r2, #8192
 1582 0a30 C4F20202 		movt	r2, 16386
 1583 0a34 1269     		ldr	r2, [r2, #16]
 1584 0a36 42F01002 		orr	r2, r2, #16
 1585 0a3a 1A61     		str	r2, [r3, #16]
 945:../src/stm32f30x_flash.c ****     *(__IO uint16_t*)Address = Data;
 1586              		.loc 1 945 0
 1587 0a3c 7B68     		ldr	r3, [r7, #4]
 1588 0a3e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1589 0a40 92B2     		uxth	r2, r2
 1590 0a42 1A80     		strh	r2, [r3, #0]	@ movhi
 946:../src/stm32f30x_flash.c ****     
 947:../src/stm32f30x_flash.c ****     /* Wait for last operation to be completed */
 948:../src/stm32f30x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1591              		.loc 1 948 0
 1592 0a44 4FF43020 		mov	r0, #720896
 1593 0a48 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1594 0a4c 0346     		mov	r3, r0
 1595 0a4e FB73     		strb	r3, [r7, #15]
 949:../src/stm32f30x_flash.c ****     
 950:../src/stm32f30x_flash.c ****     if(status != FLASH_TIMEOUT)
 1596              		.loc 1 950 0
 1597 0a50 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1598 0a52 052B     		cmp	r3, #5
 1599 0a54 0BD0     		beq	.L58
 951:../src/stm32f30x_flash.c ****     {
 952:../src/stm32f30x_flash.c ****       /* If the program operation is completed, disable the OPTPG Bit */
 953:../src/stm32f30x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1600              		.loc 1 953 0
 1601 0a56 4FF40053 		mov	r3, #8192
 1602 0a5a C4F20203 		movt	r3, 16386
 1603 0a5e 4FF40052 		mov	r2, #8192
 1604 0a62 C4F20202 		movt	r2, 16386
 1605 0a66 1269     		ldr	r2, [r2, #16]
 1606 0a68 22F01002 		bic	r2, r2, #16
 1607 0a6c 1A61     		str	r2, [r3, #16]
 1608              	.L58:
 954:../src/stm32f30x_flash.c ****     }
 955:../src/stm32f30x_flash.c ****   }
 956:../src/stm32f30x_flash.c ****   /* Return the Option Byte Data Program Status */
 957:../src/stm32f30x_flash.c ****   return status;
 1609              		.loc 1 957 0
 1610 0a6e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 958:../src/stm32f30x_flash.c **** }
 1611              		.loc 1 958 0
 1612 0a70 1846     		mov	r0, r3
 1613 0a72 07F11007 		add	r7, r7, #16
 1614 0a76 BD46     		mov	sp, r7
 1615 0a78 80BD     		pop	{r7, pc}
 1616              		.cfi_endproc
 1617              	.LFE131:
 1619 0a7a 00BF     		.align	2
 1620              		.global	FLASH_OB_GetUser
 1621              		.thumb
 1622              		.thumb_func
 1624              	FLASH_OB_GetUser:
 1625              	.LFB132:
 959:../src/stm32f30x_flash.c **** 
 960:../src/stm32f30x_flash.c **** /**
 961:../src/stm32f30x_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
 962:../src/stm32f30x_flash.c ****   * @param  None
 963:../src/stm32f30x_flash.c ****   * @retval The FLASH User Option Bytes .
 964:../src/stm32f30x_flash.c ****   */
 965:../src/stm32f30x_flash.c **** uint8_t FLASH_OB_GetUser(void)
 966:../src/stm32f30x_flash.c **** {
 1626              		.loc 1 966 0
 1627              		.cfi_startproc
 1628              		@ args = 0, pretend = 0, frame = 0
 1629              		@ frame_needed = 1, uses_anonymous_args = 0
 1630              		@ link register save eliminated.
 1631 0a7c 80B4     		push	{r7}
 1632              	.LCFI58:
 1633              		.cfi_def_cfa_offset 4
 1634              		.cfi_offset 7, -4
 1635 0a7e 00AF     		add	r7, sp, #0
 1636              	.LCFI59:
 1637              		.cfi_def_cfa_register 7
 967:../src/stm32f30x_flash.c ****   /* Return the User Option Byte */
 968:../src/stm32f30x_flash.c ****   return (uint8_t)(FLASH->OBR >> 8);
 1638              		.loc 1 968 0
 1639 0a80 4FF40053 		mov	r3, #8192
 1640 0a84 C4F20203 		movt	r3, 16386
 1641 0a88 DB69     		ldr	r3, [r3, #28]
 1642 0a8a 4FEA1323 		lsr	r3, r3, #8
 1643 0a8e DBB2     		uxtb	r3, r3
 969:../src/stm32f30x_flash.c **** }
 1644              		.loc 1 969 0
 1645 0a90 1846     		mov	r0, r3
 1646 0a92 BD46     		mov	sp, r7
 1647 0a94 80BC     		pop	{r7}
 1648 0a96 7047     		bx	lr
 1649              		.cfi_endproc
 1650              	.LFE132:
 1652              		.align	2
 1653              		.global	FLASH_OB_GetWRP
 1654              		.thumb
 1655              		.thumb_func
 1657              	FLASH_OB_GetWRP:
 1658              	.LFB133:
 970:../src/stm32f30x_flash.c **** 
 971:../src/stm32f30x_flash.c **** /**
 972:../src/stm32f30x_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
 973:../src/stm32f30x_flash.c ****   * @param  None
 974:../src/stm32f30x_flash.c ****   * @retval The FLASH Write Protection Option Bytes value
 975:../src/stm32f30x_flash.c ****   */
 976:../src/stm32f30x_flash.c **** uint32_t FLASH_OB_GetWRP(void)
 977:../src/stm32f30x_flash.c **** {
 1659              		.loc 1 977 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 1, uses_anonymous_args = 0
 1663              		@ link register save eliminated.
 1664 0a98 80B4     		push	{r7}
 1665              	.LCFI60:
 1666              		.cfi_def_cfa_offset 4
 1667              		.cfi_offset 7, -4
 1668 0a9a 00AF     		add	r7, sp, #0
 1669              	.LCFI61:
 1670              		.cfi_def_cfa_register 7
 978:../src/stm32f30x_flash.c ****   /* Return the FLASH write protection Register value */
 979:../src/stm32f30x_flash.c ****   return (uint32_t)(FLASH->WRPR);
 1671              		.loc 1 979 0
 1672 0a9c 4FF40053 		mov	r3, #8192
 1673 0aa0 C4F20203 		movt	r3, 16386
 1674 0aa4 1B6A     		ldr	r3, [r3, #32]
 980:../src/stm32f30x_flash.c **** }
 1675              		.loc 1 980 0
 1676 0aa6 1846     		mov	r0, r3
 1677 0aa8 BD46     		mov	sp, r7
 1678 0aaa 80BC     		pop	{r7}
 1679 0aac 7047     		bx	lr
 1680              		.cfi_endproc
 1681              	.LFE133:
 1683 0aae 00BF     		.align	2
 1684              		.global	FLASH_OB_GetRDP
 1685              		.thumb
 1686              		.thumb_func
 1688              	FLASH_OB_GetRDP:
 1689              	.LFB134:
 981:../src/stm32f30x_flash.c **** 
 982:../src/stm32f30x_flash.c **** /**
 983:../src/stm32f30x_flash.c ****   * @brief  Checks whether the FLASH Read out Protection Status is set or not.
 984:../src/stm32f30x_flash.c ****   * @param  None
 985:../src/stm32f30x_flash.c ****   * @retval FLASH ReadOut Protection Status(SET or RESET)
 986:../src/stm32f30x_flash.c ****   */
 987:../src/stm32f30x_flash.c **** FlagStatus FLASH_OB_GetRDP(void)
 988:../src/stm32f30x_flash.c **** {
 1690              		.loc 1 988 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 8
 1693              		@ frame_needed = 1, uses_anonymous_args = 0
 1694              		@ link register save eliminated.
 1695 0ab0 80B4     		push	{r7}
 1696              	.LCFI62:
 1697              		.cfi_def_cfa_offset 4
 1698              		.cfi_offset 7, -4
 1699 0ab2 83B0     		sub	sp, sp, #12
 1700              	.LCFI63:
 1701              		.cfi_def_cfa_offset 16
 1702 0ab4 00AF     		add	r7, sp, #0
 1703              	.LCFI64:
 1704              		.cfi_def_cfa_register 7
 989:../src/stm32f30x_flash.c ****   FlagStatus readstatus = RESET;
 1705              		.loc 1 989 0
 1706 0ab6 4FF00003 		mov	r3, #0
 1707 0aba FB71     		strb	r3, [r7, #7]
 990:../src/stm32f30x_flash.c ****   
 991:../src/stm32f30x_flash.c ****   if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
 1708              		.loc 1 991 0
 1709 0abc 4FF40053 		mov	r3, #8192
 1710 0ac0 C4F20203 		movt	r3, 16386
 1711 0ac4 DB69     		ldr	r3, [r3, #28]
 1712 0ac6 DBB2     		uxtb	r3, r3
 1713 0ac8 03F00603 		and	r3, r3, #6
 1714 0acc 002B     		cmp	r3, #0
 1715 0ace 03D0     		beq	.L65
 992:../src/stm32f30x_flash.c ****   {
 993:../src/stm32f30x_flash.c ****     readstatus = SET;
 1716              		.loc 1 993 0
 1717 0ad0 4FF00103 		mov	r3, #1
 1718 0ad4 FB71     		strb	r3, [r7, #7]
 1719 0ad6 02E0     		b	.L66
 1720              	.L65:
 994:../src/stm32f30x_flash.c ****   }
 995:../src/stm32f30x_flash.c ****   else
 996:../src/stm32f30x_flash.c ****   {
 997:../src/stm32f30x_flash.c ****     readstatus = RESET;
 1721              		.loc 1 997 0
 1722 0ad8 4FF00003 		mov	r3, #0
 1723 0adc FB71     		strb	r3, [r7, #7]
 1724              	.L66:
 998:../src/stm32f30x_flash.c ****   }
 999:../src/stm32f30x_flash.c ****   return readstatus;
 1725              		.loc 1 999 0
 1726 0ade FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1000:../src/stm32f30x_flash.c **** }
 1727              		.loc 1 1000 0
 1728 0ae0 1846     		mov	r0, r3
 1729 0ae2 07F10C07 		add	r7, r7, #12
 1730 0ae6 BD46     		mov	sp, r7
 1731 0ae8 80BC     		pop	{r7}
 1732 0aea 7047     		bx	lr
 1733              		.cfi_endproc
 1734              	.LFE134:
 1736              		.align	2
 1737              		.global	FLASH_ITConfig
 1738              		.thumb
 1739              		.thumb_func
 1741              	FLASH_ITConfig:
 1742              	.LFB135:
1001:../src/stm32f30x_flash.c **** 
1002:../src/stm32f30x_flash.c **** /**
1003:../src/stm32f30x_flash.c ****   * @}
1004:../src/stm32f30x_flash.c ****   */
1005:../src/stm32f30x_flash.c **** 
1006:../src/stm32f30x_flash.c **** /** @defgroup FLASH_Group4 Interrupts and flags management functions
1007:../src/stm32f30x_flash.c ****  *  @brief   Interrupts and flags management functions
1008:../src/stm32f30x_flash.c ****  *
1009:../src/stm32f30x_flash.c **** @verbatim   
1010:../src/stm32f30x_flash.c ****  ===============================================================================
1011:../src/stm32f30x_flash.c ****              ##### Interrupts and flags management functions #####
1012:../src/stm32f30x_flash.c ****  ===============================================================================  
1013:../src/stm32f30x_flash.c **** 
1014:../src/stm32f30x_flash.c **** @endverbatim
1015:../src/stm32f30x_flash.c ****   * @{
1016:../src/stm32f30x_flash.c ****   */
1017:../src/stm32f30x_flash.c **** 
1018:../src/stm32f30x_flash.c **** /**
1019:../src/stm32f30x_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
1020:../src/stm32f30x_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or 
1021:../src/stm32f30x_flash.c ****   *         disabled.
1022:../src/stm32f30x_flash.c ****   *   This parameter can be any combination of the following values:     
1023:../src/stm32f30x_flash.c ****   *     @arg FLASH_IT_EOP: FLASH end of programming Interrupt
1024:../src/stm32f30x_flash.c ****   *     @arg FLASH_IT_ERR: FLASH Error Interrupt 
1025:../src/stm32f30x_flash.c ****   * @retval None 
1026:../src/stm32f30x_flash.c ****   */
1027:../src/stm32f30x_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1028:../src/stm32f30x_flash.c **** {
 1743              		.loc 1 1028 0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 8
 1746              		@ frame_needed = 1, uses_anonymous_args = 0
 1747              		@ link register save eliminated.
 1748 0aec 80B4     		push	{r7}
 1749              	.LCFI65:
 1750              		.cfi_def_cfa_offset 4
 1751              		.cfi_offset 7, -4
 1752 0aee 83B0     		sub	sp, sp, #12
 1753              	.LCFI66:
 1754              		.cfi_def_cfa_offset 16
 1755 0af0 00AF     		add	r7, sp, #0
 1756              	.LCFI67:
 1757              		.cfi_def_cfa_register 7
 1758 0af2 7860     		str	r0, [r7, #4]
 1759 0af4 0B46     		mov	r3, r1
 1760 0af6 FB70     		strb	r3, [r7, #3]
1029:../src/stm32f30x_flash.c ****   /* Check the parameters */
1030:../src/stm32f30x_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1031:../src/stm32f30x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1032:../src/stm32f30x_flash.c ****   
1033:../src/stm32f30x_flash.c ****   if(NewState != DISABLE)
 1761              		.loc 1 1033 0
 1762 0af8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1763 0afa 002B     		cmp	r3, #0
 1764 0afc 0CD0     		beq	.L69
1034:../src/stm32f30x_flash.c ****   {
1035:../src/stm32f30x_flash.c ****     /* Enable the interrupt sources */
1036:../src/stm32f30x_flash.c ****     FLASH->CR |= FLASH_IT;
 1765              		.loc 1 1036 0
 1766 0afe 4FF40053 		mov	r3, #8192
 1767 0b02 C4F20203 		movt	r3, 16386
 1768 0b06 4FF40052 		mov	r2, #8192
 1769 0b0a C4F20202 		movt	r2, 16386
 1770 0b0e 1169     		ldr	r1, [r2, #16]
 1771 0b10 7A68     		ldr	r2, [r7, #4]
 1772 0b12 0A43     		orrs	r2, r2, r1
 1773 0b14 1A61     		str	r2, [r3, #16]
 1774 0b16 0DE0     		b	.L68
 1775              	.L69:
1037:../src/stm32f30x_flash.c ****   }
1038:../src/stm32f30x_flash.c ****   else
1039:../src/stm32f30x_flash.c ****   {
1040:../src/stm32f30x_flash.c ****     /* Disable the interrupt sources */
1041:../src/stm32f30x_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
 1776              		.loc 1 1041 0
 1777 0b18 4FF40053 		mov	r3, #8192
 1778 0b1c C4F20203 		movt	r3, 16386
 1779 0b20 4FF40052 		mov	r2, #8192
 1780 0b24 C4F20202 		movt	r2, 16386
 1781 0b28 1169     		ldr	r1, [r2, #16]
 1782 0b2a 7A68     		ldr	r2, [r7, #4]
 1783 0b2c 6FEA0202 		mvn	r2, r2
 1784 0b30 0A40     		ands	r2, r2, r1
 1785 0b32 1A61     		str	r2, [r3, #16]
 1786              	.L68:
1042:../src/stm32f30x_flash.c ****   }
1043:../src/stm32f30x_flash.c **** }
 1787              		.loc 1 1043 0
 1788 0b34 07F10C07 		add	r7, r7, #12
 1789 0b38 BD46     		mov	sp, r7
 1790 0b3a 80BC     		pop	{r7}
 1791 0b3c 7047     		bx	lr
 1792              		.cfi_endproc
 1793              	.LFE135:
 1795 0b3e 00BF     		.align	2
 1796              		.global	FLASH_GetFlagStatus
 1797              		.thumb
 1798              		.thumb_func
 1800              	FLASH_GetFlagStatus:
 1801              	.LFB136:
1044:../src/stm32f30x_flash.c **** 
1045:../src/stm32f30x_flash.c **** /**
1046:../src/stm32f30x_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1047:../src/stm32f30x_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1048:../src/stm32f30x_flash.c ****   *   This parameter can be one of the following values:
1049:../src/stm32f30x_flash.c ****   *     @arg FLASH_FLAG_BSY: FLASH write/erase operations in progress flag 
1050:../src/stm32f30x_flash.c ****   *     @arg FLASH_FLAG_PGERR: FLASH Programming error flag flag
1051:../src/stm32f30x_flash.c ****   *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
1052:../src/stm32f30x_flash.c ****   *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag        
1053:../src/stm32f30x_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1054:../src/stm32f30x_flash.c ****   */
1055:../src/stm32f30x_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1056:../src/stm32f30x_flash.c **** {
 1802              		.loc 1 1056 0
 1803              		.cfi_startproc
 1804              		@ args = 0, pretend = 0, frame = 16
 1805              		@ frame_needed = 1, uses_anonymous_args = 0
 1806              		@ link register save eliminated.
 1807 0b40 80B4     		push	{r7}
 1808              	.LCFI68:
 1809              		.cfi_def_cfa_offset 4
 1810              		.cfi_offset 7, -4
 1811 0b42 85B0     		sub	sp, sp, #20
 1812              	.LCFI69:
 1813              		.cfi_def_cfa_offset 24
 1814 0b44 00AF     		add	r7, sp, #0
 1815              	.LCFI70:
 1816              		.cfi_def_cfa_register 7
 1817 0b46 7860     		str	r0, [r7, #4]
1057:../src/stm32f30x_flash.c ****   FlagStatus bitstatus = RESET;
 1818              		.loc 1 1057 0
 1819 0b48 4FF00003 		mov	r3, #0
 1820 0b4c FB73     		strb	r3, [r7, #15]
1058:../src/stm32f30x_flash.c **** 
1059:../src/stm32f30x_flash.c ****   /* Check the parameters */
1060:../src/stm32f30x_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
1061:../src/stm32f30x_flash.c **** 
1062:../src/stm32f30x_flash.c ****   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 1821              		.loc 1 1062 0
 1822 0b4e 4FF40053 		mov	r3, #8192
 1823 0b52 C4F20203 		movt	r3, 16386
 1824 0b56 DA68     		ldr	r2, [r3, #12]
 1825 0b58 7B68     		ldr	r3, [r7, #4]
 1826 0b5a 1340     		ands	r3, r3, r2
 1827 0b5c 002B     		cmp	r3, #0
 1828 0b5e 03D0     		beq	.L72
1063:../src/stm32f30x_flash.c ****   {
1064:../src/stm32f30x_flash.c ****     bitstatus = SET;
 1829              		.loc 1 1064 0
 1830 0b60 4FF00103 		mov	r3, #1
 1831 0b64 FB73     		strb	r3, [r7, #15]
 1832 0b66 02E0     		b	.L73
 1833              	.L72:
1065:../src/stm32f30x_flash.c ****   }
1066:../src/stm32f30x_flash.c ****   else
1067:../src/stm32f30x_flash.c ****   {
1068:../src/stm32f30x_flash.c ****     bitstatus = RESET;
 1834              		.loc 1 1068 0
 1835 0b68 4FF00003 		mov	r3, #0
 1836 0b6c FB73     		strb	r3, [r7, #15]
 1837              	.L73:
1069:../src/stm32f30x_flash.c ****   }
1070:../src/stm32f30x_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1071:../src/stm32f30x_flash.c ****   return bitstatus; 
 1838              		.loc 1 1071 0
 1839 0b6e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1072:../src/stm32f30x_flash.c **** }
 1840              		.loc 1 1072 0
 1841 0b70 1846     		mov	r0, r3
 1842 0b72 07F11407 		add	r7, r7, #20
 1843 0b76 BD46     		mov	sp, r7
 1844 0b78 80BC     		pop	{r7}
 1845 0b7a 7047     		bx	lr
 1846              		.cfi_endproc
 1847              	.LFE136:
 1849              		.align	2
 1850              		.global	FLASH_ClearFlag
 1851              		.thumb
 1852              		.thumb_func
 1854              	FLASH_ClearFlag:
 1855              	.LFB137:
1073:../src/stm32f30x_flash.c **** 
1074:../src/stm32f30x_flash.c **** /**
1075:../src/stm32f30x_flash.c ****   * @brief  Clears the FLASH's pending flags.
1076:../src/stm32f30x_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1077:../src/stm32f30x_flash.c ****   *   This parameter can be any combination of the following values:
1078:../src/stm32f30x_flash.c ****   *     @arg FLASH_FLAG_PGERR: FLASH Programming error flag flag
1079:../src/stm32f30x_flash.c ****   *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
1080:../src/stm32f30x_flash.c ****   *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag                
1081:../src/stm32f30x_flash.c ****   * @retval None
1082:../src/stm32f30x_flash.c ****   */
1083:../src/stm32f30x_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1084:../src/stm32f30x_flash.c **** {
 1856              		.loc 1 1084 0
 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 8
 1859              		@ frame_needed = 1, uses_anonymous_args = 0
 1860              		@ link register save eliminated.
 1861 0b7c 80B4     		push	{r7}
 1862              	.LCFI71:
 1863              		.cfi_def_cfa_offset 4
 1864              		.cfi_offset 7, -4
 1865 0b7e 83B0     		sub	sp, sp, #12
 1866              	.LCFI72:
 1867              		.cfi_def_cfa_offset 16
 1868 0b80 00AF     		add	r7, sp, #0
 1869              	.LCFI73:
 1870              		.cfi_def_cfa_register 7
 1871 0b82 7860     		str	r0, [r7, #4]
1085:../src/stm32f30x_flash.c ****   /* Check the parameters */
1086:../src/stm32f30x_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
1087:../src/stm32f30x_flash.c ****   
1088:../src/stm32f30x_flash.c ****   /* Clear the flags */
1089:../src/stm32f30x_flash.c ****   FLASH->SR = FLASH_FLAG;
 1872              		.loc 1 1089 0
 1873 0b84 4FF40053 		mov	r3, #8192
 1874 0b88 C4F20203 		movt	r3, 16386
 1875 0b8c 7A68     		ldr	r2, [r7, #4]
 1876 0b8e DA60     		str	r2, [r3, #12]
1090:../src/stm32f30x_flash.c **** }
 1877              		.loc 1 1090 0
 1878 0b90 07F10C07 		add	r7, r7, #12
 1879 0b94 BD46     		mov	sp, r7
 1880 0b96 80BC     		pop	{r7}
 1881 0b98 7047     		bx	lr
 1882              		.cfi_endproc
 1883              	.LFE137:
 1885 0b9a 00BF     		.align	2
 1886              		.global	FLASH_GetStatus
 1887              		.thumb
 1888              		.thumb_func
 1890              	FLASH_GetStatus:
 1891              	.LFB138:
1091:../src/stm32f30x_flash.c **** 
1092:../src/stm32f30x_flash.c **** /**
1093:../src/stm32f30x_flash.c ****   * @brief  Returns the FLASH Status.
1094:../src/stm32f30x_flash.c ****   * @param  None
1095:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: 
1096:../src/stm32f30x_flash.c ****   *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
1097:../src/stm32f30x_flash.c ****   */
1098:../src/stm32f30x_flash.c **** FLASH_Status FLASH_GetStatus(void)
1099:../src/stm32f30x_flash.c **** {
 1892              		.loc 1 1099 0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 8
 1895              		@ frame_needed = 1, uses_anonymous_args = 0
 1896              		@ link register save eliminated.
 1897 0b9c 80B4     		push	{r7}
 1898              	.LCFI74:
 1899              		.cfi_def_cfa_offset 4
 1900              		.cfi_offset 7, -4
 1901 0b9e 83B0     		sub	sp, sp, #12
 1902              	.LCFI75:
 1903              		.cfi_def_cfa_offset 16
 1904 0ba0 00AF     		add	r7, sp, #0
 1905              	.LCFI76:
 1906              		.cfi_def_cfa_register 7
1100:../src/stm32f30x_flash.c ****   FLASH_Status FLASHstatus = FLASH_COMPLETE;
 1907              		.loc 1 1100 0
 1908 0ba2 4FF00403 		mov	r3, #4
 1909 0ba6 FB71     		strb	r3, [r7, #7]
1101:../src/stm32f30x_flash.c ****   
1102:../src/stm32f30x_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 1910              		.loc 1 1102 0
 1911 0ba8 4FF40053 		mov	r3, #8192
 1912 0bac C4F20203 		movt	r3, 16386
 1913 0bb0 DB68     		ldr	r3, [r3, #12]
 1914 0bb2 03F00103 		and	r3, r3, #1
 1915 0bb6 002B     		cmp	r3, #0
 1916 0bb8 03D0     		beq	.L77
1103:../src/stm32f30x_flash.c ****   {
1104:../src/stm32f30x_flash.c ****     FLASHstatus = FLASH_BUSY;
 1917              		.loc 1 1104 0
 1918 0bba 4FF00103 		mov	r3, #1
 1919 0bbe FB71     		strb	r3, [r7, #7]
 1920 0bc0 1CE0     		b	.L78
 1921              	.L77:
1105:../src/stm32f30x_flash.c ****   }
1106:../src/stm32f30x_flash.c ****   else 
1107:../src/stm32f30x_flash.c ****   {  
1108:../src/stm32f30x_flash.c ****     if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 1922              		.loc 1 1108 0
 1923 0bc2 4FF40053 		mov	r3, #8192
 1924 0bc6 C4F20203 		movt	r3, 16386
 1925 0bca DB68     		ldr	r3, [r3, #12]
 1926 0bcc 03F01003 		and	r3, r3, #16
 1927 0bd0 002B     		cmp	r3, #0
 1928 0bd2 03D0     		beq	.L79
1109:../src/stm32f30x_flash.c ****     { 
1110:../src/stm32f30x_flash.c ****       FLASHstatus = FLASH_ERROR_WRP;
 1929              		.loc 1 1110 0
 1930 0bd4 4FF00203 		mov	r3, #2
 1931 0bd8 FB71     		strb	r3, [r7, #7]
 1932 0bda 0FE0     		b	.L78
 1933              	.L79:
1111:../src/stm32f30x_flash.c ****     }
1112:../src/stm32f30x_flash.c ****     else 
1113:../src/stm32f30x_flash.c ****     {
1114:../src/stm32f30x_flash.c ****       if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 1934              		.loc 1 1114 0
 1935 0bdc 4FF40053 		mov	r3, #8192
 1936 0be0 C4F20203 		movt	r3, 16386
 1937 0be4 DB68     		ldr	r3, [r3, #12]
 1938 0be6 03F00403 		and	r3, r3, #4
 1939 0bea 002B     		cmp	r3, #0
 1940 0bec 03D0     		beq	.L80
1115:../src/stm32f30x_flash.c ****       {
1116:../src/stm32f30x_flash.c ****         FLASHstatus = FLASH_ERROR_PROGRAM; 
 1941              		.loc 1 1116 0
 1942 0bee 4FF00303 		mov	r3, #3
 1943 0bf2 FB71     		strb	r3, [r7, #7]
 1944 0bf4 02E0     		b	.L78
 1945              	.L80:
1117:../src/stm32f30x_flash.c ****       }
1118:../src/stm32f30x_flash.c ****       else
1119:../src/stm32f30x_flash.c ****       {
1120:../src/stm32f30x_flash.c ****         FLASHstatus = FLASH_COMPLETE;
 1946              		.loc 1 1120 0
 1947 0bf6 4FF00403 		mov	r3, #4
 1948 0bfa FB71     		strb	r3, [r7, #7]
 1949              	.L78:
1121:../src/stm32f30x_flash.c ****       }
1122:../src/stm32f30x_flash.c ****     }
1123:../src/stm32f30x_flash.c ****   }
1124:../src/stm32f30x_flash.c ****   /* Return the FLASH Status */
1125:../src/stm32f30x_flash.c ****   return FLASHstatus;
 1950              		.loc 1 1125 0
 1951 0bfc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1126:../src/stm32f30x_flash.c **** }
 1952              		.loc 1 1126 0
 1953 0bfe 1846     		mov	r0, r3
 1954 0c00 07F10C07 		add	r7, r7, #12
 1955 0c04 BD46     		mov	sp, r7
 1956 0c06 80BC     		pop	{r7}
 1957 0c08 7047     		bx	lr
 1958              		.cfi_endproc
 1959              	.LFE138:
 1961 0c0a 00BF     		.align	2
 1962              		.global	FLASH_WaitForLastOperation
 1963              		.thumb
 1964              		.thumb_func
 1966              	FLASH_WaitForLastOperation:
 1967              	.LFB139:
1127:../src/stm32f30x_flash.c **** 
1128:../src/stm32f30x_flash.c **** /**
1129:../src/stm32f30x_flash.c ****   * @brief  Waits for a FLASH operation to complete or a TIMEOUT to occur.
1130:../src/stm32f30x_flash.c ****   * @param  Timeout: FLASH programming Timeout
1131:../src/stm32f30x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
1132:../src/stm32f30x_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1133:../src/stm32f30x_flash.c ****   */
1134:../src/stm32f30x_flash.c **** FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
1135:../src/stm32f30x_flash.c **** { 
 1968              		.loc 1 1135 0
 1969              		.cfi_startproc
 1970              		@ args = 0, pretend = 0, frame = 16
 1971              		@ frame_needed = 1, uses_anonymous_args = 0
 1972 0c0c 80B5     		push	{r7, lr}
 1973              	.LCFI77:
 1974              		.cfi_def_cfa_offset 8
 1975              		.cfi_offset 7, -8
 1976              		.cfi_offset 14, -4
 1977 0c0e 84B0     		sub	sp, sp, #16
 1978              	.LCFI78:
 1979              		.cfi_def_cfa_offset 24
 1980 0c10 00AF     		add	r7, sp, #0
 1981              	.LCFI79:
 1982              		.cfi_def_cfa_register 7
 1983 0c12 7860     		str	r0, [r7, #4]
1136:../src/stm32f30x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1984              		.loc 1 1136 0
 1985 0c14 4FF00403 		mov	r3, #4
 1986 0c18 FB73     		strb	r3, [r7, #15]
1137:../src/stm32f30x_flash.c ****    
1138:../src/stm32f30x_flash.c ****   /* Check for the FLASH Status */
1139:../src/stm32f30x_flash.c ****   status = FLASH_GetStatus();
 1987              		.loc 1 1139 0
 1988 0c1a FFF7FEFF 		bl	FLASH_GetStatus
 1989 0c1e 0346     		mov	r3, r0
 1990 0c20 FB73     		strb	r3, [r7, #15]
1140:../src/stm32f30x_flash.c ****   
1141:../src/stm32f30x_flash.c ****   /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
1142:../src/stm32f30x_flash.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 1991              		.loc 1 1142 0
 1992 0c22 07E0     		b	.L83
 1993              	.L85:
1143:../src/stm32f30x_flash.c ****   {
1144:../src/stm32f30x_flash.c ****     status = FLASH_GetStatus();
 1994              		.loc 1 1144 0
 1995 0c24 FFF7FEFF 		bl	FLASH_GetStatus
 1996 0c28 0346     		mov	r3, r0
 1997 0c2a FB73     		strb	r3, [r7, #15]
1145:../src/stm32f30x_flash.c ****     Timeout--;
 1998              		.loc 1 1145 0
 1999 0c2c 7B68     		ldr	r3, [r7, #4]
 2000 0c2e 03F1FF33 		add	r3, r3, #-1
 2001 0c32 7B60     		str	r3, [r7, #4]
 2002              	.L83:
1142:../src/stm32f30x_flash.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 2003              		.loc 1 1142 0 discriminator 1
 2004 0c34 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2005 0c36 012B     		cmp	r3, #1
 2006 0c38 02D1     		bne	.L84
1142:../src/stm32f30x_flash.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 2007              		.loc 1 1142 0 is_stmt 0 discriminator 2
 2008 0c3a 7B68     		ldr	r3, [r7, #4]
 2009 0c3c 002B     		cmp	r3, #0
 2010 0c3e F1D1     		bne	.L85
 2011              	.L84:
1146:../src/stm32f30x_flash.c ****   }
1147:../src/stm32f30x_flash.c ****   
1148:../src/stm32f30x_flash.c ****   if(Timeout == 0x00 )
 2012              		.loc 1 1148 0 is_stmt 1
 2013 0c40 7B68     		ldr	r3, [r7, #4]
 2014 0c42 002B     		cmp	r3, #0
 2015 0c44 02D1     		bne	.L86
1149:../src/stm32f30x_flash.c ****   {
1150:../src/stm32f30x_flash.c ****     status = FLASH_TIMEOUT;
 2016              		.loc 1 1150 0
 2017 0c46 4FF00503 		mov	r3, #5
 2018 0c4a FB73     		strb	r3, [r7, #15]
 2019              	.L86:
1151:../src/stm32f30x_flash.c ****   }
1152:../src/stm32f30x_flash.c ****   /* Return the operation status */
1153:../src/stm32f30x_flash.c ****   return status;
 2020              		.loc 1 1153 0
 2021 0c4c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1154:../src/stm32f30x_flash.c **** }
 2022              		.loc 1 1154 0
 2023 0c4e 1846     		mov	r0, r3
 2024 0c50 07F11007 		add	r7, r7, #16
 2025 0c54 BD46     		mov	sp, r7
 2026 0c56 80BD     		pop	{r7, pc}
 2027              		.cfi_endproc
 2028              	.LFE139:
 2030              	.Letext0:
 2031              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2032              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2033              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_flash.h"
 2034              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f30x_flash.c
     /tmp/ccncAvIn.s:20     .text:00000000 $t
     /tmp/ccncAvIn.s:25     .text:00000000 FLASH_SetLatency
     /tmp/ccncAvIn.s:79     .text:00000040 FLASH_HalfCycleAccessCmd
     /tmp/ccncAvIn.s:134    .text:0000008c FLASH_PrefetchBufferCmd
     /tmp/ccncAvIn.s:189    .text:000000d8 FLASH_Unlock
     /tmp/ccncAvIn.s:235    .text:00000118 FLASH_Lock
     /tmp/ccncAvIn.s:269    .text:0000013c FLASH_ErasePage
     /tmp/ccncAvIn.s:1966   .text:00000c0c FLASH_WaitForLastOperation
     /tmp/ccncAvIn.s:349    .text:000001c8 FLASH_EraseAllPages
     /tmp/ccncAvIn.s:423    .text:00000248 FLASH_ProgramWord
     /tmp/ccncAvIn.s:528    .text:00000300 FLASH_ProgramHalfWord
     /tmp/ccncAvIn.s:601    .text:00000374 FLASH_OB_Unlock
     /tmp/ccncAvIn.s:647    .text:000003b4 FLASH_OB_Lock
     /tmp/ccncAvIn.s:681    .text:000003d8 FLASH_OB_Launch
     /tmp/ccncAvIn.s:715    .text:000003fc FLASH_OB_Erase
     /tmp/ccncAvIn.s:1688   .text:00000ab0 FLASH_OB_GetRDP
     /tmp/ccncAvIn.s:849    .text:00000504 FLASH_OB_EnableWRP
     /tmp/ccncAvIn.s:968    .text:000005d0 FLASH_OB_RDPConfig
     /tmp/ccncAvIn.s:1093   .text:000006c8 FLASH_OB_UserConfig
     /tmp/ccncAvIn.s:1194   .text:00000784 FLASH_OB_BOOTConfig
     /tmp/ccncAvIn.s:1285   .text:0000082c FLASH_OB_VDDAConfig
     /tmp/ccncAvIn.s:1376   .text:000008d4 FLASH_OB_SRAMParityConfig
     /tmp/ccncAvIn.s:1455   .text:00000958 FLASH_OB_WriteUser
     /tmp/ccncAvIn.s:1546   .text:00000a00 FLASH_ProgramOptionByteData
     /tmp/ccncAvIn.s:1624   .text:00000a7c FLASH_OB_GetUser
     /tmp/ccncAvIn.s:1657   .text:00000a98 FLASH_OB_GetWRP
     /tmp/ccncAvIn.s:1741   .text:00000aec FLASH_ITConfig
     /tmp/ccncAvIn.s:1800   .text:00000b40 FLASH_GetFlagStatus
     /tmp/ccncAvIn.s:1854   .text:00000b7c FLASH_ClearFlag
     /tmp/ccncAvIn.s:1890   .text:00000b9c FLASH_GetStatus
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.743cd71370ebc432b539c5dba7924ecc
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.cf7c793e178943e1bbf613f1b21cd51a
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23

NO UNDEFINED SYMBOLS
