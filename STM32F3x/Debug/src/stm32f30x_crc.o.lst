   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f30x_crc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	2
  21              		.global	CRC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	CRC_DeInit:
  26              	.LFB111:
  27              		.file 1 "../src/stm32f30x_crc.c"
   1:../src/stm32f30x_crc.c **** /**
   2:../src/stm32f30x_crc.c ****   ******************************************************************************
   3:../src/stm32f30x_crc.c ****   * @file    stm32f30x_crc.c
   4:../src/stm32f30x_crc.c ****   * @author  MCD Application Team
   5:../src/stm32f30x_crc.c ****   * @version V1.0.1
   6:../src/stm32f30x_crc.c ****   * @date    23-October-2012
   7:../src/stm32f30x_crc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../src/stm32f30x_crc.c ****   *          functionalities of CRC computation unit peripheral:
   9:../src/stm32f30x_crc.c ****   *            + Configuration of the CRC computation unit
  10:../src/stm32f30x_crc.c ****   *            + CRC computation of one/many 32-bit data
  11:../src/stm32f30x_crc.c ****   *            + CRC Independent register (IDR) access
  12:../src/stm32f30x_crc.c ****   *
  13:../src/stm32f30x_crc.c ****   @verbatim
  14:../src/stm32f30x_crc.c ****     
  15:../src/stm32f30x_crc.c ****  ===============================================================================
  16:../src/stm32f30x_crc.c ****                       ##### How to use this driver #####
  17:../src/stm32f30x_crc.c ****  ===============================================================================
  18:../src/stm32f30x_crc.c ****     [..] 
  19:../src/stm32f30x_crc.c ****     (#) Enable CRC AHB clock using RCC_AHBPeriphClockCmd(RCC_AHBPeriph_CRC, ENABLE)
  20:../src/stm32f30x_crc.c ****         function.
  21:../src/stm32f30x_crc.c ****     (#) Select the polynomial size: 7-bit, 8-bit, 16-bit or 32-bit.
  22:../src/stm32f30x_crc.c ****     (#) Set the polynomial coefficients using CRC_SetPolynomial();  
  23:../src/stm32f30x_crc.c ****     (#) If required, select the reverse operation on input data 
  24:../src/stm32f30x_crc.c ****         using CRC_ReverseInputDataSelect();  
  25:../src/stm32f30x_crc.c ****     (#) If required, enable the reverse operation on output data
  26:../src/stm32f30x_crc.c ****         using CRC_ReverseOutputDataCmd(Enable);
  27:../src/stm32f30x_crc.c ****     (#) If required, set the initialization remainder value using
  28:../src/stm32f30x_crc.c ****         CRC_SetInitRegister();
  29:../src/stm32f30x_crc.c ****     (#) use CRC_CalcCRC() function to compute the CRC of a 32-bit data
  30:../src/stm32f30x_crc.c ****         or use CRC_CalcBlockCRC() function to compute the CRC if a 32-bit 
  31:../src/stm32f30x_crc.c ****         data buffer.
  32:../src/stm32f30x_crc.c **** 
  33:../src/stm32f30x_crc.c ****   @endverbatim
  34:../src/stm32f30x_crc.c ****   
  35:../src/stm32f30x_crc.c ****   ******************************************************************************
  36:../src/stm32f30x_crc.c ****   * @attention
  37:../src/stm32f30x_crc.c ****   *
  38:../src/stm32f30x_crc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  39:../src/stm32f30x_crc.c ****   *
  40:../src/stm32f30x_crc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  41:../src/stm32f30x_crc.c ****   * You may not use this file except in compliance with the License.
  42:../src/stm32f30x_crc.c ****   * You may obtain a copy of the License at:
  43:../src/stm32f30x_crc.c ****   *
  44:../src/stm32f30x_crc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  45:../src/stm32f30x_crc.c ****   *
  46:../src/stm32f30x_crc.c ****   * Unless required by applicable law or agreed to in writing, software 
  47:../src/stm32f30x_crc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  48:../src/stm32f30x_crc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  49:../src/stm32f30x_crc.c ****   * See the License for the specific language governing permissions and
  50:../src/stm32f30x_crc.c ****   * limitations under the License.
  51:../src/stm32f30x_crc.c ****   *
  52:../src/stm32f30x_crc.c ****   ******************************************************************************
  53:../src/stm32f30x_crc.c ****   */
  54:../src/stm32f30x_crc.c **** 
  55:../src/stm32f30x_crc.c **** /* Includes ------------------------------------------------------------------*/
  56:../src/stm32f30x_crc.c **** #include "stm32f30x_crc.h"
  57:../src/stm32f30x_crc.c **** 
  58:../src/stm32f30x_crc.c **** /** @addtogroup STM32F30x_StdPeriph_Driver
  59:../src/stm32f30x_crc.c ****   * @{
  60:../src/stm32f30x_crc.c ****   */
  61:../src/stm32f30x_crc.c **** 
  62:../src/stm32f30x_crc.c **** /** @defgroup CRC 
  63:../src/stm32f30x_crc.c ****   * @brief CRC driver modules
  64:../src/stm32f30x_crc.c ****   * @{
  65:../src/stm32f30x_crc.c ****   */
  66:../src/stm32f30x_crc.c **** 
  67:../src/stm32f30x_crc.c **** /* Private typedef -----------------------------------------------------------*/
  68:../src/stm32f30x_crc.c **** /* Private define ------------------------------------------------------------*/
  69:../src/stm32f30x_crc.c **** /* Private macro -------------------------------------------------------------*/
  70:../src/stm32f30x_crc.c **** /* Private variables ---------------------------------------------------------*/
  71:../src/stm32f30x_crc.c **** /* Private function prototypes -----------------------------------------------*/
  72:../src/stm32f30x_crc.c **** /* Private functions ---------------------------------------------------------*/
  73:../src/stm32f30x_crc.c **** 
  74:../src/stm32f30x_crc.c **** /** @defgroup CRC_Private_Functions
  75:../src/stm32f30x_crc.c ****   * @{
  76:../src/stm32f30x_crc.c ****   */
  77:../src/stm32f30x_crc.c **** 
  78:../src/stm32f30x_crc.c **** /** @defgroup CRC_Group1 Configuration of the CRC computation unit functions
  79:../src/stm32f30x_crc.c ****  *  @brief   Configuration of the CRC computation unit functions 
  80:../src/stm32f30x_crc.c ****  *
  81:../src/stm32f30x_crc.c **** @verbatim
  82:../src/stm32f30x_crc.c ****  ===============================================================================
  83:../src/stm32f30x_crc.c ****                   ##### CRC configuration functions #####
  84:../src/stm32f30x_crc.c ****  ===============================================================================
  85:../src/stm32f30x_crc.c **** 
  86:../src/stm32f30x_crc.c **** @endverbatim
  87:../src/stm32f30x_crc.c ****   * @{
  88:../src/stm32f30x_crc.c ****   */
  89:../src/stm32f30x_crc.c **** 
  90:../src/stm32f30x_crc.c **** /**
  91:../src/stm32f30x_crc.c ****   * @brief  Deinitializes CRC peripheral registers to their default reset values.
  92:../src/stm32f30x_crc.c ****   * @param  None
  93:../src/stm32f30x_crc.c ****   * @retval None
  94:../src/stm32f30x_crc.c ****   */
  95:../src/stm32f30x_crc.c **** void CRC_DeInit(void)
  96:../src/stm32f30x_crc.c **** {
  28              		.loc 1 96 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
  97:../src/stm32f30x_crc.c ****   /* Set DR register to reset value */
  98:../src/stm32f30x_crc.c ****   CRC->DR = 0xFFFFFFFF;
  40              		.loc 1 98 0
  41 0004 4FF44053 		mov	r3, #12288
  42 0008 C4F20203 		movt	r3, 16386
  43 000c 4FF0FF32 		mov	r2, #-1
  44 0010 1A60     		str	r2, [r3, #0]
  99:../src/stm32f30x_crc.c ****   /* Set the POL register to the reset value: 0x04C11DB7 */
 100:../src/stm32f30x_crc.c ****   CRC->POL = 0x04C11DB7;
  45              		.loc 1 100 0
  46 0012 4FF44053 		mov	r3, #12288
  47 0016 C4F20203 		movt	r3, 16386
  48 001a 41F6B752 		movw	r2, #7607
  49 001e C0F2C142 		movt	r2, 1217
  50 0022 5A61     		str	r2, [r3, #20]
 101:../src/stm32f30x_crc.c ****   /* Reset IDR register */
 102:../src/stm32f30x_crc.c ****   CRC->IDR = 0x00;
  51              		.loc 1 102 0
  52 0024 4FF44053 		mov	r3, #12288
  53 0028 C4F20203 		movt	r3, 16386
  54 002c 4FF00002 		mov	r2, #0
  55 0030 1A71     		strb	r2, [r3, #4]
 103:../src/stm32f30x_crc.c ****   /* Set INIT register to reset value */
 104:../src/stm32f30x_crc.c ****   CRC->INIT = 0xFFFFFFFF;
  56              		.loc 1 104 0
  57 0032 4FF44053 		mov	r3, #12288
  58 0036 C4F20203 		movt	r3, 16386
  59 003a 4FF0FF32 		mov	r2, #-1
  60 003e 1A61     		str	r2, [r3, #16]
 105:../src/stm32f30x_crc.c ****   /* Reset the CRC calculation unit */
 106:../src/stm32f30x_crc.c ****   CRC->CR = CRC_CR_RESET;
  61              		.loc 1 106 0
  62 0040 4FF44053 		mov	r3, #12288
  63 0044 C4F20203 		movt	r3, 16386
  64 0048 4FF00102 		mov	r2, #1
  65 004c 9A60     		str	r2, [r3, #8]
 107:../src/stm32f30x_crc.c **** }
  66              		.loc 1 107 0
  67 004e BD46     		mov	sp, r7
  68 0050 80BC     		pop	{r7}
  69 0052 7047     		bx	lr
  70              		.cfi_endproc
  71              	.LFE111:
  73              		.align	2
  74              		.global	CRC_ResetDR
  75              		.thumb
  76              		.thumb_func
  78              	CRC_ResetDR:
  79              	.LFB112:
 108:../src/stm32f30x_crc.c **** 
 109:../src/stm32f30x_crc.c **** /**
 110:../src/stm32f30x_crc.c ****   * @brief  Resets the CRC calculation unit and sets INIT register content in DR register.
 111:../src/stm32f30x_crc.c ****   * @param  None
 112:../src/stm32f30x_crc.c ****   * @retval None
 113:../src/stm32f30x_crc.c ****   */
 114:../src/stm32f30x_crc.c **** void CRC_ResetDR(void)
 115:../src/stm32f30x_crc.c **** {
  80              		.loc 1 115 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85 0054 80B4     		push	{r7}
  86              	.LCFI2:
  87              		.cfi_def_cfa_offset 4
  88              		.cfi_offset 7, -4
  89 0056 00AF     		add	r7, sp, #0
  90              	.LCFI3:
  91              		.cfi_def_cfa_register 7
 116:../src/stm32f30x_crc.c ****   /* Reset CRC generator */
 117:../src/stm32f30x_crc.c ****   CRC->CR |= CRC_CR_RESET;
  92              		.loc 1 117 0
  93 0058 4FF44053 		mov	r3, #12288
  94 005c C4F20203 		movt	r3, 16386
  95 0060 4FF44052 		mov	r2, #12288
  96 0064 C4F20202 		movt	r2, 16386
  97 0068 9268     		ldr	r2, [r2, #8]
  98 006a 42F00102 		orr	r2, r2, #1
  99 006e 9A60     		str	r2, [r3, #8]
 118:../src/stm32f30x_crc.c **** }
 100              		.loc 1 118 0
 101 0070 BD46     		mov	sp, r7
 102 0072 80BC     		pop	{r7}
 103 0074 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE112:
 107 0076 00BF     		.align	2
 108              		.global	CRC_PolynomialSizeSelect
 109              		.thumb
 110              		.thumb_func
 112              	CRC_PolynomialSizeSelect:
 113              	.LFB113:
 119:../src/stm32f30x_crc.c **** 
 120:../src/stm32f30x_crc.c **** /**
 121:../src/stm32f30x_crc.c ****   * @brief  Selects the polynomial size.
 122:../src/stm32f30x_crc.c ****   * @param  CRC_PolSize: Specifies the polynomial size.
 123:../src/stm32f30x_crc.c ****   *         This parameter can be:
 124:../src/stm32f30x_crc.c ****   *          @arg CRC_PolSize_7: 7-bit polynomial for CRC calculation
 125:../src/stm32f30x_crc.c ****   *          @arg CRC_PolSize_8: 8-bit polynomial for CRC calculation
 126:../src/stm32f30x_crc.c ****   *          @arg CRC_PolSize_16: 16-bit polynomial for CRC calculation
 127:../src/stm32f30x_crc.c ****   *          @arg CRC_PolSize_32: 32-bit polynomial for CRC calculation
 128:../src/stm32f30x_crc.c ****   * @retval None
 129:../src/stm32f30x_crc.c ****   */
 130:../src/stm32f30x_crc.c **** void CRC_PolynomialSizeSelect(uint32_t CRC_PolSize)
 131:../src/stm32f30x_crc.c **** {
 114              		.loc 1 131 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 16
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119 0078 80B4     		push	{r7}
 120              	.LCFI4:
 121              		.cfi_def_cfa_offset 4
 122              		.cfi_offset 7, -4
 123 007a 85B0     		sub	sp, sp, #20
 124              	.LCFI5:
 125              		.cfi_def_cfa_offset 24
 126 007c 00AF     		add	r7, sp, #0
 127              	.LCFI6:
 128              		.cfi_def_cfa_register 7
 129 007e 7860     		str	r0, [r7, #4]
 132:../src/stm32f30x_crc.c ****   uint32_t tmpcr = 0;
 130              		.loc 1 132 0
 131 0080 4FF00003 		mov	r3, #0
 132 0084 FB60     		str	r3, [r7, #12]
 133:../src/stm32f30x_crc.c **** 
 134:../src/stm32f30x_crc.c ****   /* Check the parameter */
 135:../src/stm32f30x_crc.c ****   assert_param(IS_CRC_POL_SIZE(CRC_PolSize));
 136:../src/stm32f30x_crc.c **** 
 137:../src/stm32f30x_crc.c ****   /* Get CR register value */
 138:../src/stm32f30x_crc.c ****   tmpcr = CRC->CR;
 133              		.loc 1 138 0
 134 0086 4FF44053 		mov	r3, #12288
 135 008a C4F20203 		movt	r3, 16386
 136 008e 9B68     		ldr	r3, [r3, #8]
 137 0090 FB60     		str	r3, [r7, #12]
 139:../src/stm32f30x_crc.c **** 
 140:../src/stm32f30x_crc.c ****   /* Reset POL_SIZE bits */
 141:../src/stm32f30x_crc.c ****   tmpcr &= (uint32_t)~((uint32_t)CRC_CR_POLSIZE);
 138              		.loc 1 141 0
 139 0092 FB68     		ldr	r3, [r7, #12]
 140 0094 23F01803 		bic	r3, r3, #24
 141 0098 FB60     		str	r3, [r7, #12]
 142:../src/stm32f30x_crc.c ****   /* Set the polynomial size */
 143:../src/stm32f30x_crc.c ****   tmpcr |= (uint32_t)CRC_PolSize;
 142              		.loc 1 143 0
 143 009a FA68     		ldr	r2, [r7, #12]
 144 009c 7B68     		ldr	r3, [r7, #4]
 145 009e 1343     		orrs	r3, r3, r2
 146 00a0 FB60     		str	r3, [r7, #12]
 144:../src/stm32f30x_crc.c **** 
 145:../src/stm32f30x_crc.c ****   /* Write to CR register */
 146:../src/stm32f30x_crc.c ****   CRC->CR = (uint32_t)tmpcr;
 147              		.loc 1 146 0
 148 00a2 4FF44053 		mov	r3, #12288
 149 00a6 C4F20203 		movt	r3, 16386
 150 00aa FA68     		ldr	r2, [r7, #12]
 151 00ac 9A60     		str	r2, [r3, #8]
 147:../src/stm32f30x_crc.c **** }
 152              		.loc 1 147 0
 153 00ae 07F11407 		add	r7, r7, #20
 154 00b2 BD46     		mov	sp, r7
 155 00b4 80BC     		pop	{r7}
 156 00b6 7047     		bx	lr
 157              		.cfi_endproc
 158              	.LFE113:
 160              		.align	2
 161              		.global	CRC_ReverseInputDataSelect
 162              		.thumb
 163              		.thumb_func
 165              	CRC_ReverseInputDataSelect:
 166              	.LFB114:
 148:../src/stm32f30x_crc.c **** 
 149:../src/stm32f30x_crc.c **** /**
 150:../src/stm32f30x_crc.c ****   * @brief  Selects the reverse operation to be performed on input data.
 151:../src/stm32f30x_crc.c ****   * @param  CRC_ReverseInputData: Specifies the reverse operation on input data.
 152:../src/stm32f30x_crc.c ****   *         This parameter can be:
 153:../src/stm32f30x_crc.c ****   *          @arg CRC_ReverseInputData_No: No reverse operation is performed
 154:../src/stm32f30x_crc.c ****   *          @arg CRC_ReverseInputData_8bits: reverse operation performed on 8 bits
 155:../src/stm32f30x_crc.c ****   *          @arg CRC_ReverseInputData_16bits: reverse operation performed on 16 bits
 156:../src/stm32f30x_crc.c ****   *          @arg CRC_ReverseInputData_32bits: reverse operation performed on 32 bits
 157:../src/stm32f30x_crc.c ****   * @retval None
 158:../src/stm32f30x_crc.c ****   */
 159:../src/stm32f30x_crc.c **** void CRC_ReverseInputDataSelect(uint32_t CRC_ReverseInputData)
 160:../src/stm32f30x_crc.c **** {
 167              		.loc 1 160 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 16
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 00b8 80B4     		push	{r7}
 173              	.LCFI7:
 174              		.cfi_def_cfa_offset 4
 175              		.cfi_offset 7, -4
 176 00ba 85B0     		sub	sp, sp, #20
 177              	.LCFI8:
 178              		.cfi_def_cfa_offset 24
 179 00bc 00AF     		add	r7, sp, #0
 180              	.LCFI9:
 181              		.cfi_def_cfa_register 7
 182 00be 7860     		str	r0, [r7, #4]
 161:../src/stm32f30x_crc.c ****   uint32_t tmpcr = 0;
 183              		.loc 1 161 0
 184 00c0 4FF00003 		mov	r3, #0
 185 00c4 FB60     		str	r3, [r7, #12]
 162:../src/stm32f30x_crc.c **** 
 163:../src/stm32f30x_crc.c ****   /* Check the parameter */
 164:../src/stm32f30x_crc.c ****   assert_param(IS_CRC_REVERSE_INPUT_DATA(CRC_ReverseInputData));
 165:../src/stm32f30x_crc.c **** 
 166:../src/stm32f30x_crc.c ****   /* Get CR register value */
 167:../src/stm32f30x_crc.c ****   tmpcr = CRC->CR;
 186              		.loc 1 167 0
 187 00c6 4FF44053 		mov	r3, #12288
 188 00ca C4F20203 		movt	r3, 16386
 189 00ce 9B68     		ldr	r3, [r3, #8]
 190 00d0 FB60     		str	r3, [r7, #12]
 168:../src/stm32f30x_crc.c **** 
 169:../src/stm32f30x_crc.c ****   /* Reset REV_IN bits */
 170:../src/stm32f30x_crc.c ****   tmpcr &= (uint32_t)~((uint32_t)CRC_CR_REV_IN);
 191              		.loc 1 170 0
 192 00d2 FB68     		ldr	r3, [r7, #12]
 193 00d4 23F06003 		bic	r3, r3, #96
 194 00d8 FB60     		str	r3, [r7, #12]
 171:../src/stm32f30x_crc.c ****   /* Set the reverse operation */
 172:../src/stm32f30x_crc.c ****   tmpcr |= (uint32_t)CRC_ReverseInputData;
 195              		.loc 1 172 0
 196 00da FA68     		ldr	r2, [r7, #12]
 197 00dc 7B68     		ldr	r3, [r7, #4]
 198 00de 1343     		orrs	r3, r3, r2
 199 00e0 FB60     		str	r3, [r7, #12]
 173:../src/stm32f30x_crc.c **** 
 174:../src/stm32f30x_crc.c ****   /* Write to CR register */
 175:../src/stm32f30x_crc.c ****   CRC->CR = (uint32_t)tmpcr;
 200              		.loc 1 175 0
 201 00e2 4FF44053 		mov	r3, #12288
 202 00e6 C4F20203 		movt	r3, 16386
 203 00ea FA68     		ldr	r2, [r7, #12]
 204 00ec 9A60     		str	r2, [r3, #8]
 176:../src/stm32f30x_crc.c **** }
 205              		.loc 1 176 0
 206 00ee 07F11407 		add	r7, r7, #20
 207 00f2 BD46     		mov	sp, r7
 208 00f4 80BC     		pop	{r7}
 209 00f6 7047     		bx	lr
 210              		.cfi_endproc
 211              	.LFE114:
 213              		.align	2
 214              		.global	CRC_ReverseOutputDataCmd
 215              		.thumb
 216              		.thumb_func
 218              	CRC_ReverseOutputDataCmd:
 219              	.LFB115:
 177:../src/stm32f30x_crc.c **** 
 178:../src/stm32f30x_crc.c **** /**
 179:../src/stm32f30x_crc.c ****   * @brief  Enables or disable the reverse operation on output data.
 180:../src/stm32f30x_crc.c ****   *         The reverse operation on output data is performed on 32-bit.
 181:../src/stm32f30x_crc.c ****   * @param  NewState: new state of the reverse operation on output data.
 182:../src/stm32f30x_crc.c ****   *   This parameter can be: ENABLE or DISABLE.
 183:../src/stm32f30x_crc.c ****   * @retval None
 184:../src/stm32f30x_crc.c ****   */
 185:../src/stm32f30x_crc.c **** void CRC_ReverseOutputDataCmd(FunctionalState NewState)
 186:../src/stm32f30x_crc.c **** {
 220              		.loc 1 186 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 8
 223              		@ frame_needed = 1, uses_anonymous_args = 0
 224              		@ link register save eliminated.
 225 00f8 80B4     		push	{r7}
 226              	.LCFI10:
 227              		.cfi_def_cfa_offset 4
 228              		.cfi_offset 7, -4
 229 00fa 83B0     		sub	sp, sp, #12
 230              	.LCFI11:
 231              		.cfi_def_cfa_offset 16
 232 00fc 00AF     		add	r7, sp, #0
 233              	.LCFI12:
 234              		.cfi_def_cfa_register 7
 235 00fe 0346     		mov	r3, r0
 236 0100 FB71     		strb	r3, [r7, #7]
 187:../src/stm32f30x_crc.c ****   /* Check the parameters */
 188:../src/stm32f30x_crc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 189:../src/stm32f30x_crc.c **** 
 190:../src/stm32f30x_crc.c ****   if (NewState != DISABLE)
 237              		.loc 1 190 0
 238 0102 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 239 0104 002B     		cmp	r3, #0
 240 0106 0CD0     		beq	.L6
 191:../src/stm32f30x_crc.c ****   {
 192:../src/stm32f30x_crc.c ****     /* Enable reverse operation on output data */
 193:../src/stm32f30x_crc.c ****     CRC->CR |= CRC_CR_REV_OUT;
 241              		.loc 1 193 0
 242 0108 4FF44053 		mov	r3, #12288
 243 010c C4F20203 		movt	r3, 16386
 244 0110 4FF44052 		mov	r2, #12288
 245 0114 C4F20202 		movt	r2, 16386
 246 0118 9268     		ldr	r2, [r2, #8]
 247 011a 42F08002 		orr	r2, r2, #128
 248 011e 9A60     		str	r2, [r3, #8]
 249 0120 0BE0     		b	.L5
 250              	.L6:
 194:../src/stm32f30x_crc.c ****   }
 195:../src/stm32f30x_crc.c ****   else
 196:../src/stm32f30x_crc.c ****   {
 197:../src/stm32f30x_crc.c ****     /* Disable reverse operation on output data */
 198:../src/stm32f30x_crc.c ****     CRC->CR &= (uint32_t)~((uint32_t)CRC_CR_REV_OUT);
 251              		.loc 1 198 0
 252 0122 4FF44053 		mov	r3, #12288
 253 0126 C4F20203 		movt	r3, 16386
 254 012a 4FF44052 		mov	r2, #12288
 255 012e C4F20202 		movt	r2, 16386
 256 0132 9268     		ldr	r2, [r2, #8]
 257 0134 22F08002 		bic	r2, r2, #128
 258 0138 9A60     		str	r2, [r3, #8]
 259              	.L5:
 199:../src/stm32f30x_crc.c ****   }
 200:../src/stm32f30x_crc.c **** }
 260              		.loc 1 200 0
 261 013a 07F10C07 		add	r7, r7, #12
 262 013e BD46     		mov	sp, r7
 263 0140 80BC     		pop	{r7}
 264 0142 7047     		bx	lr
 265              		.cfi_endproc
 266              	.LFE115:
 268              		.align	2
 269              		.global	CRC_SetInitRegister
 270              		.thumb
 271              		.thumb_func
 273              	CRC_SetInitRegister:
 274              	.LFB116:
 201:../src/stm32f30x_crc.c **** 
 202:../src/stm32f30x_crc.c **** /**
 203:../src/stm32f30x_crc.c ****   * @brief  Initializes the INIT register.
 204:../src/stm32f30x_crc.c ****   * @note   After resetting CRC calculation unit, CRC_InitValue is stored in DR register
 205:../src/stm32f30x_crc.c ****   * @param  CRC_InitValue: Programmable initial CRC value
 206:../src/stm32f30x_crc.c ****   * @retval None
 207:../src/stm32f30x_crc.c ****   */
 208:../src/stm32f30x_crc.c **** void CRC_SetInitRegister(uint32_t CRC_InitValue)
 209:../src/stm32f30x_crc.c **** {
 275              		.loc 1 209 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 8
 278              		@ frame_needed = 1, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 280 0144 80B4     		push	{r7}
 281              	.LCFI13:
 282              		.cfi_def_cfa_offset 4
 283              		.cfi_offset 7, -4
 284 0146 83B0     		sub	sp, sp, #12
 285              	.LCFI14:
 286              		.cfi_def_cfa_offset 16
 287 0148 00AF     		add	r7, sp, #0
 288              	.LCFI15:
 289              		.cfi_def_cfa_register 7
 290 014a 7860     		str	r0, [r7, #4]
 210:../src/stm32f30x_crc.c ****   CRC->INIT = CRC_InitValue;
 291              		.loc 1 210 0
 292 014c 4FF44053 		mov	r3, #12288
 293 0150 C4F20203 		movt	r3, 16386
 294 0154 7A68     		ldr	r2, [r7, #4]
 295 0156 1A61     		str	r2, [r3, #16]
 211:../src/stm32f30x_crc.c **** }
 296              		.loc 1 211 0
 297 0158 07F10C07 		add	r7, r7, #12
 298 015c BD46     		mov	sp, r7
 299 015e 80BC     		pop	{r7}
 300 0160 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE116:
 304 0162 00BF     		.align	2
 305              		.global	CRC_SetPolynomial
 306              		.thumb
 307              		.thumb_func
 309              	CRC_SetPolynomial:
 310              	.LFB117:
 212:../src/stm32f30x_crc.c **** 
 213:../src/stm32f30x_crc.c **** /**
 214:../src/stm32f30x_crc.c ****   * @brief  Initializes the polynomail coefficients.
 215:../src/stm32f30x_crc.c ****   * @param  CRC_Pol: Polynomial to be used for CRC calculation.
 216:../src/stm32f30x_crc.c ****   * @retval None
 217:../src/stm32f30x_crc.c ****   */
 218:../src/stm32f30x_crc.c **** void CRC_SetPolynomial(uint32_t CRC_Pol)
 219:../src/stm32f30x_crc.c **** {
 311              		.loc 1 219 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 8
 314              		@ frame_needed = 1, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 316 0164 80B4     		push	{r7}
 317              	.LCFI16:
 318              		.cfi_def_cfa_offset 4
 319              		.cfi_offset 7, -4
 320 0166 83B0     		sub	sp, sp, #12
 321              	.LCFI17:
 322              		.cfi_def_cfa_offset 16
 323 0168 00AF     		add	r7, sp, #0
 324              	.LCFI18:
 325              		.cfi_def_cfa_register 7
 326 016a 7860     		str	r0, [r7, #4]
 220:../src/stm32f30x_crc.c ****   CRC->POL = CRC_Pol;
 327              		.loc 1 220 0
 328 016c 4FF44053 		mov	r3, #12288
 329 0170 C4F20203 		movt	r3, 16386
 330 0174 7A68     		ldr	r2, [r7, #4]
 331 0176 5A61     		str	r2, [r3, #20]
 221:../src/stm32f30x_crc.c **** }
 332              		.loc 1 221 0
 333 0178 07F10C07 		add	r7, r7, #12
 334 017c BD46     		mov	sp, r7
 335 017e 80BC     		pop	{r7}
 336 0180 7047     		bx	lr
 337              		.cfi_endproc
 338              	.LFE117:
 340 0182 00BF     		.align	2
 341              		.global	CRC_CalcCRC
 342              		.thumb
 343              		.thumb_func
 345              	CRC_CalcCRC:
 346              	.LFB118:
 222:../src/stm32f30x_crc.c **** 
 223:../src/stm32f30x_crc.c **** /**
 224:../src/stm32f30x_crc.c ****   * @}
 225:../src/stm32f30x_crc.c ****   */
 226:../src/stm32f30x_crc.c **** 
 227:../src/stm32f30x_crc.c **** /** @defgroup CRC_Group2 CRC computation of one/many 32-bit data functions
 228:../src/stm32f30x_crc.c ****  *  @brief   CRC computation of one/many 32-bit data functions
 229:../src/stm32f30x_crc.c ****  *
 230:../src/stm32f30x_crc.c **** @verbatim
 231:../src/stm32f30x_crc.c ****  ===============================================================================
 232:../src/stm32f30x_crc.c ****                       ##### CRC computation functions #####
 233:../src/stm32f30x_crc.c ****  ===============================================================================
 234:../src/stm32f30x_crc.c **** 
 235:../src/stm32f30x_crc.c **** @endverbatim
 236:../src/stm32f30x_crc.c ****   * @{
 237:../src/stm32f30x_crc.c ****   */
 238:../src/stm32f30x_crc.c **** 
 239:../src/stm32f30x_crc.c **** /**
 240:../src/stm32f30x_crc.c ****   * @brief  Computes the 32-bit CRC of a given data word(32-bit).
 241:../src/stm32f30x_crc.c ****   * @param  CRC_Data: data word(32-bit) to compute its CRC
 242:../src/stm32f30x_crc.c ****   * @retval 32-bit CRC
 243:../src/stm32f30x_crc.c ****   */
 244:../src/stm32f30x_crc.c **** uint32_t CRC_CalcCRC(uint32_t CRC_Data)
 245:../src/stm32f30x_crc.c **** {
 347              		.loc 1 245 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 8
 350              		@ frame_needed = 1, uses_anonymous_args = 0
 351              		@ link register save eliminated.
 352 0184 80B4     		push	{r7}
 353              	.LCFI19:
 354              		.cfi_def_cfa_offset 4
 355              		.cfi_offset 7, -4
 356 0186 83B0     		sub	sp, sp, #12
 357              	.LCFI20:
 358              		.cfi_def_cfa_offset 16
 359 0188 00AF     		add	r7, sp, #0
 360              	.LCFI21:
 361              		.cfi_def_cfa_register 7
 362 018a 7860     		str	r0, [r7, #4]
 246:../src/stm32f30x_crc.c ****   CRC->DR = CRC_Data;
 363              		.loc 1 246 0
 364 018c 4FF44053 		mov	r3, #12288
 365 0190 C4F20203 		movt	r3, 16386
 366 0194 7A68     		ldr	r2, [r7, #4]
 367 0196 1A60     		str	r2, [r3, #0]
 247:../src/stm32f30x_crc.c ****   
 248:../src/stm32f30x_crc.c ****   return (CRC->DR);
 368              		.loc 1 248 0
 369 0198 4FF44053 		mov	r3, #12288
 370 019c C4F20203 		movt	r3, 16386
 371 01a0 1B68     		ldr	r3, [r3, #0]
 249:../src/stm32f30x_crc.c **** }
 372              		.loc 1 249 0
 373 01a2 1846     		mov	r0, r3
 374 01a4 07F10C07 		add	r7, r7, #12
 375 01a8 BD46     		mov	sp, r7
 376 01aa 80BC     		pop	{r7}
 377 01ac 7047     		bx	lr
 378              		.cfi_endproc
 379              	.LFE118:
 381 01ae 00BF     		.align	2
 382              		.global	CRC_CalcCRC16bits
 383              		.thumb
 384              		.thumb_func
 386              	CRC_CalcCRC16bits:
 387              	.LFB119:
 250:../src/stm32f30x_crc.c **** 
 251:../src/stm32f30x_crc.c **** /**
 252:../src/stm32f30x_crc.c ****   * @brief  Computes the 16-bit CRC of a given 16-bit data.
 253:../src/stm32f30x_crc.c ****   * @param  CRC_Data: data half-word(16-bit) to compute its CRC
 254:../src/stm32f30x_crc.c ****   * @retval 16-bit CRC
 255:../src/stm32f30x_crc.c ****   */
 256:../src/stm32f30x_crc.c **** uint32_t CRC_CalcCRC16bits(uint16_t CRC_Data)
 257:../src/stm32f30x_crc.c **** {
 388              		.loc 1 257 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 8
 391              		@ frame_needed = 1, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 393 01b0 80B4     		push	{r7}
 394              	.LCFI22:
 395              		.cfi_def_cfa_offset 4
 396              		.cfi_offset 7, -4
 397 01b2 83B0     		sub	sp, sp, #12
 398              	.LCFI23:
 399              		.cfi_def_cfa_offset 16
 400 01b4 00AF     		add	r7, sp, #0
 401              	.LCFI24:
 402              		.cfi_def_cfa_register 7
 403 01b6 0346     		mov	r3, r0
 404 01b8 FB80     		strh	r3, [r7, #6]	@ movhi
 258:../src/stm32f30x_crc.c ****   *(uint16_t*)(CRC_BASE) = (uint16_t) CRC_Data;
 405              		.loc 1 258 0
 406 01ba 4FF44053 		mov	r3, #12288
 407 01be C4F20203 		movt	r3, 16386
 408 01c2 FA88     		ldrh	r2, [r7, #6]	@ movhi
 409 01c4 1A80     		strh	r2, [r3, #0]	@ movhi
 259:../src/stm32f30x_crc.c ****   
 260:../src/stm32f30x_crc.c ****   return (CRC->DR);
 410              		.loc 1 260 0
 411 01c6 4FF44053 		mov	r3, #12288
 412 01ca C4F20203 		movt	r3, 16386
 413 01ce 1B68     		ldr	r3, [r3, #0]
 261:../src/stm32f30x_crc.c **** }
 414              		.loc 1 261 0
 415 01d0 1846     		mov	r0, r3
 416 01d2 07F10C07 		add	r7, r7, #12
 417 01d6 BD46     		mov	sp, r7
 418 01d8 80BC     		pop	{r7}
 419 01da 7047     		bx	lr
 420              		.cfi_endproc
 421              	.LFE119:
 423              		.align	2
 424              		.global	CRC_CalcCRC8bits
 425              		.thumb
 426              		.thumb_func
 428              	CRC_CalcCRC8bits:
 429              	.LFB120:
 262:../src/stm32f30x_crc.c **** 
 263:../src/stm32f30x_crc.c **** /**
 264:../src/stm32f30x_crc.c ****   * @brief  Computes the 8-bit CRC of a given 8-bit data.
 265:../src/stm32f30x_crc.c ****   * @param  CRC_Data: 8-bit data to compute its CRC
 266:../src/stm32f30x_crc.c ****   * @retval 8-bit CRC
 267:../src/stm32f30x_crc.c ****   */
 268:../src/stm32f30x_crc.c **** uint32_t CRC_CalcCRC8bits(uint8_t CRC_Data)
 269:../src/stm32f30x_crc.c **** {
 430              		.loc 1 269 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 8
 433              		@ frame_needed = 1, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 435 01dc 80B4     		push	{r7}
 436              	.LCFI25:
 437              		.cfi_def_cfa_offset 4
 438              		.cfi_offset 7, -4
 439 01de 83B0     		sub	sp, sp, #12
 440              	.LCFI26:
 441              		.cfi_def_cfa_offset 16
 442 01e0 00AF     		add	r7, sp, #0
 443              	.LCFI27:
 444              		.cfi_def_cfa_register 7
 445 01e2 0346     		mov	r3, r0
 446 01e4 FB71     		strb	r3, [r7, #7]
 270:../src/stm32f30x_crc.c ****   *(uint8_t*)(CRC_BASE) = (uint8_t) CRC_Data;
 447              		.loc 1 270 0
 448 01e6 4FF44053 		mov	r3, #12288
 449 01ea C4F20203 		movt	r3, 16386
 450 01ee FA79     		ldrb	r2, [r7, #7]
 451 01f0 1A70     		strb	r2, [r3, #0]
 271:../src/stm32f30x_crc.c **** 
 272:../src/stm32f30x_crc.c ****   return (CRC->DR);
 452              		.loc 1 272 0
 453 01f2 4FF44053 		mov	r3, #12288
 454 01f6 C4F20203 		movt	r3, 16386
 455 01fa 1B68     		ldr	r3, [r3, #0]
 273:../src/stm32f30x_crc.c **** }
 456              		.loc 1 273 0
 457 01fc 1846     		mov	r0, r3
 458 01fe 07F10C07 		add	r7, r7, #12
 459 0202 BD46     		mov	sp, r7
 460 0204 80BC     		pop	{r7}
 461 0206 7047     		bx	lr
 462              		.cfi_endproc
 463              	.LFE120:
 465              		.align	2
 466              		.global	CRC_CalcBlockCRC
 467              		.thumb
 468              		.thumb_func
 470              	CRC_CalcBlockCRC:
 471              	.LFB121:
 274:../src/stm32f30x_crc.c **** 
 275:../src/stm32f30x_crc.c **** /**
 276:../src/stm32f30x_crc.c ****   * @brief  Computes the 32-bit CRC of a given buffer of data word(32-bit).
 277:../src/stm32f30x_crc.c ****   * @param  pBuffer: pointer to the buffer containing the data to be computed
 278:../src/stm32f30x_crc.c ****   * @param  BufferLength: length of the buffer to be computed
 279:../src/stm32f30x_crc.c ****   * @retval 32-bit CRC
 280:../src/stm32f30x_crc.c ****   */
 281:../src/stm32f30x_crc.c **** uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
 282:../src/stm32f30x_crc.c **** {
 472              		.loc 1 282 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 16
 475              		@ frame_needed = 1, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 477 0208 80B4     		push	{r7}
 478              	.LCFI28:
 479              		.cfi_def_cfa_offset 4
 480              		.cfi_offset 7, -4
 481 020a 85B0     		sub	sp, sp, #20
 482              	.LCFI29:
 483              		.cfi_def_cfa_offset 24
 484 020c 00AF     		add	r7, sp, #0
 485              	.LCFI30:
 486              		.cfi_def_cfa_register 7
 487 020e 7860     		str	r0, [r7, #4]
 488 0210 3960     		str	r1, [r7, #0]
 283:../src/stm32f30x_crc.c ****   uint32_t index = 0;
 489              		.loc 1 283 0
 490 0212 4FF00003 		mov	r3, #0
 491 0216 FB60     		str	r3, [r7, #12]
 284:../src/stm32f30x_crc.c ****   
 285:../src/stm32f30x_crc.c ****   for(index = 0; index < BufferLength; index++)
 492              		.loc 1 285 0
 493 0218 4FF00003 		mov	r3, #0
 494 021c FB60     		str	r3, [r7, #12]
 495 021e 0EE0     		b	.L17
 496              	.L18:
 286:../src/stm32f30x_crc.c ****   {
 287:../src/stm32f30x_crc.c ****     CRC->DR = pBuffer[index];
 497              		.loc 1 287 0 discriminator 2
 498 0220 4FF44053 		mov	r3, #12288
 499 0224 C4F20203 		movt	r3, 16386
 500 0228 FA68     		ldr	r2, [r7, #12]
 501 022a 4FEA8202 		lsl	r2, r2, #2
 502 022e 7968     		ldr	r1, [r7, #4]
 503 0230 8A18     		adds	r2, r1, r2
 504 0232 1268     		ldr	r2, [r2, #0]
 505 0234 1A60     		str	r2, [r3, #0]
 285:../src/stm32f30x_crc.c ****   for(index = 0; index < BufferLength; index++)
 506              		.loc 1 285 0 discriminator 2
 507 0236 FB68     		ldr	r3, [r7, #12]
 508 0238 03F10103 		add	r3, r3, #1
 509 023c FB60     		str	r3, [r7, #12]
 510              	.L17:
 285:../src/stm32f30x_crc.c ****   for(index = 0; index < BufferLength; index++)
 511              		.loc 1 285 0 is_stmt 0 discriminator 1
 512 023e FA68     		ldr	r2, [r7, #12]
 513 0240 3B68     		ldr	r3, [r7, #0]
 514 0242 9A42     		cmp	r2, r3
 515 0244 ECD3     		bcc	.L18
 288:../src/stm32f30x_crc.c ****   }
 289:../src/stm32f30x_crc.c ****   return (CRC->DR);
 516              		.loc 1 289 0 is_stmt 1
 517 0246 4FF44053 		mov	r3, #12288
 518 024a C4F20203 		movt	r3, 16386
 519 024e 1B68     		ldr	r3, [r3, #0]
 290:../src/stm32f30x_crc.c **** }
 520              		.loc 1 290 0
 521 0250 1846     		mov	r0, r3
 522 0252 07F11407 		add	r7, r7, #20
 523 0256 BD46     		mov	sp, r7
 524 0258 80BC     		pop	{r7}
 525 025a 7047     		bx	lr
 526              		.cfi_endproc
 527              	.LFE121:
 529              		.align	2
 530              		.global	CRC_GetCRC
 531              		.thumb
 532              		.thumb_func
 534              	CRC_GetCRC:
 535              	.LFB122:
 291:../src/stm32f30x_crc.c **** 
 292:../src/stm32f30x_crc.c **** /**
 293:../src/stm32f30x_crc.c ****   * @brief  Returns the current CRC value.
 294:../src/stm32f30x_crc.c ****   * @param  None
 295:../src/stm32f30x_crc.c ****   * @retval 32-bit CRC
 296:../src/stm32f30x_crc.c ****   */
 297:../src/stm32f30x_crc.c **** uint32_t CRC_GetCRC(void)
 298:../src/stm32f30x_crc.c **** {
 536              		.loc 1 298 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 1, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 541 025c 80B4     		push	{r7}
 542              	.LCFI31:
 543              		.cfi_def_cfa_offset 4
 544              		.cfi_offset 7, -4
 545 025e 00AF     		add	r7, sp, #0
 546              	.LCFI32:
 547              		.cfi_def_cfa_register 7
 299:../src/stm32f30x_crc.c ****   return (CRC->DR);
 548              		.loc 1 299 0
 549 0260 4FF44053 		mov	r3, #12288
 550 0264 C4F20203 		movt	r3, 16386
 551 0268 1B68     		ldr	r3, [r3, #0]
 300:../src/stm32f30x_crc.c **** }
 552              		.loc 1 300 0
 553 026a 1846     		mov	r0, r3
 554 026c BD46     		mov	sp, r7
 555 026e 80BC     		pop	{r7}
 556 0270 7047     		bx	lr
 557              		.cfi_endproc
 558              	.LFE122:
 560 0272 00BF     		.align	2
 561              		.global	CRC_SetIDRegister
 562              		.thumb
 563              		.thumb_func
 565              	CRC_SetIDRegister:
 566              	.LFB123:
 301:../src/stm32f30x_crc.c **** 
 302:../src/stm32f30x_crc.c **** /**
 303:../src/stm32f30x_crc.c ****   * @}
 304:../src/stm32f30x_crc.c ****   */
 305:../src/stm32f30x_crc.c **** 
 306:../src/stm32f30x_crc.c **** /** @defgroup CRC_Group3 CRC Independent Register (IDR) access functions
 307:../src/stm32f30x_crc.c ****  *  @brief   CRC Independent Register (IDR) access (write/read) functions
 308:../src/stm32f30x_crc.c ****  *
 309:../src/stm32f30x_crc.c **** @verbatim
 310:../src/stm32f30x_crc.c ****  ===============================================================================
 311:../src/stm32f30x_crc.c ****            ##### CRC Independent Register (IDR) access functions #####
 312:../src/stm32f30x_crc.c ****  ===============================================================================
 313:../src/stm32f30x_crc.c **** 
 314:../src/stm32f30x_crc.c **** @endverbatim
 315:../src/stm32f30x_crc.c ****   * @{
 316:../src/stm32f30x_crc.c ****   */
 317:../src/stm32f30x_crc.c **** 
 318:../src/stm32f30x_crc.c **** /**
 319:../src/stm32f30x_crc.c ****   * @brief  Stores an 8-bit data in the Independent Data(ID) register.
 320:../src/stm32f30x_crc.c ****   * @param  CRC_IDValue: 8-bit value to be stored in the ID register 					
 321:../src/stm32f30x_crc.c ****   * @retval None
 322:../src/stm32f30x_crc.c ****   */
 323:../src/stm32f30x_crc.c **** void CRC_SetIDRegister(uint8_t CRC_IDValue)
 324:../src/stm32f30x_crc.c **** {
 567              		.loc 1 324 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 8
 570              		@ frame_needed = 1, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 572 0274 80B4     		push	{r7}
 573              	.LCFI33:
 574              		.cfi_def_cfa_offset 4
 575              		.cfi_offset 7, -4
 576 0276 83B0     		sub	sp, sp, #12
 577              	.LCFI34:
 578              		.cfi_def_cfa_offset 16
 579 0278 00AF     		add	r7, sp, #0
 580              	.LCFI35:
 581              		.cfi_def_cfa_register 7
 582 027a 0346     		mov	r3, r0
 583 027c FB71     		strb	r3, [r7, #7]
 325:../src/stm32f30x_crc.c ****   CRC->IDR = CRC_IDValue;
 584              		.loc 1 325 0
 585 027e 4FF44053 		mov	r3, #12288
 586 0282 C4F20203 		movt	r3, 16386
 587 0286 FA79     		ldrb	r2, [r7, #7]
 588 0288 1A71     		strb	r2, [r3, #4]
 326:../src/stm32f30x_crc.c **** }
 589              		.loc 1 326 0
 590 028a 07F10C07 		add	r7, r7, #12
 591 028e BD46     		mov	sp, r7
 592 0290 80BC     		pop	{r7}
 593 0292 7047     		bx	lr
 594              		.cfi_endproc
 595              	.LFE123:
 597              		.align	2
 598              		.global	CRC_GetIDRegister
 599              		.thumb
 600              		.thumb_func
 602              	CRC_GetIDRegister:
 603              	.LFB124:
 327:../src/stm32f30x_crc.c **** 
 328:../src/stm32f30x_crc.c **** /**
 329:../src/stm32f30x_crc.c ****   * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
 330:../src/stm32f30x_crc.c ****   * @param  None
 331:../src/stm32f30x_crc.c ****   * @retval 8-bit value of the ID register 
 332:../src/stm32f30x_crc.c ****   */
 333:../src/stm32f30x_crc.c **** uint8_t CRC_GetIDRegister(void)
 334:../src/stm32f30x_crc.c **** {
 604              		.loc 1 334 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 0
 607              		@ frame_needed = 1, uses_anonymous_args = 0
 608              		@ link register save eliminated.
 609 0294 80B4     		push	{r7}
 610              	.LCFI36:
 611              		.cfi_def_cfa_offset 4
 612              		.cfi_offset 7, -4
 613 0296 00AF     		add	r7, sp, #0
 614              	.LCFI37:
 615              		.cfi_def_cfa_register 7
 335:../src/stm32f30x_crc.c ****   return (CRC->IDR);
 616              		.loc 1 335 0
 617 0298 4FF44053 		mov	r3, #12288
 618 029c C4F20203 		movt	r3, 16386
 619 02a0 1B79     		ldrb	r3, [r3, #4]
 620 02a2 DBB2     		uxtb	r3, r3
 336:../src/stm32f30x_crc.c **** }
 621              		.loc 1 336 0
 622 02a4 1846     		mov	r0, r3
 623 02a6 BD46     		mov	sp, r7
 624 02a8 80BC     		pop	{r7}
 625 02aa 7047     		bx	lr
 626              		.cfi_endproc
 627              	.LFE124:
 629              	.Letext0:
 630              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 631              		.file 3 "/home/aghosh01/Embedded/stm32_dev_wkspace/STM32F3x/inc/stm32f30x.h"
 632              		.file 4 "/home/aghosh01/Embedded/stm32_dev_wkspace/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f30x_crc.c
     /tmp/ccaxorme.s:20     .text:00000000 $t
     /tmp/ccaxorme.s:25     .text:00000000 CRC_DeInit
     /tmp/ccaxorme.s:78     .text:00000054 CRC_ResetDR
     /tmp/ccaxorme.s:112    .text:00000078 CRC_PolynomialSizeSelect
     /tmp/ccaxorme.s:165    .text:000000b8 CRC_ReverseInputDataSelect
     /tmp/ccaxorme.s:218    .text:000000f8 CRC_ReverseOutputDataCmd
     /tmp/ccaxorme.s:273    .text:00000144 CRC_SetInitRegister
     /tmp/ccaxorme.s:309    .text:00000164 CRC_SetPolynomial
     /tmp/ccaxorme.s:345    .text:00000184 CRC_CalcCRC
     /tmp/ccaxorme.s:386    .text:000001b0 CRC_CalcCRC16bits
     /tmp/ccaxorme.s:428    .text:000001dc CRC_CalcCRC8bits
     /tmp/ccaxorme.s:470    .text:00000208 CRC_CalcBlockCRC
     /tmp/ccaxorme.s:534    .text:0000025c CRC_GetCRC
     /tmp/ccaxorme.s:565    .text:00000274 CRC_SetIDRegister
     /tmp/ccaxorme.s:602    .text:00000294 CRC_GetIDRegister
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.743cd71370ebc432b539c5dba7924ecc
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.cf7c793e178943e1bbf613f1b21cd51a
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0

NO UNDEFINED SYMBOLS
