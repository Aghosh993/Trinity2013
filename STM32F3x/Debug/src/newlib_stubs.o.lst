   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"newlib_stubs.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	__env
  21              		.bss
  22              		.align	2
  25              	__env:
  26 0000 00000000 		.space	4
  27              		.global	environ
  28              		.data
  29              		.align	2
  32              	environ:
  33 0000 00000000 		.word	__env
  34              		.section	.rodata
  35              		.align	2
  36              	.LC0:
  37 0000 65786974 		.ascii	"exit\000"
  37      00
  38              		.text
  39              		.align	2
  40              		.global	_exit
  41              		.thumb
  42              		.thumb_func
  44              	_exit:
  45              	.LFB111:
  46              		.file 1 "../src/newlib_stubs.c"
   1:../src/newlib_stubs.c **** /*
   2:../src/newlib_stubs.c ****  * newlib_stubs.c
   3:../src/newlib_stubs.c ****  *
   4:../src/newlib_stubs.c ****  *  Created on: 2 Nov 2010
   5:../src/newlib_stubs.c ****  *      Author: nanoage.co.uk
   6:../src/newlib_stubs.c ****  */
   7:../src/newlib_stubs.c **** #include <errno.h>
   8:../src/newlib_stubs.c **** #include <sys/stat.h>
   9:../src/newlib_stubs.c **** #include <sys/times.h>
  10:../src/newlib_stubs.c **** #include <sys/unistd.h>
  11:../src/newlib_stubs.c **** #include "stm32f30x_usart.h"
  12:../src/newlib_stubs.c **** 
  13:../src/newlib_stubs.c **** #define STDOUT_USART 1
  14:../src/newlib_stubs.c **** #define STDIN_USART	 1
  15:../src/newlib_stubs.c **** 
  16:../src/newlib_stubs.c **** #ifndef STDOUT_USART
  17:../src/newlib_stubs.c **** #define STDOUT_USART 2
  18:../src/newlib_stubs.c **** #endif
  19:../src/newlib_stubs.c **** 
  20:../src/newlib_stubs.c **** #ifndef STDERR_USART
  21:../src/newlib_stubs.c **** #define STDERR_USART 2
  22:../src/newlib_stubs.c **** #endif
  23:../src/newlib_stubs.c **** 
  24:../src/newlib_stubs.c **** #ifndef STDIN_USART
  25:../src/newlib_stubs.c **** #define STDIN_USART 2
  26:../src/newlib_stubs.c **** #endif
  27:../src/newlib_stubs.c **** 
  28:../src/newlib_stubs.c **** #undef errno
  29:../src/newlib_stubs.c **** extern int errno;
  30:../src/newlib_stubs.c **** 
  31:../src/newlib_stubs.c **** /*
  32:../src/newlib_stubs.c ****  environ
  33:../src/newlib_stubs.c ****  A pointer to a list of environment variables and their values.
  34:../src/newlib_stubs.c ****  For a minimal environment, this empty list is adequate:
  35:../src/newlib_stubs.c ****  */
  36:../src/newlib_stubs.c **** char *__env[1] = { 0 };
  37:../src/newlib_stubs.c **** char **environ = __env;
  38:../src/newlib_stubs.c **** 
  39:../src/newlib_stubs.c **** int _write(int file, char *ptr, int len);
  40:../src/newlib_stubs.c **** 
  41:../src/newlib_stubs.c **** void _exit(int status) {
  47              		.loc 1 41 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 8
  50              		@ frame_needed = 1, uses_anonymous_args = 0
  51 0000 80B5     		push	{r7, lr}
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 8
  54              		.cfi_offset 7, -8
  55              		.cfi_offset 14, -4
  56 0002 82B0     		sub	sp, sp, #8
  57              	.LCFI1:
  58              		.cfi_def_cfa_offset 16
  59 0004 00AF     		add	r7, sp, #0
  60              	.LCFI2:
  61              		.cfi_def_cfa_register 7
  62 0006 7860     		str	r0, [r7, #4]
  42:../src/newlib_stubs.c ****     _write(1, "exit", 4);
  63              		.loc 1 42 0
  64 0008 4FF00100 		mov	r0, #1
  65 000c 40F20001 		movw	r1, #:lower16:.LC0
  66 0010 C0F20001 		movt	r1, #:upper16:.LC0
  67 0014 4FF00402 		mov	r2, #4
  68 0018 FFF7FEFF 		bl	_write
  69              	.L2:
  43:../src/newlib_stubs.c ****     while (1) {
  44:../src/newlib_stubs.c ****         ;
  45:../src/newlib_stubs.c ****     }
  70              		.loc 1 45 0 discriminator 1
  71 001c FEE7     		b	.L2
  72              		.cfi_endproc
  73              	.LFE111:
  75 001e 00BF     		.align	2
  76              		.global	_close
  77              		.thumb
  78              		.thumb_func
  80              	_close:
  81              	.LFB112:
  46:../src/newlib_stubs.c **** }
  47:../src/newlib_stubs.c **** 
  48:../src/newlib_stubs.c **** int _close(int file) {
  82              		.loc 1 48 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 8
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87 0020 80B4     		push	{r7}
  88              	.LCFI3:
  89              		.cfi_def_cfa_offset 4
  90              		.cfi_offset 7, -4
  91 0022 83B0     		sub	sp, sp, #12
  92              	.LCFI4:
  93              		.cfi_def_cfa_offset 16
  94 0024 00AF     		add	r7, sp, #0
  95              	.LCFI5:
  96              		.cfi_def_cfa_register 7
  97 0026 7860     		str	r0, [r7, #4]
  49:../src/newlib_stubs.c ****     return -1;
  98              		.loc 1 49 0
  99 0028 4FF0FF33 		mov	r3, #-1
  50:../src/newlib_stubs.c **** }
 100              		.loc 1 50 0
 101 002c 1846     		mov	r0, r3
 102 002e 07F10C07 		add	r7, r7, #12
 103 0032 BD46     		mov	sp, r7
 104 0034 80BC     		pop	{r7}
 105 0036 7047     		bx	lr
 106              		.cfi_endproc
 107              	.LFE112:
 109              		.align	2
 110              		.global	_execve
 111              		.thumb
 112              		.thumb_func
 114              	_execve:
 115              	.LFB113:
  51:../src/newlib_stubs.c **** /*
  52:../src/newlib_stubs.c ****  execve
  53:../src/newlib_stubs.c ****  Transfer control to a new process. Minimal implementation (for a system without processes):
  54:../src/newlib_stubs.c ****  */
  55:../src/newlib_stubs.c **** int _execve(char *name, char **argv, char **env) {
 116              		.loc 1 55 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 16
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121 0038 80B4     		push	{r7}
 122              	.LCFI6:
 123              		.cfi_def_cfa_offset 4
 124              		.cfi_offset 7, -4
 125 003a 85B0     		sub	sp, sp, #20
 126              	.LCFI7:
 127              		.cfi_def_cfa_offset 24
 128 003c 00AF     		add	r7, sp, #0
 129              	.LCFI8:
 130              		.cfi_def_cfa_register 7
 131 003e F860     		str	r0, [r7, #12]
 132 0040 B960     		str	r1, [r7, #8]
 133 0042 7A60     		str	r2, [r7, #4]
  56:../src/newlib_stubs.c ****     errno = ENOMEM;
 134              		.loc 1 56 0
 135 0044 40F20003 		movw	r3, #:lower16:errno
 136 0048 C0F20003 		movt	r3, #:upper16:errno
 137 004c 4FF00C02 		mov	r2, #12
 138 0050 1A60     		str	r2, [r3, #0]
  57:../src/newlib_stubs.c ****     return -1;
 139              		.loc 1 57 0
 140 0052 4FF0FF33 		mov	r3, #-1
  58:../src/newlib_stubs.c **** }
 141              		.loc 1 58 0
 142 0056 1846     		mov	r0, r3
 143 0058 07F11407 		add	r7, r7, #20
 144 005c BD46     		mov	sp, r7
 145 005e 80BC     		pop	{r7}
 146 0060 7047     		bx	lr
 147              		.cfi_endproc
 148              	.LFE113:
 150 0062 00BF     		.align	2
 151              		.global	_fork
 152              		.thumb
 153              		.thumb_func
 155              	_fork:
 156              	.LFB114:
  59:../src/newlib_stubs.c **** /*
  60:../src/newlib_stubs.c ****  fork
  61:../src/newlib_stubs.c ****  Create a new process. Minimal implementation (for a system without processes):
  62:../src/newlib_stubs.c ****  */
  63:../src/newlib_stubs.c **** 
  64:../src/newlib_stubs.c **** int _fork() {
 157              		.loc 1 64 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 162 0064 80B4     		push	{r7}
 163              	.LCFI9:
 164              		.cfi_def_cfa_offset 4
 165              		.cfi_offset 7, -4
 166 0066 00AF     		add	r7, sp, #0
 167              	.LCFI10:
 168              		.cfi_def_cfa_register 7
  65:../src/newlib_stubs.c ****     errno = EAGAIN;
 169              		.loc 1 65 0
 170 0068 40F20003 		movw	r3, #:lower16:errno
 171 006c C0F20003 		movt	r3, #:upper16:errno
 172 0070 4FF00B02 		mov	r2, #11
 173 0074 1A60     		str	r2, [r3, #0]
  66:../src/newlib_stubs.c ****     return -1;
 174              		.loc 1 66 0
 175 0076 4FF0FF33 		mov	r3, #-1
  67:../src/newlib_stubs.c **** }
 176              		.loc 1 67 0
 177 007a 1846     		mov	r0, r3
 178 007c BD46     		mov	sp, r7
 179 007e 80BC     		pop	{r7}
 180 0080 7047     		bx	lr
 181              		.cfi_endproc
 182              	.LFE114:
 184 0082 00BF     		.align	2
 185              		.global	_fstat
 186              		.thumb
 187              		.thumb_func
 189              	_fstat:
 190              	.LFB115:
  68:../src/newlib_stubs.c **** /*
  69:../src/newlib_stubs.c ****  fstat
  70:../src/newlib_stubs.c ****  Status of an open file. For consistency with other minimal implementations in these examples,
  71:../src/newlib_stubs.c ****  all files are regarded as character special devices.
  72:../src/newlib_stubs.c ****  The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C libr
  73:../src/newlib_stubs.c ****  */
  74:../src/newlib_stubs.c **** int _fstat(int file, struct stat *st) {
 191              		.loc 1 74 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 8
 194              		@ frame_needed = 1, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196 0084 80B4     		push	{r7}
 197              	.LCFI11:
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 7, -4
 200 0086 83B0     		sub	sp, sp, #12
 201              	.LCFI12:
 202              		.cfi_def_cfa_offset 16
 203 0088 00AF     		add	r7, sp, #0
 204              	.LCFI13:
 205              		.cfi_def_cfa_register 7
 206 008a 7860     		str	r0, [r7, #4]
 207 008c 3960     		str	r1, [r7, #0]
  75:../src/newlib_stubs.c ****     st->st_mode = S_IFCHR;
 208              		.loc 1 75 0
 209 008e 3B68     		ldr	r3, [r7, #0]
 210 0090 4FF40052 		mov	r2, #8192
 211 0094 5A60     		str	r2, [r3, #4]
  76:../src/newlib_stubs.c ****     return 0;
 212              		.loc 1 76 0
 213 0096 4FF00003 		mov	r3, #0
  77:../src/newlib_stubs.c **** }
 214              		.loc 1 77 0
 215 009a 1846     		mov	r0, r3
 216 009c 07F10C07 		add	r7, r7, #12
 217 00a0 BD46     		mov	sp, r7
 218 00a2 80BC     		pop	{r7}
 219 00a4 7047     		bx	lr
 220              		.cfi_endproc
 221              	.LFE115:
 223 00a6 00BF     		.align	2
 224              		.global	_getpid
 225              		.thumb
 226              		.thumb_func
 228              	_getpid:
 229              	.LFB116:
  78:../src/newlib_stubs.c **** 
  79:../src/newlib_stubs.c **** /*
  80:../src/newlib_stubs.c ****  getpid
  81:../src/newlib_stubs.c ****  Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. 
  82:../src/newlib_stubs.c ****  */
  83:../src/newlib_stubs.c **** 
  84:../src/newlib_stubs.c **** int _getpid() {
 230              		.loc 1 84 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235 00a8 80B4     		push	{r7}
 236              	.LCFI14:
 237              		.cfi_def_cfa_offset 4
 238              		.cfi_offset 7, -4
 239 00aa 00AF     		add	r7, sp, #0
 240              	.LCFI15:
 241              		.cfi_def_cfa_register 7
  85:../src/newlib_stubs.c ****     return 1;
 242              		.loc 1 85 0
 243 00ac 4FF00103 		mov	r3, #1
  86:../src/newlib_stubs.c **** }
 244              		.loc 1 86 0
 245 00b0 1846     		mov	r0, r3
 246 00b2 BD46     		mov	sp, r7
 247 00b4 80BC     		pop	{r7}
 248 00b6 7047     		bx	lr
 249              		.cfi_endproc
 250              	.LFE116:
 252              		.align	2
 253              		.global	_isatty
 254              		.thumb
 255              		.thumb_func
 257              	_isatty:
 258              	.LFB117:
  87:../src/newlib_stubs.c **** 
  88:../src/newlib_stubs.c **** /*
  89:../src/newlib_stubs.c ****  isatty
  90:../src/newlib_stubs.c ****  Query whether output stream is a terminal. For consistency with the other minimal implementations,
  91:../src/newlib_stubs.c ****  */
  92:../src/newlib_stubs.c **** int _isatty(int file) {
 259              		.loc 1 92 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 8
 262              		@ frame_needed = 1, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 264 00b8 80B4     		push	{r7}
 265              	.LCFI16:
 266              		.cfi_def_cfa_offset 4
 267              		.cfi_offset 7, -4
 268 00ba 83B0     		sub	sp, sp, #12
 269              	.LCFI17:
 270              		.cfi_def_cfa_offset 16
 271 00bc 00AF     		add	r7, sp, #0
 272              	.LCFI18:
 273              		.cfi_def_cfa_register 7
 274 00be 7860     		str	r0, [r7, #4]
  93:../src/newlib_stubs.c ****     switch (file){
 275              		.loc 1 93 0
 276 00c0 7B68     		ldr	r3, [r7, #4]
 277 00c2 03F10003 		add	r3, r3, #0
 278 00c6 022B     		cmp	r3, #2
 279 00c8 02D8     		bhi	.L14
  94:../src/newlib_stubs.c ****     case STDOUT_FILENO:
  95:../src/newlib_stubs.c ****     case STDERR_FILENO:
  96:../src/newlib_stubs.c ****     case STDIN_FILENO:
  97:../src/newlib_stubs.c ****         return 1;
 280              		.loc 1 97 0
 281 00ca 4FF00103 		mov	r3, #1
 282 00ce 08E0     		b	.L16
 283              	.L14:
  98:../src/newlib_stubs.c ****     default:
  99:../src/newlib_stubs.c ****         //errno = ENOTTY;
 100:../src/newlib_stubs.c ****         errno = EBADF;
 284              		.loc 1 100 0
 285 00d0 40F20003 		movw	r3, #:lower16:errno
 286 00d4 C0F20003 		movt	r3, #:upper16:errno
 287 00d8 4FF00902 		mov	r2, #9
 288 00dc 1A60     		str	r2, [r3, #0]
 101:../src/newlib_stubs.c ****         return 0;
 289              		.loc 1 101 0
 290 00de 4FF00003 		mov	r3, #0
 291              	.L16:
 102:../src/newlib_stubs.c ****     }
 103:../src/newlib_stubs.c **** }
 292              		.loc 1 103 0
 293 00e2 1846     		mov	r0, r3
 294 00e4 07F10C07 		add	r7, r7, #12
 295 00e8 BD46     		mov	sp, r7
 296 00ea 80BC     		pop	{r7}
 297 00ec 7047     		bx	lr
 298              		.cfi_endproc
 299              	.LFE117:
 301 00ee 00BF     		.align	2
 302              		.global	_kill
 303              		.thumb
 304              		.thumb_func
 306              	_kill:
 307              	.LFB118:
 104:../src/newlib_stubs.c **** 
 105:../src/newlib_stubs.c **** 
 106:../src/newlib_stubs.c **** /*
 107:../src/newlib_stubs.c ****  kill
 108:../src/newlib_stubs.c ****  Send a signal. Minimal implementation:
 109:../src/newlib_stubs.c ****  */
 110:../src/newlib_stubs.c **** int _kill(int pid, int sig) {
 308              		.loc 1 110 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 8
 311              		@ frame_needed = 1, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313 00f0 80B4     		push	{r7}
 314              	.LCFI19:
 315              		.cfi_def_cfa_offset 4
 316              		.cfi_offset 7, -4
 317 00f2 83B0     		sub	sp, sp, #12
 318              	.LCFI20:
 319              		.cfi_def_cfa_offset 16
 320 00f4 00AF     		add	r7, sp, #0
 321              	.LCFI21:
 322              		.cfi_def_cfa_register 7
 323 00f6 7860     		str	r0, [r7, #4]
 324 00f8 3960     		str	r1, [r7, #0]
 111:../src/newlib_stubs.c ****     errno = EINVAL;
 325              		.loc 1 111 0
 326 00fa 40F20003 		movw	r3, #:lower16:errno
 327 00fe C0F20003 		movt	r3, #:upper16:errno
 328 0102 4FF01602 		mov	r2, #22
 329 0106 1A60     		str	r2, [r3, #0]
 112:../src/newlib_stubs.c ****     return (-1);
 330              		.loc 1 112 0
 331 0108 4FF0FF33 		mov	r3, #-1
 113:../src/newlib_stubs.c **** }
 332              		.loc 1 113 0
 333 010c 1846     		mov	r0, r3
 334 010e 07F10C07 		add	r7, r7, #12
 335 0112 BD46     		mov	sp, r7
 336 0114 80BC     		pop	{r7}
 337 0116 7047     		bx	lr
 338              		.cfi_endproc
 339              	.LFE118:
 341              		.align	2
 342              		.global	_link
 343              		.thumb
 344              		.thumb_func
 346              	_link:
 347              	.LFB119:
 114:../src/newlib_stubs.c **** 
 115:../src/newlib_stubs.c **** /*
 116:../src/newlib_stubs.c ****  link
 117:../src/newlib_stubs.c ****  Establish a new name for an existing file. Minimal implementation:
 118:../src/newlib_stubs.c ****  */
 119:../src/newlib_stubs.c **** 
 120:../src/newlib_stubs.c **** int _link(char *old, char *new) {
 348              		.loc 1 120 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0118 80B4     		push	{r7}
 354              	.LCFI22:
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
 357 011a 83B0     		sub	sp, sp, #12
 358              	.LCFI23:
 359              		.cfi_def_cfa_offset 16
 360 011c 00AF     		add	r7, sp, #0
 361              	.LCFI24:
 362              		.cfi_def_cfa_register 7
 363 011e 7860     		str	r0, [r7, #4]
 364 0120 3960     		str	r1, [r7, #0]
 121:../src/newlib_stubs.c ****     errno = EMLINK;
 365              		.loc 1 121 0
 366 0122 40F20003 		movw	r3, #:lower16:errno
 367 0126 C0F20003 		movt	r3, #:upper16:errno
 368 012a 4FF01F02 		mov	r2, #31
 369 012e 1A60     		str	r2, [r3, #0]
 122:../src/newlib_stubs.c ****     return -1;
 370              		.loc 1 122 0
 371 0130 4FF0FF33 		mov	r3, #-1
 123:../src/newlib_stubs.c **** }
 372              		.loc 1 123 0
 373 0134 1846     		mov	r0, r3
 374 0136 07F10C07 		add	r7, r7, #12
 375 013a BD46     		mov	sp, r7
 376 013c 80BC     		pop	{r7}
 377 013e 7047     		bx	lr
 378              		.cfi_endproc
 379              	.LFE119:
 381              		.align	2
 382              		.global	_lseek
 383              		.thumb
 384              		.thumb_func
 386              	_lseek:
 387              	.LFB120:
 124:../src/newlib_stubs.c **** 
 125:../src/newlib_stubs.c **** /*
 126:../src/newlib_stubs.c ****  lseek
 127:../src/newlib_stubs.c ****  Set position in a file. Minimal implementation:
 128:../src/newlib_stubs.c ****  */
 129:../src/newlib_stubs.c **** int _lseek(int file, int ptr, int dir) {
 388              		.loc 1 129 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 16
 391              		@ frame_needed = 1, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 393 0140 80B4     		push	{r7}
 394              	.LCFI25:
 395              		.cfi_def_cfa_offset 4
 396              		.cfi_offset 7, -4
 397 0142 85B0     		sub	sp, sp, #20
 398              	.LCFI26:
 399              		.cfi_def_cfa_offset 24
 400 0144 00AF     		add	r7, sp, #0
 401              	.LCFI27:
 402              		.cfi_def_cfa_register 7
 403 0146 F860     		str	r0, [r7, #12]
 404 0148 B960     		str	r1, [r7, #8]
 405 014a 7A60     		str	r2, [r7, #4]
 130:../src/newlib_stubs.c ****     return 0;
 406              		.loc 1 130 0
 407 014c 4FF00003 		mov	r3, #0
 131:../src/newlib_stubs.c **** }
 408              		.loc 1 131 0
 409 0150 1846     		mov	r0, r3
 410 0152 07F11407 		add	r7, r7, #20
 411 0156 BD46     		mov	sp, r7
 412 0158 80BC     		pop	{r7}
 413 015a 7047     		bx	lr
 414              		.cfi_endproc
 415              	.LFE120:
 417              		.section	.rodata
 418 0005 000000   		.align	2
 419              	.LC1:
 420 0008 48656170 		.ascii	"Heap and stack collision\012\000"
 420      20616E64 
 420      20737461 
 420      636B2063 
 420      6F6C6C69 
 421 0022 0000     		.text
 422              		.align	2
 423              		.global	_sbrk
 424              		.thumb
 425              		.thumb_func
 427              	_sbrk:
 428              	.LFB121:
 132:../src/newlib_stubs.c **** 
 133:../src/newlib_stubs.c **** /*
 134:../src/newlib_stubs.c ****  sbrk
 135:../src/newlib_stubs.c ****  Increase program data space.
 136:../src/newlib_stubs.c ****  Malloc and related functions depend on this
 137:../src/newlib_stubs.c ****  */
 138:../src/newlib_stubs.c **** caddr_t _sbrk(int incr) {
 429              		.loc 1 138 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 16
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433 015c 90B5     		push	{r4, r7, lr}
 434              	.LCFI28:
 435              		.cfi_def_cfa_offset 12
 436              		.cfi_offset 4, -12
 437              		.cfi_offset 7, -8
 438              		.cfi_offset 14, -4
 439 015e 85B0     		sub	sp, sp, #20
 440              	.LCFI29:
 441              		.cfi_def_cfa_offset 32
 442 0160 00AF     		add	r7, sp, #0
 443              	.LCFI30:
 444              		.cfi_def_cfa_register 7
 445 0162 7860     		str	r0, [r7, #4]
 139:../src/newlib_stubs.c **** 
 140:../src/newlib_stubs.c ****     extern char _ebss; // Defined by the linker
 141:../src/newlib_stubs.c ****     static char *heap_end;
 142:../src/newlib_stubs.c ****     char *prev_heap_end;
 143:../src/newlib_stubs.c **** 
 144:../src/newlib_stubs.c ****     if (heap_end == 0) {
 446              		.loc 1 144 0
 447 0164 40F20003 		movw	r3, #:lower16:heap_end.7627
 448 0168 C0F20003 		movt	r3, #:upper16:heap_end.7627
 449 016c 1B68     		ldr	r3, [r3, #0]
 450 016e 002B     		cmp	r3, #0
 451 0170 08D1     		bne	.L24
 145:../src/newlib_stubs.c ****         heap_end = &_ebss;
 452              		.loc 1 145 0
 453 0172 40F20003 		movw	r3, #:lower16:heap_end.7627
 454 0176 C0F20003 		movt	r3, #:upper16:heap_end.7627
 455 017a 40F20002 		movw	r2, #:lower16:_ebss
 456 017e C0F20002 		movt	r2, #:upper16:_ebss
 457 0182 1A60     		str	r2, [r3, #0]
 458              	.L24:
 146:../src/newlib_stubs.c ****     }
 147:../src/newlib_stubs.c ****     prev_heap_end = heap_end;
 459              		.loc 1 147 0
 460 0184 40F20003 		movw	r3, #:lower16:heap_end.7627
 461 0188 C0F20003 		movt	r3, #:upper16:heap_end.7627
 462 018c 1B68     		ldr	r3, [r3, #0]
 463 018e FB60     		str	r3, [r7, #12]
 464              	.LBB4:
 465              	.LBB5:
 466              		.file 2 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h"
   1:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /**************************************************************************//**
   2:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * @version  V3.00
   5:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * @date     19. January 2012
   6:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  *
   7:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * @note
   8:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  *
  10:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * @par
  11:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  *
  15:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * @par
  16:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  *
  22:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  ******************************************************************************/
  23:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  24:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  27:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  28:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   @{
  32:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
  33:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  34:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /* ARM armcc specific functions */
  36:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  37:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #endif
  40:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  41:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  44:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get Control Register
  45:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  46:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  48:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               Control Register value
  49:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
  50:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  51:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
  52:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(__regControl);
  54:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
  55:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  56:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  57:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Set Control Register
  58:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  59:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  61:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
  63:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  64:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
  65:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __regControl = control;
  67:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
  68:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  69:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  70:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
  71:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  72:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  73:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  74:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               IPSR Register value
  75:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
  76:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  77:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
  78:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(__regIPSR);
  80:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
  81:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  82:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  83:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get APSR Register
  84:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  85:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  87:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               APSR Register value
  88:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
  89:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  90:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
  91:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(__regAPSR);
  93:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
  94:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  95:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  96:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
  98:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 100:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               xPSR Register value
 101:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 102:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 103:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 104:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(__regXPSR);
 106:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 107:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 108:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 109:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 111:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 113:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               PSP Register value
 114:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 115:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 116:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 117:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 120:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 121:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 122:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 124:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 126:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 128:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 129:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 130:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 133:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 134:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 135:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 137:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 139:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               MSP Register value
 140:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 141:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 142:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 143:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(__regMainStackPointer);
 145:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 146:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 147:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 148:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 150:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 152:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 154:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 155:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 156:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 159:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 160:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 161:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 163:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 165:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               Priority Mask value
 166:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 167:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 168:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 169:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(__regPriMask);
 171:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 172:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 173:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 174:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 176:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 178:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 180:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 181:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 182:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __regPriMask = (priMask);
 184:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 185:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  
 186:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 187:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 189:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Enable FIQ
 190:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 191:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 194:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 196:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 197:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Disable FIQ
 198:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 199:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 202:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 204:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 205:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get Base Priority
 206:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 207:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 209:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               Base Priority register value
 210:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 211:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 212:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 213:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(__regBasePri);
 215:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 216:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 217:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 218:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Set Base Priority
 219:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 220:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 222:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 224:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 225:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 226:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 229:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  
 230:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 231:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 233:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 235:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               Fault Mask register value
 236:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 237:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 238:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 239:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(__regFaultMask);
 241:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 242:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 243:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 244:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 246:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 248:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 250:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 252:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 255:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 256:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 258:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 259:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 261:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get FPSCR
 262:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 263:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 265:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 267:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 268:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 269:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(__regfpscr);
 272:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #else
 273:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****    return(0);
 274:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #endif
 275:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 276:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 277:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 278:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Set FPSCR
 279:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 280:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 282:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 284:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 285:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 286:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #endif
 290:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 291:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 292:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 294:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 295:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 298:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #include <cmsis_iar.h>
 299:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 300:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 301:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /* TI CCS specific functions */
 303:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 304:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #include <cmsis_ccs.h>
 305:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 306:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 307:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /* GNU gcc specific functions */
 309:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 310:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 311:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 312:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 313:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 314:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 315:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 316:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 317:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 318:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 319:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 320:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 321:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 322:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 323:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 324:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 325:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 326:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 327:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 328:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 329:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 330:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 331:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 332:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get Control Register
 333:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 334:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
 335:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 336:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               Control Register value
 337:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 338:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 339:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 340:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   uint32_t result;
 341:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 342:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 343:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(result);
 344:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 345:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 346:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 347:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Set Control Register
 348:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 349:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
 350:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 351:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 352:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 353:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 354:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 355:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 356:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 357:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 358:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 359:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
 360:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 361:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 362:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 363:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               IPSR Register value
 364:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 365:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 366:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 367:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   uint32_t result;
 368:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 369:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 370:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(result);
 371:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 372:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 373:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 374:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get APSR Register
 375:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 376:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
 377:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 378:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               APSR Register value
 379:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 380:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 381:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 382:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   uint32_t result;
 383:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 384:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 385:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(result);
 386:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 387:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 388:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 389:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
 390:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 391:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 392:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 393:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               xPSR Register value
 394:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 395:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 396:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 397:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   uint32_t result;
 398:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 399:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 400:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(result);
 401:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 402:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 403:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 404:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 405:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 406:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 407:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 408:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               PSP Register value
 409:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 410:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 411:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 412:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t result;
 413:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 414:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 415:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(result);
 416:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 417:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  
 418:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 419:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 420:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 421:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 422:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 423:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 424:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 425:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 426:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 427:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 428:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** }
 429:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 430:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 431:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 432:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 433:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 434:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 435:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****     \return               MSP Register value
 436:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****  */
 437:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 438:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** {
 439:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   register uint32_t result;
 440:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h **** 
 441:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 467              		.loc 2 441 0
 468              	@ 441 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h" 1
 469 0190 EFF30884 		MRS r4, msp
 470              	
 471              	@ 0 "" 2
 442:/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cmFunc.h ****   return(result);
 472              		.loc 2 442 0
 473              		.thumb
 474 0194 2346     		mov	r3, r4
 475              	.LBE5:
 476              	.LBE4:
 148:../src/newlib_stubs.c **** 
 149:../src/newlib_stubs.c **** char * stack = (char*) __get_MSP();
 477              		.loc 1 149 0
 478 0196 BB60     		str	r3, [r7, #8]
 150:../src/newlib_stubs.c ****      if (heap_end + incr >  stack)
 479              		.loc 1 150 0
 480 0198 40F20003 		movw	r3, #:lower16:heap_end.7627
 481 019c C0F20003 		movt	r3, #:upper16:heap_end.7627
 482 01a0 1A68     		ldr	r2, [r3, #0]
 483 01a2 7B68     		ldr	r3, [r7, #4]
 484 01a4 D218     		adds	r2, r2, r3
 485 01a6 BB68     		ldr	r3, [r7, #8]
 486 01a8 9A42     		cmp	r2, r3
 487 01aa 13D9     		bls	.L26
 151:../src/newlib_stubs.c ****      {
 152:../src/newlib_stubs.c ****          _write (STDERR_FILENO, "Heap and stack collision\n", 25);
 488              		.loc 1 152 0
 489 01ac 4FF00200 		mov	r0, #2
 490 01b0 40F20001 		movw	r1, #:lower16:.LC1
 491 01b4 C0F20001 		movt	r1, #:upper16:.LC1
 492 01b8 4FF01902 		mov	r2, #25
 493 01bc FFF7FEFF 		bl	_write
 153:../src/newlib_stubs.c ****          errno = ENOMEM;
 494              		.loc 1 153 0
 495 01c0 40F20003 		movw	r3, #:lower16:errno
 496 01c4 C0F20003 		movt	r3, #:upper16:errno
 497 01c8 4FF00C02 		mov	r2, #12
 498 01cc 1A60     		str	r2, [r3, #0]
 154:../src/newlib_stubs.c ****          return  (caddr_t) -1;
 499              		.loc 1 154 0
 500 01ce 4FF0FF33 		mov	r3, #-1
 501 01d2 0CE0     		b	.L27
 502              	.L26:
 155:../src/newlib_stubs.c ****          //abort ();
 156:../src/newlib_stubs.c ****      }
 157:../src/newlib_stubs.c **** 
 158:../src/newlib_stubs.c ****     heap_end += incr;
 503              		.loc 1 158 0
 504 01d4 40F20003 		movw	r3, #:lower16:heap_end.7627
 505 01d8 C0F20003 		movt	r3, #:upper16:heap_end.7627
 506 01dc 1A68     		ldr	r2, [r3, #0]
 507 01de 7B68     		ldr	r3, [r7, #4]
 508 01e0 D218     		adds	r2, r2, r3
 509 01e2 40F20003 		movw	r3, #:lower16:heap_end.7627
 510 01e6 C0F20003 		movt	r3, #:upper16:heap_end.7627
 511 01ea 1A60     		str	r2, [r3, #0]
 159:../src/newlib_stubs.c ****     return (caddr_t) prev_heap_end;
 512              		.loc 1 159 0
 513 01ec FB68     		ldr	r3, [r7, #12]
 514              	.L27:
 160:../src/newlib_stubs.c **** 
 161:../src/newlib_stubs.c **** }
 515              		.loc 1 161 0
 516 01ee 1846     		mov	r0, r3
 517 01f0 07F11407 		add	r7, r7, #20
 518 01f4 BD46     		mov	sp, r7
 519 01f6 90BD     		pop	{r4, r7, pc}
 520              		.cfi_endproc
 521              	.LFE121:
 523              		.align	2
 524              		.global	_read
 525              		.thumb
 526              		.thumb_func
 528              	_read:
 529              	.LFB122:
 162:../src/newlib_stubs.c **** 
 163:../src/newlib_stubs.c **** /*
 164:../src/newlib_stubs.c ****  read
 165:../src/newlib_stubs.c ****  Read a character to a file. `libc' subroutines will use this system routine for input from all fil
 166:../src/newlib_stubs.c ****  Returns -1 on error or blocks until the number of characters have been read.
 167:../src/newlib_stubs.c ****  */
 168:../src/newlib_stubs.c **** 
 169:../src/newlib_stubs.c **** 
 170:../src/newlib_stubs.c **** int _read(int file, char *ptr, int len) {
 530              		.loc 1 170 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 32
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 535 01f8 80B4     		push	{r7}
 536              	.LCFI31:
 537              		.cfi_def_cfa_offset 4
 538              		.cfi_offset 7, -4
 539 01fa 89B0     		sub	sp, sp, #36
 540              	.LCFI32:
 541              		.cfi_def_cfa_offset 40
 542 01fc 00AF     		add	r7, sp, #0
 543              	.LCFI33:
 544              		.cfi_def_cfa_register 7
 545 01fe F860     		str	r0, [r7, #12]
 546 0200 B960     		str	r1, [r7, #8]
 547 0202 7A60     		str	r2, [r7, #4]
 171:../src/newlib_stubs.c ****     int n;
 172:../src/newlib_stubs.c ****     int num = 0;
 548              		.loc 1 172 0
 549 0204 4FF00003 		mov	r3, #0
 550 0208 BB61     		str	r3, [r7, #24]
 173:../src/newlib_stubs.c ****     switch (file) {
 551              		.loc 1 173 0
 552 020a FB68     		ldr	r3, [r7, #12]
 553 020c 002B     		cmp	r3, #0
 554 020e 28D1     		bne	.L36
 555              	.L30:
 174:../src/newlib_stubs.c ****     case STDIN_FILENO:
 175:../src/newlib_stubs.c ****         for (n = 0; n < len; n++) {
 556              		.loc 1 175 0
 557 0210 4FF00003 		mov	r3, #0
 558 0214 FB61     		str	r3, [r7, #28]
 559 0216 1FE0     		b	.L31
 560              	.L38:
 561              	.LBB6:
 176:../src/newlib_stubs.c **** #if   STDIN_USART == 1
 177:../src/newlib_stubs.c ****             while ((USART1->ISR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 562              		.loc 1 177 0
 563 0218 00BF     		nop
 564              	.L32:
 565              		.loc 1 177 0 is_stmt 0 discriminator 1
 566 021a 4FF46053 		mov	r3, #14336
 567 021e C4F20103 		movt	r3, 16385
 568 0222 DB69     		ldr	r3, [r3, #28]
 569 0224 03F02003 		and	r3, r3, #32
 570 0228 002B     		cmp	r3, #0
 571 022a F6D0     		beq	.L32
 178:../src/newlib_stubs.c ****             char c = (char)(USART1->RDR & (uint16_t)0x01FF);
 572              		.loc 1 178 0 is_stmt 1
 573 022c 4FF46053 		mov	r3, #14336
 574 0230 C4F20103 		movt	r3, 16385
 575 0234 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 576 0236 9BB2     		uxth	r3, r3
 577 0238 FB75     		strb	r3, [r7, #23]
 179:../src/newlib_stubs.c **** #elif STDIN_USART == 2
 180:../src/newlib_stubs.c ****             while ((USART2->ISR & USART_FLAG_RXNE) == (uint16_t) RESET) {}
 181:../src/newlib_stubs.c ****             char c = (char) (USART2->RDR & (uint16_t) 0x01FF);
 182:../src/newlib_stubs.c **** #elif STDIN_USART == 3
 183:../src/newlib_stubs.c ****             while ((USART3->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 184:../src/newlib_stubs.c ****             char c = (char)(USART3->RDR & (uint16_t)0x01FF);
 185:../src/newlib_stubs.c **** #endif
 186:../src/newlib_stubs.c ****             *ptr++ = c;
 578              		.loc 1 186 0
 579 023a BB68     		ldr	r3, [r7, #8]
 580 023c FA7D     		ldrb	r2, [r7, #23]
 581 023e 1A70     		strb	r2, [r3, #0]
 582 0240 BB68     		ldr	r3, [r7, #8]
 583 0242 03F10103 		add	r3, r3, #1
 584 0246 BB60     		str	r3, [r7, #8]
 187:../src/newlib_stubs.c ****             num++;
 585              		.loc 1 187 0
 586 0248 BB69     		ldr	r3, [r7, #24]
 587 024a 03F10103 		add	r3, r3, #1
 588 024e BB61     		str	r3, [r7, #24]
 589              	.LBE6:
 175:../src/newlib_stubs.c ****         for (n = 0; n < len; n++) {
 590              		.loc 1 175 0
 591 0250 FB69     		ldr	r3, [r7, #28]
 592 0252 03F10103 		add	r3, r3, #1
 593 0256 FB61     		str	r3, [r7, #28]
 594              	.L31:
 175:../src/newlib_stubs.c ****         for (n = 0; n < len; n++) {
 595              		.loc 1 175 0 is_stmt 0 discriminator 1
 596 0258 FA69     		ldr	r2, [r7, #28]
 597 025a 7B68     		ldr	r3, [r7, #4]
 598 025c 9A42     		cmp	r2, r3
 599 025e DBDB     		blt	.L38
 188:../src/newlib_stubs.c ****         }
 189:../src/newlib_stubs.c ****         break;
 600              		.loc 1 189 0 is_stmt 1
 601 0260 09E0     		b	.L37
 602              	.L36:
 190:../src/newlib_stubs.c ****     default:
 191:../src/newlib_stubs.c ****         errno = EBADF;
 603              		.loc 1 191 0
 604 0262 40F20003 		movw	r3, #:lower16:errno
 605 0266 C0F20003 		movt	r3, #:upper16:errno
 606 026a 4FF00902 		mov	r2, #9
 607 026e 1A60     		str	r2, [r3, #0]
 192:../src/newlib_stubs.c ****         return -1;
 608              		.loc 1 192 0
 609 0270 4FF0FF33 		mov	r3, #-1
 610 0274 00E0     		b	.L35
 611              	.L37:
 193:../src/newlib_stubs.c ****     }
 194:../src/newlib_stubs.c ****     return num;
 612              		.loc 1 194 0
 613 0276 BB69     		ldr	r3, [r7, #24]
 614              	.L35:
 195:../src/newlib_stubs.c **** }
 615              		.loc 1 195 0
 616 0278 1846     		mov	r0, r3
 617 027a 07F12407 		add	r7, r7, #36
 618 027e BD46     		mov	sp, r7
 619 0280 80BC     		pop	{r7}
 620 0282 7047     		bx	lr
 621              		.cfi_endproc
 622              	.LFE122:
 624              		.align	2
 625              		.global	_stat
 626              		.thumb
 627              		.thumb_func
 629              	_stat:
 630              	.LFB123:
 196:../src/newlib_stubs.c **** 
 197:../src/newlib_stubs.c **** /*
 198:../src/newlib_stubs.c ****  stat
 199:../src/newlib_stubs.c ****  Status of a file (by name). Minimal implementation:
 200:../src/newlib_stubs.c ****  int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 201:../src/newlib_stubs.c ****  */
 202:../src/newlib_stubs.c **** 
 203:../src/newlib_stubs.c **** int _stat(const char *filepath, struct stat *st) {
 631              		.loc 1 203 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 8
 634              		@ frame_needed = 1, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 636 0284 80B4     		push	{r7}
 637              	.LCFI34:
 638              		.cfi_def_cfa_offset 4
 639              		.cfi_offset 7, -4
 640 0286 83B0     		sub	sp, sp, #12
 641              	.LCFI35:
 642              		.cfi_def_cfa_offset 16
 643 0288 00AF     		add	r7, sp, #0
 644              	.LCFI36:
 645              		.cfi_def_cfa_register 7
 646 028a 7860     		str	r0, [r7, #4]
 647 028c 3960     		str	r1, [r7, #0]
 204:../src/newlib_stubs.c ****     st->st_mode = S_IFCHR;
 648              		.loc 1 204 0
 649 028e 3B68     		ldr	r3, [r7, #0]
 650 0290 4FF40052 		mov	r2, #8192
 651 0294 5A60     		str	r2, [r3, #4]
 205:../src/newlib_stubs.c ****     return 0;
 652              		.loc 1 205 0
 653 0296 4FF00003 		mov	r3, #0
 206:../src/newlib_stubs.c **** }
 654              		.loc 1 206 0
 655 029a 1846     		mov	r0, r3
 656 029c 07F10C07 		add	r7, r7, #12
 657 02a0 BD46     		mov	sp, r7
 658 02a2 80BC     		pop	{r7}
 659 02a4 7047     		bx	lr
 660              		.cfi_endproc
 661              	.LFE123:
 663 02a6 00BF     		.align	2
 664              		.global	_times
 665              		.thumb
 666              		.thumb_func
 668              	_times:
 669              	.LFB124:
 207:../src/newlib_stubs.c **** 
 208:../src/newlib_stubs.c **** /*
 209:../src/newlib_stubs.c ****  times
 210:../src/newlib_stubs.c ****  Timing information for current process. Minimal implementation:
 211:../src/newlib_stubs.c ****  */
 212:../src/newlib_stubs.c **** 
 213:../src/newlib_stubs.c **** clock_t _times(struct tms *buf) {
 670              		.loc 1 213 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 8
 673              		@ frame_needed = 1, uses_anonymous_args = 0
 674              		@ link register save eliminated.
 675 02a8 80B4     		push	{r7}
 676              	.LCFI37:
 677              		.cfi_def_cfa_offset 4
 678              		.cfi_offset 7, -4
 679 02aa 83B0     		sub	sp, sp, #12
 680              	.LCFI38:
 681              		.cfi_def_cfa_offset 16
 682 02ac 00AF     		add	r7, sp, #0
 683              	.LCFI39:
 684              		.cfi_def_cfa_register 7
 685 02ae 7860     		str	r0, [r7, #4]
 214:../src/newlib_stubs.c ****     return -1;
 686              		.loc 1 214 0
 687 02b0 4FF0FF33 		mov	r3, #-1
 215:../src/newlib_stubs.c **** }
 688              		.loc 1 215 0
 689 02b4 1846     		mov	r0, r3
 690 02b6 07F10C07 		add	r7, r7, #12
 691 02ba BD46     		mov	sp, r7
 692 02bc 80BC     		pop	{r7}
 693 02be 7047     		bx	lr
 694              		.cfi_endproc
 695              	.LFE124:
 697              		.align	2
 698              		.global	_unlink
 699              		.thumb
 700              		.thumb_func
 702              	_unlink:
 703              	.LFB125:
 216:../src/newlib_stubs.c **** 
 217:../src/newlib_stubs.c **** /*
 218:../src/newlib_stubs.c ****  unlink
 219:../src/newlib_stubs.c ****  Remove a file's directory entry. Minimal implementation:
 220:../src/newlib_stubs.c ****  */
 221:../src/newlib_stubs.c **** int _unlink(char *name) {
 704              		.loc 1 221 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 8
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708              		@ link register save eliminated.
 709 02c0 80B4     		push	{r7}
 710              	.LCFI40:
 711              		.cfi_def_cfa_offset 4
 712              		.cfi_offset 7, -4
 713 02c2 83B0     		sub	sp, sp, #12
 714              	.LCFI41:
 715              		.cfi_def_cfa_offset 16
 716 02c4 00AF     		add	r7, sp, #0
 717              	.LCFI42:
 718              		.cfi_def_cfa_register 7
 719 02c6 7860     		str	r0, [r7, #4]
 222:../src/newlib_stubs.c ****     errno = ENOENT;
 720              		.loc 1 222 0
 721 02c8 40F20003 		movw	r3, #:lower16:errno
 722 02cc C0F20003 		movt	r3, #:upper16:errno
 723 02d0 4FF00202 		mov	r2, #2
 724 02d4 1A60     		str	r2, [r3, #0]
 223:../src/newlib_stubs.c ****     return -1;
 725              		.loc 1 223 0
 726 02d6 4FF0FF33 		mov	r3, #-1
 224:../src/newlib_stubs.c **** }
 727              		.loc 1 224 0
 728 02da 1846     		mov	r0, r3
 729 02dc 07F10C07 		add	r7, r7, #12
 730 02e0 BD46     		mov	sp, r7
 731 02e2 80BC     		pop	{r7}
 732 02e4 7047     		bx	lr
 733              		.cfi_endproc
 734              	.LFE125:
 736 02e6 00BF     		.align	2
 737              		.global	_wait
 738              		.thumb
 739              		.thumb_func
 741              	_wait:
 742              	.LFB126:
 225:../src/newlib_stubs.c **** 
 226:../src/newlib_stubs.c **** /*
 227:../src/newlib_stubs.c ****  wait
 228:../src/newlib_stubs.c ****  Wait for a child process. Minimal implementation:
 229:../src/newlib_stubs.c ****  */
 230:../src/newlib_stubs.c **** int _wait(int *status) {
 743              		.loc 1 230 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 8
 746              		@ frame_needed = 1, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 748 02e8 80B4     		push	{r7}
 749              	.LCFI43:
 750              		.cfi_def_cfa_offset 4
 751              		.cfi_offset 7, -4
 752 02ea 83B0     		sub	sp, sp, #12
 753              	.LCFI44:
 754              		.cfi_def_cfa_offset 16
 755 02ec 00AF     		add	r7, sp, #0
 756              	.LCFI45:
 757              		.cfi_def_cfa_register 7
 758 02ee 7860     		str	r0, [r7, #4]
 231:../src/newlib_stubs.c ****     errno = ECHILD;
 759              		.loc 1 231 0
 760 02f0 40F20003 		movw	r3, #:lower16:errno
 761 02f4 C0F20003 		movt	r3, #:upper16:errno
 762 02f8 4FF00A02 		mov	r2, #10
 763 02fc 1A60     		str	r2, [r3, #0]
 232:../src/newlib_stubs.c ****     return -1;
 764              		.loc 1 232 0
 765 02fe 4FF0FF33 		mov	r3, #-1
 233:../src/newlib_stubs.c **** }
 766              		.loc 1 233 0
 767 0302 1846     		mov	r0, r3
 768 0304 07F10C07 		add	r7, r7, #12
 769 0308 BD46     		mov	sp, r7
 770 030a 80BC     		pop	{r7}
 771 030c 7047     		bx	lr
 772              		.cfi_endproc
 773              	.LFE126:
 775 030e 00BF     		.align	2
 776              		.global	_write
 777              		.thumb
 778              		.thumb_func
 780              	_write:
 781              	.LFB127:
 234:../src/newlib_stubs.c **** 
 235:../src/newlib_stubs.c **** /*
 236:../src/newlib_stubs.c ****  write
 237:../src/newlib_stubs.c ****  Write a character to a file. `libc' subroutines will use this system routine for output to all fil
 238:../src/newlib_stubs.c ****  Returns -1 on error or number of bytes sent
 239:../src/newlib_stubs.c ****  */
 240:../src/newlib_stubs.c **** int _write(int file, char *ptr, int len) {
 782              		.loc 1 240 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 24
 785              		@ frame_needed = 1, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787 0310 80B4     		push	{r7}
 788              	.LCFI46:
 789              		.cfi_def_cfa_offset 4
 790              		.cfi_offset 7, -4
 791 0312 87B0     		sub	sp, sp, #28
 792              	.LCFI47:
 793              		.cfi_def_cfa_offset 32
 794 0314 00AF     		add	r7, sp, #0
 795              	.LCFI48:
 796              		.cfi_def_cfa_register 7
 797 0316 F860     		str	r0, [r7, #12]
 798 0318 B960     		str	r1, [r7, #8]
 799 031a 7A60     		str	r2, [r7, #4]
 241:../src/newlib_stubs.c ****     int n;
 242:../src/newlib_stubs.c ****     switch (file) {
 800              		.loc 1 242 0
 801 031c FB68     		ldr	r3, [r7, #12]
 802 031e 012B     		cmp	r3, #1
 803 0320 02D0     		beq	.L49
 804 0322 022B     		cmp	r3, #2
 805 0324 22D0     		beq	.L50
 806 0326 43E0     		b	.L59
 807              	.L49:
 243:../src/newlib_stubs.c ****     case STDOUT_FILENO: /*stdout*/
 244:../src/newlib_stubs.c ****         for (n = 0; n < len; n++) {
 808              		.loc 1 244 0
 809 0328 4FF00003 		mov	r3, #0
 810 032c 7B61     		str	r3, [r7, #20]
 811 032e 18E0     		b	.L51
 812              	.L60:
 245:../src/newlib_stubs.c **** #if STDOUT_USART == 1
 246:../src/newlib_stubs.c ****             while ((USART1->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
 813              		.loc 1 246 0
 814 0330 00BF     		nop
 815              	.L52:
 816              		.loc 1 246 0 is_stmt 0 discriminator 1
 817 0332 4FF46053 		mov	r3, #14336
 818 0336 C4F20103 		movt	r3, 16385
 819 033a DB69     		ldr	r3, [r3, #28]
 820 033c 03F04003 		and	r3, r3, #64
 821 0340 002B     		cmp	r3, #0
 822 0342 F6D0     		beq	.L52
 247:../src/newlib_stubs.c ****             USART1->TDR = (*ptr++ & (uint16_t)0x01FF);
 823              		.loc 1 247 0 is_stmt 1
 824 0344 4FF46053 		mov	r3, #14336
 825 0348 C4F20103 		movt	r3, 16385
 826 034c BA68     		ldr	r2, [r7, #8]
 827 034e 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 828 0350 1A85     		strh	r2, [r3, #40]	@ movhi
 829 0352 BB68     		ldr	r3, [r7, #8]
 830 0354 03F10103 		add	r3, r3, #1
 831 0358 BB60     		str	r3, [r7, #8]
 244:../src/newlib_stubs.c ****         for (n = 0; n < len; n++) {
 832              		.loc 1 244 0
 833 035a 7B69     		ldr	r3, [r7, #20]
 834 035c 03F10103 		add	r3, r3, #1
 835 0360 7B61     		str	r3, [r7, #20]
 836              	.L51:
 244:../src/newlib_stubs.c ****         for (n = 0; n < len; n++) {
 837              		.loc 1 244 0 is_stmt 0 discriminator 1
 838 0362 7A69     		ldr	r2, [r7, #20]
 839 0364 7B68     		ldr	r3, [r7, #4]
 840 0366 9A42     		cmp	r2, r3
 841 0368 E2DB     		blt	.L60
 248:../src/newlib_stubs.c **** 
 249:../src/newlib_stubs.c **** #elif  STDOUT_USART == 2
 250:../src/newlib_stubs.c ****             while ((USART2->ISR & USART_FLAG_TC) == (uint16_t) RESET) {
 251:../src/newlib_stubs.c ****             }
 252:../src/newlib_stubs.c ****             USART2->TDR = (*ptr++ & (uint16_t) 0x01FF);
 253:../src/newlib_stubs.c **** #elif  STDOUT_USART == 3
 254:../src/newlib_stubs.c ****             while ((USART3->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
 255:../src/newlib_stubs.c ****             USART3->TDR = (*ptr++ & (uint16_t)0x01FF);
 256:../src/newlib_stubs.c **** 
 257:../src/newlib_stubs.c **** #endif
 258:../src/newlib_stubs.c ****         }
 259:../src/newlib_stubs.c ****         break;
 842              		.loc 1 259 0 is_stmt 1
 843 036a 2BE0     		b	.L54
 844              	.L50:
 260:../src/newlib_stubs.c ****     case STDERR_FILENO: /* stderr */
 261:../src/newlib_stubs.c ****         for (n = 0; n < len; n++) {
 845              		.loc 1 261 0
 846 036c 4FF00003 		mov	r3, #0
 847 0370 7B61     		str	r3, [r7, #20]
 848 0372 18E0     		b	.L55
 849              	.L61:
 262:../src/newlib_stubs.c **** #if STDERR_USART == 1
 263:../src/newlib_stubs.c ****             while ((USART1->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
 264:../src/newlib_stubs.c ****             USART1->TDR = (*ptr++ & (uint16_t)0x01FF);
 265:../src/newlib_stubs.c **** #elif  STDERR_USART == 2
 266:../src/newlib_stubs.c ****             while ((USART2->ISR & USART_FLAG_TC) == (uint16_t) RESET) {
 850              		.loc 1 266 0
 851 0374 00BF     		nop
 852              	.L56:
 853              		.loc 1 266 0 is_stmt 0 discriminator 1
 854 0376 4FF48843 		mov	r3, #17408
 855 037a C4F20003 		movt	r3, 16384
 856 037e DB69     		ldr	r3, [r3, #28]
 857 0380 03F04003 		and	r3, r3, #64
 858 0384 002B     		cmp	r3, #0
 859 0386 F6D0     		beq	.L56
 267:../src/newlib_stubs.c ****             }
 268:../src/newlib_stubs.c ****             USART2->TDR = (*ptr++ & (uint16_t) 0x01FF);
 860              		.loc 1 268 0 is_stmt 1
 861 0388 4FF48843 		mov	r3, #17408
 862 038c C4F20003 		movt	r3, 16384
 863 0390 BA68     		ldr	r2, [r7, #8]
 864 0392 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 865 0394 1A85     		strh	r2, [r3, #40]	@ movhi
 866 0396 BB68     		ldr	r3, [r7, #8]
 867 0398 03F10103 		add	r3, r3, #1
 868 039c BB60     		str	r3, [r7, #8]
 261:../src/newlib_stubs.c ****         for (n = 0; n < len; n++) {
 869              		.loc 1 261 0
 870 039e 7B69     		ldr	r3, [r7, #20]
 871 03a0 03F10103 		add	r3, r3, #1
 872 03a4 7B61     		str	r3, [r7, #20]
 873              	.L55:
 261:../src/newlib_stubs.c ****         for (n = 0; n < len; n++) {
 874              		.loc 1 261 0 is_stmt 0 discriminator 1
 875 03a6 7A69     		ldr	r2, [r7, #20]
 876 03a8 7B68     		ldr	r3, [r7, #4]
 877 03aa 9A42     		cmp	r2, r3
 878 03ac E2DB     		blt	.L61
 269:../src/newlib_stubs.c **** #elif  STDERR_USART == 3
 270:../src/newlib_stubs.c ****             while ((USART3->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 271:../src/newlib_stubs.c ****             USART3->TDR = (*ptr++ & (uint16_t)0x01FF);
 272:../src/newlib_stubs.c **** #endif
 273:../src/newlib_stubs.c ****         }
 274:../src/newlib_stubs.c ****         break;
 879              		.loc 1 274 0 is_stmt 1
 880 03ae 09E0     		b	.L54
 881              	.L59:
 275:../src/newlib_stubs.c ****     default:
 276:../src/newlib_stubs.c ****         errno = EBADF;
 882              		.loc 1 276 0
 883 03b0 40F20003 		movw	r3, #:lower16:errno
 884 03b4 C0F20003 		movt	r3, #:upper16:errno
 885 03b8 4FF00902 		mov	r2, #9
 886 03bc 1A60     		str	r2, [r3, #0]
 277:../src/newlib_stubs.c ****         return -1;
 887              		.loc 1 277 0
 888 03be 4FF0FF33 		mov	r3, #-1
 889 03c2 00E0     		b	.L58
 890              	.L54:
 278:../src/newlib_stubs.c ****     }
 279:../src/newlib_stubs.c ****     return len;
 891              		.loc 1 279 0
 892 03c4 7B68     		ldr	r3, [r7, #4]
 893              	.L58:
 280:../src/newlib_stubs.c **** }
 894              		.loc 1 280 0
 895 03c6 1846     		mov	r0, r3
 896 03c8 07F11C07 		add	r7, r7, #28
 897 03cc BD46     		mov	sp, r7
 898 03ce 80BC     		pop	{r7}
 899 03d0 7047     		bx	lr
 900              		.cfi_endproc
 901              	.LFE127:
 903              		.bss
 904              		.align	2
 905              	heap_end.7627:
 906 0004 00000000 		.space	4
 907              		.text
 908              	.Letext0:
 909              		.file 3 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 910              		.file 4 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 911              		.file 5 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 912              		.file 6 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 913              		.file 7 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 914              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 915              		.file 9 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 916              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 newlib_stubs.c
     /tmp/ccJkwEL5.s:25     .bss:00000000 __env
     /tmp/ccJkwEL5.s:22     .bss:00000000 $d
     /tmp/ccJkwEL5.s:32     .data:00000000 environ
     /tmp/ccJkwEL5.s:29     .data:00000000 $d
     /tmp/ccJkwEL5.s:35     .rodata:00000000 $d
     /tmp/ccJkwEL5.s:36     .rodata:00000000 .LC0
     /tmp/ccJkwEL5.s:39     .text:00000000 $t
     /tmp/ccJkwEL5.s:44     .text:00000000 _exit
     /tmp/ccJkwEL5.s:780    .text:00000310 _write
     /tmp/ccJkwEL5.s:80     .text:00000020 _close
     /tmp/ccJkwEL5.s:114    .text:00000038 _execve
     /tmp/ccJkwEL5.s:155    .text:00000064 _fork
     /tmp/ccJkwEL5.s:189    .text:00000084 _fstat
     /tmp/ccJkwEL5.s:228    .text:000000a8 _getpid
     /tmp/ccJkwEL5.s:257    .text:000000b8 _isatty
     /tmp/ccJkwEL5.s:306    .text:000000f0 _kill
     /tmp/ccJkwEL5.s:346    .text:00000118 _link
     /tmp/ccJkwEL5.s:386    .text:00000140 _lseek
     /tmp/ccJkwEL5.s:419    .rodata:00000008 .LC1
     /tmp/ccJkwEL5.s:427    .text:0000015c _sbrk
     /tmp/ccJkwEL5.s:905    .bss:00000004 heap_end.7627
     /tmp/ccJkwEL5.s:528    .text:000001f8 _read
     /tmp/ccJkwEL5.s:629    .text:00000284 _stat
     /tmp/ccJkwEL5.s:668    .text:000002a8 _times
     /tmp/ccJkwEL5.s:702    .text:000002c0 _unlink
     /tmp/ccJkwEL5.s:741    .text:000002e8 _wait
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.743cd71370ebc432b539c5dba7924ecc
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.errno.h.14.84e5a50cdf375f3e6c7abc27b8e42963
                           .group:00000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:00000000 wm4.time.h.24.c499d4c1915694df17abb795fd34b719
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.cf962ebbec441b3ac67502735f0765db
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.time.h.124.10ced469f846269cafc58b59c853e1bb
                           .group:00000000 wm4.stat.h.69.169a67369ef31f6ea38a12bc9ba4e5dd
                           .group:00000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.unistd.h.251.605bc560cdc6c3b07b599bb71ac4e425
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.cf7c793e178943e1bbf613f1b21cd51a
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5

UNDEFINED SYMBOLS
errno
_ebss
