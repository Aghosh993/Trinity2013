   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"interrupt_defs.cpp"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	__aeabi_i2d
  21              		.global	__aeabi_dmul
  22              		.global	__aeabi_dcmpgt
  23              		.global	__aeabi_dcmplt
  24              		.align	2
  25              		.global	TIM7_IRQHandler
  26              		.thumb
  27              		.thumb_func
  29              	TIM7_IRQHandler:
  30              	.LFB111:
  31              		.file 1 "../src/interrupt_defs.cpp"
   1:../src/interrupt_defs.cpp **** /*
   2:../src/interrupt_defs.cpp ****  * interrupt_defs.cpp
   3:../src/interrupt_defs.cpp ****  *
   4:../src/interrupt_defs.cpp ****  *  Created on: Feb 19, 2013
   5:../src/interrupt_defs.cpp ****  *      Author: root
   6:../src/interrupt_defs.cpp ****  */
   7:../src/interrupt_defs.cpp **** 
   8:../src/interrupt_defs.cpp **** #include "common_headers.h"
   9:../src/interrupt_defs.cpp **** #include "stm32f3_discovery_l3gd20.h"
  10:../src/interrupt_defs.cpp **** 
  11:../src/interrupt_defs.cpp **** #include "encoder.h"
  12:../src/interrupt_defs.cpp **** 
  13:../src/interrupt_defs.cpp **** //#include <stdio.h>
  14:../src/interrupt_defs.cpp **** #include <math.h>
  15:../src/interrupt_defs.cpp **** 
  16:../src/interrupt_defs.cpp **** // ISR definitions need to go here, to avoid C++ name-mangling
  17:../src/interrupt_defs.cpp **** 
  18:../src/interrupt_defs.cpp **** extern "C"
  19:../src/interrupt_defs.cpp **** {
  20:../src/interrupt_defs.cpp **** extern volatile float gyro_angle_x;
  21:../src/interrupt_defs.cpp **** extern encoderState left_enc, right_enc;
  22:../src/interrupt_defs.cpp **** extern int gyro_bias_x, adcval;
  23:../src/interrupt_defs.cpp **** extern volatile int led_matrix[8];
  24:../src/interrupt_defs.cpp **** extern volatile int led_iter;
  25:../src/interrupt_defs.cpp **** extern int new_data;
  26:../src/interrupt_defs.cpp **** extern uint8_t adc2_new_data;
  27:../src/interrupt_defs.cpp **** 
  28:../src/interrupt_defs.cpp **** 	void TIM7_IRQHandler(void) // ISR that performs encoder state update:
  29:../src/interrupt_defs.cpp **** 										// Runs every DT milliseconds
  30:../src/interrupt_defs.cpp **** 	{
  32              		.loc 1 30 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 96
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 90B5     		push	{r4, r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 12
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 99B0     		sub	sp, sp, #100
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 112
  45 0004 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48              	.LBB2:
  31:../src/interrupt_defs.cpp **** 		float left_out, right_out;
  32:../src/interrupt_defs.cpp **** 		int error, abs_err;
  33:../src/interrupt_defs.cpp **** 
  34:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
  49              		.loc 1 34 0
  50 0006 4FF4A050 		mov	r0, #5120
  51 000a C4F20000 		movt	r0, 16384
  52 000e 4FF00101 		mov	r1, #1
  53 0012 FFF7FEFF 		bl	TIM_ClearITPendingBit
  35:../src/interrupt_defs.cpp **** 
  36:../src/interrupt_defs.cpp **** 		encoderState left_temp, right_temp;
  37:../src/interrupt_defs.cpp **** 
  38:../src/interrupt_defs.cpp **** 		left_temp.position = left_enc.position;
  54              		.loc 1 38 0
  55 0016 40F20003 		movw	r3, #:lower16:left_enc
  56 001a C0F20003 		movt	r3, #:upper16:left_enc
  57 001e 1B68     		ldr	r3, [r3, #0]
  58 0020 3B60     		str	r3, [r7, #0]
  39:../src/interrupt_defs.cpp **** 		left_temp.speed = left_enc.speed;
  59              		.loc 1 39 0
  60 0022 40F20003 		movw	r3, #:lower16:left_enc
  61 0026 C0F20003 		movt	r3, #:upper16:left_enc
  62 002a 5B68     		ldr	r3, [r3, #4]	@ float
  63 002c 7B60     		str	r3, [r7, #4]	@ float
  40:../src/interrupt_defs.cpp **** 		left_temp.acceleration = left_enc.acceleration;
  64              		.loc 1 40 0
  65 002e 40F20003 		movw	r3, #:lower16:left_enc
  66 0032 C0F20003 		movt	r3, #:upper16:left_enc
  67 0036 9B68     		ldr	r3, [r3, #8]	@ float
  68 0038 BB60     		str	r3, [r7, #8]	@ float
  41:../src/interrupt_defs.cpp **** 
  42:../src/interrupt_defs.cpp **** 		right_temp.position = right_enc.position;
  69              		.loc 1 42 0
  70 003a 40F20003 		movw	r3, #:lower16:right_enc
  71 003e C0F20003 		movt	r3, #:upper16:right_enc
  72 0042 1B68     		ldr	r3, [r3, #0]
  73 0044 BB62     		str	r3, [r7, #40]
  43:../src/interrupt_defs.cpp **** 		right_temp.speed = right_enc.speed;
  74              		.loc 1 43 0
  75 0046 40F20003 		movw	r3, #:lower16:right_enc
  76 004a C0F20003 		movt	r3, #:upper16:right_enc
  77 004e 5B68     		ldr	r3, [r3, #4]	@ float
  78 0050 FB62     		str	r3, [r7, #44]	@ float
  44:../src/interrupt_defs.cpp **** 		right_temp.acceleration = right_enc.acceleration;
  79              		.loc 1 44 0
  80 0052 40F20003 		movw	r3, #:lower16:right_enc
  81 0056 C0F20003 		movt	r3, #:upper16:right_enc
  82 005a 9B68     		ldr	r3, [r3, #8]	@ float
  83 005c 3B63     		str	r3, [r7, #48]	@ float
  45:../src/interrupt_defs.cpp **** 
  46:../src/interrupt_defs.cpp **** 		left_enc.position = TIM_GetCounter(TIM2);
  84              		.loc 1 46 0
  85 005e 4FF08040 		mov	r0, #1073741824
  86 0062 FFF7FEFF 		bl	TIM_GetCounter
  87 0066 0346     		mov	r3, r0
  88 0068 1A46     		mov	r2, r3
  89 006a 40F20003 		movw	r3, #:lower16:left_enc
  90 006e C0F20003 		movt	r3, #:upper16:left_enc
  91 0072 1A60     		str	r2, [r3, #0]
  47:../src/interrupt_defs.cpp **** 		left_enc.speed = (float)((left_enc.position - left_temp.position)*1000)/(float)DT_ENCODER; // Sin
  92              		.loc 1 47 0
  93 0074 40F20003 		movw	r3, #:lower16:left_enc
  94 0078 C0F20003 		movt	r3, #:upper16:left_enc
  95 007c 1A68     		ldr	r2, [r3, #0]
  96 007e 3B68     		ldr	r3, [r7, #0]
  97 0080 D31A     		subs	r3, r2, r3
  98 0082 4FF47A72 		mov	r2, #1000
  99 0086 02FB03F3 		mul	r3, r2, r3
 100 008a 07EE903A 		fmsr	s15, r3	@ int
 101 008e B8EEE77A 		fsitos	s14, s15
 102 0092 F3EE097A 		fconsts	s15, #57
 103 0096 C7EE277A 		fdivs	s15, s14, s15
 104 009a 40F20003 		movw	r3, #:lower16:left_enc
 105 009e C0F20003 		movt	r3, #:upper16:left_enc
 106 00a2 C3ED017A 		fsts	s15, [r3, #4]
  48:../src/interrupt_defs.cpp **** 		left_enc.acceleration = (float)((left_enc.speed - left_temp.speed)*1000)/(float)DT_ENCODER;
 107              		.loc 1 48 0
 108 00a6 40F20003 		movw	r3, #:lower16:left_enc
 109 00aa C0F20003 		movt	r3, #:upper16:left_enc
 110 00ae 93ED017A 		flds	s14, [r3, #4]
 111 00b2 D7ED017A 		flds	s15, [r7, #4]
 112 00b6 37EE677A 		fsubs	s14, s14, s15
 113 00ba DFEDDB7A 		flds	s15, .L31+8
 114 00be 27EE277A 		fmuls	s14, s14, s15
 115 00c2 F3EE097A 		fconsts	s15, #57
 116 00c6 C7EE277A 		fdivs	s15, s14, s15
 117 00ca 40F20003 		movw	r3, #:lower16:left_enc
 118 00ce C0F20003 		movt	r3, #:upper16:left_enc
 119 00d2 C3ED027A 		fsts	s15, [r3, #8]
  49:../src/interrupt_defs.cpp **** 
  50:../src/interrupt_defs.cpp **** 		right_enc.position = right_temp.position + (int16_t)(TIM_GetCounter(TIM8));
 120              		.loc 1 50 0
 121 00d6 BC6A     		ldr	r4, [r7, #40]
 122 00d8 4FF45050 		mov	r0, #13312
 123 00dc C4F20100 		movt	r0, 16385
 124 00e0 FFF7FEFF 		bl	TIM_GetCounter
 125 00e4 0346     		mov	r3, r0
 126 00e6 9BB2     		uxth	r3, r3
 127 00e8 1BB2     		sxth	r3, r3
 128 00ea E218     		adds	r2, r4, r3
 129 00ec 40F20003 		movw	r3, #:lower16:right_enc
 130 00f0 C0F20003 		movt	r3, #:upper16:right_enc
 131 00f4 1A60     		str	r2, [r3, #0]
  51:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM8, 0); // To get around the stupid 16-bit counter limitation present on all tim
 132              		.loc 1 51 0
 133 00f6 4FF45050 		mov	r0, #13312
 134 00fa C4F20100 		movt	r0, 16385
 135 00fe 4FF00001 		mov	r1, #0
 136 0102 FFF7FEFF 		bl	TIM_SetCounter
  52:../src/interrupt_defs.cpp **** 		right_enc.speed = (float)((right_enc.position - right_temp.position)*1000)/(float)DT_ENCODER;
 137              		.loc 1 52 0
 138 0106 40F20003 		movw	r3, #:lower16:right_enc
 139 010a C0F20003 		movt	r3, #:upper16:right_enc
 140 010e 1A68     		ldr	r2, [r3, #0]
 141 0110 BB6A     		ldr	r3, [r7, #40]
 142 0112 D31A     		subs	r3, r2, r3
 143 0114 4FF47A72 		mov	r2, #1000
 144 0118 02FB03F3 		mul	r3, r2, r3
 145 011c 07EE903A 		fmsr	s15, r3	@ int
 146 0120 B8EEE77A 		fsitos	s14, s15
 147 0124 F3EE097A 		fconsts	s15, #57
 148 0128 C7EE277A 		fdivs	s15, s14, s15
 149 012c 40F20003 		movw	r3, #:lower16:right_enc
 150 0130 C0F20003 		movt	r3, #:upper16:right_enc
 151 0134 C3ED017A 		fsts	s15, [r3, #4]
  53:../src/interrupt_defs.cpp **** 		right_enc.acceleration = (float)((right_enc.speed - right_temp.speed)*1000)/(float)DT_ENCODER;
 152              		.loc 1 53 0
 153 0138 40F20003 		movw	r3, #:lower16:right_enc
 154 013c C0F20003 		movt	r3, #:upper16:right_enc
 155 0140 93ED017A 		flds	s14, [r3, #4]
 156 0144 D7ED0B7A 		flds	s15, [r7, #44]
 157 0148 37EE677A 		fsubs	s14, s14, s15
 158 014c DFEDB67A 		flds	s15, .L31+8
 159 0150 27EE277A 		fmuls	s14, s14, s15
 160 0154 F3EE097A 		fconsts	s15, #57
 161 0158 C7EE277A 		fdivs	s15, s14, s15
 162 015c 40F20003 		movw	r3, #:lower16:right_enc
 163 0160 C0F20003 		movt	r3, #:upper16:right_enc
 164 0164 C3ED027A 		fsts	s15, [r3, #8]
  54:../src/interrupt_defs.cpp **** 
  55:../src/interrupt_defs.cpp **** 		if(left_enc.m == MODE_POSITION)
 165              		.loc 1 55 0
 166 0168 40F20003 		movw	r3, #:lower16:left_enc
 167 016c C0F20003 		movt	r3, #:upper16:left_enc
 168 0170 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 169 0174 012B     		cmp	r3, #1
 170 0176 5DD1     		bne	.L2
  56:../src/interrupt_defs.cpp **** 		{
  57:../src/interrupt_defs.cpp **** 			left_out = ((float)k_p * (float)(left_enc.position_target - left_enc.position))
  58:../src/interrupt_defs.cpp **** 					+ ((float)k_i*(float)(left_enc.integral))
  59:../src/interrupt_defs.cpp **** 					+ ((float)k_d*(float)left_enc.speed);
 171              		.loc 1 59 0
 172 0178 40F20003 		movw	r3, #:lower16:left_enc
 173 017c C0F20003 		movt	r3, #:upper16:left_enc
 174 0180 DA68     		ldr	r2, [r3, #12]
 175 0182 40F20003 		movw	r3, #:lower16:left_enc
 176 0186 C0F20003 		movt	r3, #:upper16:left_enc
 177 018a 1B68     		ldr	r3, [r3, #0]
 178 018c D31A     		subs	r3, r2, r3
 179 018e 07EE103A 		fmsr	s14, r3	@ int
 180 0192 F8EEC77A 		fsitos	s15, s14
 181 0196 37EEA77A 		fadds	s14, s15, s15
 182 019a 40F20003 		movw	r3, #:lower16:left_enc
 183 019e C0F20003 		movt	r3, #:upper16:left_enc
 184 01a2 D3ED057A 		flds	s15, [r3, #20]	@ int
 185 01a6 F8EEE76A 		fsitos	s13, s15
 186 01aa DFEDA07A 		flds	s15, .L31+12
 187 01ae 66EEA77A 		fmuls	s15, s13, s15
 188 01b2 37EE277A 		fadds	s14, s14, s15
 189 01b6 40F20003 		movw	r3, #:lower16:left_enc
 190 01ba C0F20003 		movt	r3, #:upper16:left_enc
 191 01be D3ED016A 		flds	s13, [r3, #4]
 192 01c2 DFED9B7A 		flds	s15, .L31+16
 193 01c6 66EEA77A 		fmuls	s15, s13, s15
 194 01ca 77EE277A 		fadds	s15, s14, s15
 195 01ce C7ED177A 		fsts	s15, [r7, #92]
  60:../src/interrupt_defs.cpp **** 			left_out = (left_out > 100) ? 100 : ((left_out < -100) ? -100 : left_out);
 196              		.loc 1 60 0
 197 01d2 97ED177A 		flds	s14, [r7, #92]
 198 01d6 DFED977A 		flds	s15, .L31+20
 199 01da B4EEE77A 		fcmpes	s14, s15
 200 01de F1EE10FA 		fmstat
 201 01e2 04DD     		ble	.L27
 202              	.L23:
 203              		.loc 1 60 0 is_stmt 0 discriminator 1
 204 01e4 4FF00003 		mov	r3, #0
 205 01e8 C4F2C823 		movt	r3, 17096
 206 01ec 0EE0     		b	.L5
 207              	.L27:
 208              		.loc 1 60 0 discriminator 2
 209 01ee 97ED177A 		flds	s14, [r7, #92]
 210 01f2 DFED917A 		flds	s15, .L31+24
 211 01f6 B4EEE77A 		fcmpes	s14, s15
 212 01fa F1EE10FA 		fmstat
 213 01fe 04D5     		bpl	.L28
 214              	.L24:
 215              		.loc 1 60 0 discriminator 3
 216 0200 4FF00003 		mov	r3, #0
 217 0204 CCF2C823 		movt	r3, 49864
 218 0208 00E0     		b	.L8
 219              	.L28:
 220              		.loc 1 60 0 discriminator 4
 221 020a FB6D     		ldr	r3, [r7, #92]	@ float
 222              	.L8:
 223              	.L5:
 224              		.loc 1 60 0 discriminator 6
 225 020c FB65     		str	r3, [r7, #92]	@ float
  61:../src/interrupt_defs.cpp **** 
  62:../src/interrupt_defs.cpp **** 			pwm2_output(100-((float)(left_out+100)/(float)2));
 226              		.loc 1 62 0 is_stmt 1 discriminator 6
 227 020e 97ED177A 		flds	s14, [r7, #92]
 228 0212 DFED887A 		flds	s15, .L31+20
 229 0216 37EE277A 		fadds	s14, s14, s15
 230 021a F0EE007A 		fconsts	s15, #0
 231 021e C7EE277A 		fdivs	s15, s14, s15
 232 0222 9FED847A 		flds	s14, .L31+20
 233 0226 77EE677A 		fsubs	s15, s14, s15
 234 022a B0EE670A 		fcpys	s0, s15
 235 022e FFF7FEFF 		bl	_Z11pwm2_outputf
 236 0232 0BE0     		b	.L9
 237              	.L2:
  63:../src/interrupt_defs.cpp **** 		}
  64:../src/interrupt_defs.cpp **** 		else if(left_enc.m == MODE_SPEED)
 238              		.loc 1 64 0
 239 0234 40F20003 		movw	r3, #:lower16:left_enc
 240 0238 C0F20003 		movt	r3, #:upper16:left_enc
 241 023c 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 242 0240 022B     		cmp	r3, #2
 243 0242 03D1     		bne	.L9
  65:../src/interrupt_defs.cpp **** 		{
  66:../src/interrupt_defs.cpp **** 			pwm2_output(0);
 244              		.loc 1 66 0
 245 0244 9FED7D0A 		flds	s0, .L31+28
 246 0248 FFF7FEFF 		bl	_Z11pwm2_outputf
 247              	.L9:
  67:../src/interrupt_defs.cpp **** 		}
  68:../src/interrupt_defs.cpp **** 
  69:../src/interrupt_defs.cpp **** 		if(right_enc.m == MODE_POSITION)
 248              		.loc 1 69 0
 249 024c 40F20003 		movw	r3, #:lower16:right_enc
 250 0250 C0F20003 		movt	r3, #:upper16:right_enc
 251 0254 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 252 0258 012B     		cmp	r3, #1
 253 025a 40F00181 		bne	.L1
  70:../src/interrupt_defs.cpp **** 		{
  71:../src/interrupt_defs.cpp **** 			error = right_enc.position - right_enc.position_target;
 254              		.loc 1 71 0
 255 025e 40F20003 		movw	r3, #:lower16:right_enc
 256 0262 C0F20003 		movt	r3, #:upper16:right_enc
 257 0266 1A68     		ldr	r2, [r3, #0]
 258 0268 40F20003 		movw	r3, #:lower16:right_enc
 259 026c C0F20003 		movt	r3, #:upper16:right_enc
 260 0270 DB68     		ldr	r3, [r3, #12]
 261 0272 D31A     		subs	r3, r2, r3
 262 0274 BB65     		str	r3, [r7, #88]
  72:../src/interrupt_defs.cpp **** 			right_enc.integral += (float)(error) * (float)DT_ENCODER / (float)1000;
 263              		.loc 1 72 0
 264 0276 40F20003 		movw	r3, #:lower16:right_enc
 265 027a C0F20003 		movt	r3, #:upper16:right_enc
 266 027e D3ED057A 		flds	s15, [r3, #20]	@ int
 267 0282 B8EEE77A 		fsitos	s14, s15
 268 0286 D7ED167A 		flds	s15, [r7, #88]	@ int
 269 028a F8EEE76A 		fsitos	s13, s15
 270 028e F3EE097A 		fconsts	s15, #57
 271 0292 66EEA76A 		fmuls	s13, s13, s15
 272 0296 DFED647A 		flds	s15, .L31+8
 273 029a C6EEA77A 		fdivs	s15, s13, s15
 274 029e 77EE277A 		fadds	s15, s14, s15
 275 02a2 FDEEE77A 		ftosizs	s15, s15
 276 02a6 40F20003 		movw	r3, #:lower16:right_enc
 277 02aa C0F20003 		movt	r3, #:upper16:right_enc
 278 02ae C3ED057A 		fsts	s15, [r3, #20]	@ int
  73:../src/interrupt_defs.cpp **** 
  74:../src/interrupt_defs.cpp **** 			if(right_enc.integral * k_i > 100 || right_enc.integral * k_i < -100)
 279              		.loc 1 74 0
 280 02b2 40F20003 		movw	r3, #:lower16:right_enc
 281 02b6 C0F20003 		movt	r3, #:upper16:right_enc
 282 02ba 5B69     		ldr	r3, [r3, #20]
 283 02bc 1846     		mov	r0, r3
 284 02be FFF7FEFF 		bl	__aeabi_i2d
 285 02c2 0246     		mov	r2, r0
 286 02c4 0B46     		mov	r3, r1
 287 02c6 1046     		mov	r0, r2
 288 02c8 1946     		mov	r1, r3
 289 02ca 55A3     		adr	r3, .L31
 290 02cc D3E90023 		ldrd	r2, [r3]
 291 02d0 FFF7FEFF 		bl	__aeabi_dmul
 292 02d4 0246     		mov	r2, r0
 293 02d6 0B46     		mov	r3, r1
 294 02d8 1046     		mov	r0, r2
 295 02da 1946     		mov	r1, r3
 296 02dc 4FF00002 		mov	r2, #0
 297 02e0 4FF00003 		mov	r3, #0
 298 02e4 C4F25903 		movt	r3, 16473
 299 02e8 FFF7FEFF 		bl	__aeabi_dcmpgt
 300 02ec 0346     		mov	r3, r0
 301 02ee 002B     		cmp	r3, #0
 302 02f0 1FD1     		bne	.L11
 303              		.loc 1 74 0 is_stmt 0 discriminator 1
 304 02f2 40F20003 		movw	r3, #:lower16:right_enc
 305 02f6 C0F20003 		movt	r3, #:upper16:right_enc
 306 02fa 5B69     		ldr	r3, [r3, #20]
 307 02fc 1846     		mov	r0, r3
 308 02fe FFF7FEFF 		bl	__aeabi_i2d
 309 0302 0246     		mov	r2, r0
 310 0304 0B46     		mov	r3, r1
 311 0306 1046     		mov	r0, r2
 312 0308 1946     		mov	r1, r3
 313 030a 45A3     		adr	r3, .L31
 314 030c D3E90023 		ldrd	r2, [r3]
 315 0310 FFF7FEFF 		bl	__aeabi_dmul
 316 0314 0246     		mov	r2, r0
 317 0316 0B46     		mov	r3, r1
 318 0318 1046     		mov	r0, r2
 319 031a 1946     		mov	r1, r3
 320 031c 4FF00002 		mov	r2, #0
 321 0320 4FF00003 		mov	r3, #0
 322 0324 CCF25903 		movt	r3, 49241
 323 0328 FFF7FEFF 		bl	__aeabi_dcmplt
 324 032c 0346     		mov	r3, r0
 325 032e 002B     		cmp	r3, #0
 326 0330 06D0     		beq	.L12
 327              	.L11:
  75:../src/interrupt_defs.cpp **** 			{
  76:../src/interrupt_defs.cpp **** 				right_enc.integral = (float)100/(float)k_i;
 328              		.loc 1 76 0 is_stmt 1
 329 0332 40F20003 		movw	r3, #:lower16:right_enc
 330 0336 C0F20003 		movt	r3, #:upper16:right_enc
 331 033a 40F29A22 		movw	r2, #666
 332 033e 5A61     		str	r2, [r3, #20]
 333              	.L12:
  77:../src/interrupt_defs.cpp **** 			}
  78:../src/interrupt_defs.cpp **** 
  79:../src/interrupt_defs.cpp **** 			right_out = ((float)k_p * (float)error)
  80:../src/interrupt_defs.cpp **** 					+ ((float)k_i*(float)(right_enc.integral))
  81:../src/interrupt_defs.cpp **** 					+ ((float)k_d*(float)(error - right_enc.last_error)/(float)(DT_ENCODER/(float)1000));
 334              		.loc 1 81 0
 335 0340 D7ED167A 		flds	s15, [r7, #88]	@ int
 336 0344 F8EEE77A 		fsitos	s15, s15
 337 0348 37EEA77A 		fadds	s14, s15, s15
 338 034c 40F20003 		movw	r3, #:lower16:right_enc
 339 0350 C0F20003 		movt	r3, #:upper16:right_enc
 340 0354 D3ED057A 		flds	s15, [r3, #20]	@ int
 341 0358 F8EEE76A 		fsitos	s13, s15
 342 035c DFED337A 		flds	s15, .L31+12
 343 0360 66EEA77A 		fmuls	s15, s13, s15
 344 0364 37EE277A 		fadds	s14, s14, s15
 345 0368 40F20003 		movw	r3, #:lower16:right_enc
 346 036c C0F20003 		movt	r3, #:upper16:right_enc
 347 0370 9B69     		ldr	r3, [r3, #24]
 348 0372 BA6D     		ldr	r2, [r7, #88]
 349 0374 D31A     		subs	r3, r2, r3
 350 0376 07EE903A 		fmsr	s15, r3	@ int
 351 037a F8EEE76A 		fsitos	s13, s15
 352 037e DFED2C7A 		flds	s15, .L31+16
 353 0382 66EEA76A 		fmuls	s13, s13, s15
 354 0386 DFED2E7A 		flds	s15, .L31+32
 355 038a C6EEA77A 		fdivs	s15, s13, s15
 356 038e 77EE277A 		fadds	s15, s14, s15
 357 0392 C7ED157A 		fsts	s15, [r7, #84]
  82:../src/interrupt_defs.cpp **** 			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 358              		.loc 1 82 0
 359 0396 97ED157A 		flds	s14, [r7, #84]
 360 039a DFED267A 		flds	s15, .L31+20
 361 039e B4EEE77A 		fcmpes	s14, s15
 362 03a2 F1EE10FA 		fmstat
 363 03a6 04DD     		ble	.L29
 364              	.L25:
 365              		.loc 1 82 0 is_stmt 0 discriminator 1
 366 03a8 4FF00003 		mov	r3, #0
 367 03ac C4F2C823 		movt	r3, 17096
 368 03b0 0EE0     		b	.L16
 369              	.L29:
 370              		.loc 1 82 0 discriminator 2
 371 03b2 97ED157A 		flds	s14, [r7, #84]
 372 03b6 DFED207A 		flds	s15, .L31+24
 373 03ba B4EEE77A 		fcmpes	s14, s15
 374 03be F1EE10FA 		fmstat
 375 03c2 04D5     		bpl	.L30
 376              	.L26:
 377              		.loc 1 82 0 discriminator 3
 378 03c4 4FF00003 		mov	r3, #0
 379 03c8 CCF2C823 		movt	r3, 49864
 380 03cc 00E0     		b	.L19
 381              	.L30:
 382              		.loc 1 82 0 discriminator 4
 383 03ce 7B6D     		ldr	r3, [r7, #84]	@ float
 384              	.L19:
 385              	.L16:
 386              		.loc 1 82 0 discriminator 6
 387 03d0 7B65     		str	r3, [r7, #84]	@ float
  83:../src/interrupt_defs.cpp **** 			right_enc.last_error = error;
 388              		.loc 1 83 0 is_stmt 1 discriminator 6
 389 03d2 40F20003 		movw	r3, #:lower16:right_enc
 390 03d6 C0F20003 		movt	r3, #:upper16:right_enc
 391 03da BA6D     		ldr	r2, [r7, #88]
 392 03dc 9A61     		str	r2, [r3, #24]
  84:../src/interrupt_defs.cpp **** 
  85:../src/interrupt_defs.cpp **** 			abs_err = (error > 0) ? error : (error*-1);
 393              		.loc 1 85 0 discriminator 6
 394 03de BB6D     		ldr	r3, [r7, #88]
 395 03e0 002B     		cmp	r3, #0
 396 03e2 B8BF     		it	lt
 397 03e4 5B42     		rsblt	r3, r3, #0
 398 03e6 3B65     		str	r3, [r7, #80]
  86:../src/interrupt_defs.cpp **** 
  87:../src/interrupt_defs.cpp **** 			if(error > 10 || error < -10)
 399              		.loc 1 87 0 discriminator 6
 400 03e8 BB6D     		ldr	r3, [r7, #88]
 401 03ea 0A2B     		cmp	r3, #10
 402 03ec 03DC     		bgt	.L20
 403              		.loc 1 87 0 is_stmt 0 discriminator 1
 404 03ee BB6D     		ldr	r3, [r7, #88]
 405 03f0 13F10A0F 		cmn	r3, #10
 406 03f4 28DA     		bge	.L21
 407              	.L20:
  88:../src/interrupt_defs.cpp **** 			{
  89:../src/interrupt_defs.cpp **** 				pwm1_output((((float)(right_out+100)/(float)2))*(float)0.01);
 408              		.loc 1 89 0 is_stmt 1
 409 03f6 97ED157A 		flds	s14, [r7, #84]
 410 03fa DFED0E7A 		flds	s15, .L31+20
 411 03fe 37EE277A 		fadds	s14, s14, s15
 412 0402 F0EE007A 		fconsts	s15, #0
 413 0406 87EE277A 		fdivs	s14, s14, s15
 414 040a DFED0E7A 		flds	s15, .L31+36
 415 040e 67EE277A 		fmuls	s15, s14, s15
 416 0412 B0EE670A 		fcpys	s0, s15
 417 0416 FFF7FEFF 		bl	_Z11pwm1_outputf
 418 041a 21E0     		b	.L1
 419              	.L32:
 420 041c AFF30080 		.align	3
 421              	.L31:
 422 0420 33333333 		.word	858993459
 423 0424 3333C33F 		.word	1069757235
 424 0428 00007A44 		.word	1148846080
 425 042c 9A99193E 		.word	1041865114
 426 0430 8FC2353F 		.word	1060487823
 427 0434 0000C842 		.word	1120403456
 428 0438 0000C8C2 		.word	-1027080192
 429 043c 00000000 		.word	0
 430 0440 CDCCCC3C 		.word	1020054733
 431 0444 0AD7233C 		.word	1008981770
 432              	.L21:
  90:../src/interrupt_defs.cpp **** 			}
  91:../src/interrupt_defs.cpp **** 			else
  92:../src/interrupt_defs.cpp **** 			{
  93:../src/interrupt_defs.cpp **** 				pwm1_output(0.50f);
 433              		.loc 1 93 0
 434 0448 B6EE000A 		fconsts	s0, #96
 435 044c FFF7FEFF 		bl	_Z11pwm1_outputf
  94:../src/interrupt_defs.cpp **** 				right_enc.m = MODE_OPENLOOP;
 436              		.loc 1 94 0
 437 0450 40F20003 		movw	r3, #:lower16:right_enc
 438 0454 C0F20003 		movt	r3, #:upper16:right_enc
 439 0458 4FF00002 		mov	r2, #0
 440 045c 83F82420 		strb	r2, [r3, #36]
 441              	.L1:
 442              	.LBE2:
  95:../src/interrupt_defs.cpp **** 			}
  96:../src/interrupt_defs.cpp **** 		}
  97:../src/interrupt_defs.cpp **** 		/*
  98:../src/interrupt_defs.cpp **** 		else if(right_enc.m == MODE_SPEED)
  99:../src/interrupt_defs.cpp **** 		{
 100:../src/interrupt_defs.cpp **** 			error = right_enc.speed - right_enc.speed_target;
 101:../src/interrupt_defs.cpp **** 
 102:../src/interrupt_defs.cpp **** 			right_out = ((float)error * (float)k_p_s);// + ((float)k_d_s * (float)(error - right_enc.last_sp
 103:../src/interrupt_defs.cpp **** //			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 104:../src/interrupt_defs.cpp **** 			right_enc.vel_cmd += right_out;
 105:../src/interrupt_defs.cpp **** 			if(right_enc.vel_cmd > 1)
 106:../src/interrupt_defs.cpp **** 			{
 107:../src/interrupt_defs.cpp **** 				right_enc.vel_cmd = 1;
 108:../src/interrupt_defs.cpp **** 			}
 109:../src/interrupt_defs.cpp **** 
 110:../src/interrupt_defs.cpp **** 			else if(right_enc.vel_cmd < 0)
 111:../src/interrupt_defs.cpp **** 			{
 112:../src/interrupt_defs.cpp **** 				right_enc.vel_cmd = 0;
 113:../src/interrupt_defs.cpp **** 			}
 114:../src/interrupt_defs.cpp **** 
 115:../src/interrupt_defs.cpp **** //			pwm1_output((float)1.0-right_enc.vel_cmd);
 116:../src/interrupt_defs.cpp **** 			pwm1_output(0.50f);
 117:../src/interrupt_defs.cpp **** 
 118:../src/interrupt_defs.cpp **** 			right_enc.last_speed_error = error;
 119:../src/interrupt_defs.cpp **** 		}
 120:../src/interrupt_defs.cpp **** 		*/
 121:../src/interrupt_defs.cpp **** 	}
 443              		.loc 1 121 0
 444 0460 07F16407 		add	r7, r7, #100
 445 0464 BD46     		mov	sp, r7
 446 0466 90BD     		pop	{r4, r7, pc}
 447              		.cfi_endproc
 448              	.LFE111:
 450              		.align	2
 451              		.global	TIM1_TRG_COM_TIM17_IRQHandler
 452              		.thumb
 453              		.thumb_func
 455              	TIM1_TRG_COM_TIM17_IRQHandler:
 456              	.LFB112:
 122:../src/interrupt_defs.cpp **** 
 123:../src/interrupt_defs.cpp **** 	void TIM1_TRG_COM_TIM17_IRQHandler(void)
 124:../src/interrupt_defs.cpp **** 	{
 457              		.loc 1 124 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 8
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461 0468 80B5     		push	{r7, lr}
 462              	.LCFI3:
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 7, -8
 465              		.cfi_offset 14, -4
 466 046a 82B0     		sub	sp, sp, #8
 467              	.LCFI4:
 468              		.cfi_def_cfa_offset 16
 469 046c 00AF     		add	r7, sp, #0
 470              	.LCFI5:
 471              		.cfi_def_cfa_register 7
 472              	.LBB3:
 125:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM17, TIM_IT_Update);
 473              		.loc 1 125 0
 474 046e 4FF49040 		mov	r0, #18432
 475 0472 C4F20100 		movt	r0, 16385
 476 0476 4FF00101 		mov	r1, #1
 477 047a FFF7FEFF 		bl	TIM_ClearITPendingBit
 126:../src/interrupt_defs.cpp **** 		uint8_t bytes[2];
 127:../src/interrupt_defs.cpp **** 
 128:../src/interrupt_defs.cpp **** 		union twosComp {		// Takes care of two's complement conversion
 129:../src/interrupt_defs.cpp **** 			uint16_t un_signed;
 130:../src/interrupt_defs.cpp **** 			int16_t output;
 131:../src/interrupt_defs.cpp **** 		} convert;
 132:../src/interrupt_defs.cpp **** 
 133:../src/interrupt_defs.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 478              		.loc 1 133 0
 479 047e 07F10403 		add	r3, r7, #4
 480 0482 1846     		mov	r0, r3
 481 0484 4FF02801 		mov	r1, #40
 482 0488 4FF00202 		mov	r2, #2
 483 048c FFF7FEFF 		bl	L3GD20_Read
 134:../src/interrupt_defs.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 484              		.loc 1 134 0
 485 0490 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 486 0492 4FEA0323 		lsl	r3, r3, #8
 487 0496 9AB2     		uxth	r2, r3
 488 0498 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 489 049a 1343     		orrs	r3, r3, r2
 490 049c 9BB2     		uxth	r3, r3
 491 049e 9BB2     		uxth	r3, r3
 492 04a0 3B80     		strh	r3, [r7, #0]	@ movhi
 135:../src/interrupt_defs.cpp **** 
 136:../src/interrupt_defs.cpp **** 		gyro_angle_x += (convert.output - gyro_bias_x) * (float)0.00763 * (float)0.001 * (float)DT_IMU;
 493              		.loc 1 136 0
 494 04a2 3B88     		ldrh	r3, [r7, #0]
 495 04a4 1AB2     		sxth	r2, r3
 496 04a6 40F20003 		movw	r3, #:lower16:gyro_bias_x
 497 04aa C0F20003 		movt	r3, #:upper16:gyro_bias_x
 498 04ae 1B68     		ldr	r3, [r3, #0]
 499 04b0 D31A     		subs	r3, r2, r3
 500 04b2 07EE903A 		fmsr	s15, r3	@ int
 501 04b6 B8EEE77A 		fsitos	s14, s15
 502 04ba DFED0F7A 		flds	s15, .L34
 503 04be 27EE277A 		fmuls	s14, s14, s15
 504 04c2 DFED0E7A 		flds	s15, .L34+4
 505 04c6 27EE277A 		fmuls	s14, s14, s15
 506 04ca F3EE097A 		fconsts	s15, #57
 507 04ce 27EE277A 		fmuls	s14, s14, s15
 508 04d2 40F20003 		movw	r3, #:lower16:gyro_angle_x
 509 04d6 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 510 04da D3ED007A 		flds	s15, [r3, #0]
 511 04de 77EE277A 		fadds	s15, s14, s15
 512 04e2 40F20003 		movw	r3, #:lower16:gyro_angle_x
 513 04e6 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 514 04ea C3ED007A 		fsts	s15, [r3, #0]
 515              	.LBE3:
 137:../src/interrupt_defs.cpp **** 	}
 516              		.loc 1 137 0
 517 04ee 07F10807 		add	r7, r7, #8
 518 04f2 BD46     		mov	sp, r7
 519 04f4 80BD     		pop	{r7, pc}
 520              	.L35:
 521 04f6 00BF     		.align	2
 522              	.L34:
 523 04f8 1405FA3B 		.word	1006241044
 524 04fc 6F12833A 		.word	981668463
 525              		.cfi_endproc
 526              	.LFE112:
 528              		.align	2
 529              		.global	TIM6_DAC_IRQHandler
 530              		.thumb
 531              		.thumb_func
 533              	TIM6_DAC_IRQHandler:
 534              	.LFB113:
 138:../src/interrupt_defs.cpp **** 	void TIM6_DAC_IRQHandler(void)
 139:../src/interrupt_defs.cpp **** 	{
 535              		.loc 1 139 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 0
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539 0500 80B5     		push	{r7, lr}
 540              	.LCFI6:
 541              		.cfi_def_cfa_offset 8
 542              		.cfi_offset 7, -8
 543              		.cfi_offset 14, -4
 544 0502 00AF     		add	r7, sp, #0
 545              	.LCFI7:
 546              		.cfi_def_cfa_register 7
 140:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 547              		.loc 1 140 0
 548 0504 4FF48050 		mov	r0, #4096
 549 0508 C4F20000 		movt	r0, 16384
 550 050c 4FF00101 		mov	r1, #1
 551 0510 FFF7FEFF 		bl	TIM_ClearITPendingBit
 141:../src/interrupt_defs.cpp **** 		GPIO_Write(GPIOE, led_matrix[led_iter] | led_matrix[7-led_iter]);
 552              		.loc 1 141 0
 553 0514 40F20003 		movw	r3, #:lower16:led_iter
 554 0518 C0F20003 		movt	r3, #:upper16:led_iter
 555 051c 1A68     		ldr	r2, [r3, #0]
 556 051e 40F20003 		movw	r3, #:lower16:led_matrix
 557 0522 C0F20003 		movt	r3, #:upper16:led_matrix
 558 0526 53F82230 		ldr	r3, [r3, r2, lsl #2]
 559 052a 9AB2     		uxth	r2, r3
 560 052c 40F20003 		movw	r3, #:lower16:led_iter
 561 0530 C0F20003 		movt	r3, #:upper16:led_iter
 562 0534 1B68     		ldr	r3, [r3, #0]
 563 0536 C3F10701 		rsb	r1, r3, #7
 564 053a 40F20003 		movw	r3, #:lower16:led_matrix
 565 053e C0F20003 		movt	r3, #:upper16:led_matrix
 566 0542 53F82130 		ldr	r3, [r3, r1, lsl #2]
 567 0546 9BB2     		uxth	r3, r3
 568 0548 1343     		orrs	r3, r3, r2
 569 054a 9BB2     		uxth	r3, r3
 570 054c 9BB2     		uxth	r3, r3
 571 054e 4FF48050 		mov	r0, #4096
 572 0552 C4F60000 		movt	r0, 18432
 573 0556 1946     		mov	r1, r3
 574 0558 FFF7FEFF 		bl	GPIO_Write
 142:../src/interrupt_defs.cpp **** 		++led_iter;
 575              		.loc 1 142 0
 576 055c 40F20003 		movw	r3, #:lower16:led_iter
 577 0560 C0F20003 		movt	r3, #:upper16:led_iter
 578 0564 1B68     		ldr	r3, [r3, #0]
 579 0566 03F10102 		add	r2, r3, #1
 580 056a 40F20003 		movw	r3, #:lower16:led_iter
 581 056e C0F20003 		movt	r3, #:upper16:led_iter
 582 0572 1A60     		str	r2, [r3, #0]
 143:../src/interrupt_defs.cpp **** 		if(led_iter > 7)
 583              		.loc 1 143 0
 584 0574 40F20003 		movw	r3, #:lower16:led_iter
 585 0578 C0F20003 		movt	r3, #:upper16:led_iter
 586 057c 1B68     		ldr	r3, [r3, #0]
 587 057e 072B     		cmp	r3, #7
 588 0580 D4BF     		ite	le
 589 0582 0023     		movle	r3, #0
 590 0584 0123     		movgt	r3, #1
 591 0586 DBB2     		uxtb	r3, r3
 592 0588 002B     		cmp	r3, #0
 593 058a 06D0     		beq	.L36
 144:../src/interrupt_defs.cpp **** 		{
 145:../src/interrupt_defs.cpp **** 			led_iter = 0;
 594              		.loc 1 145 0
 595 058c 40F20003 		movw	r3, #:lower16:led_iter
 596 0590 C0F20003 		movt	r3, #:upper16:led_iter
 597 0594 4FF00002 		mov	r2, #0
 598 0598 1A60     		str	r2, [r3, #0]
 599              	.L36:
 146:../src/interrupt_defs.cpp **** 		}
 147:../src/interrupt_defs.cpp **** 	}
 600              		.loc 1 147 0
 601 059a 80BD     		pop	{r7, pc}
 602              		.cfi_endproc
 603              	.LFE113:
 605              		.align	2
 606              		.global	ADC1_2_IRQHandler
 607              		.thumb
 608              		.thumb_func
 610              	ADC1_2_IRQHandler:
 611              	.LFB114:
 148:../src/interrupt_defs.cpp **** 	void ADC1_2_IRQHandler(void)
 149:../src/interrupt_defs.cpp **** 	{
 612              		.loc 1 149 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 1, uses_anonymous_args = 0
 616 059c 80B5     		push	{r7, lr}
 617              	.LCFI8:
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 7, -8
 620              		.cfi_offset 14, -4
 621 059e 00AF     		add	r7, sp, #0
 622              	.LCFI9:
 623              		.cfi_def_cfa_register 7
 150:../src/interrupt_defs.cpp **** 		if(ADC_GetITStatus(ADC1, ADC_IT_EOC) == SET)
 624              		.loc 1 150 0
 625 05a0 4FF0A040 		mov	r0, #1342177280
 626 05a4 4FF00401 		mov	r1, #4
 627 05a8 FFF7FEFF 		bl	ADC_GetITStatus
 628 05ac 0346     		mov	r3, r0
 629 05ae 012B     		cmp	r3, #1
 630 05b0 14BF     		ite	ne
 631 05b2 0023     		movne	r3, #0
 632 05b4 0123     		moveq	r3, #1
 633 05b6 DBB2     		uxtb	r3, r3
 634 05b8 002B     		cmp	r3, #0
 635 05ba 10D0     		beq	.L38
 151:../src/interrupt_defs.cpp **** 		{
 152:../src/interrupt_defs.cpp **** 			adcval = ADC_GetConversionValue(ADC1);
 636              		.loc 1 152 0
 637 05bc 4FF0A040 		mov	r0, #1342177280
 638 05c0 FFF7FEFF 		bl	ADC_GetConversionValue
 639 05c4 0346     		mov	r3, r0
 640 05c6 1A46     		mov	r2, r3
 641 05c8 40F20003 		movw	r3, #:lower16:adcval
 642 05cc C0F20003 		movt	r3, #:upper16:adcval
 643 05d0 1A60     		str	r2, [r3, #0]
 153:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 644              		.loc 1 153 0
 645 05d2 4FF0A040 		mov	r0, #1342177280
 646 05d6 4FF00401 		mov	r1, #4
 647 05da FFF7FEFF 		bl	ADC_ClearITPendingBit
 648              	.L38:
 154:../src/interrupt_defs.cpp **** 		}
 155:../src/interrupt_defs.cpp **** 	}
 649              		.loc 1 155 0
 650 05de 80BD     		pop	{r7, pc}
 651              		.cfi_endproc
 652              	.LFE114:
 654              		.align	2
 655              		.global	DMA1_Channel1_IRQHandler
 656              		.thumb
 657              		.thumb_func
 659              	DMA1_Channel1_IRQHandler:
 660              	.LFB115:
 156:../src/interrupt_defs.cpp **** 
 157:../src/interrupt_defs.cpp **** 	void DMA1_Channel1_IRQHandler(void)
 158:../src/interrupt_defs.cpp **** 	{
 661              		.loc 1 158 0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 1, uses_anonymous_args = 0
 665 05e0 80B5     		push	{r7, lr}
 666              	.LCFI10:
 667              		.cfi_def_cfa_offset 8
 668              		.cfi_offset 7, -8
 669              		.cfi_offset 14, -4
 670 05e2 00AF     		add	r7, sp, #0
 671              	.LCFI11:
 672              		.cfi_def_cfa_register 7
 159:../src/interrupt_defs.cpp **** 		DMA_ClearITPendingBit(DMA1_IT_TC1);
 673              		.loc 1 159 0
 674 05e4 4FF00200 		mov	r0, #2
 675 05e8 FFF7FEFF 		bl	DMA_ClearITPendingBit
 160:../src/interrupt_defs.cpp **** 		new_data = 1;
 676              		.loc 1 160 0
 677 05ec 40F20003 		movw	r3, #:lower16:new_data
 678 05f0 C0F20003 		movt	r3, #:upper16:new_data
 679 05f4 4FF00102 		mov	r2, #1
 680 05f8 1A60     		str	r2, [r3, #0]
 161:../src/interrupt_defs.cpp **** 	}
 681              		.loc 1 161 0
 682 05fa 80BD     		pop	{r7, pc}
 683              		.cfi_endproc
 684              	.LFE115:
 686              		.align	2
 687              		.global	DMA2_Channel1_IRQHandler
 688              		.thumb
 689              		.thumb_func
 691              	DMA2_Channel1_IRQHandler:
 692              	.LFB116:
 162:../src/interrupt_defs.cpp **** 
 163:../src/interrupt_defs.cpp **** 	void DMA2_Channel1_IRQHandler(void)
 164:../src/interrupt_defs.cpp **** 	{
 693              		.loc 1 164 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 1, uses_anonymous_args = 0
 697 05fc 80B5     		push	{r7, lr}
 698              	.LCFI12:
 699              		.cfi_def_cfa_offset 8
 700              		.cfi_offset 7, -8
 701              		.cfi_offset 14, -4
 702 05fe 00AF     		add	r7, sp, #0
 703              	.LCFI13:
 704              		.cfi_def_cfa_register 7
 165:../src/interrupt_defs.cpp **** 		DMA_ClearITPendingBit(DMA2_IT_TC1);
 705              		.loc 1 165 0
 706 0600 4FF00200 		mov	r0, #2
 707 0604 C1F20000 		movt	r0, 4096
 708 0608 FFF7FEFF 		bl	DMA_ClearITPendingBit
 166:../src/interrupt_defs.cpp **** 		adc2_new_data = 1;
 709              		.loc 1 166 0
 710 060c 40F20003 		movw	r3, #:lower16:adc2_new_data
 711 0610 C0F20003 		movt	r3, #:upper16:adc2_new_data
 712 0614 4FF00102 		mov	r2, #1
 713 0618 1A70     		strb	r2, [r3, #0]
 167:../src/interrupt_defs.cpp **** 	}
 714              		.loc 1 167 0
 715 061a 80BD     		pop	{r7, pc}
 716              		.cfi_endproc
 717              	.LFE116:
 719              	.Letext0:
 720              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 721              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 722              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 723              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 interrupt_defs.cpp
     /tmp/ccBZiq58.s:24     .text:00000000 $t
     /tmp/ccBZiq58.s:29     .text:00000000 TIM7_IRQHandler
     /tmp/ccBZiq58.s:422    .text:00000420 $d
     /tmp/ccBZiq58.s:434    .text:00000448 $t
     /tmp/ccBZiq58.s:455    .text:00000468 TIM1_TRG_COM_TIM17_IRQHandler
     /tmp/ccBZiq58.s:523    .text:000004f8 $d
     /tmp/ccBZiq58.s:528    .text:00000500 $t
     /tmp/ccBZiq58.s:533    .text:00000500 TIM6_DAC_IRQHandler
     /tmp/ccBZiq58.s:610    .text:0000059c ADC1_2_IRQHandler
     /tmp/ccBZiq58.s:659    .text:000005e0 DMA1_Channel1_IRQHandler
     /tmp/ccBZiq58.s:691    .text:000005fc DMA2_Channel1_IRQHandler
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.50a79f075d1434c9a8bd8ee500f78677
                           .group:00000000 wm4.common_headers.h.9.7fd02f13feff23c3903ac7c4e216cd44
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dcmplt
TIM_ClearITPendingBit
left_enc
right_enc
TIM_GetCounter
TIM_SetCounter
_Z11pwm2_outputf
_Z11pwm1_outputf
L3GD20_Read
gyro_bias_x
gyro_angle_x
led_iter
led_matrix
GPIO_Write
ADC_GetITStatus
ADC_GetConversionValue
adcval
ADC_ClearITPendingBit
DMA_ClearITPendingBit
new_data
adc2_new_data
