   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"interrupt_defs.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__aeabi_i2d
  20              		.global	__aeabi_dmul
  21              		.global	__aeabi_dcmpgt
  22              		.global	__aeabi_dcmplt
  23              		.align	2
  24              		.global	TIM7_IRQHandler
  25              		.thumb
  26              		.thumb_func
  28              	TIM7_IRQHandler:
  29              	.LFB111:
  30              		.file 1 "../src/interrupt_defs.cpp"
   1:../src/interrupt_defs.cpp **** /*
   2:../src/interrupt_defs.cpp ****  * interrupt_defs.cpp
   3:../src/interrupt_defs.cpp ****  *
   4:../src/interrupt_defs.cpp ****  *  Created on: Feb 19, 2013
   5:../src/interrupt_defs.cpp ****  *      Author: root
   6:../src/interrupt_defs.cpp ****  */
   7:../src/interrupt_defs.cpp **** 
   8:../src/interrupt_defs.cpp **** #include "common_headers.h"
   9:../src/interrupt_defs.cpp **** #include "stm32f3_discovery_l3gd20.h"
  10:../src/interrupt_defs.cpp **** 
  11:../src/interrupt_defs.cpp **** #include "encoder.h"
  12:../src/interrupt_defs.cpp **** 
  13:../src/interrupt_defs.cpp **** //#include <stdio.h>
  14:../src/interrupt_defs.cpp **** #include <math.h>
  15:../src/interrupt_defs.cpp **** 
  16:../src/interrupt_defs.cpp **** // ISR definitions need to go here, to avoid C++ name-mangling
  17:../src/interrupt_defs.cpp **** 
  18:../src/interrupt_defs.cpp **** extern "C"
  19:../src/interrupt_defs.cpp **** {
  20:../src/interrupt_defs.cpp **** extern volatile float gyro_angle_x;
  21:../src/interrupt_defs.cpp **** extern encoderState left_enc, right_enc;
  22:../src/interrupt_defs.cpp **** extern int gyro_bias_x, adcval;
  23:../src/interrupt_defs.cpp **** extern volatile int led_matrix[8];
  24:../src/interrupt_defs.cpp **** extern volatile int led_iter;
  25:../src/interrupt_defs.cpp **** extern int new_data;
  26:../src/interrupt_defs.cpp **** extern uint8_t adc2_new_data;
  27:../src/interrupt_defs.cpp **** extern uint8_t adc3_awd1, adc3_awd2;
  28:../src/interrupt_defs.cpp **** 
  29:../src/interrupt_defs.cpp **** extern int count, stage;
  30:../src/interrupt_defs.cpp **** 
  31:../src/interrupt_defs.cpp **** 	void TIM7_IRQHandler(void) // ISR that performs encoder state update:
  32:../src/interrupt_defs.cpp **** 										// Runs every DT milliseconds
  33:../src/interrupt_defs.cpp **** 	{
  31              		.loc 1 33 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 96
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 90B5     		push	{r4, r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 12
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 99B0     		sub	sp, sp, #100
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 112
  44 0004 00AF     		add	r7, sp, #0
  45              	.LCFI2:
  46              		.cfi_def_cfa_register 7
  47              	.LBB2:
  34:../src/interrupt_defs.cpp **** 		float left_out, right_out;
  35:../src/interrupt_defs.cpp **** 		int error, abs_err;
  36:../src/interrupt_defs.cpp **** 
  37:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
  48              		.loc 1 37 0
  49 0006 4FF4A050 		mov	r0, #5120
  50 000a C4F20000 		movt	r0, 16384
  51 000e 4FF00101 		mov	r1, #1
  52 0012 FFF7FEFF 		bl	TIM_ClearITPendingBit
  38:../src/interrupt_defs.cpp **** 
  39:../src/interrupt_defs.cpp **** 		encoderState left_temp, right_temp;
  40:../src/interrupt_defs.cpp **** 
  41:../src/interrupt_defs.cpp **** 		left_temp.position = left_enc.position;
  53              		.loc 1 41 0
  54 0016 40F20003 		movw	r3, #:lower16:left_enc
  55 001a C0F20003 		movt	r3, #:upper16:left_enc
  56 001e 1B68     		ldr	r3, [r3, #0]
  57 0020 3B60     		str	r3, [r7, #0]
  42:../src/interrupt_defs.cpp **** 		left_temp.speed = left_enc.speed;
  58              		.loc 1 42 0
  59 0022 40F20003 		movw	r3, #:lower16:left_enc
  60 0026 C0F20003 		movt	r3, #:upper16:left_enc
  61 002a 5B68     		ldr	r3, [r3, #4]	@ float
  62 002c 7B60     		str	r3, [r7, #4]	@ float
  43:../src/interrupt_defs.cpp **** 		left_temp.acceleration = left_enc.acceleration;
  63              		.loc 1 43 0
  64 002e 40F20003 		movw	r3, #:lower16:left_enc
  65 0032 C0F20003 		movt	r3, #:upper16:left_enc
  66 0036 9B68     		ldr	r3, [r3, #8]	@ float
  67 0038 BB60     		str	r3, [r7, #8]	@ float
  44:../src/interrupt_defs.cpp **** 
  45:../src/interrupt_defs.cpp **** 		right_temp.position = right_enc.position;
  68              		.loc 1 45 0
  69 003a 40F20003 		movw	r3, #:lower16:right_enc
  70 003e C0F20003 		movt	r3, #:upper16:right_enc
  71 0042 1B68     		ldr	r3, [r3, #0]
  72 0044 BB62     		str	r3, [r7, #40]
  46:../src/interrupt_defs.cpp **** 		right_temp.speed = right_enc.speed;
  73              		.loc 1 46 0
  74 0046 40F20003 		movw	r3, #:lower16:right_enc
  75 004a C0F20003 		movt	r3, #:upper16:right_enc
  76 004e 5B68     		ldr	r3, [r3, #4]	@ float
  77 0050 FB62     		str	r3, [r7, #44]	@ float
  47:../src/interrupt_defs.cpp **** 		right_temp.acceleration = right_enc.acceleration;
  78              		.loc 1 47 0
  79 0052 40F20003 		movw	r3, #:lower16:right_enc
  80 0056 C0F20003 		movt	r3, #:upper16:right_enc
  81 005a 9B68     		ldr	r3, [r3, #8]	@ float
  82 005c 3B63     		str	r3, [r7, #48]	@ float
  48:../src/interrupt_defs.cpp **** 
  49:../src/interrupt_defs.cpp **** 		left_enc.position = left_temp.position + (int16_t)TIM_GetCounter(TIM4); //Instead of TIM2 on othe
  83              		.loc 1 49 0
  84 005e 3C68     		ldr	r4, [r7, #0]
  85 0060 4FF40060 		mov	r0, #2048
  86 0064 C4F20000 		movt	r0, 16384
  87 0068 FFF7FEFF 		bl	TIM_GetCounter
  88 006c 0346     		mov	r3, r0
  89 006e 9BB2     		uxth	r3, r3
  90 0070 1BB2     		sxth	r3, r3
  91 0072 E218     		adds	r2, r4, r3
  92 0074 40F20003 		movw	r3, #:lower16:left_enc
  93 0078 C0F20003 		movt	r3, #:upper16:left_enc
  94 007c 1A60     		str	r2, [r3, #0]
  50:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM4, 0);
  95              		.loc 1 50 0
  96 007e 4FF40060 		mov	r0, #2048
  97 0082 C4F20000 		movt	r0, 16384
  98 0086 4FF00001 		mov	r1, #0
  99 008a FFF7FEFF 		bl	TIM_SetCounter
  51:../src/interrupt_defs.cpp **** 		left_enc.speed = (float)((left_enc.position - left_temp.position)*1000)/(float)DT_ENCODER; // Sin
 100              		.loc 1 51 0
 101 008e 40F20003 		movw	r3, #:lower16:left_enc
 102 0092 C0F20003 		movt	r3, #:upper16:left_enc
 103 0096 1A68     		ldr	r2, [r3, #0]
 104 0098 3B68     		ldr	r3, [r7, #0]
 105 009a D31A     		subs	r3, r2, r3
 106 009c 4FF47A72 		mov	r2, #1000
 107 00a0 02FB03F3 		mul	r3, r2, r3
 108 00a4 07EE903A 		fmsr	s15, r3	@ int
 109 00a8 B8EEE77A 		fsitos	s14, s15
 110 00ac F3EE097A 		fconsts	s15, #57
 111 00b0 C7EE277A 		fdivs	s15, s14, s15
 112 00b4 40F20003 		movw	r3, #:lower16:left_enc
 113 00b8 C0F20003 		movt	r3, #:upper16:left_enc
 114 00bc C3ED017A 		fsts	s15, [r3, #4]
  52:../src/interrupt_defs.cpp **** 		left_enc.acceleration = (float)((left_enc.speed - left_temp.speed)*1000)/(float)DT_ENCODER;
 115              		.loc 1 52 0
 116 00c0 40F20003 		movw	r3, #:lower16:left_enc
 117 00c4 C0F20003 		movt	r3, #:upper16:left_enc
 118 00c8 93ED017A 		flds	s14, [r3, #4]
 119 00cc D7ED017A 		flds	s15, [r7, #4]
 120 00d0 37EE677A 		fsubs	s14, s14, s15
 121 00d4 DFEDDA7A 		flds	s15, .L31+8
 122 00d8 27EE277A 		fmuls	s14, s14, s15
 123 00dc F3EE097A 		fconsts	s15, #57
 124 00e0 C7EE277A 		fdivs	s15, s14, s15
 125 00e4 40F20003 		movw	r3, #:lower16:left_enc
 126 00e8 C0F20003 		movt	r3, #:upper16:left_enc
 127 00ec C3ED027A 		fsts	s15, [r3, #8]
  53:../src/interrupt_defs.cpp **** 
  54:../src/interrupt_defs.cpp **** 		right_enc.position = right_temp.position + (int16_t)(TIM_GetCounter(TIM8));
 128              		.loc 1 54 0
 129 00f0 BC6A     		ldr	r4, [r7, #40]
 130 00f2 4FF45050 		mov	r0, #13312
 131 00f6 C4F20100 		movt	r0, 16385
 132 00fa FFF7FEFF 		bl	TIM_GetCounter
 133 00fe 0346     		mov	r3, r0
 134 0100 9BB2     		uxth	r3, r3
 135 0102 1BB2     		sxth	r3, r3
 136 0104 E218     		adds	r2, r4, r3
 137 0106 40F20003 		movw	r3, #:lower16:right_enc
 138 010a C0F20003 		movt	r3, #:upper16:right_enc
 139 010e 1A60     		str	r2, [r3, #0]
  55:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM8, 0); // To get around the stupid 16-bit counter limitation present on all tim
 140              		.loc 1 55 0
 141 0110 4FF45050 		mov	r0, #13312
 142 0114 C4F20100 		movt	r0, 16385
 143 0118 4FF00001 		mov	r1, #0
 144 011c FFF7FEFF 		bl	TIM_SetCounter
  56:../src/interrupt_defs.cpp **** 		right_enc.speed = (float)((right_enc.position - right_temp.position)*1000)/(float)DT_ENCODER;
 145              		.loc 1 56 0
 146 0120 40F20003 		movw	r3, #:lower16:right_enc
 147 0124 C0F20003 		movt	r3, #:upper16:right_enc
 148 0128 1A68     		ldr	r2, [r3, #0]
 149 012a BB6A     		ldr	r3, [r7, #40]
 150 012c D31A     		subs	r3, r2, r3
 151 012e 4FF47A72 		mov	r2, #1000
 152 0132 02FB03F3 		mul	r3, r2, r3
 153 0136 07EE903A 		fmsr	s15, r3	@ int
 154 013a B8EEE77A 		fsitos	s14, s15
 155 013e F3EE097A 		fconsts	s15, #57
 156 0142 C7EE277A 		fdivs	s15, s14, s15
 157 0146 40F20003 		movw	r3, #:lower16:right_enc
 158 014a C0F20003 		movt	r3, #:upper16:right_enc
 159 014e C3ED017A 		fsts	s15, [r3, #4]
  57:../src/interrupt_defs.cpp **** 		right_enc.acceleration = (float)((right_enc.speed - right_temp.speed)*1000)/(float)DT_ENCODER;
 160              		.loc 1 57 0
 161 0152 40F20003 		movw	r3, #:lower16:right_enc
 162 0156 C0F20003 		movt	r3, #:upper16:right_enc
 163 015a 93ED017A 		flds	s14, [r3, #4]
 164 015e D7ED0B7A 		flds	s15, [r7, #44]
 165 0162 37EE677A 		fsubs	s14, s14, s15
 166 0166 DFEDB67A 		flds	s15, .L31+8
 167 016a 27EE277A 		fmuls	s14, s14, s15
 168 016e F3EE097A 		fconsts	s15, #57
 169 0172 C7EE277A 		fdivs	s15, s14, s15
 170 0176 40F20003 		movw	r3, #:lower16:right_enc
 171 017a C0F20003 		movt	r3, #:upper16:right_enc
 172 017e C3ED027A 		fsts	s15, [r3, #8]
  58:../src/interrupt_defs.cpp **** 
  59:../src/interrupt_defs.cpp **** 		if(left_enc.m == MODE_POSITION)
 173              		.loc 1 59 0
 174 0182 40F20003 		movw	r3, #:lower16:left_enc
 175 0186 C0F20003 		movt	r3, #:upper16:left_enc
 176 018a 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 177 018e 012B     		cmp	r3, #1
 178 0190 5DD1     		bne	.L2
  60:../src/interrupt_defs.cpp **** 		{
  61:../src/interrupt_defs.cpp **** 			left_out = ((float)k_p * (float)(left_enc.position_target - left_enc.position))
  62:../src/interrupt_defs.cpp **** 					+ ((float)k_i*(float)(left_enc.integral))
  63:../src/interrupt_defs.cpp **** 					+ ((float)k_d*(float)left_enc.speed);
 179              		.loc 1 63 0
 180 0192 40F20003 		movw	r3, #:lower16:left_enc
 181 0196 C0F20003 		movt	r3, #:upper16:left_enc
 182 019a DA68     		ldr	r2, [r3, #12]
 183 019c 40F20003 		movw	r3, #:lower16:left_enc
 184 01a0 C0F20003 		movt	r3, #:upper16:left_enc
 185 01a4 1B68     		ldr	r3, [r3, #0]
 186 01a6 D31A     		subs	r3, r2, r3
 187 01a8 07EE103A 		fmsr	s14, r3	@ int
 188 01ac F8EEC77A 		fsitos	s15, s14
 189 01b0 37EEA77A 		fadds	s14, s15, s15
 190 01b4 40F20003 		movw	r3, #:lower16:left_enc
 191 01b8 C0F20003 		movt	r3, #:upper16:left_enc
 192 01bc D3ED057A 		flds	s15, [r3, #20]	@ int
 193 01c0 F8EEE76A 		fsitos	s13, s15
 194 01c4 DFED9F7A 		flds	s15, .L31+12
 195 01c8 66EEA77A 		fmuls	s15, s13, s15
 196 01cc 37EE277A 		fadds	s14, s14, s15
 197 01d0 40F20003 		movw	r3, #:lower16:left_enc
 198 01d4 C0F20003 		movt	r3, #:upper16:left_enc
 199 01d8 D3ED016A 		flds	s13, [r3, #4]
 200 01dc DFED9A7A 		flds	s15, .L31+16
 201 01e0 66EEA77A 		fmuls	s15, s13, s15
 202 01e4 77EE277A 		fadds	s15, s14, s15
 203 01e8 C7ED177A 		fsts	s15, [r7, #92]
  64:../src/interrupt_defs.cpp **** 			left_out = (left_out > 100) ? 100 : ((left_out < -100) ? -100 : left_out);
 204              		.loc 1 64 0
 205 01ec 97ED177A 		flds	s14, [r7, #92]
 206 01f0 DFED967A 		flds	s15, .L31+20
 207 01f4 B4EEE77A 		fcmpes	s14, s15
 208 01f8 F1EE10FA 		fmstat
 209 01fc 04DD     		ble	.L27
 210              	.L23:
 211              		.loc 1 64 0 is_stmt 0 discriminator 1
 212 01fe 4FF00003 		mov	r3, #0
 213 0202 C4F2C823 		movt	r3, 17096
 214 0206 0EE0     		b	.L5
 215              	.L27:
 216              		.loc 1 64 0 discriminator 2
 217 0208 97ED177A 		flds	s14, [r7, #92]
 218 020c DFED907A 		flds	s15, .L31+24
 219 0210 B4EEE77A 		fcmpes	s14, s15
 220 0214 F1EE10FA 		fmstat
 221 0218 04D5     		bpl	.L28
 222              	.L24:
 223              		.loc 1 64 0 discriminator 3
 224 021a 4FF00003 		mov	r3, #0
 225 021e CCF2C823 		movt	r3, 49864
 226 0222 00E0     		b	.L8
 227              	.L28:
 228              		.loc 1 64 0 discriminator 4
 229 0224 FB6D     		ldr	r3, [r7, #92]	@ float
 230              	.L8:
 231              	.L5:
 232              		.loc 1 64 0 discriminator 6
 233 0226 FB65     		str	r3, [r7, #92]	@ float
  65:../src/interrupt_defs.cpp **** 
  66:../src/interrupt_defs.cpp **** 			pwm2_output(100-((float)(left_out+100)/(float)2));
 234              		.loc 1 66 0 is_stmt 1 discriminator 6
 235 0228 97ED177A 		flds	s14, [r7, #92]
 236 022c DFED877A 		flds	s15, .L31+20
 237 0230 37EE277A 		fadds	s14, s14, s15
 238 0234 F0EE007A 		fconsts	s15, #0
 239 0238 C7EE277A 		fdivs	s15, s14, s15
 240 023c 9FED837A 		flds	s14, .L31+20
 241 0240 77EE677A 		fsubs	s15, s14, s15
 242 0244 17EE900A 		fmrs	r0, s15
 243 0248 FFF7FEFF 		bl	_Z11pwm2_outputf
 244 024c 0BE0     		b	.L9
 245              	.L2:
  67:../src/interrupt_defs.cpp **** 		}
  68:../src/interrupt_defs.cpp **** 		else if(left_enc.m == MODE_SPEED)
 246              		.loc 1 68 0
 247 024e 40F20003 		movw	r3, #:lower16:left_enc
 248 0252 C0F20003 		movt	r3, #:upper16:left_enc
 249 0256 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 250 025a 022B     		cmp	r3, #2
 251 025c 03D1     		bne	.L9
  69:../src/interrupt_defs.cpp **** 		{
  70:../src/interrupt_defs.cpp **** 			pwm2_output(0);
 252              		.loc 1 70 0
 253 025e 4FF00000 		mov	r0, #0
 254 0262 FFF7FEFF 		bl	_Z11pwm2_outputf
 255              	.L9:
  71:../src/interrupt_defs.cpp **** 		}
  72:../src/interrupt_defs.cpp **** 
  73:../src/interrupt_defs.cpp **** 		if(right_enc.m == MODE_POSITION)
 256              		.loc 1 73 0
 257 0266 40F20003 		movw	r3, #:lower16:right_enc
 258 026a C0F20003 		movt	r3, #:upper16:right_enc
 259 026e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 260 0272 012B     		cmp	r3, #1
 261 0274 40F0FE80 		bne	.L1
  74:../src/interrupt_defs.cpp **** 		{
  75:../src/interrupt_defs.cpp **** 			error = right_enc.position - right_enc.position_target;
 262              		.loc 1 75 0
 263 0278 40F20003 		movw	r3, #:lower16:right_enc
 264 027c C0F20003 		movt	r3, #:upper16:right_enc
 265 0280 1A68     		ldr	r2, [r3, #0]
 266 0282 40F20003 		movw	r3, #:lower16:right_enc
 267 0286 C0F20003 		movt	r3, #:upper16:right_enc
 268 028a DB68     		ldr	r3, [r3, #12]
 269 028c D31A     		subs	r3, r2, r3
 270 028e BB65     		str	r3, [r7, #88]
  76:../src/interrupt_defs.cpp **** 			right_enc.integral += (float)(error) * (float)DT_ENCODER / (float)1000;
 271              		.loc 1 76 0
 272 0290 40F20003 		movw	r3, #:lower16:right_enc
 273 0294 C0F20003 		movt	r3, #:upper16:right_enc
 274 0298 D3ED057A 		flds	s15, [r3, #20]	@ int
 275 029c B8EEE77A 		fsitos	s14, s15
 276 02a0 D7ED167A 		flds	s15, [r7, #88]	@ int
 277 02a4 F8EEE76A 		fsitos	s13, s15
 278 02a8 F3EE097A 		fconsts	s15, #57
 279 02ac 66EEA76A 		fmuls	s13, s13, s15
 280 02b0 DFED637A 		flds	s15, .L31+8
 281 02b4 C6EEA77A 		fdivs	s15, s13, s15
 282 02b8 77EE277A 		fadds	s15, s14, s15
 283 02bc FDEEE77A 		ftosizs	s15, s15
 284 02c0 40F20003 		movw	r3, #:lower16:right_enc
 285 02c4 C0F20003 		movt	r3, #:upper16:right_enc
 286 02c8 C3ED057A 		fsts	s15, [r3, #20]	@ int
  77:../src/interrupt_defs.cpp **** 
  78:../src/interrupt_defs.cpp **** 			if(right_enc.integral * k_i > 100 || right_enc.integral * k_i < -100)
 287              		.loc 1 78 0
 288 02cc 40F20003 		movw	r3, #:lower16:right_enc
 289 02d0 C0F20003 		movt	r3, #:upper16:right_enc
 290 02d4 5B69     		ldr	r3, [r3, #20]
 291 02d6 1846     		mov	r0, r3
 292 02d8 FFF7FEFF 		bl	__aeabi_i2d
 293 02dc 0246     		mov	r2, r0
 294 02de 0B46     		mov	r3, r1
 295 02e0 1046     		mov	r0, r2
 296 02e2 1946     		mov	r1, r3
 297 02e4 54A3     		adr	r3, .L31
 298 02e6 D3E90023 		ldrd	r2, [r3]
 299 02ea FFF7FEFF 		bl	__aeabi_dmul
 300 02ee 0246     		mov	r2, r0
 301 02f0 0B46     		mov	r3, r1
 302 02f2 1046     		mov	r0, r2
 303 02f4 1946     		mov	r1, r3
 304 02f6 4FF00002 		mov	r2, #0
 305 02fa 4FF00003 		mov	r3, #0
 306 02fe C4F25903 		movt	r3, 16473
 307 0302 FFF7FEFF 		bl	__aeabi_dcmpgt
 308 0306 0346     		mov	r3, r0
 309 0308 002B     		cmp	r3, #0
 310 030a 1FD1     		bne	.L11
 311              		.loc 1 78 0 is_stmt 0 discriminator 1
 312 030c 40F20003 		movw	r3, #:lower16:right_enc
 313 0310 C0F20003 		movt	r3, #:upper16:right_enc
 314 0314 5B69     		ldr	r3, [r3, #20]
 315 0316 1846     		mov	r0, r3
 316 0318 FFF7FEFF 		bl	__aeabi_i2d
 317 031c 0246     		mov	r2, r0
 318 031e 0B46     		mov	r3, r1
 319 0320 1046     		mov	r0, r2
 320 0322 1946     		mov	r1, r3
 321 0324 44A3     		adr	r3, .L31
 322 0326 D3E90023 		ldrd	r2, [r3]
 323 032a FFF7FEFF 		bl	__aeabi_dmul
 324 032e 0246     		mov	r2, r0
 325 0330 0B46     		mov	r3, r1
 326 0332 1046     		mov	r0, r2
 327 0334 1946     		mov	r1, r3
 328 0336 4FF00002 		mov	r2, #0
 329 033a 4FF00003 		mov	r3, #0
 330 033e CCF25903 		movt	r3, 49241
 331 0342 FFF7FEFF 		bl	__aeabi_dcmplt
 332 0346 0346     		mov	r3, r0
 333 0348 002B     		cmp	r3, #0
 334 034a 06D0     		beq	.L12
 335              	.L11:
  79:../src/interrupt_defs.cpp **** 			{
  80:../src/interrupt_defs.cpp **** 				right_enc.integral = (float)100/(float)k_i;
 336              		.loc 1 80 0 is_stmt 1
 337 034c 40F20003 		movw	r3, #:lower16:right_enc
 338 0350 C0F20003 		movt	r3, #:upper16:right_enc
 339 0354 40F29A22 		movw	r2, #666
 340 0358 5A61     		str	r2, [r3, #20]
 341              	.L12:
  81:../src/interrupt_defs.cpp **** 			}
  82:../src/interrupt_defs.cpp **** 
  83:../src/interrupt_defs.cpp **** 			right_out = ((float)k_p * (float)error)
  84:../src/interrupt_defs.cpp **** 					+ ((float)k_i*(float)(right_enc.integral))
  85:../src/interrupt_defs.cpp **** 					+ ((float)k_d*(float)(error - right_enc.last_error)/(float)(DT_ENCODER/(float)1000));
 342              		.loc 1 85 0
 343 035a D7ED167A 		flds	s15, [r7, #88]	@ int
 344 035e F8EEE77A 		fsitos	s15, s15
 345 0362 37EEA77A 		fadds	s14, s15, s15
 346 0366 40F20003 		movw	r3, #:lower16:right_enc
 347 036a C0F20003 		movt	r3, #:upper16:right_enc
 348 036e D3ED057A 		flds	s15, [r3, #20]	@ int
 349 0372 F8EEE76A 		fsitos	s13, s15
 350 0376 DFED337A 		flds	s15, .L31+12
 351 037a 66EEA77A 		fmuls	s15, s13, s15
 352 037e 37EE277A 		fadds	s14, s14, s15
 353 0382 40F20003 		movw	r3, #:lower16:right_enc
 354 0386 C0F20003 		movt	r3, #:upper16:right_enc
 355 038a 9B69     		ldr	r3, [r3, #24]
 356 038c BA6D     		ldr	r2, [r7, #88]
 357 038e D31A     		subs	r3, r2, r3
 358 0390 07EE903A 		fmsr	s15, r3	@ int
 359 0394 F8EEE76A 		fsitos	s13, s15
 360 0398 DFED2B7A 		flds	s15, .L31+16
 361 039c 66EEA76A 		fmuls	s13, s13, s15
 362 03a0 DFED2C7A 		flds	s15, .L31+28
 363 03a4 C6EEA77A 		fdivs	s15, s13, s15
 364 03a8 77EE277A 		fadds	s15, s14, s15
 365 03ac C7ED157A 		fsts	s15, [r7, #84]
  86:../src/interrupt_defs.cpp **** 			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 366              		.loc 1 86 0
 367 03b0 97ED157A 		flds	s14, [r7, #84]
 368 03b4 DFED257A 		flds	s15, .L31+20
 369 03b8 B4EEE77A 		fcmpes	s14, s15
 370 03bc F1EE10FA 		fmstat
 371 03c0 04DD     		ble	.L29
 372              	.L25:
 373              		.loc 1 86 0 is_stmt 0 discriminator 1
 374 03c2 4FF00003 		mov	r3, #0
 375 03c6 C4F2C823 		movt	r3, 17096
 376 03ca 0EE0     		b	.L16
 377              	.L29:
 378              		.loc 1 86 0 discriminator 2
 379 03cc 97ED157A 		flds	s14, [r7, #84]
 380 03d0 DFED1F7A 		flds	s15, .L31+24
 381 03d4 B4EEE77A 		fcmpes	s14, s15
 382 03d8 F1EE10FA 		fmstat
 383 03dc 04D5     		bpl	.L30
 384              	.L26:
 385              		.loc 1 86 0 discriminator 3
 386 03de 4FF00003 		mov	r3, #0
 387 03e2 CCF2C823 		movt	r3, 49864
 388 03e6 00E0     		b	.L19
 389              	.L30:
 390              		.loc 1 86 0 discriminator 4
 391 03e8 7B6D     		ldr	r3, [r7, #84]	@ float
 392              	.L19:
 393              	.L16:
 394              		.loc 1 86 0 discriminator 6
 395 03ea 7B65     		str	r3, [r7, #84]	@ float
  87:../src/interrupt_defs.cpp **** 			right_enc.last_error = error;
 396              		.loc 1 87 0 is_stmt 1 discriminator 6
 397 03ec 40F20003 		movw	r3, #:lower16:right_enc
 398 03f0 C0F20003 		movt	r3, #:upper16:right_enc
 399 03f4 BA6D     		ldr	r2, [r7, #88]
 400 03f6 9A61     		str	r2, [r3, #24]
  88:../src/interrupt_defs.cpp **** 
  89:../src/interrupt_defs.cpp **** 			abs_err = (error > 0) ? error : (error*-1);
 401              		.loc 1 89 0 discriminator 6
 402 03f8 BB6D     		ldr	r3, [r7, #88]
 403 03fa 002B     		cmp	r3, #0
 404 03fc B8BF     		it	lt
 405 03fe 5B42     		rsblt	r3, r3, #0
 406 0400 3B65     		str	r3, [r7, #80]
  90:../src/interrupt_defs.cpp **** 
  91:../src/interrupt_defs.cpp **** 			if(error > 10 || error < -10)
 407              		.loc 1 91 0 discriminator 6
 408 0402 BB6D     		ldr	r3, [r7, #88]
 409 0404 0A2B     		cmp	r3, #10
 410 0406 03DC     		bgt	.L20
 411              		.loc 1 91 0 is_stmt 0 discriminator 1
 412 0408 BB6D     		ldr	r3, [r7, #88]
 413 040a 13F10A0F 		cmn	r3, #10
 414 040e 25DA     		bge	.L21
 415              	.L20:
  92:../src/interrupt_defs.cpp **** 			{
  93:../src/interrupt_defs.cpp **** 				pwm1_output((((float)(right_out+100)/(float)2))*(float)0.01);
 416              		.loc 1 93 0 is_stmt 1
 417 0410 97ED157A 		flds	s14, [r7, #84]
 418 0414 DFED0D7A 		flds	s15, .L31+20
 419 0418 37EE277A 		fadds	s14, s14, s15
 420 041c F0EE007A 		fconsts	s15, #0
 421 0420 87EE277A 		fdivs	s14, s14, s15
 422 0424 DFED0C7A 		flds	s15, .L31+32
 423 0428 67EE277A 		fmuls	s15, s14, s15
 424 042c 17EE900A 		fmrs	r0, s15
 425 0430 FFF7FEFF 		bl	_Z11pwm1_outputf
 426 0434 1EE0     		b	.L1
 427              	.L32:
 428 0436 00BF     		.align	3
 429              	.L31:
 430 0438 33333333 		.word	858993459
 431 043c 3333C33F 		.word	1069757235
 432 0440 00007A44 		.word	1148846080
 433 0444 9A99193E 		.word	1041865114
 434 0448 8FC2353F 		.word	1060487823
 435 044c 0000C842 		.word	1120403456
 436 0450 0000C8C2 		.word	-1027080192
 437 0454 CDCCCC3C 		.word	1020054733
 438 0458 0AD7233C 		.word	1008981770
 439              	.L21:
  94:../src/interrupt_defs.cpp **** 			}
  95:../src/interrupt_defs.cpp **** 			else
  96:../src/interrupt_defs.cpp **** 			{
  97:../src/interrupt_defs.cpp **** 				pwm1_output(0.50f);
 440              		.loc 1 97 0
 441 045c 4FF07C50 		mov	r0, #1056964608
 442 0460 FFF7FEFF 		bl	_Z11pwm1_outputf
  98:../src/interrupt_defs.cpp **** 				right_enc.m = MODE_OPENLOOP;
 443              		.loc 1 98 0
 444 0464 40F20003 		movw	r3, #:lower16:right_enc
 445 0468 C0F20003 		movt	r3, #:upper16:right_enc
 446 046c 4FF00002 		mov	r2, #0
 447 0470 83F82420 		strb	r2, [r3, #36]
 448              	.L1:
 449              	.LBE2:
  99:../src/interrupt_defs.cpp **** 			}
 100:../src/interrupt_defs.cpp **** 		}
 101:../src/interrupt_defs.cpp **** 		/*
 102:../src/interrupt_defs.cpp **** 		else if(right_enc.m == MODE_SPEED)
 103:../src/interrupt_defs.cpp **** 		{
 104:../src/interrupt_defs.cpp **** 			error = right_enc.speed - right_enc.speed_target;
 105:../src/interrupt_defs.cpp **** 
 106:../src/interrupt_defs.cpp **** 			right_out = ((float)error * (float)k_p_s);// + ((float)k_d_s * (float)(error - right_enc.last_sp
 107:../src/interrupt_defs.cpp **** //			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 108:../src/interrupt_defs.cpp **** 			right_enc.vel_cmd += right_out;
 109:../src/interrupt_defs.cpp **** 			if(right_enc.vel_cmd > 1)
 110:../src/interrupt_defs.cpp **** 			{
 111:../src/interrupt_defs.cpp **** 				right_enc.vel_cmd = 1;
 112:../src/interrupt_defs.cpp **** 			}
 113:../src/interrupt_defs.cpp **** 
 114:../src/interrupt_defs.cpp **** 			else if(right_enc.vel_cmd < 0)
 115:../src/interrupt_defs.cpp **** 			{
 116:../src/interrupt_defs.cpp **** 				right_enc.vel_cmd = 0;
 117:../src/interrupt_defs.cpp **** 			}
 118:../src/interrupt_defs.cpp **** 
 119:../src/interrupt_defs.cpp **** //			pwm1_output((float)1.0-right_enc.vel_cmd);
 120:../src/interrupt_defs.cpp **** 			pwm1_output(0.50f);
 121:../src/interrupt_defs.cpp **** 
 122:../src/interrupt_defs.cpp **** 			right_enc.last_speed_error = error;
 123:../src/interrupt_defs.cpp **** 		}
 124:../src/interrupt_defs.cpp **** 		*/
 125:../src/interrupt_defs.cpp **** 	}
 450              		.loc 1 125 0
 451 0474 07F16407 		add	r7, r7, #100
 452 0478 BD46     		mov	sp, r7
 453 047a 90BD     		pop	{r4, r7, pc}
 454              		.cfi_endproc
 455              	.LFE111:
 457              		.align	2
 458              		.global	TIM1_TRG_COM_TIM17_IRQHandler
 459              		.thumb
 460              		.thumb_func
 462              	TIM1_TRG_COM_TIM17_IRQHandler:
 463              	.LFB112:
 126:../src/interrupt_defs.cpp **** 
 127:../src/interrupt_defs.cpp **** 	void TIM1_TRG_COM_TIM17_IRQHandler(void)
 128:../src/interrupt_defs.cpp **** 	{
 464              		.loc 1 128 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 24
 467              		@ frame_needed = 1, uses_anonymous_args = 0
 468 047c 80B5     		push	{r7, lr}
 469              	.LCFI3:
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 7, -8
 472              		.cfi_offset 14, -4
 473 047e 86B0     		sub	sp, sp, #24
 474              	.LCFI4:
 475              		.cfi_def_cfa_offset 32
 476 0480 00AF     		add	r7, sp, #0
 477              	.LCFI5:
 478              		.cfi_def_cfa_register 7
 479              	.LBB3:
 129:../src/interrupt_defs.cpp **** 
 130:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM17, TIM_IT_Update);
 480              		.loc 1 130 0
 481 0482 4FF49040 		mov	r0, #18432
 482 0486 C4F20100 		movt	r0, 16385
 483 048a 4FF00101 		mov	r1, #1
 484 048e FFF7FEFF 		bl	TIM_ClearITPendingBit
 131:../src/interrupt_defs.cpp **** 		/*
 132:../src/interrupt_defs.cpp **** 		uint8_t bytes[2];
 133:../src/interrupt_defs.cpp **** 
 134:../src/interrupt_defs.cpp **** 		union twosComp {		// Takes care of two's complement conversion
 135:../src/interrupt_defs.cpp **** 			uint16_t un_signed;
 136:../src/interrupt_defs.cpp **** 			int16_t output;
 137:../src/interrupt_defs.cpp **** 		} convert;
 138:../src/interrupt_defs.cpp **** 
 139:../src/interrupt_defs.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 140:../src/interrupt_defs.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 141:../src/interrupt_defs.cpp **** 
 142:../src/interrupt_defs.cpp **** 		gyro_angle_x += (convert.output - gyro_bias_x) * (float)0.00763 * (float)0.001 * (float)DT_IMU;
 143:../src/interrupt_defs.cpp **** 
 144:../src/interrupt_defs.cpp **** 		*/
 145:../src/interrupt_defs.cpp **** 		/*
 146:../src/interrupt_defs.cpp **** 		 * Below: code required to trigger the ping sensor:
 147:../src/interrupt_defs.cpp **** 		 */
 148:../src/interrupt_defs.cpp **** 
 149:../src/interrupt_defs.cpp **** 		EXTI_InitTypeDef e;
 150:../src/interrupt_defs.cpp **** 
 151:../src/interrupt_defs.cpp **** 		e.EXTI_Line = EXTI_Line5;
 485              		.loc 1 151 0
 486 0492 4FF00503 		mov	r3, #5
 487 0496 FB60     		str	r3, [r7, #12]
 152:../src/interrupt_defs.cpp **** 		e.EXTI_LineCmd = DISABLE;
 488              		.loc 1 152 0
 489 0498 4FF00003 		mov	r3, #0
 490 049c BB74     		strb	r3, [r7, #18]
 153:../src/interrupt_defs.cpp **** 		e.EXTI_Mode = EXTI_Mode_Interrupt;
 491              		.loc 1 153 0
 492 049e 4FF00003 		mov	r3, #0
 493 04a2 3B74     		strb	r3, [r7, #16]
 154:../src/interrupt_defs.cpp **** 		e.EXTI_Trigger = EXTI_Trigger_Rising;
 494              		.loc 1 154 0
 495 04a4 4FF00803 		mov	r3, #8
 496 04a8 7B74     		strb	r3, [r7, #17]
 155:../src/interrupt_defs.cpp **** 
 156:../src/interrupt_defs.cpp **** 		EXTI_Init(&e);
 497              		.loc 1 156 0
 498 04aa 07F10C03 		add	r3, r7, #12
 499 04ae 1846     		mov	r0, r3
 500 04b0 FFF7FEFF 		bl	EXTI_Init
 157:../src/interrupt_defs.cpp **** 
 158:../src/interrupt_defs.cpp **** 		GPIO_InitTypeDef g;
 159:../src/interrupt_defs.cpp **** 		g.GPIO_Mode = GPIO_Mode_OUT;
 501              		.loc 1 159 0
 502 04b4 4FF00103 		mov	r3, #1
 503 04b8 3B72     		strb	r3, [r7, #8]
 160:../src/interrupt_defs.cpp **** 		g.GPIO_OType = GPIO_OType_PP;
 504              		.loc 1 160 0
 505 04ba 4FF00003 		mov	r3, #0
 506 04be BB72     		strb	r3, [r7, #10]
 161:../src/interrupt_defs.cpp **** 		g.GPIO_Pin = GPIO_Pin_0;
 507              		.loc 1 161 0
 508 04c0 4FF00103 		mov	r3, #1
 509 04c4 7B60     		str	r3, [r7, #4]
 162:../src/interrupt_defs.cpp **** 		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 510              		.loc 1 162 0
 511 04c6 4FF00003 		mov	r3, #0
 512 04ca FB72     		strb	r3, [r7, #11]
 163:../src/interrupt_defs.cpp **** 		g.GPIO_Speed = GPIO_Speed_Level_1;
 513              		.loc 1 163 0
 514 04cc 4FF00103 		mov	r3, #1
 515 04d0 7B72     		strb	r3, [r7, #9]
 164:../src/interrupt_defs.cpp **** 
 165:../src/interrupt_defs.cpp **** 		GPIO_Init(GPIOB, &g);
 516              		.loc 1 165 0
 517 04d2 07F10403 		add	r3, r7, #4
 518 04d6 4FF48060 		mov	r0, #1024
 519 04da C4F60000 		movt	r0, 18432
 520 04de 1946     		mov	r1, r3
 521 04e0 FFF7FEFF 		bl	GPIO_Init
 166:../src/interrupt_defs.cpp **** 		int iter = 0;
 522              		.loc 1 166 0
 523 04e4 4FF00003 		mov	r3, #0
 524 04e8 7B61     		str	r3, [r7, #20]
 167:../src/interrupt_defs.cpp **** 
 168:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 525              		.loc 1 168 0
 526 04ea 4FF00003 		mov	r3, #0
 527 04ee 7B61     		str	r3, [r7, #20]
 528 04f0 0DE0     		b	.L34
 529              	.L35:
 169:../src/interrupt_defs.cpp **** 		{
 170:../src/interrupt_defs.cpp **** 			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
 530              		.loc 1 170 0 discriminator 2
 531 04f2 4FF48060 		mov	r0, #1024
 532 04f6 C4F60000 		movt	r0, 18432
 533 04fa 4FF00101 		mov	r1, #1
 534 04fe 4FF00102 		mov	r2, #1
 535 0502 FFF7FEFF 		bl	GPIO_WriteBit
 168:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 536              		.loc 1 168 0 discriminator 2
 537 0506 7B69     		ldr	r3, [r7, #20]
 538 0508 03F10103 		add	r3, r3, #1
 539 050c 7B61     		str	r3, [r7, #20]
 540              	.L34:
 168:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 541              		.loc 1 168 0 is_stmt 0 discriminator 1
 542 050e 7B69     		ldr	r3, [r7, #20]
 543 0510 092B     		cmp	r3, #9
 544 0512 CCBF     		ite	gt
 545 0514 0023     		movgt	r3, #0
 546 0516 0123     		movle	r3, #1
 547 0518 DBB2     		uxtb	r3, r3
 548 051a 002B     		cmp	r3, #0
 549 051c E9D1     		bne	.L35
 171:../src/interrupt_defs.cpp **** 		}
 172:../src/interrupt_defs.cpp **** 
 173:../src/interrupt_defs.cpp **** 		GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_RESET);
 550              		.loc 1 173 0 is_stmt 1
 551 051e 4FF48060 		mov	r0, #1024
 552 0522 C4F60000 		movt	r0, 18432
 553 0526 4FF00101 		mov	r1, #1
 554 052a 4FF00002 		mov	r2, #0
 555 052e FFF7FEFF 		bl	GPIO_WriteBit
 174:../src/interrupt_defs.cpp **** 
 175:../src/interrupt_defs.cpp **** 
 176:../src/interrupt_defs.cpp **** 		g.GPIO_Mode = GPIO_Mode_IN;
 556              		.loc 1 176 0
 557 0532 4FF00003 		mov	r3, #0
 558 0536 3B72     		strb	r3, [r7, #8]
 177:../src/interrupt_defs.cpp **** 		g.GPIO_OType = GPIO_OType_OD;
 559              		.loc 1 177 0
 560 0538 4FF00103 		mov	r3, #1
 561 053c BB72     		strb	r3, [r7, #10]
 178:../src/interrupt_defs.cpp **** 		g.GPIO_Pin = GPIO_Pin_0;
 562              		.loc 1 178 0
 563 053e 4FF00103 		mov	r3, #1
 564 0542 7B60     		str	r3, [r7, #4]
 179:../src/interrupt_defs.cpp **** 		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 565              		.loc 1 179 0
 566 0544 4FF00003 		mov	r3, #0
 567 0548 FB72     		strb	r3, [r7, #11]
 180:../src/interrupt_defs.cpp **** 		g.GPIO_Speed = GPIO_Speed_Level_1;
 568              		.loc 1 180 0
 569 054a 4FF00103 		mov	r3, #1
 570 054e 7B72     		strb	r3, [r7, #9]
 181:../src/interrupt_defs.cpp **** 
 182:../src/interrupt_defs.cpp **** 		GPIO_Init(GPIOB, &g);
 571              		.loc 1 182 0
 572 0550 07F10403 		add	r3, r7, #4
 573 0554 4FF48060 		mov	r0, #1024
 574 0558 C4F60000 		movt	r0, 18432
 575 055c 1946     		mov	r1, r3
 576 055e FFF7FEFF 		bl	GPIO_Init
 183:../src/interrupt_defs.cpp **** 
 184:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM2, 0);
 577              		.loc 1 184 0
 578 0562 4FF08040 		mov	r0, #1073741824
 579 0566 4FF00001 		mov	r1, #0
 580 056a FFF7FEFF 		bl	TIM_SetCounter
 185:../src/interrupt_defs.cpp **** 
 186:../src/interrupt_defs.cpp **** 		stage = 0;
 581              		.loc 1 186 0
 582 056e 40F20003 		movw	r3, #:lower16:stage
 583 0572 C0F20003 		movt	r3, #:upper16:stage
 584 0576 4FF00002 		mov	r2, #0
 585 057a 1A60     		str	r2, [r3, #0]
 187:../src/interrupt_defs.cpp **** 
 188:../src/interrupt_defs.cpp **** 		e.EXTI_Line = EXTI_Line5;
 586              		.loc 1 188 0
 587 057c 4FF00503 		mov	r3, #5
 588 0580 FB60     		str	r3, [r7, #12]
 189:../src/interrupt_defs.cpp **** 		e.EXTI_LineCmd = ENABLE;
 589              		.loc 1 189 0
 590 0582 4FF00103 		mov	r3, #1
 591 0586 BB74     		strb	r3, [r7, #18]
 190:../src/interrupt_defs.cpp **** 		e.EXTI_Mode = EXTI_Mode_Interrupt;
 592              		.loc 1 190 0
 593 0588 4FF00003 		mov	r3, #0
 594 058c 3B74     		strb	r3, [r7, #16]
 191:../src/interrupt_defs.cpp **** 		e.EXTI_Trigger = EXTI_Trigger_Rising;
 595              		.loc 1 191 0
 596 058e 4FF00803 		mov	r3, #8
 597 0592 7B74     		strb	r3, [r7, #17]
 192:../src/interrupt_defs.cpp **** 
 193:../src/interrupt_defs.cpp **** 		EXTI_Init(&e);
 598              		.loc 1 193 0
 599 0594 07F10C03 		add	r3, r7, #12
 600 0598 1846     		mov	r0, r3
 601 059a FFF7FEFF 		bl	EXTI_Init
 194:../src/interrupt_defs.cpp **** 
 195:../src/interrupt_defs.cpp **** 		NVIC_InitTypeDef nv;
 196:../src/interrupt_defs.cpp **** 
 197:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannel = EXTI9_5_IRQn;
 602              		.loc 1 197 0
 603 059e 4FF01703 		mov	r3, #23
 604 05a2 3B70     		strb	r3, [r7, #0]
 198:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelCmd = ENABLE;
 605              		.loc 1 198 0
 606 05a4 4FF00103 		mov	r3, #1
 607 05a8 FB70     		strb	r3, [r7, #3]
 199:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelPreemptionPriority = 0;
 608              		.loc 1 199 0
 609 05aa 4FF00003 		mov	r3, #0
 610 05ae 7B70     		strb	r3, [r7, #1]
 200:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelSubPriority = 0;
 611              		.loc 1 200 0
 612 05b0 4FF00003 		mov	r3, #0
 613 05b4 BB70     		strb	r3, [r7, #2]
 201:../src/interrupt_defs.cpp **** 
 202:../src/interrupt_defs.cpp **** 		NVIC_Init(&nv);
 614              		.loc 1 202 0
 615 05b6 3B46     		mov	r3, r7
 616 05b8 1846     		mov	r0, r3
 617 05ba FFF7FEFF 		bl	NVIC_Init
 618              	.LBE3:
 203:../src/interrupt_defs.cpp **** 
 204:../src/interrupt_defs.cpp **** 	}
 619              		.loc 1 204 0
 620 05be 07F11807 		add	r7, r7, #24
 621 05c2 BD46     		mov	sp, r7
 622 05c4 80BD     		pop	{r7, pc}
 623              		.cfi_endproc
 624              	.LFE112:
 626 05c6 00BF     		.align	2
 627              		.global	TIM6_DAC_IRQHandler
 628              		.thumb
 629              		.thumb_func
 631              	TIM6_DAC_IRQHandler:
 632              	.LFB113:
 205:../src/interrupt_defs.cpp **** 	void TIM6_DAC_IRQHandler(void)
 206:../src/interrupt_defs.cpp **** 	{
 633              		.loc 1 206 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 0
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637 05c8 80B5     		push	{r7, lr}
 638              	.LCFI6:
 639              		.cfi_def_cfa_offset 8
 640              		.cfi_offset 7, -8
 641              		.cfi_offset 14, -4
 642 05ca 00AF     		add	r7, sp, #0
 643              	.LCFI7:
 644              		.cfi_def_cfa_register 7
 207:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 645              		.loc 1 207 0
 646 05cc 4FF48050 		mov	r0, #4096
 647 05d0 C4F20000 		movt	r0, 16384
 648 05d4 4FF00101 		mov	r1, #1
 649 05d8 FFF7FEFF 		bl	TIM_ClearITPendingBit
 208:../src/interrupt_defs.cpp **** 		GPIO_Write(GPIOE, led_matrix[led_iter] | led_matrix[7-led_iter]);
 650              		.loc 1 208 0
 651 05dc 40F20003 		movw	r3, #:lower16:led_iter
 652 05e0 C0F20003 		movt	r3, #:upper16:led_iter
 653 05e4 1A68     		ldr	r2, [r3, #0]
 654 05e6 40F20003 		movw	r3, #:lower16:led_matrix
 655 05ea C0F20003 		movt	r3, #:upper16:led_matrix
 656 05ee 53F82230 		ldr	r3, [r3, r2, lsl #2]
 657 05f2 9AB2     		uxth	r2, r3
 658 05f4 40F20003 		movw	r3, #:lower16:led_iter
 659 05f8 C0F20003 		movt	r3, #:upper16:led_iter
 660 05fc 1B68     		ldr	r3, [r3, #0]
 661 05fe C3F10701 		rsb	r1, r3, #7
 662 0602 40F20003 		movw	r3, #:lower16:led_matrix
 663 0606 C0F20003 		movt	r3, #:upper16:led_matrix
 664 060a 53F82130 		ldr	r3, [r3, r1, lsl #2]
 665 060e 9BB2     		uxth	r3, r3
 666 0610 1343     		orrs	r3, r3, r2
 667 0612 9BB2     		uxth	r3, r3
 668 0614 9BB2     		uxth	r3, r3
 669 0616 4FF48050 		mov	r0, #4096
 670 061a C4F60000 		movt	r0, 18432
 671 061e 1946     		mov	r1, r3
 672 0620 FFF7FEFF 		bl	GPIO_Write
 209:../src/interrupt_defs.cpp **** 		++led_iter;
 673              		.loc 1 209 0
 674 0624 40F20003 		movw	r3, #:lower16:led_iter
 675 0628 C0F20003 		movt	r3, #:upper16:led_iter
 676 062c 1B68     		ldr	r3, [r3, #0]
 677 062e 03F10102 		add	r2, r3, #1
 678 0632 40F20003 		movw	r3, #:lower16:led_iter
 679 0636 C0F20003 		movt	r3, #:upper16:led_iter
 680 063a 1A60     		str	r2, [r3, #0]
 210:../src/interrupt_defs.cpp **** 		if(led_iter > 7)
 681              		.loc 1 210 0
 682 063c 40F20003 		movw	r3, #:lower16:led_iter
 683 0640 C0F20003 		movt	r3, #:upper16:led_iter
 684 0644 1B68     		ldr	r3, [r3, #0]
 685 0646 072B     		cmp	r3, #7
 686 0648 D4BF     		ite	le
 687 064a 0023     		movle	r3, #0
 688 064c 0123     		movgt	r3, #1
 689 064e DBB2     		uxtb	r3, r3
 690 0650 002B     		cmp	r3, #0
 691 0652 06D0     		beq	.L36
 211:../src/interrupt_defs.cpp **** 		{
 212:../src/interrupt_defs.cpp **** 			led_iter = 0;
 692              		.loc 1 212 0
 693 0654 40F20003 		movw	r3, #:lower16:led_iter
 694 0658 C0F20003 		movt	r3, #:upper16:led_iter
 695 065c 4FF00002 		mov	r2, #0
 696 0660 1A60     		str	r2, [r3, #0]
 697              	.L36:
 213:../src/interrupt_defs.cpp **** 		}
 214:../src/interrupt_defs.cpp **** 	}
 698              		.loc 1 214 0
 699 0662 80BD     		pop	{r7, pc}
 700              		.cfi_endproc
 701              	.LFE113:
 703              		.align	2
 704              		.global	ADC1_2_IRQHandler
 705              		.thumb
 706              		.thumb_func
 708              	ADC1_2_IRQHandler:
 709              	.LFB114:
 215:../src/interrupt_defs.cpp **** 	void ADC1_2_IRQHandler(void)
 216:../src/interrupt_defs.cpp **** 	{
 710              		.loc 1 216 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714 0664 80B5     		push	{r7, lr}
 715              	.LCFI8:
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0666 00AF     		add	r7, sp, #0
 720              	.LCFI9:
 721              		.cfi_def_cfa_register 7
 217:../src/interrupt_defs.cpp **** 		if(ADC_GetITStatus(ADC1, ADC_IT_EOC) == SET)
 722              		.loc 1 217 0
 723 0668 4FF0A040 		mov	r0, #1342177280
 724 066c 4FF00401 		mov	r1, #4
 725 0670 FFF7FEFF 		bl	ADC_GetITStatus
 726 0674 0346     		mov	r3, r0
 727 0676 012B     		cmp	r3, #1
 728 0678 14BF     		ite	ne
 729 067a 0023     		movne	r3, #0
 730 067c 0123     		moveq	r3, #1
 731 067e DBB2     		uxtb	r3, r3
 732 0680 002B     		cmp	r3, #0
 733 0682 10D0     		beq	.L38
 218:../src/interrupt_defs.cpp **** 		{
 219:../src/interrupt_defs.cpp **** 			adcval = ADC_GetConversionValue(ADC1);
 734              		.loc 1 219 0
 735 0684 4FF0A040 		mov	r0, #1342177280
 736 0688 FFF7FEFF 		bl	ADC_GetConversionValue
 737 068c 0346     		mov	r3, r0
 738 068e 1A46     		mov	r2, r3
 739 0690 40F20003 		movw	r3, #:lower16:adcval
 740 0694 C0F20003 		movt	r3, #:upper16:adcval
 741 0698 1A60     		str	r2, [r3, #0]
 220:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 742              		.loc 1 220 0
 743 069a 4FF0A040 		mov	r0, #1342177280
 744 069e 4FF00401 		mov	r1, #4
 745 06a2 FFF7FEFF 		bl	ADC_ClearITPendingBit
 746              	.L38:
 221:../src/interrupt_defs.cpp **** 		}
 222:../src/interrupt_defs.cpp **** 	}
 747              		.loc 1 222 0
 748 06a6 80BD     		pop	{r7, pc}
 749              		.cfi_endproc
 750              	.LFE114:
 752              		.align	2
 753              		.global	DMA1_Channel1_IRQHandler
 754              		.thumb
 755              		.thumb_func
 757              	DMA1_Channel1_IRQHandler:
 758              	.LFB115:
 223:../src/interrupt_defs.cpp **** 
 224:../src/interrupt_defs.cpp **** 	void DMA1_Channel1_IRQHandler(void)
 225:../src/interrupt_defs.cpp **** 	{
 759              		.loc 1 225 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 1, uses_anonymous_args = 0
 763 06a8 80B5     		push	{r7, lr}
 764              	.LCFI10:
 765              		.cfi_def_cfa_offset 8
 766              		.cfi_offset 7, -8
 767              		.cfi_offset 14, -4
 768 06aa 00AF     		add	r7, sp, #0
 769              	.LCFI11:
 770              		.cfi_def_cfa_register 7
 226:../src/interrupt_defs.cpp **** 		DMA_ClearITPendingBit(DMA1_IT_TC1);
 771              		.loc 1 226 0
 772 06ac 4FF00200 		mov	r0, #2
 773 06b0 FFF7FEFF 		bl	DMA_ClearITPendingBit
 227:../src/interrupt_defs.cpp **** 		new_data = 1;
 774              		.loc 1 227 0
 775 06b4 40F20003 		movw	r3, #:lower16:new_data
 776 06b8 C0F20003 		movt	r3, #:upper16:new_data
 777 06bc 4FF00102 		mov	r2, #1
 778 06c0 1A60     		str	r2, [r3, #0]
 228:../src/interrupt_defs.cpp **** 	}
 779              		.loc 1 228 0
 780 06c2 80BD     		pop	{r7, pc}
 781              		.cfi_endproc
 782              	.LFE115:
 784              		.align	2
 785              		.global	DMA2_Channel1_IRQHandler
 786              		.thumb
 787              		.thumb_func
 789              	DMA2_Channel1_IRQHandler:
 790              	.LFB116:
 229:../src/interrupt_defs.cpp **** 
 230:../src/interrupt_defs.cpp **** 	void DMA2_Channel1_IRQHandler(void)
 231:../src/interrupt_defs.cpp **** 	{
 791              		.loc 1 231 0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 1, uses_anonymous_args = 0
 795 06c4 80B5     		push	{r7, lr}
 796              	.LCFI12:
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 800 06c6 00AF     		add	r7, sp, #0
 801              	.LCFI13:
 802              		.cfi_def_cfa_register 7
 232:../src/interrupt_defs.cpp **** 		DMA_ClearITPendingBit(DMA2_IT_TC1);
 803              		.loc 1 232 0
 804 06c8 4FF00200 		mov	r0, #2
 805 06cc C1F20000 		movt	r0, 4096
 806 06d0 FFF7FEFF 		bl	DMA_ClearITPendingBit
 233:../src/interrupt_defs.cpp **** 		adc2_new_data = 1;
 807              		.loc 1 233 0
 808 06d4 40F20003 		movw	r3, #:lower16:adc2_new_data
 809 06d8 C0F20003 		movt	r3, #:upper16:adc2_new_data
 810 06dc 4FF00102 		mov	r2, #1
 811 06e0 1A70     		strb	r2, [r3, #0]
 234:../src/interrupt_defs.cpp **** 	}
 812              		.loc 1 234 0
 813 06e2 80BD     		pop	{r7, pc}
 814              		.cfi_endproc
 815              	.LFE116:
 817              		.align	2
 818              		.global	ADC3_IRQHandler
 819              		.thumb
 820              		.thumb_func
 822              	ADC3_IRQHandler:
 823              	.LFB117:
 235:../src/interrupt_defs.cpp **** 
 236:../src/interrupt_defs.cpp **** 	void ADC3_IRQHandler(void)
 237:../src/interrupt_defs.cpp **** 	{
 824              		.loc 1 237 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 8
 827              		@ frame_needed = 1, uses_anonymous_args = 0
 828 06e4 80B5     		push	{r7, lr}
 829              	.LCFI14:
 830              		.cfi_def_cfa_offset 8
 831              		.cfi_offset 7, -8
 832              		.cfi_offset 14, -4
 833 06e6 82B0     		sub	sp, sp, #8
 834              	.LCFI15:
 835              		.cfi_def_cfa_offset 16
 836 06e8 00AF     		add	r7, sp, #0
 837              	.LCFI16:
 838              		.cfi_def_cfa_register 7
 839              	.LBB4:
 238:../src/interrupt_defs.cpp **** 		int i = 0;
 840              		.loc 1 238 0
 841 06ea 4FF00003 		mov	r3, #0
 842 06ee 7B60     		str	r3, [r7, #4]
 239:../src/interrupt_defs.cpp **** 		int sum = 0;
 843              		.loc 1 239 0
 844 06f0 4FF00003 		mov	r3, #0
 845 06f4 3B60     		str	r3, [r7, #0]
 240:../src/interrupt_defs.cpp **** 		if(ADC_GetITStatus(ADC3, ADC_IT_AWD1) != RESET)
 846              		.loc 1 240 0
 847 06f6 4FF48060 		mov	r0, #1024
 848 06fa C5F20000 		movt	r0, 20480
 849 06fe 4FF08001 		mov	r1, #128
 850 0702 FFF7FEFF 		bl	ADC_GetITStatus
 851 0706 0346     		mov	r3, r0
 852 0708 002B     		cmp	r3, #0
 853 070a 0CBF     		ite	eq
 854 070c 0023     		moveq	r3, #0
 855 070e 0123     		movne	r3, #1
 856 0710 DBB2     		uxtb	r3, r3
 857 0712 002B     		cmp	r3, #0
 858 0714 38D0     		beq	.L43
 241:../src/interrupt_defs.cpp **** 		{
 242:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD1);
 859              		.loc 1 242 0
 860 0716 4FF48060 		mov	r0, #1024
 861 071a C5F20000 		movt	r0, 20480
 862 071e 4FF08001 		mov	r1, #128
 863 0722 FFF7FEFF 		bl	ADC_ClearITPendingBit
 243:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 864              		.loc 1 243 0
 865 0726 4FF00003 		mov	r3, #0
 866 072a 7B60     		str	r3, [r7, #4]
 867 072c 0DE0     		b	.L44
 868              	.L45:
 244:../src/interrupt_defs.cpp **** 			{
 245:../src/interrupt_defs.cpp **** 				sum += ADC_GetConversionValue(ADC3);
 869              		.loc 1 245 0 discriminator 2
 870 072e 4FF48060 		mov	r0, #1024
 871 0732 C5F20000 		movt	r0, 20480
 872 0736 FFF7FEFF 		bl	ADC_GetConversionValue
 873 073a 0346     		mov	r3, r0
 874 073c 3A68     		ldr	r2, [r7, #0]
 875 073e D318     		adds	r3, r2, r3
 876 0740 3B60     		str	r3, [r7, #0]
 243:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 877              		.loc 1 243 0 discriminator 2
 878 0742 7B68     		ldr	r3, [r7, #4]
 879 0744 03F10103 		add	r3, r3, #1
 880 0748 7B60     		str	r3, [r7, #4]
 881              	.L44:
 243:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 882              		.loc 1 243 0 is_stmt 0 discriminator 1
 883 074a 7B68     		ldr	r3, [r7, #4]
 884 074c 222B     		cmp	r3, #34
 885 074e CCBF     		ite	gt
 886 0750 0023     		movgt	r3, #0
 887 0752 0123     		movle	r3, #1
 888 0754 DBB2     		uxtb	r3, r3
 889 0756 002B     		cmp	r3, #0
 890 0758 E9D1     		bne	.L45
 246:../src/interrupt_defs.cpp **** 			}
 247:../src/interrupt_defs.cpp **** 			if((float)sum/float(35) > 2048)
 891              		.loc 1 247 0 is_stmt 1
 892 075a D7ED007A 		flds	s15, [r7, #0]	@ int
 893 075e B8EEE77A 		fsitos	s14, s15
 894 0762 DFED1B7A 		flds	s15, .L49
 895 0766 87EE277A 		fdivs	s14, s14, s15
 896 076a DFED1A7A 		flds	s15, .L49+4
 897 076e B4EEE77A 		fcmpes	s14, s15
 898 0772 F1EE10FA 		fmstat
 899 0776 26DD     		ble	.L42
 900              	.L48:
 248:../src/interrupt_defs.cpp **** 			{
 249:../src/interrupt_defs.cpp **** 				adc3_awd1 = 1;
 901              		.loc 1 249 0
 902 0778 40F20003 		movw	r3, #:lower16:adc3_awd1
 903 077c C0F20003 		movt	r3, #:upper16:adc3_awd1
 904 0780 4FF00102 		mov	r2, #1
 905 0784 1A70     		strb	r2, [r3, #0]
 906 0786 1EE0     		b	.L42
 907              	.L43:
 250:../src/interrupt_defs.cpp **** 			}
 251:../src/interrupt_defs.cpp **** 		}
 252:../src/interrupt_defs.cpp **** 		else if (ADC_GetITStatus(ADC3, ADC_IT_AWD2) != RESET)
 908              		.loc 1 252 0
 909 0788 4FF48060 		mov	r0, #1024
 910 078c C5F20000 		movt	r0, 20480
 911 0790 4FF48071 		mov	r1, #256
 912 0794 FFF7FEFF 		bl	ADC_GetITStatus
 913 0798 0346     		mov	r3, r0
 914 079a 002B     		cmp	r3, #0
 915 079c 0CBF     		ite	eq
 916 079e 0023     		moveq	r3, #0
 917 07a0 0123     		movne	r3, #1
 918 07a2 DBB2     		uxtb	r3, r3
 919 07a4 002B     		cmp	r3, #0
 920 07a6 0ED0     		beq	.L42
 253:../src/interrupt_defs.cpp **** 		{
 254:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD2);
 921              		.loc 1 254 0
 922 07a8 4FF48060 		mov	r0, #1024
 923 07ac C5F20000 		movt	r0, 20480
 924 07b0 4FF48071 		mov	r1, #256
 925 07b4 FFF7FEFF 		bl	ADC_ClearITPendingBit
 255:../src/interrupt_defs.cpp **** 			adc3_awd2 = 1;
 926              		.loc 1 255 0
 927 07b8 40F20003 		movw	r3, #:lower16:adc3_awd2
 928 07bc C0F20003 		movt	r3, #:upper16:adc3_awd2
 929 07c0 4FF00102 		mov	r2, #1
 930 07c4 1A70     		strb	r2, [r3, #0]
 931              	.L42:
 932              	.LBE4:
 256:../src/interrupt_defs.cpp **** 		}
 257:../src/interrupt_defs.cpp **** 	}
 933              		.loc 1 257 0
 934 07c6 07F10807 		add	r7, r7, #8
 935 07ca BD46     		mov	sp, r7
 936 07cc 80BD     		pop	{r7, pc}
 937              	.L50:
 938 07ce 00BF     		.align	2
 939              	.L49:
 940 07d0 00000C42 		.word	1108082688
 941 07d4 00000045 		.word	1157627904
 942              		.cfi_endproc
 943              	.LFE117:
 945              		.align	2
 946              		.global	EXTI9_5_IRQHandler
 947              		.thumb
 948              		.thumb_func
 950              	EXTI9_5_IRQHandler:
 951              	.LFB118:
 258:../src/interrupt_defs.cpp **** 
 259:../src/interrupt_defs.cpp **** 	void EXTI9_5_IRQHandler(void)//EXTI5_IRQHandler(void)
 260:../src/interrupt_defs.cpp **** 	{
 952              		.loc 1 260 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 16
 955              		@ frame_needed = 1, uses_anonymous_args = 0
 956 07d8 80B5     		push	{r7, lr}
 957              	.LCFI17:
 958              		.cfi_def_cfa_offset 8
 959              		.cfi_offset 7, -8
 960              		.cfi_offset 14, -4
 961 07da 84B0     		sub	sp, sp, #16
 962              	.LCFI18:
 963              		.cfi_def_cfa_offset 24
 964 07dc 00AF     		add	r7, sp, #0
 965              	.LCFI19:
 966              		.cfi_def_cfa_register 7
 967              	.LBB5:
 261:../src/interrupt_defs.cpp **** 		EXTI_ClearITPendingBit(EXTI_Line5);
 968              		.loc 1 261 0
 969 07de 4FF00500 		mov	r0, #5
 970 07e2 FFF7FEFF 		bl	EXTI_ClearITPendingBit
 971              	.LBB6:
 262:../src/interrupt_defs.cpp **** 		if(stage == 0)
 972              		.loc 1 262 0
 973 07e6 40F20003 		movw	r3, #:lower16:stage
 974 07ea C0F20003 		movt	r3, #:upper16:stage
 975 07ee 1B68     		ldr	r3, [r3, #0]
 976 07f0 002B     		cmp	r3, #0
 977 07f2 24D1     		bne	.L52
 978              	.LBB7:
 263:../src/interrupt_defs.cpp **** 		{
 264:../src/interrupt_defs.cpp **** 			TIM_SetCounter(TIM2, 0);
 979              		.loc 1 264 0
 980 07f4 4FF08040 		mov	r0, #1073741824
 981 07f8 4FF00001 		mov	r1, #0
 982 07fc FFF7FEFF 		bl	TIM_SetCounter
 265:../src/interrupt_defs.cpp **** 			TIM_Cmd(TIM2, ENABLE);
 983              		.loc 1 265 0
 984 0800 4FF08040 		mov	r0, #1073741824
 985 0804 4FF00101 		mov	r1, #1
 986 0808 FFF7FEFF 		bl	TIM_Cmd
 266:../src/interrupt_defs.cpp **** 
 267:../src/interrupt_defs.cpp **** 			EXTI_InitTypeDef e;
 268:../src/interrupt_defs.cpp **** 
 269:../src/interrupt_defs.cpp **** 			e.EXTI_Line = EXTI_Line5;
 987              		.loc 1 269 0
 988 080c 4FF00503 		mov	r3, #5
 989 0810 BB60     		str	r3, [r7, #8]
 270:../src/interrupt_defs.cpp **** 			e.EXTI_LineCmd = ENABLE;
 990              		.loc 1 270 0
 991 0812 4FF00103 		mov	r3, #1
 992 0816 BB73     		strb	r3, [r7, #14]
 271:../src/interrupt_defs.cpp **** 			e.EXTI_Mode = EXTI_Mode_Interrupt;
 993              		.loc 1 271 0
 994 0818 4FF00003 		mov	r3, #0
 995 081c 3B73     		strb	r3, [r7, #12]
 272:../src/interrupt_defs.cpp **** 			e.EXTI_Trigger = EXTI_Trigger_Falling;
 996              		.loc 1 272 0
 997 081e 4FF00C03 		mov	r3, #12
 998 0822 7B73     		strb	r3, [r7, #13]
 273:../src/interrupt_defs.cpp **** 
 274:../src/interrupt_defs.cpp **** 			EXTI_Init(&e);
 999              		.loc 1 274 0
 1000 0824 07F10803 		add	r3, r7, #8
 1001 0828 1846     		mov	r0, r3
 1002 082a FFF7FEFF 		bl	EXTI_Init
 275:../src/interrupt_defs.cpp **** 
 276:../src/interrupt_defs.cpp **** 			stage = 1;
 1003              		.loc 1 276 0
 1004 082e 40F20003 		movw	r3, #:lower16:stage
 1005 0832 C0F20003 		movt	r3, #:upper16:stage
 1006 0836 4FF00102 		mov	r2, #1
 1007 083a 1A60     		str	r2, [r3, #0]
 1008 083c 2FE0     		b	.L51
 1009              	.L52:
 1010              	.LBE7:
 1011              	.LBB8:
 1012              	.LBB9:
 277:../src/interrupt_defs.cpp **** 			return;
 278:../src/interrupt_defs.cpp **** 		}
 279:../src/interrupt_defs.cpp **** 		else if(stage == 1)
 1013              		.loc 1 279 0
 1014 083e 40F20003 		movw	r3, #:lower16:stage
 1015 0842 C0F20003 		movt	r3, #:upper16:stage
 1016 0846 1B68     		ldr	r3, [r3, #0]
 1017 0848 012B     		cmp	r3, #1
 1018 084a 28D1     		bne	.L51
 1019              	.LBB10:
 280:../src/interrupt_defs.cpp **** 		{
 281:../src/interrupt_defs.cpp **** 			count = TIM_GetCounter(TIM2);
 1020              		.loc 1 281 0
 1021 084c 4FF08040 		mov	r0, #1073741824
 1022 0850 FFF7FEFF 		bl	TIM_GetCounter
 1023 0854 0346     		mov	r3, r0
 1024 0856 1A46     		mov	r2, r3
 1025 0858 40F20003 		movw	r3, #:lower16:count
 1026 085c C0F20003 		movt	r3, #:upper16:count
 1027 0860 1A60     		str	r2, [r3, #0]
 282:../src/interrupt_defs.cpp **** 			TIM_Cmd(TIM2, DISABLE);
 1028              		.loc 1 282 0
 1029 0862 4FF08040 		mov	r0, #1073741824
 1030 0866 4FF00001 		mov	r1, #0
 1031 086a FFF7FEFF 		bl	TIM_Cmd
 283:../src/interrupt_defs.cpp **** 
 284:../src/interrupt_defs.cpp **** 			NVIC_InitTypeDef nv;
 285:../src/interrupt_defs.cpp **** 
 286:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannel = EXTI9_5_IRQn;
 1032              		.loc 1 286 0
 1033 086e 4FF01703 		mov	r3, #23
 1034 0872 3B71     		strb	r3, [r7, #4]
 287:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelCmd = DISABLE;
 1035              		.loc 1 287 0
 1036 0874 4FF00003 		mov	r3, #0
 1037 0878 FB71     		strb	r3, [r7, #7]
 288:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelPreemptionPriority = 0;
 1038              		.loc 1 288 0
 1039 087a 4FF00003 		mov	r3, #0
 1040 087e 7B71     		strb	r3, [r7, #5]
 289:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelSubPriority = 0;
 1041              		.loc 1 289 0
 1042 0880 4FF00003 		mov	r3, #0
 1043 0884 BB71     		strb	r3, [r7, #6]
 290:../src/interrupt_defs.cpp **** 
 291:../src/interrupt_defs.cpp **** 			NVIC_Init(&nv);
 1044              		.loc 1 291 0
 1045 0886 07F10403 		add	r3, r7, #4
 1046 088a 1846     		mov	r0, r3
 1047 088c FFF7FEFF 		bl	NVIC_Init
 292:../src/interrupt_defs.cpp **** 
 293:../src/interrupt_defs.cpp **** 			stage = 0;
 1048              		.loc 1 293 0
 1049 0890 40F20003 		movw	r3, #:lower16:stage
 1050 0894 C0F20003 		movt	r3, #:upper16:stage
 1051 0898 4FF00002 		mov	r2, #0
 1052 089c 1A60     		str	r2, [r3, #0]
 1053              	.L51:
 1054              	.LBE10:
 1055              	.LBE9:
 1056              	.LBE8:
 1057              	.LBE6:
 1058              	.LBE5:
 294:../src/interrupt_defs.cpp **** 			return;
 295:../src/interrupt_defs.cpp **** 		}
 296:../src/interrupt_defs.cpp **** 	}
 1059              		.loc 1 296 0
 1060 089e 07F11007 		add	r7, r7, #16
 1061 08a2 BD46     		mov	sp, r7
 1062 08a4 80BD     		pop	{r7, pc}
 1063              		.cfi_endproc
 1064              	.LFE118:
 1066              	.Letext0:
 1067              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 1068              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 1069              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_exti.h"
 1070              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 1071              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 1072              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 1073              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 interrupt_defs.cpp
     /tmp/cckOAmmB.s:23     .text:00000000 $t
     /tmp/cckOAmmB.s:28     .text:00000000 TIM7_IRQHandler
     /tmp/cckOAmmB.s:430    .text:00000438 $d
     /tmp/cckOAmmB.s:441    .text:0000045c $t
     /tmp/cckOAmmB.s:462    .text:0000047c TIM1_TRG_COM_TIM17_IRQHandler
     /tmp/cckOAmmB.s:631    .text:000005c8 TIM6_DAC_IRQHandler
     /tmp/cckOAmmB.s:708    .text:00000664 ADC1_2_IRQHandler
     /tmp/cckOAmmB.s:757    .text:000006a8 DMA1_Channel1_IRQHandler
     /tmp/cckOAmmB.s:789    .text:000006c4 DMA2_Channel1_IRQHandler
     /tmp/cckOAmmB.s:822    .text:000006e4 ADC3_IRQHandler
     /tmp/cckOAmmB.s:940    .text:000007d0 $d
     /tmp/cckOAmmB.s:945    .text:000007d8 $t
     /tmp/cckOAmmB.s:950    .text:000007d8 EXTI9_5_IRQHandler
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.common_headers.h.9.669975762de5793e6d2436455cef4d0e
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dcmplt
TIM_ClearITPendingBit
left_enc
right_enc
TIM_GetCounter
TIM_SetCounter
_Z11pwm2_outputf
_Z11pwm1_outputf
EXTI_Init
GPIO_Init
GPIO_WriteBit
stage
NVIC_Init
led_iter
led_matrix
GPIO_Write
ADC_GetITStatus
ADC_GetConversionValue
adcval
ADC_ClearITPendingBit
DMA_ClearITPendingBit
new_data
adc2_new_data
adc3_awd1
adc3_awd2
EXTI_ClearITPendingBit
TIM_Cmd
count
