   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"interrupt_defs.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__aeabi_i2d
  20              		.global	__aeabi_dmul
  21              		.global	__aeabi_dcmpgt
  22              		.global	__aeabi_dcmplt
  23              		.align	2
  24              		.global	TIM7_IRQHandler
  25              		.thumb
  26              		.thumb_func
  28              	TIM7_IRQHandler:
  29              	.LFB111:
  30              		.file 1 "../src/interrupt_defs.cpp"
   1:../src/interrupt_defs.cpp **** /*
   2:../src/interrupt_defs.cpp ****  * interrupt_defs.cpp
   3:../src/interrupt_defs.cpp ****  *
   4:../src/interrupt_defs.cpp ****  *  Created on: Feb 19, 2013
   5:../src/interrupt_defs.cpp ****  *      Author: root
   6:../src/interrupt_defs.cpp ****  */
   7:../src/interrupt_defs.cpp **** 
   8:../src/interrupt_defs.cpp **** #include "common_headers.h"
   9:../src/interrupt_defs.cpp **** #include "stm32f3_discovery_l3gd20.h"
  10:../src/interrupt_defs.cpp **** 
  11:../src/interrupt_defs.cpp **** #include "encoder.h"
  12:../src/interrupt_defs.cpp **** 
  13:../src/interrupt_defs.cpp **** //#include <stdio.h>
  14:../src/interrupt_defs.cpp **** #include <math.h>
  15:../src/interrupt_defs.cpp **** 
  16:../src/interrupt_defs.cpp **** // ISR definitions need to go here, to avoid C++ name-mangling
  17:../src/interrupt_defs.cpp **** 
  18:../src/interrupt_defs.cpp **** extern "C"
  19:../src/interrupt_defs.cpp **** {
  20:../src/interrupt_defs.cpp **** extern volatile float gyro_angle_x;
  21:../src/interrupt_defs.cpp **** extern encoderState left_enc, right_enc;
  22:../src/interrupt_defs.cpp **** extern int gyro_bias_x, adcval;
  23:../src/interrupt_defs.cpp **** extern volatile int led_matrix[8];
  24:../src/interrupt_defs.cpp **** extern volatile int led_iter;
  25:../src/interrupt_defs.cpp **** extern int new_data;
  26:../src/interrupt_defs.cpp **** extern uint8_t adc2_new_data;
  27:../src/interrupt_defs.cpp **** extern uint8_t adc3_awd1, adc3_awd2;
  28:../src/interrupt_defs.cpp **** 
  29:../src/interrupt_defs.cpp **** extern int count, stage;
  30:../src/interrupt_defs.cpp **** 
  31:../src/interrupt_defs.cpp **** extern float drive_cmd;// = 0.0f;
  32:../src/interrupt_defs.cpp **** extern float err;// = 0.0f;
  33:../src/interrupt_defs.cpp **** extern float last_err;// = 0.0f;
  34:../src/interrupt_defs.cpp **** extern float diff_err;
  35:../src/interrupt_defs.cpp **** extern float rt;// = 0.0f;
  36:../src/interrupt_defs.cpp **** extern float d_front;// = 1.0f;
  37:../src/interrupt_defs.cpp **** extern float integral;
  38:../src/interrupt_defs.cpp **** 
  39:../src/interrupt_defs.cpp **** extern float left, right;
  40:../src/interrupt_defs.cpp **** 
  41:../src/interrupt_defs.cpp **** extern __IO uint32_t adcData[2];
  42:../src/interrupt_defs.cpp **** extern __IO uint32_t adc2_data[2];
  43:../src/interrupt_defs.cpp **** 
  44:../src/interrupt_defs.cpp **** extern int state;
  45:../src/interrupt_defs.cpp **** 
  46:../src/interrupt_defs.cpp **** void update_pid(void);
  47:../src/interrupt_defs.cpp **** 
  48:../src/interrupt_defs.cpp **** 	void TIM7_IRQHandler(void) // ISR that performs encoder state update:
  49:../src/interrupt_defs.cpp **** 										// Runs every DT milliseconds
  50:../src/interrupt_defs.cpp **** 	{
  31              		.loc 1 50 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 96
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 90B5     		push	{r4, r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 12
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 99B0     		sub	sp, sp, #100
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 112
  44 0004 00AF     		add	r7, sp, #0
  45              	.LCFI2:
  46              		.cfi_def_cfa_register 7
  47              	.LBB2:
  51:../src/interrupt_defs.cpp **** 		float left_out, right_out;
  52:../src/interrupt_defs.cpp **** 		int error, abs_err;
  53:../src/interrupt_defs.cpp **** 
  54:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
  48              		.loc 1 54 0
  49 0006 4FF4A050 		mov	r0, #5120
  50 000a C4F20000 		movt	r0, 16384
  51 000e 4FF00101 		mov	r1, #1
  52 0012 FFF7FEFF 		bl	TIM_ClearITPendingBit
  55:../src/interrupt_defs.cpp **** 
  56:../src/interrupt_defs.cpp **** 		encoderState left_temp, right_temp;
  57:../src/interrupt_defs.cpp **** 
  58:../src/interrupt_defs.cpp **** 		left_temp.position = left_enc.position;
  53              		.loc 1 58 0
  54 0016 40F20003 		movw	r3, #:lower16:left_enc
  55 001a C0F20003 		movt	r3, #:upper16:left_enc
  56 001e 1B68     		ldr	r3, [r3, #0]
  57 0020 3B60     		str	r3, [r7, #0]
  59:../src/interrupt_defs.cpp **** 		left_temp.speed = left_enc.speed;
  58              		.loc 1 59 0
  59 0022 40F20003 		movw	r3, #:lower16:left_enc
  60 0026 C0F20003 		movt	r3, #:upper16:left_enc
  61 002a 5B68     		ldr	r3, [r3, #4]	@ float
  62 002c 7B60     		str	r3, [r7, #4]	@ float
  60:../src/interrupt_defs.cpp **** 		left_temp.acceleration = left_enc.acceleration;
  63              		.loc 1 60 0
  64 002e 40F20003 		movw	r3, #:lower16:left_enc
  65 0032 C0F20003 		movt	r3, #:upper16:left_enc
  66 0036 9B68     		ldr	r3, [r3, #8]	@ float
  67 0038 BB60     		str	r3, [r7, #8]	@ float
  61:../src/interrupt_defs.cpp **** 
  62:../src/interrupt_defs.cpp **** 		right_temp.position = right_enc.position;
  68              		.loc 1 62 0
  69 003a 40F20003 		movw	r3, #:lower16:right_enc
  70 003e C0F20003 		movt	r3, #:upper16:right_enc
  71 0042 1B68     		ldr	r3, [r3, #0]
  72 0044 BB62     		str	r3, [r7, #40]
  63:../src/interrupt_defs.cpp **** 		right_temp.speed = right_enc.speed;
  73              		.loc 1 63 0
  74 0046 40F20003 		movw	r3, #:lower16:right_enc
  75 004a C0F20003 		movt	r3, #:upper16:right_enc
  76 004e 5B68     		ldr	r3, [r3, #4]	@ float
  77 0050 FB62     		str	r3, [r7, #44]	@ float
  64:../src/interrupt_defs.cpp **** 		right_temp.acceleration = right_enc.acceleration;
  78              		.loc 1 64 0
  79 0052 40F20003 		movw	r3, #:lower16:right_enc
  80 0056 C0F20003 		movt	r3, #:upper16:right_enc
  81 005a 9B68     		ldr	r3, [r3, #8]	@ float
  82 005c 3B63     		str	r3, [r7, #48]	@ float
  65:../src/interrupt_defs.cpp **** 
  66:../src/interrupt_defs.cpp **** 		left_enc.position = left_temp.position + (int16_t)TIM_GetCounter(TIM4); //Instead of TIM2 on othe
  83              		.loc 1 66 0
  84 005e 3C68     		ldr	r4, [r7, #0]
  85 0060 4FF40060 		mov	r0, #2048
  86 0064 C4F20000 		movt	r0, 16384
  87 0068 FFF7FEFF 		bl	TIM_GetCounter
  88 006c 0346     		mov	r3, r0
  89 006e 9BB2     		uxth	r3, r3
  90 0070 1BB2     		sxth	r3, r3
  91 0072 E218     		adds	r2, r4, r3
  92 0074 40F20003 		movw	r3, #:lower16:left_enc
  93 0078 C0F20003 		movt	r3, #:upper16:left_enc
  94 007c 1A60     		str	r2, [r3, #0]
  67:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM4, 0);
  95              		.loc 1 67 0
  96 007e 4FF40060 		mov	r0, #2048
  97 0082 C4F20000 		movt	r0, 16384
  98 0086 4FF00001 		mov	r1, #0
  99 008a FFF7FEFF 		bl	TIM_SetCounter
  68:../src/interrupt_defs.cpp **** 		left_enc.speed = (float)((left_enc.position - left_temp.position)*1000)/(float)DT_ENCODER; // Sin
 100              		.loc 1 68 0
 101 008e 40F20003 		movw	r3, #:lower16:left_enc
 102 0092 C0F20003 		movt	r3, #:upper16:left_enc
 103 0096 1A68     		ldr	r2, [r3, #0]
 104 0098 3B68     		ldr	r3, [r7, #0]
 105 009a D31A     		subs	r3, r2, r3
 106 009c 4FF47A72 		mov	r2, #1000
 107 00a0 02FB03F3 		mul	r3, r2, r3
 108 00a4 07EE903A 		fmsr	s15, r3	@ int
 109 00a8 B8EEE77A 		fsitos	s14, s15
 110 00ac F3EE097A 		fconsts	s15, #57
 111 00b0 C7EE277A 		fdivs	s15, s14, s15
 112 00b4 40F20003 		movw	r3, #:lower16:left_enc
 113 00b8 C0F20003 		movt	r3, #:upper16:left_enc
 114 00bc C3ED017A 		fsts	s15, [r3, #4]
  69:../src/interrupt_defs.cpp **** 		left_enc.acceleration = (float)((left_enc.speed - left_temp.speed)*1000)/(float)DT_ENCODER;
 115              		.loc 1 69 0
 116 00c0 40F20003 		movw	r3, #:lower16:left_enc
 117 00c4 C0F20003 		movt	r3, #:upper16:left_enc
 118 00c8 93ED017A 		flds	s14, [r3, #4]
 119 00cc D7ED017A 		flds	s15, [r7, #4]
 120 00d0 37EE677A 		fsubs	s14, s14, s15
 121 00d4 DFEDDA7A 		flds	s15, .L31+8
 122 00d8 27EE277A 		fmuls	s14, s14, s15
 123 00dc F3EE097A 		fconsts	s15, #57
 124 00e0 C7EE277A 		fdivs	s15, s14, s15
 125 00e4 40F20003 		movw	r3, #:lower16:left_enc
 126 00e8 C0F20003 		movt	r3, #:upper16:left_enc
 127 00ec C3ED027A 		fsts	s15, [r3, #8]
  70:../src/interrupt_defs.cpp **** 
  71:../src/interrupt_defs.cpp **** 		right_enc.position = right_temp.position + (int16_t)(TIM_GetCounter(TIM8));
 128              		.loc 1 71 0
 129 00f0 BC6A     		ldr	r4, [r7, #40]
 130 00f2 4FF45050 		mov	r0, #13312
 131 00f6 C4F20100 		movt	r0, 16385
 132 00fa FFF7FEFF 		bl	TIM_GetCounter
 133 00fe 0346     		mov	r3, r0
 134 0100 9BB2     		uxth	r3, r3
 135 0102 1BB2     		sxth	r3, r3
 136 0104 E218     		adds	r2, r4, r3
 137 0106 40F20003 		movw	r3, #:lower16:right_enc
 138 010a C0F20003 		movt	r3, #:upper16:right_enc
 139 010e 1A60     		str	r2, [r3, #0]
  72:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM8, 0); // To get around the stupid 16-bit counter limitation present on all tim
 140              		.loc 1 72 0
 141 0110 4FF45050 		mov	r0, #13312
 142 0114 C4F20100 		movt	r0, 16385
 143 0118 4FF00001 		mov	r1, #0
 144 011c FFF7FEFF 		bl	TIM_SetCounter
  73:../src/interrupt_defs.cpp **** 		right_enc.speed = (float)((right_enc.position - right_temp.position)*1000)/(float)DT_ENCODER;
 145              		.loc 1 73 0
 146 0120 40F20003 		movw	r3, #:lower16:right_enc
 147 0124 C0F20003 		movt	r3, #:upper16:right_enc
 148 0128 1A68     		ldr	r2, [r3, #0]
 149 012a BB6A     		ldr	r3, [r7, #40]
 150 012c D31A     		subs	r3, r2, r3
 151 012e 4FF47A72 		mov	r2, #1000
 152 0132 02FB03F3 		mul	r3, r2, r3
 153 0136 07EE903A 		fmsr	s15, r3	@ int
 154 013a B8EEE77A 		fsitos	s14, s15
 155 013e F3EE097A 		fconsts	s15, #57
 156 0142 C7EE277A 		fdivs	s15, s14, s15
 157 0146 40F20003 		movw	r3, #:lower16:right_enc
 158 014a C0F20003 		movt	r3, #:upper16:right_enc
 159 014e C3ED017A 		fsts	s15, [r3, #4]
  74:../src/interrupt_defs.cpp **** 		right_enc.acceleration = (float)((right_enc.speed - right_temp.speed)*1000)/(float)DT_ENCODER;
 160              		.loc 1 74 0
 161 0152 40F20003 		movw	r3, #:lower16:right_enc
 162 0156 C0F20003 		movt	r3, #:upper16:right_enc
 163 015a 93ED017A 		flds	s14, [r3, #4]
 164 015e D7ED0B7A 		flds	s15, [r7, #44]
 165 0162 37EE677A 		fsubs	s14, s14, s15
 166 0166 DFEDB67A 		flds	s15, .L31+8
 167 016a 27EE277A 		fmuls	s14, s14, s15
 168 016e F3EE097A 		fconsts	s15, #57
 169 0172 C7EE277A 		fdivs	s15, s14, s15
 170 0176 40F20003 		movw	r3, #:lower16:right_enc
 171 017a C0F20003 		movt	r3, #:upper16:right_enc
 172 017e C3ED027A 		fsts	s15, [r3, #8]
  75:../src/interrupt_defs.cpp **** 
  76:../src/interrupt_defs.cpp **** 		if(left_enc.m == MODE_POSITION)
 173              		.loc 1 76 0
 174 0182 40F20003 		movw	r3, #:lower16:left_enc
 175 0186 C0F20003 		movt	r3, #:upper16:left_enc
 176 018a 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 177 018e 012B     		cmp	r3, #1
 178 0190 5DD1     		bne	.L2
  77:../src/interrupt_defs.cpp **** 		{
  78:../src/interrupt_defs.cpp **** 			left_out = ((float)k_p * (float)(left_enc.position_target - left_enc.position))
  79:../src/interrupt_defs.cpp **** 					+ ((float)k_i*(float)(left_enc.integral))
  80:../src/interrupt_defs.cpp **** 					+ ((float)k_d*(float)left_enc.speed);
 179              		.loc 1 80 0
 180 0192 40F20003 		movw	r3, #:lower16:left_enc
 181 0196 C0F20003 		movt	r3, #:upper16:left_enc
 182 019a DA68     		ldr	r2, [r3, #12]
 183 019c 40F20003 		movw	r3, #:lower16:left_enc
 184 01a0 C0F20003 		movt	r3, #:upper16:left_enc
 185 01a4 1B68     		ldr	r3, [r3, #0]
 186 01a6 D31A     		subs	r3, r2, r3
 187 01a8 07EE103A 		fmsr	s14, r3	@ int
 188 01ac F8EEC77A 		fsitos	s15, s14
 189 01b0 37EEA77A 		fadds	s14, s15, s15
 190 01b4 40F20003 		movw	r3, #:lower16:left_enc
 191 01b8 C0F20003 		movt	r3, #:upper16:left_enc
 192 01bc D3ED057A 		flds	s15, [r3, #20]	@ int
 193 01c0 F8EEE76A 		fsitos	s13, s15
 194 01c4 DFED9F7A 		flds	s15, .L31+12
 195 01c8 66EEA77A 		fmuls	s15, s13, s15
 196 01cc 37EE277A 		fadds	s14, s14, s15
 197 01d0 40F20003 		movw	r3, #:lower16:left_enc
 198 01d4 C0F20003 		movt	r3, #:upper16:left_enc
 199 01d8 D3ED016A 		flds	s13, [r3, #4]
 200 01dc DFED9A7A 		flds	s15, .L31+16
 201 01e0 66EEA77A 		fmuls	s15, s13, s15
 202 01e4 77EE277A 		fadds	s15, s14, s15
 203 01e8 C7ED177A 		fsts	s15, [r7, #92]
  81:../src/interrupt_defs.cpp **** 			left_out = (left_out > 100) ? 100 : ((left_out < -100) ? -100 : left_out);
 204              		.loc 1 81 0
 205 01ec 97ED177A 		flds	s14, [r7, #92]
 206 01f0 DFED967A 		flds	s15, .L31+20
 207 01f4 B4EEE77A 		fcmpes	s14, s15
 208 01f8 F1EE10FA 		fmstat
 209 01fc 04DD     		ble	.L27
 210              	.L23:
 211              		.loc 1 81 0 is_stmt 0 discriminator 1
 212 01fe 4FF00003 		mov	r3, #0
 213 0202 C4F2C823 		movt	r3, 17096
 214 0206 0EE0     		b	.L5
 215              	.L27:
 216              		.loc 1 81 0 discriminator 2
 217 0208 97ED177A 		flds	s14, [r7, #92]
 218 020c DFED907A 		flds	s15, .L31+24
 219 0210 B4EEE77A 		fcmpes	s14, s15
 220 0214 F1EE10FA 		fmstat
 221 0218 04D5     		bpl	.L28
 222              	.L24:
 223              		.loc 1 81 0 discriminator 3
 224 021a 4FF00003 		mov	r3, #0
 225 021e CCF2C823 		movt	r3, 49864
 226 0222 00E0     		b	.L8
 227              	.L28:
 228              		.loc 1 81 0 discriminator 4
 229 0224 FB6D     		ldr	r3, [r7, #92]	@ float
 230              	.L8:
 231              	.L5:
 232              		.loc 1 81 0 discriminator 6
 233 0226 FB65     		str	r3, [r7, #92]	@ float
  82:../src/interrupt_defs.cpp **** 
  83:../src/interrupt_defs.cpp **** 			pwm2_output(100-((float)(left_out+100)/(float)2));
 234              		.loc 1 83 0 is_stmt 1 discriminator 6
 235 0228 97ED177A 		flds	s14, [r7, #92]
 236 022c DFED877A 		flds	s15, .L31+20
 237 0230 37EE277A 		fadds	s14, s14, s15
 238 0234 F0EE007A 		fconsts	s15, #0
 239 0238 C7EE277A 		fdivs	s15, s14, s15
 240 023c 9FED837A 		flds	s14, .L31+20
 241 0240 77EE677A 		fsubs	s15, s14, s15
 242 0244 17EE900A 		fmrs	r0, s15
 243 0248 FFF7FEFF 		bl	_Z11pwm2_outputf
 244 024c 0BE0     		b	.L9
 245              	.L2:
  84:../src/interrupt_defs.cpp **** 		}
  85:../src/interrupt_defs.cpp **** 		else if(left_enc.m == MODE_SPEED)
 246              		.loc 1 85 0
 247 024e 40F20003 		movw	r3, #:lower16:left_enc
 248 0252 C0F20003 		movt	r3, #:upper16:left_enc
 249 0256 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 250 025a 022B     		cmp	r3, #2
 251 025c 03D1     		bne	.L9
  86:../src/interrupt_defs.cpp **** 		{
  87:../src/interrupt_defs.cpp **** 			pwm2_output(0);
 252              		.loc 1 87 0
 253 025e 4FF00000 		mov	r0, #0
 254 0262 FFF7FEFF 		bl	_Z11pwm2_outputf
 255              	.L9:
  88:../src/interrupt_defs.cpp **** 		}
  89:../src/interrupt_defs.cpp **** 
  90:../src/interrupt_defs.cpp **** 		if(right_enc.m == MODE_POSITION)
 256              		.loc 1 90 0
 257 0266 40F20003 		movw	r3, #:lower16:right_enc
 258 026a C0F20003 		movt	r3, #:upper16:right_enc
 259 026e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 260 0272 012B     		cmp	r3, #1
 261 0274 40F0FE80 		bne	.L10
  91:../src/interrupt_defs.cpp **** 		{
  92:../src/interrupt_defs.cpp **** 			error = right_enc.position - right_enc.position_target;
 262              		.loc 1 92 0
 263 0278 40F20003 		movw	r3, #:lower16:right_enc
 264 027c C0F20003 		movt	r3, #:upper16:right_enc
 265 0280 1A68     		ldr	r2, [r3, #0]
 266 0282 40F20003 		movw	r3, #:lower16:right_enc
 267 0286 C0F20003 		movt	r3, #:upper16:right_enc
 268 028a DB68     		ldr	r3, [r3, #12]
 269 028c D31A     		subs	r3, r2, r3
 270 028e BB65     		str	r3, [r7, #88]
  93:../src/interrupt_defs.cpp **** 			right_enc.integral += (float)(error) * (float)DT_ENCODER / (float)1000;
 271              		.loc 1 93 0
 272 0290 40F20003 		movw	r3, #:lower16:right_enc
 273 0294 C0F20003 		movt	r3, #:upper16:right_enc
 274 0298 D3ED057A 		flds	s15, [r3, #20]	@ int
 275 029c B8EEE77A 		fsitos	s14, s15
 276 02a0 D7ED167A 		flds	s15, [r7, #88]	@ int
 277 02a4 F8EEE76A 		fsitos	s13, s15
 278 02a8 F3EE097A 		fconsts	s15, #57
 279 02ac 66EEA76A 		fmuls	s13, s13, s15
 280 02b0 DFED637A 		flds	s15, .L31+8
 281 02b4 C6EEA77A 		fdivs	s15, s13, s15
 282 02b8 77EE277A 		fadds	s15, s14, s15
 283 02bc FDEEE77A 		ftosizs	s15, s15
 284 02c0 40F20003 		movw	r3, #:lower16:right_enc
 285 02c4 C0F20003 		movt	r3, #:upper16:right_enc
 286 02c8 C3ED057A 		fsts	s15, [r3, #20]	@ int
  94:../src/interrupt_defs.cpp **** 
  95:../src/interrupt_defs.cpp **** 			if(right_enc.integral * k_i > 100 || right_enc.integral * k_i < -100)
 287              		.loc 1 95 0
 288 02cc 40F20003 		movw	r3, #:lower16:right_enc
 289 02d0 C0F20003 		movt	r3, #:upper16:right_enc
 290 02d4 5B69     		ldr	r3, [r3, #20]
 291 02d6 1846     		mov	r0, r3
 292 02d8 FFF7FEFF 		bl	__aeabi_i2d
 293 02dc 0246     		mov	r2, r0
 294 02de 0B46     		mov	r3, r1
 295 02e0 1046     		mov	r0, r2
 296 02e2 1946     		mov	r1, r3
 297 02e4 54A3     		adr	r3, .L31
 298 02e6 D3E90023 		ldrd	r2, [r3]
 299 02ea FFF7FEFF 		bl	__aeabi_dmul
 300 02ee 0246     		mov	r2, r0
 301 02f0 0B46     		mov	r3, r1
 302 02f2 1046     		mov	r0, r2
 303 02f4 1946     		mov	r1, r3
 304 02f6 4FF00002 		mov	r2, #0
 305 02fa 4FF00003 		mov	r3, #0
 306 02fe C4F25903 		movt	r3, 16473
 307 0302 FFF7FEFF 		bl	__aeabi_dcmpgt
 308 0306 0346     		mov	r3, r0
 309 0308 002B     		cmp	r3, #0
 310 030a 1FD1     		bne	.L11
 311              		.loc 1 95 0 is_stmt 0 discriminator 1
 312 030c 40F20003 		movw	r3, #:lower16:right_enc
 313 0310 C0F20003 		movt	r3, #:upper16:right_enc
 314 0314 5B69     		ldr	r3, [r3, #20]
 315 0316 1846     		mov	r0, r3
 316 0318 FFF7FEFF 		bl	__aeabi_i2d
 317 031c 0246     		mov	r2, r0
 318 031e 0B46     		mov	r3, r1
 319 0320 1046     		mov	r0, r2
 320 0322 1946     		mov	r1, r3
 321 0324 44A3     		adr	r3, .L31
 322 0326 D3E90023 		ldrd	r2, [r3]
 323 032a FFF7FEFF 		bl	__aeabi_dmul
 324 032e 0246     		mov	r2, r0
 325 0330 0B46     		mov	r3, r1
 326 0332 1046     		mov	r0, r2
 327 0334 1946     		mov	r1, r3
 328 0336 4FF00002 		mov	r2, #0
 329 033a 4FF00003 		mov	r3, #0
 330 033e CCF25903 		movt	r3, 49241
 331 0342 FFF7FEFF 		bl	__aeabi_dcmplt
 332 0346 0346     		mov	r3, r0
 333 0348 002B     		cmp	r3, #0
 334 034a 06D0     		beq	.L12
 335              	.L11:
  96:../src/interrupt_defs.cpp **** 			{
  97:../src/interrupt_defs.cpp **** 				right_enc.integral = (float)100/(float)k_i;
 336              		.loc 1 97 0 is_stmt 1
 337 034c 40F20003 		movw	r3, #:lower16:right_enc
 338 0350 C0F20003 		movt	r3, #:upper16:right_enc
 339 0354 40F29A22 		movw	r2, #666
 340 0358 5A61     		str	r2, [r3, #20]
 341              	.L12:
  98:../src/interrupt_defs.cpp **** 			}
  99:../src/interrupt_defs.cpp **** 
 100:../src/interrupt_defs.cpp **** 			right_out = ((float)k_p * (float)error)
 101:../src/interrupt_defs.cpp **** 					+ ((float)k_i*(float)(right_enc.integral))
 102:../src/interrupt_defs.cpp **** 					+ ((float)k_d*(float)(error - right_enc.last_error)/(float)(DT_ENCODER/(float)1000));
 342              		.loc 1 102 0
 343 035a D7ED167A 		flds	s15, [r7, #88]	@ int
 344 035e F8EEE77A 		fsitos	s15, s15
 345 0362 37EEA77A 		fadds	s14, s15, s15
 346 0366 40F20003 		movw	r3, #:lower16:right_enc
 347 036a C0F20003 		movt	r3, #:upper16:right_enc
 348 036e D3ED057A 		flds	s15, [r3, #20]	@ int
 349 0372 F8EEE76A 		fsitos	s13, s15
 350 0376 DFED337A 		flds	s15, .L31+12
 351 037a 66EEA77A 		fmuls	s15, s13, s15
 352 037e 37EE277A 		fadds	s14, s14, s15
 353 0382 40F20003 		movw	r3, #:lower16:right_enc
 354 0386 C0F20003 		movt	r3, #:upper16:right_enc
 355 038a 9B69     		ldr	r3, [r3, #24]
 356 038c BA6D     		ldr	r2, [r7, #88]
 357 038e D31A     		subs	r3, r2, r3
 358 0390 07EE903A 		fmsr	s15, r3	@ int
 359 0394 F8EEE76A 		fsitos	s13, s15
 360 0398 DFED2B7A 		flds	s15, .L31+16
 361 039c 66EEA76A 		fmuls	s13, s13, s15
 362 03a0 DFED2C7A 		flds	s15, .L31+28
 363 03a4 C6EEA77A 		fdivs	s15, s13, s15
 364 03a8 77EE277A 		fadds	s15, s14, s15
 365 03ac C7ED157A 		fsts	s15, [r7, #84]
 103:../src/interrupt_defs.cpp **** 			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 366              		.loc 1 103 0
 367 03b0 97ED157A 		flds	s14, [r7, #84]
 368 03b4 DFED257A 		flds	s15, .L31+20
 369 03b8 B4EEE77A 		fcmpes	s14, s15
 370 03bc F1EE10FA 		fmstat
 371 03c0 04DD     		ble	.L29
 372              	.L25:
 373              		.loc 1 103 0 is_stmt 0 discriminator 1
 374 03c2 4FF00003 		mov	r3, #0
 375 03c6 C4F2C823 		movt	r3, 17096
 376 03ca 0EE0     		b	.L16
 377              	.L29:
 378              		.loc 1 103 0 discriminator 2
 379 03cc 97ED157A 		flds	s14, [r7, #84]
 380 03d0 DFED1F7A 		flds	s15, .L31+24
 381 03d4 B4EEE77A 		fcmpes	s14, s15
 382 03d8 F1EE10FA 		fmstat
 383 03dc 04D5     		bpl	.L30
 384              	.L26:
 385              		.loc 1 103 0 discriminator 3
 386 03de 4FF00003 		mov	r3, #0
 387 03e2 CCF2C823 		movt	r3, 49864
 388 03e6 00E0     		b	.L19
 389              	.L30:
 390              		.loc 1 103 0 discriminator 4
 391 03e8 7B6D     		ldr	r3, [r7, #84]	@ float
 392              	.L19:
 393              	.L16:
 394              		.loc 1 103 0 discriminator 6
 395 03ea 7B65     		str	r3, [r7, #84]	@ float
 104:../src/interrupt_defs.cpp **** 			right_enc.last_error = error;
 396              		.loc 1 104 0 is_stmt 1 discriminator 6
 397 03ec 40F20003 		movw	r3, #:lower16:right_enc
 398 03f0 C0F20003 		movt	r3, #:upper16:right_enc
 399 03f4 BA6D     		ldr	r2, [r7, #88]
 400 03f6 9A61     		str	r2, [r3, #24]
 105:../src/interrupt_defs.cpp **** 
 106:../src/interrupt_defs.cpp **** 			abs_err = (error > 0) ? error : (error*-1);
 401              		.loc 1 106 0 discriminator 6
 402 03f8 BB6D     		ldr	r3, [r7, #88]
 403 03fa 002B     		cmp	r3, #0
 404 03fc B8BF     		it	lt
 405 03fe 5B42     		rsblt	r3, r3, #0
 406 0400 3B65     		str	r3, [r7, #80]
 107:../src/interrupt_defs.cpp **** 
 108:../src/interrupt_defs.cpp **** 			if(error > 10 || error < -10)
 407              		.loc 1 108 0 discriminator 6
 408 0402 BB6D     		ldr	r3, [r7, #88]
 409 0404 0A2B     		cmp	r3, #10
 410 0406 03DC     		bgt	.L20
 411              		.loc 1 108 0 is_stmt 0 discriminator 1
 412 0408 BB6D     		ldr	r3, [r7, #88]
 413 040a 13F10A0F 		cmn	r3, #10
 414 040e 25DA     		bge	.L21
 415              	.L20:
 109:../src/interrupt_defs.cpp **** 			{
 110:../src/interrupt_defs.cpp **** 				pwm1_output((((float)(right_out+100)/(float)2))*(float)0.01);
 416              		.loc 1 110 0 is_stmt 1
 417 0410 97ED157A 		flds	s14, [r7, #84]
 418 0414 DFED0D7A 		flds	s15, .L31+20
 419 0418 37EE277A 		fadds	s14, s14, s15
 420 041c F0EE007A 		fconsts	s15, #0
 421 0420 87EE277A 		fdivs	s14, s14, s15
 422 0424 DFED0C7A 		flds	s15, .L31+32
 423 0428 67EE277A 		fmuls	s15, s14, s15
 424 042c 17EE900A 		fmrs	r0, s15
 425 0430 FFF7FEFF 		bl	_Z11pwm1_outputf
 426 0434 1EE0     		b	.L10
 427              	.L32:
 428 0436 00BF     		.align	3
 429              	.L31:
 430 0438 33333333 		.word	858993459
 431 043c 3333C33F 		.word	1069757235
 432 0440 00007A44 		.word	1148846080
 433 0444 9A99193E 		.word	1041865114
 434 0448 8FC2353F 		.word	1060487823
 435 044c 0000C842 		.word	1120403456
 436 0450 0000C8C2 		.word	-1027080192
 437 0454 CDCCCC3C 		.word	1020054733
 438 0458 0AD7233C 		.word	1008981770
 439              	.L21:
 111:../src/interrupt_defs.cpp **** 			}
 112:../src/interrupt_defs.cpp **** 			else
 113:../src/interrupt_defs.cpp **** 			{
 114:../src/interrupt_defs.cpp **** 				pwm1_output(0.50f);
 440              		.loc 1 114 0
 441 045c 4FF07C50 		mov	r0, #1056964608
 442 0460 FFF7FEFF 		bl	_Z11pwm1_outputf
 115:../src/interrupt_defs.cpp **** 				right_enc.m = MODE_OPENLOOP;
 443              		.loc 1 115 0
 444 0464 40F20003 		movw	r3, #:lower16:right_enc
 445 0468 C0F20003 		movt	r3, #:upper16:right_enc
 446 046c 4FF00002 		mov	r2, #0
 447 0470 83F82420 		strb	r2, [r3, #36]
 448              	.L10:
 116:../src/interrupt_defs.cpp **** 			}
 117:../src/interrupt_defs.cpp **** 		}
 118:../src/interrupt_defs.cpp **** 		update_pid();
 449              		.loc 1 118 0
 450 0474 FFF7FEFF 		bl	update_pid
 451              	.LBE2:
 119:../src/interrupt_defs.cpp **** 		/*
 120:../src/interrupt_defs.cpp **** 		else if(right_enc.m == MODE_SPEED)
 121:../src/interrupt_defs.cpp **** 		{
 122:../src/interrupt_defs.cpp **** 			error = right_enc.speed - right_enc.speed_target;
 123:../src/interrupt_defs.cpp **** 
 124:../src/interrupt_defs.cpp **** 			right_out = ((float)error * (float)k_p_s);// + ((float)k_d_s * (float)(error - right_enc.last_sp
 125:../src/interrupt_defs.cpp **** //			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 126:../src/interrupt_defs.cpp **** 			right_enc.vel_cmd += right_out;
 127:../src/interrupt_defs.cpp **** 			if(right_enc.vel_cmd > 1)
 128:../src/interrupt_defs.cpp **** 			{
 129:../src/interrupt_defs.cpp **** 				right_enc.vel_cmd = 1;
 130:../src/interrupt_defs.cpp **** 			}
 131:../src/interrupt_defs.cpp **** 
 132:../src/interrupt_defs.cpp **** 			else if(right_enc.vel_cmd < 0)
 133:../src/interrupt_defs.cpp **** 			{
 134:../src/interrupt_defs.cpp **** 				right_enc.vel_cmd = 0;
 135:../src/interrupt_defs.cpp **** 			}
 136:../src/interrupt_defs.cpp **** 
 137:../src/interrupt_defs.cpp **** //			pwm1_output((float)1.0-right_enc.vel_cmd);
 138:../src/interrupt_defs.cpp **** 			pwm1_output(0.50f);
 139:../src/interrupt_defs.cpp **** 
 140:../src/interrupt_defs.cpp **** 			right_enc.last_speed_error = error;
 141:../src/interrupt_defs.cpp **** 		}
 142:../src/interrupt_defs.cpp **** 		*/
 143:../src/interrupt_defs.cpp **** 	}
 452              		.loc 1 143 0
 453 0478 07F16407 		add	r7, r7, #100
 454 047c BD46     		mov	sp, r7
 455 047e 90BD     		pop	{r4, r7, pc}
 456              		.cfi_endproc
 457              	.LFE111:
 459              		.align	2
 460              		.global	TIM1_TRG_COM_TIM17_IRQHandler
 461              		.thumb
 462              		.thumb_func
 464              	TIM1_TRG_COM_TIM17_IRQHandler:
 465              	.LFB112:
 144:../src/interrupt_defs.cpp **** 
 145:../src/interrupt_defs.cpp **** 	void TIM1_TRG_COM_TIM17_IRQHandler(void)
 146:../src/interrupt_defs.cpp **** 	{
 466              		.loc 1 146 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 24
 469              		@ frame_needed = 1, uses_anonymous_args = 0
 470 0480 80B5     		push	{r7, lr}
 471              	.LCFI3:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 7, -8
 474              		.cfi_offset 14, -4
 475 0482 86B0     		sub	sp, sp, #24
 476              	.LCFI4:
 477              		.cfi_def_cfa_offset 32
 478 0484 00AF     		add	r7, sp, #0
 479              	.LCFI5:
 480              		.cfi_def_cfa_register 7
 481              	.LBB3:
 147:../src/interrupt_defs.cpp **** 
 148:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM17, TIM_IT_Update);
 482              		.loc 1 148 0
 483 0486 4FF49040 		mov	r0, #18432
 484 048a C4F20100 		movt	r0, 16385
 485 048e 4FF00101 		mov	r1, #1
 486 0492 FFF7FEFF 		bl	TIM_ClearITPendingBit
 149:../src/interrupt_defs.cpp **** 		/*
 150:../src/interrupt_defs.cpp **** 		uint8_t bytes[2];
 151:../src/interrupt_defs.cpp **** 
 152:../src/interrupt_defs.cpp **** 		union twosComp {		// Takes care of two's complement conversion
 153:../src/interrupt_defs.cpp **** 			uint16_t un_signed;
 154:../src/interrupt_defs.cpp **** 			int16_t output;
 155:../src/interrupt_defs.cpp **** 		} convert;
 156:../src/interrupt_defs.cpp **** 
 157:../src/interrupt_defs.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 158:../src/interrupt_defs.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 159:../src/interrupt_defs.cpp **** 
 160:../src/interrupt_defs.cpp **** 		gyro_angle_x += (convert.output - gyro_bias_x) * (float)0.00763 * (float)0.001 * (float)DT_IMU;
 161:../src/interrupt_defs.cpp **** 
 162:../src/interrupt_defs.cpp **** 		*/
 163:../src/interrupt_defs.cpp **** 		/*
 164:../src/interrupt_defs.cpp **** 		 * Below: code required to trigger the ping sensor:
 165:../src/interrupt_defs.cpp **** 		 */
 166:../src/interrupt_defs.cpp **** 
 167:../src/interrupt_defs.cpp **** 		EXTI_InitTypeDef e;
 168:../src/interrupt_defs.cpp **** 
 169:../src/interrupt_defs.cpp **** 		e.EXTI_Line = EXTI_Line9;
 487              		.loc 1 169 0
 488 0496 4FF00903 		mov	r3, #9
 489 049a FB60     		str	r3, [r7, #12]
 170:../src/interrupt_defs.cpp **** 		e.EXTI_LineCmd = DISABLE;
 490              		.loc 1 170 0
 491 049c 4FF00003 		mov	r3, #0
 492 04a0 BB74     		strb	r3, [r7, #18]
 171:../src/interrupt_defs.cpp **** 		e.EXTI_Mode = EXTI_Mode_Interrupt;
 493              		.loc 1 171 0
 494 04a2 4FF00003 		mov	r3, #0
 495 04a6 3B74     		strb	r3, [r7, #16]
 172:../src/interrupt_defs.cpp **** 		e.EXTI_Trigger = EXTI_Trigger_Rising;
 496              		.loc 1 172 0
 497 04a8 4FF00803 		mov	r3, #8
 498 04ac 7B74     		strb	r3, [r7, #17]
 173:../src/interrupt_defs.cpp **** 
 174:../src/interrupt_defs.cpp **** 		EXTI_Init(&e);
 499              		.loc 1 174 0
 500 04ae 07F10C03 		add	r3, r7, #12
 501 04b2 1846     		mov	r0, r3
 502 04b4 FFF7FEFF 		bl	EXTI_Init
 175:../src/interrupt_defs.cpp **** 
 176:../src/interrupt_defs.cpp **** 		GPIO_InitTypeDef g;
 177:../src/interrupt_defs.cpp **** 		g.GPIO_Mode = GPIO_Mode_OUT;
 503              		.loc 1 177 0
 504 04b8 4FF00103 		mov	r3, #1
 505 04bc 3B72     		strb	r3, [r7, #8]
 178:../src/interrupt_defs.cpp **** 		g.GPIO_OType = GPIO_OType_PP;
 506              		.loc 1 178 0
 507 04be 4FF00003 		mov	r3, #0
 508 04c2 BB72     		strb	r3, [r7, #10]
 179:../src/interrupt_defs.cpp **** 		g.GPIO_Pin = GPIO_Pin_0;
 509              		.loc 1 179 0
 510 04c4 4FF00103 		mov	r3, #1
 511 04c8 7B60     		str	r3, [r7, #4]
 180:../src/interrupt_defs.cpp **** 		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 512              		.loc 1 180 0
 513 04ca 4FF00003 		mov	r3, #0
 514 04ce FB72     		strb	r3, [r7, #11]
 181:../src/interrupt_defs.cpp **** 		g.GPIO_Speed = GPIO_Speed_Level_1;
 515              		.loc 1 181 0
 516 04d0 4FF00103 		mov	r3, #1
 517 04d4 7B72     		strb	r3, [r7, #9]
 182:../src/interrupt_defs.cpp **** 
 183:../src/interrupt_defs.cpp **** 		GPIO_Init(GPIOB, &g);
 518              		.loc 1 183 0
 519 04d6 07F10403 		add	r3, r7, #4
 520 04da 4FF48060 		mov	r0, #1024
 521 04de C4F60000 		movt	r0, 18432
 522 04e2 1946     		mov	r1, r3
 523 04e4 FFF7FEFF 		bl	GPIO_Init
 184:../src/interrupt_defs.cpp **** 		int iter = 0;
 524              		.loc 1 184 0
 525 04e8 4FF00003 		mov	r3, #0
 526 04ec 7B61     		str	r3, [r7, #20]
 185:../src/interrupt_defs.cpp **** 
 186:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 527              		.loc 1 186 0
 528 04ee 4FF00003 		mov	r3, #0
 529 04f2 7B61     		str	r3, [r7, #20]
 530 04f4 0DE0     		b	.L34
 531              	.L35:
 187:../src/interrupt_defs.cpp **** 		{
 188:../src/interrupt_defs.cpp **** 			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
 532              		.loc 1 188 0 discriminator 2
 533 04f6 4FF48060 		mov	r0, #1024
 534 04fa C4F60000 		movt	r0, 18432
 535 04fe 4FF00101 		mov	r1, #1
 536 0502 4FF00102 		mov	r2, #1
 537 0506 FFF7FEFF 		bl	GPIO_WriteBit
 186:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 538              		.loc 1 186 0 discriminator 2
 539 050a 7B69     		ldr	r3, [r7, #20]
 540 050c 03F10103 		add	r3, r3, #1
 541 0510 7B61     		str	r3, [r7, #20]
 542              	.L34:
 186:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 543              		.loc 1 186 0 is_stmt 0 discriminator 1
 544 0512 7B69     		ldr	r3, [r7, #20]
 545 0514 092B     		cmp	r3, #9
 546 0516 CCBF     		ite	gt
 547 0518 0023     		movgt	r3, #0
 548 051a 0123     		movle	r3, #1
 549 051c DBB2     		uxtb	r3, r3
 550 051e 002B     		cmp	r3, #0
 551 0520 E9D1     		bne	.L35
 189:../src/interrupt_defs.cpp **** 		}
 190:../src/interrupt_defs.cpp **** 
 191:../src/interrupt_defs.cpp **** 		GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_RESET);
 552              		.loc 1 191 0 is_stmt 1
 553 0522 4FF48060 		mov	r0, #1024
 554 0526 C4F60000 		movt	r0, 18432
 555 052a 4FF00101 		mov	r1, #1
 556 052e 4FF00002 		mov	r2, #0
 557 0532 FFF7FEFF 		bl	GPIO_WriteBit
 192:../src/interrupt_defs.cpp **** 
 193:../src/interrupt_defs.cpp **** 
 194:../src/interrupt_defs.cpp **** 		g.GPIO_Mode = GPIO_Mode_IN;
 558              		.loc 1 194 0
 559 0536 4FF00003 		mov	r3, #0
 560 053a 3B72     		strb	r3, [r7, #8]
 195:../src/interrupt_defs.cpp **** 		g.GPIO_OType = GPIO_OType_OD;
 561              		.loc 1 195 0
 562 053c 4FF00103 		mov	r3, #1
 563 0540 BB72     		strb	r3, [r7, #10]
 196:../src/interrupt_defs.cpp **** 		g.GPIO_Pin = GPIO_Pin_0;
 564              		.loc 1 196 0
 565 0542 4FF00103 		mov	r3, #1
 566 0546 7B60     		str	r3, [r7, #4]
 197:../src/interrupt_defs.cpp **** 		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 567              		.loc 1 197 0
 568 0548 4FF00003 		mov	r3, #0
 569 054c FB72     		strb	r3, [r7, #11]
 198:../src/interrupt_defs.cpp **** 		g.GPIO_Speed = GPIO_Speed_Level_1;
 570              		.loc 1 198 0
 571 054e 4FF00103 		mov	r3, #1
 572 0552 7B72     		strb	r3, [r7, #9]
 199:../src/interrupt_defs.cpp **** 
 200:../src/interrupt_defs.cpp **** 		GPIO_Init(GPIOB, &g);
 573              		.loc 1 200 0
 574 0554 07F10403 		add	r3, r7, #4
 575 0558 4FF48060 		mov	r0, #1024
 576 055c C4F60000 		movt	r0, 18432
 577 0560 1946     		mov	r1, r3
 578 0562 FFF7FEFF 		bl	GPIO_Init
 201:../src/interrupt_defs.cpp **** 
 202:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM2, 0);
 579              		.loc 1 202 0
 580 0566 4FF08040 		mov	r0, #1073741824
 581 056a 4FF00001 		mov	r1, #0
 582 056e FFF7FEFF 		bl	TIM_SetCounter
 203:../src/interrupt_defs.cpp **** 
 204:../src/interrupt_defs.cpp **** 		stage = 0;
 583              		.loc 1 204 0
 584 0572 40F20003 		movw	r3, #:lower16:stage
 585 0576 C0F20003 		movt	r3, #:upper16:stage
 586 057a 4FF00002 		mov	r2, #0
 587 057e 1A60     		str	r2, [r3, #0]
 205:../src/interrupt_defs.cpp **** 
 206:../src/interrupt_defs.cpp **** 		e.EXTI_Line = EXTI_Line9;
 588              		.loc 1 206 0
 589 0580 4FF00903 		mov	r3, #9
 590 0584 FB60     		str	r3, [r7, #12]
 207:../src/interrupt_defs.cpp **** 		e.EXTI_LineCmd = ENABLE;
 591              		.loc 1 207 0
 592 0586 4FF00103 		mov	r3, #1
 593 058a BB74     		strb	r3, [r7, #18]
 208:../src/interrupt_defs.cpp **** 		e.EXTI_Mode = EXTI_Mode_Interrupt;
 594              		.loc 1 208 0
 595 058c 4FF00003 		mov	r3, #0
 596 0590 3B74     		strb	r3, [r7, #16]
 209:../src/interrupt_defs.cpp **** 		e.EXTI_Trigger = EXTI_Trigger_Rising;
 597              		.loc 1 209 0
 598 0592 4FF00803 		mov	r3, #8
 599 0596 7B74     		strb	r3, [r7, #17]
 210:../src/interrupt_defs.cpp **** 
 211:../src/interrupt_defs.cpp **** 		EXTI_Init(&e);
 600              		.loc 1 211 0
 601 0598 07F10C03 		add	r3, r7, #12
 602 059c 1846     		mov	r0, r3
 603 059e FFF7FEFF 		bl	EXTI_Init
 212:../src/interrupt_defs.cpp **** 
 213:../src/interrupt_defs.cpp **** 		NVIC_InitTypeDef nv;
 214:../src/interrupt_defs.cpp **** 
 215:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannel = EXTI9_5_IRQn;
 604              		.loc 1 215 0
 605 05a2 4FF01703 		mov	r3, #23
 606 05a6 3B70     		strb	r3, [r7, #0]
 216:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelCmd = ENABLE;
 607              		.loc 1 216 0
 608 05a8 4FF00103 		mov	r3, #1
 609 05ac FB70     		strb	r3, [r7, #3]
 217:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelPreemptionPriority = 0;
 610              		.loc 1 217 0
 611 05ae 4FF00003 		mov	r3, #0
 612 05b2 7B70     		strb	r3, [r7, #1]
 218:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelSubPriority = 0;
 613              		.loc 1 218 0
 614 05b4 4FF00003 		mov	r3, #0
 615 05b8 BB70     		strb	r3, [r7, #2]
 219:../src/interrupt_defs.cpp **** 
 220:../src/interrupt_defs.cpp **** 		NVIC_Init(&nv);
 616              		.loc 1 220 0
 617 05ba 3B46     		mov	r3, r7
 618 05bc 1846     		mov	r0, r3
 619 05be FFF7FEFF 		bl	NVIC_Init
 620              	.LBE3:
 221:../src/interrupt_defs.cpp **** 
 222:../src/interrupt_defs.cpp **** 	}
 621              		.loc 1 222 0
 622 05c2 07F11807 		add	r7, r7, #24
 623 05c6 BD46     		mov	sp, r7
 624 05c8 80BD     		pop	{r7, pc}
 625              		.cfi_endproc
 626              	.LFE112:
 628 05ca 00BF     		.align	2
 629              		.global	TIM6_DAC_IRQHandler
 630              		.thumb
 631              		.thumb_func
 633              	TIM6_DAC_IRQHandler:
 634              	.LFB113:
 223:../src/interrupt_defs.cpp **** 	void TIM6_DAC_IRQHandler(void)
 224:../src/interrupt_defs.cpp **** 	{
 635              		.loc 1 224 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 1, uses_anonymous_args = 0
 639 05cc 80B5     		push	{r7, lr}
 640              	.LCFI6:
 641              		.cfi_def_cfa_offset 8
 642              		.cfi_offset 7, -8
 643              		.cfi_offset 14, -4
 644 05ce 00AF     		add	r7, sp, #0
 645              	.LCFI7:
 646              		.cfi_def_cfa_register 7
 225:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 647              		.loc 1 225 0
 648 05d0 4FF48050 		mov	r0, #4096
 649 05d4 C4F20000 		movt	r0, 16384
 650 05d8 4FF00101 		mov	r1, #1
 651 05dc FFF7FEFF 		bl	TIM_ClearITPendingBit
 226:../src/interrupt_defs.cpp **** 		GPIO_Write(GPIOE, led_matrix[led_iter] | led_matrix[6-led_iter]);
 652              		.loc 1 226 0
 653 05e0 40F20003 		movw	r3, #:lower16:led_iter
 654 05e4 C0F20003 		movt	r3, #:upper16:led_iter
 655 05e8 1A68     		ldr	r2, [r3, #0]
 656 05ea 40F20003 		movw	r3, #:lower16:led_matrix
 657 05ee C0F20003 		movt	r3, #:upper16:led_matrix
 658 05f2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 659 05f6 9AB2     		uxth	r2, r3
 660 05f8 40F20003 		movw	r3, #:lower16:led_iter
 661 05fc C0F20003 		movt	r3, #:upper16:led_iter
 662 0600 1B68     		ldr	r3, [r3, #0]
 663 0602 C3F10601 		rsb	r1, r3, #6
 664 0606 40F20003 		movw	r3, #:lower16:led_matrix
 665 060a C0F20003 		movt	r3, #:upper16:led_matrix
 666 060e 53F82130 		ldr	r3, [r3, r1, lsl #2]
 667 0612 9BB2     		uxth	r3, r3
 668 0614 1343     		orrs	r3, r3, r2
 669 0616 9BB2     		uxth	r3, r3
 670 0618 9BB2     		uxth	r3, r3
 671 061a 4FF48050 		mov	r0, #4096
 672 061e C4F60000 		movt	r0, 18432
 673 0622 1946     		mov	r1, r3
 674 0624 FFF7FEFF 		bl	GPIO_Write
 227:../src/interrupt_defs.cpp **** 		++led_iter;
 675              		.loc 1 227 0
 676 0628 40F20003 		movw	r3, #:lower16:led_iter
 677 062c C0F20003 		movt	r3, #:upper16:led_iter
 678 0630 1B68     		ldr	r3, [r3, #0]
 679 0632 03F10102 		add	r2, r3, #1
 680 0636 40F20003 		movw	r3, #:lower16:led_iter
 681 063a C0F20003 		movt	r3, #:upper16:led_iter
 682 063e 1A60     		str	r2, [r3, #0]
 228:../src/interrupt_defs.cpp **** 		if(led_iter > 6)
 683              		.loc 1 228 0
 684 0640 40F20003 		movw	r3, #:lower16:led_iter
 685 0644 C0F20003 		movt	r3, #:upper16:led_iter
 686 0648 1B68     		ldr	r3, [r3, #0]
 687 064a 062B     		cmp	r3, #6
 688 064c D4BF     		ite	le
 689 064e 0023     		movle	r3, #0
 690 0650 0123     		movgt	r3, #1
 691 0652 DBB2     		uxtb	r3, r3
 692 0654 002B     		cmp	r3, #0
 693 0656 06D0     		beq	.L36
 229:../src/interrupt_defs.cpp **** 		{
 230:../src/interrupt_defs.cpp **** 			led_iter = 0;
 694              		.loc 1 230 0
 695 0658 40F20003 		movw	r3, #:lower16:led_iter
 696 065c C0F20003 		movt	r3, #:upper16:led_iter
 697 0660 4FF00002 		mov	r2, #0
 698 0664 1A60     		str	r2, [r3, #0]
 699              	.L36:
 231:../src/interrupt_defs.cpp **** 		}
 232:../src/interrupt_defs.cpp **** 	}
 700              		.loc 1 232 0
 701 0666 80BD     		pop	{r7, pc}
 702              		.cfi_endproc
 703              	.LFE113:
 705              		.align	2
 706              		.global	ADC1_2_IRQHandler
 707              		.thumb
 708              		.thumb_func
 710              	ADC1_2_IRQHandler:
 711              	.LFB114:
 233:../src/interrupt_defs.cpp **** 	void ADC1_2_IRQHandler(void)
 234:../src/interrupt_defs.cpp **** 	{
 712              		.loc 1 234 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 0
 715              		@ frame_needed = 1, uses_anonymous_args = 0
 716 0668 80B5     		push	{r7, lr}
 717              	.LCFI8:
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 066a 00AF     		add	r7, sp, #0
 722              	.LCFI9:
 723              		.cfi_def_cfa_register 7
 235:../src/interrupt_defs.cpp **** 		if(ADC_GetITStatus(ADC1, ADC_IT_EOC) == SET)
 724              		.loc 1 235 0
 725 066c 4FF0A040 		mov	r0, #1342177280
 726 0670 4FF00401 		mov	r1, #4
 727 0674 FFF7FEFF 		bl	ADC_GetITStatus
 728 0678 0346     		mov	r3, r0
 729 067a 012B     		cmp	r3, #1
 730 067c 14BF     		ite	ne
 731 067e 0023     		movne	r3, #0
 732 0680 0123     		moveq	r3, #1
 733 0682 DBB2     		uxtb	r3, r3
 734 0684 002B     		cmp	r3, #0
 735 0686 10D0     		beq	.L38
 236:../src/interrupt_defs.cpp **** 		{
 237:../src/interrupt_defs.cpp **** 			adcval = ADC_GetConversionValue(ADC1);
 736              		.loc 1 237 0
 737 0688 4FF0A040 		mov	r0, #1342177280
 738 068c FFF7FEFF 		bl	ADC_GetConversionValue
 739 0690 0346     		mov	r3, r0
 740 0692 1A46     		mov	r2, r3
 741 0694 40F20003 		movw	r3, #:lower16:adcval
 742 0698 C0F20003 		movt	r3, #:upper16:adcval
 743 069c 1A60     		str	r2, [r3, #0]
 238:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 744              		.loc 1 238 0
 745 069e 4FF0A040 		mov	r0, #1342177280
 746 06a2 4FF00401 		mov	r1, #4
 747 06a6 FFF7FEFF 		bl	ADC_ClearITPendingBit
 748              	.L38:
 239:../src/interrupt_defs.cpp **** 		}
 240:../src/interrupt_defs.cpp **** 	}
 749              		.loc 1 240 0
 750 06aa 80BD     		pop	{r7, pc}
 751              		.cfi_endproc
 752              	.LFE114:
 754              		.align	2
 755              		.global	DMA1_Channel1_IRQHandler
 756              		.thumb
 757              		.thumb_func
 759              	DMA1_Channel1_IRQHandler:
 760              	.LFB115:
 241:../src/interrupt_defs.cpp **** 
 242:../src/interrupt_defs.cpp **** 	void DMA1_Channel1_IRQHandler(void)
 243:../src/interrupt_defs.cpp **** 	{
 761              		.loc 1 243 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765 06ac 80B5     		push	{r7, lr}
 766              	.LCFI10:
 767              		.cfi_def_cfa_offset 8
 768              		.cfi_offset 7, -8
 769              		.cfi_offset 14, -4
 770 06ae 00AF     		add	r7, sp, #0
 771              	.LCFI11:
 772              		.cfi_def_cfa_register 7
 244:../src/interrupt_defs.cpp **** 		DMA_ClearITPendingBit(DMA1_IT_TC1);
 773              		.loc 1 244 0
 774 06b0 4FF00200 		mov	r0, #2
 775 06b4 FFF7FEFF 		bl	DMA_ClearITPendingBit
 245:../src/interrupt_defs.cpp **** 		new_data = 1;
 776              		.loc 1 245 0
 777 06b8 40F20003 		movw	r3, #:lower16:new_data
 778 06bc C0F20003 		movt	r3, #:upper16:new_data
 779 06c0 4FF00102 		mov	r2, #1
 780 06c4 1A60     		str	r2, [r3, #0]
 246:../src/interrupt_defs.cpp **** 	}
 781              		.loc 1 246 0
 782 06c6 80BD     		pop	{r7, pc}
 783              		.cfi_endproc
 784              	.LFE115:
 786              		.align	2
 787              		.global	DMA2_Channel1_IRQHandler
 788              		.thumb
 789              		.thumb_func
 791              	DMA2_Channel1_IRQHandler:
 792              	.LFB116:
 247:../src/interrupt_defs.cpp **** 
 248:../src/interrupt_defs.cpp **** 	void DMA2_Channel1_IRQHandler(void)
 249:../src/interrupt_defs.cpp **** 	{
 793              		.loc 1 249 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 0
 796              		@ frame_needed = 1, uses_anonymous_args = 0
 797 06c8 80B5     		push	{r7, lr}
 798              	.LCFI12:
 799              		.cfi_def_cfa_offset 8
 800              		.cfi_offset 7, -8
 801              		.cfi_offset 14, -4
 802 06ca 00AF     		add	r7, sp, #0
 803              	.LCFI13:
 804              		.cfi_def_cfa_register 7
 250:../src/interrupt_defs.cpp **** 		DMA_ClearITPendingBit(DMA2_IT_TC1);
 805              		.loc 1 250 0
 806 06cc 4FF00200 		mov	r0, #2
 807 06d0 C1F20000 		movt	r0, 4096
 808 06d4 FFF7FEFF 		bl	DMA_ClearITPendingBit
 251:../src/interrupt_defs.cpp **** 		adc2_new_data = 1;
 809              		.loc 1 251 0
 810 06d8 40F20003 		movw	r3, #:lower16:adc2_new_data
 811 06dc C0F20003 		movt	r3, #:upper16:adc2_new_data
 812 06e0 4FF00102 		mov	r2, #1
 813 06e4 1A70     		strb	r2, [r3, #0]
 252:../src/interrupt_defs.cpp **** 	}
 814              		.loc 1 252 0
 815 06e6 80BD     		pop	{r7, pc}
 816              		.cfi_endproc
 817              	.LFE116:
 819              		.align	2
 820              		.global	ADC3_IRQHandler
 821              		.thumb
 822              		.thumb_func
 824              	ADC3_IRQHandler:
 825              	.LFB117:
 253:../src/interrupt_defs.cpp **** 
 254:../src/interrupt_defs.cpp **** 	void ADC3_IRQHandler(void)
 255:../src/interrupt_defs.cpp **** 	{
 826              		.loc 1 255 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 8
 829              		@ frame_needed = 1, uses_anonymous_args = 0
 830 06e8 80B5     		push	{r7, lr}
 831              	.LCFI14:
 832              		.cfi_def_cfa_offset 8
 833              		.cfi_offset 7, -8
 834              		.cfi_offset 14, -4
 835 06ea 82B0     		sub	sp, sp, #8
 836              	.LCFI15:
 837              		.cfi_def_cfa_offset 16
 838 06ec 00AF     		add	r7, sp, #0
 839              	.LCFI16:
 840              		.cfi_def_cfa_register 7
 841              	.LBB4:
 256:../src/interrupt_defs.cpp **** 		int i = 0;
 842              		.loc 1 256 0
 843 06ee 4FF00003 		mov	r3, #0
 844 06f2 7B60     		str	r3, [r7, #4]
 257:../src/interrupt_defs.cpp **** 		int sum = 0;
 845              		.loc 1 257 0
 846 06f4 4FF00003 		mov	r3, #0
 847 06f8 3B60     		str	r3, [r7, #0]
 258:../src/interrupt_defs.cpp **** 		if(ADC_GetITStatus(ADC3, ADC_IT_AWD1) != RESET)
 848              		.loc 1 258 0
 849 06fa 4FF48060 		mov	r0, #1024
 850 06fe C5F20000 		movt	r0, 20480
 851 0702 4FF08001 		mov	r1, #128
 852 0706 FFF7FEFF 		bl	ADC_GetITStatus
 853 070a 0346     		mov	r3, r0
 854 070c 002B     		cmp	r3, #0
 855 070e 0CBF     		ite	eq
 856 0710 0023     		moveq	r3, #0
 857 0712 0123     		movne	r3, #1
 858 0714 DBB2     		uxtb	r3, r3
 859 0716 002B     		cmp	r3, #0
 860 0718 38D0     		beq	.L43
 259:../src/interrupt_defs.cpp **** 		{
 260:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD1);
 861              		.loc 1 260 0
 862 071a 4FF48060 		mov	r0, #1024
 863 071e C5F20000 		movt	r0, 20480
 864 0722 4FF08001 		mov	r1, #128
 865 0726 FFF7FEFF 		bl	ADC_ClearITPendingBit
 261:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 866              		.loc 1 261 0
 867 072a 4FF00003 		mov	r3, #0
 868 072e 7B60     		str	r3, [r7, #4]
 869 0730 0DE0     		b	.L44
 870              	.L45:
 262:../src/interrupt_defs.cpp **** 			{
 263:../src/interrupt_defs.cpp **** 				sum += ADC_GetConversionValue(ADC3);
 871              		.loc 1 263 0 discriminator 2
 872 0732 4FF48060 		mov	r0, #1024
 873 0736 C5F20000 		movt	r0, 20480
 874 073a FFF7FEFF 		bl	ADC_GetConversionValue
 875 073e 0346     		mov	r3, r0
 876 0740 3A68     		ldr	r2, [r7, #0]
 877 0742 D318     		adds	r3, r2, r3
 878 0744 3B60     		str	r3, [r7, #0]
 261:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 879              		.loc 1 261 0 discriminator 2
 880 0746 7B68     		ldr	r3, [r7, #4]
 881 0748 03F10103 		add	r3, r3, #1
 882 074c 7B60     		str	r3, [r7, #4]
 883              	.L44:
 261:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 884              		.loc 1 261 0 is_stmt 0 discriminator 1
 885 074e 7B68     		ldr	r3, [r7, #4]
 886 0750 222B     		cmp	r3, #34
 887 0752 CCBF     		ite	gt
 888 0754 0023     		movgt	r3, #0
 889 0756 0123     		movle	r3, #1
 890 0758 DBB2     		uxtb	r3, r3
 891 075a 002B     		cmp	r3, #0
 892 075c E9D1     		bne	.L45
 264:../src/interrupt_defs.cpp **** 			}
 265:../src/interrupt_defs.cpp **** 			if((float)sum/float(35) > 2048)
 893              		.loc 1 265 0 is_stmt 1
 894 075e D7ED007A 		flds	s15, [r7, #0]	@ int
 895 0762 B8EEE77A 		fsitos	s14, s15
 896 0766 DFED1B7A 		flds	s15, .L49
 897 076a 87EE277A 		fdivs	s14, s14, s15
 898 076e DFED1A7A 		flds	s15, .L49+4
 899 0772 B4EEE77A 		fcmpes	s14, s15
 900 0776 F1EE10FA 		fmstat
 901 077a 26DD     		ble	.L42
 902              	.L48:
 266:../src/interrupt_defs.cpp **** 			{
 267:../src/interrupt_defs.cpp **** 				adc3_awd1 = 1;
 903              		.loc 1 267 0
 904 077c 40F20003 		movw	r3, #:lower16:adc3_awd1
 905 0780 C0F20003 		movt	r3, #:upper16:adc3_awd1
 906 0784 4FF00102 		mov	r2, #1
 907 0788 1A70     		strb	r2, [r3, #0]
 908 078a 1EE0     		b	.L42
 909              	.L43:
 268:../src/interrupt_defs.cpp **** 			}
 269:../src/interrupt_defs.cpp **** 		}
 270:../src/interrupt_defs.cpp **** 		else if (ADC_GetITStatus(ADC3, ADC_IT_AWD2) != RESET)
 910              		.loc 1 270 0
 911 078c 4FF48060 		mov	r0, #1024
 912 0790 C5F20000 		movt	r0, 20480
 913 0794 4FF48071 		mov	r1, #256
 914 0798 FFF7FEFF 		bl	ADC_GetITStatus
 915 079c 0346     		mov	r3, r0
 916 079e 002B     		cmp	r3, #0
 917 07a0 0CBF     		ite	eq
 918 07a2 0023     		moveq	r3, #0
 919 07a4 0123     		movne	r3, #1
 920 07a6 DBB2     		uxtb	r3, r3
 921 07a8 002B     		cmp	r3, #0
 922 07aa 0ED0     		beq	.L42
 271:../src/interrupt_defs.cpp **** 		{
 272:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD2);
 923              		.loc 1 272 0
 924 07ac 4FF48060 		mov	r0, #1024
 925 07b0 C5F20000 		movt	r0, 20480
 926 07b4 4FF48071 		mov	r1, #256
 927 07b8 FFF7FEFF 		bl	ADC_ClearITPendingBit
 273:../src/interrupt_defs.cpp **** 			adc3_awd2 = 1;
 928              		.loc 1 273 0
 929 07bc 40F20003 		movw	r3, #:lower16:adc3_awd2
 930 07c0 C0F20003 		movt	r3, #:upper16:adc3_awd2
 931 07c4 4FF00102 		mov	r2, #1
 932 07c8 1A70     		strb	r2, [r3, #0]
 933              	.L42:
 934              	.LBE4:
 274:../src/interrupt_defs.cpp **** 		}
 275:../src/interrupt_defs.cpp **** 	}
 935              		.loc 1 275 0
 936 07ca 07F10807 		add	r7, r7, #8
 937 07ce BD46     		mov	sp, r7
 938 07d0 80BD     		pop	{r7, pc}
 939              	.L50:
 940 07d2 00BF     		.align	2
 941              	.L49:
 942 07d4 00000C42 		.word	1108082688
 943 07d8 00000045 		.word	1157627904
 944              		.cfi_endproc
 945              	.LFE117:
 947              		.align	2
 948              		.global	EXTI9_5_IRQHandler
 949              		.thumb
 950              		.thumb_func
 952              	EXTI9_5_IRQHandler:
 953              	.LFB118:
 276:../src/interrupt_defs.cpp **** 
 277:../src/interrupt_defs.cpp **** 	void EXTI9_5_IRQHandler(void)//EXTI5_IRQHandler(void)
 278:../src/interrupt_defs.cpp **** 	{
 954              		.loc 1 278 0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 16
 957              		@ frame_needed = 1, uses_anonymous_args = 0
 958 07dc 80B5     		push	{r7, lr}
 959              	.LCFI17:
 960              		.cfi_def_cfa_offset 8
 961              		.cfi_offset 7, -8
 962              		.cfi_offset 14, -4
 963 07de 84B0     		sub	sp, sp, #16
 964              	.LCFI18:
 965              		.cfi_def_cfa_offset 24
 966 07e0 00AF     		add	r7, sp, #0
 967              	.LCFI19:
 968              		.cfi_def_cfa_register 7
 969              	.LBB5:
 279:../src/interrupt_defs.cpp **** 		EXTI_ClearITPendingBit(EXTI_Line9);
 970              		.loc 1 279 0
 971 07e2 4FF00900 		mov	r0, #9
 972 07e6 FFF7FEFF 		bl	EXTI_ClearITPendingBit
 973              	.LBB6:
 280:../src/interrupt_defs.cpp **** 		if(stage == 0)
 974              		.loc 1 280 0
 975 07ea 40F20003 		movw	r3, #:lower16:stage
 976 07ee C0F20003 		movt	r3, #:upper16:stage
 977 07f2 1B68     		ldr	r3, [r3, #0]
 978 07f4 002B     		cmp	r3, #0
 979 07f6 24D1     		bne	.L52
 980              	.LBB7:
 281:../src/interrupt_defs.cpp **** 		{
 282:../src/interrupt_defs.cpp **** 			TIM_SetCounter(TIM2, 0);
 981              		.loc 1 282 0
 982 07f8 4FF08040 		mov	r0, #1073741824
 983 07fc 4FF00001 		mov	r1, #0
 984 0800 FFF7FEFF 		bl	TIM_SetCounter
 283:../src/interrupt_defs.cpp **** 			TIM_Cmd(TIM2, ENABLE);
 985              		.loc 1 283 0
 986 0804 4FF08040 		mov	r0, #1073741824
 987 0808 4FF00101 		mov	r1, #1
 988 080c FFF7FEFF 		bl	TIM_Cmd
 284:../src/interrupt_defs.cpp **** 
 285:../src/interrupt_defs.cpp **** 			EXTI_InitTypeDef e;
 286:../src/interrupt_defs.cpp **** 
 287:../src/interrupt_defs.cpp **** 			e.EXTI_Line = EXTI_Line9;
 989              		.loc 1 287 0
 990 0810 4FF00903 		mov	r3, #9
 991 0814 BB60     		str	r3, [r7, #8]
 288:../src/interrupt_defs.cpp **** 			e.EXTI_LineCmd = ENABLE;
 992              		.loc 1 288 0
 993 0816 4FF00103 		mov	r3, #1
 994 081a BB73     		strb	r3, [r7, #14]
 289:../src/interrupt_defs.cpp **** 			e.EXTI_Mode = EXTI_Mode_Interrupt;
 995              		.loc 1 289 0
 996 081c 4FF00003 		mov	r3, #0
 997 0820 3B73     		strb	r3, [r7, #12]
 290:../src/interrupt_defs.cpp **** 			e.EXTI_Trigger = EXTI_Trigger_Falling;
 998              		.loc 1 290 0
 999 0822 4FF00C03 		mov	r3, #12
 1000 0826 7B73     		strb	r3, [r7, #13]
 291:../src/interrupt_defs.cpp **** 
 292:../src/interrupt_defs.cpp **** 			EXTI_Init(&e);
 1001              		.loc 1 292 0
 1002 0828 07F10803 		add	r3, r7, #8
 1003 082c 1846     		mov	r0, r3
 1004 082e FFF7FEFF 		bl	EXTI_Init
 293:../src/interrupt_defs.cpp **** 
 294:../src/interrupt_defs.cpp **** 			stage = 1;
 1005              		.loc 1 294 0
 1006 0832 40F20003 		movw	r3, #:lower16:stage
 1007 0836 C0F20003 		movt	r3, #:upper16:stage
 1008 083a 4FF00102 		mov	r2, #1
 1009 083e 1A60     		str	r2, [r3, #0]
 1010 0840 2FE0     		b	.L51
 1011              	.L52:
 1012              	.LBE7:
 1013              	.LBB8:
 1014              	.LBB9:
 295:../src/interrupt_defs.cpp **** 			return;
 296:../src/interrupt_defs.cpp **** 		}
 297:../src/interrupt_defs.cpp **** 		else if(stage == 1)
 1015              		.loc 1 297 0
 1016 0842 40F20003 		movw	r3, #:lower16:stage
 1017 0846 C0F20003 		movt	r3, #:upper16:stage
 1018 084a 1B68     		ldr	r3, [r3, #0]
 1019 084c 012B     		cmp	r3, #1
 1020 084e 28D1     		bne	.L51
 1021              	.LBB10:
 298:../src/interrupt_defs.cpp **** 		{
 299:../src/interrupt_defs.cpp **** 			count = TIM_GetCounter(TIM2);
 1022              		.loc 1 299 0
 1023 0850 4FF08040 		mov	r0, #1073741824
 1024 0854 FFF7FEFF 		bl	TIM_GetCounter
 1025 0858 0346     		mov	r3, r0
 1026 085a 1A46     		mov	r2, r3
 1027 085c 40F20003 		movw	r3, #:lower16:count
 1028 0860 C0F20003 		movt	r3, #:upper16:count
 1029 0864 1A60     		str	r2, [r3, #0]
 300:../src/interrupt_defs.cpp **** 			TIM_Cmd(TIM2, DISABLE);
 1030              		.loc 1 300 0
 1031 0866 4FF08040 		mov	r0, #1073741824
 1032 086a 4FF00001 		mov	r1, #0
 1033 086e FFF7FEFF 		bl	TIM_Cmd
 301:../src/interrupt_defs.cpp **** 
 302:../src/interrupt_defs.cpp **** 			NVIC_InitTypeDef nv;
 303:../src/interrupt_defs.cpp **** 
 304:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannel = EXTI9_5_IRQn;
 1034              		.loc 1 304 0
 1035 0872 4FF01703 		mov	r3, #23
 1036 0876 3B71     		strb	r3, [r7, #4]
 305:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelCmd = DISABLE;
 1037              		.loc 1 305 0
 1038 0878 4FF00003 		mov	r3, #0
 1039 087c FB71     		strb	r3, [r7, #7]
 306:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelPreemptionPriority = 0;
 1040              		.loc 1 306 0
 1041 087e 4FF00003 		mov	r3, #0
 1042 0882 7B71     		strb	r3, [r7, #5]
 307:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelSubPriority = 0;
 1043              		.loc 1 307 0
 1044 0884 4FF00003 		mov	r3, #0
 1045 0888 BB71     		strb	r3, [r7, #6]
 308:../src/interrupt_defs.cpp **** 
 309:../src/interrupt_defs.cpp **** 			NVIC_Init(&nv);
 1046              		.loc 1 309 0
 1047 088a 07F10403 		add	r3, r7, #4
 1048 088e 1846     		mov	r0, r3
 1049 0890 FFF7FEFF 		bl	NVIC_Init
 310:../src/interrupt_defs.cpp **** 
 311:../src/interrupt_defs.cpp **** 			stage = 0;
 1050              		.loc 1 311 0
 1051 0894 40F20003 		movw	r3, #:lower16:stage
 1052 0898 C0F20003 		movt	r3, #:upper16:stage
 1053 089c 4FF00002 		mov	r2, #0
 1054 08a0 1A60     		str	r2, [r3, #0]
 1055              	.L51:
 1056              	.LBE10:
 1057              	.LBE9:
 1058              	.LBE8:
 1059              	.LBE6:
 1060              	.LBE5:
 312:../src/interrupt_defs.cpp **** 			return;
 313:../src/interrupt_defs.cpp **** 		}
 314:../src/interrupt_defs.cpp **** 	}
 1061              		.loc 1 314 0
 1062 08a2 07F11007 		add	r7, r7, #16
 1063 08a6 BD46     		mov	sp, r7
 1064 08a8 80BD     		pop	{r7, pc}
 1065              		.cfi_endproc
 1066              	.LFE118:
 1068              		.global	__aeabi_f2d
 1069 08aa 00BF     		.align	2
 1070              		.global	update_pid
 1071              		.thumb
 1072              		.thumb_func
 1074              	update_pid:
 1075              	.LFB119:
 315:../src/interrupt_defs.cpp **** 
 316:../src/interrupt_defs.cpp **** 	void update_pid(void)
 317:../src/interrupt_defs.cpp **** 	{
 1076              		.loc 1 317 0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 8
 1079              		@ frame_needed = 1, uses_anonymous_args = 0
 1080 08ac 80B5     		push	{r7, lr}
 1081              	.LCFI20:
 1082              		.cfi_def_cfa_offset 8
 1083              		.cfi_offset 7, -8
 1084              		.cfi_offset 14, -4
 1085 08ae 82B0     		sub	sp, sp, #8
 1086              	.LCFI21:
 1087              		.cfi_def_cfa_offset 16
 1088 08b0 00AF     		add	r7, sp, #0
 1089              	.LCFI22:
 1090              		.cfi_def_cfa_register 7
 1091              	.LBB11:
 318:../src/interrupt_defs.cpp **** 		float mtr_out = 0.50f;
 1092              		.loc 1 318 0
 1093 08b2 4FF07C53 		mov	r3, #1056964608
 1094 08b6 7B60     		str	r3, [r7, #4]	@ float
 319:../src/interrupt_defs.cpp **** 		d_front = ((float)count*(float)0.5*(float)K_ULTRASONIC);
 1095              		.loc 1 319 0
 1096 08b8 40F20003 		movw	r3, #:lower16:count
 1097 08bc C0F20003 		movt	r3, #:upper16:count
 1098 08c0 D3ED007A 		flds	s15, [r3, #0]	@ int
 1099 08c4 B8EEE77A 		fsitos	s14, s15
 1100 08c8 F6EE007A 		fconsts	s15, #96
 1101 08cc 27EE277A 		fmuls	s14, s14, s15
 1102 08d0 DFEDE97A 		flds	s15, .L107+8
 1103 08d4 67EE277A 		fmuls	s15, s14, s15
 1104 08d8 40F20003 		movw	r3, #:lower16:d_front
 1105 08dc C0F20003 		movt	r3, #:upper16:d_front
 1106 08e0 C3ED007A 		fsts	s15, [r3, #0]
 320:../src/interrupt_defs.cpp **** 
 321:../src/interrupt_defs.cpp **** 		if(state == ST_HOMING)
 1107              		.loc 1 321 0
 1108 08e4 40F20003 		movw	r3, #:lower16:state
 1109 08e8 C0F20003 		movt	r3, #:upper16:state
 1110 08ec 1B68     		ldr	r3, [r3, #0]
 1111 08ee 012B     		cmp	r3, #1
 1112 08f0 40F03181 		bne	.L55
 322:../src/interrupt_defs.cpp **** 		{
 323:../src/interrupt_defs.cpp **** 			err = (float)(1.0) * (float)((int)adcData[0] - (int)adc2_data[2]);// + (float)450*((float)adcDat
 1113              		.loc 1 323 0
 1114 08f4 40F20003 		movw	r3, #:lower16:adcData
 1115 08f8 C0F20003 		movt	r3, #:upper16:adcData
 1116 08fc 1B68     		ldr	r3, [r3, #0]
 1117 08fe 1A46     		mov	r2, r3
 1118 0900 40F20003 		movw	r3, #:lower16:adc2_data
 1119 0904 C0F20003 		movt	r3, #:upper16:adc2_data
 1120 0908 9B68     		ldr	r3, [r3, #8]
 1121 090a D31A     		subs	r3, r2, r3
 1122 090c 07EE103A 		fmsr	s14, r3	@ int
 1123 0910 F8EEC77A 		fsitos	s15, s14
 1124 0914 40F20003 		movw	r3, #:lower16:err
 1125 0918 C0F20003 		movt	r3, #:upper16:err
 1126 091c C3ED007A 		fsts	s15, [r3, #0]
 324:../src/interrupt_defs.cpp **** 			if(err > -140 && err < 140)
 1127              		.loc 1 324 0
 1128 0920 40F20003 		movw	r3, #:lower16:err
 1129 0924 C0F20003 		movt	r3, #:upper16:err
 1130 0928 93ED007A 		flds	s14, [r3, #0]
 1131 092c DFEDD37A 		flds	s15, .L107+12
 1132 0930 B4EEE77A 		fcmpes	s14, s15
 1133 0934 F1EE10FA 		fmstat
 1134 0938 1CDD     		ble	.L56
 1135              	.L87:
 1136              		.loc 1 324 0 is_stmt 0 discriminator 1
 1137 093a 40F20003 		movw	r3, #:lower16:err
 1138 093e C0F20003 		movt	r3, #:upper16:err
 1139 0942 93ED007A 		flds	s14, [r3, #0]
 1140 0946 DFEDCE7A 		flds	s15, .L107+16
 1141 094a B4EEE77A 		fcmpes	s14, s15
 1142 094e F1EE10FA 		fmstat
 1143 0952 0FD5     		bpl	.L56
 1144              	.L88:
 325:../src/interrupt_defs.cpp **** 			{
 326:../src/interrupt_defs.cpp **** 				pwm1_output(0.50f);
 1145              		.loc 1 326 0 is_stmt 1
 1146 0954 4FF07C50 		mov	r0, #1056964608
 1147 0958 FFF7FEFF 		bl	_Z11pwm1_outputf
 327:../src/interrupt_defs.cpp **** 				pwm2_output(0.50f);
 1148              		.loc 1 327 0
 1149 095c 4FF07C50 		mov	r0, #1056964608
 1150 0960 FFF7FEFF 		bl	_Z11pwm2_outputf
 328:../src/interrupt_defs.cpp **** 				state = ST_FIREFIGHT;
 1151              		.loc 1 328 0
 1152 0964 40F20003 		movw	r3, #:lower16:state
 1153 0968 C0F20003 		movt	r3, #:upper16:state
 1154 096c 4FF00202 		mov	r2, #2
 1155 0970 1A60     		str	r2, [r3, #0]
 329:../src/interrupt_defs.cpp **** 				return;
 1156              		.loc 1 329 0
 1157 0972 73E2     		b	.L54
 1158              	.L56:
 330:../src/interrupt_defs.cpp **** 			}
 331:../src/interrupt_defs.cpp **** 
 332:../src/interrupt_defs.cpp **** 			diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 1159              		.loc 1 332 0
 1160 0974 40F20003 		movw	r3, #:lower16:err
 1161 0978 C0F20003 		movt	r3, #:upper16:err
 1162 097c 93ED007A 		flds	s14, [r3, #0]
 1163 0980 40F20003 		movw	r3, #:lower16:last_err
 1164 0984 C0F20003 		movt	r3, #:upper16:last_err
 1165 0988 D3ED007A 		flds	s15, [r3, #0]
 1166 098c 37EE677A 		fsubs	s14, s14, s15
 1167 0990 DFEDBC7A 		flds	s15, .L107+20
 1168 0994 67EE277A 		fmuls	s15, s14, s15
 1169 0998 40F20003 		movw	r3, #:lower16:diff_err
 1170 099c C0F20003 		movt	r3, #:upper16:diff_err
 1171 09a0 C3ED007A 		fsts	s15, [r3, #0]
 333:../src/interrupt_defs.cpp **** 			integral =0;//+= err * 0.04f;
 1172              		.loc 1 333 0
 1173 09a4 40F20003 		movw	r3, #:lower16:integral
 1174 09a8 C0F20003 		movt	r3, #:upper16:integral
 1175 09ac 4FF00002 		mov	r2, #0
 1176 09b0 1A60     		str	r2, [r3, #0]	@ float
 334:../src/interrupt_defs.cpp **** 			drive_cmd = (((float)(err)/(float)500) + ((float)diff_err/(float)1444));// + ((float)integral/(f
 1177              		.loc 1 334 0
 1178 09b2 40F20003 		movw	r3, #:lower16:err
 1179 09b6 C0F20003 		movt	r3, #:upper16:err
 1180 09ba 93ED007A 		flds	s14, [r3, #0]
 1181 09be DFEDB27A 		flds	s15, .L107+24
 1182 09c2 87EE277A 		fdivs	s14, s14, s15
 1183 09c6 40F20003 		movw	r3, #:lower16:diff_err
 1184 09ca C0F20003 		movt	r3, #:upper16:diff_err
 1185 09ce D3ED006A 		flds	s13, [r3, #0]
 1186 09d2 DFEDAE7A 		flds	s15, .L107+28
 1187 09d6 C6EEA77A 		fdivs	s15, s13, s15
 1188 09da 77EE277A 		fadds	s15, s14, s15
 1189 09de 40F20003 		movw	r3, #:lower16:drive_cmd
 1190 09e2 C0F20003 		movt	r3, #:upper16:drive_cmd
 1191 09e6 C3ED007A 		fsts	s15, [r3, #0]
 335:../src/interrupt_defs.cpp **** //			drive_cmd = err/(float)5500;
 336:../src/interrupt_defs.cpp **** 
 337:../src/interrupt_defs.cpp **** 			rt = 0.0f;
 1192              		.loc 1 337 0
 1193 09ea 40F20003 		movw	r3, #:lower16:rt
 1194 09ee C0F20003 		movt	r3, #:upper16:rt
 1195 09f2 4FF00002 		mov	r2, #0
 1196 09f6 1A60     		str	r2, [r3, #0]	@ float
 338:../src/interrupt_defs.cpp **** 			mtr_out = 0.5f;
 1197              		.loc 1 338 0
 1198 09f8 4FF07C53 		mov	r3, #1056964608
 1199 09fc 7B60     		str	r3, [r7, #4]	@ float
 339:../src/interrupt_defs.cpp **** 
 340:../src/interrupt_defs.cpp **** 			if(drive_cmd > 0.5)
 1200              		.loc 1 340 0
 1201 09fe 40F20003 		movw	r3, #:lower16:drive_cmd
 1202 0a02 C0F20003 		movt	r3, #:upper16:drive_cmd
 1203 0a06 93ED007A 		flds	s14, [r3, #0]
 1204 0a0a F6EE007A 		fconsts	s15, #96
 1205 0a0e B4EEE77A 		fcmpes	s14, s15
 1206 0a12 F1EE10FA 		fmstat
 1207 0a16 06DD     		ble	.L60
 1208              	.L89:
 341:../src/interrupt_defs.cpp **** 			{
 342:../src/interrupt_defs.cpp **** 				drive_cmd = 0.5f;
 1209              		.loc 1 342 0
 1210 0a18 40F20003 		movw	r3, #:lower16:drive_cmd
 1211 0a1c C0F20003 		movt	r3, #:upper16:drive_cmd
 1212 0a20 4FF07C52 		mov	r2, #1056964608
 1213 0a24 1A60     		str	r2, [r3, #0]	@ float
 1214              	.L60:
 343:../src/interrupt_defs.cpp **** 			}
 344:../src/interrupt_defs.cpp **** 			if(drive_cmd < -0.5)
 1215              		.loc 1 344 0
 1216 0a26 40F20003 		movw	r3, #:lower16:drive_cmd
 1217 0a2a C0F20003 		movt	r3, #:upper16:drive_cmd
 1218 0a2e 93ED007A 		flds	s14, [r3, #0]
 1219 0a32 FEEE007A 		fconsts	s15, #224
 1220 0a36 B4EEE77A 		fcmpes	s14, s15
 1221 0a3a F1EE10FA 		fmstat
 1222 0a3e 06D5     		bpl	.L62
 1223              	.L90:
 345:../src/interrupt_defs.cpp **** 			{
 346:../src/interrupt_defs.cpp **** 				drive_cmd = -0.5f;
 1224              		.loc 1 346 0
 1225 0a40 40F20003 		movw	r3, #:lower16:drive_cmd
 1226 0a44 C0F20003 		movt	r3, #:upper16:drive_cmd
 1227 0a48 4FF03F42 		mov	r2, #-1090519040
 1228 0a4c 1A60     		str	r2, [r3, #0]	@ float
 1229              	.L62:
 347:../src/interrupt_defs.cpp **** 			}
 348:../src/interrupt_defs.cpp **** 
 349:../src/interrupt_defs.cpp **** 			left = (1-mtr_out) - drive_cmd - rt;
 1230              		.loc 1 349 0
 1231 0a4e B7EE007A 		fconsts	s14, #112
 1232 0a52 D7ED017A 		flds	s15, [r7, #4]
 1233 0a56 37EE677A 		fsubs	s14, s14, s15
 1234 0a5a 40F20003 		movw	r3, #:lower16:drive_cmd
 1235 0a5e C0F20003 		movt	r3, #:upper16:drive_cmd
 1236 0a62 D3ED007A 		flds	s15, [r3, #0]
 1237 0a66 37EE677A 		fsubs	s14, s14, s15
 1238 0a6a 40F20003 		movw	r3, #:lower16:rt
 1239 0a6e C0F20003 		movt	r3, #:upper16:rt
 1240 0a72 D3ED007A 		flds	s15, [r3, #0]
 1241 0a76 77EE677A 		fsubs	s15, s14, s15
 1242 0a7a 40F20003 		movw	r3, #:lower16:left
 1243 0a7e C0F20003 		movt	r3, #:upper16:left
 1244 0a82 C3ED007A 		fsts	s15, [r3, #0]
 350:../src/interrupt_defs.cpp **** 			right = mtr_out - drive_cmd - rt;
 1245              		.loc 1 350 0
 1246 0a86 40F20003 		movw	r3, #:lower16:drive_cmd
 1247 0a8a C0F20003 		movt	r3, #:upper16:drive_cmd
 1248 0a8e D3ED007A 		flds	s15, [r3, #0]
 1249 0a92 97ED017A 		flds	s14, [r7, #4]
 1250 0a96 37EE677A 		fsubs	s14, s14, s15
 1251 0a9a 40F20003 		movw	r3, #:lower16:rt
 1252 0a9e C0F20003 		movt	r3, #:upper16:rt
 1253 0aa2 D3ED007A 		flds	s15, [r3, #0]
 1254 0aa6 77EE677A 		fsubs	s15, s14, s15
 1255 0aaa 40F20003 		movw	r3, #:lower16:right
 1256 0aae C0F20003 		movt	r3, #:upper16:right
 1257 0ab2 C3ED007A 		fsts	s15, [r3, #0]
 351:../src/interrupt_defs.cpp **** 
 352:../src/interrupt_defs.cpp **** 			if(left>1.0)
 1258              		.loc 1 352 0
 1259 0ab6 40F20003 		movw	r3, #:lower16:left
 1260 0aba C0F20003 		movt	r3, #:upper16:left
 1261 0abe 93ED007A 		flds	s14, [r3, #0]
 1262 0ac2 F7EE007A 		fconsts	s15, #112
 1263 0ac6 B4EEE77A 		fcmpes	s14, s15
 1264 0aca F1EE10FA 		fmstat
 1265 0ace 07DD     		ble	.L102
 1266              	.L91:
 353:../src/interrupt_defs.cpp **** 			{
 354:../src/interrupt_defs.cpp **** 				left=1.0;
 1267              		.loc 1 354 0
 1268 0ad0 40F20003 		movw	r3, #:lower16:left
 1269 0ad4 C0F20003 		movt	r3, #:upper16:left
 1270 0ad8 4FF07E52 		mov	r2, #1065353216
 1271 0adc 1A60     		str	r2, [r3, #0]	@ float
 1272 0ade 11E0     		b	.L66
 1273              	.L102:
 355:../src/interrupt_defs.cpp **** 			}
 356:../src/interrupt_defs.cpp **** 			else if(left<0)
 1274              		.loc 1 356 0
 1275 0ae0 40F20003 		movw	r3, #:lower16:left
 1276 0ae4 C0F20003 		movt	r3, #:upper16:left
 1277 0ae8 D3ED007A 		flds	s15, [r3, #0]
 1278 0aec F5EEC07A 		fcmpezs	s15
 1279 0af0 F1EE10FA 		fmstat
 1280 0af4 06D5     		bpl	.L66
 1281              	.L92:
 357:../src/interrupt_defs.cpp **** 			{
 358:../src/interrupt_defs.cpp **** 				left=0;//-1.0;
 1282              		.loc 1 358 0
 1283 0af6 40F20003 		movw	r3, #:lower16:left
 1284 0afa C0F20003 		movt	r3, #:upper16:left
 1285 0afe 4FF00002 		mov	r2, #0
 1286 0b02 1A60     		str	r2, [r3, #0]	@ float
 1287              	.L66:
 359:../src/interrupt_defs.cpp **** 			}
 360:../src/interrupt_defs.cpp **** 
 361:../src/interrupt_defs.cpp **** 			if(right>1.0f)
 1288              		.loc 1 361 0
 1289 0b04 40F20003 		movw	r3, #:lower16:right
 1290 0b08 C0F20003 		movt	r3, #:upper16:right
 1291 0b0c 93ED007A 		flds	s14, [r3, #0]
 1292 0b10 F7EE007A 		fconsts	s15, #112
 1293 0b14 B4EEE77A 		fcmpes	s14, s15
 1294 0b18 F1EE10FA 		fmstat
 1295 0b1c 07DD     		ble	.L103
 1296              	.L93:
 362:../src/interrupt_defs.cpp **** 			{
 363:../src/interrupt_defs.cpp **** 				right=1.0f;
 1297              		.loc 1 363 0
 1298 0b1e 40F20003 		movw	r3, #:lower16:right
 1299 0b22 C0F20003 		movt	r3, #:upper16:right
 1300 0b26 4FF07E52 		mov	r2, #1065353216
 1301 0b2a 1A60     		str	r2, [r3, #0]	@ float
 1302 0b2c 6EE1     		b	.L70
 1303              	.L103:
 364:../src/interrupt_defs.cpp **** 			}
 365:../src/interrupt_defs.cpp **** 			else if(right<0)
 1304              		.loc 1 365 0
 1305 0b2e 40F20003 		movw	r3, #:lower16:right
 1306 0b32 C0F20003 		movt	r3, #:upper16:right
 1307 0b36 D3ED007A 		flds	s15, [r3, #0]
 1308 0b3a F5EEC07A 		fcmpezs	s15
 1309 0b3e F1EE10FA 		fmstat
 1310 0b42 40F16381 		bpl	.L70
 1311              	.L94:
 366:../src/interrupt_defs.cpp **** 			{
 367:../src/interrupt_defs.cpp **** 				right=0;
 1312              		.loc 1 367 0
 1313 0b46 40F20003 		movw	r3, #:lower16:right
 1314 0b4a C0F20003 		movt	r3, #:upper16:right
 1315 0b4e 4FF00002 		mov	r2, #0
 1316 0b52 1A60     		str	r2, [r3, #0]	@ float
 1317 0b54 5AE1     		b	.L70
 1318              	.L55:
 368:../src/interrupt_defs.cpp **** 			}
 369:../src/interrupt_defs.cpp **** 		}
 370:../src/interrupt_defs.cpp **** 		else if(state == ST_WANDER)
 1319              		.loc 1 370 0
 1320 0b56 40F20003 		movw	r3, #:lower16:state
 1321 0b5a C0F20003 		movt	r3, #:upper16:state
 1322 0b5e 1B68     		ldr	r3, [r3, #0]
 1323 0b60 002B     		cmp	r3, #0
 1324 0b62 40F05381 		bne	.L70
 371:../src/interrupt_defs.cpp **** 		{
 372:../src/interrupt_defs.cpp **** 			err = ((float)(0.55)*(float)((int)adc2_data[0] - 2200)) + ((float)(0.45)*(float)((int)adcData[1]
 1325              		.loc 1 372 0
 1326 0b66 40F20003 		movw	r3, #:lower16:adc2_data
 1327 0b6a C0F20003 		movt	r3, #:upper16:adc2_data
 1328 0b6e 1B68     		ldr	r3, [r3, #0]
 1329 0b70 A3F69803 		subw	r3, r3, #2200
 1330 0b74 07EE903A 		fmsr	s15, r3	@ int
 1331 0b78 B8EEE77A 		fsitos	s14, s15
 1332 0b7c DFED447A 		flds	s15, .L107+32
 1333 0b80 27EE277A 		fmuls	s14, s14, s15
 1334 0b84 40F20003 		movw	r3, #:lower16:adcData
 1335 0b88 C0F20003 		movt	r3, #:upper16:adcData
 1336 0b8c 5B68     		ldr	r3, [r3, #4]
 1337 0b8e A3F19603 		sub	r3, r3, #150
 1338 0b92 07EE903A 		fmsr	s15, r3	@ int
 1339 0b96 F8EEE76A 		fsitos	s13, s15
 1340 0b9a DFED3E7A 		flds	s15, .L107+36
 1341 0b9e 66EEA77A 		fmuls	s15, s13, s15
 1342 0ba2 77EE277A 		fadds	s15, s14, s15
 1343 0ba6 40F20003 		movw	r3, #:lower16:err
 1344 0baa C0F20003 		movt	r3, #:upper16:err
 1345 0bae C3ED007A 		fsts	s15, [r3, #0]
 373:../src/interrupt_defs.cpp **** 
 374:../src/interrupt_defs.cpp **** 		diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 1346              		.loc 1 374 0
 1347 0bb2 40F20003 		movw	r3, #:lower16:err
 1348 0bb6 C0F20003 		movt	r3, #:upper16:err
 1349 0bba 93ED007A 		flds	s14, [r3, #0]
 1350 0bbe 40F20003 		movw	r3, #:lower16:last_err
 1351 0bc2 C0F20003 		movt	r3, #:upper16:last_err
 1352 0bc6 D3ED007A 		flds	s15, [r3, #0]
 1353 0bca 37EE677A 		fsubs	s14, s14, s15
 1354 0bce DFED2D7A 		flds	s15, .L107+20
 1355 0bd2 67EE277A 		fmuls	s15, s14, s15
 1356 0bd6 40F20003 		movw	r3, #:lower16:diff_err
 1357 0bda C0F20003 		movt	r3, #:upper16:diff_err
 1358 0bde C3ED007A 		fsts	s15, [r3, #0]
 375:../src/interrupt_defs.cpp **** 		drive_cmd = (((float)(err)/(float)2500) + ((float)diff_err/(float)3720)); //1100=diff term
 1359              		.loc 1 375 0
 1360 0be2 40F20003 		movw	r3, #:lower16:err
 1361 0be6 C0F20003 		movt	r3, #:upper16:err
 1362 0bea 93ED007A 		flds	s14, [r3, #0]
 1363 0bee DFED2A7A 		flds	s15, .L107+40
 1364 0bf2 87EE277A 		fdivs	s14, s14, s15
 1365 0bf6 40F20003 		movw	r3, #:lower16:diff_err
 1366 0bfa C0F20003 		movt	r3, #:upper16:diff_err
 1367 0bfe D3ED006A 		flds	s13, [r3, #0]
 1368 0c02 DFED267A 		flds	s15, .L107+44
 1369 0c06 C6EEA77A 		fdivs	s15, s13, s15
 1370 0c0a 77EE277A 		fadds	s15, s14, s15
 1371 0c0e 40F20003 		movw	r3, #:lower16:drive_cmd
 1372 0c12 C0F20003 		movt	r3, #:upper16:drive_cmd
 1373 0c16 C3ED007A 		fsts	s15, [r3, #0]
 376:../src/interrupt_defs.cpp **** 
 377:../src/interrupt_defs.cpp **** 		if(d_front < 0.65)//0.6
 1374              		.loc 1 377 0
 1375 0c1a 40F20003 		movw	r3, #:lower16:d_front
 1376 0c1e C0F20003 		movt	r3, #:upper16:d_front
 1377 0c22 1B68     		ldr	r3, [r3, #0]	@ float
 1378 0c24 1846     		mov	r0, r3	@ float
 1379 0c26 FFF7FEFF 		bl	__aeabi_f2d
 1380 0c2a 0246     		mov	r2, r0
 1381 0c2c 0B46     		mov	r3, r1
 1382 0c2e 1046     		mov	r0, r2
 1383 0c30 1946     		mov	r1, r3
 1384 0c32 0FA3     		adr	r3, .L107
 1385 0c34 D3E90023 		ldrd	r2, [r3]
 1386 0c38 FFF7FEFF 		bl	__aeabi_dcmplt
 1387 0c3c 0346     		mov	r3, r0
 1388 0c3e 002B     		cmp	r3, #0
 1389 0c40 2ED0     		beq	.L104
 1390              	.L95:
 378:../src/interrupt_defs.cpp **** 		{
 379:../src/interrupt_defs.cpp **** 			rt = 0.5f;
 1391              		.loc 1 379 0
 1392 0c42 40F20003 		movw	r3, #:lower16:rt
 1393 0c46 C0F20003 		movt	r3, #:upper16:rt
 1394 0c4a 4FF07C52 		mov	r2, #1056964608
 1395 0c4e 1A60     		str	r2, [r3, #0]	@ float
 380:../src/interrupt_defs.cpp **** 			mtr_out = 0.3f;
 1396              		.loc 1 380 0
 1397 0c50 49F69A13 		movw	r3, #39322
 1398 0c54 C3F69963 		movt	r3, 16025
 1399 0c58 7B60     		str	r3, [r7, #4]	@ float
 381:../src/interrupt_defs.cpp **** 			drive_cmd = 0;
 1400              		.loc 1 381 0
 1401 0c5a 40F20003 		movw	r3, #:lower16:drive_cmd
 1402 0c5e C0F20003 		movt	r3, #:upper16:drive_cmd
 1403 0c62 4FF00002 		mov	r2, #0
 1404 0c66 1A60     		str	r2, [r3, #0]	@ float
 1405 0c68 26E0     		b	.L74
 1406              	.L108:
 1407 0c6a 00BFAFF3 		.align	3
 1407      0080
 1408              	.L107:
 1409 0c70 CDCCCCCC 		.word	-858993459
 1410 0c74 CCCCE43F 		.word	1071959244
 1411 0c78 821C943A 		.word	982785154
 1412 0c7c 00000CC3 		.word	-1022623744
 1413 0c80 00000C43 		.word	1124859904
 1414 0c84 CDCCCC3C 		.word	1020054733
 1415 0c88 0000FA43 		.word	1140457472
 1416 0c8c 0080B444 		.word	1152679936
 1417 0c90 CDCC0C3F 		.word	1057803469
 1418 0c94 6666E63E 		.word	1055286886
 1419 0c98 00401C45 		.word	1159479296
 1420 0c9c 00806845 		.word	1164476416
 1421              	.L104:
 382:../src/interrupt_defs.cpp **** 		}//1900
 383:../src/interrupt_defs.cpp **** 		else
 384:../src/interrupt_defs.cpp **** 		{
 385:../src/interrupt_defs.cpp **** 			rt = 0.0f;
 1422              		.loc 1 385 0
 1423 0ca0 40F20003 		movw	r3, #:lower16:rt
 1424 0ca4 C0F20003 		movt	r3, #:upper16:rt
 1425 0ca8 4FF00002 		mov	r2, #0
 1426 0cac 1A60     		str	r2, [r3, #0]	@ float
 386:../src/interrupt_defs.cpp **** 			mtr_out = 0.85f;
 1427              		.loc 1 386 0
 1428 0cae 49F69A13 		movw	r3, #39322
 1429 0cb2 C3F65973 		movt	r3, 16217
 1430 0cb6 7B60     		str	r3, [r7, #4]	@ float
 1431              	.L74:
 387:../src/interrupt_defs.cpp **** 		}
 388:../src/interrupt_defs.cpp **** 
 389:../src/interrupt_defs.cpp **** 		if(drive_cmd > 0.5)
 1432              		.loc 1 389 0
 1433 0cb8 40F20003 		movw	r3, #:lower16:drive_cmd
 1434 0cbc C0F20003 		movt	r3, #:upper16:drive_cmd
 1435 0cc0 93ED007A 		flds	s14, [r3, #0]
 1436 0cc4 F6EE007A 		fconsts	s15, #96
 1437 0cc8 B4EEE77A 		fcmpes	s14, s15
 1438 0ccc F1EE10FA 		fmstat
 1439 0cd0 06DD     		ble	.L75
 1440              	.L96:
 390:../src/interrupt_defs.cpp **** 		{
 391:../src/interrupt_defs.cpp **** 			drive_cmd = 0.5f;
 1441              		.loc 1 391 0
 1442 0cd2 40F20003 		movw	r3, #:lower16:drive_cmd
 1443 0cd6 C0F20003 		movt	r3, #:upper16:drive_cmd
 1444 0cda 4FF07C52 		mov	r2, #1056964608
 1445 0cde 1A60     		str	r2, [r3, #0]	@ float
 1446              	.L75:
 392:../src/interrupt_defs.cpp **** 		}
 393:../src/interrupt_defs.cpp **** 		if(drive_cmd < -0.5)
 1447              		.loc 1 393 0
 1448 0ce0 40F20003 		movw	r3, #:lower16:drive_cmd
 1449 0ce4 C0F20003 		movt	r3, #:upper16:drive_cmd
 1450 0ce8 93ED007A 		flds	s14, [r3, #0]
 1451 0cec FEEE007A 		fconsts	s15, #224
 1452 0cf0 B4EEE77A 		fcmpes	s14, s15
 1453 0cf4 F1EE10FA 		fmstat
 1454 0cf8 06D5     		bpl	.L77
 1455              	.L97:
 394:../src/interrupt_defs.cpp **** 		{
 395:../src/interrupt_defs.cpp **** 			drive_cmd = -0.5f;
 1456              		.loc 1 395 0
 1457 0cfa 40F20003 		movw	r3, #:lower16:drive_cmd
 1458 0cfe C0F20003 		movt	r3, #:upper16:drive_cmd
 1459 0d02 4FF03F42 		mov	r2, #-1090519040
 1460 0d06 1A60     		str	r2, [r3, #0]	@ float
 1461              	.L77:
 396:../src/interrupt_defs.cpp **** 		}
 397:../src/interrupt_defs.cpp **** 
 398:../src/interrupt_defs.cpp **** 		left = (1-mtr_out) - drive_cmd - rt;
 1462              		.loc 1 398 0
 1463 0d08 B7EE007A 		fconsts	s14, #112
 1464 0d0c D7ED017A 		flds	s15, [r7, #4]
 1465 0d10 37EE677A 		fsubs	s14, s14, s15
 1466 0d14 40F20003 		movw	r3, #:lower16:drive_cmd
 1467 0d18 C0F20003 		movt	r3, #:upper16:drive_cmd
 1468 0d1c D3ED007A 		flds	s15, [r3, #0]
 1469 0d20 37EE677A 		fsubs	s14, s14, s15
 1470 0d24 40F20003 		movw	r3, #:lower16:rt
 1471 0d28 C0F20003 		movt	r3, #:upper16:rt
 1472 0d2c D3ED007A 		flds	s15, [r3, #0]
 1473 0d30 77EE677A 		fsubs	s15, s14, s15
 1474 0d34 40F20003 		movw	r3, #:lower16:left
 1475 0d38 C0F20003 		movt	r3, #:upper16:left
 1476 0d3c C3ED007A 		fsts	s15, [r3, #0]
 399:../src/interrupt_defs.cpp **** 		right = mtr_out - drive_cmd - rt;
 1477              		.loc 1 399 0
 1478 0d40 40F20003 		movw	r3, #:lower16:drive_cmd
 1479 0d44 C0F20003 		movt	r3, #:upper16:drive_cmd
 1480 0d48 D3ED007A 		flds	s15, [r3, #0]
 1481 0d4c 97ED017A 		flds	s14, [r7, #4]
 1482 0d50 37EE677A 		fsubs	s14, s14, s15
 1483 0d54 40F20003 		movw	r3, #:lower16:rt
 1484 0d58 C0F20003 		movt	r3, #:upper16:rt
 1485 0d5c D3ED007A 		flds	s15, [r3, #0]
 1486 0d60 77EE677A 		fsubs	s15, s14, s15
 1487 0d64 40F20003 		movw	r3, #:lower16:right
 1488 0d68 C0F20003 		movt	r3, #:upper16:right
 1489 0d6c C3ED007A 		fsts	s15, [r3, #0]
 400:../src/interrupt_defs.cpp **** 
 401:../src/interrupt_defs.cpp **** 		if(left>1.0)
 1490              		.loc 1 401 0
 1491 0d70 40F20003 		movw	r3, #:lower16:left
 1492 0d74 C0F20003 		movt	r3, #:upper16:left
 1493 0d78 93ED007A 		flds	s14, [r3, #0]
 1494 0d7c F7EE007A 		fconsts	s15, #112
 1495 0d80 B4EEE77A 		fcmpes	s14, s15
 1496 0d84 F1EE10FA 		fmstat
 1497 0d88 07DD     		ble	.L105
 1498              	.L98:
 402:../src/interrupt_defs.cpp **** 		{
 403:../src/interrupt_defs.cpp **** 			left=1.0;
 1499              		.loc 1 403 0
 1500 0d8a 40F20003 		movw	r3, #:lower16:left
 1501 0d8e C0F20003 		movt	r3, #:upper16:left
 1502 0d92 4FF07E52 		mov	r2, #1065353216
 1503 0d96 1A60     		str	r2, [r3, #0]	@ float
 1504 0d98 11E0     		b	.L81
 1505              	.L105:
 404:../src/interrupt_defs.cpp **** 		}
 405:../src/interrupt_defs.cpp **** 		else if(left<0)
 1506              		.loc 1 405 0
 1507 0d9a 40F20003 		movw	r3, #:lower16:left
 1508 0d9e C0F20003 		movt	r3, #:upper16:left
 1509 0da2 D3ED007A 		flds	s15, [r3, #0]
 1510 0da6 F5EEC07A 		fcmpezs	s15
 1511 0daa F1EE10FA 		fmstat
 1512 0dae 06D5     		bpl	.L81
 1513              	.L99:
 406:../src/interrupt_defs.cpp **** 		{
 407:../src/interrupt_defs.cpp **** 			left=0;//-1.0;
 1514              		.loc 1 407 0
 1515 0db0 40F20003 		movw	r3, #:lower16:left
 1516 0db4 C0F20003 		movt	r3, #:upper16:left
 1517 0db8 4FF00002 		mov	r2, #0
 1518 0dbc 1A60     		str	r2, [r3, #0]	@ float
 1519              	.L81:
 408:../src/interrupt_defs.cpp **** 		}
 409:../src/interrupt_defs.cpp **** 
 410:../src/interrupt_defs.cpp **** 		if(right>1.0f)
 1520              		.loc 1 410 0
 1521 0dbe 40F20003 		movw	r3, #:lower16:right
 1522 0dc2 C0F20003 		movt	r3, #:upper16:right
 1523 0dc6 93ED007A 		flds	s14, [r3, #0]
 1524 0dca F7EE007A 		fconsts	s15, #112
 1525 0dce B4EEE77A 		fcmpes	s14, s15
 1526 0dd2 F1EE10FA 		fmstat
 1527 0dd6 07DD     		ble	.L106
 1528              	.L100:
 411:../src/interrupt_defs.cpp **** 		{
 412:../src/interrupt_defs.cpp **** 			right=1.0f;
 1529              		.loc 1 412 0
 1530 0dd8 40F20003 		movw	r3, #:lower16:right
 1531 0ddc C0F20003 		movt	r3, #:upper16:right
 1532 0de0 4FF07E52 		mov	r2, #1065353216
 1533 0de4 1A60     		str	r2, [r3, #0]	@ float
 1534 0de6 11E0     		b	.L70
 1535              	.L106:
 413:../src/interrupt_defs.cpp **** 		}
 414:../src/interrupt_defs.cpp **** 		else if(right<0)
 1536              		.loc 1 414 0
 1537 0de8 40F20003 		movw	r3, #:lower16:right
 1538 0dec C0F20003 		movt	r3, #:upper16:right
 1539 0df0 D3ED007A 		flds	s15, [r3, #0]
 1540 0df4 F5EEC07A 		fcmpezs	s15
 1541 0df8 F1EE10FA 		fmstat
 1542 0dfc 06D5     		bpl	.L70
 1543              	.L101:
 415:../src/interrupt_defs.cpp **** 		{
 416:../src/interrupt_defs.cpp **** 			right=0;
 1544              		.loc 1 416 0
 1545 0dfe 40F20003 		movw	r3, #:lower16:right
 1546 0e02 C0F20003 		movt	r3, #:upper16:right
 1547 0e06 4FF00002 		mov	r2, #0
 1548 0e0a 1A60     		str	r2, [r3, #0]	@ float
 1549              	.L70:
 417:../src/interrupt_defs.cpp **** 		}
 418:../src/interrupt_defs.cpp **** 		}
 419:../src/interrupt_defs.cpp **** 		if(state == ST_WANDER || state == ST_HOMING) {
 1550              		.loc 1 419 0
 1551 0e0c 40F20003 		movw	r3, #:lower16:state
 1552 0e10 C0F20003 		movt	r3, #:upper16:state
 1553 0e14 1B68     		ldr	r3, [r3, #0]
 1554 0e16 002B     		cmp	r3, #0
 1555 0e18 06D0     		beq	.L86
 1556              		.loc 1 419 0 is_stmt 0 discriminator 1
 1557 0e1a 40F20003 		movw	r3, #:lower16:state
 1558 0e1e C0F20003 		movt	r3, #:upper16:state
 1559 0e22 1B68     		ldr	r3, [r3, #0]
 1560 0e24 012B     		cmp	r3, #1
 1561 0e26 19D1     		bne	.L54
 1562              	.L86:
 420:../src/interrupt_defs.cpp **** 		pwm1_output(left);
 1563              		.loc 1 420 0 is_stmt 1
 1564 0e28 40F20003 		movw	r3, #:lower16:left
 1565 0e2c C0F20003 		movt	r3, #:upper16:left
 1566 0e30 1B68     		ldr	r3, [r3, #0]	@ float
 1567 0e32 1846     		mov	r0, r3	@ float
 1568 0e34 FFF7FEFF 		bl	_Z11pwm1_outputf
 421:../src/interrupt_defs.cpp **** 		pwm2_output(right);
 1569              		.loc 1 421 0
 1570 0e38 40F20003 		movw	r3, #:lower16:right
 1571 0e3c C0F20003 		movt	r3, #:upper16:right
 1572 0e40 1B68     		ldr	r3, [r3, #0]	@ float
 1573 0e42 1846     		mov	r0, r3	@ float
 1574 0e44 FFF7FEFF 		bl	_Z11pwm2_outputf
 422:../src/interrupt_defs.cpp **** 		last_err = err;
 1575              		.loc 1 422 0
 1576 0e48 40F20003 		movw	r3, #:lower16:err
 1577 0e4c C0F20003 		movt	r3, #:upper16:err
 1578 0e50 1A68     		ldr	r2, [r3, #0]	@ float
 1579 0e52 40F20003 		movw	r3, #:lower16:last_err
 1580 0e56 C0F20003 		movt	r3, #:upper16:last_err
 1581 0e5a 1A60     		str	r2, [r3, #0]	@ float
 1582              	.L54:
 1583              	.LBE11:
 423:../src/interrupt_defs.cpp **** 		}
 424:../src/interrupt_defs.cpp **** 	}
 1584              		.loc 1 424 0
 1585 0e5c 07F10807 		add	r7, r7, #8
 1586 0e60 BD46     		mov	sp, r7
 1587 0e62 80BD     		pop	{r7, pc}
 1588              		.cfi_endproc
 1589              	.LFE119:
 1591              	.Letext0:
 1592              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 1593              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 1594              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_exti.h"
 1595              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 1596              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 1597              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 1598              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 interrupt_defs.cpp
     /tmp/ccKWNPRh.s:23     .text:00000000 $t
     /tmp/ccKWNPRh.s:28     .text:00000000 TIM7_IRQHandler
     /tmp/ccKWNPRh.s:430    .text:00000438 $d
     /tmp/ccKWNPRh.s:441    .text:0000045c $t
     /tmp/ccKWNPRh.s:1074   .text:000008ac update_pid
     /tmp/ccKWNPRh.s:464    .text:00000480 TIM1_TRG_COM_TIM17_IRQHandler
     /tmp/ccKWNPRh.s:633    .text:000005cc TIM6_DAC_IRQHandler
     /tmp/ccKWNPRh.s:710    .text:00000668 ADC1_2_IRQHandler
     /tmp/ccKWNPRh.s:759    .text:000006ac DMA1_Channel1_IRQHandler
     /tmp/ccKWNPRh.s:791    .text:000006c8 DMA2_Channel1_IRQHandler
     /tmp/ccKWNPRh.s:824    .text:000006e8 ADC3_IRQHandler
     /tmp/ccKWNPRh.s:942    .text:000007d4 $d
     /tmp/ccKWNPRh.s:947    .text:000007dc $t
     /tmp/ccKWNPRh.s:952    .text:000007dc EXTI9_5_IRQHandler
     /tmp/ccKWNPRh.s:1409   .text:00000c70 $d
     /tmp/ccKWNPRh.s:1423   .text:00000ca0 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.common_headers.h.9.071a1fb1765528594ea6643cada8c0ec
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dcmplt
TIM_ClearITPendingBit
left_enc
right_enc
TIM_GetCounter
TIM_SetCounter
_Z11pwm2_outputf
_Z11pwm1_outputf
EXTI_Init
GPIO_Init
GPIO_WriteBit
stage
NVIC_Init
led_iter
led_matrix
GPIO_Write
ADC_GetITStatus
ADC_GetConversionValue
adcval
ADC_ClearITPendingBit
DMA_ClearITPendingBit
new_data
adc2_new_data
adc3_awd1
adc3_awd2
EXTI_ClearITPendingBit
TIM_Cmd
count
__aeabi_f2d
d_front
state
adcData
adc2_data
err
last_err
diff_err
integral
drive_cmd
rt
left
right
