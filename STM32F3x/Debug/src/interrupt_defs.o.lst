   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"interrupt_defs.cpp"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	__aeabi_i2d
  21              		.global	__aeabi_dmul
  22              		.global	__aeabi_dcmpgt
  23              		.global	__aeabi_dcmplt
  24              		.align	2
  25              		.global	TIM7_IRQHandler
  26              		.thumb
  27              		.thumb_func
  29              	TIM7_IRQHandler:
  30              	.LFB111:
  31              		.file 1 "../src/interrupt_defs.cpp"
   1:../src/interrupt_defs.cpp **** /*
   2:../src/interrupt_defs.cpp ****  * interrupt_defs.cpp
   3:../src/interrupt_defs.cpp ****  *
   4:../src/interrupt_defs.cpp ****  *  Created on: Feb 19, 2013
   5:../src/interrupt_defs.cpp ****  *      Author: root
   6:../src/interrupt_defs.cpp ****  */
   7:../src/interrupt_defs.cpp **** 
   8:../src/interrupt_defs.cpp **** #include "common_headers.h"
   9:../src/interrupt_defs.cpp **** #include "stm32f3_discovery_l3gd20.h"
  10:../src/interrupt_defs.cpp **** 
  11:../src/interrupt_defs.cpp **** #include "encoder.h"
  12:../src/interrupt_defs.cpp **** 
  13:../src/interrupt_defs.cpp **** //#include <stdio.h>
  14:../src/interrupt_defs.cpp **** #include <math.h>
  15:../src/interrupt_defs.cpp **** 
  16:../src/interrupt_defs.cpp **** // ISR definitions need to go here, to avoid C++ name-mangling
  17:../src/interrupt_defs.cpp **** 
  18:../src/interrupt_defs.cpp **** extern "C"
  19:../src/interrupt_defs.cpp **** {
  20:../src/interrupt_defs.cpp **** extern volatile float gyro_angle_x;
  21:../src/interrupt_defs.cpp **** extern encoderState left_enc, right_enc;
  22:../src/interrupt_defs.cpp **** extern int gyro_bias_x, adcval;
  23:../src/interrupt_defs.cpp **** extern volatile int led_matrix[8];
  24:../src/interrupt_defs.cpp **** extern volatile int led_iter;
  25:../src/interrupt_defs.cpp **** extern int new_data;
  26:../src/interrupt_defs.cpp **** extern uint8_t adc2_new_data;
  27:../src/interrupt_defs.cpp **** extern uint8_t adc3_awd1, adc3_awd2;
  28:../src/interrupt_defs.cpp **** 
  29:../src/interrupt_defs.cpp **** extern int count, stage;
  30:../src/interrupt_defs.cpp **** 
  31:../src/interrupt_defs.cpp **** extern float drive_cmd;// = 0.0f;
  32:../src/interrupt_defs.cpp **** extern float err;// = 0.0f;
  33:../src/interrupt_defs.cpp **** extern float last_err;// = 0.0f;
  34:../src/interrupt_defs.cpp **** extern float diff_err;
  35:../src/interrupt_defs.cpp **** extern float rt;// = 0.0f;
  36:../src/interrupt_defs.cpp **** extern float d_front;// = 1.0f;
  37:../src/interrupt_defs.cpp **** extern float integral;
  38:../src/interrupt_defs.cpp **** 
  39:../src/interrupt_defs.cpp **** extern float left, right;
  40:../src/interrupt_defs.cpp **** 
  41:../src/interrupt_defs.cpp **** extern __IO uint32_t adcData[2];
  42:../src/interrupt_defs.cpp **** extern __IO uint32_t adc2_data[2];
  43:../src/interrupt_defs.cpp **** 
  44:../src/interrupt_defs.cpp **** extern int state;
  45:../src/interrupt_defs.cpp **** 
  46:../src/interrupt_defs.cpp **** extern int leds_on;
  47:../src/interrupt_defs.cpp **** extern float match_time_counter, t_firefight_start, t_homing_start;
  48:../src/interrupt_defs.cpp **** 
  49:../src/interrupt_defs.cpp **** #define HOMING_TIME_LIMIT	8.0f
  50:../src/interrupt_defs.cpp **** 
  51:../src/interrupt_defs.cpp **** void update_pid(void);
  52:../src/interrupt_defs.cpp **** 
  53:../src/interrupt_defs.cpp **** 	void TIM7_IRQHandler(void) // ISR that performs encoder state update:
  54:../src/interrupt_defs.cpp **** 										// Runs every DT milliseconds
  55:../src/interrupt_defs.cpp **** 	{
  32              		.loc 1 55 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 96
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 90B5     		push	{r4, r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 12
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 99B0     		sub	sp, sp, #100
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 112
  45 0004 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48              	.LBB2:
  56:../src/interrupt_defs.cpp **** 		float left_out, right_out;
  57:../src/interrupt_defs.cpp **** 		int error, abs_err;
  58:../src/interrupt_defs.cpp **** 
  59:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
  49              		.loc 1 59 0
  50 0006 4FF4A050 		mov	r0, #5120
  51 000a C4F20000 		movt	r0, 16384
  52 000e 4FF00101 		mov	r1, #1
  53 0012 FFF7FEFF 		bl	TIM_ClearITPendingBit
  60:../src/interrupt_defs.cpp **** 
  61:../src/interrupt_defs.cpp **** 		encoderState left_temp, right_temp;
  62:../src/interrupt_defs.cpp **** 
  63:../src/interrupt_defs.cpp **** 		left_temp.position = left_enc.position;
  54              		.loc 1 63 0
  55 0016 40F20003 		movw	r3, #:lower16:left_enc
  56 001a C0F20003 		movt	r3, #:upper16:left_enc
  57 001e 1B68     		ldr	r3, [r3, #0]
  58 0020 3B60     		str	r3, [r7, #0]
  64:../src/interrupt_defs.cpp **** 		left_temp.speed = left_enc.speed;
  59              		.loc 1 64 0
  60 0022 40F20003 		movw	r3, #:lower16:left_enc
  61 0026 C0F20003 		movt	r3, #:upper16:left_enc
  62 002a 5B68     		ldr	r3, [r3, #4]	@ float
  63 002c 7B60     		str	r3, [r7, #4]	@ float
  65:../src/interrupt_defs.cpp **** 		left_temp.acceleration = left_enc.acceleration;
  64              		.loc 1 65 0
  65 002e 40F20003 		movw	r3, #:lower16:left_enc
  66 0032 C0F20003 		movt	r3, #:upper16:left_enc
  67 0036 9B68     		ldr	r3, [r3, #8]	@ float
  68 0038 BB60     		str	r3, [r7, #8]	@ float
  66:../src/interrupt_defs.cpp **** 
  67:../src/interrupt_defs.cpp **** 		right_temp.position = right_enc.position;
  69              		.loc 1 67 0
  70 003a 40F20003 		movw	r3, #:lower16:right_enc
  71 003e C0F20003 		movt	r3, #:upper16:right_enc
  72 0042 1B68     		ldr	r3, [r3, #0]
  73 0044 BB62     		str	r3, [r7, #40]
  68:../src/interrupt_defs.cpp **** 		right_temp.speed = right_enc.speed;
  74              		.loc 1 68 0
  75 0046 40F20003 		movw	r3, #:lower16:right_enc
  76 004a C0F20003 		movt	r3, #:upper16:right_enc
  77 004e 5B68     		ldr	r3, [r3, #4]	@ float
  78 0050 FB62     		str	r3, [r7, #44]	@ float
  69:../src/interrupt_defs.cpp **** 		right_temp.acceleration = right_enc.acceleration;
  79              		.loc 1 69 0
  80 0052 40F20003 		movw	r3, #:lower16:right_enc
  81 0056 C0F20003 		movt	r3, #:upper16:right_enc
  82 005a 9B68     		ldr	r3, [r3, #8]	@ float
  83 005c 3B63     		str	r3, [r7, #48]	@ float
  70:../src/interrupt_defs.cpp **** 
  71:../src/interrupt_defs.cpp **** 		left_enc.position = left_temp.position + (int16_t)TIM_GetCounter(TIM4); //Instead of TIM2 on othe
  84              		.loc 1 71 0
  85 005e 3C68     		ldr	r4, [r7, #0]
  86 0060 4FF40060 		mov	r0, #2048
  87 0064 C4F20000 		movt	r0, 16384
  88 0068 FFF7FEFF 		bl	TIM_GetCounter
  89 006c 0346     		mov	r3, r0
  90 006e 9BB2     		uxth	r3, r3
  91 0070 1BB2     		sxth	r3, r3
  92 0072 E218     		adds	r2, r4, r3
  93 0074 40F20003 		movw	r3, #:lower16:left_enc
  94 0078 C0F20003 		movt	r3, #:upper16:left_enc
  95 007c 1A60     		str	r2, [r3, #0]
  72:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM4, 0);
  96              		.loc 1 72 0
  97 007e 4FF40060 		mov	r0, #2048
  98 0082 C4F20000 		movt	r0, 16384
  99 0086 4FF00001 		mov	r1, #0
 100 008a FFF7FEFF 		bl	TIM_SetCounter
  73:../src/interrupt_defs.cpp **** 		left_enc.speed = (float)((left_enc.position - left_temp.position)*1000)/(float)DT_ENCODER; // Sin
 101              		.loc 1 73 0
 102 008e 40F20003 		movw	r3, #:lower16:left_enc
 103 0092 C0F20003 		movt	r3, #:upper16:left_enc
 104 0096 1A68     		ldr	r2, [r3, #0]
 105 0098 3B68     		ldr	r3, [r7, #0]
 106 009a D31A     		subs	r3, r2, r3
 107 009c 4FF47A72 		mov	r2, #1000
 108 00a0 02FB03F3 		mul	r3, r2, r3
 109 00a4 07EE903A 		fmsr	s15, r3	@ int
 110 00a8 B8EEE77A 		fsitos	s14, s15
 111 00ac F3EE097A 		fconsts	s15, #57
 112 00b0 C7EE277A 		fdivs	s15, s14, s15
 113 00b4 40F20003 		movw	r3, #:lower16:left_enc
 114 00b8 C0F20003 		movt	r3, #:upper16:left_enc
 115 00bc C3ED017A 		fsts	s15, [r3, #4]
  74:../src/interrupt_defs.cpp **** 		left_enc.acceleration = (float)((left_enc.speed - left_temp.speed)*1000)/(float)DT_ENCODER;
 116              		.loc 1 74 0
 117 00c0 40F20003 		movw	r3, #:lower16:left_enc
 118 00c4 C0F20003 		movt	r3, #:upper16:left_enc
 119 00c8 93ED017A 		flds	s14, [r3, #4]
 120 00cc D7ED017A 		flds	s15, [r7, #4]
 121 00d0 37EE677A 		fsubs	s14, s14, s15
 122 00d4 DFEDDA7A 		flds	s15, .L32+8
 123 00d8 27EE277A 		fmuls	s14, s14, s15
 124 00dc F3EE097A 		fconsts	s15, #57
 125 00e0 C7EE277A 		fdivs	s15, s14, s15
 126 00e4 40F20003 		movw	r3, #:lower16:left_enc
 127 00e8 C0F20003 		movt	r3, #:upper16:left_enc
 128 00ec C3ED027A 		fsts	s15, [r3, #8]
  75:../src/interrupt_defs.cpp **** 
  76:../src/interrupt_defs.cpp **** 		right_enc.position = right_temp.position + (int16_t)(TIM_GetCounter(TIM8));
 129              		.loc 1 76 0
 130 00f0 BC6A     		ldr	r4, [r7, #40]
 131 00f2 4FF45050 		mov	r0, #13312
 132 00f6 C4F20100 		movt	r0, 16385
 133 00fa FFF7FEFF 		bl	TIM_GetCounter
 134 00fe 0346     		mov	r3, r0
 135 0100 9BB2     		uxth	r3, r3
 136 0102 1BB2     		sxth	r3, r3
 137 0104 E218     		adds	r2, r4, r3
 138 0106 40F20003 		movw	r3, #:lower16:right_enc
 139 010a C0F20003 		movt	r3, #:upper16:right_enc
 140 010e 1A60     		str	r2, [r3, #0]
  77:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM8, 0); // To get around the stupid 16-bit counter limitation present on all tim
 141              		.loc 1 77 0
 142 0110 4FF45050 		mov	r0, #13312
 143 0114 C4F20100 		movt	r0, 16385
 144 0118 4FF00001 		mov	r1, #0
 145 011c FFF7FEFF 		bl	TIM_SetCounter
  78:../src/interrupt_defs.cpp **** 		right_enc.speed = (float)((right_enc.position - right_temp.position)*1000)/(float)DT_ENCODER;
 146              		.loc 1 78 0
 147 0120 40F20003 		movw	r3, #:lower16:right_enc
 148 0124 C0F20003 		movt	r3, #:upper16:right_enc
 149 0128 1A68     		ldr	r2, [r3, #0]
 150 012a BB6A     		ldr	r3, [r7, #40]
 151 012c D31A     		subs	r3, r2, r3
 152 012e 4FF47A72 		mov	r2, #1000
 153 0132 02FB03F3 		mul	r3, r2, r3
 154 0136 07EE903A 		fmsr	s15, r3	@ int
 155 013a B8EEE77A 		fsitos	s14, s15
 156 013e F3EE097A 		fconsts	s15, #57
 157 0142 C7EE277A 		fdivs	s15, s14, s15
 158 0146 40F20003 		movw	r3, #:lower16:right_enc
 159 014a C0F20003 		movt	r3, #:upper16:right_enc
 160 014e C3ED017A 		fsts	s15, [r3, #4]
  79:../src/interrupt_defs.cpp **** 		right_enc.acceleration = (float)((right_enc.speed - right_temp.speed)*1000)/(float)DT_ENCODER;
 161              		.loc 1 79 0
 162 0152 40F20003 		movw	r3, #:lower16:right_enc
 163 0156 C0F20003 		movt	r3, #:upper16:right_enc
 164 015a 93ED017A 		flds	s14, [r3, #4]
 165 015e D7ED0B7A 		flds	s15, [r7, #44]
 166 0162 37EE677A 		fsubs	s14, s14, s15
 167 0166 DFEDB67A 		flds	s15, .L32+8
 168 016a 27EE277A 		fmuls	s14, s14, s15
 169 016e F3EE097A 		fconsts	s15, #57
 170 0172 C7EE277A 		fdivs	s15, s14, s15
 171 0176 40F20003 		movw	r3, #:lower16:right_enc
 172 017a C0F20003 		movt	r3, #:upper16:right_enc
 173 017e C3ED027A 		fsts	s15, [r3, #8]
  80:../src/interrupt_defs.cpp **** 
  81:../src/interrupt_defs.cpp **** 		if(left_enc.m == MODE_POSITION)
 174              		.loc 1 81 0
 175 0182 40F20003 		movw	r3, #:lower16:left_enc
 176 0186 C0F20003 		movt	r3, #:upper16:left_enc
 177 018a 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 178 018e 012B     		cmp	r3, #1
 179 0190 5DD1     		bne	.L2
  82:../src/interrupt_defs.cpp **** 		{
  83:../src/interrupt_defs.cpp **** 			left_out = ((float)k_p * (float)(left_enc.position_target - left_enc.position))
  84:../src/interrupt_defs.cpp **** 					+ ((float)k_i*(float)(left_enc.integral))
  85:../src/interrupt_defs.cpp **** 					+ ((float)k_d*(float)left_enc.speed);
 180              		.loc 1 85 0
 181 0192 40F20003 		movw	r3, #:lower16:left_enc
 182 0196 C0F20003 		movt	r3, #:upper16:left_enc
 183 019a DA68     		ldr	r2, [r3, #12]
 184 019c 40F20003 		movw	r3, #:lower16:left_enc
 185 01a0 C0F20003 		movt	r3, #:upper16:left_enc
 186 01a4 1B68     		ldr	r3, [r3, #0]
 187 01a6 D31A     		subs	r3, r2, r3
 188 01a8 07EE103A 		fmsr	s14, r3	@ int
 189 01ac F8EEC77A 		fsitos	s15, s14
 190 01b0 37EEA77A 		fadds	s14, s15, s15
 191 01b4 40F20003 		movw	r3, #:lower16:left_enc
 192 01b8 C0F20003 		movt	r3, #:upper16:left_enc
 193 01bc D3ED057A 		flds	s15, [r3, #20]	@ int
 194 01c0 F8EEE76A 		fsitos	s13, s15
 195 01c4 DFED9F7A 		flds	s15, .L32+12
 196 01c8 66EEA77A 		fmuls	s15, s13, s15
 197 01cc 37EE277A 		fadds	s14, s14, s15
 198 01d0 40F20003 		movw	r3, #:lower16:left_enc
 199 01d4 C0F20003 		movt	r3, #:upper16:left_enc
 200 01d8 D3ED016A 		flds	s13, [r3, #4]
 201 01dc DFED9A7A 		flds	s15, .L32+16
 202 01e0 66EEA77A 		fmuls	s15, s13, s15
 203 01e4 77EE277A 		fadds	s15, s14, s15
 204 01e8 C7ED177A 		fsts	s15, [r7, #92]
  86:../src/interrupt_defs.cpp **** 			left_out = (left_out > 100) ? 100 : ((left_out < -100) ? -100 : left_out);
 205              		.loc 1 86 0
 206 01ec 97ED177A 		flds	s14, [r7, #92]
 207 01f0 DFED967A 		flds	s15, .L32+20
 208 01f4 B4EEE77A 		fcmpes	s14, s15
 209 01f8 F1EE10FA 		fmstat
 210 01fc 04DD     		ble	.L28
 211              	.L24:
 212              		.loc 1 86 0 is_stmt 0 discriminator 1
 213 01fe 4FF00003 		mov	r3, #0
 214 0202 C4F2C823 		movt	r3, 17096
 215 0206 0EE0     		b	.L5
 216              	.L28:
 217              		.loc 1 86 0 discriminator 2
 218 0208 97ED177A 		flds	s14, [r7, #92]
 219 020c DFED907A 		flds	s15, .L32+24
 220 0210 B4EEE77A 		fcmpes	s14, s15
 221 0214 F1EE10FA 		fmstat
 222 0218 04D5     		bpl	.L29
 223              	.L25:
 224              		.loc 1 86 0 discriminator 3
 225 021a 4FF00003 		mov	r3, #0
 226 021e CCF2C823 		movt	r3, 49864
 227 0222 00E0     		b	.L8
 228              	.L29:
 229              		.loc 1 86 0 discriminator 4
 230 0224 FB6D     		ldr	r3, [r7, #92]	@ float
 231              	.L8:
 232              	.L5:
 233              		.loc 1 86 0 discriminator 6
 234 0226 FB65     		str	r3, [r7, #92]	@ float
  87:../src/interrupt_defs.cpp **** 
  88:../src/interrupt_defs.cpp **** 			pwm2_output(100-((float)(left_out+100)/(float)2));
 235              		.loc 1 88 0 is_stmt 1 discriminator 6
 236 0228 97ED177A 		flds	s14, [r7, #92]
 237 022c DFED877A 		flds	s15, .L32+20
 238 0230 37EE277A 		fadds	s14, s14, s15
 239 0234 F0EE007A 		fconsts	s15, #0
 240 0238 C7EE277A 		fdivs	s15, s14, s15
 241 023c 9FED837A 		flds	s14, .L32+20
 242 0240 77EE677A 		fsubs	s15, s14, s15
 243 0244 B0EE670A 		fcpys	s0, s15
 244 0248 FFF7FEFF 		bl	_Z11pwm2_outputf
 245 024c 0BE0     		b	.L9
 246              	.L2:
  89:../src/interrupt_defs.cpp **** 		}
  90:../src/interrupt_defs.cpp **** 		else if(left_enc.m == MODE_SPEED)
 247              		.loc 1 90 0
 248 024e 40F20003 		movw	r3, #:lower16:left_enc
 249 0252 C0F20003 		movt	r3, #:upper16:left_enc
 250 0256 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 251 025a 022B     		cmp	r3, #2
 252 025c 03D1     		bne	.L9
  91:../src/interrupt_defs.cpp **** 		{
  92:../src/interrupt_defs.cpp **** 			pwm2_output(0);
 253              		.loc 1 92 0
 254 025e 9FED7D0A 		flds	s0, .L32+28
 255 0262 FFF7FEFF 		bl	_Z11pwm2_outputf
 256              	.L9:
  93:../src/interrupt_defs.cpp **** 		}
  94:../src/interrupt_defs.cpp **** 
  95:../src/interrupt_defs.cpp **** 		if(right_enc.m == MODE_POSITION)
 257              		.loc 1 95 0
 258 0266 40F20003 		movw	r3, #:lower16:right_enc
 259 026a C0F20003 		movt	r3, #:upper16:right_enc
 260 026e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 261 0272 012B     		cmp	r3, #1
 262 0274 40F00081 		bne	.L10
  96:../src/interrupt_defs.cpp **** 		{
  97:../src/interrupt_defs.cpp **** 			error = right_enc.position - right_enc.position_target;
 263              		.loc 1 97 0
 264 0278 40F20003 		movw	r3, #:lower16:right_enc
 265 027c C0F20003 		movt	r3, #:upper16:right_enc
 266 0280 1A68     		ldr	r2, [r3, #0]
 267 0282 40F20003 		movw	r3, #:lower16:right_enc
 268 0286 C0F20003 		movt	r3, #:upper16:right_enc
 269 028a DB68     		ldr	r3, [r3, #12]
 270 028c D31A     		subs	r3, r2, r3
 271 028e BB65     		str	r3, [r7, #88]
  98:../src/interrupt_defs.cpp **** 			right_enc.integral += (float)(error) * (float)DT_ENCODER / (float)1000;
 272              		.loc 1 98 0
 273 0290 40F20003 		movw	r3, #:lower16:right_enc
 274 0294 C0F20003 		movt	r3, #:upper16:right_enc
 275 0298 D3ED057A 		flds	s15, [r3, #20]	@ int
 276 029c B8EEE77A 		fsitos	s14, s15
 277 02a0 D7ED167A 		flds	s15, [r7, #88]	@ int
 278 02a4 F8EEE76A 		fsitos	s13, s15
 279 02a8 F3EE097A 		fconsts	s15, #57
 280 02ac 66EEA76A 		fmuls	s13, s13, s15
 281 02b0 DFED637A 		flds	s15, .L32+8
 282 02b4 C6EEA77A 		fdivs	s15, s13, s15
 283 02b8 77EE277A 		fadds	s15, s14, s15
 284 02bc FDEEE77A 		ftosizs	s15, s15
 285 02c0 40F20003 		movw	r3, #:lower16:right_enc
 286 02c4 C0F20003 		movt	r3, #:upper16:right_enc
 287 02c8 C3ED057A 		fsts	s15, [r3, #20]	@ int
  99:../src/interrupt_defs.cpp **** 
 100:../src/interrupt_defs.cpp **** 			if(right_enc.integral * k_i > 100 || right_enc.integral * k_i < -100)
 288              		.loc 1 100 0
 289 02cc 40F20003 		movw	r3, #:lower16:right_enc
 290 02d0 C0F20003 		movt	r3, #:upper16:right_enc
 291 02d4 5B69     		ldr	r3, [r3, #20]
 292 02d6 1846     		mov	r0, r3
 293 02d8 FFF7FEFF 		bl	__aeabi_i2d
 294 02dc 0246     		mov	r2, r0
 295 02de 0B46     		mov	r3, r1
 296 02e0 1046     		mov	r0, r2
 297 02e2 1946     		mov	r1, r3
 298 02e4 54A3     		adr	r3, .L32
 299 02e6 D3E90023 		ldrd	r2, [r3]
 300 02ea FFF7FEFF 		bl	__aeabi_dmul
 301 02ee 0246     		mov	r2, r0
 302 02f0 0B46     		mov	r3, r1
 303 02f2 1046     		mov	r0, r2
 304 02f4 1946     		mov	r1, r3
 305 02f6 4FF00002 		mov	r2, #0
 306 02fa 4FF00003 		mov	r3, #0
 307 02fe C4F25903 		movt	r3, 16473
 308 0302 FFF7FEFF 		bl	__aeabi_dcmpgt
 309 0306 0346     		mov	r3, r0
 310 0308 002B     		cmp	r3, #0
 311 030a 1FD1     		bne	.L11
 312              		.loc 1 100 0 is_stmt 0 discriminator 1
 313 030c 40F20003 		movw	r3, #:lower16:right_enc
 314 0310 C0F20003 		movt	r3, #:upper16:right_enc
 315 0314 5B69     		ldr	r3, [r3, #20]
 316 0316 1846     		mov	r0, r3
 317 0318 FFF7FEFF 		bl	__aeabi_i2d
 318 031c 0246     		mov	r2, r0
 319 031e 0B46     		mov	r3, r1
 320 0320 1046     		mov	r0, r2
 321 0322 1946     		mov	r1, r3
 322 0324 44A3     		adr	r3, .L32
 323 0326 D3E90023 		ldrd	r2, [r3]
 324 032a FFF7FEFF 		bl	__aeabi_dmul
 325 032e 0246     		mov	r2, r0
 326 0330 0B46     		mov	r3, r1
 327 0332 1046     		mov	r0, r2
 328 0334 1946     		mov	r1, r3
 329 0336 4FF00002 		mov	r2, #0
 330 033a 4FF00003 		mov	r3, #0
 331 033e CCF25903 		movt	r3, 49241
 332 0342 FFF7FEFF 		bl	__aeabi_dcmplt
 333 0346 0346     		mov	r3, r0
 334 0348 002B     		cmp	r3, #0
 335 034a 06D0     		beq	.L12
 336              	.L11:
 101:../src/interrupt_defs.cpp **** 			{
 102:../src/interrupt_defs.cpp **** 				right_enc.integral = (float)100/(float)k_i;
 337              		.loc 1 102 0 is_stmt 1
 338 034c 40F20003 		movw	r3, #:lower16:right_enc
 339 0350 C0F20003 		movt	r3, #:upper16:right_enc
 340 0354 40F29A22 		movw	r2, #666
 341 0358 5A61     		str	r2, [r3, #20]
 342              	.L12:
 103:../src/interrupt_defs.cpp **** 			}
 104:../src/interrupt_defs.cpp **** 
 105:../src/interrupt_defs.cpp **** 			right_out = ((float)k_p * (float)error)
 106:../src/interrupt_defs.cpp **** 					+ ((float)k_i*(float)(right_enc.integral))
 107:../src/interrupt_defs.cpp **** 					+ ((float)k_d*(float)(error - right_enc.last_error)/(float)(DT_ENCODER/(float)1000));
 343              		.loc 1 107 0
 344 035a D7ED167A 		flds	s15, [r7, #88]	@ int
 345 035e F8EEE77A 		fsitos	s15, s15
 346 0362 37EEA77A 		fadds	s14, s15, s15
 347 0366 40F20003 		movw	r3, #:lower16:right_enc
 348 036a C0F20003 		movt	r3, #:upper16:right_enc
 349 036e D3ED057A 		flds	s15, [r3, #20]	@ int
 350 0372 F8EEE76A 		fsitos	s13, s15
 351 0376 DFED337A 		flds	s15, .L32+12
 352 037a 66EEA77A 		fmuls	s15, s13, s15
 353 037e 37EE277A 		fadds	s14, s14, s15
 354 0382 40F20003 		movw	r3, #:lower16:right_enc
 355 0386 C0F20003 		movt	r3, #:upper16:right_enc
 356 038a 9B69     		ldr	r3, [r3, #24]
 357 038c BA6D     		ldr	r2, [r7, #88]
 358 038e D31A     		subs	r3, r2, r3
 359 0390 07EE903A 		fmsr	s15, r3	@ int
 360 0394 F8EEE76A 		fsitos	s13, s15
 361 0398 DFED2B7A 		flds	s15, .L32+16
 362 039c 66EEA76A 		fmuls	s13, s13, s15
 363 03a0 DFED2E7A 		flds	s15, .L32+36
 364 03a4 C6EEA77A 		fdivs	s15, s13, s15
 365 03a8 77EE277A 		fadds	s15, s14, s15
 366 03ac C7ED157A 		fsts	s15, [r7, #84]
 108:../src/interrupt_defs.cpp **** 			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 367              		.loc 1 108 0
 368 03b0 97ED157A 		flds	s14, [r7, #84]
 369 03b4 DFED257A 		flds	s15, .L32+20
 370 03b8 B4EEE77A 		fcmpes	s14, s15
 371 03bc F1EE10FA 		fmstat
 372 03c0 04DD     		ble	.L30
 373              	.L26:
 374              		.loc 1 108 0 is_stmt 0 discriminator 1
 375 03c2 4FF00003 		mov	r3, #0
 376 03c6 C4F2C823 		movt	r3, 17096
 377 03ca 0EE0     		b	.L16
 378              	.L30:
 379              		.loc 1 108 0 discriminator 2
 380 03cc 97ED157A 		flds	s14, [r7, #84]
 381 03d0 DFED1F7A 		flds	s15, .L32+24
 382 03d4 B4EEE77A 		fcmpes	s14, s15
 383 03d8 F1EE10FA 		fmstat
 384 03dc 04D5     		bpl	.L31
 385              	.L27:
 386              		.loc 1 108 0 discriminator 3
 387 03de 4FF00003 		mov	r3, #0
 388 03e2 CCF2C823 		movt	r3, 49864
 389 03e6 00E0     		b	.L19
 390              	.L31:
 391              		.loc 1 108 0 discriminator 4
 392 03e8 7B6D     		ldr	r3, [r7, #84]	@ float
 393              	.L19:
 394              	.L16:
 395              		.loc 1 108 0 discriminator 6
 396 03ea 7B65     		str	r3, [r7, #84]	@ float
 109:../src/interrupt_defs.cpp **** 			right_enc.last_error = error;
 397              		.loc 1 109 0 is_stmt 1 discriminator 6
 398 03ec 40F20003 		movw	r3, #:lower16:right_enc
 399 03f0 C0F20003 		movt	r3, #:upper16:right_enc
 400 03f4 BA6D     		ldr	r2, [r7, #88]
 401 03f6 9A61     		str	r2, [r3, #24]
 110:../src/interrupt_defs.cpp **** 
 111:../src/interrupt_defs.cpp **** 			abs_err = (error > 0) ? error : (error*-1);
 402              		.loc 1 111 0 discriminator 6
 403 03f8 BB6D     		ldr	r3, [r7, #88]
 404 03fa 002B     		cmp	r3, #0
 405 03fc B8BF     		it	lt
 406 03fe 5B42     		rsblt	r3, r3, #0
 407 0400 3B65     		str	r3, [r7, #80]
 112:../src/interrupt_defs.cpp **** 
 113:../src/interrupt_defs.cpp **** 			if(error > 10 || error < -10)
 408              		.loc 1 113 0 discriminator 6
 409 0402 BB6D     		ldr	r3, [r7, #88]
 410 0404 0A2B     		cmp	r3, #10
 411 0406 03DC     		bgt	.L20
 412              		.loc 1 113 0 is_stmt 0 discriminator 1
 413 0408 BB6D     		ldr	r3, [r7, #88]
 414 040a 13F10A0F 		cmn	r3, #10
 415 040e 27DA     		bge	.L21
 416              	.L20:
 114:../src/interrupt_defs.cpp **** 			{
 115:../src/interrupt_defs.cpp **** 				pwm1_output((((float)(right_out+100)/(float)2))*(float)0.01);
 417              		.loc 1 115 0 is_stmt 1
 418 0410 97ED157A 		flds	s14, [r7, #84]
 419 0414 DFED0D7A 		flds	s15, .L32+20
 420 0418 37EE277A 		fadds	s14, s14, s15
 421 041c F0EE007A 		fconsts	s15, #0
 422 0420 87EE277A 		fdivs	s14, s14, s15
 423 0424 DFED0C7A 		flds	s15, .L32+32
 424 0428 67EE277A 		fmuls	s15, s14, s15
 425 042c B0EE670A 		fcpys	s0, s15
 426 0430 FFF7FEFF 		bl	_Z11pwm1_outputf
 427 0434 20E0     		b	.L10
 428              	.L33:
 429 0436 00BF     		.align	3
 430              	.L32:
 431 0438 33333333 		.word	858993459
 432 043c 3333C33F 		.word	1069757235
 433 0440 00007A44 		.word	1148846080
 434 0444 9A99193E 		.word	1041865114
 435 0448 8FC2353F 		.word	1060487823
 436 044c 0000C842 		.word	1120403456
 437 0450 0000C8C2 		.word	-1027080192
 438 0454 00000000 		.word	0
 439 0458 0AD7233C 		.word	1008981770
 440 045c CDCCCC3C 		.word	1020054733
 441              	.L21:
 116:../src/interrupt_defs.cpp **** 			}
 117:../src/interrupt_defs.cpp **** 			else
 118:../src/interrupt_defs.cpp **** 			{
 119:../src/interrupt_defs.cpp **** 				pwm1_output(0.50f);
 442              		.loc 1 119 0
 443 0460 B6EE000A 		fconsts	s0, #96
 444 0464 FFF7FEFF 		bl	_Z11pwm1_outputf
 120:../src/interrupt_defs.cpp **** 				right_enc.m = MODE_OPENLOOP;
 445              		.loc 1 120 0
 446 0468 40F20003 		movw	r3, #:lower16:right_enc
 447 046c C0F20003 		movt	r3, #:upper16:right_enc
 448 0470 4FF00002 		mov	r2, #0
 449 0474 83F82420 		strb	r2, [r3, #36]
 450              	.L10:
 121:../src/interrupt_defs.cpp **** 			}
 122:../src/interrupt_defs.cpp **** 		}
 123:../src/interrupt_defs.cpp **** 		update_pid();
 451              		.loc 1 123 0
 452 0478 FFF7FEFF 		bl	update_pid
 124:../src/interrupt_defs.cpp **** 		if(state > ST_READY)
 453              		.loc 1 124 0
 454 047c 40F20003 		movw	r3, #:lower16:state
 455 0480 C0F20003 		movt	r3, #:upper16:state
 456 0484 1B68     		ldr	r3, [r3, #0]
 457 0486 002B     		cmp	r3, #0
 458 0488 0FDB     		blt	.L1
 125:../src/interrupt_defs.cpp **** 		{
 126:../src/interrupt_defs.cpp **** 			match_time_counter += (float)DT_ENCODER/(float)1000; // Increment main match time counter by DT_
 459              		.loc 1 126 0
 460 048a 40F20003 		movw	r3, #:lower16:match_time_counter
 461 048e C0F20003 		movt	r3, #:upper16:match_time_counter
 462 0492 93ED007A 		flds	s14, [r3, #0]
 463 0496 5FED0F7A 		flds	s15, .L32+36
 464 049a 77EE277A 		fadds	s15, s14, s15
 465 049e 40F20003 		movw	r3, #:lower16:match_time_counter
 466 04a2 C0F20003 		movt	r3, #:upper16:match_time_counter
 467 04a6 C3ED007A 		fsts	s15, [r3, #0]
 468              	.L1:
 469              	.LBE2:
 127:../src/interrupt_defs.cpp **** 		}
 128:../src/interrupt_defs.cpp **** 
 129:../src/interrupt_defs.cpp **** 		/*
 130:../src/interrupt_defs.cpp **** 		else if(right_enc.m == MODE_SPEED)
 131:../src/interrupt_defs.cpp **** 		{
 132:../src/interrupt_defs.cpp **** 			error = right_enc.speed - right_enc.speed_target;
 133:../src/interrupt_defs.cpp **** 
 134:../src/interrupt_defs.cpp **** 			right_out = ((float)error * (float)k_p_s);// + ((float)k_d_s * (float)(error - right_enc.last_sp
 135:../src/interrupt_defs.cpp **** //			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 136:../src/interrupt_defs.cpp **** 			right_enc.vel_cmd += right_out;
 137:../src/interrupt_defs.cpp **** 			if(right_enc.vel_cmd > 1)
 138:../src/interrupt_defs.cpp **** 			{
 139:../src/interrupt_defs.cpp **** 				right_enc.vel_cmd = 1;
 140:../src/interrupt_defs.cpp **** 			}
 141:../src/interrupt_defs.cpp **** 
 142:../src/interrupt_defs.cpp **** 			else if(right_enc.vel_cmd < 0)
 143:../src/interrupt_defs.cpp **** 			{
 144:../src/interrupt_defs.cpp **** 				right_enc.vel_cmd = 0;
 145:../src/interrupt_defs.cpp **** 			}
 146:../src/interrupt_defs.cpp **** 
 147:../src/interrupt_defs.cpp **** //			pwm1_output((float)1.0-right_enc.vel_cmd);
 148:../src/interrupt_defs.cpp **** 			pwm1_output(0.50f);
 149:../src/interrupt_defs.cpp **** 
 150:../src/interrupt_defs.cpp **** 			right_enc.last_speed_error = error;
 151:../src/interrupt_defs.cpp **** 		}
 152:../src/interrupt_defs.cpp **** 		*/
 153:../src/interrupt_defs.cpp **** 	}
 470              		.loc 1 153 0
 471 04aa 07F16407 		add	r7, r7, #100
 472 04ae BD46     		mov	sp, r7
 473 04b0 90BD     		pop	{r4, r7, pc}
 474              		.cfi_endproc
 475              	.LFE111:
 477 04b2 00BF     		.align	2
 478              		.global	TIM1_TRG_COM_TIM17_IRQHandler
 479              		.thumb
 480              		.thumb_func
 482              	TIM1_TRG_COM_TIM17_IRQHandler:
 483              	.LFB112:
 154:../src/interrupt_defs.cpp **** 
 155:../src/interrupt_defs.cpp **** 	void TIM1_TRG_COM_TIM17_IRQHandler(void)
 156:../src/interrupt_defs.cpp **** 	{
 484              		.loc 1 156 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 24
 487              		@ frame_needed = 1, uses_anonymous_args = 0
 488 04b4 80B5     		push	{r7, lr}
 489              	.LCFI3:
 490              		.cfi_def_cfa_offset 8
 491              		.cfi_offset 7, -8
 492              		.cfi_offset 14, -4
 493 04b6 86B0     		sub	sp, sp, #24
 494              	.LCFI4:
 495              		.cfi_def_cfa_offset 32
 496 04b8 00AF     		add	r7, sp, #0
 497              	.LCFI5:
 498              		.cfi_def_cfa_register 7
 499              	.LBB3:
 157:../src/interrupt_defs.cpp **** 
 158:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM17, TIM_IT_Update);
 500              		.loc 1 158 0
 501 04ba 4FF49040 		mov	r0, #18432
 502 04be C4F20100 		movt	r0, 16385
 503 04c2 4FF00101 		mov	r1, #1
 504 04c6 FFF7FEFF 		bl	TIM_ClearITPendingBit
 159:../src/interrupt_defs.cpp **** 
 160:../src/interrupt_defs.cpp **** 		/*
 161:../src/interrupt_defs.cpp **** 		uint8_t bytes[2];
 162:../src/interrupt_defs.cpp **** 
 163:../src/interrupt_defs.cpp **** 		union twosComp {		// Takes care of two's complement conversion
 164:../src/interrupt_defs.cpp **** 			uint16_t un_signed;
 165:../src/interrupt_defs.cpp **** 			int16_t output;
 166:../src/interrupt_defs.cpp **** 		} convert;
 167:../src/interrupt_defs.cpp **** 
 168:../src/interrupt_defs.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 169:../src/interrupt_defs.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 170:../src/interrupt_defs.cpp **** 
 171:../src/interrupt_defs.cpp **** 		gyro_angle_x += (convert.output - gyro_bias_x) * (float)0.00763 * (float)0.001 * (float)DT_IMU;
 172:../src/interrupt_defs.cpp **** 		*/
 173:../src/interrupt_defs.cpp **** 
 174:../src/interrupt_defs.cpp **** 		/*
 175:../src/interrupt_defs.cpp **** 		 * Below: code required to trigger the ping sensor:
 176:../src/interrupt_defs.cpp **** 		 */
 177:../src/interrupt_defs.cpp **** 
 178:../src/interrupt_defs.cpp **** 		EXTI_InitTypeDef e;
 179:../src/interrupt_defs.cpp **** 
 180:../src/interrupt_defs.cpp **** 		e.EXTI_Line = EXTI_Line9;
 505              		.loc 1 180 0
 506 04ca 4FF00903 		mov	r3, #9
 507 04ce FB60     		str	r3, [r7, #12]
 181:../src/interrupt_defs.cpp **** 		e.EXTI_LineCmd = DISABLE;
 508              		.loc 1 181 0
 509 04d0 4FF00003 		mov	r3, #0
 510 04d4 BB74     		strb	r3, [r7, #18]
 182:../src/interrupt_defs.cpp **** 		e.EXTI_Mode = EXTI_Mode_Interrupt;
 511              		.loc 1 182 0
 512 04d6 4FF00003 		mov	r3, #0
 513 04da 3B74     		strb	r3, [r7, #16]
 183:../src/interrupt_defs.cpp **** 		e.EXTI_Trigger = EXTI_Trigger_Rising;
 514              		.loc 1 183 0
 515 04dc 4FF00803 		mov	r3, #8
 516 04e0 7B74     		strb	r3, [r7, #17]
 184:../src/interrupt_defs.cpp **** 
 185:../src/interrupt_defs.cpp **** 		EXTI_Init(&e);
 517              		.loc 1 185 0
 518 04e2 07F10C03 		add	r3, r7, #12
 519 04e6 1846     		mov	r0, r3
 520 04e8 FFF7FEFF 		bl	EXTI_Init
 186:../src/interrupt_defs.cpp **** 
 187:../src/interrupt_defs.cpp **** 		GPIO_InitTypeDef g;
 188:../src/interrupt_defs.cpp **** 		g.GPIO_Mode = GPIO_Mode_OUT;
 521              		.loc 1 188 0
 522 04ec 4FF00103 		mov	r3, #1
 523 04f0 3B72     		strb	r3, [r7, #8]
 189:../src/interrupt_defs.cpp **** 		g.GPIO_OType = GPIO_OType_PP;
 524              		.loc 1 189 0
 525 04f2 4FF00003 		mov	r3, #0
 526 04f6 BB72     		strb	r3, [r7, #10]
 190:../src/interrupt_defs.cpp **** 		g.GPIO_Pin = GPIO_Pin_0;
 527              		.loc 1 190 0
 528 04f8 4FF00103 		mov	r3, #1
 529 04fc 7B60     		str	r3, [r7, #4]
 191:../src/interrupt_defs.cpp **** 		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 530              		.loc 1 191 0
 531 04fe 4FF00003 		mov	r3, #0
 532 0502 FB72     		strb	r3, [r7, #11]
 192:../src/interrupt_defs.cpp **** 		g.GPIO_Speed = GPIO_Speed_Level_1;
 533              		.loc 1 192 0
 534 0504 4FF00103 		mov	r3, #1
 535 0508 7B72     		strb	r3, [r7, #9]
 193:../src/interrupt_defs.cpp **** 
 194:../src/interrupt_defs.cpp **** 		GPIO_Init(GPIOB, &g);
 536              		.loc 1 194 0
 537 050a 07F10403 		add	r3, r7, #4
 538 050e 4FF48060 		mov	r0, #1024
 539 0512 C4F60000 		movt	r0, 18432
 540 0516 1946     		mov	r1, r3
 541 0518 FFF7FEFF 		bl	GPIO_Init
 195:../src/interrupt_defs.cpp **** 		int iter = 0;
 542              		.loc 1 195 0
 543 051c 4FF00003 		mov	r3, #0
 544 0520 7B61     		str	r3, [r7, #20]
 196:../src/interrupt_defs.cpp **** 
 197:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 545              		.loc 1 197 0
 546 0522 4FF00003 		mov	r3, #0
 547 0526 7B61     		str	r3, [r7, #20]
 548 0528 0DE0     		b	.L35
 549              	.L36:
 198:../src/interrupt_defs.cpp **** 		{
 199:../src/interrupt_defs.cpp **** 			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
 550              		.loc 1 199 0 discriminator 2
 551 052a 4FF48060 		mov	r0, #1024
 552 052e C4F60000 		movt	r0, 18432
 553 0532 4FF00101 		mov	r1, #1
 554 0536 4FF00102 		mov	r2, #1
 555 053a FFF7FEFF 		bl	GPIO_WriteBit
 197:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 556              		.loc 1 197 0 discriminator 2
 557 053e 7B69     		ldr	r3, [r7, #20]
 558 0540 03F10103 		add	r3, r3, #1
 559 0544 7B61     		str	r3, [r7, #20]
 560              	.L35:
 197:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 561              		.loc 1 197 0 is_stmt 0 discriminator 1
 562 0546 7B69     		ldr	r3, [r7, #20]
 563 0548 092B     		cmp	r3, #9
 564 054a CCBF     		ite	gt
 565 054c 0023     		movgt	r3, #0
 566 054e 0123     		movle	r3, #1
 567 0550 DBB2     		uxtb	r3, r3
 568 0552 002B     		cmp	r3, #0
 569 0554 E9D1     		bne	.L36
 200:../src/interrupt_defs.cpp **** 		}
 201:../src/interrupt_defs.cpp **** 
 202:../src/interrupt_defs.cpp **** 		GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_RESET);
 570              		.loc 1 202 0 is_stmt 1
 571 0556 4FF48060 		mov	r0, #1024
 572 055a C4F60000 		movt	r0, 18432
 573 055e 4FF00101 		mov	r1, #1
 574 0562 4FF00002 		mov	r2, #0
 575 0566 FFF7FEFF 		bl	GPIO_WriteBit
 203:../src/interrupt_defs.cpp **** 
 204:../src/interrupt_defs.cpp **** 
 205:../src/interrupt_defs.cpp **** 		g.GPIO_Mode = GPIO_Mode_IN;
 576              		.loc 1 205 0
 577 056a 4FF00003 		mov	r3, #0
 578 056e 3B72     		strb	r3, [r7, #8]
 206:../src/interrupt_defs.cpp **** 		g.GPIO_OType = GPIO_OType_OD;
 579              		.loc 1 206 0
 580 0570 4FF00103 		mov	r3, #1
 581 0574 BB72     		strb	r3, [r7, #10]
 207:../src/interrupt_defs.cpp **** 		g.GPIO_Pin = GPIO_Pin_0;
 582              		.loc 1 207 0
 583 0576 4FF00103 		mov	r3, #1
 584 057a 7B60     		str	r3, [r7, #4]
 208:../src/interrupt_defs.cpp **** 		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 585              		.loc 1 208 0
 586 057c 4FF00003 		mov	r3, #0
 587 0580 FB72     		strb	r3, [r7, #11]
 209:../src/interrupt_defs.cpp **** 		g.GPIO_Speed = GPIO_Speed_Level_1;
 588              		.loc 1 209 0
 589 0582 4FF00103 		mov	r3, #1
 590 0586 7B72     		strb	r3, [r7, #9]
 210:../src/interrupt_defs.cpp **** 
 211:../src/interrupt_defs.cpp **** 		GPIO_Init(GPIOB, &g);
 591              		.loc 1 211 0
 592 0588 07F10403 		add	r3, r7, #4
 593 058c 4FF48060 		mov	r0, #1024
 594 0590 C4F60000 		movt	r0, 18432
 595 0594 1946     		mov	r1, r3
 596 0596 FFF7FEFF 		bl	GPIO_Init
 212:../src/interrupt_defs.cpp **** 
 213:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM2, 0);
 597              		.loc 1 213 0
 598 059a 4FF08040 		mov	r0, #1073741824
 599 059e 4FF00001 		mov	r1, #0
 600 05a2 FFF7FEFF 		bl	TIM_SetCounter
 214:../src/interrupt_defs.cpp **** 
 215:../src/interrupt_defs.cpp **** 		stage = 0;
 601              		.loc 1 215 0
 602 05a6 40F20003 		movw	r3, #:lower16:stage
 603 05aa C0F20003 		movt	r3, #:upper16:stage
 604 05ae 4FF00002 		mov	r2, #0
 605 05b2 1A60     		str	r2, [r3, #0]
 216:../src/interrupt_defs.cpp **** 
 217:../src/interrupt_defs.cpp **** 		e.EXTI_Line = EXTI_Line9;
 606              		.loc 1 217 0
 607 05b4 4FF00903 		mov	r3, #9
 608 05b8 FB60     		str	r3, [r7, #12]
 218:../src/interrupt_defs.cpp **** 		e.EXTI_LineCmd = ENABLE;
 609              		.loc 1 218 0
 610 05ba 4FF00103 		mov	r3, #1
 611 05be BB74     		strb	r3, [r7, #18]
 219:../src/interrupt_defs.cpp **** 		e.EXTI_Mode = EXTI_Mode_Interrupt;
 612              		.loc 1 219 0
 613 05c0 4FF00003 		mov	r3, #0
 614 05c4 3B74     		strb	r3, [r7, #16]
 220:../src/interrupt_defs.cpp **** 		e.EXTI_Trigger = EXTI_Trigger_Rising;
 615              		.loc 1 220 0
 616 05c6 4FF00803 		mov	r3, #8
 617 05ca 7B74     		strb	r3, [r7, #17]
 221:../src/interrupt_defs.cpp **** 
 222:../src/interrupt_defs.cpp **** 		EXTI_Init(&e);
 618              		.loc 1 222 0
 619 05cc 07F10C03 		add	r3, r7, #12
 620 05d0 1846     		mov	r0, r3
 621 05d2 FFF7FEFF 		bl	EXTI_Init
 223:../src/interrupt_defs.cpp **** 
 224:../src/interrupt_defs.cpp **** 		NVIC_InitTypeDef nv;
 225:../src/interrupt_defs.cpp **** 
 226:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannel = EXTI9_5_IRQn;
 622              		.loc 1 226 0
 623 05d6 4FF01703 		mov	r3, #23
 624 05da 3B70     		strb	r3, [r7, #0]
 227:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelCmd = ENABLE;
 625              		.loc 1 227 0
 626 05dc 4FF00103 		mov	r3, #1
 627 05e0 FB70     		strb	r3, [r7, #3]
 228:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelPreemptionPriority = 0;
 628              		.loc 1 228 0
 629 05e2 4FF00003 		mov	r3, #0
 630 05e6 7B70     		strb	r3, [r7, #1]
 229:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelSubPriority = 0;
 631              		.loc 1 229 0
 632 05e8 4FF00003 		mov	r3, #0
 633 05ec BB70     		strb	r3, [r7, #2]
 230:../src/interrupt_defs.cpp **** 
 231:../src/interrupt_defs.cpp **** 		NVIC_Init(&nv);
 634              		.loc 1 231 0
 635 05ee 3B46     		mov	r3, r7
 636 05f0 1846     		mov	r0, r3
 637 05f2 FFF7FEFF 		bl	NVIC_Init
 638              	.LBE3:
 232:../src/interrupt_defs.cpp **** 
 233:../src/interrupt_defs.cpp **** 	}
 639              		.loc 1 233 0
 640 05f6 07F11807 		add	r7, r7, #24
 641 05fa BD46     		mov	sp, r7
 642 05fc 80BD     		pop	{r7, pc}
 643              		.cfi_endproc
 644              	.LFE112:
 646 05fe 00BF     		.align	2
 647              		.global	TIM6_DAC_IRQHandler
 648              		.thumb
 649              		.thumb_func
 651              	TIM6_DAC_IRQHandler:
 652              	.LFB113:
 234:../src/interrupt_defs.cpp **** 	void TIM6_DAC_IRQHandler(void)
 235:../src/interrupt_defs.cpp **** 	{
 653              		.loc 1 235 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 1, uses_anonymous_args = 0
 657 0600 80B5     		push	{r7, lr}
 658              	.LCFI6:
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 7, -8
 661              		.cfi_offset 14, -4
 662 0602 00AF     		add	r7, sp, #0
 663              	.LCFI7:
 664              		.cfi_def_cfa_register 7
 236:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 665              		.loc 1 236 0
 666 0604 4FF48050 		mov	r0, #4096
 667 0608 C4F20000 		movt	r0, 16384
 668 060c 4FF00101 		mov	r1, #1
 669 0610 FFF7FEFF 		bl	TIM_ClearITPendingBit
 237:../src/interrupt_defs.cpp **** 		if(state == ST_READY)
 670              		.loc 1 237 0
 671 0614 40F20003 		movw	r3, #:lower16:state
 672 0618 C0F20003 		movt	r3, #:upper16:state
 673 061c 1B68     		ldr	r3, [r3, #0]
 674 061e B3F1FF3F 		cmp	r3, #-1
 675 0622 16D1     		bne	.L38
 238:../src/interrupt_defs.cpp **** 		{
 239:../src/interrupt_defs.cpp **** 			GPIO_Write(GPIOE, led_matrix[2] | led_matrix[5]); 	// Two greens
 676              		.loc 1 239 0
 677 0624 40F20003 		movw	r3, #:lower16:led_matrix
 678 0628 C0F20003 		movt	r3, #:upper16:led_matrix
 679 062c 9B68     		ldr	r3, [r3, #8]
 680 062e 9AB2     		uxth	r2, r3
 681 0630 40F20003 		movw	r3, #:lower16:led_matrix
 682 0634 C0F20003 		movt	r3, #:upper16:led_matrix
 683 0638 5B69     		ldr	r3, [r3, #20]
 684 063a 9BB2     		uxth	r3, r3
 685 063c 1343     		orrs	r3, r3, r2
 686 063e 9BB2     		uxth	r3, r3
 687 0640 9BB2     		uxth	r3, r3
 688 0642 4FF48050 		mov	r0, #4096
 689 0646 C4F60000 		movt	r0, 18432
 690 064a 1946     		mov	r1, r3
 691 064c FFF7FEFF 		bl	GPIO_Write
 692 0650 01E1     		b	.L37
 693              	.L38:
 240:../src/interrupt_defs.cpp **** 		}
 241:../src/interrupt_defs.cpp **** 		else if(state == ST_WANDER)
 694              		.loc 1 241 0
 695 0652 40F20003 		movw	r3, #:lower16:state
 696 0656 C0F20003 		movt	r3, #:upper16:state
 697 065a 1B68     		ldr	r3, [r3, #0]
 698 065c 002B     		cmp	r3, #0
 699 065e 16D1     		bne	.L40
 242:../src/interrupt_defs.cpp **** 		{
 243:../src/interrupt_defs.cpp **** 			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0]);					// Two Orange (one's lit via PWM pin for E
 700              		.loc 1 243 0
 701 0660 40F20003 		movw	r3, #:lower16:led_matrix
 702 0664 C0F20003 		movt	r3, #:upper16:led_matrix
 703 0668 9B69     		ldr	r3, [r3, #24]
 704 066a 9AB2     		uxth	r2, r3
 705 066c 40F20003 		movw	r3, #:lower16:led_matrix
 706 0670 C0F20003 		movt	r3, #:upper16:led_matrix
 707 0674 1B68     		ldr	r3, [r3, #0]
 708 0676 9BB2     		uxth	r3, r3
 709 0678 1343     		orrs	r3, r3, r2
 710 067a 9BB2     		uxth	r3, r3
 711 067c 9BB2     		uxth	r3, r3
 712 067e 4FF48050 		mov	r0, #4096
 713 0682 C4F60000 		movt	r0, 18432
 714 0686 1946     		mov	r1, r3
 715 0688 FFF7FEFF 		bl	GPIO_Write
 716 068c E3E0     		b	.L37
 717              	.L40:
 244:../src/interrupt_defs.cpp **** 		}
 245:../src/interrupt_defs.cpp **** 		else if(state == ST_HOMING)
 718              		.loc 1 245 0
 719 068e 40F20003 		movw	r3, #:lower16:state
 720 0692 C0F20003 		movt	r3, #:upper16:state
 721 0696 1B68     		ldr	r3, [r3, #0]
 722 0698 012B     		cmp	r3, #1
 723 069a 1ED1     		bne	.L41
 246:../src/interrupt_defs.cpp **** 		{
 247:../src/interrupt_defs.cpp **** 			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[1] | led_matrix[3]);	// Two orange + Two red
 724              		.loc 1 247 0
 725 069c 40F20003 		movw	r3, #:lower16:led_matrix
 726 06a0 C0F20003 		movt	r3, #:upper16:led_matrix
 727 06a4 1B68     		ldr	r3, [r3, #0]
 728 06a6 9AB2     		uxth	r2, r3
 729 06a8 40F20003 		movw	r3, #:lower16:led_matrix
 730 06ac C0F20003 		movt	r3, #:upper16:led_matrix
 731 06b0 5B68     		ldr	r3, [r3, #4]
 732 06b2 9BB2     		uxth	r3, r3
 733 06b4 1343     		orrs	r3, r3, r2
 734 06b6 9AB2     		uxth	r2, r3
 735 06b8 40F20003 		movw	r3, #:lower16:led_matrix
 736 06bc C0F20003 		movt	r3, #:upper16:led_matrix
 737 06c0 DB68     		ldr	r3, [r3, #12]
 738 06c2 9BB2     		uxth	r3, r3
 739 06c4 1343     		orrs	r3, r3, r2
 740 06c6 9BB2     		uxth	r3, r3
 741 06c8 9BB2     		uxth	r3, r3
 742 06ca 4FF48050 		mov	r0, #4096
 743 06ce C4F60000 		movt	r0, 18432
 744 06d2 1946     		mov	r1, r3
 745 06d4 FFF7FEFF 		bl	GPIO_Write
 746 06d8 BDE0     		b	.L37
 747              	.L41:
 248:../src/interrupt_defs.cpp **** 		}
 249:../src/interrupt_defs.cpp **** 		else if(state == ST_FIREFIGHT)
 748              		.loc 1 249 0
 749 06da 40F20003 		movw	r3, #:lower16:state
 750 06de C0F20003 		movt	r3, #:upper16:state
 751 06e2 1B68     		ldr	r3, [r3, #0]
 752 06e4 022B     		cmp	r3, #2
 753 06e6 26D1     		bne	.L42
 250:../src/interrupt_defs.cpp **** 		{
 251:../src/interrupt_defs.cpp **** 			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[1] | led_matrix[3] | led_matrix[6]);
 754              		.loc 1 251 0
 755 06e8 40F20003 		movw	r3, #:lower16:led_matrix
 756 06ec C0F20003 		movt	r3, #:upper16:led_matrix
 757 06f0 1B68     		ldr	r3, [r3, #0]
 758 06f2 9AB2     		uxth	r2, r3
 759 06f4 40F20003 		movw	r3, #:lower16:led_matrix
 760 06f8 C0F20003 		movt	r3, #:upper16:led_matrix
 761 06fc 5B68     		ldr	r3, [r3, #4]
 762 06fe 9BB2     		uxth	r3, r3
 763 0700 1343     		orrs	r3, r3, r2
 764 0702 9AB2     		uxth	r2, r3
 765 0704 40F20003 		movw	r3, #:lower16:led_matrix
 766 0708 C0F20003 		movt	r3, #:upper16:led_matrix
 767 070c DB68     		ldr	r3, [r3, #12]
 768 070e 9BB2     		uxth	r3, r3
 769 0710 1343     		orrs	r3, r3, r2
 770 0712 9AB2     		uxth	r2, r3
 771 0714 40F20003 		movw	r3, #:lower16:led_matrix
 772 0718 C0F20003 		movt	r3, #:upper16:led_matrix
 773 071c 9B69     		ldr	r3, [r3, #24]
 774 071e 9BB2     		uxth	r3, r3
 775 0720 1343     		orrs	r3, r3, r2
 776 0722 9BB2     		uxth	r3, r3
 777 0724 9BB2     		uxth	r3, r3
 778 0726 4FF48050 		mov	r0, #4096
 779 072a C4F60000 		movt	r0, 18432
 780 072e 1946     		mov	r1, r3
 781 0730 FFF7FEFF 		bl	GPIO_Write
 782 0734 8FE0     		b	.L37
 783              	.L42:
 252:../src/interrupt_defs.cpp **** 		}
 253:../src/interrupt_defs.cpp **** 		else if (state == ST_CANDLE_BLOWOUT)
 784              		.loc 1 253 0
 785 0736 40F20003 		movw	r3, #:lower16:state
 786 073a C0F20003 		movt	r3, #:upper16:state
 787 073e 1B68     		ldr	r3, [r3, #0]
 788 0740 032B     		cmp	r3, #3
 789 0742 3ED1     		bne	.L43
 254:../src/interrupt_defs.cpp **** 		{
 255:../src/interrupt_defs.cpp **** 			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3] |
 790              		.loc 1 255 0
 791 0744 40F20003 		movw	r3, #:lower16:led_matrix
 792 0748 C0F20003 		movt	r3, #:upper16:led_matrix
 793 074c 1B68     		ldr	r3, [r3, #0]
 256:../src/interrupt_defs.cpp **** 							  led_matrix[4] | led_matrix[5] | led_matrix[6]); // All LED's
 794              		.loc 1 256 0
 795 074e 9AB2     		uxth	r2, r3
 255:../src/interrupt_defs.cpp **** 			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3] |
 796              		.loc 1 255 0
 797 0750 40F20003 		movw	r3, #:lower16:led_matrix
 798 0754 C0F20003 		movt	r3, #:upper16:led_matrix
 799 0758 5B68     		ldr	r3, [r3, #4]
 800              		.loc 1 256 0
 801 075a 9BB2     		uxth	r3, r3
 802 075c 1343     		orrs	r3, r3, r2
 803 075e 9AB2     		uxth	r2, r3
 255:../src/interrupt_defs.cpp **** 			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3] |
 804              		.loc 1 255 0
 805 0760 40F20003 		movw	r3, #:lower16:led_matrix
 806 0764 C0F20003 		movt	r3, #:upper16:led_matrix
 807 0768 9B68     		ldr	r3, [r3, #8]
 808              		.loc 1 256 0
 809 076a 9BB2     		uxth	r3, r3
 810 076c 1343     		orrs	r3, r3, r2
 811 076e 9AB2     		uxth	r2, r3
 255:../src/interrupt_defs.cpp **** 			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3] |
 812              		.loc 1 255 0
 813 0770 40F20003 		movw	r3, #:lower16:led_matrix
 814 0774 C0F20003 		movt	r3, #:upper16:led_matrix
 815 0778 DB68     		ldr	r3, [r3, #12]
 816              		.loc 1 256 0
 817 077a 9BB2     		uxth	r3, r3
 818 077c 1343     		orrs	r3, r3, r2
 819 077e 9AB2     		uxth	r2, r3
 820 0780 40F20003 		movw	r3, #:lower16:led_matrix
 821 0784 C0F20003 		movt	r3, #:upper16:led_matrix
 822 0788 1B69     		ldr	r3, [r3, #16]
 823 078a 9BB2     		uxth	r3, r3
 824 078c 1343     		orrs	r3, r3, r2
 825 078e 9AB2     		uxth	r2, r3
 826 0790 40F20003 		movw	r3, #:lower16:led_matrix
 827 0794 C0F20003 		movt	r3, #:upper16:led_matrix
 828 0798 5B69     		ldr	r3, [r3, #20]
 829 079a 9BB2     		uxth	r3, r3
 830 079c 1343     		orrs	r3, r3, r2
 831 079e 9AB2     		uxth	r2, r3
 832 07a0 40F20003 		movw	r3, #:lower16:led_matrix
 833 07a4 C0F20003 		movt	r3, #:upper16:led_matrix
 834 07a8 9B69     		ldr	r3, [r3, #24]
 835 07aa 9BB2     		uxth	r3, r3
 836 07ac 1343     		orrs	r3, r3, r2
 837 07ae 9BB2     		uxth	r3, r3
 838 07b0 9BB2     		uxth	r3, r3
 839 07b2 4FF48050 		mov	r0, #4096
 840 07b6 C4F60000 		movt	r0, 18432
 841 07ba 1946     		mov	r1, r3
 842 07bc FFF7FEFF 		bl	GPIO_Write
 843 07c0 49E0     		b	.L37
 844              	.L43:
 257:../src/interrupt_defs.cpp **** 		}
 258:../src/interrupt_defs.cpp **** 		else if (state == ST_DONE)
 845              		.loc 1 258 0
 846 07c2 40F20003 		movw	r3, #:lower16:state
 847 07c6 C0F20003 		movt	r3, #:upper16:state
 848 07ca 1B68     		ldr	r3, [r3, #0]
 849 07cc 042B     		cmp	r3, #4
 850 07ce 42D1     		bne	.L37
 259:../src/interrupt_defs.cpp **** 		{
 260:../src/interrupt_defs.cpp **** 			++led_iter;
 851              		.loc 1 260 0
 852 07d0 40F20003 		movw	r3, #:lower16:led_iter
 853 07d4 C0F20003 		movt	r3, #:upper16:led_iter
 854 07d8 1B68     		ldr	r3, [r3, #0]
 855 07da 03F10102 		add	r2, r3, #1
 856 07de 40F20003 		movw	r3, #:lower16:led_iter
 857 07e2 C0F20003 		movt	r3, #:upper16:led_iter
 858 07e6 1A60     		str	r2, [r3, #0]
 261:../src/interrupt_defs.cpp **** 			GPIO_Write(GPIOE, led_matrix[led_iter] | led_matrix[6-led_iter]);
 859              		.loc 1 261 0
 860 07e8 40F20003 		movw	r3, #:lower16:led_iter
 861 07ec C0F20003 		movt	r3, #:upper16:led_iter
 862 07f0 1A68     		ldr	r2, [r3, #0]
 863 07f2 40F20003 		movw	r3, #:lower16:led_matrix
 864 07f6 C0F20003 		movt	r3, #:upper16:led_matrix
 865 07fa 53F82230 		ldr	r3, [r3, r2, lsl #2]
 866 07fe 9AB2     		uxth	r2, r3
 867 0800 40F20003 		movw	r3, #:lower16:led_iter
 868 0804 C0F20003 		movt	r3, #:upper16:led_iter
 869 0808 1B68     		ldr	r3, [r3, #0]
 870 080a C3F10601 		rsb	r1, r3, #6
 871 080e 40F20003 		movw	r3, #:lower16:led_matrix
 872 0812 C0F20003 		movt	r3, #:upper16:led_matrix
 873 0816 53F82130 		ldr	r3, [r3, r1, lsl #2]
 874 081a 9BB2     		uxth	r3, r3
 875 081c 1343     		orrs	r3, r3, r2
 876 081e 9BB2     		uxth	r3, r3
 877 0820 9BB2     		uxth	r3, r3
 878 0822 4FF48050 		mov	r0, #4096
 879 0826 C4F60000 		movt	r0, 18432
 880 082a 1946     		mov	r1, r3
 881 082c FFF7FEFF 		bl	GPIO_Write
 262:../src/interrupt_defs.cpp **** 			if(led_iter > 6)
 882              		.loc 1 262 0
 883 0830 40F20003 		movw	r3, #:lower16:led_iter
 884 0834 C0F20003 		movt	r3, #:upper16:led_iter
 885 0838 1B68     		ldr	r3, [r3, #0]
 886 083a 062B     		cmp	r3, #6
 887 083c D4BF     		ite	le
 888 083e 0023     		movle	r3, #0
 889 0840 0123     		movgt	r3, #1
 890 0842 DBB2     		uxtb	r3, r3
 891 0844 002B     		cmp	r3, #0
 892 0846 06D0     		beq	.L37
 263:../src/interrupt_defs.cpp **** 			{
 264:../src/interrupt_defs.cpp **** 				led_iter = 0;
 893              		.loc 1 264 0
 894 0848 40F20003 		movw	r3, #:lower16:led_iter
 895 084c C0F20003 		movt	r3, #:upper16:led_iter
 896 0850 4FF00002 		mov	r2, #0
 897 0854 1A60     		str	r2, [r3, #0]
 898              	.L37:
 265:../src/interrupt_defs.cpp **** 			}
 266:../src/interrupt_defs.cpp **** 		}
 267:../src/interrupt_defs.cpp **** 	}
 899              		.loc 1 267 0
 900 0856 80BD     		pop	{r7, pc}
 901              		.cfi_endproc
 902              	.LFE113:
 904              		.align	2
 905              		.global	ADC1_2_IRQHandler
 906              		.thumb
 907              		.thumb_func
 909              	ADC1_2_IRQHandler:
 910              	.LFB114:
 268:../src/interrupt_defs.cpp **** 	void ADC1_2_IRQHandler(void)
 269:../src/interrupt_defs.cpp **** 	{
 911              		.loc 1 269 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 1, uses_anonymous_args = 0
 915 0858 80B5     		push	{r7, lr}
 916              	.LCFI8:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 7, -8
 919              		.cfi_offset 14, -4
 920 085a 00AF     		add	r7, sp, #0
 921              	.LCFI9:
 922              		.cfi_def_cfa_register 7
 270:../src/interrupt_defs.cpp **** 		if(ADC_GetITStatus(ADC1, ADC_IT_EOC) == SET)
 923              		.loc 1 270 0
 924 085c 4FF0A040 		mov	r0, #1342177280
 925 0860 4FF00401 		mov	r1, #4
 926 0864 FFF7FEFF 		bl	ADC_GetITStatus
 927 0868 0346     		mov	r3, r0
 928 086a 012B     		cmp	r3, #1
 929 086c 14BF     		ite	ne
 930 086e 0023     		movne	r3, #0
 931 0870 0123     		moveq	r3, #1
 932 0872 DBB2     		uxtb	r3, r3
 933 0874 002B     		cmp	r3, #0
 934 0876 10D0     		beq	.L44
 271:../src/interrupt_defs.cpp **** 		{
 272:../src/interrupt_defs.cpp **** 			adcval = ADC_GetConversionValue(ADC1);
 935              		.loc 1 272 0
 936 0878 4FF0A040 		mov	r0, #1342177280
 937 087c FFF7FEFF 		bl	ADC_GetConversionValue
 938 0880 0346     		mov	r3, r0
 939 0882 1A46     		mov	r2, r3
 940 0884 40F20003 		movw	r3, #:lower16:adcval
 941 0888 C0F20003 		movt	r3, #:upper16:adcval
 942 088c 1A60     		str	r2, [r3, #0]
 273:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 943              		.loc 1 273 0
 944 088e 4FF0A040 		mov	r0, #1342177280
 945 0892 4FF00401 		mov	r1, #4
 946 0896 FFF7FEFF 		bl	ADC_ClearITPendingBit
 947              	.L44:
 274:../src/interrupt_defs.cpp **** 		}
 275:../src/interrupt_defs.cpp **** 	}
 948              		.loc 1 275 0
 949 089a 80BD     		pop	{r7, pc}
 950              		.cfi_endproc
 951              	.LFE114:
 953              		.align	2
 954              		.global	DMA1_Channel1_IRQHandler
 955              		.thumb
 956              		.thumb_func
 958              	DMA1_Channel1_IRQHandler:
 959              	.LFB115:
 276:../src/interrupt_defs.cpp **** 
 277:../src/interrupt_defs.cpp **** 	void DMA1_Channel1_IRQHandler(void)
 278:../src/interrupt_defs.cpp **** 	{
 960              		.loc 1 278 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 0
 963              		@ frame_needed = 1, uses_anonymous_args = 0
 964 089c 80B5     		push	{r7, lr}
 965              	.LCFI10:
 966              		.cfi_def_cfa_offset 8
 967              		.cfi_offset 7, -8
 968              		.cfi_offset 14, -4
 969 089e 00AF     		add	r7, sp, #0
 970              	.LCFI11:
 971              		.cfi_def_cfa_register 7
 279:../src/interrupt_defs.cpp **** 		DMA_ClearITPendingBit(DMA1_IT_TC1);
 972              		.loc 1 279 0
 973 08a0 4FF00200 		mov	r0, #2
 974 08a4 FFF7FEFF 		bl	DMA_ClearITPendingBit
 280:../src/interrupt_defs.cpp **** 		new_data = 1;
 975              		.loc 1 280 0
 976 08a8 40F20003 		movw	r3, #:lower16:new_data
 977 08ac C0F20003 		movt	r3, #:upper16:new_data
 978 08b0 4FF00102 		mov	r2, #1
 979 08b4 1A60     		str	r2, [r3, #0]
 281:../src/interrupt_defs.cpp **** 	}
 980              		.loc 1 281 0
 981 08b6 80BD     		pop	{r7, pc}
 982              		.cfi_endproc
 983              	.LFE115:
 985              		.align	2
 986              		.global	DMA2_Channel1_IRQHandler
 987              		.thumb
 988              		.thumb_func
 990              	DMA2_Channel1_IRQHandler:
 991              	.LFB116:
 282:../src/interrupt_defs.cpp **** 
 283:../src/interrupt_defs.cpp **** 	void DMA2_Channel1_IRQHandler(void)
 284:../src/interrupt_defs.cpp **** 	{
 992              		.loc 1 284 0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 0
 995              		@ frame_needed = 1, uses_anonymous_args = 0
 996 08b8 80B5     		push	{r7, lr}
 997              	.LCFI12:
 998              		.cfi_def_cfa_offset 8
 999              		.cfi_offset 7, -8
 1000              		.cfi_offset 14, -4
 1001 08ba 00AF     		add	r7, sp, #0
 1002              	.LCFI13:
 1003              		.cfi_def_cfa_register 7
 285:../src/interrupt_defs.cpp **** 		DMA_ClearITPendingBit(DMA2_IT_TC1);
 1004              		.loc 1 285 0
 1005 08bc 4FF00200 		mov	r0, #2
 1006 08c0 C1F20000 		movt	r0, 4096
 1007 08c4 FFF7FEFF 		bl	DMA_ClearITPendingBit
 286:../src/interrupt_defs.cpp **** 		adc2_new_data = 1;
 1008              		.loc 1 286 0
 1009 08c8 40F20003 		movw	r3, #:lower16:adc2_new_data
 1010 08cc C0F20003 		movt	r3, #:upper16:adc2_new_data
 1011 08d0 4FF00102 		mov	r2, #1
 1012 08d4 1A70     		strb	r2, [r3, #0]
 287:../src/interrupt_defs.cpp **** 	}
 1013              		.loc 1 287 0
 1014 08d6 80BD     		pop	{r7, pc}
 1015              		.cfi_endproc
 1016              	.LFE116:
 1018              		.align	2
 1019              		.global	ADC3_IRQHandler
 1020              		.thumb
 1021              		.thumb_func
 1023              	ADC3_IRQHandler:
 1024              	.LFB117:
 288:../src/interrupt_defs.cpp **** 
 289:../src/interrupt_defs.cpp **** 	void ADC3_IRQHandler(void)
 290:../src/interrupt_defs.cpp **** 	{
 1025              		.loc 1 290 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 8
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029 08d8 80B5     		push	{r7, lr}
 1030              	.LCFI14:
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 7, -8
 1033              		.cfi_offset 14, -4
 1034 08da 82B0     		sub	sp, sp, #8
 1035              	.LCFI15:
 1036              		.cfi_def_cfa_offset 16
 1037 08dc 00AF     		add	r7, sp, #0
 1038              	.LCFI16:
 1039              		.cfi_def_cfa_register 7
 1040              	.LBB4:
 291:../src/interrupt_defs.cpp **** 		int i = 0;
 1041              		.loc 1 291 0
 1042 08de 4FF00003 		mov	r3, #0
 1043 08e2 7B60     		str	r3, [r7, #4]
 292:../src/interrupt_defs.cpp **** 		int sum = 0;
 1044              		.loc 1 292 0
 1045 08e4 4FF00003 		mov	r3, #0
 1046 08e8 3B60     		str	r3, [r7, #0]
 293:../src/interrupt_defs.cpp **** 		if(ADC_GetITStatus(ADC3, ADC_IT_AWD1) != RESET)
 1047              		.loc 1 293 0
 1048 08ea 4FF48060 		mov	r0, #1024
 1049 08ee C5F20000 		movt	r0, 20480
 1050 08f2 4FF08001 		mov	r1, #128
 1051 08f6 FFF7FEFF 		bl	ADC_GetITStatus
 1052 08fa 0346     		mov	r3, r0
 1053 08fc 002B     		cmp	r3, #0
 1054 08fe 0CBF     		ite	eq
 1055 0900 0023     		moveq	r3, #0
 1056 0902 0123     		movne	r3, #1
 1057 0904 DBB2     		uxtb	r3, r3
 1058 0906 002B     		cmp	r3, #0
 1059 0908 38D0     		beq	.L49
 294:../src/interrupt_defs.cpp **** 		{
 295:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD1);
 1060              		.loc 1 295 0
 1061 090a 4FF48060 		mov	r0, #1024
 1062 090e C5F20000 		movt	r0, 20480
 1063 0912 4FF08001 		mov	r1, #128
 1064 0916 FFF7FEFF 		bl	ADC_ClearITPendingBit
 296:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 1065              		.loc 1 296 0
 1066 091a 4FF00003 		mov	r3, #0
 1067 091e 7B60     		str	r3, [r7, #4]
 1068 0920 0DE0     		b	.L50
 1069              	.L51:
 297:../src/interrupt_defs.cpp **** 			{
 298:../src/interrupt_defs.cpp **** 				sum += ADC_GetConversionValue(ADC3);
 1070              		.loc 1 298 0 discriminator 2
 1071 0922 4FF48060 		mov	r0, #1024
 1072 0926 C5F20000 		movt	r0, 20480
 1073 092a FFF7FEFF 		bl	ADC_GetConversionValue
 1074 092e 0346     		mov	r3, r0
 1075 0930 3A68     		ldr	r2, [r7, #0]
 1076 0932 D318     		adds	r3, r2, r3
 1077 0934 3B60     		str	r3, [r7, #0]
 296:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 1078              		.loc 1 296 0 discriminator 2
 1079 0936 7B68     		ldr	r3, [r7, #4]
 1080 0938 03F10103 		add	r3, r3, #1
 1081 093c 7B60     		str	r3, [r7, #4]
 1082              	.L50:
 296:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 1083              		.loc 1 296 0 is_stmt 0 discriminator 1
 1084 093e 7B68     		ldr	r3, [r7, #4]
 1085 0940 222B     		cmp	r3, #34
 1086 0942 CCBF     		ite	gt
 1087 0944 0023     		movgt	r3, #0
 1088 0946 0123     		movle	r3, #1
 1089 0948 DBB2     		uxtb	r3, r3
 1090 094a 002B     		cmp	r3, #0
 1091 094c E9D1     		bne	.L51
 299:../src/interrupt_defs.cpp **** 			}
 300:../src/interrupt_defs.cpp **** 			if((float)sum/float(35) > 2048)
 1092              		.loc 1 300 0 is_stmt 1
 1093 094e D7ED007A 		flds	s15, [r7, #0]	@ int
 1094 0952 B8EEE77A 		fsitos	s14, s15
 1095 0956 DFED1B7A 		flds	s15, .L55
 1096 095a 87EE277A 		fdivs	s14, s14, s15
 1097 095e DFED1A7A 		flds	s15, .L55+4
 1098 0962 B4EEE77A 		fcmpes	s14, s15
 1099 0966 F1EE10FA 		fmstat
 1100 096a 26DD     		ble	.L48
 1101              	.L54:
 301:../src/interrupt_defs.cpp **** 			{
 302:../src/interrupt_defs.cpp **** 				adc3_awd1 = 1;
 1102              		.loc 1 302 0
 1103 096c 40F20003 		movw	r3, #:lower16:adc3_awd1
 1104 0970 C0F20003 		movt	r3, #:upper16:adc3_awd1
 1105 0974 4FF00102 		mov	r2, #1
 1106 0978 1A70     		strb	r2, [r3, #0]
 1107 097a 1EE0     		b	.L48
 1108              	.L49:
 303:../src/interrupt_defs.cpp **** 			}
 304:../src/interrupt_defs.cpp **** 		}
 305:../src/interrupt_defs.cpp **** 		else if (ADC_GetITStatus(ADC3, ADC_IT_AWD2) != RESET)
 1109              		.loc 1 305 0
 1110 097c 4FF48060 		mov	r0, #1024
 1111 0980 C5F20000 		movt	r0, 20480
 1112 0984 4FF48071 		mov	r1, #256
 1113 0988 FFF7FEFF 		bl	ADC_GetITStatus
 1114 098c 0346     		mov	r3, r0
 1115 098e 002B     		cmp	r3, #0
 1116 0990 0CBF     		ite	eq
 1117 0992 0023     		moveq	r3, #0
 1118 0994 0123     		movne	r3, #1
 1119 0996 DBB2     		uxtb	r3, r3
 1120 0998 002B     		cmp	r3, #0
 1121 099a 0ED0     		beq	.L48
 306:../src/interrupt_defs.cpp **** 		{
 307:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD2);
 1122              		.loc 1 307 0
 1123 099c 4FF48060 		mov	r0, #1024
 1124 09a0 C5F20000 		movt	r0, 20480
 1125 09a4 4FF48071 		mov	r1, #256
 1126 09a8 FFF7FEFF 		bl	ADC_ClearITPendingBit
 308:../src/interrupt_defs.cpp **** 			adc3_awd2 = 1;
 1127              		.loc 1 308 0
 1128 09ac 40F20003 		movw	r3, #:lower16:adc3_awd2
 1129 09b0 C0F20003 		movt	r3, #:upper16:adc3_awd2
 1130 09b4 4FF00102 		mov	r2, #1
 1131 09b8 1A70     		strb	r2, [r3, #0]
 1132              	.L48:
 1133              	.LBE4:
 309:../src/interrupt_defs.cpp **** 		}
 310:../src/interrupt_defs.cpp **** 	}
 1134              		.loc 1 310 0
 1135 09ba 07F10807 		add	r7, r7, #8
 1136 09be BD46     		mov	sp, r7
 1137 09c0 80BD     		pop	{r7, pc}
 1138              	.L56:
 1139 09c2 00BF     		.align	2
 1140              	.L55:
 1141 09c4 00000C42 		.word	1108082688
 1142 09c8 00000045 		.word	1157627904
 1143              		.cfi_endproc
 1144              	.LFE117:
 1146              		.align	2
 1147              		.global	EXTI9_5_IRQHandler
 1148              		.thumb
 1149              		.thumb_func
 1151              	EXTI9_5_IRQHandler:
 1152              	.LFB118:
 311:../src/interrupt_defs.cpp **** 
 312:../src/interrupt_defs.cpp **** 	void EXTI9_5_IRQHandler(void)//EXTI5_IRQHandler(void)
 313:../src/interrupt_defs.cpp **** 	{
 1153              		.loc 1 313 0
 1154              		.cfi_startproc
 1155              		@ args = 0, pretend = 0, frame = 16
 1156              		@ frame_needed = 1, uses_anonymous_args = 0
 1157 09cc 80B5     		push	{r7, lr}
 1158              	.LCFI17:
 1159              		.cfi_def_cfa_offset 8
 1160              		.cfi_offset 7, -8
 1161              		.cfi_offset 14, -4
 1162 09ce 84B0     		sub	sp, sp, #16
 1163              	.LCFI18:
 1164              		.cfi_def_cfa_offset 24
 1165 09d0 00AF     		add	r7, sp, #0
 1166              	.LCFI19:
 1167              		.cfi_def_cfa_register 7
 1168              	.LBB5:
 314:../src/interrupt_defs.cpp **** 		EXTI_ClearITPendingBit(EXTI_Line9);
 1169              		.loc 1 314 0
 1170 09d2 4FF00900 		mov	r0, #9
 1171 09d6 FFF7FEFF 		bl	EXTI_ClearITPendingBit
 1172              	.LBB6:
 315:../src/interrupt_defs.cpp **** 		if(stage == 0)
 1173              		.loc 1 315 0
 1174 09da 40F20003 		movw	r3, #:lower16:stage
 1175 09de C0F20003 		movt	r3, #:upper16:stage
 1176 09e2 1B68     		ldr	r3, [r3, #0]
 1177 09e4 002B     		cmp	r3, #0
 1178 09e6 24D1     		bne	.L58
 1179              	.LBB7:
 316:../src/interrupt_defs.cpp **** 		{
 317:../src/interrupt_defs.cpp **** 			TIM_SetCounter(TIM2, 0);
 1180              		.loc 1 317 0
 1181 09e8 4FF08040 		mov	r0, #1073741824
 1182 09ec 4FF00001 		mov	r1, #0
 1183 09f0 FFF7FEFF 		bl	TIM_SetCounter
 318:../src/interrupt_defs.cpp **** 			TIM_Cmd(TIM2, ENABLE);
 1184              		.loc 1 318 0
 1185 09f4 4FF08040 		mov	r0, #1073741824
 1186 09f8 4FF00101 		mov	r1, #1
 1187 09fc FFF7FEFF 		bl	TIM_Cmd
 319:../src/interrupt_defs.cpp **** 
 320:../src/interrupt_defs.cpp **** 			EXTI_InitTypeDef e;
 321:../src/interrupt_defs.cpp **** 
 322:../src/interrupt_defs.cpp **** 			e.EXTI_Line = EXTI_Line9;
 1188              		.loc 1 322 0
 1189 0a00 4FF00903 		mov	r3, #9
 1190 0a04 BB60     		str	r3, [r7, #8]
 323:../src/interrupt_defs.cpp **** 			e.EXTI_LineCmd = ENABLE;
 1191              		.loc 1 323 0
 1192 0a06 4FF00103 		mov	r3, #1
 1193 0a0a BB73     		strb	r3, [r7, #14]
 324:../src/interrupt_defs.cpp **** 			e.EXTI_Mode = EXTI_Mode_Interrupt;
 1194              		.loc 1 324 0
 1195 0a0c 4FF00003 		mov	r3, #0
 1196 0a10 3B73     		strb	r3, [r7, #12]
 325:../src/interrupt_defs.cpp **** 			e.EXTI_Trigger = EXTI_Trigger_Falling;
 1197              		.loc 1 325 0
 1198 0a12 4FF00C03 		mov	r3, #12
 1199 0a16 7B73     		strb	r3, [r7, #13]
 326:../src/interrupt_defs.cpp **** 
 327:../src/interrupt_defs.cpp **** 			EXTI_Init(&e);
 1200              		.loc 1 327 0
 1201 0a18 07F10803 		add	r3, r7, #8
 1202 0a1c 1846     		mov	r0, r3
 1203 0a1e FFF7FEFF 		bl	EXTI_Init
 328:../src/interrupt_defs.cpp **** 
 329:../src/interrupt_defs.cpp **** 			stage = 1;
 1204              		.loc 1 329 0
 1205 0a22 40F20003 		movw	r3, #:lower16:stage
 1206 0a26 C0F20003 		movt	r3, #:upper16:stage
 1207 0a2a 4FF00102 		mov	r2, #1
 1208 0a2e 1A60     		str	r2, [r3, #0]
 1209 0a30 2FE0     		b	.L57
 1210              	.L58:
 1211              	.LBE7:
 1212              	.LBB8:
 1213              	.LBB9:
 330:../src/interrupt_defs.cpp **** 			return;
 331:../src/interrupt_defs.cpp **** 		}
 332:../src/interrupt_defs.cpp **** 		else if(stage == 1)
 1214              		.loc 1 332 0
 1215 0a32 40F20003 		movw	r3, #:lower16:stage
 1216 0a36 C0F20003 		movt	r3, #:upper16:stage
 1217 0a3a 1B68     		ldr	r3, [r3, #0]
 1218 0a3c 012B     		cmp	r3, #1
 1219 0a3e 28D1     		bne	.L57
 1220              	.LBB10:
 333:../src/interrupt_defs.cpp **** 		{
 334:../src/interrupt_defs.cpp **** 			count = TIM_GetCounter(TIM2);
 1221              		.loc 1 334 0
 1222 0a40 4FF08040 		mov	r0, #1073741824
 1223 0a44 FFF7FEFF 		bl	TIM_GetCounter
 1224 0a48 0346     		mov	r3, r0
 1225 0a4a 1A46     		mov	r2, r3
 1226 0a4c 40F20003 		movw	r3, #:lower16:count
 1227 0a50 C0F20003 		movt	r3, #:upper16:count
 1228 0a54 1A60     		str	r2, [r3, #0]
 335:../src/interrupt_defs.cpp **** 			TIM_Cmd(TIM2, DISABLE);
 1229              		.loc 1 335 0
 1230 0a56 4FF08040 		mov	r0, #1073741824
 1231 0a5a 4FF00001 		mov	r1, #0
 1232 0a5e FFF7FEFF 		bl	TIM_Cmd
 336:../src/interrupt_defs.cpp **** 
 337:../src/interrupt_defs.cpp **** 			NVIC_InitTypeDef nv;
 338:../src/interrupt_defs.cpp **** 
 339:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannel = EXTI9_5_IRQn;
 1233              		.loc 1 339 0
 1234 0a62 4FF01703 		mov	r3, #23
 1235 0a66 3B71     		strb	r3, [r7, #4]
 340:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelCmd = DISABLE;
 1236              		.loc 1 340 0
 1237 0a68 4FF00003 		mov	r3, #0
 1238 0a6c FB71     		strb	r3, [r7, #7]
 341:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelPreemptionPriority = 0;
 1239              		.loc 1 341 0
 1240 0a6e 4FF00003 		mov	r3, #0
 1241 0a72 7B71     		strb	r3, [r7, #5]
 342:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelSubPriority = 0;
 1242              		.loc 1 342 0
 1243 0a74 4FF00003 		mov	r3, #0
 1244 0a78 BB71     		strb	r3, [r7, #6]
 343:../src/interrupt_defs.cpp **** 
 344:../src/interrupt_defs.cpp **** 			NVIC_Init(&nv);
 1245              		.loc 1 344 0
 1246 0a7a 07F10403 		add	r3, r7, #4
 1247 0a7e 1846     		mov	r0, r3
 1248 0a80 FFF7FEFF 		bl	NVIC_Init
 345:../src/interrupt_defs.cpp **** 
 346:../src/interrupt_defs.cpp **** 			stage = 0;
 1249              		.loc 1 346 0
 1250 0a84 40F20003 		movw	r3, #:lower16:stage
 1251 0a88 C0F20003 		movt	r3, #:upper16:stage
 1252 0a8c 4FF00002 		mov	r2, #0
 1253 0a90 1A60     		str	r2, [r3, #0]
 1254              	.L57:
 1255              	.LBE10:
 1256              	.LBE9:
 1257              	.LBE8:
 1258              	.LBE6:
 1259              	.LBE5:
 347:../src/interrupt_defs.cpp **** 			return;
 348:../src/interrupt_defs.cpp **** 		}
 349:../src/interrupt_defs.cpp **** 	}
 1260              		.loc 1 349 0
 1261 0a92 07F11007 		add	r7, r7, #16
 1262 0a96 BD46     		mov	sp, r7
 1263 0a98 80BD     		pop	{r7, pc}
 1264              		.cfi_endproc
 1265              	.LFE118:
 1267              		.global	__aeabi_f2d
 1268 0a9a 00BF     		.align	2
 1269              		.global	update_pid
 1270              		.thumb
 1271              		.thumb_func
 1273              	update_pid:
 1274              	.LFB119:
 350:../src/interrupt_defs.cpp **** 
 351:../src/interrupt_defs.cpp **** 	void update_pid(void)
 352:../src/interrupt_defs.cpp **** 	{
 1275              		.loc 1 352 0
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 8
 1278              		@ frame_needed = 1, uses_anonymous_args = 0
 1279 0a9c 80B5     		push	{r7, lr}
 1280              	.LCFI20:
 1281              		.cfi_def_cfa_offset 8
 1282              		.cfi_offset 7, -8
 1283              		.cfi_offset 14, -4
 1284 0a9e 82B0     		sub	sp, sp, #8
 1285              	.LCFI21:
 1286              		.cfi_def_cfa_offset 16
 1287 0aa0 00AF     		add	r7, sp, #0
 1288              	.LCFI22:
 1289              		.cfi_def_cfa_register 7
 1290              	.LBB11:
 353:../src/interrupt_defs.cpp **** 		int i = 0;
 1291              		.loc 1 353 0
 1292 0aa2 4FF00003 		mov	r3, #0
 1293 0aa6 7B60     		str	r3, [r7, #4]
 354:../src/interrupt_defs.cpp **** 		float mtr_out = 0.50f;
 1294              		.loc 1 354 0
 1295 0aa8 4FF07C53 		mov	r3, #1056964608
 1296 0aac 3B60     		str	r3, [r7, #0]	@ float
 355:../src/interrupt_defs.cpp **** 		d_front = ((float)count*(float)0.5*(float)K_ULTRASONIC);
 1297              		.loc 1 355 0
 1298 0aae 40F20003 		movw	r3, #:lower16:count
 1299 0ab2 C0F20003 		movt	r3, #:upper16:count
 1300 0ab6 D3ED007A 		flds	s15, [r3, #0]	@ int
 1301 0aba B8EEE77A 		fsitos	s14, s15
 1302 0abe F6EE007A 		fconsts	s15, #96
 1303 0ac2 27EE277A 		fmuls	s14, s14, s15
 1304 0ac6 DFEDAA7A 		flds	s15, .L130
 1305 0aca 67EE277A 		fmuls	s15, s14, s15
 1306 0ace 40F20003 		movw	r3, #:lower16:d_front
 1307 0ad2 C0F20003 		movt	r3, #:upper16:d_front
 1308 0ad6 C3ED007A 		fsts	s15, [r3, #0]
 356:../src/interrupt_defs.cpp **** 
 357:../src/interrupt_defs.cpp **** 		if(state == ST_HOMING)
 1309              		.loc 1 357 0
 1310 0ada 40F20003 		movw	r3, #:lower16:state
 1311 0ade C0F20003 		movt	r3, #:upper16:state
 1312 0ae2 1B68     		ldr	r3, [r3, #0]
 1313 0ae4 012B     		cmp	r3, #1
 1314 0ae6 40F05581 		bne	.L61
 358:../src/interrupt_defs.cpp **** 		{
 359:../src/interrupt_defs.cpp **** 			err = (float)(1.0) * (float)((int)adcData[0] - (int)adc2_data[2]);
 1315              		.loc 1 359 0
 1316 0aea 40F20003 		movw	r3, #:lower16:adcData
 1317 0aee C0F20003 		movt	r3, #:upper16:adcData
 1318 0af2 1B68     		ldr	r3, [r3, #0]
 1319 0af4 1A46     		mov	r2, r3
 1320 0af6 40F20003 		movw	r3, #:lower16:adc2_data
 1321 0afa C0F20003 		movt	r3, #:upper16:adc2_data
 1322 0afe 9B68     		ldr	r3, [r3, #8]
 1323 0b00 D31A     		subs	r3, r2, r3
 1324 0b02 07EE103A 		fmsr	s14, r3	@ int
 1325 0b06 F8EEC77A 		fsitos	s15, s14
 1326 0b0a 40F20003 		movw	r3, #:lower16:err
 1327 0b0e C0F20003 		movt	r3, #:upper16:err
 1328 0b12 C3ED007A 		fsts	s15, [r3, #0]
 360:../src/interrupt_defs.cpp **** 			if((err > -20 && err < 20))// || match_time_counter-t_homing_start > HOMING_TIME_LIMIT)
 1329              		.loc 1 360 0
 1330 0b16 40F20003 		movw	r3, #:lower16:err
 1331 0b1a C0F20003 		movt	r3, #:upper16:err
 1332 0b1e 93ED007A 		flds	s14, [r3, #0]
 1333 0b22 FBEE047A 		fconsts	s15, #180
 1334 0b26 B4EEE77A 		fcmpes	s14, s15
 1335 0b2a F1EE10FA 		fmstat
 1336 0b2e 1CDD     		ble	.L62
 1337              	.L110:
 1338              		.loc 1 360 0 is_stmt 0 discriminator 1
 1339 0b30 40F20003 		movw	r3, #:lower16:err
 1340 0b34 C0F20003 		movt	r3, #:upper16:err
 1341 0b38 93ED007A 		flds	s14, [r3, #0]
 1342 0b3c F3EE047A 		fconsts	s15, #52
 1343 0b40 B4EEE77A 		fcmpes	s14, s15
 1344 0b44 F1EE10FA 		fmstat
 1345 0b48 0FD5     		bpl	.L62
 1346              	.L111:
 361:../src/interrupt_defs.cpp **** 			{
 362:../src/interrupt_defs.cpp **** 				pwm1_output(0.50f);
 1347              		.loc 1 362 0 is_stmt 1
 1348 0b4a B6EE000A 		fconsts	s0, #96
 1349 0b4e FFF7FEFF 		bl	_Z11pwm1_outputf
 363:../src/interrupt_defs.cpp **** 				pwm2_output(0.50f);
 1350              		.loc 1 363 0
 1351 0b52 B6EE000A 		fconsts	s0, #96
 1352 0b56 FFF7FEFF 		bl	_Z11pwm2_outputf
 364:../src/interrupt_defs.cpp **** 				state = ST_FIREFIGHT;
 1353              		.loc 1 364 0
 1354 0b5a 40F20003 		movw	r3, #:lower16:state
 1355 0b5e C0F20003 		movt	r3, #:upper16:state
 1356 0b62 4FF00202 		mov	r2, #2
 1357 0b66 1A60     		str	r2, [r3, #0]
 365:../src/interrupt_defs.cpp **** 				return;
 1358              		.loc 1 365 0
 1359 0b68 80E3     		b	.L60
 1360              	.L62:
 366:../src/interrupt_defs.cpp **** 			}
 367:../src/interrupt_defs.cpp **** 
 368:../src/interrupt_defs.cpp **** 			diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 1361              		.loc 1 368 0
 1362 0b6a 40F20003 		movw	r3, #:lower16:err
 1363 0b6e C0F20003 		movt	r3, #:upper16:err
 1364 0b72 93ED007A 		flds	s14, [r3, #0]
 1365 0b76 40F20003 		movw	r3, #:lower16:last_err
 1366 0b7a C0F20003 		movt	r3, #:upper16:last_err
 1367 0b7e D3ED007A 		flds	s15, [r3, #0]
 1368 0b82 37EE677A 		fsubs	s14, s14, s15
 1369 0b86 DFED807A 		flds	s15, .L130+24
 1370 0b8a 67EE277A 		fmuls	s15, s14, s15
 1371 0b8e 40F20003 		movw	r3, #:lower16:diff_err
 1372 0b92 C0F20003 		movt	r3, #:upper16:diff_err
 1373 0b96 C3ED007A 		fsts	s15, [r3, #0]
 369:../src/interrupt_defs.cpp **** 			integral += err * 0.00004f;
 1374              		.loc 1 369 0
 1375 0b9a 40F20003 		movw	r3, #:lower16:err
 1376 0b9e C0F20003 		movt	r3, #:upper16:err
 1377 0ba2 93ED007A 		flds	s14, [r3, #0]
 1378 0ba6 DFED737A 		flds	s15, .L130+4
 1379 0baa 27EE277A 		fmuls	s14, s14, s15
 1380 0bae 40F20003 		movw	r3, #:lower16:integral
 1381 0bb2 C0F20003 		movt	r3, #:upper16:integral
 1382 0bb6 D3ED007A 		flds	s15, [r3, #0]
 1383 0bba 77EE277A 		fadds	s15, s14, s15
 1384 0bbe 40F20003 		movw	r3, #:lower16:integral
 1385 0bc2 C0F20003 		movt	r3, #:upper16:integral
 1386 0bc6 C3ED007A 		fsts	s15, [r3, #0]
 370:../src/interrupt_defs.cpp **** 			drive_cmd = (((float)(err)/(float)3400) + ((float)diff_err/(float)835)); // k_deriv = 944
 1387              		.loc 1 370 0
 1388 0bca 40F20003 		movw	r3, #:lower16:err
 1389 0bce C0F20003 		movt	r3, #:upper16:err
 1390 0bd2 93ED007A 		flds	s14, [r3, #0]
 1391 0bd6 DFED687A 		flds	s15, .L130+8
 1392 0bda 87EE277A 		fdivs	s14, s14, s15
 1393 0bde 40F20003 		movw	r3, #:lower16:diff_err
 1394 0be2 C0F20003 		movt	r3, #:upper16:diff_err
 1395 0be6 D3ED006A 		flds	s13, [r3, #0]
 1396 0bea DFED647A 		flds	s15, .L130+12
 1397 0bee C6EEA77A 		fdivs	s15, s13, s15
 1398 0bf2 77EE277A 		fadds	s15, s14, s15
 1399 0bf6 40F20003 		movw	r3, #:lower16:drive_cmd
 1400 0bfa C0F20003 		movt	r3, #:upper16:drive_cmd
 1401 0bfe C3ED007A 		fsts	s15, [r3, #0]
 371:../src/interrupt_defs.cpp **** 
 372:../src/interrupt_defs.cpp **** 			rt = 0.0f;
 1402              		.loc 1 372 0
 1403 0c02 40F20003 		movw	r3, #:lower16:rt
 1404 0c06 C0F20003 		movt	r3, #:upper16:rt
 1405 0c0a 4FF00002 		mov	r2, #0
 1406 0c0e 1A60     		str	r2, [r3, #0]	@ float
 373:../src/interrupt_defs.cpp **** 			mtr_out = 0.5f;
 1407              		.loc 1 373 0
 1408 0c10 4FF07C53 		mov	r3, #1056964608
 1409 0c14 3B60     		str	r3, [r7, #0]	@ float
 374:../src/interrupt_defs.cpp **** 
 375:../src/interrupt_defs.cpp **** 			if(drive_cmd > 0.5)
 1410              		.loc 1 375 0
 1411 0c16 40F20003 		movw	r3, #:lower16:drive_cmd
 1412 0c1a C0F20003 		movt	r3, #:upper16:drive_cmd
 1413 0c1e 93ED007A 		flds	s14, [r3, #0]
 1414 0c22 F6EE007A 		fconsts	s15, #96
 1415 0c26 B4EEE77A 		fcmpes	s14, s15
 1416 0c2a F1EE10FA 		fmstat
 1417 0c2e 06DD     		ble	.L66
 1418              	.L112:
 376:../src/interrupt_defs.cpp **** 			{
 377:../src/interrupt_defs.cpp **** 				drive_cmd = 0.5f;
 1419              		.loc 1 377 0
 1420 0c30 40F20003 		movw	r3, #:lower16:drive_cmd
 1421 0c34 C0F20003 		movt	r3, #:upper16:drive_cmd
 1422 0c38 4FF07C52 		mov	r2, #1056964608
 1423 0c3c 1A60     		str	r2, [r3, #0]	@ float
 1424              	.L66:
 378:../src/interrupt_defs.cpp **** 			}
 379:../src/interrupt_defs.cpp **** 			if(drive_cmd < -0.5)
 1425              		.loc 1 379 0
 1426 0c3e 40F20003 		movw	r3, #:lower16:drive_cmd
 1427 0c42 C0F20003 		movt	r3, #:upper16:drive_cmd
 1428 0c46 93ED007A 		flds	s14, [r3, #0]
 1429 0c4a FEEE007A 		fconsts	s15, #224
 1430 0c4e B4EEE77A 		fcmpes	s14, s15
 1431 0c52 F1EE10FA 		fmstat
 1432 0c56 06D5     		bpl	.L68
 1433              	.L113:
 380:../src/interrupt_defs.cpp **** 			{
 381:../src/interrupt_defs.cpp **** 				drive_cmd = -0.5f;
 1434              		.loc 1 381 0
 1435 0c58 40F20003 		movw	r3, #:lower16:drive_cmd
 1436 0c5c C0F20003 		movt	r3, #:upper16:drive_cmd
 1437 0c60 4FF03F42 		mov	r2, #-1090519040
 1438 0c64 1A60     		str	r2, [r3, #0]	@ float
 1439              	.L68:
 382:../src/interrupt_defs.cpp **** 			}
 383:../src/interrupt_defs.cpp **** 
 384:../src/interrupt_defs.cpp **** 			left = (1-mtr_out) - drive_cmd - rt;
 1440              		.loc 1 384 0
 1441 0c66 B7EE007A 		fconsts	s14, #112
 1442 0c6a D7ED007A 		flds	s15, [r7, #0]
 1443 0c6e 37EE677A 		fsubs	s14, s14, s15
 1444 0c72 40F20003 		movw	r3, #:lower16:drive_cmd
 1445 0c76 C0F20003 		movt	r3, #:upper16:drive_cmd
 1446 0c7a D3ED007A 		flds	s15, [r3, #0]
 1447 0c7e 37EE677A 		fsubs	s14, s14, s15
 1448 0c82 40F20003 		movw	r3, #:lower16:rt
 1449 0c86 C0F20003 		movt	r3, #:upper16:rt
 1450 0c8a D3ED007A 		flds	s15, [r3, #0]
 1451 0c8e 77EE677A 		fsubs	s15, s14, s15
 1452 0c92 40F20003 		movw	r3, #:lower16:left
 1453 0c96 C0F20003 		movt	r3, #:upper16:left
 1454 0c9a C3ED007A 		fsts	s15, [r3, #0]
 385:../src/interrupt_defs.cpp **** 			right = mtr_out - drive_cmd - rt;
 1455              		.loc 1 385 0
 1456 0c9e 40F20003 		movw	r3, #:lower16:drive_cmd
 1457 0ca2 C0F20003 		movt	r3, #:upper16:drive_cmd
 1458 0ca6 D3ED007A 		flds	s15, [r3, #0]
 1459 0caa 97ED007A 		flds	s14, [r7, #0]
 1460 0cae 37EE677A 		fsubs	s14, s14, s15
 1461 0cb2 40F20003 		movw	r3, #:lower16:rt
 1462 0cb6 C0F20003 		movt	r3, #:upper16:rt
 1463 0cba D3ED007A 		flds	s15, [r3, #0]
 1464 0cbe 77EE677A 		fsubs	s15, s14, s15
 1465 0cc2 40F20003 		movw	r3, #:lower16:right
 1466 0cc6 C0F20003 		movt	r3, #:upper16:right
 1467 0cca C3ED007A 		fsts	s15, [r3, #0]
 386:../src/interrupt_defs.cpp **** 
 387:../src/interrupt_defs.cpp **** 			if(left>1.0)
 1468              		.loc 1 387 0
 1469 0cce 40F20003 		movw	r3, #:lower16:left
 1470 0cd2 C0F20003 		movt	r3, #:upper16:left
 1471 0cd6 93ED007A 		flds	s14, [r3, #0]
 1472 0cda F7EE007A 		fconsts	s15, #112
 1473 0cde B4EEE77A 		fcmpes	s14, s15
 1474 0ce2 F1EE10FA 		fmstat
 1475 0ce6 07DD     		ble	.L126
 1476              	.L114:
 388:../src/interrupt_defs.cpp **** 			{
 389:../src/interrupt_defs.cpp **** 				left=1.0;
 1477              		.loc 1 389 0
 1478 0ce8 40F20003 		movw	r3, #:lower16:left
 1479 0cec C0F20003 		movt	r3, #:upper16:left
 1480 0cf0 4FF07E52 		mov	r2, #1065353216
 1481 0cf4 1A60     		str	r2, [r3, #0]	@ float
 1482 0cf6 11E0     		b	.L72
 1483              	.L126:
 390:../src/interrupt_defs.cpp **** 			}
 391:../src/interrupt_defs.cpp **** 			else if(left<0)
 1484              		.loc 1 391 0
 1485 0cf8 40F20003 		movw	r3, #:lower16:left
 1486 0cfc C0F20003 		movt	r3, #:upper16:left
 1487 0d00 D3ED007A 		flds	s15, [r3, #0]
 1488 0d04 F5EEC07A 		fcmpezs	s15
 1489 0d08 F1EE10FA 		fmstat
 1490 0d0c 06D5     		bpl	.L72
 1491              	.L115:
 392:../src/interrupt_defs.cpp **** 			{
 393:../src/interrupt_defs.cpp **** 				left=0;//-1.0;
 1492              		.loc 1 393 0
 1493 0d0e 40F20003 		movw	r3, #:lower16:left
 1494 0d12 C0F20003 		movt	r3, #:upper16:left
 1495 0d16 4FF00002 		mov	r2, #0
 1496 0d1a 1A60     		str	r2, [r3, #0]	@ float
 1497              	.L72:
 394:../src/interrupt_defs.cpp **** 			}
 395:../src/interrupt_defs.cpp **** 
 396:../src/interrupt_defs.cpp **** 			if(right>1.0f)
 1498              		.loc 1 396 0
 1499 0d1c 40F20003 		movw	r3, #:lower16:right
 1500 0d20 C0F20003 		movt	r3, #:upper16:right
 1501 0d24 93ED007A 		flds	s14, [r3, #0]
 1502 0d28 F7EE007A 		fconsts	s15, #112
 1503 0d2c B4EEE77A 		fcmpes	s14, s15
 1504 0d30 F1EE10FA 		fmstat
 1505 0d34 07DD     		ble	.L127
 1506              	.L116:
 397:../src/interrupt_defs.cpp **** 			{
 398:../src/interrupt_defs.cpp **** 				right=1.0f;
 1507              		.loc 1 398 0
 1508 0d36 40F20003 		movw	r3, #:lower16:right
 1509 0d3a C0F20003 		movt	r3, #:upper16:right
 1510 0d3e 4FF07E52 		mov	r2, #1065353216
 1511 0d42 1A60     		str	r2, [r3, #0]	@ float
 1512 0d44 3CE2     		b	.L76
 1513              	.L127:
 399:../src/interrupt_defs.cpp **** 			}
 400:../src/interrupt_defs.cpp **** 			else if(right<0)
 1514              		.loc 1 400 0
 1515 0d46 40F20003 		movw	r3, #:lower16:right
 1516 0d4a C0F20003 		movt	r3, #:upper16:right
 1517 0d4e D3ED007A 		flds	s15, [r3, #0]
 1518 0d52 F5EEC07A 		fcmpezs	s15
 1519 0d56 F1EE10FA 		fmstat
 1520 0d5a 40F13182 		bpl	.L76
 1521              	.L117:
 401:../src/interrupt_defs.cpp **** 			{
 402:../src/interrupt_defs.cpp **** 				right=0;
 1522              		.loc 1 402 0
 1523 0d5e 40F20003 		movw	r3, #:lower16:right
 1524 0d62 C0F20003 		movt	r3, #:upper16:right
 1525 0d66 4FF00002 		mov	r2, #0
 1526 0d6a 1A60     		str	r2, [r3, #0]	@ float
 1527 0d6c 28E2     		b	.L76
 1528              	.L131:
 1529 0d6e 00BF     		.align	2
 1530              	.L130:
 1531 0d70 821C943A 		.word	982785154
 1532 0d74 ACC52738 		.word	942130604
 1533 0d78 00805445 		.word	1163165696
 1534 0d7c 00C05044 		.word	1146142720
 1535 0d80 CDCC0C3F 		.word	1057803469
 1536 0d84 6666E63E 		.word	1055286886
 1537 0d88 CDCCCC3C 		.word	1020054733
 1538 0d8c 00401C45 		.word	1159479296
 1539 0d90 00806845 		.word	1164476416
 1540              	.L61:
 403:../src/interrupt_defs.cpp **** 			}
 404:../src/interrupt_defs.cpp **** 		}
 405:../src/interrupt_defs.cpp **** 		else if(state == ST_WANDER)
 1541              		.loc 1 405 0
 1542 0d94 40F20003 		movw	r3, #:lower16:state
 1543 0d98 C0F20003 		movt	r3, #:upper16:state
 1544 0d9c 1B68     		ldr	r3, [r3, #0]
 1545 0d9e 002B     		cmp	r3, #0
 1546 0da0 40F04A81 		bne	.L78
 406:../src/interrupt_defs.cpp **** 		{
 407:../src/interrupt_defs.cpp **** 			err = ((float)(0.55)*(float)((int)adc2_data[0] - 2200)) + ((float)(0.45)*(float)((int)adcData[1]
 1547              		.loc 1 407 0
 1548 0da4 40F20003 		movw	r3, #:lower16:adc2_data
 1549 0da8 C0F20003 		movt	r3, #:upper16:adc2_data
 1550 0dac 1B68     		ldr	r3, [r3, #0]
 1551 0dae A3F69803 		subw	r3, r3, #2200
 1552 0db2 07EE903A 		fmsr	s15, r3	@ int
 1553 0db6 B8EEE77A 		fsitos	s14, s15
 1554 0dba 5FED0F7A 		flds	s15, .L130+16
 1555 0dbe 27EE277A 		fmuls	s14, s14, s15
 1556 0dc2 40F20003 		movw	r3, #:lower16:adcData
 1557 0dc6 C0F20003 		movt	r3, #:upper16:adcData
 1558 0dca 5B68     		ldr	r3, [r3, #4]
 1559 0dcc A3F19603 		sub	r3, r3, #150
 1560 0dd0 07EE903A 		fmsr	s15, r3	@ int
 1561 0dd4 F8EEE76A 		fsitos	s13, s15
 1562 0dd8 5FED167A 		flds	s15, .L130+20
 1563 0ddc 66EEA77A 		fmuls	s15, s13, s15
 1564 0de0 77EE277A 		fadds	s15, s14, s15
 1565 0de4 40F20003 		movw	r3, #:lower16:err
 1566 0de8 C0F20003 		movt	r3, #:upper16:err
 1567 0dec C3ED007A 		fsts	s15, [r3, #0]
 408:../src/interrupt_defs.cpp **** 
 409:../src/interrupt_defs.cpp **** 		diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 1568              		.loc 1 409 0
 1569 0df0 40F20003 		movw	r3, #:lower16:err
 1570 0df4 C0F20003 		movt	r3, #:upper16:err
 1571 0df8 93ED007A 		flds	s14, [r3, #0]
 1572 0dfc 40F20003 		movw	r3, #:lower16:last_err
 1573 0e00 C0F20003 		movt	r3, #:upper16:last_err
 1574 0e04 D3ED007A 		flds	s15, [r3, #0]
 1575 0e08 37EE677A 		fsubs	s14, s14, s15
 1576 0e0c 5FED227A 		flds	s15, .L130+24
 1577 0e10 67EE277A 		fmuls	s15, s14, s15
 1578 0e14 40F20003 		movw	r3, #:lower16:diff_err
 1579 0e18 C0F20003 		movt	r3, #:upper16:diff_err
 1580 0e1c C3ED007A 		fsts	s15, [r3, #0]
 410:../src/interrupt_defs.cpp **** 		drive_cmd = (((float)(err)/(float)2500) + ((float)diff_err/(float)3720)); //1100=diff term
 1581              		.loc 1 410 0
 1582 0e20 40F20003 		movw	r3, #:lower16:err
 1583 0e24 C0F20003 		movt	r3, #:upper16:err
 1584 0e28 93ED007A 		flds	s14, [r3, #0]
 1585 0e2c 5FED297A 		flds	s15, .L130+28
 1586 0e30 87EE277A 		fdivs	s14, s14, s15
 1587 0e34 40F20003 		movw	r3, #:lower16:diff_err
 1588 0e38 C0F20003 		movt	r3, #:upper16:diff_err
 1589 0e3c D3ED006A 		flds	s13, [r3, #0]
 1590 0e40 5FED2D7A 		flds	s15, .L130+32
 1591 0e44 C6EEA77A 		fdivs	s15, s13, s15
 1592 0e48 77EE277A 		fadds	s15, s14, s15
 1593 0e4c 40F20003 		movw	r3, #:lower16:drive_cmd
 1594 0e50 C0F20003 		movt	r3, #:upper16:drive_cmd
 1595 0e54 C3ED007A 		fsts	s15, [r3, #0]
 411:../src/interrupt_defs.cpp **** 
 412:../src/interrupt_defs.cpp **** 		if(d_front < 0.390 || adc2_data[3] > 2000)//1870)//0.69
 1596              		.loc 1 412 0
 1597 0e58 40F20003 		movw	r3, #:lower16:d_front
 1598 0e5c C0F20003 		movt	r3, #:upper16:d_front
 1599 0e60 1B68     		ldr	r3, [r3, #0]	@ float
 1600 0e62 1846     		mov	r0, r3	@ float
 1601 0e64 FFF7FEFF 		bl	__aeabi_f2d
 1602 0e68 0246     		mov	r2, r0
 1603 0e6a 0B46     		mov	r3, r1
 1604 0e6c 1046     		mov	r0, r2
 1605 0e6e 1946     		mov	r1, r3
 1606 0e70 0FF21043 		adr	r3, .L132+12
 1607 0e74 D3E90023 		ldrd	r2, [r3]
 1608 0e78 FFF7FEFF 		bl	__aeabi_dcmplt
 1609 0e7c 0346     		mov	r3, r0
 1610 0e7e 002B     		cmp	r3, #0
 1611 0e80 07D1     		bne	.L79
 1612              		.loc 1 412 0 is_stmt 0 discriminator 2
 1613 0e82 40F20003 		movw	r3, #:lower16:adc2_data
 1614 0e86 C0F20003 		movt	r3, #:upper16:adc2_data
 1615 0e8a DB68     		ldr	r3, [r3, #12]
 1616 0e8c B3F5FA6F 		cmp	r3, #2000
 1617 0e90 02D9     		bls	.L80
 1618              	.L79:
 1619              		.loc 1 412 0 discriminator 1
 1620 0e92 4FF00103 		mov	r3, #1
 1621 0e96 01E0     		b	.L81
 1622              	.L80:
 1623              		.loc 1 412 0 discriminator 3
 1624 0e98 4FF00003 		mov	r3, #0
 1625              	.L81:
 1626              		.loc 1 412 0 discriminator 4
 1627 0e9c 002B     		cmp	r3, #0
 1628 0e9e 13D0     		beq	.L82
 413:../src/interrupt_defs.cpp **** 		{
 414:../src/interrupt_defs.cpp **** 			rt = 0.5f;
 1629              		.loc 1 414 0 is_stmt 1
 1630 0ea0 40F20003 		movw	r3, #:lower16:rt
 1631 0ea4 C0F20003 		movt	r3, #:upper16:rt
 1632 0ea8 4FF07C52 		mov	r2, #1056964608
 1633 0eac 1A60     		str	r2, [r3, #0]	@ float
 415:../src/interrupt_defs.cpp **** 			mtr_out = 0.3f;
 1634              		.loc 1 415 0
 1635 0eae 49F69A13 		movw	r3, #39322
 1636 0eb2 C3F69963 		movt	r3, 16025
 1637 0eb6 3B60     		str	r3, [r7, #0]	@ float
 416:../src/interrupt_defs.cpp **** 			drive_cmd = 0;
 1638              		.loc 1 416 0
 1639 0eb8 40F20003 		movw	r3, #:lower16:drive_cmd
 1640 0ebc C0F20003 		movt	r3, #:upper16:drive_cmd
 1641 0ec0 4FF00002 		mov	r2, #0
 1642 0ec4 1A60     		str	r2, [r3, #0]	@ float
 1643 0ec6 0BE0     		b	.L83
 1644              	.L82:
 417:../src/interrupt_defs.cpp **** 		}
 418:../src/interrupt_defs.cpp **** 		else
 419:../src/interrupt_defs.cpp **** 		{
 420:../src/interrupt_defs.cpp **** 			rt = 0.0f;
 1645              		.loc 1 420 0
 1646 0ec8 40F20003 		movw	r3, #:lower16:rt
 1647 0ecc C0F20003 		movt	r3, #:upper16:rt
 1648 0ed0 4FF00002 		mov	r2, #0
 1649 0ed4 1A60     		str	r2, [r3, #0]	@ float
 421:../src/interrupt_defs.cpp **** 			mtr_out = 0.85f;
 1650              		.loc 1 421 0
 1651 0ed6 49F69A13 		movw	r3, #39322
 1652 0eda C3F65973 		movt	r3, 16217
 1653 0ede 3B60     		str	r3, [r7, #0]	@ float
 1654              	.L83:
 422:../src/interrupt_defs.cpp **** 		}
 423:../src/interrupt_defs.cpp **** 
 424:../src/interrupt_defs.cpp **** 		if(drive_cmd > 0.5)
 1655              		.loc 1 424 0
 1656 0ee0 40F20003 		movw	r3, #:lower16:drive_cmd
 1657 0ee4 C0F20003 		movt	r3, #:upper16:drive_cmd
 1658 0ee8 93ED007A 		flds	s14, [r3, #0]
 1659 0eec F6EE007A 		fconsts	s15, #96
 1660 0ef0 B4EEE77A 		fcmpes	s14, s15
 1661 0ef4 F1EE10FA 		fmstat
 1662 0ef8 06DD     		ble	.L84
 1663              	.L118:
 425:../src/interrupt_defs.cpp **** 		{
 426:../src/interrupt_defs.cpp **** 			drive_cmd = 0.5f;
 1664              		.loc 1 426 0
 1665 0efa 40F20003 		movw	r3, #:lower16:drive_cmd
 1666 0efe C0F20003 		movt	r3, #:upper16:drive_cmd
 1667 0f02 4FF07C52 		mov	r2, #1056964608
 1668 0f06 1A60     		str	r2, [r3, #0]	@ float
 1669              	.L84:
 427:../src/interrupt_defs.cpp **** 		}
 428:../src/interrupt_defs.cpp **** 		if(drive_cmd < -0.5)
 1670              		.loc 1 428 0
 1671 0f08 40F20003 		movw	r3, #:lower16:drive_cmd
 1672 0f0c C0F20003 		movt	r3, #:upper16:drive_cmd
 1673 0f10 93ED007A 		flds	s14, [r3, #0]
 1674 0f14 FEEE007A 		fconsts	s15, #224
 1675 0f18 B4EEE77A 		fcmpes	s14, s15
 1676 0f1c F1EE10FA 		fmstat
 1677 0f20 06D5     		bpl	.L86
 1678              	.L119:
 429:../src/interrupt_defs.cpp **** 		{
 430:../src/interrupt_defs.cpp **** 			drive_cmd = -0.5f;
 1679              		.loc 1 430 0
 1680 0f22 40F20003 		movw	r3, #:lower16:drive_cmd
 1681 0f26 C0F20003 		movt	r3, #:upper16:drive_cmd
 1682 0f2a 4FF03F42 		mov	r2, #-1090519040
 1683 0f2e 1A60     		str	r2, [r3, #0]	@ float
 1684              	.L86:
 431:../src/interrupt_defs.cpp **** 		}
 432:../src/interrupt_defs.cpp **** 
 433:../src/interrupt_defs.cpp **** 		left = (1-mtr_out) - drive_cmd - rt;
 1685              		.loc 1 433 0
 1686 0f30 B7EE007A 		fconsts	s14, #112
 1687 0f34 D7ED007A 		flds	s15, [r7, #0]
 1688 0f38 37EE677A 		fsubs	s14, s14, s15
 1689 0f3c 40F20003 		movw	r3, #:lower16:drive_cmd
 1690 0f40 C0F20003 		movt	r3, #:upper16:drive_cmd
 1691 0f44 D3ED007A 		flds	s15, [r3, #0]
 1692 0f48 37EE677A 		fsubs	s14, s14, s15
 1693 0f4c 40F20003 		movw	r3, #:lower16:rt
 1694 0f50 C0F20003 		movt	r3, #:upper16:rt
 1695 0f54 D3ED007A 		flds	s15, [r3, #0]
 1696 0f58 77EE677A 		fsubs	s15, s14, s15
 1697 0f5c 40F20003 		movw	r3, #:lower16:left
 1698 0f60 C0F20003 		movt	r3, #:upper16:left
 1699 0f64 C3ED007A 		fsts	s15, [r3, #0]
 434:../src/interrupt_defs.cpp **** 		right = mtr_out - drive_cmd - rt;
 1700              		.loc 1 434 0
 1701 0f68 40F20003 		movw	r3, #:lower16:drive_cmd
 1702 0f6c C0F20003 		movt	r3, #:upper16:drive_cmd
 1703 0f70 D3ED007A 		flds	s15, [r3, #0]
 1704 0f74 97ED007A 		flds	s14, [r7, #0]
 1705 0f78 37EE677A 		fsubs	s14, s14, s15
 1706 0f7c 40F20003 		movw	r3, #:lower16:rt
 1707 0f80 C0F20003 		movt	r3, #:upper16:rt
 1708 0f84 D3ED007A 		flds	s15, [r3, #0]
 1709 0f88 77EE677A 		fsubs	s15, s14, s15
 1710 0f8c 40F20003 		movw	r3, #:lower16:right
 1711 0f90 C0F20003 		movt	r3, #:upper16:right
 1712 0f94 C3ED007A 		fsts	s15, [r3, #0]
 435:../src/interrupt_defs.cpp **** 
 436:../src/interrupt_defs.cpp **** 		if(left>1.0)
 1713              		.loc 1 436 0
 1714 0f98 40F20003 		movw	r3, #:lower16:left
 1715 0f9c C0F20003 		movt	r3, #:upper16:left
 1716 0fa0 93ED007A 		flds	s14, [r3, #0]
 1717 0fa4 F7EE007A 		fconsts	s15, #112
 1718 0fa8 B4EEE77A 		fcmpes	s14, s15
 1719 0fac F1EE10FA 		fmstat
 1720 0fb0 07DD     		ble	.L128
 1721              	.L120:
 437:../src/interrupt_defs.cpp **** 		{
 438:../src/interrupt_defs.cpp **** 			left=1.0;
 1722              		.loc 1 438 0
 1723 0fb2 40F20003 		movw	r3, #:lower16:left
 1724 0fb6 C0F20003 		movt	r3, #:upper16:left
 1725 0fba 4FF07E52 		mov	r2, #1065353216
 1726 0fbe 1A60     		str	r2, [r3, #0]	@ float
 1727 0fc0 11E0     		b	.L90
 1728              	.L128:
 439:../src/interrupt_defs.cpp **** 		}
 440:../src/interrupt_defs.cpp **** 		else if(left<0)
 1729              		.loc 1 440 0
 1730 0fc2 40F20003 		movw	r3, #:lower16:left
 1731 0fc6 C0F20003 		movt	r3, #:upper16:left
 1732 0fca D3ED007A 		flds	s15, [r3, #0]
 1733 0fce F5EEC07A 		fcmpezs	s15
 1734 0fd2 F1EE10FA 		fmstat
 1735 0fd6 06D5     		bpl	.L90
 1736              	.L121:
 441:../src/interrupt_defs.cpp **** 		{
 442:../src/interrupt_defs.cpp **** 			left=0;//-1.0;
 1737              		.loc 1 442 0
 1738 0fd8 40F20003 		movw	r3, #:lower16:left
 1739 0fdc C0F20003 		movt	r3, #:upper16:left
 1740 0fe0 4FF00002 		mov	r2, #0
 1741 0fe4 1A60     		str	r2, [r3, #0]	@ float
 1742              	.L90:
 443:../src/interrupt_defs.cpp **** 		}
 444:../src/interrupt_defs.cpp **** 
 445:../src/interrupt_defs.cpp **** 		if(right>1.0f)
 1743              		.loc 1 445 0
 1744 0fe6 40F20003 		movw	r3, #:lower16:right
 1745 0fea C0F20003 		movt	r3, #:upper16:right
 1746 0fee 93ED007A 		flds	s14, [r3, #0]
 1747 0ff2 F7EE007A 		fconsts	s15, #112
 1748 0ff6 B4EEE77A 		fcmpes	s14, s15
 1749 0ffa F1EE10FA 		fmstat
 1750 0ffe 07DD     		ble	.L129
 1751              	.L122:
 446:../src/interrupt_defs.cpp **** 		{
 447:../src/interrupt_defs.cpp **** 			right=1.0f;
 1752              		.loc 1 447 0
 1753 1000 40F20003 		movw	r3, #:lower16:right
 1754 1004 C0F20003 		movt	r3, #:upper16:right
 1755 1008 4FF07E52 		mov	r2, #1065353216
 1756 100c 1A60     		str	r2, [r3, #0]	@ float
 1757 100e D7E0     		b	.L76
 1758              	.L129:
 448:../src/interrupt_defs.cpp **** 		}
 449:../src/interrupt_defs.cpp **** 		else if(right<0)
 1759              		.loc 1 449 0
 1760 1010 40F20003 		movw	r3, #:lower16:right
 1761 1014 C0F20003 		movt	r3, #:upper16:right
 1762 1018 D3ED007A 		flds	s15, [r3, #0]
 1763 101c F5EEC07A 		fcmpezs	s15
 1764 1020 F1EE10FA 		fmstat
 1765 1024 40F1CC80 		bpl	.L76
 1766              	.L123:
 450:../src/interrupt_defs.cpp **** 		{
 451:../src/interrupt_defs.cpp **** 			right=0;
 1767              		.loc 1 451 0
 1768 1028 40F20003 		movw	r3, #:lower16:right
 1769 102c C0F20003 		movt	r3, #:upper16:right
 1770 1030 4FF00002 		mov	r2, #0
 1771 1034 1A60     		str	r2, [r3, #0]	@ float
 1772 1036 C3E0     		b	.L76
 1773              	.L78:
 452:../src/interrupt_defs.cpp **** 		}
 453:../src/interrupt_defs.cpp **** 		}
 454:../src/interrupt_defs.cpp **** 		else if(state == ST_CANDLE_BLOWOUT)
 1774              		.loc 1 454 0
 1775 1038 40F20003 		movw	r3, #:lower16:state
 1776 103c C0F20003 		movt	r3, #:upper16:state
 1777 1040 1B68     		ldr	r3, [r3, #0]
 1778 1042 032B     		cmp	r3, #3
 1779 1044 40F0BC80 		bne	.L76
 455:../src/interrupt_defs.cpp **** 		{
 456:../src/interrupt_defs.cpp **** 			if((adc2_data[2] > UV_THRESHOLD || adcData[0] > UV_THRESHOLD))
 1780              		.loc 1 456 0
 1781 1048 40F20003 		movw	r3, #:lower16:adc2_data
 1782 104c C0F20003 		movt	r3, #:upper16:adc2_data
 1783 1050 9A68     		ldr	r2, [r3, #8]
 1784 1052 40F20D23 		movw	r3, #525
 1785 1056 9A42     		cmp	r2, r3
 1786 1058 08D8     		bhi	.L95
 1787              		.loc 1 456 0 is_stmt 0 discriminator 2
 1788 105a 40F20003 		movw	r3, #:lower16:adcData
 1789 105e C0F20003 		movt	r3, #:upper16:adcData
 1790 1062 1A68     		ldr	r2, [r3, #0]
 1791 1064 40F20D23 		movw	r3, #525
 1792 1068 9A42     		cmp	r2, r3
 1793 106a 02D9     		bls	.L96
 1794              	.L95:
 1795              		.loc 1 456 0 discriminator 1
 1796 106c 4FF00103 		mov	r3, #1
 1797 1070 01E0     		b	.L97
 1798              	.L96:
 1799              		.loc 1 456 0 discriminator 3
 1800 1072 4FF00003 		mov	r3, #0
 1801              	.L97:
 1802              		.loc 1 456 0 discriminator 4
 1803 1076 002B     		cmp	r3, #0
 1804 1078 0ED0     		beq	.L98
 457:../src/interrupt_defs.cpp **** 			{
 458:../src/interrupt_defs.cpp **** //				err = (float)(1.0) * (float)((int)adcData[0] - (int)adc2_data[2]);
 459:../src/interrupt_defs.cpp **** //
 460:../src/interrupt_defs.cpp **** //				diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 461:../src/interrupt_defs.cpp **** //				integral =0;//+= err * 0.04f;
 462:../src/interrupt_defs.cpp **** //				drive_cmd = (((float)(err)/(float)500) + ((float)diff_err/(float)944));
 463:../src/interrupt_defs.cpp **** ////				drive_cmd = (((float)(err)/(float)350) + ((float)diff_err/(float)944));
 464:../src/interrupt_defs.cpp **** //				rt = 0.0f;
 465:../src/interrupt_defs.cpp **** //				mtr_out = 0.5f;
 466:../src/interrupt_defs.cpp **** //
 467:../src/interrupt_defs.cpp **** //				if(drive_cmd > 0.5)
 468:../src/interrupt_defs.cpp **** //				{
 469:../src/interrupt_defs.cpp **** //					drive_cmd = 0.5f;
 470:../src/interrupt_defs.cpp **** //				}
 471:../src/interrupt_defs.cpp **** //				if(drive_cmd < -0.5)
 472:../src/interrupt_defs.cpp **** //				{
 473:../src/interrupt_defs.cpp **** //					drive_cmd = -0.5f;
 474:../src/interrupt_defs.cpp **** //				}
 475:../src/interrupt_defs.cpp **** //
 476:../src/interrupt_defs.cpp **** //				left = (1-mtr_out) - drive_cmd - rt;
 477:../src/interrupt_defs.cpp **** //				right = mtr_out - drive_cmd - rt;
 478:../src/interrupt_defs.cpp **** //
 479:../src/interrupt_defs.cpp **** //				if(left>1.0)
 480:../src/interrupt_defs.cpp **** //				{
 481:../src/interrupt_defs.cpp **** //					left=1.0;
 482:../src/interrupt_defs.cpp **** //				}
 483:../src/interrupt_defs.cpp **** //				else if(left<0)
 484:../src/interrupt_defs.cpp **** //				{
 485:../src/interrupt_defs.cpp **** //					left=0;//-1.0;
 486:../src/interrupt_defs.cpp **** //				}
 487:../src/interrupt_defs.cpp **** //
 488:../src/interrupt_defs.cpp **** //				if(right>1.0f)
 489:../src/interrupt_defs.cpp **** //				{
 490:../src/interrupt_defs.cpp **** //					right=1.0f;
 491:../src/interrupt_defs.cpp **** //				}
 492:../src/interrupt_defs.cpp **** //				else if(right<0)
 493:../src/interrupt_defs.cpp **** //				{
 494:../src/interrupt_defs.cpp **** //					right=0;
 495:../src/interrupt_defs.cpp **** //				}
 496:../src/interrupt_defs.cpp **** 				left = 0.5f;
 1805              		.loc 1 496 0 is_stmt 1
 1806 107a 40F20003 		movw	r3, #:lower16:left
 1807 107e C0F20003 		movt	r3, #:upper16:left
 1808 1082 4FF07C52 		mov	r2, #1056964608
 1809 1086 1A60     		str	r2, [r3, #0]	@ float
 497:../src/interrupt_defs.cpp **** 				right = 0.5f;
 1810              		.loc 1 497 0
 1811 1088 40F20003 		movw	r3, #:lower16:right
 1812 108c C0F20003 		movt	r3, #:upper16:right
 1813 1090 4FF07C52 		mov	r2, #1056964608
 1814 1094 1A60     		str	r2, [r3, #0]	@ float
 1815 1096 14E0     		b	.L99
 1816              	.L98:
 498:../src/interrupt_defs.cpp **** 			}
 499:../src/interrupt_defs.cpp **** 			else
 500:../src/interrupt_defs.cpp **** 			{
 501:../src/interrupt_defs.cpp **** 				left = 0.5f;
 1817              		.loc 1 501 0
 1818 1098 40F20003 		movw	r3, #:lower16:left
 1819 109c C0F20003 		movt	r3, #:upper16:left
 1820 10a0 4FF07C52 		mov	r2, #1056964608
 1821 10a4 1A60     		str	r2, [r3, #0]	@ float
 502:../src/interrupt_defs.cpp **** 				right = 0.5f;
 1822              		.loc 1 502 0
 1823 10a6 40F20003 		movw	r3, #:lower16:right
 1824 10aa C0F20003 		movt	r3, #:upper16:right
 1825 10ae 4FF07C52 		mov	r2, #1056964608
 1826 10b2 1A60     		str	r2, [r3, #0]	@ float
 503:../src/interrupt_defs.cpp **** 				state = ST_DONE;
 1827              		.loc 1 503 0
 1828 10b4 40F20003 		movw	r3, #:lower16:state
 1829 10b8 C0F20003 		movt	r3, #:upper16:state
 1830 10bc 4FF00402 		mov	r2, #4
 1831 10c0 1A60     		str	r2, [r3, #0]
 1832              	.L99:
 504:../src/interrupt_defs.cpp **** 			}
 505:../src/interrupt_defs.cpp **** 
 506:../src/interrupt_defs.cpp **** 			if(match_time_counter - t_firefight_start > FIREFIGHT_TIMEOUT)
 1833              		.loc 1 506 0
 1834 10c2 40F20003 		movw	r3, #:lower16:match_time_counter
 1835 10c6 C0F20003 		movt	r3, #:upper16:match_time_counter
 1836 10ca 93ED007A 		flds	s14, [r3, #0]
 1837 10ce 40F20003 		movw	r3, #:lower16:t_firefight_start
 1838 10d2 C0F20003 		movt	r3, #:upper16:t_firefight_start
 1839 10d6 D3ED007A 		flds	s15, [r3, #0]
 1840 10da 37EE677A 		fsubs	s14, s14, s15
 1841 10de F2EE047A 		fconsts	s15, #36
 1842 10e2 B4EEE77A 		fcmpes	s14, s15
 1843 10e6 F1EE10FA 		fmstat
 1844 10ea 69DD     		ble	.L76
 1845              	.L124:
 507:../src/interrupt_defs.cpp **** 			{
 508:../src/interrupt_defs.cpp **** 				// Turn off motors:
 509:../src/interrupt_defs.cpp **** 				pwm1_output(0.5f);
 1846              		.loc 1 509 0
 1847 10ec B6EE000A 		fconsts	s0, #96
 1848 10f0 FFF7FEFF 		bl	_Z11pwm1_outputf
 510:../src/interrupt_defs.cpp **** 				pwm2_output(0.5f);
 1849              		.loc 1 510 0
 1850 10f4 B6EE000A 		fconsts	s0, #96
 1851 10f8 FFF7FEFF 		bl	_Z11pwm2_outputf
 511:../src/interrupt_defs.cpp **** 
 512:../src/interrupt_defs.cpp **** 				// Turn off the fan:
 513:../src/interrupt_defs.cpp **** 				pwm3_output(0.05f);
 1852              		.loc 1 513 0
 1853 10fc 9FED5E0A 		flds	s0, .L132
 1854 1100 FFF7FEFF 		bl	_Z11pwm3_outputf
 514:../src/interrupt_defs.cpp **** 
 515:../src/interrupt_defs.cpp **** 				for(i=0;i<40000000;++i)
 1855              		.loc 1 515 0
 1856 1104 4FF00003 		mov	r3, #0
 1857 1108 7B60     		str	r3, [r7, #4]
 1858 110a 07E0     		b	.L101
 1859              	.L102:
 516:../src/interrupt_defs.cpp **** 				{
 517:../src/interrupt_defs.cpp **** 					++i;
 1860              		.loc 1 517 0 discriminator 2
 1861 110c 7B68     		ldr	r3, [r7, #4]
 1862 110e 03F10103 		add	r3, r3, #1
 1863 1112 7B60     		str	r3, [r7, #4]
 515:../src/interrupt_defs.cpp **** 				for(i=0;i<40000000;++i)
 1864              		.loc 1 515 0 discriminator 2
 1865 1114 7B68     		ldr	r3, [r7, #4]
 1866 1116 03F10103 		add	r3, r3, #1
 1867 111a 7B60     		str	r3, [r7, #4]
 1868              	.L101:
 515:../src/interrupt_defs.cpp **** 				for(i=0;i<40000000;++i)
 1869              		.loc 1 515 0 is_stmt 0 discriminator 1
 1870 111c 7A68     		ldr	r2, [r7, #4]
 1871 111e 45F6FF13 		movw	r3, #23039
 1872 1122 C0F26223 		movt	r3, 610
 1873 1126 9A42     		cmp	r2, r3
 1874 1128 CCBF     		ite	gt
 1875 112a 0023     		movgt	r3, #0
 1876 112c 0123     		movle	r3, #1
 1877 112e DBB2     		uxtb	r3, r3
 1878 1130 002B     		cmp	r3, #0
 1879 1132 EBD1     		bne	.L102
 518:../src/interrupt_defs.cpp **** 				}
 519:../src/interrupt_defs.cpp **** 
 520:../src/interrupt_defs.cpp **** 				if((adc2_data[2] > UV_THRESHOLD || adcData[0] > UV_THRESHOLD))
 1880              		.loc 1 520 0 is_stmt 1
 1881 1134 40F20003 		movw	r3, #:lower16:adc2_data
 1882 1138 C0F20003 		movt	r3, #:upper16:adc2_data
 1883 113c 9A68     		ldr	r2, [r3, #8]
 1884 113e 40F20D23 		movw	r3, #525
 1885 1142 9A42     		cmp	r2, r3
 1886 1144 08D8     		bhi	.L103
 1887              		.loc 1 520 0 is_stmt 0 discriminator 2
 1888 1146 40F20003 		movw	r3, #:lower16:adcData
 1889 114a C0F20003 		movt	r3, #:upper16:adcData
 1890 114e 1A68     		ldr	r2, [r3, #0]
 1891 1150 40F20D23 		movw	r3, #525
 1892 1154 9A42     		cmp	r2, r3
 1893 1156 02D9     		bls	.L104
 1894              	.L103:
 1895              		.loc 1 520 0 discriminator 1
 1896 1158 4FF00103 		mov	r3, #1
 1897 115c 01E0     		b	.L105
 1898              	.L104:
 1899              		.loc 1 520 0 discriminator 3
 1900 115e 4FF00003 		mov	r3, #0
 1901              	.L105:
 1902              		.loc 1 520 0 discriminator 4
 1903 1162 002B     		cmp	r3, #0
 1904 1164 16D0     		beq	.L106
 521:../src/interrupt_defs.cpp **** 				{
 522:../src/interrupt_defs.cpp **** 					/*
 523:../src/interrupt_defs.cpp **** 					match_time_counter = 0.0f;
 524:../src/interrupt_defs.cpp **** 
 525:../src/interrupt_defs.cpp **** 					// Turn off the fan:
 526:../src/interrupt_defs.cpp **** 					// pwm3_output(0.05f);
 527:../src/interrupt_defs.cpp **** 
 528:../src/interrupt_defs.cpp **** 					// Wait for flame to settle, if it's still there...
 529:../src/interrupt_defs.cpp **** 					// Twitch robot in some other direction
 530:../src/interrupt_defs.cpp **** 					pwm1_output(0.85f);
 531:../src/interrupt_defs.cpp **** 					pwm2_output(0.00f);
 532:../src/interrupt_defs.cpp **** 					while(match_time_counter < 1.5f)
 533:../src/interrupt_defs.cpp **** 					{
 534:../src/interrupt_defs.cpp **** 						if(match_time_counter > 1.5f)
 535:../src/interrupt_defs.cpp **** 						{
 536:../src/interrupt_defs.cpp **** 							pwm1_output(0.5f);
 537:../src/interrupt_defs.cpp **** 							pwm2_output(0.5f);
 538:../src/interrupt_defs.cpp **** 							break;
 539:../src/interrupt_defs.cpp **** 						}
 540:../src/interrupt_defs.cpp **** 					}*/
 541:../src/interrupt_defs.cpp **** 
 542:../src/interrupt_defs.cpp **** 					pwm1_output(0.0f);
 1905              		.loc 1 542 0 is_stmt 1
 1906 1166 9FED450A 		flds	s0, .L132+4
 1907 116a FFF7FEFF 		bl	_Z11pwm1_outputf
 543:../src/interrupt_defs.cpp **** 					pwm2_output(0.85f);
 1908              		.loc 1 543 0
 1909 116e 9FED440A 		flds	s0, .L132+8
 1910 1172 FFF7FEFF 		bl	_Z11pwm2_outputf
 544:../src/interrupt_defs.cpp **** 					match_time_counter = 0.0f;
 1911              		.loc 1 544 0
 1912 1176 40F20003 		movw	r3, #:lower16:match_time_counter
 1913 117a C0F20003 		movt	r3, #:upper16:match_time_counter
 1914 117e 4FF00002 		mov	r2, #0
 1915 1182 1A60     		str	r2, [r3, #0]	@ float
 545:../src/interrupt_defs.cpp **** 					state = ST_REDO_FIREFIGHT;
 1916              		.loc 1 545 0
 1917 1184 40F20003 		movw	r3, #:lower16:state
 1918 1188 C0F20003 		movt	r3, #:upper16:state
 1919 118c 4FF00502 		mov	r2, #5
 1920 1190 1A60     		str	r2, [r3, #0]
 1921 1192 15E0     		b	.L76
 1922              	.L106:
 546:../src/interrupt_defs.cpp **** 				}
 547:../src/interrupt_defs.cpp **** 				else
 548:../src/interrupt_defs.cpp **** 				{
 549:../src/interrupt_defs.cpp **** 					pwm1_output(0.5f);
 1923              		.loc 1 549 0
 1924 1194 B6EE000A 		fconsts	s0, #96
 1925 1198 FFF7FEFF 		bl	_Z11pwm1_outputf
 550:../src/interrupt_defs.cpp **** 					pwm2_output(0.5f);
 1926              		.loc 1 550 0
 1927 119c B6EE000A 		fconsts	s0, #96
 1928 11a0 FFF7FEFF 		bl	_Z11pwm2_outputf
 551:../src/interrupt_defs.cpp **** 					rt = 0;
 1929              		.loc 1 551 0
 1930 11a4 40F20003 		movw	r3, #:lower16:rt
 1931 11a8 C0F20003 		movt	r3, #:upper16:rt
 1932 11ac 4FF00002 		mov	r2, #0
 1933 11b0 1A60     		str	r2, [r3, #0]	@ float
 552:../src/interrupt_defs.cpp **** 					state = ST_DONE;
 1934              		.loc 1 552 0
 1935 11b2 40F20003 		movw	r3, #:lower16:state
 1936 11b6 C0F20003 		movt	r3, #:upper16:state
 1937 11ba 4FF00402 		mov	r2, #4
 1938 11be 1A60     		str	r2, [r3, #0]
 1939              	.L76:
 553:../src/interrupt_defs.cpp **** 				}
 554:../src/interrupt_defs.cpp **** 			}
 555:../src/interrupt_defs.cpp **** 		}
 556:../src/interrupt_defs.cpp **** 		if(state == ST_REDO_FIREFIGHT)
 1940              		.loc 1 556 0
 1941 11c0 40F20003 		movw	r3, #:lower16:state
 1942 11c4 C0F20003 		movt	r3, #:upper16:state
 1943 11c8 1B68     		ldr	r3, [r3, #0]
 1944 11ca 052B     		cmp	r3, #5
 1945 11cc 1BD1     		bne	.L107
 557:../src/interrupt_defs.cpp **** 		{
 558:../src/interrupt_defs.cpp **** 			if(match_time_counter > 1.5f)
 1946              		.loc 1 558 0
 1947 11ce 40F20003 		movw	r3, #:lower16:match_time_counter
 1948 11d2 C0F20003 		movt	r3, #:upper16:match_time_counter
 1949 11d6 93ED007A 		flds	s14, [r3, #0]
 1950 11da F7EE087A 		fconsts	s15, #120
 1951 11de B4EEE77A 		fcmpes	s14, s15
 1952 11e2 F1EE10FA 		fmstat
 1953 11e6 0EDD     		ble	.L107
 1954              	.L125:
 559:../src/interrupt_defs.cpp **** 			{
 560:../src/interrupt_defs.cpp **** 				pwm1_output(0.5f);
 1955              		.loc 1 560 0
 1956 11e8 B6EE000A 		fconsts	s0, #96
 1957 11ec FFF7FEFF 		bl	_Z11pwm1_outputf
 561:../src/interrupt_defs.cpp **** 				pwm2_output(0.5f);
 1958              		.loc 1 561 0
 1959 11f0 B6EE000A 		fconsts	s0, #96
 1960 11f4 FFF7FEFF 		bl	_Z11pwm2_outputf
 562:../src/interrupt_defs.cpp **** 				state = ST_HOMING;
 1961              		.loc 1 562 0
 1962 11f8 40F20003 		movw	r3, #:lower16:state
 1963 11fc C0F20003 		movt	r3, #:upper16:state
 1964 1200 4FF00102 		mov	r2, #1
 1965 1204 1A60     		str	r2, [r3, #0]
 1966              	.L107:
 563:../src/interrupt_defs.cpp **** 			}
 564:../src/interrupt_defs.cpp **** 		}
 565:../src/interrupt_defs.cpp **** 		if(state == ST_WANDER || state == ST_HOMING || state == ST_CANDLE_BLOWOUT) {
 1967              		.loc 1 565 0
 1968 1206 40F20003 		movw	r3, #:lower16:state
 1969 120a C0F20003 		movt	r3, #:upper16:state
 1970 120e 1B68     		ldr	r3, [r3, #0]
 1971 1210 002B     		cmp	r3, #0
 1972 1212 0DD0     		beq	.L109
 1973              		.loc 1 565 0 is_stmt 0 discriminator 1
 1974 1214 40F20003 		movw	r3, #:lower16:state
 1975 1218 C0F20003 		movt	r3, #:upper16:state
 1976 121c 1B68     		ldr	r3, [r3, #0]
 1977 121e 012B     		cmp	r3, #1
 1978 1220 06D0     		beq	.L109
 1979              		.loc 1 565 0 discriminator 2
 1980 1222 40F20003 		movw	r3, #:lower16:state
 1981 1226 C0F20003 		movt	r3, #:upper16:state
 1982 122a 1B68     		ldr	r3, [r3, #0]
 1983 122c 032B     		cmp	r3, #3
 1984 122e 1DD1     		bne	.L60
 1985              	.L109:
 566:../src/interrupt_defs.cpp **** 		pwm1_output(left);
 1986              		.loc 1 566 0 is_stmt 1
 1987 1230 40F20003 		movw	r3, #:lower16:left
 1988 1234 C0F20003 		movt	r3, #:upper16:left
 1989 1238 D3ED007A 		flds	s15, [r3, #0]
 1990 123c B0EE670A 		fcpys	s0, s15
 1991 1240 FFF7FEFF 		bl	_Z11pwm1_outputf
 567:../src/interrupt_defs.cpp **** 		pwm2_output(right);
 1992              		.loc 1 567 0
 1993 1244 40F20003 		movw	r3, #:lower16:right
 1994 1248 C0F20003 		movt	r3, #:upper16:right
 1995 124c D3ED007A 		flds	s15, [r3, #0]
 1996 1250 B0EE670A 		fcpys	s0, s15
 1997 1254 FFF7FEFF 		bl	_Z11pwm2_outputf
 568:../src/interrupt_defs.cpp **** 		last_err = err;
 1998              		.loc 1 568 0
 1999 1258 40F20003 		movw	r3, #:lower16:err
 2000 125c C0F20003 		movt	r3, #:upper16:err
 2001 1260 1A68     		ldr	r2, [r3, #0]	@ float
 2002 1262 40F20003 		movw	r3, #:lower16:last_err
 2003 1266 C0F20003 		movt	r3, #:upper16:last_err
 2004 126a 1A60     		str	r2, [r3, #0]	@ float
 2005              	.L60:
 2006              	.LBE11:
 569:../src/interrupt_defs.cpp **** 		}
 570:../src/interrupt_defs.cpp **** 	}
 2007              		.loc 1 570 0
 2008 126c 07F10807 		add	r7, r7, #8
 2009 1270 BD46     		mov	sp, r7
 2010 1272 80BD     		pop	{r7, pc}
 2011              	.L133:
 2012 1274 AFF30080 		.align	3
 2013              	.L132:
 2014 1278 CDCC4C3D 		.word	1028443341
 2015 127c 00000000 		.word	0
 2016 1280 9A99593F 		.word	1062836634
 2017 1284 F6285C8F 		.word	-1889785610
 2018 1288 C2F5D83F 		.word	1071183298
 2019              		.cfi_endproc
 2020              	.LFE119:
 2022              	.Letext0:
 2023              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2024              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2025              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_exti.h"
 2026              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 2027              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 2028              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 2029              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 interrupt_defs.cpp
     /tmp/ccqNeugN.s:24     .text:00000000 $t
     /tmp/ccqNeugN.s:29     .text:00000000 TIM7_IRQHandler
     /tmp/ccqNeugN.s:431    .text:00000438 $d
     /tmp/ccqNeugN.s:443    .text:00000460 $t
     /tmp/ccqNeugN.s:1273   .text:00000a9c update_pid
     /tmp/ccqNeugN.s:482    .text:000004b4 TIM1_TRG_COM_TIM17_IRQHandler
     /tmp/ccqNeugN.s:651    .text:00000600 TIM6_DAC_IRQHandler
     /tmp/ccqNeugN.s:909    .text:00000858 ADC1_2_IRQHandler
     /tmp/ccqNeugN.s:958    .text:0000089c DMA1_Channel1_IRQHandler
     /tmp/ccqNeugN.s:990    .text:000008b8 DMA2_Channel1_IRQHandler
     /tmp/ccqNeugN.s:1023   .text:000008d8 ADC3_IRQHandler
     /tmp/ccqNeugN.s:1141   .text:000009c4 $d
     /tmp/ccqNeugN.s:1146   .text:000009cc $t
     /tmp/ccqNeugN.s:1151   .text:000009cc EXTI9_5_IRQHandler
     /tmp/ccqNeugN.s:1531   .text:00000d70 $d
     /tmp/ccqNeugN.s:1542   .text:00000d94 $t
     /tmp/ccqNeugN.s:2014   .text:00001278 $d
                     .debug_frame:00000010 $d
     /tmp/ccqNeugN.s:2030   .text:0000128c $t
                           .group:00000000 wm4.1.50a79f075d1434c9a8bd8ee500f78677
                           .group:00000000 wm4.common_headers.h.9.40d529e09e59830fa5f5640200a489ab
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dcmplt
TIM_ClearITPendingBit
left_enc
right_enc
TIM_GetCounter
TIM_SetCounter
_Z11pwm2_outputf
_Z11pwm1_outputf
state
match_time_counter
EXTI_Init
GPIO_Init
GPIO_WriteBit
stage
NVIC_Init
led_matrix
GPIO_Write
led_iter
ADC_GetITStatus
ADC_GetConversionValue
adcval
ADC_ClearITPendingBit
DMA_ClearITPendingBit
new_data
adc2_new_data
adc3_awd1
adc3_awd2
EXTI_ClearITPendingBit
TIM_Cmd
count
__aeabi_f2d
d_front
adcData
adc2_data
err
last_err
diff_err
integral
drive_cmd
rt
left
right
t_firefight_start
_Z11pwm3_outputf
