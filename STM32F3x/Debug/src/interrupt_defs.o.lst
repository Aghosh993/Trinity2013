   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"interrupt_defs.cpp"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	__aeabi_i2d
  21              		.global	__aeabi_dmul
  22              		.global	__aeabi_dcmpgt
  23              		.global	__aeabi_dcmplt
  24              		.align	2
  25              		.global	TIM7_IRQHandler
  26              		.thumb
  27              		.thumb_func
  29              	TIM7_IRQHandler:
  30              	.LFB111:
  31              		.file 1 "../src/interrupt_defs.cpp"
   1:../src/interrupt_defs.cpp **** /*
   2:../src/interrupt_defs.cpp ****  * interrupt_defs.cpp
   3:../src/interrupt_defs.cpp ****  *
   4:../src/interrupt_defs.cpp ****  *  Created on: Feb 19, 2013
   5:../src/interrupt_defs.cpp ****  *      Author: root
   6:../src/interrupt_defs.cpp ****  */
   7:../src/interrupt_defs.cpp **** 
   8:../src/interrupt_defs.cpp **** #include "common_headers.h"
   9:../src/interrupt_defs.cpp **** #include "stm32f3_discovery_l3gd20.h"
  10:../src/interrupt_defs.cpp **** 
  11:../src/interrupt_defs.cpp **** #include "encoder.h"
  12:../src/interrupt_defs.cpp **** 
  13:../src/interrupt_defs.cpp **** //#include <stdio.h>
  14:../src/interrupt_defs.cpp **** #include <math.h>
  15:../src/interrupt_defs.cpp **** 
  16:../src/interrupt_defs.cpp **** // ISR definitions need to go here, to avoid C++ name-mangling
  17:../src/interrupt_defs.cpp **** 
  18:../src/interrupt_defs.cpp **** extern "C"
  19:../src/interrupt_defs.cpp **** {
  20:../src/interrupt_defs.cpp **** extern volatile float gyro_angle_x;
  21:../src/interrupt_defs.cpp **** extern encoderState left_enc, right_enc;
  22:../src/interrupt_defs.cpp **** extern int gyro_bias_x, adcval;
  23:../src/interrupt_defs.cpp **** extern volatile int led_matrix[8];
  24:../src/interrupt_defs.cpp **** extern volatile int led_iter;
  25:../src/interrupt_defs.cpp **** extern int new_data;
  26:../src/interrupt_defs.cpp **** extern uint8_t adc2_new_data;
  27:../src/interrupt_defs.cpp **** extern uint8_t adc3_awd1, adc3_awd2;
  28:../src/interrupt_defs.cpp **** 
  29:../src/interrupt_defs.cpp **** extern int count, stage;
  30:../src/interrupt_defs.cpp **** 
  31:../src/interrupt_defs.cpp **** 	void TIM7_IRQHandler(void) // ISR that performs encoder state update:
  32:../src/interrupt_defs.cpp **** 										// Runs every DT milliseconds
  33:../src/interrupt_defs.cpp **** 	{
  32              		.loc 1 33 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 96
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 90B5     		push	{r4, r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 12
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 99B0     		sub	sp, sp, #100
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 112
  45 0004 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48              	.LBB2:
  34:../src/interrupt_defs.cpp **** 		float left_out, right_out;
  35:../src/interrupt_defs.cpp **** 		int error, abs_err;
  36:../src/interrupt_defs.cpp **** 
  37:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
  49              		.loc 1 37 0
  50 0006 4FF4A050 		mov	r0, #5120
  51 000a C4F20000 		movt	r0, 16384
  52 000e 4FF00101 		mov	r1, #1
  53 0012 FFF7FEFF 		bl	TIM_ClearITPendingBit
  38:../src/interrupt_defs.cpp **** 
  39:../src/interrupt_defs.cpp **** 		encoderState left_temp, right_temp;
  40:../src/interrupt_defs.cpp **** 
  41:../src/interrupt_defs.cpp **** 		left_temp.position = left_enc.position;
  54              		.loc 1 41 0
  55 0016 40F20003 		movw	r3, #:lower16:left_enc
  56 001a C0F20003 		movt	r3, #:upper16:left_enc
  57 001e 1B68     		ldr	r3, [r3, #0]
  58 0020 3B60     		str	r3, [r7, #0]
  42:../src/interrupt_defs.cpp **** 		left_temp.speed = left_enc.speed;
  59              		.loc 1 42 0
  60 0022 40F20003 		movw	r3, #:lower16:left_enc
  61 0026 C0F20003 		movt	r3, #:upper16:left_enc
  62 002a 5B68     		ldr	r3, [r3, #4]	@ float
  63 002c 7B60     		str	r3, [r7, #4]	@ float
  43:../src/interrupt_defs.cpp **** 		left_temp.acceleration = left_enc.acceleration;
  64              		.loc 1 43 0
  65 002e 40F20003 		movw	r3, #:lower16:left_enc
  66 0032 C0F20003 		movt	r3, #:upper16:left_enc
  67 0036 9B68     		ldr	r3, [r3, #8]	@ float
  68 0038 BB60     		str	r3, [r7, #8]	@ float
  44:../src/interrupt_defs.cpp **** 
  45:../src/interrupt_defs.cpp **** 		right_temp.position = right_enc.position;
  69              		.loc 1 45 0
  70 003a 40F20003 		movw	r3, #:lower16:right_enc
  71 003e C0F20003 		movt	r3, #:upper16:right_enc
  72 0042 1B68     		ldr	r3, [r3, #0]
  73 0044 BB62     		str	r3, [r7, #40]
  46:../src/interrupt_defs.cpp **** 		right_temp.speed = right_enc.speed;
  74              		.loc 1 46 0
  75 0046 40F20003 		movw	r3, #:lower16:right_enc
  76 004a C0F20003 		movt	r3, #:upper16:right_enc
  77 004e 5B68     		ldr	r3, [r3, #4]	@ float
  78 0050 FB62     		str	r3, [r7, #44]	@ float
  47:../src/interrupt_defs.cpp **** 		right_temp.acceleration = right_enc.acceleration;
  79              		.loc 1 47 0
  80 0052 40F20003 		movw	r3, #:lower16:right_enc
  81 0056 C0F20003 		movt	r3, #:upper16:right_enc
  82 005a 9B68     		ldr	r3, [r3, #8]	@ float
  83 005c 3B63     		str	r3, [r7, #48]	@ float
  48:../src/interrupt_defs.cpp **** 
  49:../src/interrupt_defs.cpp **** 		left_enc.position = left_temp.position + (int16_t)TIM_GetCounter(TIM4); //Instead of TIM2 on othe
  84              		.loc 1 49 0
  85 005e 3C68     		ldr	r4, [r7, #0]
  86 0060 4FF40060 		mov	r0, #2048
  87 0064 C4F20000 		movt	r0, 16384
  88 0068 FFF7FEFF 		bl	TIM_GetCounter
  89 006c 0346     		mov	r3, r0
  90 006e 9BB2     		uxth	r3, r3
  91 0070 1BB2     		sxth	r3, r3
  92 0072 E218     		adds	r2, r4, r3
  93 0074 40F20003 		movw	r3, #:lower16:left_enc
  94 0078 C0F20003 		movt	r3, #:upper16:left_enc
  95 007c 1A60     		str	r2, [r3, #0]
  50:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM4, 0);
  96              		.loc 1 50 0
  97 007e 4FF40060 		mov	r0, #2048
  98 0082 C4F20000 		movt	r0, 16384
  99 0086 4FF00001 		mov	r1, #0
 100 008a FFF7FEFF 		bl	TIM_SetCounter
  51:../src/interrupt_defs.cpp **** 		left_enc.speed = (float)((left_enc.position - left_temp.position)*1000)/(float)DT_ENCODER; // Sin
 101              		.loc 1 51 0
 102 008e 40F20003 		movw	r3, #:lower16:left_enc
 103 0092 C0F20003 		movt	r3, #:upper16:left_enc
 104 0096 1A68     		ldr	r2, [r3, #0]
 105 0098 3B68     		ldr	r3, [r7, #0]
 106 009a D31A     		subs	r3, r2, r3
 107 009c 4FF47A72 		mov	r2, #1000
 108 00a0 02FB03F3 		mul	r3, r2, r3
 109 00a4 07EE903A 		fmsr	s15, r3	@ int
 110 00a8 B8EEE77A 		fsitos	s14, s15
 111 00ac F3EE097A 		fconsts	s15, #57
 112 00b0 C7EE277A 		fdivs	s15, s14, s15
 113 00b4 40F20003 		movw	r3, #:lower16:left_enc
 114 00b8 C0F20003 		movt	r3, #:upper16:left_enc
 115 00bc C3ED017A 		fsts	s15, [r3, #4]
  52:../src/interrupt_defs.cpp **** 		left_enc.acceleration = (float)((left_enc.speed - left_temp.speed)*1000)/(float)DT_ENCODER;
 116              		.loc 1 52 0
 117 00c0 40F20003 		movw	r3, #:lower16:left_enc
 118 00c4 C0F20003 		movt	r3, #:upper16:left_enc
 119 00c8 93ED017A 		flds	s14, [r3, #4]
 120 00cc D7ED017A 		flds	s15, [r7, #4]
 121 00d0 37EE677A 		fsubs	s14, s14, s15
 122 00d4 DFEDDA7A 		flds	s15, .L31+8
 123 00d8 27EE277A 		fmuls	s14, s14, s15
 124 00dc F3EE097A 		fconsts	s15, #57
 125 00e0 C7EE277A 		fdivs	s15, s14, s15
 126 00e4 40F20003 		movw	r3, #:lower16:left_enc
 127 00e8 C0F20003 		movt	r3, #:upper16:left_enc
 128 00ec C3ED027A 		fsts	s15, [r3, #8]
  53:../src/interrupt_defs.cpp **** 
  54:../src/interrupt_defs.cpp **** 		right_enc.position = right_temp.position + (int16_t)(TIM_GetCounter(TIM8));
 129              		.loc 1 54 0
 130 00f0 BC6A     		ldr	r4, [r7, #40]
 131 00f2 4FF45050 		mov	r0, #13312
 132 00f6 C4F20100 		movt	r0, 16385
 133 00fa FFF7FEFF 		bl	TIM_GetCounter
 134 00fe 0346     		mov	r3, r0
 135 0100 9BB2     		uxth	r3, r3
 136 0102 1BB2     		sxth	r3, r3
 137 0104 E218     		adds	r2, r4, r3
 138 0106 40F20003 		movw	r3, #:lower16:right_enc
 139 010a C0F20003 		movt	r3, #:upper16:right_enc
 140 010e 1A60     		str	r2, [r3, #0]
  55:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM8, 0); // To get around the stupid 16-bit counter limitation present on all tim
 141              		.loc 1 55 0
 142 0110 4FF45050 		mov	r0, #13312
 143 0114 C4F20100 		movt	r0, 16385
 144 0118 4FF00001 		mov	r1, #0
 145 011c FFF7FEFF 		bl	TIM_SetCounter
  56:../src/interrupt_defs.cpp **** 		right_enc.speed = (float)((right_enc.position - right_temp.position)*1000)/(float)DT_ENCODER;
 146              		.loc 1 56 0
 147 0120 40F20003 		movw	r3, #:lower16:right_enc
 148 0124 C0F20003 		movt	r3, #:upper16:right_enc
 149 0128 1A68     		ldr	r2, [r3, #0]
 150 012a BB6A     		ldr	r3, [r7, #40]
 151 012c D31A     		subs	r3, r2, r3
 152 012e 4FF47A72 		mov	r2, #1000
 153 0132 02FB03F3 		mul	r3, r2, r3
 154 0136 07EE903A 		fmsr	s15, r3	@ int
 155 013a B8EEE77A 		fsitos	s14, s15
 156 013e F3EE097A 		fconsts	s15, #57
 157 0142 C7EE277A 		fdivs	s15, s14, s15
 158 0146 40F20003 		movw	r3, #:lower16:right_enc
 159 014a C0F20003 		movt	r3, #:upper16:right_enc
 160 014e C3ED017A 		fsts	s15, [r3, #4]
  57:../src/interrupt_defs.cpp **** 		right_enc.acceleration = (float)((right_enc.speed - right_temp.speed)*1000)/(float)DT_ENCODER;
 161              		.loc 1 57 0
 162 0152 40F20003 		movw	r3, #:lower16:right_enc
 163 0156 C0F20003 		movt	r3, #:upper16:right_enc
 164 015a 93ED017A 		flds	s14, [r3, #4]
 165 015e D7ED0B7A 		flds	s15, [r7, #44]
 166 0162 37EE677A 		fsubs	s14, s14, s15
 167 0166 DFEDB67A 		flds	s15, .L31+8
 168 016a 27EE277A 		fmuls	s14, s14, s15
 169 016e F3EE097A 		fconsts	s15, #57
 170 0172 C7EE277A 		fdivs	s15, s14, s15
 171 0176 40F20003 		movw	r3, #:lower16:right_enc
 172 017a C0F20003 		movt	r3, #:upper16:right_enc
 173 017e C3ED027A 		fsts	s15, [r3, #8]
  58:../src/interrupt_defs.cpp **** 
  59:../src/interrupt_defs.cpp **** 		if(left_enc.m == MODE_POSITION)
 174              		.loc 1 59 0
 175 0182 40F20003 		movw	r3, #:lower16:left_enc
 176 0186 C0F20003 		movt	r3, #:upper16:left_enc
 177 018a 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 178 018e 012B     		cmp	r3, #1
 179 0190 5DD1     		bne	.L2
  60:../src/interrupt_defs.cpp **** 		{
  61:../src/interrupt_defs.cpp **** 			left_out = ((float)k_p * (float)(left_enc.position_target - left_enc.position))
  62:../src/interrupt_defs.cpp **** 					+ ((float)k_i*(float)(left_enc.integral))
  63:../src/interrupt_defs.cpp **** 					+ ((float)k_d*(float)left_enc.speed);
 180              		.loc 1 63 0
 181 0192 40F20003 		movw	r3, #:lower16:left_enc
 182 0196 C0F20003 		movt	r3, #:upper16:left_enc
 183 019a DA68     		ldr	r2, [r3, #12]
 184 019c 40F20003 		movw	r3, #:lower16:left_enc
 185 01a0 C0F20003 		movt	r3, #:upper16:left_enc
 186 01a4 1B68     		ldr	r3, [r3, #0]
 187 01a6 D31A     		subs	r3, r2, r3
 188 01a8 07EE103A 		fmsr	s14, r3	@ int
 189 01ac F8EEC77A 		fsitos	s15, s14
 190 01b0 37EEA77A 		fadds	s14, s15, s15
 191 01b4 40F20003 		movw	r3, #:lower16:left_enc
 192 01b8 C0F20003 		movt	r3, #:upper16:left_enc
 193 01bc D3ED057A 		flds	s15, [r3, #20]	@ int
 194 01c0 F8EEE76A 		fsitos	s13, s15
 195 01c4 DFED9F7A 		flds	s15, .L31+12
 196 01c8 66EEA77A 		fmuls	s15, s13, s15
 197 01cc 37EE277A 		fadds	s14, s14, s15
 198 01d0 40F20003 		movw	r3, #:lower16:left_enc
 199 01d4 C0F20003 		movt	r3, #:upper16:left_enc
 200 01d8 D3ED016A 		flds	s13, [r3, #4]
 201 01dc DFED9A7A 		flds	s15, .L31+16
 202 01e0 66EEA77A 		fmuls	s15, s13, s15
 203 01e4 77EE277A 		fadds	s15, s14, s15
 204 01e8 C7ED177A 		fsts	s15, [r7, #92]
  64:../src/interrupt_defs.cpp **** 			left_out = (left_out > 100) ? 100 : ((left_out < -100) ? -100 : left_out);
 205              		.loc 1 64 0
 206 01ec 97ED177A 		flds	s14, [r7, #92]
 207 01f0 DFED967A 		flds	s15, .L31+20
 208 01f4 B4EEE77A 		fcmpes	s14, s15
 209 01f8 F1EE10FA 		fmstat
 210 01fc 04DD     		ble	.L27
 211              	.L23:
 212              		.loc 1 64 0 is_stmt 0 discriminator 1
 213 01fe 4FF00003 		mov	r3, #0
 214 0202 C4F2C823 		movt	r3, 17096
 215 0206 0EE0     		b	.L5
 216              	.L27:
 217              		.loc 1 64 0 discriminator 2
 218 0208 97ED177A 		flds	s14, [r7, #92]
 219 020c DFED907A 		flds	s15, .L31+24
 220 0210 B4EEE77A 		fcmpes	s14, s15
 221 0214 F1EE10FA 		fmstat
 222 0218 04D5     		bpl	.L28
 223              	.L24:
 224              		.loc 1 64 0 discriminator 3
 225 021a 4FF00003 		mov	r3, #0
 226 021e CCF2C823 		movt	r3, 49864
 227 0222 00E0     		b	.L8
 228              	.L28:
 229              		.loc 1 64 0 discriminator 4
 230 0224 FB6D     		ldr	r3, [r7, #92]	@ float
 231              	.L8:
 232              	.L5:
 233              		.loc 1 64 0 discriminator 6
 234 0226 FB65     		str	r3, [r7, #92]	@ float
  65:../src/interrupt_defs.cpp **** 
  66:../src/interrupt_defs.cpp **** 			pwm2_output(100-((float)(left_out+100)/(float)2));
 235              		.loc 1 66 0 is_stmt 1 discriminator 6
 236 0228 97ED177A 		flds	s14, [r7, #92]
 237 022c DFED877A 		flds	s15, .L31+20
 238 0230 37EE277A 		fadds	s14, s14, s15
 239 0234 F0EE007A 		fconsts	s15, #0
 240 0238 C7EE277A 		fdivs	s15, s14, s15
 241 023c 9FED837A 		flds	s14, .L31+20
 242 0240 77EE677A 		fsubs	s15, s14, s15
 243 0244 B0EE670A 		fcpys	s0, s15
 244 0248 FFF7FEFF 		bl	_Z11pwm2_outputf
 245 024c 0BE0     		b	.L9
 246              	.L2:
  67:../src/interrupt_defs.cpp **** 		}
  68:../src/interrupt_defs.cpp **** 		else if(left_enc.m == MODE_SPEED)
 247              		.loc 1 68 0
 248 024e 40F20003 		movw	r3, #:lower16:left_enc
 249 0252 C0F20003 		movt	r3, #:upper16:left_enc
 250 0256 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 251 025a 022B     		cmp	r3, #2
 252 025c 03D1     		bne	.L9
  69:../src/interrupt_defs.cpp **** 		{
  70:../src/interrupt_defs.cpp **** 			pwm2_output(0);
 253              		.loc 1 70 0
 254 025e 9FED7D0A 		flds	s0, .L31+28
 255 0262 FFF7FEFF 		bl	_Z11pwm2_outputf
 256              	.L9:
  71:../src/interrupt_defs.cpp **** 		}
  72:../src/interrupt_defs.cpp **** 
  73:../src/interrupt_defs.cpp **** 		if(right_enc.m == MODE_POSITION)
 257              		.loc 1 73 0
 258 0266 40F20003 		movw	r3, #:lower16:right_enc
 259 026a C0F20003 		movt	r3, #:upper16:right_enc
 260 026e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 261 0272 012B     		cmp	r3, #1
 262 0274 40F00081 		bne	.L1
  74:../src/interrupt_defs.cpp **** 		{
  75:../src/interrupt_defs.cpp **** 			error = right_enc.position - right_enc.position_target;
 263              		.loc 1 75 0
 264 0278 40F20003 		movw	r3, #:lower16:right_enc
 265 027c C0F20003 		movt	r3, #:upper16:right_enc
 266 0280 1A68     		ldr	r2, [r3, #0]
 267 0282 40F20003 		movw	r3, #:lower16:right_enc
 268 0286 C0F20003 		movt	r3, #:upper16:right_enc
 269 028a DB68     		ldr	r3, [r3, #12]
 270 028c D31A     		subs	r3, r2, r3
 271 028e BB65     		str	r3, [r7, #88]
  76:../src/interrupt_defs.cpp **** 			right_enc.integral += (float)(error) * (float)DT_ENCODER / (float)1000;
 272              		.loc 1 76 0
 273 0290 40F20003 		movw	r3, #:lower16:right_enc
 274 0294 C0F20003 		movt	r3, #:upper16:right_enc
 275 0298 D3ED057A 		flds	s15, [r3, #20]	@ int
 276 029c B8EEE77A 		fsitos	s14, s15
 277 02a0 D7ED167A 		flds	s15, [r7, #88]	@ int
 278 02a4 F8EEE76A 		fsitos	s13, s15
 279 02a8 F3EE097A 		fconsts	s15, #57
 280 02ac 66EEA76A 		fmuls	s13, s13, s15
 281 02b0 DFED637A 		flds	s15, .L31+8
 282 02b4 C6EEA77A 		fdivs	s15, s13, s15
 283 02b8 77EE277A 		fadds	s15, s14, s15
 284 02bc FDEEE77A 		ftosizs	s15, s15
 285 02c0 40F20003 		movw	r3, #:lower16:right_enc
 286 02c4 C0F20003 		movt	r3, #:upper16:right_enc
 287 02c8 C3ED057A 		fsts	s15, [r3, #20]	@ int
  77:../src/interrupt_defs.cpp **** 
  78:../src/interrupt_defs.cpp **** 			if(right_enc.integral * k_i > 100 || right_enc.integral * k_i < -100)
 288              		.loc 1 78 0
 289 02cc 40F20003 		movw	r3, #:lower16:right_enc
 290 02d0 C0F20003 		movt	r3, #:upper16:right_enc
 291 02d4 5B69     		ldr	r3, [r3, #20]
 292 02d6 1846     		mov	r0, r3
 293 02d8 FFF7FEFF 		bl	__aeabi_i2d
 294 02dc 0246     		mov	r2, r0
 295 02de 0B46     		mov	r3, r1
 296 02e0 1046     		mov	r0, r2
 297 02e2 1946     		mov	r1, r3
 298 02e4 54A3     		adr	r3, .L31
 299 02e6 D3E90023 		ldrd	r2, [r3]
 300 02ea FFF7FEFF 		bl	__aeabi_dmul
 301 02ee 0246     		mov	r2, r0
 302 02f0 0B46     		mov	r3, r1
 303 02f2 1046     		mov	r0, r2
 304 02f4 1946     		mov	r1, r3
 305 02f6 4FF00002 		mov	r2, #0
 306 02fa 4FF00003 		mov	r3, #0
 307 02fe C4F25903 		movt	r3, 16473
 308 0302 FFF7FEFF 		bl	__aeabi_dcmpgt
 309 0306 0346     		mov	r3, r0
 310 0308 002B     		cmp	r3, #0
 311 030a 1FD1     		bne	.L11
 312              		.loc 1 78 0 is_stmt 0 discriminator 1
 313 030c 40F20003 		movw	r3, #:lower16:right_enc
 314 0310 C0F20003 		movt	r3, #:upper16:right_enc
 315 0314 5B69     		ldr	r3, [r3, #20]
 316 0316 1846     		mov	r0, r3
 317 0318 FFF7FEFF 		bl	__aeabi_i2d
 318 031c 0246     		mov	r2, r0
 319 031e 0B46     		mov	r3, r1
 320 0320 1046     		mov	r0, r2
 321 0322 1946     		mov	r1, r3
 322 0324 44A3     		adr	r3, .L31
 323 0326 D3E90023 		ldrd	r2, [r3]
 324 032a FFF7FEFF 		bl	__aeabi_dmul
 325 032e 0246     		mov	r2, r0
 326 0330 0B46     		mov	r3, r1
 327 0332 1046     		mov	r0, r2
 328 0334 1946     		mov	r1, r3
 329 0336 4FF00002 		mov	r2, #0
 330 033a 4FF00003 		mov	r3, #0
 331 033e CCF25903 		movt	r3, 49241
 332 0342 FFF7FEFF 		bl	__aeabi_dcmplt
 333 0346 0346     		mov	r3, r0
 334 0348 002B     		cmp	r3, #0
 335 034a 06D0     		beq	.L12
 336              	.L11:
  79:../src/interrupt_defs.cpp **** 			{
  80:../src/interrupt_defs.cpp **** 				right_enc.integral = (float)100/(float)k_i;
 337              		.loc 1 80 0 is_stmt 1
 338 034c 40F20003 		movw	r3, #:lower16:right_enc
 339 0350 C0F20003 		movt	r3, #:upper16:right_enc
 340 0354 40F29A22 		movw	r2, #666
 341 0358 5A61     		str	r2, [r3, #20]
 342              	.L12:
  81:../src/interrupt_defs.cpp **** 			}
  82:../src/interrupt_defs.cpp **** 
  83:../src/interrupt_defs.cpp **** 			right_out = ((float)k_p * (float)error)
  84:../src/interrupt_defs.cpp **** 					+ ((float)k_i*(float)(right_enc.integral))
  85:../src/interrupt_defs.cpp **** 					+ ((float)k_d*(float)(error - right_enc.last_error)/(float)(DT_ENCODER/(float)1000));
 343              		.loc 1 85 0
 344 035a D7ED167A 		flds	s15, [r7, #88]	@ int
 345 035e F8EEE77A 		fsitos	s15, s15
 346 0362 37EEA77A 		fadds	s14, s15, s15
 347 0366 40F20003 		movw	r3, #:lower16:right_enc
 348 036a C0F20003 		movt	r3, #:upper16:right_enc
 349 036e D3ED057A 		flds	s15, [r3, #20]	@ int
 350 0372 F8EEE76A 		fsitos	s13, s15
 351 0376 DFED337A 		flds	s15, .L31+12
 352 037a 66EEA77A 		fmuls	s15, s13, s15
 353 037e 37EE277A 		fadds	s14, s14, s15
 354 0382 40F20003 		movw	r3, #:lower16:right_enc
 355 0386 C0F20003 		movt	r3, #:upper16:right_enc
 356 038a 9B69     		ldr	r3, [r3, #24]
 357 038c BA6D     		ldr	r2, [r7, #88]
 358 038e D31A     		subs	r3, r2, r3
 359 0390 07EE903A 		fmsr	s15, r3	@ int
 360 0394 F8EEE76A 		fsitos	s13, s15
 361 0398 DFED2B7A 		flds	s15, .L31+16
 362 039c 66EEA76A 		fmuls	s13, s13, s15
 363 03a0 DFED2D7A 		flds	s15, .L31+32
 364 03a4 C6EEA77A 		fdivs	s15, s13, s15
 365 03a8 77EE277A 		fadds	s15, s14, s15
 366 03ac C7ED157A 		fsts	s15, [r7, #84]
  86:../src/interrupt_defs.cpp **** 			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 367              		.loc 1 86 0
 368 03b0 97ED157A 		flds	s14, [r7, #84]
 369 03b4 DFED257A 		flds	s15, .L31+20
 370 03b8 B4EEE77A 		fcmpes	s14, s15
 371 03bc F1EE10FA 		fmstat
 372 03c0 04DD     		ble	.L29
 373              	.L25:
 374              		.loc 1 86 0 is_stmt 0 discriminator 1
 375 03c2 4FF00003 		mov	r3, #0
 376 03c6 C4F2C823 		movt	r3, 17096
 377 03ca 0EE0     		b	.L16
 378              	.L29:
 379              		.loc 1 86 0 discriminator 2
 380 03cc 97ED157A 		flds	s14, [r7, #84]
 381 03d0 DFED1F7A 		flds	s15, .L31+24
 382 03d4 B4EEE77A 		fcmpes	s14, s15
 383 03d8 F1EE10FA 		fmstat
 384 03dc 04D5     		bpl	.L30
 385              	.L26:
 386              		.loc 1 86 0 discriminator 3
 387 03de 4FF00003 		mov	r3, #0
 388 03e2 CCF2C823 		movt	r3, 49864
 389 03e6 00E0     		b	.L19
 390              	.L30:
 391              		.loc 1 86 0 discriminator 4
 392 03e8 7B6D     		ldr	r3, [r7, #84]	@ float
 393              	.L19:
 394              	.L16:
 395              		.loc 1 86 0 discriminator 6
 396 03ea 7B65     		str	r3, [r7, #84]	@ float
  87:../src/interrupt_defs.cpp **** 			right_enc.last_error = error;
 397              		.loc 1 87 0 is_stmt 1 discriminator 6
 398 03ec 40F20003 		movw	r3, #:lower16:right_enc
 399 03f0 C0F20003 		movt	r3, #:upper16:right_enc
 400 03f4 BA6D     		ldr	r2, [r7, #88]
 401 03f6 9A61     		str	r2, [r3, #24]
  88:../src/interrupt_defs.cpp **** 
  89:../src/interrupt_defs.cpp **** 			abs_err = (error > 0) ? error : (error*-1);
 402              		.loc 1 89 0 discriminator 6
 403 03f8 BB6D     		ldr	r3, [r7, #88]
 404 03fa 002B     		cmp	r3, #0
 405 03fc B8BF     		it	lt
 406 03fe 5B42     		rsblt	r3, r3, #0
 407 0400 3B65     		str	r3, [r7, #80]
  90:../src/interrupt_defs.cpp **** 
  91:../src/interrupt_defs.cpp **** 			if(error > 10 || error < -10)
 408              		.loc 1 91 0 discriminator 6
 409 0402 BB6D     		ldr	r3, [r7, #88]
 410 0404 0A2B     		cmp	r3, #10
 411 0406 03DC     		bgt	.L20
 412              		.loc 1 91 0 is_stmt 0 discriminator 1
 413 0408 BB6D     		ldr	r3, [r7, #88]
 414 040a 13F10A0F 		cmn	r3, #10
 415 040e 27DA     		bge	.L21
 416              	.L20:
  92:../src/interrupt_defs.cpp **** 			{
  93:../src/interrupt_defs.cpp **** 				pwm1_output((((float)(right_out+100)/(float)2))*(float)0.01);
 417              		.loc 1 93 0 is_stmt 1
 418 0410 97ED157A 		flds	s14, [r7, #84]
 419 0414 DFED0D7A 		flds	s15, .L31+20
 420 0418 37EE277A 		fadds	s14, s14, s15
 421 041c F0EE007A 		fconsts	s15, #0
 422 0420 87EE277A 		fdivs	s14, s14, s15
 423 0424 DFED0D7A 		flds	s15, .L31+36
 424 0428 67EE277A 		fmuls	s15, s14, s15
 425 042c B0EE670A 		fcpys	s0, s15
 426 0430 FFF7FEFF 		bl	_Z11pwm1_outputf
 427 0434 20E0     		b	.L1
 428              	.L32:
 429 0436 00BF     		.align	3
 430              	.L31:
 431 0438 33333333 		.word	858993459
 432 043c 3333C33F 		.word	1069757235
 433 0440 00007A44 		.word	1148846080
 434 0444 9A99193E 		.word	1041865114
 435 0448 8FC2353F 		.word	1060487823
 436 044c 0000C842 		.word	1120403456
 437 0450 0000C8C2 		.word	-1027080192
 438 0454 00000000 		.word	0
 439 0458 CDCCCC3C 		.word	1020054733
 440 045c 0AD7233C 		.word	1008981770
 441              	.L21:
  94:../src/interrupt_defs.cpp **** 			}
  95:../src/interrupt_defs.cpp **** 			else
  96:../src/interrupt_defs.cpp **** 			{
  97:../src/interrupt_defs.cpp **** 				pwm1_output(0.50f);
 442              		.loc 1 97 0
 443 0460 B6EE000A 		fconsts	s0, #96
 444 0464 FFF7FEFF 		bl	_Z11pwm1_outputf
  98:../src/interrupt_defs.cpp **** 				right_enc.m = MODE_OPENLOOP;
 445              		.loc 1 98 0
 446 0468 40F20003 		movw	r3, #:lower16:right_enc
 447 046c C0F20003 		movt	r3, #:upper16:right_enc
 448 0470 4FF00002 		mov	r2, #0
 449 0474 83F82420 		strb	r2, [r3, #36]
 450              	.L1:
 451              	.LBE2:
  99:../src/interrupt_defs.cpp **** 			}
 100:../src/interrupt_defs.cpp **** 		}
 101:../src/interrupt_defs.cpp **** 		/*
 102:../src/interrupt_defs.cpp **** 		else if(right_enc.m == MODE_SPEED)
 103:../src/interrupt_defs.cpp **** 		{
 104:../src/interrupt_defs.cpp **** 			error = right_enc.speed - right_enc.speed_target;
 105:../src/interrupt_defs.cpp **** 
 106:../src/interrupt_defs.cpp **** 			right_out = ((float)error * (float)k_p_s);// + ((float)k_d_s * (float)(error - right_enc.last_sp
 107:../src/interrupt_defs.cpp **** //			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 108:../src/interrupt_defs.cpp **** 			right_enc.vel_cmd += right_out;
 109:../src/interrupt_defs.cpp **** 			if(right_enc.vel_cmd > 1)
 110:../src/interrupt_defs.cpp **** 			{
 111:../src/interrupt_defs.cpp **** 				right_enc.vel_cmd = 1;
 112:../src/interrupt_defs.cpp **** 			}
 113:../src/interrupt_defs.cpp **** 
 114:../src/interrupt_defs.cpp **** 			else if(right_enc.vel_cmd < 0)
 115:../src/interrupt_defs.cpp **** 			{
 116:../src/interrupt_defs.cpp **** 				right_enc.vel_cmd = 0;
 117:../src/interrupt_defs.cpp **** 			}
 118:../src/interrupt_defs.cpp **** 
 119:../src/interrupt_defs.cpp **** //			pwm1_output((float)1.0-right_enc.vel_cmd);
 120:../src/interrupt_defs.cpp **** 			pwm1_output(0.50f);
 121:../src/interrupt_defs.cpp **** 
 122:../src/interrupt_defs.cpp **** 			right_enc.last_speed_error = error;
 123:../src/interrupt_defs.cpp **** 		}
 124:../src/interrupt_defs.cpp **** 		*/
 125:../src/interrupt_defs.cpp **** 	}
 452              		.loc 1 125 0
 453 0478 07F16407 		add	r7, r7, #100
 454 047c BD46     		mov	sp, r7
 455 047e 90BD     		pop	{r4, r7, pc}
 456              		.cfi_endproc
 457              	.LFE111:
 459              		.align	2
 460              		.global	TIM1_TRG_COM_TIM17_IRQHandler
 461              		.thumb
 462              		.thumb_func
 464              	TIM1_TRG_COM_TIM17_IRQHandler:
 465              	.LFB112:
 126:../src/interrupt_defs.cpp **** 
 127:../src/interrupt_defs.cpp **** 	void TIM1_TRG_COM_TIM17_IRQHandler(void)
 128:../src/interrupt_defs.cpp **** 	{
 466              		.loc 1 128 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 24
 469              		@ frame_needed = 1, uses_anonymous_args = 0
 470 0480 80B5     		push	{r7, lr}
 471              	.LCFI3:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 7, -8
 474              		.cfi_offset 14, -4
 475 0482 86B0     		sub	sp, sp, #24
 476              	.LCFI4:
 477              		.cfi_def_cfa_offset 32
 478 0484 00AF     		add	r7, sp, #0
 479              	.LCFI5:
 480              		.cfi_def_cfa_register 7
 481              	.LBB3:
 129:../src/interrupt_defs.cpp **** 
 130:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM17, TIM_IT_Update);
 482              		.loc 1 130 0
 483 0486 4FF49040 		mov	r0, #18432
 484 048a C4F20100 		movt	r0, 16385
 485 048e 4FF00101 		mov	r1, #1
 486 0492 FFF7FEFF 		bl	TIM_ClearITPendingBit
 131:../src/interrupt_defs.cpp **** 		/*
 132:../src/interrupt_defs.cpp **** 		uint8_t bytes[2];
 133:../src/interrupt_defs.cpp **** 
 134:../src/interrupt_defs.cpp **** 		union twosComp {		// Takes care of two's complement conversion
 135:../src/interrupt_defs.cpp **** 			uint16_t un_signed;
 136:../src/interrupt_defs.cpp **** 			int16_t output;
 137:../src/interrupt_defs.cpp **** 		} convert;
 138:../src/interrupt_defs.cpp **** 
 139:../src/interrupt_defs.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 140:../src/interrupt_defs.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 141:../src/interrupt_defs.cpp **** 
 142:../src/interrupt_defs.cpp **** 		gyro_angle_x += (convert.output - gyro_bias_x) * (float)0.00763 * (float)0.001 * (float)DT_IMU;
 143:../src/interrupt_defs.cpp **** 
 144:../src/interrupt_defs.cpp **** 		*/
 145:../src/interrupt_defs.cpp **** 		/*
 146:../src/interrupt_defs.cpp **** 		 * Below: code required to trigger the ping sensor:
 147:../src/interrupt_defs.cpp **** 		 */
 148:../src/interrupt_defs.cpp **** 
 149:../src/interrupt_defs.cpp **** 		EXTI_InitTypeDef e;
 150:../src/interrupt_defs.cpp **** 
 151:../src/interrupt_defs.cpp **** 		e.EXTI_Line = EXTI_Line1;
 487              		.loc 1 151 0
 488 0496 4FF00103 		mov	r3, #1
 489 049a FB60     		str	r3, [r7, #12]
 152:../src/interrupt_defs.cpp **** 		e.EXTI_LineCmd = DISABLE;
 490              		.loc 1 152 0
 491 049c 4FF00003 		mov	r3, #0
 492 04a0 BB74     		strb	r3, [r7, #18]
 153:../src/interrupt_defs.cpp **** 		e.EXTI_Mode = EXTI_Mode_Interrupt;
 493              		.loc 1 153 0
 494 04a2 4FF00003 		mov	r3, #0
 495 04a6 3B74     		strb	r3, [r7, #16]
 154:../src/interrupt_defs.cpp **** 		e.EXTI_Trigger = EXTI_Trigger_Rising;
 496              		.loc 1 154 0
 497 04a8 4FF00803 		mov	r3, #8
 498 04ac 7B74     		strb	r3, [r7, #17]
 155:../src/interrupt_defs.cpp **** 
 156:../src/interrupt_defs.cpp **** 		EXTI_Init(&e);
 499              		.loc 1 156 0
 500 04ae 07F10C03 		add	r3, r7, #12
 501 04b2 1846     		mov	r0, r3
 502 04b4 FFF7FEFF 		bl	EXTI_Init
 157:../src/interrupt_defs.cpp **** 
 158:../src/interrupt_defs.cpp **** 		GPIO_InitTypeDef g;
 159:../src/interrupt_defs.cpp **** 		g.GPIO_Mode = GPIO_Mode_OUT;
 503              		.loc 1 159 0
 504 04b8 4FF00103 		mov	r3, #1
 505 04bc 3B72     		strb	r3, [r7, #8]
 160:../src/interrupt_defs.cpp **** 		g.GPIO_OType = GPIO_OType_PP;
 506              		.loc 1 160 0
 507 04be 4FF00003 		mov	r3, #0
 508 04c2 BB72     		strb	r3, [r7, #10]
 161:../src/interrupt_defs.cpp **** 		g.GPIO_Pin = GPIO_Pin_0;
 509              		.loc 1 161 0
 510 04c4 4FF00103 		mov	r3, #1
 511 04c8 7B60     		str	r3, [r7, #4]
 162:../src/interrupt_defs.cpp **** 		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 512              		.loc 1 162 0
 513 04ca 4FF00003 		mov	r3, #0
 514 04ce FB72     		strb	r3, [r7, #11]
 163:../src/interrupt_defs.cpp **** 		g.GPIO_Speed = GPIO_Speed_Level_1;
 515              		.loc 1 163 0
 516 04d0 4FF00103 		mov	r3, #1
 517 04d4 7B72     		strb	r3, [r7, #9]
 164:../src/interrupt_defs.cpp **** 
 165:../src/interrupt_defs.cpp **** 		GPIO_Init(GPIOB, &g);
 518              		.loc 1 165 0
 519 04d6 07F10403 		add	r3, r7, #4
 520 04da 4FF48060 		mov	r0, #1024
 521 04de C4F60000 		movt	r0, 18432
 522 04e2 1946     		mov	r1, r3
 523 04e4 FFF7FEFF 		bl	GPIO_Init
 166:../src/interrupt_defs.cpp **** 		int iter = 0;
 524              		.loc 1 166 0
 525 04e8 4FF00003 		mov	r3, #0
 526 04ec 7B61     		str	r3, [r7, #20]
 167:../src/interrupt_defs.cpp **** 
 168:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 527              		.loc 1 168 0
 528 04ee 4FF00003 		mov	r3, #0
 529 04f2 7B61     		str	r3, [r7, #20]
 530 04f4 0DE0     		b	.L34
 531              	.L35:
 169:../src/interrupt_defs.cpp **** 		{
 170:../src/interrupt_defs.cpp **** 			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
 532              		.loc 1 170 0 discriminator 2
 533 04f6 4FF48060 		mov	r0, #1024
 534 04fa C4F60000 		movt	r0, 18432
 535 04fe 4FF00101 		mov	r1, #1
 536 0502 4FF00102 		mov	r2, #1
 537 0506 FFF7FEFF 		bl	GPIO_WriteBit
 168:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 538              		.loc 1 168 0 discriminator 2
 539 050a 7B69     		ldr	r3, [r7, #20]
 540 050c 03F10103 		add	r3, r3, #1
 541 0510 7B61     		str	r3, [r7, #20]
 542              	.L34:
 168:../src/interrupt_defs.cpp **** 		for(iter=0;iter<10;++iter)
 543              		.loc 1 168 0 is_stmt 0 discriminator 1
 544 0512 7B69     		ldr	r3, [r7, #20]
 545 0514 092B     		cmp	r3, #9
 546 0516 CCBF     		ite	gt
 547 0518 0023     		movgt	r3, #0
 548 051a 0123     		movle	r3, #1
 549 051c DBB2     		uxtb	r3, r3
 550 051e 002B     		cmp	r3, #0
 551 0520 E9D1     		bne	.L35
 171:../src/interrupt_defs.cpp **** 		}
 172:../src/interrupt_defs.cpp **** 
 173:../src/interrupt_defs.cpp **** 		GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_RESET);
 552              		.loc 1 173 0 is_stmt 1
 553 0522 4FF48060 		mov	r0, #1024
 554 0526 C4F60000 		movt	r0, 18432
 555 052a 4FF00101 		mov	r1, #1
 556 052e 4FF00002 		mov	r2, #0
 557 0532 FFF7FEFF 		bl	GPIO_WriteBit
 174:../src/interrupt_defs.cpp **** 
 175:../src/interrupt_defs.cpp **** 
 176:../src/interrupt_defs.cpp **** 		g.GPIO_Mode = GPIO_Mode_IN;
 558              		.loc 1 176 0
 559 0536 4FF00003 		mov	r3, #0
 560 053a 3B72     		strb	r3, [r7, #8]
 177:../src/interrupt_defs.cpp **** 		g.GPIO_OType = GPIO_OType_OD;
 561              		.loc 1 177 0
 562 053c 4FF00103 		mov	r3, #1
 563 0540 BB72     		strb	r3, [r7, #10]
 178:../src/interrupt_defs.cpp **** 		g.GPIO_Pin = GPIO_Pin_0;
 564              		.loc 1 178 0
 565 0542 4FF00103 		mov	r3, #1
 566 0546 7B60     		str	r3, [r7, #4]
 179:../src/interrupt_defs.cpp **** 		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 567              		.loc 1 179 0
 568 0548 4FF00003 		mov	r3, #0
 569 054c FB72     		strb	r3, [r7, #11]
 180:../src/interrupt_defs.cpp **** 		g.GPIO_Speed = GPIO_Speed_Level_1;
 570              		.loc 1 180 0
 571 054e 4FF00103 		mov	r3, #1
 572 0552 7B72     		strb	r3, [r7, #9]
 181:../src/interrupt_defs.cpp **** 
 182:../src/interrupt_defs.cpp **** 		GPIO_Init(GPIOB, &g);
 573              		.loc 1 182 0
 574 0554 07F10403 		add	r3, r7, #4
 575 0558 4FF48060 		mov	r0, #1024
 576 055c C4F60000 		movt	r0, 18432
 577 0560 1946     		mov	r1, r3
 578 0562 FFF7FEFF 		bl	GPIO_Init
 183:../src/interrupt_defs.cpp **** 
 184:../src/interrupt_defs.cpp **** 		TIM_SetCounter(TIM2, 0);
 579              		.loc 1 184 0
 580 0566 4FF08040 		mov	r0, #1073741824
 581 056a 4FF00001 		mov	r1, #0
 582 056e FFF7FEFF 		bl	TIM_SetCounter
 185:../src/interrupt_defs.cpp **** 
 186:../src/interrupt_defs.cpp **** 		stage = 0;
 583              		.loc 1 186 0
 584 0572 40F20003 		movw	r3, #:lower16:stage
 585 0576 C0F20003 		movt	r3, #:upper16:stage
 586 057a 4FF00002 		mov	r2, #0
 587 057e 1A60     		str	r2, [r3, #0]
 187:../src/interrupt_defs.cpp **** 
 188:../src/interrupt_defs.cpp **** 		e.EXTI_Line = EXTI_Line1;
 588              		.loc 1 188 0
 589 0580 4FF00103 		mov	r3, #1
 590 0584 FB60     		str	r3, [r7, #12]
 189:../src/interrupt_defs.cpp **** 		e.EXTI_LineCmd = ENABLE;
 591              		.loc 1 189 0
 592 0586 4FF00103 		mov	r3, #1
 593 058a BB74     		strb	r3, [r7, #18]
 190:../src/interrupt_defs.cpp **** 		e.EXTI_Mode = EXTI_Mode_Interrupt;
 594              		.loc 1 190 0
 595 058c 4FF00003 		mov	r3, #0
 596 0590 3B74     		strb	r3, [r7, #16]
 191:../src/interrupt_defs.cpp **** 		e.EXTI_Trigger = EXTI_Trigger_Rising;
 597              		.loc 1 191 0
 598 0592 4FF00803 		mov	r3, #8
 599 0596 7B74     		strb	r3, [r7, #17]
 192:../src/interrupt_defs.cpp **** 
 193:../src/interrupt_defs.cpp **** 		EXTI_Init(&e);
 600              		.loc 1 193 0
 601 0598 07F10C03 		add	r3, r7, #12
 602 059c 1846     		mov	r0, r3
 603 059e FFF7FEFF 		bl	EXTI_Init
 194:../src/interrupt_defs.cpp **** 
 195:../src/interrupt_defs.cpp **** 		NVIC_InitTypeDef nv;
 196:../src/interrupt_defs.cpp **** 
 197:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannel = EXTI1_IRQn;
 604              		.loc 1 197 0
 605 05a2 4FF00703 		mov	r3, #7
 606 05a6 3B70     		strb	r3, [r7, #0]
 198:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelCmd = ENABLE;
 607              		.loc 1 198 0
 608 05a8 4FF00103 		mov	r3, #1
 609 05ac FB70     		strb	r3, [r7, #3]
 199:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelPreemptionPriority = 0;
 610              		.loc 1 199 0
 611 05ae 4FF00003 		mov	r3, #0
 612 05b2 7B70     		strb	r3, [r7, #1]
 200:../src/interrupt_defs.cpp **** 		nv.NVIC_IRQChannelSubPriority = 0;
 613              		.loc 1 200 0
 614 05b4 4FF00003 		mov	r3, #0
 615 05b8 BB70     		strb	r3, [r7, #2]
 201:../src/interrupt_defs.cpp **** 
 202:../src/interrupt_defs.cpp **** 		NVIC_Init(&nv);
 616              		.loc 1 202 0
 617 05ba 3B46     		mov	r3, r7
 618 05bc 1846     		mov	r0, r3
 619 05be FFF7FEFF 		bl	NVIC_Init
 620              	.LBE3:
 203:../src/interrupt_defs.cpp **** 
 204:../src/interrupt_defs.cpp **** 	}
 621              		.loc 1 204 0
 622 05c2 07F11807 		add	r7, r7, #24
 623 05c6 BD46     		mov	sp, r7
 624 05c8 80BD     		pop	{r7, pc}
 625              		.cfi_endproc
 626              	.LFE112:
 628 05ca 00BF     		.align	2
 629              		.global	TIM6_DAC_IRQHandler
 630              		.thumb
 631              		.thumb_func
 633              	TIM6_DAC_IRQHandler:
 634              	.LFB113:
 205:../src/interrupt_defs.cpp **** 	void TIM6_DAC_IRQHandler(void)
 206:../src/interrupt_defs.cpp **** 	{
 635              		.loc 1 206 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 1, uses_anonymous_args = 0
 639 05cc 80B5     		push	{r7, lr}
 640              	.LCFI6:
 641              		.cfi_def_cfa_offset 8
 642              		.cfi_offset 7, -8
 643              		.cfi_offset 14, -4
 644 05ce 00AF     		add	r7, sp, #0
 645              	.LCFI7:
 646              		.cfi_def_cfa_register 7
 207:../src/interrupt_defs.cpp **** 		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 647              		.loc 1 207 0
 648 05d0 4FF48050 		mov	r0, #4096
 649 05d4 C4F20000 		movt	r0, 16384
 650 05d8 4FF00101 		mov	r1, #1
 651 05dc FFF7FEFF 		bl	TIM_ClearITPendingBit
 208:../src/interrupt_defs.cpp **** 		GPIO_Write(GPIOE, led_matrix[led_iter] | led_matrix[7-led_iter]);
 652              		.loc 1 208 0
 653 05e0 40F20003 		movw	r3, #:lower16:led_iter
 654 05e4 C0F20003 		movt	r3, #:upper16:led_iter
 655 05e8 1A68     		ldr	r2, [r3, #0]
 656 05ea 40F20003 		movw	r3, #:lower16:led_matrix
 657 05ee C0F20003 		movt	r3, #:upper16:led_matrix
 658 05f2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 659 05f6 9AB2     		uxth	r2, r3
 660 05f8 40F20003 		movw	r3, #:lower16:led_iter
 661 05fc C0F20003 		movt	r3, #:upper16:led_iter
 662 0600 1B68     		ldr	r3, [r3, #0]
 663 0602 C3F10701 		rsb	r1, r3, #7
 664 0606 40F20003 		movw	r3, #:lower16:led_matrix
 665 060a C0F20003 		movt	r3, #:upper16:led_matrix
 666 060e 53F82130 		ldr	r3, [r3, r1, lsl #2]
 667 0612 9BB2     		uxth	r3, r3
 668 0614 1343     		orrs	r3, r3, r2
 669 0616 9BB2     		uxth	r3, r3
 670 0618 9BB2     		uxth	r3, r3
 671 061a 4FF48050 		mov	r0, #4096
 672 061e C4F60000 		movt	r0, 18432
 673 0622 1946     		mov	r1, r3
 674 0624 FFF7FEFF 		bl	GPIO_Write
 209:../src/interrupt_defs.cpp **** 		++led_iter;
 675              		.loc 1 209 0
 676 0628 40F20003 		movw	r3, #:lower16:led_iter
 677 062c C0F20003 		movt	r3, #:upper16:led_iter
 678 0630 1B68     		ldr	r3, [r3, #0]
 679 0632 03F10102 		add	r2, r3, #1
 680 0636 40F20003 		movw	r3, #:lower16:led_iter
 681 063a C0F20003 		movt	r3, #:upper16:led_iter
 682 063e 1A60     		str	r2, [r3, #0]
 210:../src/interrupt_defs.cpp **** 		if(led_iter > 7)
 683              		.loc 1 210 0
 684 0640 40F20003 		movw	r3, #:lower16:led_iter
 685 0644 C0F20003 		movt	r3, #:upper16:led_iter
 686 0648 1B68     		ldr	r3, [r3, #0]
 687 064a 072B     		cmp	r3, #7
 688 064c D4BF     		ite	le
 689 064e 0023     		movle	r3, #0
 690 0650 0123     		movgt	r3, #1
 691 0652 DBB2     		uxtb	r3, r3
 692 0654 002B     		cmp	r3, #0
 693 0656 06D0     		beq	.L36
 211:../src/interrupt_defs.cpp **** 		{
 212:../src/interrupt_defs.cpp **** 			led_iter = 0;
 694              		.loc 1 212 0
 695 0658 40F20003 		movw	r3, #:lower16:led_iter
 696 065c C0F20003 		movt	r3, #:upper16:led_iter
 697 0660 4FF00002 		mov	r2, #0
 698 0664 1A60     		str	r2, [r3, #0]
 699              	.L36:
 213:../src/interrupt_defs.cpp **** 		}
 214:../src/interrupt_defs.cpp **** 	}
 700              		.loc 1 214 0
 701 0666 80BD     		pop	{r7, pc}
 702              		.cfi_endproc
 703              	.LFE113:
 705              		.align	2
 706              		.global	ADC1_2_IRQHandler
 707              		.thumb
 708              		.thumb_func
 710              	ADC1_2_IRQHandler:
 711              	.LFB114:
 215:../src/interrupt_defs.cpp **** 	void ADC1_2_IRQHandler(void)
 216:../src/interrupt_defs.cpp **** 	{
 712              		.loc 1 216 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 0
 715              		@ frame_needed = 1, uses_anonymous_args = 0
 716 0668 80B5     		push	{r7, lr}
 717              	.LCFI8:
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 066a 00AF     		add	r7, sp, #0
 722              	.LCFI9:
 723              		.cfi_def_cfa_register 7
 217:../src/interrupt_defs.cpp **** 		if(ADC_GetITStatus(ADC1, ADC_IT_EOC) == SET)
 724              		.loc 1 217 0
 725 066c 4FF0A040 		mov	r0, #1342177280
 726 0670 4FF00401 		mov	r1, #4
 727 0674 FFF7FEFF 		bl	ADC_GetITStatus
 728 0678 0346     		mov	r3, r0
 729 067a 012B     		cmp	r3, #1
 730 067c 14BF     		ite	ne
 731 067e 0023     		movne	r3, #0
 732 0680 0123     		moveq	r3, #1
 733 0682 DBB2     		uxtb	r3, r3
 734 0684 002B     		cmp	r3, #0
 735 0686 10D0     		beq	.L38
 218:../src/interrupt_defs.cpp **** 		{
 219:../src/interrupt_defs.cpp **** 			adcval = ADC_GetConversionValue(ADC1);
 736              		.loc 1 219 0
 737 0688 4FF0A040 		mov	r0, #1342177280
 738 068c FFF7FEFF 		bl	ADC_GetConversionValue
 739 0690 0346     		mov	r3, r0
 740 0692 1A46     		mov	r2, r3
 741 0694 40F20003 		movw	r3, #:lower16:adcval
 742 0698 C0F20003 		movt	r3, #:upper16:adcval
 743 069c 1A60     		str	r2, [r3, #0]
 220:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 744              		.loc 1 220 0
 745 069e 4FF0A040 		mov	r0, #1342177280
 746 06a2 4FF00401 		mov	r1, #4
 747 06a6 FFF7FEFF 		bl	ADC_ClearITPendingBit
 748              	.L38:
 221:../src/interrupt_defs.cpp **** 		}
 222:../src/interrupt_defs.cpp **** 	}
 749              		.loc 1 222 0
 750 06aa 80BD     		pop	{r7, pc}
 751              		.cfi_endproc
 752              	.LFE114:
 754              		.align	2
 755              		.global	DMA1_Channel1_IRQHandler
 756              		.thumb
 757              		.thumb_func
 759              	DMA1_Channel1_IRQHandler:
 760              	.LFB115:
 223:../src/interrupt_defs.cpp **** 
 224:../src/interrupt_defs.cpp **** 	void DMA1_Channel1_IRQHandler(void)
 225:../src/interrupt_defs.cpp **** 	{
 761              		.loc 1 225 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765 06ac 80B5     		push	{r7, lr}
 766              	.LCFI10:
 767              		.cfi_def_cfa_offset 8
 768              		.cfi_offset 7, -8
 769              		.cfi_offset 14, -4
 770 06ae 00AF     		add	r7, sp, #0
 771              	.LCFI11:
 772              		.cfi_def_cfa_register 7
 226:../src/interrupt_defs.cpp **** 		DMA_ClearITPendingBit(DMA1_IT_TC1);
 773              		.loc 1 226 0
 774 06b0 4FF00200 		mov	r0, #2
 775 06b4 FFF7FEFF 		bl	DMA_ClearITPendingBit
 227:../src/interrupt_defs.cpp **** 		new_data = 1;
 776              		.loc 1 227 0
 777 06b8 40F20003 		movw	r3, #:lower16:new_data
 778 06bc C0F20003 		movt	r3, #:upper16:new_data
 779 06c0 4FF00102 		mov	r2, #1
 780 06c4 1A60     		str	r2, [r3, #0]
 228:../src/interrupt_defs.cpp **** 	}
 781              		.loc 1 228 0
 782 06c6 80BD     		pop	{r7, pc}
 783              		.cfi_endproc
 784              	.LFE115:
 786              		.align	2
 787              		.global	DMA2_Channel1_IRQHandler
 788              		.thumb
 789              		.thumb_func
 791              	DMA2_Channel1_IRQHandler:
 792              	.LFB116:
 229:../src/interrupt_defs.cpp **** 
 230:../src/interrupt_defs.cpp **** 	void DMA2_Channel1_IRQHandler(void)
 231:../src/interrupt_defs.cpp **** 	{
 793              		.loc 1 231 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 0
 796              		@ frame_needed = 1, uses_anonymous_args = 0
 797 06c8 80B5     		push	{r7, lr}
 798              	.LCFI12:
 799              		.cfi_def_cfa_offset 8
 800              		.cfi_offset 7, -8
 801              		.cfi_offset 14, -4
 802 06ca 00AF     		add	r7, sp, #0
 803              	.LCFI13:
 804              		.cfi_def_cfa_register 7
 232:../src/interrupt_defs.cpp **** 		DMA_ClearITPendingBit(DMA2_IT_TC1);
 805              		.loc 1 232 0
 806 06cc 4FF00200 		mov	r0, #2
 807 06d0 C1F20000 		movt	r0, 4096
 808 06d4 FFF7FEFF 		bl	DMA_ClearITPendingBit
 233:../src/interrupt_defs.cpp **** 		adc2_new_data = 1;
 809              		.loc 1 233 0
 810 06d8 40F20003 		movw	r3, #:lower16:adc2_new_data
 811 06dc C0F20003 		movt	r3, #:upper16:adc2_new_data
 812 06e0 4FF00102 		mov	r2, #1
 813 06e4 1A70     		strb	r2, [r3, #0]
 234:../src/interrupt_defs.cpp **** 	}
 814              		.loc 1 234 0
 815 06e6 80BD     		pop	{r7, pc}
 816              		.cfi_endproc
 817              	.LFE116:
 819              		.align	2
 820              		.global	ADC3_IRQHandler
 821              		.thumb
 822              		.thumb_func
 824              	ADC3_IRQHandler:
 825              	.LFB117:
 235:../src/interrupt_defs.cpp **** 
 236:../src/interrupt_defs.cpp **** 	void ADC3_IRQHandler(void)
 237:../src/interrupt_defs.cpp **** 	{
 826              		.loc 1 237 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 8
 829              		@ frame_needed = 1, uses_anonymous_args = 0
 830 06e8 80B5     		push	{r7, lr}
 831              	.LCFI14:
 832              		.cfi_def_cfa_offset 8
 833              		.cfi_offset 7, -8
 834              		.cfi_offset 14, -4
 835 06ea 82B0     		sub	sp, sp, #8
 836              	.LCFI15:
 837              		.cfi_def_cfa_offset 16
 838 06ec 00AF     		add	r7, sp, #0
 839              	.LCFI16:
 840              		.cfi_def_cfa_register 7
 841              	.LBB4:
 238:../src/interrupt_defs.cpp **** 		int i = 0;
 842              		.loc 1 238 0
 843 06ee 4FF00003 		mov	r3, #0
 844 06f2 7B60     		str	r3, [r7, #4]
 239:../src/interrupt_defs.cpp **** 		int sum = 0;
 845              		.loc 1 239 0
 846 06f4 4FF00003 		mov	r3, #0
 847 06f8 3B60     		str	r3, [r7, #0]
 240:../src/interrupt_defs.cpp **** 		if(ADC_GetITStatus(ADC3, ADC_IT_AWD1) != RESET)
 848              		.loc 1 240 0
 849 06fa 4FF48060 		mov	r0, #1024
 850 06fe C5F20000 		movt	r0, 20480
 851 0702 4FF08001 		mov	r1, #128
 852 0706 FFF7FEFF 		bl	ADC_GetITStatus
 853 070a 0346     		mov	r3, r0
 854 070c 002B     		cmp	r3, #0
 855 070e 0CBF     		ite	eq
 856 0710 0023     		moveq	r3, #0
 857 0712 0123     		movne	r3, #1
 858 0714 DBB2     		uxtb	r3, r3
 859 0716 002B     		cmp	r3, #0
 860 0718 38D0     		beq	.L43
 241:../src/interrupt_defs.cpp **** 		{
 242:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD1);
 861              		.loc 1 242 0
 862 071a 4FF48060 		mov	r0, #1024
 863 071e C5F20000 		movt	r0, 20480
 864 0722 4FF08001 		mov	r1, #128
 865 0726 FFF7FEFF 		bl	ADC_ClearITPendingBit
 243:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 866              		.loc 1 243 0
 867 072a 4FF00003 		mov	r3, #0
 868 072e 7B60     		str	r3, [r7, #4]
 869 0730 0DE0     		b	.L44
 870              	.L45:
 244:../src/interrupt_defs.cpp **** 			{
 245:../src/interrupt_defs.cpp **** 				sum += ADC_GetConversionValue(ADC3);
 871              		.loc 1 245 0 discriminator 2
 872 0732 4FF48060 		mov	r0, #1024
 873 0736 C5F20000 		movt	r0, 20480
 874 073a FFF7FEFF 		bl	ADC_GetConversionValue
 875 073e 0346     		mov	r3, r0
 876 0740 3A68     		ldr	r2, [r7, #0]
 877 0742 D318     		adds	r3, r2, r3
 878 0744 3B60     		str	r3, [r7, #0]
 243:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 879              		.loc 1 243 0 discriminator 2
 880 0746 7B68     		ldr	r3, [r7, #4]
 881 0748 03F10103 		add	r3, r3, #1
 882 074c 7B60     		str	r3, [r7, #4]
 883              	.L44:
 243:../src/interrupt_defs.cpp **** 			for(i=0; i<35;++i)
 884              		.loc 1 243 0 is_stmt 0 discriminator 1
 885 074e 7B68     		ldr	r3, [r7, #4]
 886 0750 222B     		cmp	r3, #34
 887 0752 CCBF     		ite	gt
 888 0754 0023     		movgt	r3, #0
 889 0756 0123     		movle	r3, #1
 890 0758 DBB2     		uxtb	r3, r3
 891 075a 002B     		cmp	r3, #0
 892 075c E9D1     		bne	.L45
 246:../src/interrupt_defs.cpp **** 			}
 247:../src/interrupt_defs.cpp **** 			if((float)sum/float(35) > 2048)
 893              		.loc 1 247 0 is_stmt 1
 894 075e D7ED007A 		flds	s15, [r7, #0]	@ int
 895 0762 B8EEE77A 		fsitos	s14, s15
 896 0766 DFED1B7A 		flds	s15, .L49
 897 076a 87EE277A 		fdivs	s14, s14, s15
 898 076e DFED1A7A 		flds	s15, .L49+4
 899 0772 B4EEE77A 		fcmpes	s14, s15
 900 0776 F1EE10FA 		fmstat
 901 077a 26DD     		ble	.L42
 902              	.L48:
 248:../src/interrupt_defs.cpp **** 			{
 249:../src/interrupt_defs.cpp **** 				adc3_awd1 = 1;
 903              		.loc 1 249 0
 904 077c 40F20003 		movw	r3, #:lower16:adc3_awd1
 905 0780 C0F20003 		movt	r3, #:upper16:adc3_awd1
 906 0784 4FF00102 		mov	r2, #1
 907 0788 1A70     		strb	r2, [r3, #0]
 908 078a 1EE0     		b	.L42
 909              	.L43:
 250:../src/interrupt_defs.cpp **** 			}
 251:../src/interrupt_defs.cpp **** 		}
 252:../src/interrupt_defs.cpp **** 		else if (ADC_GetITStatus(ADC3, ADC_IT_AWD2) != RESET)
 910              		.loc 1 252 0
 911 078c 4FF48060 		mov	r0, #1024
 912 0790 C5F20000 		movt	r0, 20480
 913 0794 4FF48071 		mov	r1, #256
 914 0798 FFF7FEFF 		bl	ADC_GetITStatus
 915 079c 0346     		mov	r3, r0
 916 079e 002B     		cmp	r3, #0
 917 07a0 0CBF     		ite	eq
 918 07a2 0023     		moveq	r3, #0
 919 07a4 0123     		movne	r3, #1
 920 07a6 DBB2     		uxtb	r3, r3
 921 07a8 002B     		cmp	r3, #0
 922 07aa 0ED0     		beq	.L42
 253:../src/interrupt_defs.cpp **** 		{
 254:../src/interrupt_defs.cpp **** 			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD2);
 923              		.loc 1 254 0
 924 07ac 4FF48060 		mov	r0, #1024
 925 07b0 C5F20000 		movt	r0, 20480
 926 07b4 4FF48071 		mov	r1, #256
 927 07b8 FFF7FEFF 		bl	ADC_ClearITPendingBit
 255:../src/interrupt_defs.cpp **** 			adc3_awd2 = 1;
 928              		.loc 1 255 0
 929 07bc 40F20003 		movw	r3, #:lower16:adc3_awd2
 930 07c0 C0F20003 		movt	r3, #:upper16:adc3_awd2
 931 07c4 4FF00102 		mov	r2, #1
 932 07c8 1A70     		strb	r2, [r3, #0]
 933              	.L42:
 934              	.LBE4:
 256:../src/interrupt_defs.cpp **** 		}
 257:../src/interrupt_defs.cpp **** 	}
 935              		.loc 1 257 0
 936 07ca 07F10807 		add	r7, r7, #8
 937 07ce BD46     		mov	sp, r7
 938 07d0 80BD     		pop	{r7, pc}
 939              	.L50:
 940 07d2 00BF     		.align	2
 941              	.L49:
 942 07d4 00000C42 		.word	1108082688
 943 07d8 00000045 		.word	1157627904
 944              		.cfi_endproc
 945              	.LFE117:
 947              		.align	2
 948              		.global	EXTI1_IRQHandler
 949              		.thumb
 950              		.thumb_func
 952              	EXTI1_IRQHandler:
 953              	.LFB118:
 258:../src/interrupt_defs.cpp **** 
 259:../src/interrupt_defs.cpp **** 	void EXTI1_IRQHandler(void)
 260:../src/interrupt_defs.cpp **** 	{
 954              		.loc 1 260 0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 16
 957              		@ frame_needed = 1, uses_anonymous_args = 0
 958 07dc 80B5     		push	{r7, lr}
 959              	.LCFI17:
 960              		.cfi_def_cfa_offset 8
 961              		.cfi_offset 7, -8
 962              		.cfi_offset 14, -4
 963 07de 84B0     		sub	sp, sp, #16
 964              	.LCFI18:
 965              		.cfi_def_cfa_offset 24
 966 07e0 00AF     		add	r7, sp, #0
 967              	.LCFI19:
 968              		.cfi_def_cfa_register 7
 969              	.LBB5:
 261:../src/interrupt_defs.cpp **** 		EXTI_ClearITPendingBit(EXTI_Line1);
 970              		.loc 1 261 0
 971 07e2 4FF00100 		mov	r0, #1
 972 07e6 FFF7FEFF 		bl	EXTI_ClearITPendingBit
 973              	.LBB6:
 262:../src/interrupt_defs.cpp **** 		if(stage == 0)
 974              		.loc 1 262 0
 975 07ea 40F20003 		movw	r3, #:lower16:stage
 976 07ee C0F20003 		movt	r3, #:upper16:stage
 977 07f2 1B68     		ldr	r3, [r3, #0]
 978 07f4 002B     		cmp	r3, #0
 979 07f6 24D1     		bne	.L52
 980              	.LBB7:
 263:../src/interrupt_defs.cpp **** 		{
 264:../src/interrupt_defs.cpp **** 			TIM_SetCounter(TIM2, 0);
 981              		.loc 1 264 0
 982 07f8 4FF08040 		mov	r0, #1073741824
 983 07fc 4FF00001 		mov	r1, #0
 984 0800 FFF7FEFF 		bl	TIM_SetCounter
 265:../src/interrupt_defs.cpp **** 			TIM_Cmd(TIM2, ENABLE);
 985              		.loc 1 265 0
 986 0804 4FF08040 		mov	r0, #1073741824
 987 0808 4FF00101 		mov	r1, #1
 988 080c FFF7FEFF 		bl	TIM_Cmd
 266:../src/interrupt_defs.cpp **** 
 267:../src/interrupt_defs.cpp **** 			EXTI_InitTypeDef e;
 268:../src/interrupt_defs.cpp **** 
 269:../src/interrupt_defs.cpp **** 			e.EXTI_Line = EXTI_Line1;
 989              		.loc 1 269 0
 990 0810 4FF00103 		mov	r3, #1
 991 0814 BB60     		str	r3, [r7, #8]
 270:../src/interrupt_defs.cpp **** 			e.EXTI_LineCmd = ENABLE;
 992              		.loc 1 270 0
 993 0816 4FF00103 		mov	r3, #1
 994 081a BB73     		strb	r3, [r7, #14]
 271:../src/interrupt_defs.cpp **** 			e.EXTI_Mode = EXTI_Mode_Interrupt;
 995              		.loc 1 271 0
 996 081c 4FF00003 		mov	r3, #0
 997 0820 3B73     		strb	r3, [r7, #12]
 272:../src/interrupt_defs.cpp **** 			e.EXTI_Trigger = EXTI_Trigger_Falling; //EXTI_Trigger_Rising;
 998              		.loc 1 272 0
 999 0822 4FF00C03 		mov	r3, #12
 1000 0826 7B73     		strb	r3, [r7, #13]
 273:../src/interrupt_defs.cpp **** 
 274:../src/interrupt_defs.cpp **** 			EXTI_Init(&e);
 1001              		.loc 1 274 0
 1002 0828 07F10803 		add	r3, r7, #8
 1003 082c 1846     		mov	r0, r3
 1004 082e FFF7FEFF 		bl	EXTI_Init
 275:../src/interrupt_defs.cpp **** 
 276:../src/interrupt_defs.cpp **** 			stage = 1;
 1005              		.loc 1 276 0
 1006 0832 40F20003 		movw	r3, #:lower16:stage
 1007 0836 C0F20003 		movt	r3, #:upper16:stage
 1008 083a 4FF00102 		mov	r2, #1
 1009 083e 1A60     		str	r2, [r3, #0]
 1010 0840 2FE0     		b	.L51
 1011              	.L52:
 1012              	.LBE7:
 1013              	.LBB8:
 1014              	.LBB9:
 277:../src/interrupt_defs.cpp **** 			return;
 278:../src/interrupt_defs.cpp **** 		}
 279:../src/interrupt_defs.cpp **** 		else if(stage == 1)
 1015              		.loc 1 279 0
 1016 0842 40F20003 		movw	r3, #:lower16:stage
 1017 0846 C0F20003 		movt	r3, #:upper16:stage
 1018 084a 1B68     		ldr	r3, [r3, #0]
 1019 084c 012B     		cmp	r3, #1
 1020 084e 28D1     		bne	.L51
 1021              	.LBB10:
 280:../src/interrupt_defs.cpp **** 		{
 281:../src/interrupt_defs.cpp **** 			count = TIM_GetCounter(TIM2);
 1022              		.loc 1 281 0
 1023 0850 4FF08040 		mov	r0, #1073741824
 1024 0854 FFF7FEFF 		bl	TIM_GetCounter
 1025 0858 0346     		mov	r3, r0
 1026 085a 1A46     		mov	r2, r3
 1027 085c 40F20003 		movw	r3, #:lower16:count
 1028 0860 C0F20003 		movt	r3, #:upper16:count
 1029 0864 1A60     		str	r2, [r3, #0]
 282:../src/interrupt_defs.cpp **** 			TIM_Cmd(TIM2, DISABLE);
 1030              		.loc 1 282 0
 1031 0866 4FF08040 		mov	r0, #1073741824
 1032 086a 4FF00001 		mov	r1, #0
 1033 086e FFF7FEFF 		bl	TIM_Cmd
 283:../src/interrupt_defs.cpp **** 
 284:../src/interrupt_defs.cpp **** 			NVIC_InitTypeDef nv;
 285:../src/interrupt_defs.cpp **** 
 286:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannel = EXTI1_IRQn;
 1034              		.loc 1 286 0
 1035 0872 4FF00703 		mov	r3, #7
 1036 0876 3B71     		strb	r3, [r7, #4]
 287:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelCmd = DISABLE;
 1037              		.loc 1 287 0
 1038 0878 4FF00003 		mov	r3, #0
 1039 087c FB71     		strb	r3, [r7, #7]
 288:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelPreemptionPriority = 0;
 1040              		.loc 1 288 0
 1041 087e 4FF00003 		mov	r3, #0
 1042 0882 7B71     		strb	r3, [r7, #5]
 289:../src/interrupt_defs.cpp **** 			nv.NVIC_IRQChannelSubPriority = 0;
 1043              		.loc 1 289 0
 1044 0884 4FF00003 		mov	r3, #0
 1045 0888 BB71     		strb	r3, [r7, #6]
 290:../src/interrupt_defs.cpp **** 
 291:../src/interrupt_defs.cpp **** 			NVIC_Init(&nv);
 1046              		.loc 1 291 0
 1047 088a 07F10403 		add	r3, r7, #4
 1048 088e 1846     		mov	r0, r3
 1049 0890 FFF7FEFF 		bl	NVIC_Init
 292:../src/interrupt_defs.cpp **** 
 293:../src/interrupt_defs.cpp **** 			stage = 0;
 1050              		.loc 1 293 0
 1051 0894 40F20003 		movw	r3, #:lower16:stage
 1052 0898 C0F20003 		movt	r3, #:upper16:stage
 1053 089c 4FF00002 		mov	r2, #0
 1054 08a0 1A60     		str	r2, [r3, #0]
 1055              	.L51:
 1056              	.LBE10:
 1057              	.LBE9:
 1058              	.LBE8:
 1059              	.LBE6:
 1060              	.LBE5:
 294:../src/interrupt_defs.cpp **** 			return;
 295:../src/interrupt_defs.cpp **** 		}
 296:../src/interrupt_defs.cpp **** 	}
 1061              		.loc 1 296 0
 1062 08a2 07F11007 		add	r7, r7, #16
 1063 08a6 BD46     		mov	sp, r7
 1064 08a8 80BD     		pop	{r7, pc}
 1065              		.cfi_endproc
 1066              	.LFE118:
 1068              	.Letext0:
 1069              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 1070              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 1071              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_exti.h"
 1072              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 1073              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 1074              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 1075              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 interrupt_defs.cpp
     /tmp/cc6bYVtg.s:24     .text:00000000 $t
     /tmp/cc6bYVtg.s:29     .text:00000000 TIM7_IRQHandler
     /tmp/cc6bYVtg.s:431    .text:00000438 $d
     /tmp/cc6bYVtg.s:443    .text:00000460 $t
     /tmp/cc6bYVtg.s:464    .text:00000480 TIM1_TRG_COM_TIM17_IRQHandler
     /tmp/cc6bYVtg.s:633    .text:000005cc TIM6_DAC_IRQHandler
     /tmp/cc6bYVtg.s:710    .text:00000668 ADC1_2_IRQHandler
     /tmp/cc6bYVtg.s:759    .text:000006ac DMA1_Channel1_IRQHandler
     /tmp/cc6bYVtg.s:791    .text:000006c8 DMA2_Channel1_IRQHandler
     /tmp/cc6bYVtg.s:824    .text:000006e8 ADC3_IRQHandler
     /tmp/cc6bYVtg.s:942    .text:000007d4 $d
     /tmp/cc6bYVtg.s:947    .text:000007dc $t
     /tmp/cc6bYVtg.s:952    .text:000007dc EXTI1_IRQHandler
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.50a79f075d1434c9a8bd8ee500f78677
                           .group:00000000 wm4.common_headers.h.9.669975762de5793e6d2436455cef4d0e
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dcmplt
TIM_ClearITPendingBit
left_enc
right_enc
TIM_GetCounter
TIM_SetCounter
_Z11pwm2_outputf
_Z11pwm1_outputf
EXTI_Init
GPIO_Init
GPIO_WriteBit
stage
NVIC_Init
led_iter
led_matrix
GPIO_Write
ADC_GetITStatus
ADC_GetConversionValue
adcval
ADC_ClearITPendingBit
DMA_ClearITPendingBit
new_data
adc2_new_data
adc3_awd1
adc3_awd2
EXTI_ClearITPendingBit
TIM_Cmd
count
