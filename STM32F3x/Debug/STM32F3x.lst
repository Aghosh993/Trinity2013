
STM32F3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fce0  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  0800fe68  0800fe68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800fe70  0800fe70  00017e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800fe78  0800fe78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000904  20000000  0800fe80  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000088  20000904  20000904  00018904  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  2000098c  2000098c  00018904  2**0
                  ALLOC
  8 .ARM.attributes 00000032  00000000  00000000  00018904  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b893  00000000  00000000  00018936  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000187a  00000000  00000000  000241c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052c2  00000000  00000000  00025a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000228  00000000  00000000  0002ad08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00011916  00000000  00000000  0002af30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000051f9  00000000  00000000  0003c846  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0005d1b1  00000000  00000000  00041a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000070  00000000  00000000  0009ebf0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000039e8  00000000  00000000  0009ec60  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000020  00000000  00000000  000a2648  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b110      	cbz	r0, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2101      	movs	r1, #1
 800019c:	7021      	strb	r1, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000904 	.word	0x20000904
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fe50 	.word	0x0800fe50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6801      	ldr	r1, [r0, #0]
 80001be:	b111      	cbz	r1, 80001c6 <frame_dummy+0x1a>
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b102      	cbz	r2, 80001c6 <frame_dummy+0x1a>
 80001c4:	4790      	blx	r2
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800fe50 	.word	0x0800fe50
 80001d0:	20000908 	.word	0x20000908
 80001d4:	20000904 	.word	0x20000904
 80001d8:	00000000 	.word	0x00000000

080001dc <_Z10blink_ledsv>:
 */

#include "debug.h"

void blink_leds(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	int foo = 0;
 80001e2:	f04f 0300 	mov.w	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
	for(foo = 0; foo < 160000; ++foo){
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e00d      	b.n	800020c <_Z10blink_ledsv+0x30>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
 80001f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80001f4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80001f8:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80001fc:	f04f 0201 	mov.w	r2, #1
 8000200:	f003 f9d6 	bl	80035b0 <GPIO_WriteBit>
#include "debug.h"

void blink_leds(void)
{
	int foo = 0;
	for(foo = 0; foo < 160000; ++foo){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0301 	add.w	r3, r3, #1
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687a      	ldr	r2, [r7, #4]
 800020e:	f247 03ff 	movw	r3, #28927	; 0x70ff
 8000212:	f2c0 0302 	movt	r3, #2
 8000216:	429a      	cmp	r2, r3
 8000218:	bfcc      	ite	gt
 800021a:	2300      	movgt	r3, #0
 800021c:	2301      	movle	r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1e5      	bne.n	80001f0 <_Z10blink_ledsv+0x14>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
	}
	for(foo = 0; foo < 160000; ++foo){
 8000224:	f04f 0300 	mov.w	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e00d      	b.n	8000248 <_Z10blink_ledsv+0x6c>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_RESET);
 800022c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000230:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000234:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000238:	f04f 0200 	mov.w	r2, #0
 800023c:	f003 f9b8 	bl	80035b0 <GPIO_WriteBit>
{
	int foo = 0;
	for(foo = 0; foo < 160000; ++foo){
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
	}
	for(foo = 0; foo < 160000; ++foo){
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f103 0301 	add.w	r3, r3, #1
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	f247 03ff 	movw	r3, #28927	; 0x70ff
 800024e:	f2c0 0302 	movt	r3, #2
 8000252:	429a      	cmp	r2, r3
 8000254:	bfcc      	ite	gt
 8000256:	2300      	movgt	r3, #0
 8000258:	2301      	movle	r3, #1
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1e5      	bne.n	800022c <_Z10blink_ledsv+0x50>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_RESET);
	}
}
 8000260:	f107 0708 	add.w	r7, r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <_Z10UART1_initv>:

void UART1_init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef a;

	USART_InitTypeDef u1;

	u1.USART_BaudRate = 115200;
 800026e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000272:	603b      	str	r3, [r7, #0]
	u1.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000274:	f04f 0300 	mov.w	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
	u1.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800027a:	f04f 030c 	mov.w	r3, #12
 800027e:	613b      	str	r3, [r7, #16]
	u1.USART_Parity = USART_Parity_No;
 8000280:	f04f 0300 	mov.w	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
	u1.USART_StopBits = USART_StopBits_1;
 8000286:	f04f 0300 	mov.w	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
	u1.USART_WordLength = USART_WordLength_8b;
 800028c:	f04f 0300 	mov.w	r3, #0
 8000290:	607b      	str	r3, [r7, #4]

	a.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 8000292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000296:	61bb      	str	r3, [r7, #24]
	a.GPIO_Mode = GPIO_Mode_AF;
 8000298:	f04f 0302 	mov.w	r3, #2
 800029c:	773b      	strb	r3, [r7, #28]
	a.GPIO_OType = GPIO_OType_PP;
 800029e:	f04f 0300 	mov.w	r3, #0
 80002a2:	77bb      	strb	r3, [r7, #30]
	a.GPIO_Speed = GPIO_Speed_50MHz;
 80002a4:	f04f 0303 	mov.w	r3, #3
 80002a8:	777b      	strb	r3, [r7, #29]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002aa:	f04f 0300 	mov.w	r3, #0
 80002ae:	77fb      	strb	r3, [r7, #31]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80002b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002b4:	f04f 0101 	mov.w	r1, #1
 80002b8:	f004 f972 	bl	80045a0 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80002bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80002c0:	f04f 0101 	mov.w	r1, #1
 80002c4:	f004 f942 	bl	800454c <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_7);
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f04f 0109 	mov.w	r1, #9
 80002d0:	f04f 0207 	mov.w	r2, #7
 80002d4:	f003 f992 	bl	80035fc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_7);
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f04f 010a 	mov.w	r1, #10
 80002e0:	f04f 0207 	mov.w	r2, #7
 80002e4:	f003 f98a 	bl	80035fc <GPIO_PinAFConfig>

	GPIO_Init(GPIOA, &a);
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	4619      	mov	r1, r3
 80002f2:	f002 fffd 	bl	80032f0 <GPIO_Init>

	USART_Init(USART1, &u1);
 80002f6:	463b      	mov	r3, r7
 80002f8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80002fc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000300:	4619      	mov	r1, r3
 8000302:	f007 f957 	bl	80075b4 <USART_Init>
	USART_Cmd(USART1, ENABLE);
 8000306:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800030a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800030e:	f04f 0101 	mov.w	r1, #1
 8000312:	f007 fa79 	bl	8007808 <USART_Cmd>

	/* Wait until Receive enable acknowledge flag is set */
	while(USART_GetFlagStatus(USART1, USART_FLAG_REACK) == RESET)
 8000316:	bf00      	nop
 8000318:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800031c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000320:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000324:	f007 feb4 	bl	8008090 <USART_GetFlagStatus>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	bf14      	ite	ne
 800032e:	2300      	movne	r3, #0
 8000330:	2301      	moveq	r3, #1
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1ef      	bne.n	8000318 <_Z10UART1_initv+0xb0>
	{}

	/* Wait until Transmit enable acknowledge flag is set */
	while(USART_GetFlagStatus(USART1, USART_FLAG_TEACK) == RESET)
 8000338:	bf00      	nop
 800033a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800033e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000346:	f007 fea3 	bl	8008090 <USART_GetFlagStatus>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf14      	ite	ne
 8000350:	2300      	movne	r3, #0
 8000352:	2301      	moveq	r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ef      	bne.n	800033a <_Z10UART1_initv+0xd2>
	{}
}
 800035a:	f107 0720 	add.w	r7, r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop

08000364 <_Z19LED_MATRIX_ISR_initv>:
 * Priority: 6 (LOW)
 */


void LED_MATRIX_ISR_init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
	// GPIO Init:

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 800036a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800036e:	f04f 0101 	mov.w	r1, #1
 8000372:	f004 f8eb 	bl	800454c <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef a;

	a.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8000376:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800037a:	613b      	str	r3, [r7, #16]
	a.GPIO_Mode = GPIO_Mode_OUT;
 800037c:	f04f 0301 	mov.w	r3, #1
 8000380:	753b      	strb	r3, [r7, #20]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000382:	f04f 0300 	mov.w	r3, #0
 8000386:	75fb      	strb	r3, [r7, #23]
	a.GPIO_OType = GPIO_OType_PP;
 8000388:	f04f 0300 	mov.w	r3, #0
 800038c:	75bb      	strb	r3, [r7, #22]
	a.GPIO_Speed = GPIO_Speed_Level_2;
 800038e:	f04f 0302 	mov.w	r3, #2
 8000392:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOE, &a);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800039c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80003a0:	4619      	mov	r1, r3
 80003a2:	f002 ffa5 	bl	80032f0 <GPIO_Init>

	NVIC_InitTypeDef nv;
	TIM_TimeBaseInitTypeDef TIM6_init;

	nv.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80003a6:	f04f 0336 	mov.w	r3, #54	; 0x36
 80003aa:	733b      	strb	r3, [r7, #12]
	nv.NVIC_IRQChannelPreemptionPriority = 6; // Low-priority interrupt since this is just eye-candy...
 80003ac:	f04f 0306 	mov.w	r3, #6
 80003b0:	737b      	strb	r3, [r7, #13]
	nv.NVIC_IRQChannelSubPriority = 0;
 80003b2:	f04f 0300 	mov.w	r3, #0
 80003b6:	73bb      	strb	r3, [r7, #14]
	nv.NVIC_IRQChannelCmd = ENABLE;
 80003b8:	f04f 0301 	mov.w	r3, #1
 80003bc:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&nv);
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	4618      	mov	r0, r3
 80003c4:	f003 f982 	bl	80036cc <NVIC_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE); //Enable TIM4 on APB1
 80003c8:	f04f 0010 	mov.w	r0, #16
 80003cc:	f04f 0101 	mov.w	r1, #1
 80003d0:	f004 f910 	bl	80045f4 <RCC_APB1PeriphClockCmd>
	 * 	  Prescaler -> PRESCALER
	 * 	  Period -> ARR
	 * 	  RepetitionCounter -> REPCOUNTER
	 */

	TIM6_init.TIM_Period = (10*DT_LED_MATRIX)-1;
 80003d4:	f240 3383 	movw	r3, #899	; 0x383
 80003d8:	607b      	str	r3, [r7, #4]
	TIM6_init.TIM_Prescaler = 7199;
 80003da:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80003de:	803b      	strh	r3, [r7, #0]
	TIM6_init.TIM_RepetitionCounter = 0;
 80003e0:	f04f 0300 	mov.w	r3, #0
 80003e4:	72bb      	strb	r3, [r7, #10]
	TIM6_init.TIM_ClockDivision = 0;
 80003e6:	f04f 0300 	mov.w	r3, #0
 80003ea:	813b      	strh	r3, [r7, #8]
	TIM6_init.TIM_CounterMode = TIM_CounterMode_Up;
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	807b      	strh	r3, [r7, #2]

	TIM_TimeBaseInit(TIM6, &TIM6_init);
 80003f2:	463b      	mov	r3, r7
 80003f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80003f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80003fc:	4619      	mov	r1, r3
 80003fe:	f005 f85f 	bl	80054c0 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 8000402:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000406:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800040a:	f04f 0101 	mov.w	r1, #1
 800040e:	f04f 0201 	mov.w	r2, #1
 8000412:	f006 fcaf 	bl	8006d74 <TIM_ITConfig>
	TIM_Cmd(TIM6, ENABLE);
 8000416:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800041a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800041e:	f04f 0101 	mov.w	r1, #1
 8000422:	f005 fa11 	bl	8005848 <TIM_Cmd>
}
 8000426:	f107 0718 	add.w	r7, r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop

08000430 <_Z17TIM8_init_encoderv>:
 *      Author: root
 */
#include "encoder.h"

void TIM8_init_encoder(void)	// PC6, PC7 -> TIM8 CH1 and CH2 mappings:
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000436:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800043a:	f04f 0101 	mov.w	r1, #1
 800043e:	f004 f885 	bl	800454c <RCC_AHBPeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000442:	f04f 03c0 	mov.w	r3, #192	; 0xc0
 8000446:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000448:	f04f 0302 	mov.w	r3, #2
 800044c:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800044e:	f04f 0300 	mov.w	r3, #0
 8000452:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000454:	f04f 0303 	mov.w	r3, #3
 8000458:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800045a:	f04f 0301 	mov.w	r3, #1
 800045e:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000460:	f107 0304 	add.w	r3, r7, #4
 8000464:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000468:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800046c:	4619      	mov	r1, r3
 800046e:	f002 ff3f 	bl	80032f0 <GPIO_Init>

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_4);
 8000472:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000476:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800047a:	f04f 0106 	mov.w	r1, #6
 800047e:	f04f 0204 	mov.w	r2, #4
 8000482:	f003 f8bb 	bl	80035fc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_4);
 8000486:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800048a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800048e:	f04f 0107 	mov.w	r1, #7
 8000492:	f04f 0204 	mov.w	r2, #4
 8000496:	f003 f8b1 	bl	80035fc <GPIO_PinAFConfig>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 800049a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800049e:	f04f 0101 	mov.w	r1, #1
 80004a2:	f004 f87d 	bl	80045a0 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 80004a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004aa:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80004ac:	f04f 0300 	mov.w	r3, #0
 80004b0:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80004b2:	f04f 0300 	mov.w	r3, #0
 80004b6:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80004b8:	f04f 0300 	mov.w	r3, #0
 80004bc:	81fb      	strh	r3, [r7, #14]
	TIM_EncoderInterfaceConfig(TIM8,TIM_EncoderMode_TI12,TIM_ICPolarity_Falling,
	TIM_ICPolarity_Falling);
 80004be:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 80004c2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80004c6:	f04f 0103 	mov.w	r1, #3
 80004ca:	f04f 0202 	mov.w	r2, #2
 80004ce:	f04f 0302 	mov.w	r3, #2
 80004d2:	f006 fe6f 	bl	80071b4 <TIM_EncoderInterfaceConfig>
	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 80004de:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80004e2:	4619      	mov	r1, r3
 80004e4:	f004 ffec 	bl	80054c0 <TIM_TimeBaseInit>
	TIM_Cmd(TIM8, ENABLE);
 80004e8:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 80004ec:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80004f0:	f04f 0101 	mov.w	r1, #1
 80004f4:	f005 f9a8 	bl	8005848 <TIM_Cmd>

	TIM_SetCounter(TIM8, 0);
 80004f8:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 80004fc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	f005 f8b2 	bl	800566c <TIM_SetCounter>
}
 8000508:	f107 0718 	add.w	r7, r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <_Z17TIM2_init_encoderv>:

void TIM2_init_encoder(void) // PA0, PA1 -> TIM2 CH1 and CH2 mappings:
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000516:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800051a:	f04f 0101 	mov.w	r1, #1
 800051e:	f004 f815 	bl	800454c <RCC_AHBPeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8000522:	f04f 0303 	mov.w	r3, #3
 8000526:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000528:	f04f 0302 	mov.w	r3, #2
 800052c:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800052e:	f04f 0300 	mov.w	r3, #0
 8000532:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000534:	f04f 0303 	mov.w	r3, #3
 8000538:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800053a:	f04f 0301 	mov.w	r3, #1
 800053e:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000540:	f107 0304 	add.w	r3, r7, #4
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	4619      	mov	r1, r3
 800054a:	f002 fed1 	bl	80032f0 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_1);
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f04f 0100 	mov.w	r1, #0
 8000556:	f04f 0201 	mov.w	r2, #1
 800055a:	f003 f84f 	bl	80035fc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_1);
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f04f 0101 	mov.w	r1, #1
 8000566:	f04f 0201 	mov.w	r2, #1
 800056a:	f003 f847 	bl	80035fc <GPIO_PinAFConfig>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800056e:	f04f 0001 	mov.w	r0, #1
 8000572:	f04f 0101 	mov.w	r1, #1
 8000576:	f004 f83d 	bl	80045f4 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8000580:	f04f 0300 	mov.w	r3, #0
 8000584:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800058c:	f04f 0300 	mov.w	r3, #0
 8000590:	81fb      	strh	r3, [r7, #14]
	TIM_EncoderInterfaceConfig(TIM2,TIM_EncoderMode_TI12,TIM_ICPolarity_Falling,
	TIM_ICPolarity_Falling);
 8000592:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000596:	f04f 0103 	mov.w	r1, #3
 800059a:	f04f 0202 	mov.w	r2, #2
 800059e:	f04f 0302 	mov.w	r3, #2
 80005a2:	f006 fe07 	bl	80071b4 <TIM_EncoderInterfaceConfig>
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005ae:	4619      	mov	r1, r3
 80005b0:	f004 ff86 	bl	80054c0 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 80005b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005b8:	f04f 0101 	mov.w	r1, #1
 80005bc:	f005 f944 	bl	8005848 <TIM_Cmd>

	TIM_SetCounter(TIM2, 0);
 80005c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005c4:	f04f 0100 	mov.w	r1, #0
 80005c8:	f005 f850 	bl	800566c <TIM_SetCounter>
}
 80005cc:	f107 0718 	add.w	r7, r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_Z23encoder_update_ISR_initv>:

// Initializes the ISR that updates the raw state (position, velocity, acceleration) of each encoder.
// Interrupt Priority: NEXT-HIGHEST (1)

void encoder_update_ISR_init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef nv;
	TIM_TimeBaseInitTypeDef TIM7_init;

	nv.NVIC_IRQChannel = TIM7_IRQn;
 80005da:	f04f 0337 	mov.w	r3, #55	; 0x37
 80005de:	733b      	strb	r3, [r7, #12]
	nv.NVIC_IRQChannelPreemptionPriority = 1;
 80005e0:	f04f 0301 	mov.w	r3, #1
 80005e4:	737b      	strb	r3, [r7, #13]
	nv.NVIC_IRQChannelSubPriority = 0;
 80005e6:	f04f 0300 	mov.w	r3, #0
 80005ea:	73bb      	strb	r3, [r7, #14]
	nv.NVIC_IRQChannelCmd = ENABLE;
 80005ec:	f04f 0301 	mov.w	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&nv);
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f868 	bl	80036cc <NVIC_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE); //TIM2 on APB1
 80005fc:	f04f 0020 	mov.w	r0, #32
 8000600:	f04f 0101 	mov.w	r1, #1
 8000604:	f003 fff6 	bl	80045f4 <RCC_APB1PeriphClockCmd>
	 * 	  Prescaler -> PRESCALER
	 * 	  Period -> ARR
	 * 	  RepetitionCounter -> REPCOUNTER
	 */

	TIM7_init.TIM_Period = (10*DT_ENCODER)-1;
 8000608:	f240 53db 	movw	r3, #1499	; 0x5db
 800060c:	607b      	str	r3, [r7, #4]
	TIM7_init.TIM_Prescaler = 7199;
 800060e:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8000612:	803b      	strh	r3, [r7, #0]
	TIM7_init.TIM_RepetitionCounter = 0;
 8000614:	f04f 0300 	mov.w	r3, #0
 8000618:	72bb      	strb	r3, [r7, #10]
	TIM7_init.TIM_ClockDivision = 0;
 800061a:	f04f 0300 	mov.w	r3, #0
 800061e:	813b      	strh	r3, [r7, #8]
	TIM7_init.TIM_CounterMode = TIM_CounterMode_Up;
 8000620:	f04f 0300 	mov.w	r3, #0
 8000624:	807b      	strh	r3, [r7, #2]

	TIM_TimeBaseInit(TIM7, &TIM7_init);
 8000626:	463b      	mov	r3, r7
 8000628:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800062c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000630:	4619      	mov	r1, r3
 8000632:	f004 ff45 	bl	80054c0 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM7, TIM_IT_Update, ENABLE);
 8000636:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800063a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800063e:	f04f 0101 	mov.w	r1, #1
 8000642:	f04f 0201 	mov.w	r2, #1
 8000646:	f006 fb95 	bl	8006d74 <TIM_ITConfig>
	TIM_Cmd(TIM7, ENABLE);
 800064a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800064e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000652:	f04f 0101 	mov.w	r1, #1
 8000656:	f005 f8f7 	bl	8005848 <TIM_Cmd>

}
 800065a:	f107 0710 	add.w	r7, r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop

08000664 <_Z19init_encoder_structP12encoderState>:
void init_encoder_struct(encoderState* enc)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	enc->position = 0;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f04f 0200 	mov.w	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
	enc->speed = 0;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
	enc->acceleration = 0;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f04f 0200 	mov.w	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
}
 8000684:	f107 070c 	add.w	r7, r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <TIM7_IRQHandler>:
extern volatile int led_matrix[8];
extern volatile int led_iter;

	void TIM7_IRQHandler(void) // ISR that performs encoder state update:
										// Runs every DT milliseconds
	{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8000696:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800069a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800069e:	f04f 0101 	mov.w	r1, #1
 80006a2:	f006 fbf3 	bl	8006e8c <TIM_ClearITPendingBit>

		encoderState left_temp, right_temp;

		left_temp.position = left_enc.position;
 80006a6:	f640 1324 	movw	r3, #2340	; 0x924
 80006aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	60fb      	str	r3, [r7, #12]
		left_temp.speed = left_enc.speed;
 80006b2:	f640 1324 	movw	r3, #2340	; 0x924
 80006b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	613b      	str	r3, [r7, #16]
		left_temp.acceleration = left_enc.acceleration;
 80006be:	f640 1324 	movw	r3, #2340	; 0x924
 80006c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	617b      	str	r3, [r7, #20]

		right_temp.position = right_enc.position;
 80006ca:	f640 1330 	movw	r3, #2352	; 0x930
 80006ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	603b      	str	r3, [r7, #0]
		right_temp.speed = right_enc.speed;
 80006d6:	f640 1330 	movw	r3, #2352	; 0x930
 80006da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	607b      	str	r3, [r7, #4]
		right_temp.acceleration = right_enc.acceleration;
 80006e2:	f640 1330 	movw	r3, #2352	; 0x930
 80006e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	60bb      	str	r3, [r7, #8]

		left_enc.position = TIM_GetCounter(TIM2);
 80006ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006f2:	f004 ffd7 	bl	80056a4 <TIM_GetCounter>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	f640 1324 	movw	r3, #2340	; 0x924
 80006fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000702:	601a      	str	r2, [r3, #0]
		left_enc.speed = (float)((left_enc.position - left_temp.position)*1000)/(float)DT_ENCODER; // Since DT is in milliseconds...
 8000704:	f640 1324 	movw	r3, #2340	; 0x924
 8000708:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000716:	fb02 f303 	mul.w	r3, r2, r3
 800071a:	ee07 3a90 	vmov	s15, r3
 800071e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000722:	eddf 7a37 	vldr	s15, [pc, #220]	; 8000800 <TIM7_IRQHandler+0x170>
 8000726:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800072a:	f640 1324 	movw	r3, #2340	; 0x924
 800072e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000732:	edc3 7a01 	vstr	s15, [r3, #4]
		left_enc.acceleration = (float)((left_enc.speed - left_temp.speed)*1000)/(float)DT_ENCODER;
 8000736:	f640 1324 	movw	r3, #2340	; 0x924
 800073a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800073e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000742:	edd7 7a04 	vldr	s15, [r7, #16]
 8000746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800074a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8000804 <TIM7_IRQHandler+0x174>
 800074e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000752:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8000800 <TIM7_IRQHandler+0x170>
 8000756:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800075a:	f640 1324 	movw	r3, #2340	; 0x924
 800075e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000762:	edc3 7a02 	vstr	s15, [r3, #8]

		right_enc.position = right_temp.position + (int16_t)(TIM_GetCounter(TIM8));
 8000766:	683c      	ldr	r4, [r7, #0]
 8000768:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800076c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000770:	f004 ff98 	bl	80056a4 <TIM_GetCounter>
 8000774:	4603      	mov	r3, r0
 8000776:	b29b      	uxth	r3, r3
 8000778:	b21b      	sxth	r3, r3
 800077a:	18e2      	adds	r2, r4, r3
 800077c:	f640 1330 	movw	r3, #2352	; 0x930
 8000780:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000784:	601a      	str	r2, [r3, #0]
		TIM_SetCounter(TIM8, 0); // To get around the stupid 16-bit counter limitation present on all timers except timer 2
 8000786:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800078a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800078e:	f04f 0100 	mov.w	r1, #0
 8000792:	f004 ff6b 	bl	800566c <TIM_SetCounter>
		right_enc.speed = (float)((right_enc.position - right_temp.position)*1000)/(float)DT_ENCODER;
 8000796:	f640 1330 	movw	r3, #2352	; 0x930
 800079a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a8:	fb02 f303 	mul.w	r3, r2, r3
 80007ac:	ee07 3a90 	vmov	s15, r3
 80007b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007b4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8000800 <TIM7_IRQHandler+0x170>
 80007b8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80007bc:	f640 1330 	movw	r3, #2352	; 0x930
 80007c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007c4:	edc3 7a01 	vstr	s15, [r3, #4]
		right_enc.acceleration = (float)((right_enc.speed - right_temp.speed)*1000)/(float)DT_ENCODER;
 80007c8:	f640 1330 	movw	r3, #2352	; 0x930
 80007cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80007d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80007d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007dc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000804 <TIM7_IRQHandler+0x174>
 80007e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007e4:	eddf 7a06 	vldr	s15, [pc, #24]	; 8000800 <TIM7_IRQHandler+0x170>
 80007e8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80007ec:	f640 1330 	movw	r3, #2352	; 0x930
 80007f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007f4:	edc3 7a02 	vstr	s15, [r3, #8]
	}
 80007f8:	f107 071c 	add.w	r7, r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd90      	pop	{r4, r7, pc}
 8000800:	43160000 	.word	0x43160000
 8000804:	447a0000 	.word	0x447a0000

08000808 <TIM1_TRG_COM_TIM17_IRQHandler>:

	void TIM1_TRG_COM_TIM17_IRQHandler(void)
	{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
		TIM_ClearITPendingBit(TIM17, TIM_IT_Update);
 800080e:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000812:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000816:	f04f 0101 	mov.w	r1, #1
 800081a:	f006 fb37 	bl	8006e8c <TIM_ClearITPendingBit>
		union twosComp {		// Takes care of two's complement conversion
			uint16_t un_signed;
			int16_t output;
		} convert;

		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 800081e:	f107 0304 	add.w	r3, r7, #4
 8000822:	4618      	mov	r0, r3
 8000824:	f04f 0128 	mov.w	r1, #40	; 0x28
 8000828:	f04f 0202 	mov.w	r2, #2
 800082c:	f007 fe64 	bl	80084f8 <L3GD20_Read>
		convert.un_signed = (bytes[1] << 8) | bytes[0];
 8000830:	797b      	ldrb	r3, [r7, #5]
 8000832:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8000836:	b29a      	uxth	r2, r3
 8000838:	793b      	ldrb	r3, [r7, #4]
 800083a:	4313      	orrs	r3, r2
 800083c:	b29b      	uxth	r3, r3
 800083e:	b29b      	uxth	r3, r3
 8000840:	803b      	strh	r3, [r7, #0]

		gyro_angle_x += (convert.output - gyro_bias_x) * (float)0.00763 * (float)0.001 * (float)DT_IMU;
 8000842:	883b      	ldrh	r3, [r7, #0]
 8000844:	b21a      	sxth	r2, r3
 8000846:	f640 1340 	movw	r3, #2368	; 0x940
 800084a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	ee07 3a90 	vmov	s15, r3
 8000856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800085a:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8000898 <TIM1_TRG_COM_TIM17_IRQHandler+0x90>
 800085e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000862:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800089c <TIM1_TRG_COM_TIM17_IRQHandler+0x94>
 8000866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800086a:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 800086e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000872:	f640 133c 	movw	r3, #2364	; 0x93c
 8000876:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800087a:	edd3 7a00 	vldr	s15, [r3]
 800087e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000882:	f640 133c 	movw	r3, #2364	; 0x93c
 8000886:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800088a:	edc3 7a00 	vstr	s15, [r3]
	}
 800088e:	f107 0708 	add.w	r7, r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	3bfa0514 	.word	0x3bfa0514
 800089c:	3a83126f 	.word	0x3a83126f

080008a0 <TIM6_DAC_IRQHandler>:
	void TIM6_DAC_IRQHandler(void)
	{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 80008a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80008a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80008ac:	f04f 0101 	mov.w	r1, #1
 80008b0:	f006 faec 	bl	8006e8c <TIM_ClearITPendingBit>
		GPIO_Write(GPIOE, led_matrix[led_iter] | led_matrix[7-led_iter]);
 80008b4:	f640 1320 	movw	r3, #2336	; 0x920
 80008b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	f240 0300 	movw	r3, #0
 80008c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	f640 1320 	movw	r3, #2336	; 0x920
 80008d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f1c3 0107 	rsb	r1, r3, #7
 80008da:	f240 0300 	movw	r3, #0
 80008de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4313      	orrs	r3, r2
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80008f2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80008f6:	4619      	mov	r1, r3
 80008f8:	f002 fe72 	bl	80035e0 <GPIO_Write>
		++led_iter;
 80008fc:	f640 1320 	movw	r3, #2336	; 0x920
 8000900:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f103 0201 	add.w	r2, r3, #1
 800090a:	f640 1320 	movw	r3, #2336	; 0x920
 800090e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000912:	601a      	str	r2, [r3, #0]
		if(led_iter > 7)
 8000914:	f640 1320 	movw	r3, #2336	; 0x920
 8000918:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b07      	cmp	r3, #7
 8000920:	bfd4      	ite	le
 8000922:	2300      	movle	r3, #0
 8000924:	2301      	movgt	r3, #1
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d006      	beq.n	800093a <TIM6_DAC_IRQHandler+0x9a>
		{
			led_iter = 0;
 800092c:	f640 1320 	movw	r3, #2336	; 0x920
 8000930:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000934:	f04f 0200 	mov.w	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
		}
	}
 800093a:	bd80      	pop	{r7, pc}

0800093c <ADC1_2_IRQHandler>:
	void ADC1_2_IRQHandler(void)
	{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
		if(ADC_GetITStatus(ADC1, ADC_IT_EOC) == SET)
 8000940:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000944:	f04f 0104 	mov.w	r1, #4
 8000948:	f002 f9a2 	bl	8002c90 <ADC_GetITStatus>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	bf14      	ite	ne
 8000952:	2300      	movne	r3, #0
 8000954:	2301      	moveq	r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d010      	beq.n	800097e <ADC1_2_IRQHandler+0x42>
		{
			adcval = ADC_GetConversionValue(ADC1);
 800095c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000960:	f001 fe7e 	bl	8002660 <ADC_GetConversionValue>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	f640 1344 	movw	r3, #2372	; 0x944
 800096c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000970:	601a      	str	r2, [r3, #0]
			ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8000972:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000976:	f04f 0104 	mov.w	r1, #4
 800097a:	f002 f9b9 	bl	8002cf0 <ADC_ClearITPendingBit>
		}
	}
 800097e:	bd80      	pop	{r7, pc}

08000980 <main>:
volatile uint16_t adcData[2];

// Initialize all encoder data structures to zero:

int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	SystemInit(); // Set up clocks/PLL/et. al
 8000986:	f007 ff49 	bl	800881c <SystemInit>

	UART1_init(); // Debug bridge
 800098a:	f7ff fc6d 	bl	8000268 <_Z10UART1_initv>

	// Initialize global encoder data structure for left and right encoders:

	init_encoder_struct(&left_enc);
 800098e:	f640 1024 	movw	r0, #2340	; 0x924
 8000992:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000996:	f7ff fe65 	bl	8000664 <_Z19init_encoder_structP12encoderState>
	init_encoder_struct(&right_enc);
 800099a:	f640 1030 	movw	r0, #2352	; 0x930
 800099e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80009a2:	f7ff fe5f 	bl	8000664 <_Z19init_encoder_structP12encoderState>

	// Initialize PWM outputs 1 and 2 at 1000 kHz duty frequency:

	pwm_out1_init(5000);
 80009a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80009aa:	f000 fce1 	bl	8001370 <_Z13pwm_out1_initt>
	pwm_out2_init(5000);
 80009ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80009b2:	f000 fda9 	bl	8001508 <_Z13pwm_out2_initt>

	// Initialize hardware quadrature encoder input interfaces:

	TIM8_init_encoder();
 80009b6:	f7ff fd3b 	bl	8000430 <_Z17TIM8_init_encoderv>
	TIM2_init_encoder();
 80009ba:	f7ff fda9 	bl	8000510 <_Z17TIM2_init_encoderv>

	// Initialize ADC, encoder update, IMU update and LED matrix interrupts:

	adc1_init();
 80009be:	f000 f907 	bl	8000bd0 <_Z9adc1_initv>
//	adc1_dma_init();
	encoder_update_ISR_init();	//Update the state of the two encoders (left/right)
 80009c2:	f7ff fe07 	bl	80005d4 <_Z23encoder_update_ISR_initv>
	imu_update_ISR_init(); 		//IMU (gyro/acclerometer/magnetometer ISR)
 80009c6:	f000 f841 	bl	8000a4c <_Z19imu_update_ISR_initv>
	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...
 80009ca:	f7ff fccb 	bl	8000364 <_Z19LED_MATRIX_ISR_initv>

	adcval = 0;
 80009ce:	f640 1344 	movw	r3, #2372	; 0x944
 80009d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009d6:	f04f 0200 	mov.w	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
	float mtr_out = 0;
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
	while(true)
	{
//		adcval = ADC_GetConversionValue(ADC1);
//		pwm1_output((float)adcval/(float)4096); // Read potentiometer on PA2 and output its value on
												// PWM channel #1
		pwm2_output(0.5f);						// Fixed 1 kHz, 50% duty output on PWM output #2
 80009e2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x60
 80009e6:	f000 fe39 	bl	800165c <_Z11pwm2_outputf>
		mtr_out = (float)adcval/(float)4096;
 80009ea:	f640 1344 	movw	r3, #2372	; 0x944
 80009ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009f2:	edd3 7a00 	vldr	s15, [r3]
 80009f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009fa:	eddf 7a13 	vldr	s15, [pc, #76]	; 8000a48 <main+0xc8>
 80009fe:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000a02:	edc7 7a01 	vstr	s15, [r7, #4]
		mtr_out = (adcval >= 4013) ? 0.97 : mtr_out;
 8000a06:	f640 1344 	movw	r3, #2372	; 0x944
 8000a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	f640 73ac 	movw	r3, #4012	; 0xfac
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dc01      	bgt.n	8000a1c <main+0x9c>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	e003      	b.n	8000a24 <main+0xa4>
 8000a1c:	f245 13ec 	movw	r3, #20972	; 0x51ec
 8000a20:	f6c3 7378 	movt	r3, #16248	; 0x3f78
 8000a24:	607b      	str	r3, [r7, #4]
		pwm1_output(mtr_out);
 8000a26:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a2a:	f000 fd4b 	bl	80014c4 <_Z11pwm1_outputf>

		// Debug Statements:

//		printf("%d %d %d\n\r", adcData[0], adcData[1], adcval);
		printf("%d\n\r", adcval);
 8000a2e:	f640 1344 	movw	r3, #2372	; 0x944
 8000a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f64f 4058 	movw	r0, #64600	; 0xfc58
 8000a3c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a40:	4619      	mov	r1, r3
 8000a42:	f009 fb03 	bl	800a04c <printf>
	LED_MATRIX_ISR_init();		//Hand out some eye candy while we're at it...

	adcval = 0;
	float mtr_out = 0;

	while(true)
 8000a46:	e7cc      	b.n	80009e2 <main+0x62>
 8000a48:	45800000 	.word	0x45800000

08000a4c <_Z19imu_update_ISR_initv>:

// Initializes the ISR that reads inertial sensors (gyro + accelerometer)
// Interrupt priority is HIGHEST (0)

void imu_update_ISR_init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
	L3GD20_InitTypeDef l3gInit;

	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 8000a52:	f04f 0307 	mov.w	r3, #7
 8000a56:	74bb      	strb	r3, [r7, #18]
	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 8000a58:	f04f 0300 	mov.w	r3, #0
 8000a5c:	74fb      	strb	r3, [r7, #19]
	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	753b      	strb	r3, [r7, #20]
	l3gInit.Endianness = L3GD20_BLE_LSB;
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	757b      	strb	r3, [r7, #21]
	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 8000a6a:	f04f 0300 	mov.w	r3, #0
 8000a6e:	75bb      	strb	r3, [r7, #22]
	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	747b      	strb	r3, [r7, #17]
	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 8000a76:	f04f 0308 	mov.w	r3, #8
 8000a7a:	743b      	strb	r3, [r7, #16]

	L3GD20_Init(&l3gInit);
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	4618      	mov	r0, r3
 8000a82:	f007 fba7 	bl	80081d4 <L3GD20_Init>
	gyro_bias_x = calc_gyro_bias();
 8000a86:	f000 f85f 	bl	8000b48 <_Z14calc_gyro_biasv>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f640 1340 	movw	r3, #2368	; 0x940
 8000a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a96:	601a      	str	r2, [r3, #0]

	gyro_angle_x = 0;
 8000a98:	f640 133c 	movw	r3, #2364	; 0x93c
 8000a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]

	NVIC_InitTypeDef nv;
	TIM_TimeBaseInitTypeDef TIM17_init;

	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;//TIM3_IRQn;	//TIM2_IRQn;
 8000aa6:	f04f 031a 	mov.w	r3, #26
 8000aaa:	733b      	strb	r3, [r7, #12]
	nv.NVIC_IRQChannelPreemptionPriority = 0;
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	737b      	strb	r3, [r7, #13]
	nv.NVIC_IRQChannelSubPriority = 0;
 8000ab2:	f04f 0300 	mov.w	r3, #0
 8000ab6:	73bb      	strb	r3, [r7, #14]
	nv.NVIC_IRQChannelCmd = ENABLE;
 8000ab8:	f04f 0301 	mov.w	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&nv);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fe02 	bl	80036cc <NVIC_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE); //TIM3 on APB1
 8000ac8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000acc:	f04f 0101 	mov.w	r1, #1
 8000ad0:	f003 fd66 	bl	80045a0 <RCC_APB2PeriphClockCmd>
	 * 	  Prescaler -> PRESCALER
	 * 	  Period -> ARR
	 * 	  RepetitionCounter -> REPCOUNTER
	 */

	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 8000ad4:	f04f 03f9 	mov.w	r3, #249	; 0xf9
 8000ad8:	607b      	str	r3, [r7, #4]
	TIM17_init.TIM_Prescaler = 7199;
 8000ada:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8000ade:	803b      	strh	r3, [r7, #0]
	TIM17_init.TIM_RepetitionCounter = 0;
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	72bb      	strb	r3, [r7, #10]
	TIM17_init.TIM_ClockDivision = 0;
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	813b      	strh	r3, [r7, #8]
	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 8000aec:	f04f 0300 	mov.w	r3, #0
 8000af0:	807b      	strh	r3, [r7, #2]

	TIM_TimeBaseInit(TIM17, &TIM17_init);
 8000af2:	463b      	mov	r3, r7
 8000af4:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000af8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000afc:	4619      	mov	r1, r3
 8000afe:	f004 fcdf 	bl	80054c0 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 8000b02:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000b06:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000b0a:	f04f 0101 	mov.w	r1, #1
 8000b0e:	f04f 0201 	mov.w	r2, #1
 8000b12:	f006 f92f 	bl	8006d74 <TIM_ITConfig>
	TIM_Cmd(TIM17, ENABLE);
 8000b16:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000b1a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000b1e:	f04f 0101 	mov.w	r1, #1
 8000b22:	f004 fe91 	bl	8005848 <TIM_Cmd>
}
 8000b26:	f107 0718 	add.w	r7, r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop

08000b30 <L3GD20_TIMEOUT_UserCallback>:

uint32_t L3GD20_TIMEOUT_UserCallback(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 8000b34:	f64f 4060 	movw	r0, #64608	; 0xfc60
 8000b38:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000b3c:	f009 fa86 	bl	800a04c <printf>
	return 0;
 8000b40:	f04f 0300 	mov.w	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_Z14calc_gyro_biasv>:

int16_t calc_gyro_bias(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
	int i = 0;
 8000b4e:	f04f 0300 	mov.w	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
	int accum_x = 0;
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
		int16_t output;
	} convert;

	uint8_t bytes[2];

	for(i = 0; i < 250; ++i)
 8000b5a:	f04f 0300 	mov.w	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	e019      	b.n	8000b96 <_Z14calc_gyro_biasv+0x4e>
	{
		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 8000b62:	463b      	mov	r3, r7
 8000b64:	4618      	mov	r0, r3
 8000b66:	f04f 0128 	mov.w	r1, #40	; 0x28
 8000b6a:	f04f 0202 	mov.w	r2, #2
 8000b6e:	f007 fcc3 	bl	80084f8 <L3GD20_Read>
		convert.un_signed = (bytes[1] << 8) | bytes[0];
 8000b72:	787b      	ldrb	r3, [r7, #1]
 8000b74:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	783b      	ldrb	r3, [r7, #0]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	80bb      	strh	r3, [r7, #4]
		accum_x += convert.output;
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	18d3      	adds	r3, r2, r3
 8000b8c:	60bb      	str	r3, [r7, #8]
		int16_t output;
	} convert;

	uint8_t bytes[2];

	for(i = 0; i < 250; ++i)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f103 0301 	add.w	r3, r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2bf9      	cmp	r3, #249	; 0xf9
 8000b9a:	bfcc      	ite	gt
 8000b9c:	2300      	movgt	r3, #0
 8000b9e:	2301      	movle	r3, #1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1dd      	bne.n	8000b62 <_Z14calc_gyro_biasv+0x1a>
	{
		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
		convert.un_signed = (bytes[1] << 8) | bytes[0];
		accum_x += convert.output;
	}
	return (int16_t)((float)accum_x/(float)250);
 8000ba6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bae:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000bcc <_Z14calc_gyro_biasv+0x84>
 8000bb2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bba:	ee17 3a90 	vmov	r3, s15
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b21b      	sxth	r3, r3
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f107 0710 	add.w	r7, r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	437a0000 	.word	0x437a0000

08000bd0 <_Z9adc1_initv>:

void adc1_init(void) //PA2 -> Channel 3 on ADC1
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b092      	sub	sp, #72	; 0x48
 8000bd4:	af00      	add	r7, sp, #0
	ADC_InitTypeDef       ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	GPIO_InitTypeDef      GPIO_InitStructure;
	/* Configure the ADC clock */
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 8000bd6:	f44f 7088 	mov.w	r0, #272	; 0x110
 8000bda:	f003 fb47 	bl	800426c <RCC_ADCCLKConfig>

	/* Enable ADC1 clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 8000bde:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000be2:	f04f 0101 	mov.w	r1, #1
 8000be6:	f003 fcb1 	bl	800454c <RCC_AHBPeriphClockCmd>
	/* ADC Channel configuration */
	/* GPIOC Periph clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000bea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bee:	f04f 0101 	mov.w	r1, #1
 8000bf2:	f003 fcab 	bl	800454c <RCC_AHBPeriphClockCmd>

	/* Configure ADC Channel7 as analog input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000bf6:	f04f 0304 	mov.w	r3, #4
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000bfc:	f04f 0303 	mov.w	r3, #3
 8000c00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	4619      	mov	r1, r3
 8000c16:	f002 fb6b 	bl	80032f0 <GPIO_Init>

	ADC_StructInit(&ADC_InitStructure);
 8000c1a:	f107 0304 	add.w	r3, r7, #4
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 ff2c 	bl	8001a7c <ADC_StructInit>

	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 8000c24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c28:	f04f 0101 	mov.w	r1, #1
 8000c2c:	f001 f8ce 	bl	8001dcc <ADC_VoltageRegulatorCmd>

	/* Insert delay equal to 10 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	647b      	str	r3, [r7, #68]	; 0x44
 8000c36:	e007      	b.n	8000c48 <_Z9adc1_initv+0x78>
	{
	  ++foo;
 8000c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c3a:	f103 0301 	add.w	r3, r3, #1
 8000c3e:	647b      	str	r3, [r7, #68]	; 0x44
	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);

	/* Insert delay equal to 10 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 8000c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c42:	f103 0301 	add.w	r3, r3, #1
 8000c46:	647b      	str	r3, [r7, #68]	; 0x44
 8000c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c4a:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	bfcc      	ite	gt
 8000c52:	2300      	movgt	r3, #0
 8000c54:	2301      	movle	r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1ed      	bne.n	8000c38 <_Z9adc1_initv+0x68>
	{
	  ++foo;
	}

	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 8000c5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c60:	f04f 0100 	mov.w	r1, #0
 8000c64:	f001 f856 	bl	8001d14 <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 8000c68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c6c:	f001 f826 	bl	8001cbc <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 8000c70:	bf00      	nop
 8000c72:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c76:	f001 f863 	bl	8001d40 <ADC_GetCalibrationStatus>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bf0c      	ite	eq
 8000c80:	2300      	moveq	r3, #0
 8000c82:	2301      	movne	r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f3      	bne.n	8000c72 <_Z9adc1_initv+0xa2>

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8000c8a:	f04f 0300 	mov.w	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000c96:	f04f 0300 	mov.w	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 8000caa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f000 ff68 	bl	8001b88 <ADC_CommonInit>

	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 8000cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbc:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8000cca:	f04f 0300 	mov.w	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 8000ce2:	f04f 0301 	mov.w	r3, #1
 8000ce6:	f887 3020 	strb.w	r3, [r7, #32]
	ADC_Init(ADC1, &ADC_InitStructure);
 8000cea:	f107 0304 	add.w	r3, r7, #4
 8000cee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f000 fe80 	bl	80019f8 <ADC_Init>

	/* ADC1 regular channel3 configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cycles5);//ADC_SampleTime_7Cycles5);
 8000cf8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cfc:	f04f 0103 	mov.w	r1, #3
 8000d00:	f04f 0201 	mov.w	r2, #1
 8000d04:	f04f 0307 	mov.w	r3, #7
 8000d08:	f001 fae0 	bl	80022cc <ADC_RegularChannelConfig>

	NVIC_InitTypeDef nv;

	nv.NVIC_IRQChannel = ADC1_2_IRQn;//TIM3_IRQn;	//TIM2_IRQn;
 8000d0c:	f04f 0312 	mov.w	r3, #18
 8000d10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	nv.NVIC_IRQChannelPreemptionPriority = 2;
 8000d14:	f04f 0302 	mov.w	r3, #2
 8000d18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	nv.NVIC_IRQChannelSubPriority = 0;
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	nv.NVIC_IRQChannelCmd = ENABLE;
 8000d24:	f04f 0301 	mov.w	r3, #1
 8000d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	NVIC_Init(&nv);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 fccb 	bl	80036cc <NVIC_Init>

	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 8000d36:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d3a:	f04f 0104 	mov.w	r1, #4
 8000d3e:	f04f 0201 	mov.w	r2, #1
 8000d42:	f001 fef9 	bl	8002b38 <ADC_ITConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 8000d46:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d4a:	f04f 0101 	mov.w	r1, #1
 8000d4e:	f000 ff99 	bl	8001c84 <ADC_Cmd>

	/* wait for ADRDY */
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 8000d52:	bf00      	nop
 8000d54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d58:	f04f 0101 	mov.w	r1, #1
 8000d5c:	f001 ff0a 	bl	8002b74 <ADC_GetFlagStatus>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2300      	movne	r3, #0
 8000d68:	2301      	moveq	r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f1      	bne.n	8000d54 <_Z9adc1_initv+0x184>

	/* Start ADC1 Software Conversion */
	ADC_StartConversion(ADC1);
 8000d70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d74:	f001 fbf6 	bl	8002564 <ADC_StartConversion>
}
 8000d78:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_Z13adc1_dma_initv>:

void adc1_dma_init(void) //PA2 (Channel 3), PA3 (Channel 4), PF5 (Channel 5) in use
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09c      	sub	sp, #112	; 0x70
 8000d84:	af00      	add	r7, sp, #0
//	ADC_StructInit(&ADC_InitStructure);
//	ADC_CommonStructInit(&ADC_CommonInitStructure);
//	GPIO_StructInit(&GPIO_InitStructure);

	/* Configure the ADC clock */
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div6);
 8000d86:	f44f 7098 	mov.w	r0, #304	; 0x130
 8000d8a:	f003 fa6f 	bl	800426c <RCC_ADCCLKConfig>

	/* Enable ADC1 clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 8000d8e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000d92:	f04f 0101 	mov.w	r1, #1
 8000d96:	f003 fbd9 	bl	800454c <RCC_AHBPeriphClockCmd>

	/* ADC Channel configuration */
	/* GPIOA Periph clock enable */

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000d9a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d9e:	f04f 0101 	mov.w	r1, #1
 8000da2:	f003 fbd3 	bl	800454c <RCC_AHBPeriphClockCmd>
//	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);

	/* Configure ADC Channel 3, 4 as analog input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000da6:	f04f 0304 	mov.w	r3, #4
 8000daa:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000dac:	f04f 0303 	mov.w	r3, #3
 8000db0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000dbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f002 fa93 	bl	80032f0 <GPIO_Init>


	GPIO_StructInit(&GPIO_InitStructure);
 8000dca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fb36 	bl	8003440 <GPIO_StructInit>

	// Configure ADC Channel5 as analog input
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000dd4:	f04f 0308 	mov.w	r3, #8
 8000dd8:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000dda:	f04f 0303 	mov.w	r3, #3
 8000dde:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000dea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	4619      	mov	r1, r3
 8000df4:	f002 fa7c 	bl	80032f0 <GPIO_Init>


	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8000df8:	f04f 0001 	mov.w	r0, #1
 8000dfc:	f04f 0101 	mov.w	r1, #1
 8000e00:	f003 fba4 	bl	800454c <RCC_AHBPeriphClockCmd>
	//==Configure DMA1 - Channel1==
	DMA_DeInit(DMA1_Channel1); //Set DMA registers to default values
 8000e04:	f04f 0008 	mov.w	r0, #8
 8000e08:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e0c:	f001 ff80 	bl	8002d10 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)0x50000040;//ADC1_BASE; //Address of peripheral the DMA must map to
 8000e10:	f04f 0340 	mov.w	r3, #64	; 0x40
 8000e14:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData[0]; //Variable to which ADC values will be stored
 8000e1a:	f640 1348 	movw	r3, #2376	; 0x948
 8000e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_BufferSize = 2; //Buffer size (3 because we using three channels)
 8000e2a:	f04f 0302 	mov.w	r3, #2
 8000e2e:	863b      	strh	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;//DMA_MemoryInc_Enable;
 8000e36:	f04f 0380 	mov.w	r3, #128	; 0x80
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; //HalfWord
 8000e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e40:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;//HalfWord
 8000e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e46:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000e48:	f04f 0320 	mov.w	r3, #32
 8000e4c:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e52:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	64fb      	str	r3, [r7, #76]	; 0x4c

//	ADC_StructInit(&ADC_InitStructure);

	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 8000e5a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e5e:	f04f 0101 	mov.w	r1, #1
 8000e62:	f000 ffb3 	bl	8001dcc <ADC_VoltageRegulatorCmd>

	/* Insert delay equal to 10 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e6c:	e007      	b.n	8000e7e <_Z13adc1_dma_initv+0xfe>
	{
	  ++foo;
 8000e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e70:	f103 0301 	add.w	r3, r3, #1
 8000e74:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);

	/* Insert delay equal to 10 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 8000e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e78:	f103 0301 	add.w	r3, r3, #1
 8000e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e80:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000e84:	429a      	cmp	r2, r3
 8000e86:	bfcc      	ite	gt
 8000e88:	2300      	movgt	r3, #0
 8000e8a:	2301      	movle	r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1ed      	bne.n	8000e6e <_Z13adc1_dma_initv+0xee>
//	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
//	ADC_StartCalibration(ADC1);

//	while(ADC_GetCalibrationStatus(ADC1) != RESET );

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	65bb      	str	r3, [r7, #88]	; 0x58
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;//ADC_Clock_SynClkModeDiv1;
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;//ADC_DMAAccessMode_Disabled;
 8000e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ea2:	663b      	str	r3, [r7, #96]	; 0x60
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;//ADC_DMAMode_OneShot;
 8000ea4:	f04f 0302 	mov.w	r3, #2
 8000ea8:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 8000eaa:	f04f 030f 	mov.w	r3, #15
 8000eae:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 8000eb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eb6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f000 fe64 	bl	8001b88 <ADC_CommonInit>

	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 8000ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec4:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 8000eea:	f04f 0302 	mov.w	r3, #2
 8000eee:	f887 3020 	strb.w	r3, [r7, #32]
	ADC_Init(ADC1, &ADC_InitStructure);
 8000ef2:	f107 0304 	add.w	r3, r7, #4
 8000ef6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000efa:	4619      	mov	r1, r3
 8000efc:	f000 fd7c 	bl	80019f8 <ADC_Init>

	/* ADC1 regular channels configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//Try later: ADC_SampleTime_7Cycles5
 8000f00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000f04:	f04f 0103 	mov.w	r1, #3
 8000f08:	f04f 0201 	mov.w	r2, #1
 8000f0c:	f04f 0307 	mov.w	r3, #7
 8000f10:	f001 f9dc 	bl	80022cc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);
 8000f14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000f18:	f04f 0104 	mov.w	r1, #4
 8000f1c:	f04f 0202 	mov.w	r2, #2
 8000f20:	f04f 0307 	mov.w	r3, #7
 8000f24:	f001 f9d2 	bl	80022cc <ADC_RegularChannelConfig>
//	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 3, ADC_SampleTime_19Cycles5); //601

	DMA_Init(DMA1_Channel1, &DMA_InitStructure); //Initialise the DMA
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	f04f 0008 	mov.w	r0, #8
 8000f30:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f34:	4619      	mov	r1, r3
 8000f36:	f001 fffb 	bl	8002f30 <DMA_Init>
	DMA_Cmd(DMA1_Channel1, ENABLE); //Enable the DMA1 - Channel1
 8000f3a:	f04f 0008 	mov.w	r0, #8
 8000f3e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f42:	f04f 0101 	mov.w	r1, #1
 8000f46:	f002 f869 	bl	800301c <DMA_Cmd>

	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 8000f4a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000f4e:	f04f 0102 	mov.w	r1, #2
 8000f52:	f001 fced 	bl	8002930 <ADC_DMAConfig>
	ADC_DMACmd(ADC1, ENABLE);
 8000f56:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000f5a:	f04f 0101 	mov.w	r1, #1
 8000f5e:	f001 fccb 	bl	80028f8 <ADC_DMACmd>

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 8000f62:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000f66:	f04f 0101 	mov.w	r1, #1
 8000f6a:	f000 fe8b 	bl	8001c84 <ADC_Cmd>

//	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
//	ADC_StartCalibration(ADC1);

	/* wait for ADRDY */
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 8000f6e:	bf00      	nop
 8000f70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000f74:	f04f 0101 	mov.w	r1, #1
 8000f78:	f001 fdfc 	bl	8002b74 <ADC_GetFlagStatus>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf14      	ite	ne
 8000f82:	2300      	movne	r3, #0
 8000f84:	2301      	moveq	r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f1      	bne.n	8000f70 <_Z13adc1_dma_initv+0x1f0>

	/* Start ADC1 Software Conversion */
	ADC_StartConversion(ADC1);
 8000f8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000f90:	f001 fae8 	bl	8002564 <ADC_StartConversion>
}
 8000f94:	f107 0770 	add.w	r7, r7, #112	; 0x70
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    _write(1, "exit", 4);
 8000fa4:	f04f 0001 	mov.w	r0, #1
 8000fa8:	f64f 41a0 	movw	r1, #64672	; 0xfca0
 8000fac:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000fb0:	f04f 0204 	mov.w	r2, #4
 8000fb4:	f000 f97a 	bl	80012ac <_write>
    while (1) {
        ;
    }
 8000fb8:	e7fe      	b.n	8000fb8 <_exit+0x1c>
 8000fba:	bf00      	nop

08000fbc <_close>:
}

int _close(int file) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f107 070c 	add.w	r7, r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
    errno = ENOMEM;
 8000fe0:	f640 1388 	movw	r3, #2440	; 0x988
 8000fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fe8:	f04f 020c 	mov.w	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f107 0714 	add.w	r7, r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <_fork>:
/*
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
    errno = EAGAIN;
 8001004:	f640 1388 	movw	r3, #2440	; 0x988
 8001008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800100c:	f04f 020b 	mov.w	r2, #11
 8001010:	601a      	str	r2, [r3, #0]
    return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_fstat>:
 fstat
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001030:	605a      	str	r2, [r3, #4]
    return 0;
 8001032:	f04f 0300 	mov.w	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	f107 070c 	add.w	r7, r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <_getpid>:
/*
 getpid
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
    return 1;
 8001048:	f04f 0301 	mov.w	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <_isatty>:

/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    switch (file){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f103 0300 	add.w	r3, r3, #0
 8001062:	2b02      	cmp	r3, #2
 8001064:	d802      	bhi.n	800106c <_isatty+0x18>
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
 8001066:	f04f 0301 	mov.w	r3, #1
 800106a:	e008      	b.n	800107e <_isatty+0x2a>
    default:
        //errno = ENOTTY;
        errno = EBADF;
 800106c:	f640 1388 	movw	r3, #2440	; 0x988
 8001070:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001074:	f04f 0209 	mov.w	r2, #9
 8001078:	601a      	str	r2, [r3, #0]
        return 0;
 800107a:	f04f 0300 	mov.w	r3, #0
    }
}
 800107e:	4618      	mov	r0, r3
 8001080:	f107 070c 	add.w	r7, r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <_kill>:

/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
 8001096:	f640 1388 	movw	r3, #2440	; 0x988
 800109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800109e:	f04f 0216 	mov.w	r2, #22
 80010a2:	601a      	str	r2, [r3, #0]
    return (-1);
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	f107 070c 	add.w	r7, r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <_link>:
/*
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
    errno = EMLINK;
 80010be:	f640 1388 	movw	r3, #2440	; 0x988
 80010c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010c6:	f04f 021f 	mov.w	r2, #31
 80010ca:	601a      	str	r2, [r3, #0]
    return -1;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	f107 070c 	add.w	r7, r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <_lseek>:

/*
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
    return 0;
 80010e8:	f04f 0300 	mov.w	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	f107 0714 	add.w	r7, r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 8001100:	f640 1350 	movw	r3, #2384	; 0x950
 8001104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d108      	bne.n	8001120 <_sbrk+0x28>
        heap_end = &_ebss;
 800110e:	f640 1350 	movw	r3, #2384	; 0x950
 8001112:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001116:	f640 128c 	movw	r2, #2444	; 0x98c
 800111a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800111e:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 8001120:	f640 1350 	movw	r3, #2384	; 0x950
 8001124:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	60fb      	str	r3, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 800112c:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8001130:	4623      	mov	r3, r4

char * stack = (char*) __get_MSP();
 8001132:	60bb      	str	r3, [r7, #8]
     if (heap_end + incr >  stack)
 8001134:	f640 1350 	movw	r3, #2384	; 0x950
 8001138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	18d2      	adds	r2, r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	429a      	cmp	r2, r3
 8001146:	d913      	bls.n	8001170 <_sbrk+0x78>
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
 8001148:	f04f 0002 	mov.w	r0, #2
 800114c:	f64f 41a8 	movw	r1, #64680	; 0xfca8
 8001150:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001154:	f04f 0219 	mov.w	r2, #25
 8001158:	f000 f8a8 	bl	80012ac <_write>
         errno = ENOMEM;
 800115c:	f640 1388 	movw	r3, #2440	; 0x988
 8001160:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001164:	f04f 020c 	mov.w	r2, #12
 8001168:	601a      	str	r2, [r3, #0]
         return  (caddr_t) -1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e00c      	b.n	800118a <_sbrk+0x92>
         //abort ();
     }

    heap_end += incr;
 8001170:	f640 1350 	movw	r3, #2384	; 0x950
 8001174:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	18d2      	adds	r2, r2, r3
 800117e:	f640 1350 	movw	r3, #2384	; 0x950
 8001182:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001186:	601a      	str	r2, [r3, #0]
    return (caddr_t) prev_heap_end;
 8001188:	68fb      	ldr	r3, [r7, #12]

}
 800118a:	4618      	mov	r0, r3
 800118c:	f107 0714 	add.w	r7, r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bd90      	pop	{r4, r7, pc}

08001194 <_read>:
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */


int _read(int file, char *ptr, int len) {
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
    int n;
    int num = 0;
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
    switch (file) {
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d128      	bne.n	80011fe <_read+0x6a>
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e01f      	b.n	80011f4 <_read+0x60>
#if   STDIN_USART == 1
            while ((USART1->ISR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 80011b4:	bf00      	nop
 80011b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f6      	beq.n	80011b6 <_read+0x22>
            char c = (char)(USART1->RDR & (uint16_t)0x01FF);
 80011c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80011d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	75fb      	strb	r3, [r7, #23]
            char c = (char) (USART2->RDR & (uint16_t) 0x01FF);
#elif STDIN_USART == 3
            while ((USART3->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
            char c = (char)(USART3->RDR & (uint16_t)0x01FF);
#endif
            *ptr++ = c;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	7dfa      	ldrb	r2, [r7, #23]
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f103 0301 	add.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
            num++;
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f103 0301 	add.w	r3, r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
int _read(int file, char *ptr, int len) {
    int n;
    int num = 0;
    switch (file) {
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f103 0301 	add.w	r3, r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbdb      	blt.n	80011b4 <_read+0x20>
            char c = (char)(USART3->RDR & (uint16_t)0x01FF);
#endif
            *ptr++ = c;
            num++;
        }
        break;
 80011fc:	e009      	b.n	8001212 <_read+0x7e>
    default:
        errno = EBADF;
 80011fe:	f640 1388 	movw	r3, #2440	; 0x988
 8001202:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001206:	f04f 0209 	mov.w	r2, #9
 800120a:	601a      	str	r2, [r3, #0]
        return -1;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	e000      	b.n	8001214 <_read+0x80>
    }
    return num;
 8001212:	69bb      	ldr	r3, [r7, #24]
}
 8001214:	4618      	mov	r0, r3
 8001216:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <_stat>:
 stat
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001230:	605a      	str	r2, [r3, #4]
    return 0;
 8001232:	f04f 0300 	mov.w	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	f107 070c 	add.w	r7, r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <_times>:
/*
 times
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    return -1;
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001250:	4618      	mov	r0, r3
 8001252:	f107 070c 	add.w	r7, r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <_unlink>:

/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    errno = ENOENT;
 8001264:	f640 1388 	movw	r3, #2440	; 0x988
 8001268:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800126c:	f04f 0202 	mov.w	r2, #2
 8001270:	601a      	str	r2, [r3, #0]
    return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001276:	4618      	mov	r0, r3
 8001278:	f107 070c 	add.w	r7, r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop

08001284 <_wait>:

/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    errno = ECHILD;
 800128c:	f640 1388 	movw	r3, #2440	; 0x988
 8001290:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001294:	f04f 020a 	mov.w	r2, #10
 8001298:	601a      	str	r2, [r3, #0]
    return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129e:	4618      	mov	r0, r3
 80012a0:	f107 070c 	add.w	r7, r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop

080012ac <_write>:
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
    int n;
    switch (file) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d002      	beq.n	80012c4 <_write+0x18>
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d022      	beq.n	8001308 <_write+0x5c>
 80012c2:	e043      	b.n	800134c <_write+0xa0>
    case STDOUT_FILENO: /*stdout*/
        for (n = 0; n < len; n++) {
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e018      	b.n	80012fe <_write+0x52>
#if STDOUT_USART == 1
            while ((USART1->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80012cc:	bf00      	nop
 80012ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f6      	beq.n	80012ce <_write+0x22>
            USART1->TDR = (*ptr++ & (uint16_t)0x01FF);
 80012e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	f103 0301 	add.w	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
    case STDOUT_FILENO: /*stdout*/
        for (n = 0; n < len; n++) {
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f103 0301 	add.w	r3, r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	dbe2      	blt.n	80012cc <_write+0x20>
            while ((USART3->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
            USART3->TDR = (*ptr++ & (uint16_t)0x01FF);

#endif
        }
        break;
 8001306:	e02b      	b.n	8001360 <_write+0xb4>
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e018      	b.n	8001342 <_write+0x96>
#if STDERR_USART == 1
            while ((USART1->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
            USART1->TDR = (*ptr++ & (uint16_t)0x01FF);
#elif  STDERR_USART == 2
            while ((USART2->ISR & USART_FLAG_TC) == (uint16_t) RESET) {
 8001310:	bf00      	nop
 8001312:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001316:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f6      	beq.n	8001312 <_write+0x66>
            }
            USART2->TDR = (*ptr++ & (uint16_t) 0x01FF);
 8001324:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001328:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	851a      	strh	r2, [r3, #40]	; 0x28
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	f103 0301 	add.w	r3, r3, #1
 8001338:	60bb      	str	r3, [r7, #8]

#endif
        }
        break;
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f103 0301 	add.w	r3, r3, #1
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	dbe2      	blt.n	8001310 <_write+0x64>
#elif  STDERR_USART == 3
            while ((USART3->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
            USART3->TDR = (*ptr++ & (uint16_t)0x01FF);
#endif
        }
        break;
 800134a:	e009      	b.n	8001360 <_write+0xb4>
    default:
        errno = EBADF;
 800134c:	f640 1388 	movw	r3, #2440	; 0x988
 8001350:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001354:	f04f 0209 	mov.w	r2, #9
 8001358:	601a      	str	r2, [r3, #0]
        return -1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e000      	b.n	8001362 <_write+0xb6>
    }
    return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	f107 071c 	add.w	r7, r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <_Z13pwm_out1_initt>:
 */

#include "pwm.h"

void pwm_out1_init(uint16_t frequency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08e      	sub	sp, #56	; 0x38
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
	int period = 0;
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
	int psc = 0;
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
	config_pwm_freq((int)frequency, &period, &psc);
 8001386:	88f9      	ldrh	r1, [r7, #6]
 8001388:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800138c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001390:	4608      	mov	r0, r1
 8001392:	4611      	mov	r1, r2
 8001394:	461a      	mov	r2, r3
 8001396:	f000 f983 	bl	80016a0 <_Z15config_pwm_freqiPiS_>

	TIM_TimeBaseInitTypeDef i;
	TIM_OCInitTypeDef j;
	GPIO_InitTypeDef g;

	i.TIM_CounterMode = TIM_CounterMode_Up;
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	84fb      	strh	r3, [r7, #38]	; 0x26
	i.TIM_ClockDivision = 0;//clk_div;
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	i.TIM_RepetitionCounter = 0;
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	i.TIM_Prescaler = ((uint16_t)psc)-1;
 80013ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	84bb      	strh	r3, [r7, #36]	; 0x24
	i.TIM_Period = ((uint16_t)period)-1;
 80013ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f103 33ff 	add.w	r3, r3, #4294967295
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28

	j.TIM_OCMode = TIM_OCMode_PWM1;
 80013c4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80013c8:	613b      	str	r3, [r7, #16]
	j.TIM_OutputState = TIM_OutputState_Enable;
 80013ca:	f04f 0301 	mov.w	r3, #1
 80013ce:	82bb      	strh	r3, [r7, #20]
	j.TIM_Pulse = 8191;//25000;
 80013d0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013d4:	61bb      	str	r3, [r7, #24]
	j.TIM_OCPolarity = TIM_OCPolarity_High;
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	83bb      	strh	r3, [r7, #28]

	g.GPIO_Mode = GPIO_Mode_AF;
 80013dc:	f04f 0302 	mov.w	r3, #2
 80013e0:	733b      	strb	r3, [r7, #12]
	g.GPIO_OType = GPIO_OType_PP;
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	73bb      	strb	r3, [r7, #14]
	g.GPIO_Pin = GPIO_Pin_4;
 80013e8:	f04f 0310 	mov.w	r3, #16
 80013ec:	60bb      	str	r3, [r7, #8]
	g.GPIO_PuPd = GPIO_PuPd_UP;
 80013ee:	f04f 0301 	mov.w	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
	g.GPIO_Speed = GPIO_Speed_50MHz;
 80013f4:	f04f 0303 	mov.w	r3, #3
 80013f8:	737b      	strb	r3, [r7, #13]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80013fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80013fe:	f04f 0101 	mov.w	r1, #1
 8001402:	f003 f8a3 	bl	800454c <RCC_AHBPeriphClockCmd>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_2); // AF2, 10:
 8001406:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800140a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800140e:	f04f 0104 	mov.w	r1, #4
 8001412:	f04f 0202 	mov.w	r2, #2
 8001416:	f002 f8f1 	bl	80035fc <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &g);
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001422:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001426:	4619      	mov	r1, r3
 8001428:	f001 ff62 	bl	80032f0 <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800142c:	f04f 0002 	mov.w	r0, #2
 8001430:	f04f 0101 	mov.w	r1, #1
 8001434:	f003 f8de 	bl	80045f4 <RCC_APB1PeriphClockCmd>
	TIM_InternalClockConfig(TIM3);
 8001438:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800143c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001440:	f005 fd86 	bl	8006f50 <TIM_InternalClockConfig>
	TIM_TimeBaseInit(TIM3, &i);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800144c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001450:	4619      	mov	r1, r3
 8001452:	f004 f835 	bl	80054c0 <TIM_TimeBaseInit>
	TIM_OC1Init(TIM3, &j);
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800145e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001462:	4619      	mov	r1, r3
 8001464:	f004 fa10 	bl	8005888 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8001468:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800146c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001470:	f04f 0108 	mov.w	r1, #8
 8001474:	f004 febe 	bl	80061f4 <TIM_OC1PreloadConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);
 8001478:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800147c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001480:	f04f 0101 	mov.w	r1, #1
 8001484:	f004 f988 	bl	8005798 <TIM_ARRPreloadConfig>

	TIM_CCxCmd(TIM3, TIM_Channel_1, TIM_CCx_Enable);
 8001488:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800148c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001490:	f04f 0100 	mov.w	r1, #0
 8001494:	f04f 0201 	mov.w	r2, #1
 8001498:	f005 f99e 	bl	80067d8 <TIM_CCxCmd>
	TIM_Cmd(TIM3, ENABLE);
 800149c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014a0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80014a4:	f04f 0101 	mov.w	r1, #1
 80014a8:	f004 f9ce 	bl	8005848 <TIM_Cmd>
	TIM_GenerateEvent(TIM3, TIM_EventSource_Update);
 80014ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014b0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80014b4:	f04f 0101 	mov.w	r1, #1
 80014b8:	f005 fc7c 	bl	8006db4 <TIM_GenerateEvent>
}
 80014bc:	f107 0738 	add.w	r7, r7, #56	; 0x38
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_Z11pwm1_outputf>:

void pwm1_output(float duty)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t setval = (uint16_t)((float)TIM3->ARR * duty);
 80014ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80014d6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014de:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ea:	ee17 3a90 	vmov	r3, s15
 80014ee:	81fb      	strh	r3, [r7, #14]
	TIM_SetCompare1(TIM3, setval);
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014f6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80014fa:	4619      	mov	r1, r3
 80014fc:	f004 fd74 	bl	8005fe8 <TIM_SetCompare1>
}
 8001500:	f107 0710 	add.w	r7, r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_Z13pwm_out2_initt>:

void pwm_out2_init(uint16_t frequency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
	int period = 0;
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
	int psc = 0;
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
	config_pwm_freq((int)frequency, &period, &psc);
 800151e:	88f9      	ldrh	r1, [r7, #6]
 8001520:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	f000 f8b7 	bl	80016a0 <_Z15config_pwm_freqiPiS_>

	TIM_TimeBaseInitTypeDef i;
	TIM_OCInitTypeDef j;
	GPIO_InitTypeDef g;

	i.TIM_CounterMode = TIM_CounterMode_Up;
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	84fb      	strh	r3, [r7, #38]	; 0x26
	i.TIM_ClockDivision = 0;//clk_div;
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	i.TIM_RepetitionCounter = 0;
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	i.TIM_Prescaler = ((uint16_t)psc)-1;
 8001546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001548:	b29b      	uxth	r3, r3
 800154a:	f103 33ff 	add.w	r3, r3, #4294967295
 800154e:	b29b      	uxth	r3, r3
 8001550:	84bb      	strh	r3, [r7, #36]	; 0x24
	i.TIM_Period = ((uint16_t)period)-1;
 8001552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001554:	b29b      	uxth	r3, r3
 8001556:	f103 33ff 	add.w	r3, r3, #4294967295
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28

	j.TIM_OCMode = TIM_OCMode_PWM1;
 800155c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8001560:	613b      	str	r3, [r7, #16]
	j.TIM_OutputState = TIM_OutputState_Enable;
 8001562:	f04f 0301 	mov.w	r3, #1
 8001566:	82bb      	strh	r3, [r7, #20]
	j.TIM_Pulse = 8191;
 8001568:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800156c:	61bb      	str	r3, [r7, #24]
	j.TIM_OCPolarity = TIM_OCPolarity_High;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	83bb      	strh	r3, [r7, #28]

	g.GPIO_Mode = GPIO_Mode_AF;
 8001574:	f04f 0302 	mov.w	r3, #2
 8001578:	733b      	strb	r3, [r7, #12]
	g.GPIO_OType = GPIO_OType_PP;
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	73bb      	strb	r3, [r7, #14]
	g.GPIO_Pin = GPIO_Pin_5;
 8001580:	f04f 0320 	mov.w	r3, #32
 8001584:	60bb      	str	r3, [r7, #8]
	g.GPIO_PuPd = GPIO_PuPd_UP;
 8001586:	f04f 0301 	mov.w	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
	g.GPIO_Speed = GPIO_Speed_50MHz;
 800158c:	f04f 0303 	mov.w	r3, #3
 8001590:	737b      	strb	r3, [r7, #13]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001592:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001596:	f04f 0101 	mov.w	r1, #1
 800159a:	f002 ffd7 	bl	800454c <RCC_AHBPeriphClockCmd>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_2); // AF 2, 10:
 800159e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015a2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80015a6:	f04f 0105 	mov.w	r1, #5
 80015aa:	f04f 0202 	mov.w	r2, #2
 80015ae:	f002 f825 	bl	80035fc <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &g);
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015ba:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80015be:	4619      	mov	r1, r3
 80015c0:	f001 fe96 	bl	80032f0 <GPIO_Init>


	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80015c4:	f04f 0002 	mov.w	r0, #2
 80015c8:	f04f 0101 	mov.w	r1, #1
 80015cc:	f003 f812 	bl	80045f4 <RCC_APB1PeriphClockCmd>
	TIM_InternalClockConfig(TIM3);
 80015d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015d4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80015d8:	f005 fcba 	bl	8006f50 <TIM_InternalClockConfig>
	TIM_TimeBaseInit(TIM3, &i);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015e4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80015e8:	4619      	mov	r1, r3
 80015ea:	f003 ff69 	bl	80054c0 <TIM_TimeBaseInit>
	TIM_OC2Init(TIM3, &j);
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015f6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80015fa:	4619      	mov	r1, r3
 80015fc:	f004 f9d8 	bl	80059b0 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8001600:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001604:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001608:	f04f 0108 	mov.w	r1, #8
 800160c:	f004 fe0e 	bl	800622c <TIM_OC2PreloadConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);
 8001610:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001614:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001618:	f04f 0101 	mov.w	r1, #1
 800161c:	f004 f8bc 	bl	8005798 <TIM_ARRPreloadConfig>

	TIM_CCxCmd(TIM3, TIM_Channel_2, TIM_CCx_Enable);
 8001620:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001624:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001628:	f04f 0104 	mov.w	r1, #4
 800162c:	f04f 0201 	mov.w	r2, #1
 8001630:	f005 f8d2 	bl	80067d8 <TIM_CCxCmd>
	TIM_Cmd(TIM3, ENABLE);
 8001634:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001638:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800163c:	f04f 0101 	mov.w	r1, #1
 8001640:	f004 f902 	bl	8005848 <TIM_Cmd>
	TIM_GenerateEvent(TIM3, TIM_EventSource_Update);
 8001644:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001648:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800164c:	f04f 0101 	mov.w	r1, #1
 8001650:	f005 fbb0 	bl	8006db4 <TIM_GenerateEvent>
}
 8001654:	f107 0738 	add.w	r7, r7, #56	; 0x38
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_Z11pwm2_outputf>:

void pwm2_output(float duty)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t setval = (uint16_t)((float)TIM3->ARR * duty);
 8001666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800166e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001672:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001676:	edd7 7a01 	vldr	s15, [r7, #4]
 800167a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001682:	ee17 3a90 	vmov	r3, s15
 8001686:	81fb      	strh	r3, [r7, #14]
	TIM_SetCompare2(TIM3, setval);
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800168e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001692:	4619      	mov	r1, r3
 8001694:	f004 fcb6 	bl	8006004 <TIM_SetCompare2>
}
 8001698:	f107 0710 	add.w	r7, r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_Z15config_pwm_freqiPiS_>:

void config_pwm_freq(int frequency, int* period, int* prescaler)
{
 80016a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a4:	b091      	sub	sp, #68	; 0x44
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	466b      	mov	r3, sp
 80016b0:	461e      	mov	r6, r3
	int max = (int)((float)72000000/(float)frequency);
 80016b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ba:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001960 <_Z15config_pwm_freqiPiS_+0x2c0>
 80016be:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80016c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	int max_num = (int)sqrt(max);
 80016ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016cc:	f007 fbcc 	bl	8008e68 <__aeabi_i2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	ec43 2b10 	vmov	d0, r2, r3
 80016d8:	f008 f9fc 	bl	8009ad4 <sqrt>
 80016dc:	ec53 2b10 	vmov	r2, r3, d0
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f007 fec0 	bl	8009468 <__aeabi_d2iz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	623b      	str	r3, [r7, #32]

	int seive[max_num];
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	f103 31ff 	add.w	r1, r3, #4294967295
 80016f2:	61f9      	str	r1, [r7, #28]
 80016f4:	4608      	mov	r0, r1
 80016f6:	4602      	mov	r2, r0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	f04f 0a01 	mov.w	sl, #1
 8001700:	f04f 0b00 	mov.w	fp, #0
 8001704:	eb12 020a 	adds.w	r2, r2, sl
 8001708:	eb43 030b 	adc.w	r3, r3, fp
 800170c:	ea4f 60d2 	mov.w	r0, r2, lsr #27
 8001710:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8001714:	ea40 0909 	orr.w	r9, r0, r9
 8001718:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800171c:	4608      	mov	r0, r1
 800171e:	4602      	mov	r2, r0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	f04f 0801 	mov.w	r8, #1
 8001728:	f04f 0900 	mov.w	r9, #0
 800172c:	eb12 0208 	adds.w	r2, r2, r8
 8001730:	eb43 0309 	adc.w	r3, r3, r9
 8001734:	ea4f 60d2 	mov.w	r0, r2, lsr #27
 8001738:	ea4f 1543 	mov.w	r5, r3, lsl #5
 800173c:	4305      	orrs	r5, r0
 800173e:	ea4f 1442 	mov.w	r4, r2, lsl #5
 8001742:	460b      	mov	r3, r1
 8001744:	f103 0301 	add.w	r3, r3, #1
 8001748:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800174c:	f103 0303 	add.w	r3, r3, #3
 8001750:	f103 0307 	add.w	r3, r3, #7
 8001754:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8001758:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800175c:	ebad 0d03 	sub.w	sp, sp, r3
 8001760:	466b      	mov	r3, sp
 8001762:	f103 0303 	add.w	r3, r3, #3
 8001766:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800176a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800176e:	61bb      	str	r3, [r7, #24]

	int startpos = 1;
 8001770:	f04f 0301 	mov.w	r3, #1
 8001774:	63fb      	str	r3, [r7, #60]	; 0x3c
	int testval = 1;
 8001776:	f04f 0301 	mov.w	r3, #1
 800177a:	617b      	str	r3, [r7, #20]

	int iter = 0;
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
	int iter2;
	for(iter = 0; iter < max_num; ++iter)
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
 8001788:	e00a      	b.n	80017a0 <_Z15config_pwm_freqiPiS_+0x100>
	{
		seive[iter] = iter+1;
 800178a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178c:	f103 0101 	add.w	r1, r3, #1
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	int startpos = 1;
	int testval = 1;

	int iter = 0;
	int iter2;
	for(iter = 0; iter < max_num; ++iter)
 8001798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179a:	f103 0301 	add.w	r3, r3, #1
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
 80017a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	bfac      	ite	ge
 80017a8:	2300      	movge	r3, #0
 80017aa:	2301      	movlt	r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1eb      	bne.n	800178a <_Z15config_pwm_freqiPiS_+0xea>
	{
		seive[iter] = iter+1;
	}

	while(startpos < max_num)
 80017b2:	e038      	b.n	8001826 <_Z15config_pwm_freqiPiS_+0x186>
	{
		testval = seive[startpos];
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017bc:	617b      	str	r3, [r7, #20]
		if(testval != -1)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d02b      	beq.n	800181e <_Z15config_pwm_freqiPiS_+0x17e>
		{
		for(iter = startpos+1; iter < max_num; ++iter)
 80017c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c8:	f103 0301 	add.w	r3, r3, #1
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80017ce:	e01d      	b.n	800180c <_Z15config_pwm_freqiPiS_+0x16c>
		{
			if((seive[iter] != -1) && ((seive[iter])%testval == 0))
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d012      	beq.n	8001804 <_Z15config_pwm_freqiPiS_+0x164>
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	fb93 f2f2 	sdiv	r2, r3, r2
 80017ec:	6979      	ldr	r1, [r7, #20]
 80017ee:	fb01 f202 	mul.w	r2, r1, r2
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <_Z15config_pwm_freqiPiS_+0x164>
			{
				seive[iter] = -1;
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	while(startpos < max_num)
	{
		testval = seive[startpos];
		if(testval != -1)
		{
		for(iter = startpos+1; iter < max_num; ++iter)
 8001804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001806:	f103 0301 	add.w	r3, r3, #1
 800180a:	63bb      	str	r3, [r7, #56]	; 0x38
 800180c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	429a      	cmp	r2, r3
 8001812:	bfac      	ite	ge
 8001814:	2300      	movge	r3, #0
 8001816:	2301      	movlt	r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1d8      	bne.n	80017d0 <_Z15config_pwm_freqiPiS_+0x130>
			{
				seive[iter] = -1;
			}
		}
		}
		++startpos;
 800181e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001820:	f103 0301 	add.w	r3, r3, #1
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(iter = 0; iter < max_num; ++iter)
	{
		seive[iter] = iter+1;
	}

	while(startpos < max_num)
 8001826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	429a      	cmp	r2, r3
 800182c:	bfac      	ite	ge
 800182e:	2300      	movge	r3, #0
 8001830:	2301      	movlt	r3, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1bd      	bne.n	80017b4 <_Z15config_pwm_freqiPiS_+0x114>
		++startpos;
	}

	int last_valid_iter;

	iter = 0;
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
	for(iter = 0; iter < max_num; ++iter)
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
 8001844:	e03e      	b.n	80018c4 <_Z15config_pwm_freqiPiS_+0x224>
	{
		if(seive[iter] != -1)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800184a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001852:	d002      	beq.n	800185a <_Z15config_pwm_freqiPiS_+0x1ba>
		{
		last_valid_iter = iter;
 8001854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
 8001858:	e030      	b.n	80018bc <_Z15config_pwm_freqiPiS_+0x21c>
		}
		else
		{
			for(iter2 = iter; iter2<max_num; ++iter2)
 800185a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
 800185e:	e024      	b.n	80018aa <_Z15config_pwm_freqiPiS_+0x20a>
			{
				if(seive[iter2] != -1)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d019      	beq.n	80018a2 <_Z15config_pwm_freqiPiS_+0x202>
				{
				seive[last_valid_iter+1] = seive[iter2];
 800186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001870:	f103 0201 	add.w	r2, r3, #1
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001878:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				seive[iter2] = -1;
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001886:	f04f 31ff 	mov.w	r1, #4294967295
 800188a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				iter = iter2;
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001890:	63bb      	str	r3, [r7, #56]	; 0x38
				last_valid_iter += 1;
 8001892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001894:	f103 0301 	add.w	r3, r3, #1
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
				iter2 = max_num+1;
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	f103 0301 	add.w	r3, r3, #1
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
		last_valid_iter = iter;
		}
		else
		{
			for(iter2 = iter; iter2<max_num; ++iter2)
 80018a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a4:	f103 0301 	add.w	r3, r3, #1
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
 80018aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	bfac      	ite	ge
 80018b2:	2300      	movge	r3, #0
 80018b4:	2301      	movlt	r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1d1      	bne.n	8001860 <_Z15config_pwm_freqiPiS_+0x1c0>
	}

	int last_valid_iter;

	iter = 0;
	for(iter = 0; iter < max_num; ++iter)
 80018bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018be:	f103 0301 	add.w	r3, r3, #1
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80018c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	bfac      	ite	ge
 80018cc:	2300      	movge	r3, #0
 80018ce:	2301      	movlt	r3, #1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1b7      	bne.n	8001846 <_Z15config_pwm_freqiPiS_+0x1a6>
				}
			}
		}
	}

	int i = max;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int clkdiv = 1;
 80018da:	f04f 0301 	mov.w	r3, #1
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
	int divisor = 1;
 80018e0:	f04f 0301 	mov.w	r3, #1
 80018e4:	613b      	str	r3, [r7, #16]

	while(i > 1)
 80018e6:	e03e      	b.n	8001966 <_Z15config_pwm_freqiPiS_+0x2c6>
	{
	for(iter = 1; iter < max_num; ++iter)
 80018e8:	f04f 0301 	mov.w	r3, #1
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80018ee:	e02c      	b.n	800194a <_Z15config_pwm_freqiPiS_+0x2aa>
	{
		divisor = seive[iter];
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f8:	613b      	str	r3, [r7, #16]
		if(divisor == -1){break;}
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d030      	beq.n	8001964 <_Z15config_pwm_freqiPiS_+0x2c4>
		else
		{
		if(i%divisor == 0)
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	fb93 f2f2 	sdiv	r2, r3, r2
 800190a:	6939      	ldr	r1, [r7, #16]
 800190c:	fb01 f202 	mul.w	r2, r1, r2
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <_Z15config_pwm_freqiPiS_+0x2a2>
			{
			i /= divisor;
 8001916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	fb92 f3f3 	sdiv	r3, r2, r3
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
			clkdiv *= divisor;
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
			if(i < 65536)
 800192a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001930:	429a      	cmp	r2, r3
 8001932:	dc06      	bgt.n	8001942 <_Z15config_pwm_freqiPiS_+0x2a2>
				{
				*period = i;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001938:	601a      	str	r2, [r3, #0]
				*prescaler = clkdiv;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e019      	b.n	8001976 <_Z15config_pwm_freqiPiS_+0x2d6>
	int clkdiv = 1;
	int divisor = 1;

	while(i > 1)
	{
	for(iter = 1; iter < max_num; ++iter)
 8001942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001944:	f103 0301 	add.w	r3, r3, #1
 8001948:	63bb      	str	r3, [r7, #56]	; 0x38
 800194a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	429a      	cmp	r2, r3
 8001950:	bfac      	ite	ge
 8001952:	2300      	movge	r3, #0
 8001954:	2301      	movlt	r3, #1
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1c9      	bne.n	80018f0 <_Z15config_pwm_freqiPiS_+0x250>
 800195c:	e003      	b.n	8001966 <_Z15config_pwm_freqiPiS_+0x2c6>
 800195e:	bf00      	nop
 8001960:	4c895440 	.word	0x4c895440
	{
		divisor = seive[iter];
		if(divisor == -1){break;}
 8001964:	bf00      	nop

	int i = max;
	int clkdiv = 1;
	int divisor = 1;

	while(i > 1)
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	2b01      	cmp	r3, #1
 800196a:	bfd4      	ite	le
 800196c:	2300      	movle	r3, #0
 800196e:	2301      	movgt	r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1b8      	bne.n	80018e8 <_Z15config_pwm_freqiPiS_+0x248>
 8001976:	46b5      	mov	sp, r6
				}
			}
		}
	}
	}
}
 8001978:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001982:	bf00      	nop

08001984 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2,3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));


  if((ADCx == ADC1) || (ADCx == ADC2))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001992:	d006      	beq.n	80019a2 <ADC_DeInit+0x1e>
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800199e:	429a      	cmp	r2, r3
 80019a0:	d10c      	bne.n	80019bc <ADC_DeInit+0x38>
  {
    /* Enable ADC1/ADC2 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, ENABLE);
 80019a2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019a6:	f04f 0101 	mov.w	r1, #1
 80019aa:	f002 fe4d 	bl	8004648 <RCC_AHBPeriphResetCmd>
    /* Release ADC1/ADC2 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, DISABLE);
 80019ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	f002 fe47 	bl	8004648 <RCC_AHBPeriphResetCmd>
 80019ba:	e019      	b.n	80019f0 <ADC_DeInit+0x6c>
  }
  else if((ADCx == ADC3) || (ADCx == ADC4))
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c2:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d006      	beq.n	80019d8 <ADC_DeInit+0x54>
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80019d0:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d10b      	bne.n	80019f0 <ADC_DeInit+0x6c>
  {
    /* Enable ADC3/ADC4 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, ENABLE);
 80019d8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80019dc:	f04f 0101 	mov.w	r1, #1
 80019e0:	f002 fe32 	bl	8004648 <RCC_AHBPeriphResetCmd>
    /* Release ADC3/ADC4 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, DISABLE);
 80019e4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	f002 fe2c 	bl	8004648 <RCC_AHBPeriphResetCmd>
  }
}
 80019f0:	f107 0708 	add.w	r7, r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60fb      	str	r3, [r7, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	f24c 0307 	movw	r3, #49159	; 0xc007
 8001a14:	f6cf 53ff 	movt	r3, #65023	; 0xfdff
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution|                 
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
  tmpreg1 = ADCx->CFGR;
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8001a24:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
 8001a2a:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8001a30:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8001a36:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
 8001a3c:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_OverrunMode|        
  ADC_InitStruct->ADC_AutoInjMode;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
 8001a42:	4313      	orrs	r3, r2
  tmpreg1 = ADCx->CFGR;
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
  ADC_InitStruct->ADC_AutoInjMode;
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	60da      	str	r2, [r3, #12]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f023 030f 	bic.w	r3, r3, #15
 8001a5c:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	7f1b      	ldrb	r3, [r3, #28]
 8001a62:	f103 33ff 	add.w	r3, r3, #4294967295
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
   
}  
 8001a72:	f107 0714 	add.w	r7, r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f04f 0201 	mov.w	r2, #1
 8001ac2:	771a      	strb	r2, [r3, #28]
}
 8001ac4:	f107 070c 	add.w	r7, r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop

08001ad0 <ADC_InjectedInit>:
  * @param  ADC_InjectInitStruct: pointer to an ADC_InjecInitTypeDef structure that contains
  *         the configuration information for the specified ADC injected channel.
  * @retval None
  */
void ADC_InjectedInit(ADC_TypeDef* ADCx, ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence3));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence4));
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  /* Get the ADCx JSQR value */
  tmpreg1 = ADCx->JSQR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7a1b      	ldrb	r3, [r3, #8]
 8001af0:	f103 33ff 	add.w	r3, r3, #4294967295
 8001af4:	461a      	mov	r2, r3
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 8001afa:	431a      	orrs	r2, r3
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
 8001b00:	431a      	orrs	r2, r3
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	ea4f 2303 	mov.w	r3, r3, lsl #8
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 8001b0a:	431a      	orrs	r2, r3
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	ea4f 3383 	mov.w	r3, r3, lsl #14
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
 8001b14:	431a      	orrs	r2, r3
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	ea4f 5303 	mov.w	r3, r3, lsl #20
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
 8001b1e:	431a      	orrs	r2, r3
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence4) << 26));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	ea4f 6383 	mov.w	r3, r3, lsl #26
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence4) << 26));
  /* Write to ADCx SQR1 */
  ADCx->JSQR = tmpreg1;  
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001b32:	f107 0714 	add.w	r7, r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <ADC_InjectedStructInit>:
  * @brief  Fills each ADC_InjectedInitStruct member with its default value.
  * @param  ADC_InjectedInitStruct : pointer to an ADC_InjectedInitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_InjectedStructInit(ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent = ADC_ExternalTrigInjecConvEvent_0;    
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
  ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge = ADC_ExternalTrigInjecEventEdge_None;     
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	605a      	str	r2, [r3, #4]
  ADC_InjectedInitStruct->ADC_NbrOfInjecChannel = 1;                                                             
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f04f 0201 	mov.w	r2, #1
 8001b5a:	721a      	strb	r2, [r3, #8]
  ADC_InjectedInitStruct->ADC_InjecSequence1 = ADC_InjectedChannel_1; 
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f04f 0201 	mov.w	r2, #1
 8001b62:	60da      	str	r2, [r3, #12]
  ADC_InjectedInitStruct->ADC_InjecSequence2 = ADC_InjectedChannel_1;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f04f 0201 	mov.w	r2, #1
 8001b6a:	611a      	str	r2, [r3, #16]
  ADC_InjectedInitStruct->ADC_InjecSequence3 = ADC_InjectedChannel_1;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f04f 0201 	mov.w	r2, #1
 8001b72:	615a      	str	r2, [r3, #20]
  ADC_InjectedInitStruct->ADC_InjecSequence4 = ADC_InjectedChannel_1; 
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f04f 0201 	mov.w	r2, #1
 8001b7a:	619a      	str	r2, [r3, #24]
}
 8001b7c:	f107 070c 	add.w	r7, r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop

08001b88 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_TypeDef* ADCx, ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CLOCKMODE(ADC_CommonInitStruct->ADC_Clock));
  assert_param(IS_ADC_DMA_MODE(ADC_CommonInitStruct->ADC_DMAMode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_TWOSAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b9e:	d006      	beq.n	8001bae <ADC_CommonInit+0x26>
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba6:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d10d      	bne.n	8001bca <ADC_CommonInit+0x42>
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC1_2->CCR;
 8001bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bb2:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	60fb      	str	r3, [r7, #12]
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 8001bc0:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e00c      	b.n	8001be4 <ADC_CommonInit+0x5c>
  }
  else
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC3_4->CCR;
 8001bca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001bce:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	60fb      	str	r3, [r7, #12]
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 8001bdc:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Clock | 
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001bec:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Clock | 
 8001bf2:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8001bfc:	431a      	orrs	r2, r3
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7c1b      	ldrb	r3, [r3, #16]
 8001c02:	ea4f 2303 	mov.w	r3, r3, lsl #8
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001c06:	4313      	orrs	r3, r2
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c14:	d006      	beq.n	8001c24 <ADC_CommonInit+0x9c>
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1c:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d106      	bne.n	8001c32 <ADC_CommonInit+0xaa>
  {                        
    /* Write to ADC CCR */
    ADC1_2->CCR = tmpreg1;
 8001c24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c28:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	e005      	b.n	8001c3e <ADC_CommonInit+0xb6>
  }
  else
  {
    /* Write to ADC CCR */
    ADC3_4->CCR = tmpreg1;
 8001c32:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c36:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	609a      	str	r2, [r3, #8]
  }
}
 8001c3e:	f107 0714 	add.w	r7, r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Clock member */
  ADC_CommonInitStruct->ADC_Clock = ADC_Clock_AsynClkMode;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_DMAMode member */
  ADC_CommonInitStruct->ADC_DMAMode = ADC_DMAMode_OneShot;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = 0;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	741a      	strb	r2, [r3, #16]

}
 8001c78:	f107 070c 	add.w	r7, r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop

08001c84 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <ADC_Cmd+0x20>
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	e005      	b.n	8001cb0 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f043 0202 	orr.w	r2, r3, #2
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]
  }
}
 8001cb0:	f107 070c 	add.w	r7, r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]
}
 8001cd0:	f107 070c 	add.w	r7, r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop

08001cdc <ADC_GetCalibrationValue>:
  * @brief  Returns the ADCx calibration value.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
uint32_t ADC_GetCalibrationValue(ADC_TypeDef* ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC calibration value */
  return (uint32_t)ADCx->CALFACT;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	f107 070c 	add.w	r7, r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop

08001cf8 <ADC_SetCalibrationValue>:
  * @brief  Sets the ADCx calibration register.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_SetCalibrationValue(ADC_TypeDef* ADCx, uint32_t ADC_Calibration)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADC calibration register value */
  ADCx->CALFACT = ADC_Calibration;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8001d0a:	f107 070c 	add.w	r7, r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <ADC_SelectCalibrationMode>:
  *          @arg ADC_CalibrationMode_Single: to select the calibration for single channel
  *          @arg ADC_CalibrationMode_Differential: to select the calibration for differential channel         
  * @retval None
  */
void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	609a      	str	r2, [r3, #8]
  ADCx->CR |= ADC_CalibrationMode;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	609a      	str	r2, [r3, #8]

}
 8001d36:	f107 070c 	add.w	r7, r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da03      	bge.n	8001d5e <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8001d56:	f04f 0301 	mov.w	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e002      	b.n	8001d64 <ADC_GetCalibrationStatus+0x24>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	f107 0714 	add.w	r7, r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop

08001d74 <ADC_DisableCmd>:
  * @brief  ADC Disable Command.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_DisableCmd(ADC_TypeDef* ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADDIS bit */
  ADCx->CR |= ADC_CR_ADDIS;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f043 0202 	orr.w	r2, r3, #2
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
}
 8001d88:	f107 070c 	add.w	r7, r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop

08001d94 <ADC_GetDisableCmdStatus>:
  * @brief  Gets the selected ADC disable command Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC ADC disable command (SET or RESET).
  */
FlagStatus ADC_GetDisableCmdStatus(ADC_TypeDef* ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of ADDIS bit */
  if ((ADCx->CR & ADC_CR_ADDIS) != (uint32_t)RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <ADC_GetDisableCmdStatus+0x22>
  {
    /* ADDIS bit is set */
    bitstatus = SET;
 8001dae:	f04f 0301 	mov.w	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e002      	b.n	8001dbc <ADC_GetDisableCmdStatus+0x28>
  }
  else
  {
    /* ADDIS bit is reset */
    bitstatus = RESET;
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADDIS bit status */
  return  bitstatus;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f107 0714 	add.w	r7, r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop

08001dcc <ADC_VoltageRegulatorCmd>:
  * @param  NewState: new state of the ADCx Voltage Regulator.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]
  
  if (NewState != DISABLE)
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <ADC_VoltageRegulatorCmd+0x2c>
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	e005      	b.n	8001e04 <ADC_VoltageRegulatorCmd+0x38>
  }
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]
  }
}
 8001e04:	f107 070c 	add.w	r7, r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop

08001e10 <ADC_SelectDifferentialMode>:
  *     @arg ADC_Channel_14: ADC Channel14 selected
  * @note : Channel 15, 16 and 17 are fixed to single-ended inputs mode.
  * @retval None
  */
void ADC_SelectDifferentialMode(ADC_TypeDef* ADCx, uint8_t ADC_Channel, FunctionalState NewState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	460a      	mov	r2, r1
 8001e1c:	70fa      	strb	r2, [r7, #3]
 8001e1e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_ADC_DIFFCHANNEL(ADC_Channel)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00c      	beq.n	8001e40 <ADC_SelectDifferentialMode+0x30>
  {
    /* Set the DIFSEL bit */
   ADCx->DIFSEL |= (uint32_t)(1 << ADC_Channel );
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f04f 0101 	mov.w	r1, #1
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e3e:	e00d      	b.n	8001e5c <ADC_SelectDifferentialMode+0x4c>
  }
  else
  {
    /* Reset the DIFSEL bit */
   ADCx->DIFSEL &= ~(uint32_t)(1 << ADC_Channel);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	f04f 0101 	mov.w	r1, #1
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	ea6f 0303 	mvn.w	r3, r3
 8001e54:	401a      	ands	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
}
 8001e5c:	f107 070c 	add.w	r7, r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <ADC_SelectQueueOfContextMode>:
  * @param  NewState: new state of the Queue Of Context Mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SelectQueueOfContextMode(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <ADC_SelectQueueOfContextMode+0x20>
  {
    /* Set the JQM bit */
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_JQM );
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	e005      	b.n	8001e94 <ADC_SelectQueueOfContextMode+0x2c>
  }
  else
  {
    /* Reset the JQM bit */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_JQM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]
  }
}
 8001e94:	f107 070c 	add.w	r7, r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <ADC_AutoDelayCmd>:
  * @param  NewState: new state of the ADC Delayed Conversion Mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoDelayCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d006      	beq.n	8001ec0 <ADC_AutoDelayCmd+0x20>
  {
    /* Set the AUTDLY bit */
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_AUTDLY );
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	e005      	b.n	8001ecc <ADC_AutoDelayCmd+0x2c>
  }
  else
  {
    /* Reset the AUTDLY bit */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_AUTDLY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	60da      	str	r2, [r3, #12]
  }
}
 8001ecc:	f107 070c 	add.w	r7, r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CFGR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= ~(uint32_t)(ADC_CFGR_AWD1SGL|ADC_CFGR_AWD1EN|ADC_CFGR_JAWD1EN);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001ef4:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CFGR = tmpreg;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	60da      	str	r2, [r3, #12]
}
 8001f04:	f107 0714 	add.w	r7, r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop

08001f10 <ADC_AnalogWatchdog1ThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdog1ThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                         uint16_t LowThreshold)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	460a      	mov	r2, r1
 8001f1c:	807a      	strh	r2, [r7, #2]
 8001f1e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->TR1 &= ~(uint32_t)ADC_TR1_HT1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8001f28:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6213      	str	r3, [r2, #32]
  ADCx->TR1 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	621a      	str	r2, [r3, #32]

  /* Set the ADCx low threshold */
  ADCx->TR1 &= ~(uint32_t)ADC_TR1_LT1;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f48:	f023 030f 	bic.w	r3, r3, #15
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6213      	str	r3, [r2, #32]
  ADCx->TR1 |= LowThreshold;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	883b      	ldrh	r3, [r7, #0]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	621a      	str	r2, [r3, #32]
}
 8001f5c:	f107 070c 	add.w	r7, r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop

08001f68 <ADC_AnalogWatchdog2ThresholdsConfig>:
  *   This parameter must be a 8bit value.
  * @retval None
  */
void ADC_AnalogWatchdog2ThresholdsConfig(ADC_TypeDef* ADCx, uint8_t HighThreshold,
                                         uint8_t LowThreshold)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	460a      	mov	r2, r1
 8001f74:	70fa      	strb	r2, [r7, #3]
 8001f76:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADCx high threshold */
  ADCx->TR2 &= ~(uint32_t)ADC_TR2_HT2;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
  ADCx->TR2 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the ADCx low threshold */
  ADCx->TR2 &= ~(uint32_t)ADC_TR2_LT2;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24
  ADCx->TR2 |= LowThreshold;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa4:	78bb      	ldrb	r3, [r7, #2]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001fac:	f107 070c 	add.w	r7, r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop

08001fb8 <ADC_AnalogWatchdog3ThresholdsConfig>:
  *   This parameter must be a 8bit value.
  * @retval None
  */
void ADC_AnalogWatchdog3ThresholdsConfig(ADC_TypeDef* ADCx, uint8_t HighThreshold,
                                         uint8_t LowThreshold)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	460a      	mov	r2, r1
 8001fc4:	70fa      	strb	r2, [r7, #3]
 8001fc6:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCx high threshold */
  ADCx->TR3 &= ~(uint32_t)ADC_TR3_HT3;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
  ADCx->TR3 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the ADCx low threshold */
  ADCx->TR3 &= ~(uint32_t)ADC_TR3_LT3;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
  ADCx->TR3 |= LowThreshold;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff4:	78bb      	ldrb	r3, [r7, #2]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ffc:	f107 070c 	add.w	r7, r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop

08002008 <ADC_AnalogWatchdog1SingleChannelConfig>:
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog1SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CFGR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_CFGR_AWD1CH;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002026:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)((uint32_t)ADC_Channel << 26);
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	ea4f 6383 	mov.w	r3, r3, lsl #26
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CFGR = tmpreg;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	60da      	str	r2, [r3, #12]
}
 800203a:	f107 0714 	add.w	r7, r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <ADC_AnalogWatchdog2SingleChannelConfig>:
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog2SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->AWD2CR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800205c:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_AWD2CR_AWD2CH;
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	f04f 0301 	mov.w	r3, #1
 8002064:	f6cf 73f8 	movt	r3, #65528	; 0xfff8
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)1 << (ADC_Channel);
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f04f 0201 	mov.w	r2, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->AWD2CR |= tmpreg;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 800208c:	f107 0714 	add.w	r7, r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop

08002098 <ADC_AnalogWatchdog3SingleChannelConfig>:
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog3SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->AWD3CR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80020b0:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_AWD3CR_AWD3CH;
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	f04f 0301 	mov.w	r3, #1
 80020b8:	f6cf 73f8 	movt	r3, #65528	; 0xfff8
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)1 << (ADC_Channel);
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f04f 0201 	mov.w	r2, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->AWD3CR |= tmpreg;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80020e0:	f107 0714 	add.w	r7, r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <ADC_TempSensorCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020fe:	d006      	beq.n	800210e <ADC_TempSensorCmd+0x22>
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002106:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800210a:	429a      	cmp	r2, r3
 800210c:	d11c      	bne.n	8002148 <ADC_TempSensorCmd+0x5c>
  {
    if (NewState != DISABLE)
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00c      	beq.n	800212e <ADC_TempSensorCmd+0x42>
    {
      /* Enable the temperature sensor channel*/
      ADC1_2->CCR |= ADC12_CCR_TSEN;
 8002114:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002118:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800211c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002120:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8002124:	6892      	ldr	r2, [r2, #8]
 8002126:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800212a:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 800212c:	e028      	b.n	8002180 <ADC_TempSensorCmd+0x94>
      ADC1_2->CCR |= ADC12_CCR_TSEN;
    }
    else
    {
      /* Disable the temperature sensor channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_TSEN;
 800212e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002132:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002136:	f44f 7240 	mov.w	r2, #768	; 0x300
 800213a:	f2c5 0200 	movt	r2, #20480	; 0x5000
 800213e:	6892      	ldr	r2, [r2, #8]
 8002140:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002144:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8002146:	e01b      	b.n	8002180 <ADC_TempSensorCmd+0x94>
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_TSEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <ADC_TempSensorCmd+0x7c>
    {
      /* Enable the temperature sensor channel*/
      ADC3_4->CCR |= ADC34_CCR_TSEN;
 800214e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002152:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002156:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800215a:	f2c5 0200 	movt	r2, #20480	; 0x5000
 800215e:	6892      	ldr	r2, [r2, #8]
 8002160:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	e00b      	b.n	8002180 <ADC_TempSensorCmd+0x94>
    }
    else
    {
      /* Disable the temperature sensor channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_TSEN;
 8002168:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800216c:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002170:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002174:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8002178:	6892      	ldr	r2, [r2, #8]
 800217a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800217e:	609a      	str	r2, [r3, #8]
    }
  }
}
 8002180:	f107 070c 	add.w	r7, r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <ADC_VrefintCmd>:
  * @param  NewState: new state of the Vrefint.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VrefintCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800219e:	d006      	beq.n	80021ae <ADC_VrefintCmd+0x22>
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a6:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d11c      	bne.n	80021e8 <ADC_VrefintCmd+0x5c>
  {
    if (NewState != DISABLE)
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00c      	beq.n	80021ce <ADC_VrefintCmd+0x42>
    {
      /* Enable the Vrefint channel*/
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
 80021b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021b8:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80021bc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021c0:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80021c4:	6892      	ldr	r2, [r2, #8]
 80021c6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80021ca:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 80021cc:	e028      	b.n	8002220 <ADC_VrefintCmd+0x94>
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
 80021ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021d2:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80021d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021da:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80021de:	6892      	ldr	r2, [r2, #8]
 80021e0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80021e4:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 80021e6:	e01b      	b.n	8002220 <ADC_VrefintCmd+0x94>
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00c      	beq.n	8002208 <ADC_VrefintCmd+0x7c>
    {
      /* Enable the Vrefint channel*/
      ADC3_4->CCR |= ADC34_CCR_VREFEN;
 80021ee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80021f2:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80021f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021fa:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80021fe:	6892      	ldr	r2, [r2, #8]
 8002200:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	e00b      	b.n	8002220 <ADC_VrefintCmd+0x94>
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
 8002208:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800220c:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002210:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002214:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8002218:	6892      	ldr	r2, [r2, #8]
 800221a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800221e:	609a      	str	r2, [r3, #8]
    }
  }
}
 8002220:	f107 070c 	add.w	r7, r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop

0800222c <ADC_VbatCmd>:
  * @param  NewState: new state of the Vbat.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VbatCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800223e:	d006      	beq.n	800224e <ADC_VbatCmd+0x22>
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002246:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800224a:	429a      	cmp	r2, r3
 800224c:	d11c      	bne.n	8002288 <ADC_VbatCmd+0x5c>
  {
    if (NewState != DISABLE)
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00c      	beq.n	800226e <ADC_VbatCmd+0x42>
    {
      /* Enable the Vbat channel*/
      ADC1_2->CCR |= ADC12_CCR_VBATEN;
 8002254:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002258:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800225c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002260:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8002264:	6892      	ldr	r2, [r2, #8]
 8002266:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800226a:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 800226c:	e028      	b.n	80022c0 <ADC_VbatCmd+0x94>
      ADC1_2->CCR |= ADC12_CCR_VBATEN;
    }
    else
    {
      /* Disable the Vbat channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VBATEN;
 800226e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002272:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002276:	f44f 7240 	mov.w	r2, #768	; 0x300
 800227a:	f2c5 0200 	movt	r2, #20480	; 0x5000
 800227e:	6892      	ldr	r2, [r2, #8]
 8002280:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002284:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8002286:	e01b      	b.n	80022c0 <ADC_VbatCmd+0x94>
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VBATEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <ADC_VbatCmd+0x7c>
    {
      /* Enable the Vbat channel*/
      ADC3_4->CCR |= ADC34_CCR_VBATEN;
 800228e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002292:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002296:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800229a:	f2c5 0200 	movt	r2, #20480	; 0x5000
 800229e:	6892      	ldr	r2, [r2, #8]
 80022a0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	e00b      	b.n	80022c0 <ADC_VbatCmd+0x94>
    }
    else
    {
      /* Disable the Vbat channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VBATEN;
 80022a8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022ac:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80022b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022b4:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80022b8:	6892      	ldr	r2, [r2, #8]
 80022ba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80022be:	609a      	str	r2, [r3, #8]
    }
  }
}
 80022c0:	f107 070c 	add.w	r7, r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop

080022cc <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	70f9      	strb	r1, [r7, #3]
 80022d6:	70ba      	strb	r2, [r7, #2]
 80022d8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 80022e6:	78bb      	ldrb	r3, [r7, #2]
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d827      	bhi.n	800233c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 80022f2:	78ba      	ldrb	r2, [r7, #2]
 80022f4:	4613      	mov	r3, r2
 80022f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80022fa:	189b      	adds	r3, r3, r2
 80022fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002300:	f04f 021f 	mov.w	r2, #31
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	ea6f 0303 	mvn.w	r3, r3
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8002316:	78f9      	ldrb	r1, [r7, #3]
 8002318:	78ba      	ldrb	r2, [r7, #2]
 800231a:	4613      	mov	r3, r2
 800231c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002320:	189b      	adds	r3, r3, r2
 8002322:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4313      	orrs	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
 800233a:	e088      	b.n	800244e <ADC_RegularChannelConfig+0x182>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 800233c:	78bb      	ldrb	r3, [r7, #2]
 800233e:	2b09      	cmp	r3, #9
 8002340:	d82b      	bhi.n	800239a <ADC_RegularChannelConfig+0xce>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8002348:	78ba      	ldrb	r2, [r7, #2]
 800234a:	4613      	mov	r3, r2
 800234c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002350:	189b      	adds	r3, r3, r2
 8002352:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002356:	f1a3 031e 	sub.w	r3, r3, #30
 800235a:	f04f 021f 	mov.w	r2, #31
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	ea6f 0303 	mvn.w	r3, r3
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8002370:	78f9      	ldrb	r1, [r7, #3]
 8002372:	78ba      	ldrb	r2, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800237a:	189b      	adds	r3, r3, r2
 800237c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002380:	f1a3 031e 	sub.w	r3, r3, #30
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	635a      	str	r2, [r3, #52]	; 0x34
 8002398:	e059      	b.n	800244e <ADC_RegularChannelConfig+0x182>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 800239a:	78bb      	ldrb	r3, [r7, #2]
 800239c:	2b0e      	cmp	r3, #14
 800239e:	d82b      	bhi.n	80023f8 <ADC_RegularChannelConfig+0x12c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 80023a6:	78ba      	ldrb	r2, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80023b4:	f1a3 033c 	sub.w	r3, r3, #60	; 0x3c
 80023b8:	f04f 021f 	mov.w	r2, #31
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	ea6f 0303 	mvn.w	r3, r3
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4013      	ands	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 80023ce:	78f9      	ldrb	r1, [r7, #3]
 80023d0:	78ba      	ldrb	r2, [r7, #2]
 80023d2:	4613      	mov	r3, r2
 80023d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80023d8:	189b      	adds	r3, r3, r2
 80023da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80023de:	f1a3 033c 	sub.w	r3, r3, #60	; 0x3c
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
 80023f6:	e02a      	b.n	800244e <ADC_RegularChannelConfig+0x182>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 80023fe:	78ba      	ldrb	r2, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002406:	189b      	adds	r3, r3, r2
 8002408:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800240c:	f1a3 035a 	sub.w	r3, r3, #90	; 0x5a
 8002410:	f04f 021f 	mov.w	r2, #31
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	ea6f 0303 	mvn.w	r3, r3
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8002426:	78f9      	ldrb	r1, [r7, #3]
 8002428:	78ba      	ldrb	r2, [r7, #2]
 800242a:	4613      	mov	r3, r2
 800242c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002430:	189b      	adds	r3, r3, r2
 8002432:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002436:	f1a3 035a 	sub.w	r3, r3, #90	; 0x5a
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	2b09      	cmp	r3, #9
 8002452:	d927      	bls.n	80024a4 <ADC_RegularChannelConfig+0x1d8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	4613      	mov	r3, r2
 800245e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002462:	189b      	adds	r3, r3, r2
 8002464:	f1a3 031e 	sub.w	r3, r3, #30
 8002468:	f04f 0207 	mov.w	r2, #7
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	ea6f 0303 	mvn.w	r3, r3
 800247c:	401a      	ands	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6999      	ldr	r1, [r3, #24]
 8002486:	7878      	ldrb	r0, [r7, #1]
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	4613      	mov	r3, r2
 800248c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002490:	189b      	adds	r3, r3, r2
 8002492:	f1a3 031e 	sub.w	r3, r3, #30
 8002496:	fa00 f303 	lsl.w	r3, r0, r3
 800249a:	ea41 0203 	orr.w	r2, r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	619a      	str	r2, [r3, #24]
 80024a2:	e024      	b.n	80024ee <ADC_RegularChannelConfig+0x222>

  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	f103 32ff 	add.w	r2, r3, #4294967295
 80024b0:	4613      	mov	r3, r2
 80024b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80024b6:	189b      	adds	r3, r3, r2
 80024b8:	f04f 0238 	mov.w	r2, #56	; 0x38
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	ea6f 0303 	mvn.w	r3, r3
 80024cc:	401a      	ands	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	615a      	str	r2, [r3, #20]
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6959      	ldr	r1, [r3, #20]
 80024d6:	7878      	ldrb	r0, [r7, #1]
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	4613      	mov	r3, r2
 80024dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80024e0:	189b      	adds	r3, r3, r2
 80024e2:	fa00 f303 	lsl.w	r3, r0, r3
 80024e6:	ea41 0203 	orr.w	r2, r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	615a      	str	r2, [r3, #20]
  }
}
 80024ee:	f107 0714 	add.w	r7, r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <ADC_RegularChannelSequencerLengthConfig>:
  * @param  SequenceLength: The Regular sequence length. This parameter must be between 1 to 16.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_RegularChannelSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t SequencerLength)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Configure the ADC sequence lenght */  
  ADCx->SQR1 &= ~(uint32_t)ADC_SQR1_L;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f023 020f 	bic.w	r2, r3, #15
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
  ADCx->SQR1 |= (uint32_t)(SequencerLength - 1);   
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	f103 33ff 	add.w	r3, r3, #4294967295
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002520:	f107 070c 	add.w	r7, r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <ADC_ExternalTriggerConfig>:
  *     @arg ADC_ExternalTrigEventEdge_FallingEdge: Hardware trigger detection on the falling edge
  *     @arg ADC_ExternalTrigEventEdge_BothEdge: Hardware trigger detection on both the rising and falling edges	
  * @retval None
  */
void ADC_ExternalTriggerConfig(ADC_TypeDef* ADCx, uint16_t ADC_ExternalTrigConvEvent, uint16_t ADC_ExternalTrigEventEdge)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	460a      	mov	r2, r1
 8002538:	807a      	strh	r2, [r7, #2]
 800253a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_TRIG(ADC_ExternalTrigConvEvent));
  assert_param(IS_EXTERNALTRIG_EDGE(ADC_ExternalTrigEventEdge));

  /* Disable the selected ADC conversion on external event */
  ADCx->CFGR &= ~(ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f423 627c 	bic.w	r2, r3, #4032	; 0xfc0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	60da      	str	r2, [r3, #12]
  ADCx->CFGR |= (uint32_t)(ADC_ExternalTrigEventEdge | ADC_ExternalTrigConvEvent);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	8839      	ldrh	r1, [r7, #0]
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	430b      	orrs	r3, r1
 8002552:	b29b      	uxth	r3, r3
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60da      	str	r2, [r3, #12]
}
 800255a:	f107 070c 	add.w	r7, r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f043 0204 	orr.w	r2, r3, #4
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	f107 070c 	add.w	r7, r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop

08002584 <ADC_GetStartConversionStatus>:
  * @brief  Gets the selected ADC start conversion Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC start conversion (SET or RESET).
  */
FlagStatus ADC_GetStartConversionStatus(ADC_TypeDef* ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of ADSTART bit */
  if ((ADCx->CR & ADC_CR_ADSTART) != (uint32_t)RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <ADC_GetStartConversionStatus+0x22>
  {
    /* ADSTART bit is set */
    bitstatus = SET;
 800259e:	f04f 0301 	mov.w	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e002      	b.n	80025ac <ADC_GetStartConversionStatus+0x28>
  }
  else
  {
    /* ADSTART bit is reset */
    bitstatus = RESET;
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADSTART bit status */
  return  bitstatus;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	f107 0714 	add.w	r7, r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop

080025bc <ADC_StopConversion>:
  * @brief  Stops the selected ADC ongoing conversion.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StopConversion(ADC_TypeDef* ADCx)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTP bit */
   ADCx->CR |= ADC_CR_ADSTP;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f043 0210 	orr.w	r2, r3, #16
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	609a      	str	r2, [r3, #8]
}
 80025d0:	f107 070c 	add.w	r7, r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop

080025dc <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CFGR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= ~(uint32_t)(ADC_CFGR_DISCNUM);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002600:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f103 33ff 	add.w	r3, r3, #4294967295
 8002608:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 17;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CFGR = tmpreg1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	60da      	str	r2, [r3, #12]
}
 800261c:	f107 0714 	add.w	r7, r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop

08002628 <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CFGR |= ADC_CFGR_DISCEN;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	e005      	b.n	8002654 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_DISCEN);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	60da      	str	r2, [r3, #12]
  }
}
 8002654:	f107 070c 	add.w	r7, r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	b29b      	uxth	r3, r3
}
 800266e:	4618      	mov	r0, r3
 8002670:	f107 070c 	add.w	r7, r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop

0800267c <ADC_GetDualModeConversionValue>:
  * @note   In dual mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain the regular data of the Master ADC.
  *           Data[31:16]: these bits contain the regular data of the Slave ADC.           
  */
uint32_t ADC_GetDualModeConversionValue(ADC_TypeDef* ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if((ADCx == ADC1) || (ADCx== ADC2))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002690:	d006      	beq.n	80026a0 <ADC_GetDualModeConversionValue+0x24>
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002698:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800269c:	429a      	cmp	r2, r3
 800269e:	d106      	bne.n	80026ae <ADC_GetDualModeConversionValue+0x32>
  {
    /* Get the dual mode conversion value */
    tmpreg1 = ADC1_2->CDR;
 80026a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026a4:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e005      	b.n	80026ba <ADC_GetDualModeConversionValue+0x3e>
  }
  else
  {	
    /* Get the dual mode conversion value */
    tmpreg1 = ADC3_4->CDR;
 80026ae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80026b2:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60fb      	str	r3, [r7, #12]
  }
  /* Return the dual mode conversion value */
  return (uint32_t) tmpreg1;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	f107 0714 	add.w	r7, r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <ADC_SetChannelOffset1>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset1(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	460a      	mov	r2, r1
 80026d4:	70fa      	strb	r2, [r7, #3]
 80026d6:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR1 &= ~ (uint32_t) ADC_OFR1_OFFSET1_CH;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	661a      	str	r2, [r3, #96]	; 0x60
  ADCx->OFR1 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	ea4f 6383 	mov.w	r3, r3, lsl #26
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the data offset */
  ADCx->OFR1 &= ~ (uint32_t) ADC_OFR1_OFFSET1;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80026fc:	f023 030f 	bic.w	r3, r3, #15
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6613      	str	r3, [r2, #96]	; 0x60
  ADCx->OFR1 |= (uint32_t)Offset;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002708:	883b      	ldrh	r3, [r7, #0]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002710:	f107 070c 	add.w	r7, r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop

0800271c <ADC_SetChannelOffset2>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset2(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	460a      	mov	r2, r1
 8002728:	70fa      	strb	r2, [r7, #3]
 800272a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR2 &= ~ (uint32_t) ADC_OFR2_OFFSET2_CH;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002730:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	665a      	str	r2, [r3, #100]	; 0x64
  ADCx->OFR2 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	ea4f 6383 	mov.w	r3, r3, lsl #26
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	665a      	str	r2, [r3, #100]	; 0x64

  /* Set the data offset */
  ADCx->OFR2 &= ~ (uint32_t) ADC_OFR2_OFFSET2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800274c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002750:	f023 030f 	bic.w	r3, r3, #15
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6653      	str	r3, [r2, #100]	; 0x64
  ADCx->OFR2 |= (uint32_t)Offset;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800275c:	883b      	ldrh	r3, [r7, #0]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002764:	f107 070c 	add.w	r7, r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <ADC_SetChannelOffset3>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset3(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	460a      	mov	r2, r1
 800277c:	70fa      	strb	r2, [r7, #3]
 800277e:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR3 &= ~ (uint32_t) ADC_OFR3_OFFSET3_CH;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002784:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	669a      	str	r2, [r3, #104]	; 0x68
  ADCx->OFR3 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	ea4f 6383 	mov.w	r3, r3, lsl #26
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the data offset */
  ADCx->OFR3 &= ~ (uint32_t) ADC_OFR3_OFFSET3;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027a4:	f023 030f 	bic.w	r3, r3, #15
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6693      	str	r3, [r2, #104]	; 0x68
  ADCx->OFR3 |= (uint32_t)Offset;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027b0:	883b      	ldrh	r3, [r7, #0]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80027b8:	f107 070c 	add.w	r7, r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop

080027c4 <ADC_SetChannelOffset4>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset4(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	460a      	mov	r2, r1
 80027d0:	70fa      	strb	r2, [r7, #3]
 80027d2:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR4 &= ~ (uint32_t) ADC_OFR4_OFFSET4_CH;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	66da      	str	r2, [r3, #108]	; 0x6c
  ADCx->OFR4 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	ea4f 6383 	mov.w	r3, r3, lsl #26
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Set the data offset */
  ADCx->OFR4 &= ~ (uint32_t) ADC_OFR4_OFFSET4;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027f8:	f023 030f 	bic.w	r3, r3, #15
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	66d3      	str	r3, [r2, #108]	; 0x6c
  ADCx->OFR4 |= (uint32_t)Offset;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002804:	883b      	ldrh	r3, [r7, #0]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800280c:	f107 070c 	add.w	r7, r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop

08002818 <ADC_ChannelOffset1Cmd>:
  * @param  NewState: new state of the ADCx offset1.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset1Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <ADC_ChannelOffset1Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR1 |= ADC_OFR1_OFFSET1_EN;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	661a      	str	r2, [r3, #96]	; 0x60
 8002836:	e005      	b.n	8002844 <ADC_ChannelOffset1Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR1 &= ~(ADC_OFR1_OFFSET1_EN);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8002844:	f107 070c 	add.w	r7, r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop

08002850 <ADC_ChannelOffset2Cmd>:
  * @param  NewState: new state of the ADCx offset2.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset2Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <ADC_ChannelOffset2Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR2 |= ADC_OFR2_OFFSET2_EN;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002866:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	665a      	str	r2, [r3, #100]	; 0x64
 800286e:	e005      	b.n	800287c <ADC_ChannelOffset2Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR2 &= ~(ADC_OFR2_OFFSET2_EN);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800287c:	f107 070c 	add.w	r7, r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <ADC_ChannelOffset3Cmd>:
  * @param  NewState: new state of the ADCx offset3.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset3Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <ADC_ChannelOffset3Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR3 |= ADC_OFR3_OFFSET3_EN;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800289e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	669a      	str	r2, [r3, #104]	; 0x68
 80028a6:	e005      	b.n	80028b4 <ADC_ChannelOffset3Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR3 &= ~(ADC_OFR3_OFFSET3_EN);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80028b4:	f107 070c 	add.w	r7, r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop

080028c0 <ADC_ChannelOffset4Cmd>:
  * @param  NewState: new state of the ADCx offset4.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset4Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <ADC_ChannelOffset4Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR4 |= ADC_OFR4_OFFSET4_EN;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80028de:	e005      	b.n	80028ec <ADC_ChannelOffset4Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR4 &= ~(ADC_OFR4_OFFSET4_EN);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80028ec:	f107 070c 	add.w	r7, r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop

080028f8 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR |= ADC_CFGR_DMAEN;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	e005      	b.n	8002924 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMAEN;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f023 0201 	bic.w	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]
  }
}
 8002924:	f107 070c 	add.w	r7, r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop

08002930 <ADC_DMAConfig>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMAConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMAMode)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_ADC_DMA_MODE(ADC_DMAMode));

  /* Set or reset the DMACFG bit */
   ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMACFG;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 0202 	bic.w	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60da      	str	r2, [r3, #12]
   ADCx->CFGR |= ADC_DMAMode;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60da      	str	r2, [r3, #12]
}
 8002952:	f107 070c 	add.w	r7, r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <ADC_InjectedChannelSampleTimeConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelSampleTimeConfig(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint8_t ADC_SampleTime)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	460a      	mov	r2, r1
 8002968:	70fa      	strb	r2, [r7, #3]
 800296a:	70bb      	strb	r3, [r7, #2]
  uint32_t tmpreg1 = 0;
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Channel sampling configuration */
  /* if ADC_InjectedChannel_10 ... ADC_InjectedChannel_18 is selected */
  if (ADC_InjectedChannel > ADC_InjectedChannel_9)
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	2b09      	cmp	r3, #9
 8002976:	d924      	bls.n	80029c2 <ADC_InjectedChannelSampleTimeConfig+0x66>
  {
    /* Calculate the mask to clear */
    tmpreg1 = ADC_SMPR2_SMP10 << (3 * (ADC_InjectedChannel - 10));
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	4613      	mov	r3, r2
 800297c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002980:	189b      	adds	r3, r3, r2
 8002982:	f1a3 031e 	sub.w	r3, r3, #30
 8002986:	f04f 0207 	mov.w	r2, #7
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	ea6f 0303 	mvn.w	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_InjectedChannel - 10));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6999      	ldr	r1, [r3, #24]
 80029a4:	78b8      	ldrb	r0, [r7, #2]
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	4613      	mov	r3, r2
 80029aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	f1a3 031e 	sub.w	r3, r3, #30
 80029b4:	fa00 f303 	lsl.w	r3, r0, r3
 80029b8:	ea41 0203 	orr.w	r2, r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	619a      	str	r2, [r3, #24]
 80029c0:	e021      	b.n	8002a06 <ADC_InjectedChannelSampleTimeConfig+0xaa>

  }
  else /* ADC_InjectedChannel include in ADC_InjectedChannel_[0..9] */
  {
    /* Calculate the mask to clear */
    tmpreg1 = ADC_SMPR1_SMP1 << (3 * (ADC_InjectedChannel - 1));
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f103 32ff 	add.w	r2, r3, #4294967295
 80029c8:	4613      	mov	r3, r2
 80029ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80029ce:	189b      	adds	r3, r3, r2
 80029d0:	f04f 0238 	mov.w	r2, #56	; 0x38
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	ea6f 0303 	mvn.w	r3, r3
 80029e4:	401a      	ands	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	615a      	str	r2, [r3, #20]
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_InjectedChannel));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6959      	ldr	r1, [r3, #20]
 80029ee:	78b8      	ldrb	r0, [r7, #2]
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	4613      	mov	r3, r2
 80029f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80029f8:	189b      	adds	r3, r3, r2
 80029fa:	fa00 f303 	lsl.w	r3, r0, r3
 80029fe:	ea41 0203 	orr.w	r2, r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	615a      	str	r2, [r3, #20]
  }  
}
 8002a06:	f107 0714 	add.w	r7, r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <ADC_StartInjectedConversion>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_StartInjectedConversion(ADC_TypeDef* ADCx)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for injected group on external event and start the selected
     ADC injected conversion */
  ADCx->CR |= ADC_CR_JADSTART;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	f107 070c 	add.w	r7, r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop

08002a30 <ADC_StopInjectedConversion>:
  * @brief  Stops the selected ADC ongoing injected conversion.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StopInjectedConversion(ADC_TypeDef* ADCx)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the JADSTP bit */
   ADCx->CR |= ADC_CR_JADSTP;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f043 0220 	orr.w	r2, r3, #32
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	f107 070c 	add.w	r7, r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop

08002a50 <ADC_GetStartInjectedConversionStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetStartInjectedConversionStatus(ADC_TypeDef* ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of JADSTART bit */
  if ((ADCx->CR & ADC_CR_JADSTART) != (uint32_t)RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <ADC_GetStartInjectedConversionStatus+0x22>
  {
    /* JADSTART bit is set */
    bitstatus = SET;
 8002a6a:	f04f 0301 	mov.w	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	e002      	b.n	8002a78 <ADC_GetStartInjectedConversionStatus+0x28>
  }
  else
  {
    /* JADSTART bit is reset */
    bitstatus = RESET;
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JADSTART bit status */
  return  bitstatus;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f107 0714 	add.w	r7, r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop

08002a88 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CFGR |= ADC_CFGR_JAUTO;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	e005      	b.n	8002ab4 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CFGR &= ~ADC_CFGR_JAUTO;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]
  }
}
 8002ab4:	f107 070c 	add.w	r7, r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop

08002ac0 <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CFGR |= ADC_CFGR_JDISCEN;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	e005      	b.n	8002aec <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CFGR &= ~ADC_CFGR_JDISCEN;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	60da      	str	r2, [r3, #12]
  }
}
 8002aec:	f107 070c 	add.w	r7, r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedSequence_3: Injected Sequence3 selected
  *     @arg ADC_InjectedSequence_4: Injected Sequence4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedSequence)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_SEQUENCE(ADC_InjectedSequence));

  tmp = (uint32_t)ADCx;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
  tmp += ((ADC_InjectedSequence - 1 )<< 2) + JDR_Offset;
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	f103 33ff 	add.w	r3, r3, #4294967295
 8002b14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	18d3      	adds	r3, r2, r3
 8002b1e:	f103 0380 	add.w	r3, r3, #128	; 0x80
 8002b22:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f107 0714 	add.w	r7, r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop

08002b38 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint32_t ADC_IT, FunctionalState NewState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));

  if (NewState != DISABLE)
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d006      	beq.n	8002b5a <ADC_ITConfig+0x22>
  {
    /* Enable the selected ADC interrupts */
    ADCx->IER |= ADC_IT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	e007      	b.n	8002b6a <ADC_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->IER &= (~(uint32_t)ADC_IT);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	ea6f 0303 	mvn.w	r3, r3
 8002b64:	401a      	ands	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	605a      	str	r2, [r3, #4]
  }
}
 8002b6a:	f107 0714 	add.w	r7, r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <ADC_GetFlagStatus+0x24>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8002b90:	f04f 0301 	mov.w	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e002      	b.n	8002b9e <ADC_GetFlagStatus+0x2a>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f107 0714 	add.w	r7, r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <ADC_ClearFlag>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->ISR = (uint32_t)ADC_FLAG;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	601a      	str	r2, [r3, #0]
}
 8002bbc:	f107 070c 	add.w	r7, r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop

08002bc8 <ADC_GetCommonFlagStatus>:
  *     @arg ADC_FLAG_SLVAWD3: ADC slave Analog watchdog 3 flag 
  *     @arg ADC_FLAG_SLVJQOVF: ADC slave Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetCommonFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  FlagStatus bitstatus = RESET;
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_COMMONFLAG(ADC_FLAG));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be4:	d006      	beq.n	8002bf4 <ADC_GetCommonFlagStatus+0x2c>
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bec:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d106      	bne.n	8002c02 <ADC_GetCommonFlagStatus+0x3a>
  {
    tmpreg1 = ADC1_2->CSR;
 8002bf4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bf8:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e005      	b.n	8002c0e <ADC_GetCommonFlagStatus+0x46>
  }
  else
  {
    tmpreg1 = ADC3_4->CSR;
 8002c02:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c06:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  }  
  /* Check the status of the specified ADC flag */
  if ((tmpreg1 & ADC_FLAG) != (uint32_t)RESET)
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <ADC_GetCommonFlagStatus+0x58>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8002c18:	f04f 0301 	mov.w	r3, #1
 8002c1c:	72fb      	strb	r3, [r7, #11]
 8002c1e:	e002      	b.n	8002c26 <ADC_GetCommonFlagStatus+0x5e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	72fb      	strb	r3, [r7, #11]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8002c26:	7afb      	ldrb	r3, [r7, #11]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f107 0714 	add.w	r7, r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <ADC_ClearCommonFlag>:
  *     @arg ADC_FLAG_SLVAWD3: ADC slave Analog watchdog 3 flag 
  *     @arg ADC_FLAG_SLVJQOVF: ADC slave Injected Context Queue Overflow flag 
  * @retval None
  */
void ADC_ClearCommonFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_COMMONFLAG(ADC_FLAG));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c44:	d006      	beq.n	8002c54 <ADC_ClearCommonFlag+0x20>
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c4c:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d10c      	bne.n	8002c6e <ADC_ClearCommonFlag+0x3a>
  {
    /* Clear the selected ADC flags */
    ADC1_2->CSR |= (uint32_t)ADC_FLAG;
 8002c54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c58:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002c5c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002c60:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8002c64:	6811      	ldr	r1, [r2, #0]
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e00b      	b.n	8002c86 <ADC_ClearCommonFlag+0x52>
  }
  else
  {
    /* Clear the selected ADC flags */
    ADC3_4->CSR |= (uint32_t)ADC_FLAG;
 8002c6e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c72:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002c76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c7a:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8002c7e:	6811      	ldr	r1, [r2, #0]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
  }  
}
 8002c86:	f107 070c 	add.w	r7, r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD3: ADC Analog watchdog 3 interrupt source 
  *     @arg ADC_IT_JQOVF: ADC Injected Context Queue Overflow interrupt source 
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint32_t ADC_IT)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;  
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	81bb      	strh	r3, [r7, #12]
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
   
  itstatus = ADCx->ISR & ADC_IT;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	81bb      	strh	r3, [r7, #12]
  
  itenable = ADCx->IER & ADC_IT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint32_t)RESET) && (itenable != (uint32_t)RESET))
 8002cc8:	89bb      	ldrh	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <ADC_GetITStatus+0x4c>
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <ADC_GetITStatus+0x4c>
  {
    bitstatus = SET;
 8002cd4:	f04f 0301 	mov.w	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
 8002cda:	e002      	b.n	8002ce2 <ADC_GetITStatus+0x52>
  }
  else
  {
    bitstatus = RESET;
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f107 0714 	add.w	r7, r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD3: ADC Analog watchdog 3 interrupt source 
  *     @arg ADC_IT_JQOVF: ADC Injected Context Queue Overflow interrupt source
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint32_t ADC_IT)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Clear the selected ADC interrupt pending bit */
  ADCx->ISR |= (uint32_t)ADC_IT;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	601a      	str	r2, [r3, #0]
}
 8002d06:	f107 070c 	add.w	r7, r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	60da      	str	r2, [r3, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	f04f 0308 	mov.w	r3, #8
 8002d4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d10c      	bne.n	8002d6e <DMA_DeInit+0x5e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d64:	6852      	ldr	r2, [r2, #4]
 8002d66:	f042 020f 	orr.w	r2, r2, #15
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	e0da      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	f04f 031c 	mov.w	r3, #28
 8002d74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d10c      	bne.n	8002d96 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d8c:	6852      	ldr	r2, [r2, #4]
 8002d8e:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	e0c6      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8002d9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d10c      	bne.n	8002dbe <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002db4:	6852      	ldr	r2, [r2, #4]
 8002db6:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	e0b2      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	f04f 0344 	mov.w	r3, #68	; 0x44
 8002dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d10c      	bne.n	8002de6 <DMA_DeInit+0xd6>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ddc:	6852      	ldr	r2, [r2, #4]
 8002dde:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	e09e      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	f04f 0358 	mov.w	r3, #88	; 0x58
 8002dec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d10c      	bne.n	8002e0e <DMA_DeInit+0xfe>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002e04:	6852      	ldr	r2, [r2, #4]
 8002e06:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	e08a      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	f04f 036c 	mov.w	r3, #108	; 0x6c
 8002e14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d10c      	bne.n	8002e36 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002e2c:	6852      	ldr	r2, [r2, #4]
 8002e2e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	e076      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002e3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d10c      	bne.n	8002e5e <DMA_DeInit+0x14e>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002e54:	6852      	ldr	r2, [r2, #4]
 8002e56:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	e062      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002e64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d10c      	bne.n	8002e86 <DMA_DeInit+0x176>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8002e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002e7c:	6852      	ldr	r2, [r2, #4]
 8002e7e:	f042 020f 	orr.w	r2, r2, #15
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	e04e      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	f240 431c 	movw	r3, #1052	; 0x41c
 8002e8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d10c      	bne.n	8002eae <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8002e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ea4:	6852      	ldr	r2, [r2, #4]
 8002ea6:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	e03a      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d10c      	bne.n	8002ed6 <DMA_DeInit+0x1c6>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8002ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ecc:	6852      	ldr	r2, [r2, #4]
 8002ece:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	e026      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	f240 4344 	movw	r3, #1092	; 0x444
 8002edc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d10c      	bne.n	8002efe <DMA_DeInit+0x1ee>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8002ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ef4:	6852      	ldr	r2, [r2, #4]
 8002ef6:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	e012      	b.n	8002f24 <DMA_DeInit+0x214>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8002f04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d10b      	bne.n	8002f24 <DMA_DeInit+0x214>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8002f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002f1c:	6852      	ldr	r2, [r2, #4]
 8002f1e:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8002f22:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002f24:	f107 070c 	add.w	r7, r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop

08002f30 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f50:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8002f60:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002f6c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002f78:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	899b      	ldrh	r3, [r3, #12]
 8002f90:	461a      	mov	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60da      	str	r2, [r3, #12]
}
 8002fa6:	f107 0714 	add.w	r7, r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <DMA_StructInit>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	819a      	strh	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003010:	f107 070c 	add.w	r7, r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop

0800301c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e006      	b.n	800304a <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003044:	4013      	ands	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6013      	str	r3, [r2, #0]
  }
}
 800304a:	f107 070c 	add.w	r7, r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 8003060:	887a      	ldrh	r2, [r7, #2]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	605a      	str	r2, [r3, #4]
}
 8003066:	f107 070c 	add.w	r7, r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <DMA_GetCurrDataCounter>:
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	b29b      	uxth	r3, r3
}
 800307e:	4618      	mov	r0, r3
 8003080:	f107 070c 	add.w	r7, r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop

0800308c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e007      	b.n	80030be <DMA_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	ea6f 0303 	mvn.w	r3, r3
 80030b8:	401a      	ands	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	601a      	str	r2, [r3, #0]
  }
}
 80030be:	f107 0714 	add.w	r7, r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d006      	beq.n	80030f4 <DMA_GetFlagStatus+0x2c>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 80030e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	e005      	b.n	8003100 <DMA_GetFlagStatus+0x38>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <DMA_GetFlagStatus+0x4a>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800310a:	f04f 0301 	mov.w	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
 8003110:	e002      	b.n	8003118 <DMA_GetFlagStatus+0x50>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	f107 0714 	add.w	r7, r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop

08003128 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
  *
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

/* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <DMA_ClearFlag+0x20>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 800313a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800313e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	e005      	b.n	8003154 <DMA_ClearFlag+0x2c>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	605a      	str	r2, [r3, #4]
  }
}
 8003154:	f107 070c 	add.w	r7, r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <DMA_GetITStatus>:
  *    DMAy_IT_HTx or DMAy_IT_TEx). 
  *      
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <DMA_GetITStatus+0x2c>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 800317e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003182:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	e005      	b.n	8003198 <DMA_GetITStatus+0x38>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <DMA_GetITStatus+0x4a>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 80031a2:	f04f 0301 	mov.w	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e002      	b.n	80031b0 <DMA_GetITStatus+0x50>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMAy_IT status */
  return  bitstatus;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	f107 0714 	add.w	r7, r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop

080031c0 <DMA_ClearITPendingBit>:
  *    DMAy_IT_TEx).  
  *        
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
  
  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d006      	beq.n	80031e0 <DMA_ClearITPendingBit+0x20>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 80031d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	e005      	b.n	80031ec <DMA_ClearITPendingBit+0x2c>
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	605a      	str	r2, [r3, #4]
  }
}
 80031ec:	f107 070c 	add.w	r7, r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop

080031f8 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003206:	d10c      	bne.n	8003222 <GPIO_DeInit+0x2a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8003208:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800320c:	f04f 0101 	mov.w	r1, #1
 8003210:	f001 fa1a 	bl	8004648 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8003214:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003218:	f04f 0100 	mov.w	r1, #0
 800321c:	f001 fa14 	bl	8004648 <RCC_AHBPeriphResetCmd>
 8003220:	e062      	b.n	80032e8 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOB)
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003228:	f6c4 0300 	movt	r3, #18432	; 0x4800
 800322c:	429a      	cmp	r2, r3
 800322e:	d10c      	bne.n	800324a <GPIO_DeInit+0x52>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8003230:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003234:	f04f 0101 	mov.w	r1, #1
 8003238:	f001 fa06 	bl	8004648 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800323c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003240:	f04f 0100 	mov.w	r1, #0
 8003244:	f001 fa00 	bl	8004648 <RCC_AHBPeriphResetCmd>
 8003248:	e04e      	b.n	80032e8 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOC)
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003250:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8003254:	429a      	cmp	r2, r3
 8003256:	d10c      	bne.n	8003272 <GPIO_DeInit+0x7a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8003258:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800325c:	f04f 0101 	mov.w	r1, #1
 8003260:	f001 f9f2 	bl	8004648 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8003264:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	f001 f9ec 	bl	8004648 <RCC_AHBPeriphResetCmd>
 8003270:	e03a      	b.n	80032e8 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOD)
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003278:	f6c4 0300 	movt	r3, #18432	; 0x4800
 800327c:	429a      	cmp	r2, r3
 800327e:	d10c      	bne.n	800329a <GPIO_DeInit+0xa2>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8003280:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003284:	f04f 0101 	mov.w	r1, #1
 8003288:	f001 f9de 	bl	8004648 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 800328c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003290:	f04f 0100 	mov.w	r1, #0
 8003294:	f001 f9d8 	bl	8004648 <RCC_AHBPeriphResetCmd>
 8003298:	e026      	b.n	80032e8 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOE)
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032a0:	f6c4 0300 	movt	r3, #18432	; 0x4800
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d10c      	bne.n	80032c2 <GPIO_DeInit+0xca>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 80032a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80032ac:	f04f 0101 	mov.w	r1, #1
 80032b0:	f001 f9ca 	bl	8004648 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 80032b4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80032b8:	f04f 0100 	mov.w	r1, #0
 80032bc:	f001 f9c4 	bl	8004648 <RCC_AHBPeriphResetCmd>
 80032c0:	e012      	b.n	80032e8 <GPIO_DeInit+0xf0>
  }
  else
  {
    if(GPIOx == GPIOF)
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032c8:	f6c4 0300 	movt	r3, #18432	; 0x4800
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d10b      	bne.n	80032e8 <GPIO_DeInit+0xf0>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80032d0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80032d4:	f04f 0101 	mov.w	r1, #1
 80032d8:	f001 f9b6 	bl	8004648 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80032dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	f001 f9b0 	bl	8004648 <RCC_AHBPeriphResetCmd>
    }
  }
}
 80032e8:	f107 0708 	add.w	r7, r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e08c      	b.n	800342e <GPIO_Init+0x13e>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f04f 0201 	mov.w	r2, #1
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	429a      	cmp	r2, r3
 8003330:	d179      	bne.n	8003426 <GPIO_Init+0x136>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	791b      	ldrb	r3, [r3, #4]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d003      	beq.n	8003342 <GPIO_Init+0x52>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	791b      	ldrb	r3, [r3, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d13a      	bne.n	80033b8 <GPIO_Init+0xc8>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800334c:	f04f 0103 	mov.w	r1, #3
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	ea6f 0303 	mvn.w	r3, r3
 8003358:	401a      	ands	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	795b      	ldrb	r3, [r3, #5]
 8003366:	4619      	mov	r1, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	889b      	ldrh	r3, [r3, #4]
 800337c:	b29a      	uxth	r2, r3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	b29b      	uxth	r3, r3
 8003382:	f04f 0101 	mov.w	r1, #1
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	b29b      	uxth	r3, r3
 800338c:	ea6f 0303 	mvn.w	r3, r3
 8003390:	b29b      	uxth	r3, r3
 8003392:	4013      	ands	r3, r2
 8003394:	b29a      	uxth	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	889b      	ldrh	r3, [r3, #4]
 800339e:	b29a      	uxth	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	799b      	ldrb	r3, [r3, #6]
 80033a4:	4619      	mov	r1, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	4313      	orrs	r3, r2
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80033c2:	f04f 0103 	mov.w	r1, #3
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	ea6f 0303 	mvn.w	r3, r3
 80033ce:	401a      	ands	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	791b      	ldrb	r3, [r3, #4]
 80033dc:	4619      	mov	r1, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80033fa:	f04f 0103 	mov.w	r1, #3
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	ea6f 0303 	mvn.w	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	79db      	ldrb	r3, [r3, #7]
 8003414:	4619      	mov	r1, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f103 0301 	add.w	r3, r3, #1
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b0f      	cmp	r3, #15
 8003432:	f67f af6f 	bls.w	8003314 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003436:	f107 071c 	add.w	r7, r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800344e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f04f 0202 	mov.w	r2, #2
 800345e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	71da      	strb	r2, [r3, #7]
}
 8003470:	f107 070c 	add.w	r7, r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop

0800347c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 8003488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800348c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 800348e:	887b      	ldrh	r3, [r7, #2]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800349c:	887a      	ldrh	r2, [r7, #2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	60fb      	str	r3, [r7, #12]
}
 80034b4:	f107 0714 	add.w	r7, r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop

080034c0 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8a1b      	ldrh	r3, [r3, #16]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	887b      	ldrh	r3, [r7, #2]
 80034da:	4013      	ands	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <GPIO_ReadInputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 80034e2:	f04f 0301 	mov.w	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e002      	b.n	80034f0 <GPIO_ReadInputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	f107 0714 	add.w	r7, r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop

08003500 <GPIO_ReadInputData>:
  * @brief  Reads the specified input port pin.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval The input port pin value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8a1b      	ldrh	r3, [r3, #16]
 800350c:	b29b      	uxth	r3, r3
}
 800350e:	4618      	mov	r0, r3
 8003510:	f107 070c 	add.w	r7, r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop

0800351c <GPIO_ReadOutputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8a9b      	ldrh	r3, [r3, #20]
 8003532:	b29a      	uxth	r2, r3
 8003534:	887b      	ldrh	r3, [r7, #2]
 8003536:	4013      	ands	r3, r2
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <GPIO_ReadOutputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 800353e:	f04f 0301 	mov.w	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	e002      	b.n	800354c <GPIO_ReadOutputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	f107 0714 	add.w	r7, r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop

0800355c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8a9b      	ldrh	r3, [r3, #20]
 8003568:	b29b      	uxth	r3, r3
}
 800356a:	4618      	mov	r0, r3
 800356c:	f107 070c 	add.w	r7, r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop

08003578 <GPIO_SetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	619a      	str	r2, [r3, #24]
}
 800358a:	f107 070c 	add.w	r7, r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <GPIO_ResetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80035a6:	f107 070c 	add.w	r7, r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	460a      	mov	r2, r1
 80035bc:	807a      	strh	r2, [r7, #2]
 80035be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	619a      	str	r2, [r3, #24]
 80035cc:	e002      	b.n	80035d4 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	887a      	ldrh	r2, [r7, #2]
 80035d2:	851a      	strh	r2, [r3, #40]	; 0x28
  }
}
 80035d4:	f107 070c 	add.w	r7, r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop

080035e0 <GPIO_Write>:
  * @param  PortVal: specifies the value to be written to the port output data 
  *                  register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	829a      	strh	r2, [r3, #20]
}
 80035f2:	f107 070c 	add.w	r7, r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	460a      	mov	r2, r1
 8003608:	807a      	strh	r2, [r7, #2]
 800360a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8003618:	787a      	ldrb	r2, [r7, #1]
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800362a:	887b      	ldrh	r3, [r7, #2]
 800362c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8003630:	b29b      	uxth	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	887b      	ldrh	r3, [r7, #2]
 8003636:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800363a:	b29b      	uxth	r3, r3
 800363c:	4619      	mov	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f101 0108 	add.w	r1, r1, #8
 8003644:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003652:	f04f 000f 	mov.w	r0, #15
 8003656:	fa00 f303 	lsl.w	r3, r0, r3
 800365a:	ea6f 0303 	mvn.w	r3, r3
 800365e:	4019      	ands	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f102 0208 	add.w	r2, r2, #8
 8003666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8003670:	b29b      	uxth	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f102 0208 	add.w	r2, r2, #8
 800367a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003684:	887b      	ldrh	r3, [r7, #2]
 8003686:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f102 0208 	add.w	r2, r2, #8
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800369a:	f107 0714 	add.w	r7, r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80036ac:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80036b0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 80036ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80036be:	60da      	str	r2, [r3, #12]
}
 80036c0:	f107 070c 	add.w	r7, r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop

080036cc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	f04f 030f 	mov.w	r3, #15
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	78db      	ldrb	r3, [r3, #3]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d047      	beq.n	800377e <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80036ee:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80036f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	ea6f 0303 	mvn.w	r3, r3
 80036fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003700:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003704:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f1c3 0304 	rsb	r3, r3, #4
 800370c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	461a      	mov	r2, r3
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	789b      	ldrb	r3, [r3, #2]
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4013      	ands	r3, r2
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800373c:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800373e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003742:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	7812      	ldrb	r2, [r2, #0]
 800374a:	4611      	mov	r1, r2
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	185b      	adds	r3, r3, r1
 8003752:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003756:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800375a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	7812      	ldrb	r2, [r2, #0]
 8003762:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003766:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	7809      	ldrb	r1, [r1, #0]
 800376c:	f001 011f 	and.w	r1, r1, #31
 8003770:	f04f 0001 	mov.w	r0, #1
 8003774:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800377c:	e014      	b.n	80037a8 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800377e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003782:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	7812      	ldrb	r2, [r2, #0]
 800378a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800378e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	7809      	ldrb	r1, [r1, #0]
 8003794:	f001 011f 	and.w	r1, r1, #31
 8003798:	f04f 0001 	mov.w	r0, #1
 800379c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80037a0:	f102 0220 	add.w	r2, r2, #32
 80037a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80037a8:	f107 071c 	add.w	r7, r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop

080037b4 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80037be:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80037c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80037cc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
}
 80037d6:	f107 070c 	add.w	r7, r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	71fa      	strb	r2, [r7, #7]
 80037ec:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80037ee:	79bb      	ldrb	r3, [r7, #6]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00c      	beq.n	800380e <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 80037f4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80037f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80037fc:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8003800:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003804:	6911      	ldr	r1, [r2, #16]
 8003806:	79fa      	ldrb	r2, [r7, #7]
 8003808:	430a      	orrs	r2, r1
 800380a:	611a      	str	r2, [r3, #16]
 800380c:	e00d      	b.n	800382a <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800380e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003812:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003816:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800381a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800381e:	6911      	ldr	r1, [r2, #16]
 8003820:	79fa      	ldrb	r2, [r7, #7]
 8003822:	ea6f 0202 	mvn.w	r2, r2
 8003826:	400a      	ands	r2, r1
 8003828:	611a      	str	r2, [r3, #16]
  }
}
 800382a:	f107 070c 	add.w	r7, r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b04      	cmp	r3, #4
 8003840:	d10c      	bne.n	800385c <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8003842:	f24e 0310 	movw	r3, #57360	; 0xe010
 8003846:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800384a:	f24e 0210 	movw	r2, #57360	; 0xe010
 800384e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	f042 0204 	orr.w	r2, r2, #4
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e00b      	b.n	8003874 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800385c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8003860:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003864:	f24e 0210 	movw	r2, #57360	; 0xe010
 8003868:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	601a      	str	r2, [r3, #0]
  }
}
 8003874:	f107 070c 	add.w	r7, r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop

08003880 <RCC_DeInit>:
  * @note     LSI, LSE and RTC clocks                  
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003888:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800388c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003890:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 800389c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80038a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038ac:	6859      	ldr	r1, [r3, #4]
 80038ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80038b2:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 80038b6:	400b      	ands	r3, r1
 80038b8:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80038d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038d4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80038ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80038fe:	6852      	ldr	r2, [r2, #4]
 8003900:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003904:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 8003906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800390a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800390e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003912:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003916:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003918:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800391c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8003922:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003926:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800392a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800392e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003934:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 8003938:	f6c0 7300 	movt	r3, #3840	; 0xf00
 800393c:	400b      	ands	r3, r1
 800393e:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003944:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
}
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: turn ON the HSE oscillator
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 800395e:	f241 0302 	movw	r3, #4098	; 0x1002
 8003962:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 800396c:	f241 0302 	movw	r3, #4098	; 0x1002
 8003970:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003974:	79fa      	ldrb	r2, [r7, #7]
 8003976:	701a      	strb	r2, [r3, #0]

}
 8003978:	f107 070c 	add.w	r7, r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop

08003984 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800399c:	f04f 0011 	mov.w	r0, #17
 80039a0:	f000 ff00 	bl	80047a4 <RCC_GetFlagStatus>
 80039a4:	4603      	mov	r3, r0
 80039a6:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f103 0301 	add.w	r3, r3, #1
 80039ae:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80039b6:	d002      	beq.n	80039be <RCC_WaitForHSEStartUp+0x3a>
 80039b8:	79bb      	ldrb	r3, [r7, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ee      	beq.n	800399c <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80039be:	f04f 0011 	mov.w	r0, #17
 80039c2:	f000 feef 	bl	80047a4 <RCC_GetFlagStatus>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 80039cc:	f04f 0301 	mov.w	r3, #1
 80039d0:	71fb      	strb	r3, [r7, #7]
 80039d2:	e002      	b.n	80039da <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 80039da:	79fb      	ldrb	r3, [r7, #7]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	f107 0708 	add.w	r7, r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop

080039e8 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80039f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003a0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8003a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	f107 0714 	add.w	r7, r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop

08003a30 <RCC_HSICmd>:
  * @param  NewState: new state of the HSI.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8003a42:	79fa      	ldrb	r2, [r7, #7]
 8003a44:	601a      	str	r2, [r3, #0]
}
 8003a46:	f107 070c 	add.w	r7, r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: turn ON the LSE oscillator
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint32_t RCC_LSE)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8003a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a68:	6a12      	ldr	r2, [r2, #32]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 8003a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a80:	6a12      	ldr	r2, [r2, #32]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8003a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a98:	6a11      	ldr	r1, [r2, #32]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	621a      	str	r2, [r3, #32]
}
 8003aa0:	f107 070c 	add.w	r7, r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop

08003aac <RCC_LSEDriveConfig>:
  *     @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
  *     @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
  * @retval None
  */
void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8003ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003abc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ac0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ac4:	6a12      	ldr	r2, [r2, #32]
 8003ac6:	f022 0218 	bic.w	r2, r2, #24
 8003aca:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 8003acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ad0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ad8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003adc:	6a11      	ldr	r1, [r2, #32]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	f107 070c 	add.w	r7, r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop

08003af0 <RCC_LSICmd>:
  * @param  NewState: new state of the LSI.
  *         This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8003afa:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8003afe:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8003b02:	79fa      	ldrb	r2, [r7, #7]
 8003b04:	601a      	str	r2, [r3, #0]
}
 8003b06:	f107 070c 	add.w	r7, r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <RCC_PLLConfig>:
  *   This parameter can be RCC_PLLMul_x where x:[2,16] 
  *                                               
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8003b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b2a:	6852      	ldr	r2, [r2, #4]
 8003b2c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003b30:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 8003b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b42:	6851      	ldr	r1, [r2, #4]
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	4302      	orrs	r2, r0
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
}
 8003b4e:	f107 070c 	add.w	r7, r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <RCC_PLLCmd>:
  * @param  NewState: new state of the PLL.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8003b62:	f04f 0360 	mov.w	r3, #96	; 0x60
 8003b66:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8003b6a:	79fa      	ldrb	r2, [r7, #7]
 8003b6c:	601a      	str	r2, [r3, #0]
}
 8003b6e:	f107 070c 	add.w	r7, r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *         This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8003b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 030f 	bic.w	r3, r3, #15
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8003ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bae:	f107 0714 	add.w	r7, r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8003bc2:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8003bc6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8003bca:	79fa      	ldrb	r2, [r7, #7]
 8003bcc:	601a      	str	r2, [r3, #0]
}
 8003bce:	f107 070c 	add.w	r7, r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <RCC_MCOConfig>:
  *     @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
  *     @arg RCC_MCOSource_PLLCLK_Div2: PLL clock selected.
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCOSource)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 8003be2:	f241 0307 	movw	r3, #4103	; 0x1007
 8003be6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003bea:	79fa      	ldrb	r2, [r7, #7]
 8003bec:	701a      	strb	r2, [r3, #0]
}
 8003bee:	f107 070c 	add.w	r7, r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8003c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f023 0303 	bic.w	r3, r3, #3
 8003c18:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]
}
 8003c2e:	f107 0714 	add.w	r7, r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8003c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	b2db      	uxtb	r3, r3
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8003c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c78:	60fb      	str	r3, [r7, #12]
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	605a      	str	r2, [r3, #4]
}
 8003c8e:	f107 0714 	add.w	r7, r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8003ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003caa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cb8:	60fb      	str	r3, [r7, #12]
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	605a      	str	r2, [r3, #4]
}
 8003cce:	f107 0714 	add.w	r7, r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <RCC_PCLK2Config>:
  *             @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *             @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8003ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	605a      	str	r2, [r3, #4]
}
 8003d12:	f107 0714 	add.w	r7, r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b08b      	sub	sp, #44	; 0x2c
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	623b      	str	r3, [r7, #32]
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d00a      	beq.n	8003d80 <RCC_GetClocksFreq+0x64>
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d00f      	beq.n	8003d8e <RCC_GetClocksFreq+0x72>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d148      	bne.n	8003e04 <RCC_GetClocksFreq+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003d78:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003d7c:	6013      	str	r3, [r2, #0]
      break;
 8003d7e:	e048      	b.n	8003e12 <RCC_GetClocksFreq+0xf6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003d86:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003d8a:	6013      	str	r3, [r2, #0]
      break;
 8003d8c:	e041      	b.n	8003e12 <RCC_GetClocksFreq+0xf6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8003d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d9c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8003d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dac:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8003db4:	f103 0302 	add.w	r3, r3, #2
 8003db8:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d108      	bne.n	8003dd2 <RCC_GetClocksFreq+0xb6>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003dc6:	f2c0 033d 	movt	r3, #61	; 0x3d
 8003dca:	fb03 f302 	mul.w	r3, r3, r2
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd0:	e014      	b.n	8003dfc <RCC_GetClocksFreq+0xe0>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8003dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	f103 0301 	add.w	r3, r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8003de6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003dea:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e00:	601a      	str	r2, [r3, #0]
      break;
 8003e02:	e006      	b.n	8003e12 <RCC_GetClocksFreq+0xf6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003e0a:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003e0e:	6013      	str	r3, [r2, #0]
      break;
 8003e10:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e20:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8003e28:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8003e2a:	f240 0320 	movw	r3, #32
 8003e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	fa22 f203 	lsr.w	r2, r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8003e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e58:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003e60:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8003e62:	f240 0320 	movw	r3, #32
 8003e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e6a:	6a3a      	ldr	r2, [r7, #32]
 8003e6c:	189b      	adds	r3, r3, r2
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	fa22 f203 	lsr.w	r2, r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e90:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8003e98:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8003e9a:	f240 0320 	movw	r3, #32
 8003e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ea2:	6a3a      	ldr	r2, [r7, #32]
 8003ea4:	189b      	adds	r3, r3, r2
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	fa22 f203 	lsr.w	r2, r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8003eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ebe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ec8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8003ed0:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8003ed2:	f240 0330 	movw	r3, #48	; 0x30
 8003ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003eda:	6a3a      	ldr	r2, [r7, #32]
 8003edc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <RCC_GetClocksFreq+0x1e0>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8003eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	611a      	str	r2, [r3, #16]
 8003efa:	e003      	b.n	8003f04 <RCC_GetClocksFreq+0x1e8>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8003f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003f12:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8003f1a:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8003f1c:	f240 0330 	movw	r3, #48	; 0x30
 8003f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d006      	beq.n	8003f46 <RCC_GetClocksFreq+0x22a>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8003f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	615a      	str	r2, [r3, #20]
 8003f44:	e003      	b.n	8003f4e <RCC_GetClocksFreq+0x232>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8003f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <RCC_GetClocksFreq+0x252>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003f66:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003f6a:	6193      	str	r3, [r2, #24]
 8003f6c:	e003      	b.n	8003f76 <RCC_GetClocksFreq+0x25a>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8003f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <RCC_GetClocksFreq+0x27a>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003f8e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003f92:	61d3      	str	r3, [r2, #28]
 8003f94:	e003      	b.n	8003f9e <RCC_GetClocksFreq+0x282>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8003f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00e      	beq.n	8003fce <RCC_GetClocksFreq+0x2b2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d109      	bne.n	8003fce <RCC_GetClocksFreq+0x2b2>
  && (apb2presc == ahbpresc)) 
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d105      	bne.n	8003fce <RCC_GetClocksFreq+0x2b2>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]
 8003fcc:	e003      	b.n	8003fd6 <RCC_GetClocksFreq+0x2ba>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8003fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00e      	beq.n	8004006 <RCC_GetClocksFreq+0x2ea>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d109      	bne.n	8004006 <RCC_GetClocksFreq+0x2ea>
  && (apb2presc == ahbpresc))
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d105      	bne.n	8004006 <RCC_GetClocksFreq+0x2ea>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
 8004004:	e003      	b.n	800400e <RCC_GetClocksFreq+0x2f2>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800400e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004012:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <RCC_GetClocksFreq+0x30e>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28
 8004028:	e02a      	b.n	8004080 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 800402a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800402e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d104      	bne.n	8004046 <RCC_GetClocksFreq+0x32a>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	629a      	str	r2, [r3, #40]	; 0x28
 8004044:	e01c      	b.n	8004080 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8004046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800404a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d104      	bne.n	8004062 <RCC_GetClocksFreq+0x346>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
 8004060:	e00e      	b.n	8004080 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8004062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004066:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	2b03      	cmp	r3, #3
 8004072:	d105      	bne.n	8004080 <RCC_GetClocksFreq+0x364>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800407a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800407e:	6293      	str	r3, [r2, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8004080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004084:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <RCC_GetClocksFreq+0x380>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	62da      	str	r2, [r3, #44]	; 0x2c
 800409a:	e02d      	b.n	80040f8 <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800409c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ae:	d104      	bne.n	80040ba <RCC_GetClocksFreq+0x39e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80040b8:	e01e      	b.n	80040f8 <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80040ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040cc:	d104      	bne.n	80040d8 <RCC_GetClocksFreq+0x3bc>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80040d6:	e00f      	b.n	80040f8 <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80040d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ea:	d105      	bne.n	80040f8 <RCC_GetClocksFreq+0x3dc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80040f2:	f2c0 037a 	movt	r3, #122	; 0x7a
 80040f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80040f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <RCC_GetClocksFreq+0x3f8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
 8004112:	e02d      	b.n	8004170 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8004114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004118:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004122:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004126:	d104      	bne.n	8004132 <RCC_GetClocksFreq+0x416>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
 8004130:	e01e      	b.n	8004170 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8004132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004136:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004140:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004144:	d104      	bne.n	8004150 <RCC_GetClocksFreq+0x434>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
 800414e:	e00f      	b.n	8004170 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8004150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004154:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800415e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004162:	d105      	bne.n	8004170 <RCC_GetClocksFreq+0x454>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800416a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800416e:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8004170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004174:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <RCC_GetClocksFreq+0x470>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	635a      	str	r2, [r3, #52]	; 0x34
 800418a:	e02d      	b.n	80041e8 <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800418c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004190:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419e:	d104      	bne.n	80041aa <RCC_GetClocksFreq+0x48e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34
 80041a8:	e01e      	b.n	80041e8 <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80041aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80041b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041bc:	d104      	bne.n	80041c8 <RCC_GetClocksFreq+0x4ac>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041c4:	635a      	str	r2, [r3, #52]	; 0x34
 80041c6:	e00f      	b.n	80041e8 <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80041c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80041d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041da:	d105      	bne.n	80041e8 <RCC_GetClocksFreq+0x4cc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80041e2:	f2c0 037a 	movt	r3, #122	; 0x7a
 80041e6:	6353      	str	r3, [r2, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80041e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <RCC_GetClocksFreq+0x4e8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	639a      	str	r2, [r3, #56]	; 0x38
 8004202:	e02d      	b.n	8004260 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8004204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004208:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004216:	d104      	bne.n	8004222 <RCC_GetClocksFreq+0x506>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	639a      	str	r2, [r3, #56]	; 0x38
 8004220:	e01e      	b.n	8004260 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8004222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004226:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004234:	d104      	bne.n	8004240 <RCC_GetClocksFreq+0x524>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800423c:	639a      	str	r2, [r3, #56]	; 0x38
 800423e:	e00f      	b.n	8004260 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8004240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004244:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800424e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004252:	d105      	bne.n	8004260 <RCC_GetClocksFreq+0x544>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800425a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800425e:	6393      	str	r3, [r2, #56]	; 0x38
  } 
}
 8004260:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop

0800426c <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8004280:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00c      	beq.n	80042a2 <RCC_ADCCLKConfig+0x36>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8004288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800428c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004290:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004294:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004298:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800429a:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c
 80042a0:	e00b      	b.n	80042ba <RCC_ADCCLKConfig+0x4e>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 80042a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80042aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80042b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042b4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80042b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 80042ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80042c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80042ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80042d2:	f107 0714 	add.w	r7, r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <RCC_I2CCLKConfig>:
  *     @arg RCC_I2CxCLK_SYSCLK: I2Cx clock = System Clock
  *          (x can be 1 or 2).  
  * @retval None
  */
void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
{ 
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	ea4f 7313 	mov.w	r3, r3, lsr #28
 80042f0:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00c      	beq.n	8004312 <RCC_I2CCLKConfig+0x36>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 80042f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004300:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004304:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004308:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800430a:	f022 0220 	bic.w	r2, r2, #32
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
 8004310:	e00b      	b.n	800432a <RCC_I2CCLKConfig+0x4e>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8004312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004316:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800431a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800431e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004322:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004324:	f022 0210 	bic.w	r2, r2, #16
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 800432a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800432e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004332:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004336:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800433a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	430a      	orrs	r2, r1
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004342:	f107 0714 	add.w	r7, r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <RCC_TIMCLKConfig>:
  *     @arg RCC_TIMxCLK_PLLCLK: TIMx clock = PLL output (running up to 144 MHz)
  *          (x can be 1 or 8).
  * @retval None
  */
void RCC_TIMCLKConfig(uint32_t RCC_TIMCLK)
{ 
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK(RCC_TIMCLK));

  tmp = (RCC_TIMCLK >> 28);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8004360:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <RCC_TIMCLKConfig+0x36>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 8004368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800436c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004370:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004374:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004378:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800437a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
 8004380:	e00b      	b.n	800439a <RCC_TIMCLKConfig+0x4e>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 8004382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004386:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800438a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800438e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004392:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 800439a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800439e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80043a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80043aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043b2:	f107 0714 	add.w	r7, r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <RCC_USARTCLKConfig>:
  *     @arg RCC_USARTxCLK_HSI: USART clock = HSI Clock
  *          (x can be 1, 2, 3, 4 or 5).  
  * @retval None
  */
void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
{ 
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	ea4f 7313 	mov.w	r3, r3, lsr #28
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d84e      	bhi.n	800447a <RCC_USARTCLKConfig+0xbe>
 80043dc:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <RCC_USARTCLKConfig+0x28>)
 80043de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e2:	bf00      	nop
 80043e4:	080043f9 	.word	0x080043f9
 80043e8:	08004413 	.word	0x08004413
 80043ec:	0800442d 	.word	0x0800442d
 80043f0:	08004447 	.word	0x08004447
 80043f4:	08004461 	.word	0x08004461
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80043f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004404:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004408:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800440a:	f022 0203 	bic.w	r2, r2, #3
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8004410:	e034      	b.n	800447c <RCC_USARTCLKConfig+0xc0>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 8004412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004416:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800441a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800441e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004422:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004424:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004428:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 800442a:	e027      	b.n	800447c <RCC_USARTCLKConfig+0xc0>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 800442c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004430:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004438:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800443c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800443e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8004444:	e01a      	b.n	800447c <RCC_USARTCLKConfig+0xc0>
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 8004446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800444a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800444e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004452:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004456:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004458:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 800445e:	e00d      	b.n	800447c <RCC_USARTCLKConfig+0xc0>
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 8004460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004464:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800446c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004470:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004472:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8004478:	e000      	b.n	800447c <RCC_USARTCLKConfig+0xc0>
    default:
      break;
 800447a:	bf00      	nop
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 800447c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004480:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004488:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800448c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	430a      	orrs	r2, r1
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004494:	f107 0714 	add.w	r7, r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop

080044a0 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80044a8:	f04f 03d8 	mov.w	r3, #216	; 0xd8
 80044ac:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	601a      	str	r2, [r3, #0]
}
 80044b4:	f107 070c 	add.w	r7, r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <RCC_RTCCLKConfig>:
  * @note     The maximum input clock frequency for RTC is 2MHz (when using HSE as
  *           RTC clock source).             
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80044c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80044d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80044d8:	6a11      	ldr	r1, [r2, #32]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	430a      	orrs	r2, r1
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	f107 070c 	add.w	r7, r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop

080044ec <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80044f4:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 80044f8:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	601a      	str	r2, [r3, #0]
}
 8004500:	f107 070c 	add.w	r7, r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop

0800450c <RCC_RTCCLKCmd>:
  * @param  NewState: new state of the RTC clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8004516:	f240 433c 	movw	r3, #1084	; 0x43c
 800451a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800451e:	79fa      	ldrb	r2, [r7, #7]
 8004520:	601a      	str	r2, [r3, #0]
}
 8004522:	f107 070c 	add.w	r7, r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8004536:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800453a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800453e:	79fa      	ldrb	r2, [r7, #7]
 8004540:	601a      	str	r2, [r3, #0]
}
 8004542:	f107 070c 	add.w	r7, r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00c      	beq.n	8004578 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800455e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004562:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800456a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800456e:	6951      	ldr	r1, [r2, #20]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	430a      	orrs	r2, r1
 8004574:	615a      	str	r2, [r3, #20]
 8004576:	e00d      	b.n	8004594 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8004578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800457c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004584:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004588:	6951      	ldr	r1, [r2, #20]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	ea6f 0202 	mvn.w	r2, r2
 8004590:	400a      	ands	r2, r1
 8004592:	615a      	str	r2, [r3, #20]
  }
}
 8004594:	f107 070c 	add.w	r7, r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop

080045a0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80045b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80045ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80045c2:	6991      	ldr	r1, [r2, #24]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	619a      	str	r2, [r3, #24]
 80045ca:	e00d      	b.n	80045e8 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80045cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80045d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80045dc:	6991      	ldr	r1, [r2, #24]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	ea6f 0202 	mvn.w	r2, r2
 80045e4:	400a      	ands	r2, r1
 80045e6:	619a      	str	r2, [r3, #24]
  }
}
 80045e8:	f107 070c 	add.w	r7, r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop

080045f4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00c      	beq.n	8004620 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800460a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800460e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004612:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004616:	69d1      	ldr	r1, [r2, #28]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	430a      	orrs	r2, r1
 800461c:	61da      	str	r2, [r3, #28]
 800461e:	e00d      	b.n	800463c <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004624:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800462c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004630:	69d1      	ldr	r1, [r2, #28]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	ea6f 0202 	mvn.w	r2, r2
 8004638:	400a      	ands	r2, r1
 800463a:	61da      	str	r2, [r3, #28]
  }
}
 800463c:	f107 070c 	add.w	r7, r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop

08004648 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00c      	beq.n	8004674 <RCC_AHBPeriphResetCmd+0x2c>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 800465a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800465e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004666:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800466a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	430a      	orrs	r2, r1
 8004670:	629a      	str	r2, [r3, #40]	; 0x28
 8004672:	e00d      	b.n	8004690 <RCC_AHBPeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8004674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004678:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800467c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004680:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004684:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	ea6f 0202 	mvn.w	r2, r2
 800468c:	400a      	ands	r2, r1
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8004690:	f107 070c 	add.w	r7, r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop

0800469c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80046ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80046b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80046be:	68d1      	ldr	r1, [r2, #12]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	e00d      	b.n	80046e4 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80046c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80046d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80046d8:	68d1      	ldr	r1, [r2, #12]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	ea6f 0202 	mvn.w	r2, r2
 80046e0:	400a      	ands	r2, r1
 80046e2:	60da      	str	r2, [r3, #12]
  }
}
 80046e4:	f107 070c 	add.w	r7, r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop

080046f0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00c      	beq.n	800471c <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004706:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800470a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800470e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004712:	6911      	ldr	r1, [r2, #16]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	430a      	orrs	r2, r1
 8004718:	611a      	str	r2, [r3, #16]
 800471a:	e00d      	b.n	8004738 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800471c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004720:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004728:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800472c:	6911      	ldr	r1, [r2, #16]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	ea6f 0202 	mvn.w	r2, r2
 8004734:	400a      	ands	r2, r1
 8004736:	611a      	str	r2, [r3, #16]
  }
}
 8004738:	f107 070c 	add.w	r7, r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop

08004744 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	71fa      	strb	r2, [r7, #7]
 8004750:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004752:	79bb      	ldrb	r3, [r7, #6]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00e      	beq.n	8004776 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004758:	f241 0309 	movw	r3, #4105	; 0x1009
 800475c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004760:	f241 0209 	movw	r2, #4105	; 0x1009
 8004764:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004768:	7812      	ldrb	r2, [r2, #0]
 800476a:	b2d1      	uxtb	r1, r2
 800476c:	79fa      	ldrb	r2, [r7, #7]
 800476e:	430a      	orrs	r2, r1
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e010      	b.n	8004798 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8004776:	f241 0309 	movw	r3, #4105	; 0x1009
 800477a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800477e:	f241 0209 	movw	r2, #4105	; 0x1009
 8004782:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004786:	7812      	ldrb	r2, [r2, #0]
 8004788:	b2d1      	uxtb	r1, r2
 800478a:	79fa      	ldrb	r2, [r7, #7]
 800478c:	ea6f 0202 	mvn.w	r2, r2
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	400a      	ands	r2, r1
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]
  }
}
 8004798:	f107 070c 	add.w	r7, r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop

080047a4 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	60fb      	str	r3, [r7, #12]

   if (tmp == 0)               /* The flag to check is in CR register */
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 80047d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e019      	b.n	8004812 <RCC_GetFlagStatus+0x6e>
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d106      	bne.n	80047f2 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 80047e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	e00f      	b.n	8004812 <RCC_GetFlagStatus+0x6e>
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d106      	bne.n	8004806 <RCC_GetFlagStatus+0x62>
  {
    statusreg = RCC->CFGR;
 80047f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e005      	b.n	8004812 <RCC_GetFlagStatus+0x6e>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800480a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <RCC_GetFlagStatus+0x8e>
  {
    bitstatus = SET;
 800482a:	f04f 0301 	mov.w	r3, #1
 800482e:	74fb      	strb	r3, [r7, #19]
 8004830:	e002      	b.n	8004838 <RCC_GetFlagStatus+0x94>
  }
  else
  {
    bitstatus = RESET;
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8004838:	7cfb      	ldrb	r3, [r7, #19]
}
 800483a:	4618      	mov	r0, r3
 800483c:	f107 071c 	add.w	r7, r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <RCC_ClearFlag>:
  *         RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST.
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800484c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004850:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004854:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004858:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800485c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800485e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004862:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop

0800486c <RCC_GetITStatus>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800487c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004880:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 800488e:	f04f 0301 	mov.w	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
 8004894:	e002      	b.n	800489c <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	f107 0714 	add.w	r7, r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop

080048ac <RCC_ClearITPendingBit>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80048b6:	f241 030a 	movw	r3, #4106	; 0x100a
 80048ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80048be:	79fa      	ldrb	r2, [r7, #7]
 80048c0:	701a      	strb	r2, [r3, #0]
}
 80048c2:	f107 070c 	add.w	r7, r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <SPI_I2S_DeInit>:
  * @param  SPIx: To select the SPIx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80048da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048de:	429a      	cmp	r2, r3
 80048e0:	d10c      	bne.n	80048fc <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80048e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80048e6:	f04f 0101 	mov.w	r1, #1
 80048ea:	f7ff fed7 	bl	800469c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80048ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	f7ff fed1 	bl	800469c <RCC_APB2PeriphResetCmd>
 80048fa:	e026      	b.n	800494a <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004902:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004906:	429a      	cmp	r2, r3
 8004908:	d10c      	bne.n	8004924 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800490a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800490e:	f04f 0101 	mov.w	r1, #1
 8004912:	f7ff feed 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8004916:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800491a:	f04f 0100 	mov.w	r1, #0
 800491e:	f7ff fee7 	bl	80046f0 <RCC_APB1PeriphResetCmd>
 8004922:	e012      	b.n	800494a <SPI_I2S_DeInit+0x7e>
  }
  else
  {
    if (SPIx == SPI3)
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800492a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800492e:	429a      	cmp	r2, r3
 8004930:	d10b      	bne.n	800494a <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8004932:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004936:	f04f 0101 	mov.w	r1, #1
 800493a:	f7ff fed9 	bl	80046f0 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800493e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	f7ff fed3 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800494a:	f107 0708 	add.w	r7, r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop

08004954 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	801a      	strh	r2, [r3, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	805a      	strh	r2, [r3, #2]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004972:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f04f 0207 	mov.w	r2, #7
 80049a2:	821a      	strh	r2, [r3, #16]
}
 80049a4:	f107 070c 	add.w	r7, r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop

080049b0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /* Configuring the SPI in master mode */
  if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	885b      	ldrh	r3, [r3, #2]
 80049c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c8:	d136      	bne.n	8004a38 <SPI_Init+0x88>
  {
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 80049d0:	89fb      	ldrh	r3, [r7, #14]
 80049d2:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80049d6:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	881a      	ldrh	r2, [r3, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	885b      	ldrh	r3, [r3, #2]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	88d9      	ldrh	r1, [r3, #6]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	891b      	ldrh	r3, [r3, #8]
 80049ec:	430b      	orrs	r3, r1
 80049ee:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	8958      	ldrh	r0, [r3, #10]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	899b      	ldrh	r3, [r3, #12]
 80049f8:	4303      	orrs	r3, r0
 80049fa:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	89db      	ldrh	r3, [r3, #14]
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8004a00:	4303      	orrs	r3, r0
 8004a02:	b29b      	uxth	r3, r3
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 8004a04:	430b      	orrs	r3, r1
 8004a06:	b29b      	uxth	r3, r3
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	89fb      	ldrh	r3, [r7, #14]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	81fb      	strh	r3, [r7, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));
    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	89fa      	ldrh	r2, [r7, #14]
 8004a16:	801a      	strh	r2, [r3, #0]
    /*-------------------------Data Size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	889b      	ldrh	r3, [r3, #4]
 8004a1c:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8004a1e:	89fb      	ldrh	r3, [r7, #14]
 8004a20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a24:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	889a      	ldrh	r2, [r3, #4]
 8004a2a:	89fb      	ldrh	r3, [r7, #14]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	89fa      	ldrh	r2, [r7, #14]
 8004a34:	809a      	strh	r2, [r3, #4]
 8004a36:	e035      	b.n	8004aa4 <SPI_Init+0xf4>
  /* Configuring the SPI in slave mode */
  else
  {
/*---------------------------- Data size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	889b      	ldrh	r3, [r3, #4]
 8004a3c:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8004a3e:	89fb      	ldrh	r3, [r7, #14]
 8004a40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a44:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	889a      	ldrh	r2, [r3, #4]
 8004a4a:	89fb      	ldrh	r3, [r7, #14]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	89fa      	ldrh	r2, [r7, #14]
 8004a54:	809a      	strh	r2, [r3, #4]
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
 8004a5e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8004a62:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	881a      	ldrh	r2, [r3, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	885b      	ldrh	r3, [r3, #2]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	88d9      	ldrh	r1, [r3, #6]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	891b      	ldrh	r3, [r3, #8]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	8958      	ldrh	r0, [r3, #10]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	899b      	ldrh	r3, [r3, #12]
 8004a84:	4303      	orrs	r3, r0
 8004a86:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	89db      	ldrh	r3, [r3, #14]
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8004a8c:	4303      	orrs	r3, r0
 8004a8e:	b29b      	uxth	r3, r3
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 8004a90:	430b      	orrs	r3, r1
 8004a92:	b29b      	uxth	r3, r3
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8004a94:	4313      	orrs	r3, r2
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	89fb      	ldrh	r3, [r7, #14]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	81fb      	strh	r3, [r7, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));

    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	89fa      	ldrh	r2, [r7, #14]
 8004aa2:	801a      	strh	r2, [r3, #0]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8b9b      	ldrh	r3, [r3, #28]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	8a1a      	ldrh	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	821a      	strh	r2, [r3, #16]
}
 8004abc:	f107 0714 	add.w	r7, r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop

08004ac8 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	801a      	strh	r2, [r3, #0]

  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	805a      	strh	r2, [r3, #2]

  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	809a      	strh	r2, [r3, #4]

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	80da      	strh	r2, [r3, #6]

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f04f 0202 	mov.w	r2, #2
 8004af6:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	819a      	strh	r2, [r3, #12]
}
 8004b00:	f107 070c 	add.w	r7, r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop

08004b0c <I2S_Init>:
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.     
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b096      	sub	sp, #88	; 0x58
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b1e:	f04f 0302 	mov.w	r3, #2
 8004b22:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8004b2e:	f04f 0301 	mov.w	r3, #1
 8004b32:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
  uint32_t tmp = 0;
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClocksTypeDef RCC_Clocks;
  uint32_t sourceclock = 0;
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	647b      	str	r3, [r7, #68]	; 0x44
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8b9b      	ldrh	r3, [r3, #28]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b4c:	f023 030f 	bic.w	r3, r3, #15
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f04f 0202 	mov.w	r2, #2
 8004b5c:	841a      	strh	r2, [r3, #32]

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8b9b      	ldrh	r3, [r3, #28]
 8004b62:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d108      	bne.n	8004b80 <I2S_Init+0x74>
  {
    i2sodd = (uint16_t)0;
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    i2sdiv = (uint16_t)2;   
 8004b76:	f04f 0302 	mov.w	r3, #2
 8004b7a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004b7e:	e061      	b.n	8004c44 <I2S_Init+0x138>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	889b      	ldrh	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <I2S_Init+0x86>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8004b88:	f04f 0301 	mov.w	r3, #1
 8004b8c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004b90:	e003      	b.n	8004b9a <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8004b92:	f04f 0302 	mov.w	r3, #2
 8004b96:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8004b9a:	f107 0308 	add.w	r3, r7, #8
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff f8bc 	bl	8003d1c <RCC_GetClocksFreq>

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	88db      	ldrh	r3, [r3, #6]
 8004bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb0:	d113      	bne.n	8004bda <I2S_Init+0xce>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb4:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8004bb8:	4613      	mov	r3, r2
 8004bba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f103 0305 	add.w	r3, r3, #5
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd8:	e016      	b.n	8004c08 <I2S_Init+0xfc>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004bda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004bde:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8004be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004be8:	4613      	mov	r3, r2
 8004bea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004bee:	189b      	adds	r3, r3, r2
 8004bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f103 0305 	add.w	r3, r3, #5
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 8004c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c0a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8004c0e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8004c12:	fba3 1302 	umull	r1, r3, r3, r2
 8004c16:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8004c1a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8004c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8004c28:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8004c34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8004c38:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004c3c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004c40:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8004c44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d903      	bls.n	8004c54 <I2S_Init+0x148>
 8004c4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c50:	2bff      	cmp	r3, #255	; 0xff
 8004c52:	d907      	bls.n	8004c64 <I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2;
 8004c54:	f04f 0302 	mov.w	r3, #2
 8004c58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    i2sodd = 0;
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	88da      	ldrh	r2, [r3, #6]
 8004c68:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c74:	4313      	orrs	r3, r2
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	841a      	strh	r2, [r3, #32]

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	881a      	ldrh	r2, [r3, #0]
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	8859      	ldrh	r1, [r3, #2]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	889b      	ldrh	r3, [r3, #4]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	b299      	uxth	r1, r3
                       I2S_InitStruct->I2S_CPOL)));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
 8004c90:	430b      	orrs	r3, r1
 8004c92:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ca4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
                       I2S_InitStruct->I2S_CPOL)));

  /* Write to SPIx I2SCFGR */
  SPIx->I2SCFGR = tmpreg;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004cae:	839a      	strh	r2, [r3, #28]
}
 8004cb0:	f107 0758 	add.w	r7, r7, #88	; 0x58
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	e007      	b.n	8004cec <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	801a      	strh	r2, [r3, #0]
  }
}
 8004cec:	f107 070c 	add.w	r7, r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop

08004cf8 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d008      	beq.n	8004d1c <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	889b      	ldrh	r3, [r3, #4]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f043 0310 	orr.w	r3, r3, #16
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	809a      	strh	r2, [r3, #4]
 8004d1a:	e007      	b.n	8004d2c <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	889b      	ldrh	r3, [r3, #4]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f023 0310 	bic.w	r3, r3, #16
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	809a      	strh	r2, [r3, #4]
  }
}
 8004d2c:	f107 070c 	add.w	r7, r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop

08004d38 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8b9b      	ldrh	r3, [r3, #28]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	839a      	strh	r2, [r3, #28]
 8004d5a:	e007      	b.n	8004d6c <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8b9b      	ldrh	r3, [r3, #28]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	839a      	strh	r2, [r3, #28]
  }
}
 8004d6c:	f107 070c 	add.w	r7, r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop

08004d78 <SPI_DataSizeConfig>:
  *     @arg SPI_DataSize_15b: Set data size to 15 bits
  *     @arg SPI_DataSize_16b: Set data size to 16 bits
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
  /* Read the CR2 register */
  tmpreg = SPIx->CR2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	889b      	ldrh	r3, [r3, #4]
 8004d8e:	81fb      	strh	r3, [r7, #14]
  /* Clear DS[3:0] bits */
  tmpreg &= (uint16_t)~SPI_CR2_DS;
 8004d90:	89fb      	ldrh	r3, [r7, #14]
 8004d92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d96:	81fb      	strh	r3, [r7, #14]
  /* Set new DS[3:0] bits value */
  tmpreg |= SPI_DataSize;
 8004d98:	89fa      	ldrh	r2, [r7, #14]
 8004d9a:	887b      	ldrh	r3, [r7, #2]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	81fb      	strh	r3, [r7, #14]
  SPIx->CR2 = tmpreg;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	89fa      	ldrh	r2, [r7, #14]
 8004da4:	809a      	strh	r2, [r3, #4]
}
 8004da6:	f107 0714 	add.w	r7, r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <SPI_RxFIFOThresholdConfig>:
  *     @arg SPI_RxFIFOThreshold_QF: RXNE event is generated if the FIFO 
  *          level is greater or equal to 1/4. 
  * @retval None
  */
void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	889b      	ldrh	r3, [r3, #4]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	809a      	strh	r2, [r3, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	889b      	ldrh	r3, [r3, #4]
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	887b      	ldrh	r3, [r7, #2]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	809a      	strh	r2, [r3, #4]
}
 8004ddc:	f107 070c 	add.w	r7, r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop

08004de8 <SPI_BiDirectionalLineConfig>:
  *     @arg SPI_Direction_Tx: Selects Tx transmission direction
  *     @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8004df4:	887b      	ldrh	r3, [r7, #2]
 8004df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dfa:	d108      	bne.n	8004e0e <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	801a      	strh	r2, [r3, #0]
 8004e0c:	e007      	b.n	8004e1e <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	801a      	strh	r2, [r3, #0]
  }
}
 8004e1e:	f107 070c 	add.w	r7, r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <SPI_NSSInternalSoftwareConfig>:
  *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8004e34:	887a      	ldrh	r2, [r7, #2]
 8004e36:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d008      	beq.n	8004e50 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	801a      	strh	r2, [r3, #0]
 8004e4e:	e007      	b.n	8004e60 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	801a      	strh	r2, [r3, #0]
  }
}
 8004e60:	f107 070c 	add.w	r7, r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop

08004e6c <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	81bb      	strh	r3, [r7, #12]
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8b9b      	ldrh	r3, [r3, #28]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e8c:	f023 030f 	bic.w	r3, r3, #15
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f04f 0202 	mov.w	r2, #2
 8004e9c:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8b9b      	ldrh	r3, [r3, #28]
 8004ea2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eac:	d003      	beq.n	8004eb6 <I2S_FullDuplexConfig+0x4a>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <I2S_FullDuplexConfig+0x52>
  {
    tmp = I2S_Mode_SlaveRx;
 8004eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eba:	81fb      	strh	r3, [r7, #14]
 8004ebc:	e00c      	b.n	8004ed8 <I2S_FullDuplexConfig+0x6c>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ec6:	d004      	beq.n	8004ed2 <I2S_FullDuplexConfig+0x66>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed0:	d102      	bne.n	8004ed8 <I2S_FullDuplexConfig+0x6c>
    {
      tmp = I2S_Mode_SlaveTx;
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	885a      	ldrh	r2, [r3, #2]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004eec:	89fb      	ldrh	r3, [r7, #14]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	89bb      	ldrh	r3, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004efc:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	89ba      	ldrh	r2, [r7, #12]
 8004f02:	839a      	strh	r2, [r3, #28]
}
 8004f04:	f107 0714 	add.w	r7, r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	889b      	ldrh	r3, [r3, #4]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f043 0304 	orr.w	r3, r3, #4
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	809a      	strh	r2, [r3, #4]
 8004f32:	e007      	b.n	8004f44 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	889b      	ldrh	r3, [r3, #4]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f023 0304 	bic.w	r3, r3, #4
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	809a      	strh	r2, [r3, #4]
  }
}
 8004f44:	f107 070c 	add.w	r7, r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop

08004f50 <SPI_NSSPulseModeCmd>:
  * @param  NewState: new state of the NSS pulse management mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <SPI_NSSPulseModeCmd+0x24>
  {
    /* Enable the NSS pulse management mode */
    SPIx->CR2 |= SPI_CR2_NSSP;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	889b      	ldrh	r3, [r3, #4]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f043 0308 	orr.w	r3, r3, #8
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	809a      	strh	r2, [r3, #4]
 8004f72:	e007      	b.n	8004f84 <SPI_NSSPulseModeCmd+0x34>
  }
  else
  {
    /* Disable the NSS pulse management mode */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	889b      	ldrh	r3, [r3, #4]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f023 0308 	bic.w	r3, r3, #8
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	809a      	strh	r2, [r3, #4]
  }
}
 8004f84:	f107 070c 	add.w	r7, r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop

08004f90 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f103 030c 	add.w	r3, r3, #12
 8004fac:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	701a      	strb	r2, [r3, #0]
}
 8004fb4:	f107 0714 	add.w	r7, r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop

08004fc0 <SPI_I2S_SendData16>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	887a      	ldrh	r2, [r7, #2]
 8004fd0:	819a      	strh	r2, [r3, #12]
}
 8004fd2:	f107 070c 	add.w	r7, r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <SPI_ReceiveData8>:
  * @brief  Returns the most recent received data by the SPIx peripheral. 
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t spixbase = 0x00;
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  spixbase = (uint32_t)SPIx; 
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f103 030c 	add.w	r3, r3, #12
 8004ff4:	60fb      	str	r3, [r7, #12]
  
  return *(__IO uint8_t *) spixbase;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	b2db      	uxtb	r3, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f107 0714 	add.w	r7, r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <SPI_I2S_ReceiveData16>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{  
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  return SPIx->DR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	899b      	ldrh	r3, [r3, #12]
 8005014:	b29b      	uxth	r3, r3
}
 8005016:	4618      	mov	r0, r3
 8005018:	f107 070c 	add.w	r7, r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop

08005024 <SPI_CRCLengthConfig>:
  *     @arg SPI_CRCLength_8b: Set CRC Calculation to 8 bits
  *     @arg SPI_CRCLength_16b: Set CRC Calculation to 16 bits
  * @retval None
  */
void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));

  /* Clear CRCL bit */
  SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800503a:	b29a      	uxth	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	801a      	strh	r2, [r3, #0]

  /* Set new CRCL bit value */
  SPIx->CR1 |= SPI_CRCLength;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29a      	uxth	r2, r3
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	4313      	orrs	r3, r2
 800504a:	b29a      	uxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	801a      	strh	r2, [r3, #0]
}
 8005050:	f107 070c 	add.w	r7, r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop

0800505c <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005078:	b29a      	uxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	e007      	b.n	8005090 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800508a:	b29a      	uxth	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	801a      	strh	r2, [r3, #0]
  }
}
 8005090:	f107 070c 	add.w	r7, r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop

0800509c <SPI_TransmitCRC>:
  * @brief  Transmits the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	801a      	strh	r2, [r3, #0]
}
 80050b4:	f107 070c 	add.w	r7, r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop

080050c0 <SPI_GetCRC>:
  *     @arg SPI_CRC_Tx: Selects Tx CRC register
  *     @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d003      	beq.n	80050e0 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8b1b      	ldrh	r3, [r3, #24]
 80050dc:	81fb      	strh	r3, [r7, #14]
 80050de:	e002      	b.n	80050e6 <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8a9b      	ldrh	r3, [r3, #20]
 80050e4:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 80050e6:	89fb      	ldrh	r3, [r7, #14]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	f107 0714 	add.w	r7, r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8a1b      	ldrh	r3, [r3, #16]
 8005100:	b29b      	uxth	r3, r3
}
 8005102:	4618      	mov	r0, r3
 8005104:	f107 070c 	add.w	r7, r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop

08005110 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	460a      	mov	r2, r1
 800511c:	807a      	strh	r2, [r7, #2]
 800511e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8005120:	787b      	ldrb	r3, [r7, #1]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	889b      	ldrh	r3, [r3, #4]
 800512a:	b29a      	uxth	r2, r3
 800512c:	887b      	ldrh	r3, [r7, #2]
 800512e:	4313      	orrs	r3, r2
 8005130:	b29a      	uxth	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	809a      	strh	r2, [r3, #4]
 8005136:	e00a      	b.n	800514e <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	889b      	ldrh	r3, [r3, #4]
 800513c:	b29a      	uxth	r2, r3
 800513e:	887b      	ldrh	r3, [r7, #2]
 8005140:	ea6f 0303 	mvn.w	r3, r3
 8005144:	b29b      	uxth	r3, r3
 8005146:	4013      	ands	r3, r2
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	809a      	strh	r2, [r3, #4]
  }
}
 800514e:	f107 070c 	add.w	r7, r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <SPI_LastDMATransferCmd>:
  *     @arg SPI_LastDMATransfer_TxOddRxOdd: RNumber of data for transmission Odd
  *          and number of data for reception Odd.
  * @retval None
  */
void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));

  /* Clear LDMA_TX and LDMA_RX bits */
  SPIx->CR2 &= CR2_LDMA_MASK;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	889b      	ldrh	r3, [r3, #4]
 8005168:	b29b      	uxth	r3, r3
 800516a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800516e:	b29a      	uxth	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	809a      	strh	r2, [r3, #4]

  /* Set new LDMA_TX and LDMA_RX bits value */
  SPIx->CR2 |= SPI_LastDMATransfer; 
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	889b      	ldrh	r3, [r3, #4]
 8005178:	b29a      	uxth	r2, r3
 800517a:	887b      	ldrh	r3, [r7, #2]
 800517c:	4313      	orrs	r3, r2
 800517e:	b29a      	uxth	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	809a      	strh	r2, [r3, #4]
}
 8005184:	f107 070c 	add.w	r7, r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop

08005190 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	460a      	mov	r2, r1
 800519c:	70fa      	strb	r2, [r7, #3]
 800519e:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	81fb      	strh	r3, [r7, #14]
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80051b6:	89fb      	ldrh	r3, [r7, #14]
 80051b8:	f04f 0201 	mov.w	r2, #1
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80051c2:	78bb      	ldrb	r3, [r7, #2]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	889b      	ldrh	r3, [r3, #4]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	89bb      	ldrh	r3, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	809a      	strh	r2, [r3, #4]
 80051d8:	e00a      	b.n	80051f0 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	889b      	ldrh	r3, [r3, #4]
 80051de:	b29a      	uxth	r2, r3
 80051e0:	89bb      	ldrh	r3, [r7, #12]
 80051e2:	ea6f 0303 	mvn.w	r3, r3
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	4013      	ands	r3, r2
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	809a      	strh	r2, [r3, #4]
  }
}
 80051f0:	f107 0714 	add.w	r7, r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop

080051fc <SPI_GetTransmissionFIFOStatus>:
  *   - SPI_TransmissionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
  *   - SPI_TransmissionFIFOStatus_HalfFull: if more than 1 half-full.
  *   - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Get the SPIx Transmission FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	891b      	ldrh	r3, [r3, #8]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800520e:	b29b      	uxth	r3, r3
}
 8005210:	4618      	mov	r0, r3
 8005212:	f107 070c 	add.w	r7, r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <SPI_GetReceptionFIFOStatus>:
  *   - SPI_ReceptionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
  *   - SPI_ReceptionFIFOStatus_HalfFull: if more than 1 half-full.
  *   - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Get the SPIx Reception FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	891b      	ldrh	r3, [r3, #8]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800522e:	b29b      	uxth	r3, r3
}
 8005230:	4618      	mov	r0, r3
 8005232:	f107 070c 	add.w	r7, r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	891b      	ldrh	r3, [r3, #8]
 8005252:	b29a      	uxth	r2, r3
 8005254:	887b      	ldrh	r3, [r7, #2]
 8005256:	4013      	ands	r3, r2
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800525e:	f04f 0301 	mov.w	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
 8005264:	e002      	b.n	800526c <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	f107 0714 	add.w	r7, r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop

0800527c <SPI_I2S_ClearFlag>:
  *       operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
  *       write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));

  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	ea6f 0303 	mvn.w	r3, r3
 800528e:	b29a      	uxth	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	811a      	strh	r2, [r3, #8]
}
 8005294:	f107 070c 	add.w	r7, r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop

080052a0 <SPI_I2S_GetITStatus>:
  *     @arg I2S_IT_UDR: Underrun interrupt.  
  *     @arg SPI_I2S_IT_FRE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	81bb      	strh	r3, [r7, #12]
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	f04f 0201 	mov.w	r2, #1
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80052de:	897b      	ldrh	r3, [r7, #10]
 80052e0:	f04f 0201 	mov.w	r2, #1
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	889b      	ldrh	r3, [r3, #4]
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	897b      	ldrh	r3, [r7, #10]
 80052f2:	4013      	ands	r3, r2
 80052f4:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	891b      	ldrh	r3, [r3, #8]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	89bb      	ldrh	r3, [r7, #12]
 80052fe:	4013      	ands	r3, r2
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <SPI_I2S_GetITStatus+0x74>
 8005306:	893b      	ldrh	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800530c:	f04f 0301 	mov.w	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
 8005312:	e002      	b.n	800531a <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	f107 0714 	add.w	r7, r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005336:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800533a:	429a      	cmp	r2, r3
 800533c:	d10c      	bne.n	8005358 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800533e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005342:	f04f 0101 	mov.w	r1, #1
 8005346:	f7ff f9a9 	bl	800469c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800534a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	f7ff f9a3 	bl	800469c <RCC_APB2PeriphResetCmd>
 8005356:	e0af      	b.n	80054b8 <TIM_DeInit+0x190>
  } 
  else if (TIMx == TIM2) 
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535e:	d10c      	bne.n	800537a <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8005360:	f04f 0001 	mov.w	r0, #1
 8005364:	f04f 0101 	mov.w	r1, #1
 8005368:	f7ff f9c2 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800536c:	f04f 0001 	mov.w	r0, #1
 8005370:	f04f 0100 	mov.w	r1, #0
 8005374:	f7ff f9bc 	bl	80046f0 <RCC_APB1PeriphResetCmd>
 8005378:	e09e      	b.n	80054b8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM3)
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005380:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005384:	429a      	cmp	r2, r3
 8005386:	d10c      	bne.n	80053a2 <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8005388:	f04f 0002 	mov.w	r0, #2
 800538c:	f04f 0101 	mov.w	r1, #1
 8005390:	f7ff f9ae 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8005394:	f04f 0002 	mov.w	r0, #2
 8005398:	f04f 0100 	mov.w	r1, #0
 800539c:	f7ff f9a8 	bl	80046f0 <RCC_APB1PeriphResetCmd>
 80053a0:	e08a      	b.n	80054b8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM4)
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d10c      	bne.n	80053ca <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80053b0:	f04f 0004 	mov.w	r0, #4
 80053b4:	f04f 0101 	mov.w	r1, #1
 80053b8:	f7ff f99a 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80053bc:	f04f 0004 	mov.w	r0, #4
 80053c0:	f04f 0100 	mov.w	r1, #0
 80053c4:	f7ff f994 	bl	80046f0 <RCC_APB1PeriphResetCmd>
 80053c8:	e076      	b.n	80054b8 <TIM_DeInit+0x190>
  }   
  else if (TIMx == TIM6)  
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d10c      	bne.n	80053f2 <TIM_DeInit+0xca>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80053d8:	f04f 0010 	mov.w	r0, #16
 80053dc:	f04f 0101 	mov.w	r1, #1
 80053e0:	f7ff f986 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80053e4:	f04f 0010 	mov.w	r0, #16
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	f7ff f980 	bl	80046f0 <RCC_APB1PeriphResetCmd>
 80053f0:	e062      	b.n	80054b8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM7)
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80053f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d10c      	bne.n	800541a <TIM_DeInit+0xf2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8005400:	f04f 0020 	mov.w	r0, #32
 8005404:	f04f 0101 	mov.w	r1, #1
 8005408:	f7ff f972 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800540c:	f04f 0020 	mov.w	r0, #32
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	f7ff f96c 	bl	80046f0 <RCC_APB1PeriphResetCmd>
 8005418:	e04e      	b.n	80054b8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM8)
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8005420:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005424:	429a      	cmp	r2, r3
 8005426:	d10c      	bne.n	8005442 <TIM_DeInit+0x11a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8005428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800542c:	f04f 0101 	mov.w	r1, #1
 8005430:	f7ff f934 	bl	800469c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8005434:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005438:	f04f 0100 	mov.w	r1, #0
 800543c:	f7ff f92e 	bl	800469c <RCC_APB2PeriphResetCmd>
 8005440:	e03a      	b.n	80054b8 <TIM_DeInit+0x190>
  }    
  else if (TIMx == TIM15)
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005448:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800544c:	429a      	cmp	r2, r3
 800544e:	d10c      	bne.n	800546a <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8005450:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005454:	f04f 0101 	mov.w	r1, #1
 8005458:	f7ff f920 	bl	800469c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 800545c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005460:	f04f 0100 	mov.w	r1, #0
 8005464:	f7ff f91a 	bl	800469c <RCC_APB2PeriphResetCmd>
 8005468:	e026      	b.n	80054b8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM16) 
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8005470:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005474:	429a      	cmp	r2, r3
 8005476:	d10c      	bne.n	8005492 <TIM_DeInit+0x16a>
  {       
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8005478:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800547c:	f04f 0101 	mov.w	r1, #1
 8005480:	f7ff f90c 	bl	800469c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 8005484:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	f7ff f906 	bl	800469c <RCC_APB2PeriphResetCmd>
 8005490:	e012      	b.n	80054b8 <TIM_DeInit+0x190>
  }  
  else
  { 
    if (TIMx == TIM17) 
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8005498:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800549c:	429a      	cmp	r2, r3
 800549e:	d10b      	bne.n	80054b8 <TIM_DeInit+0x190>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 80054a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80054a4:	f04f 0101 	mov.w	r1, #1
 80054a8:	f7ff f8f8 	bl	800469c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 80054ac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80054b0:	f04f 0100 	mov.w	r1, #0
 80054b4:	f7ff f8f2 	bl	800469c <RCC_APB2PeriphResetCmd>
    }   
  }
}
 80054b8:	f107 0708 	add.w	r7, r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80054dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d018      	beq.n	8005516 <TIM_TimeBaseInit+0x56>
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80054ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d011      	beq.n	8005516 <TIM_TimeBaseInit+0x56>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f8:	d00d      	beq.n	8005516 <TIM_TimeBaseInit+0x56>
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005500:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005504:	429a      	cmp	r2, r3
 8005506:	d006      	beq.n	8005516 <TIM_TimeBaseInit+0x56>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800550e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005512:	429a      	cmp	r2, r3
 8005514:	d108      	bne.n	8005528 <TIM_TimeBaseInit+0x68>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8005516:	89fb      	ldrh	r3, [r7, #14]
 8005518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	885a      	ldrh	r2, [r3, #2]
 8005522:	89fb      	ldrh	r3, [r7, #14]
 8005524:	4313      	orrs	r3, r2
 8005526:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800552e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005532:	429a      	cmp	r2, r3
 8005534:	d00f      	beq.n	8005556 <TIM_TimeBaseInit+0x96>
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800553c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005540:	429a      	cmp	r2, r3
 8005542:	d008      	beq.n	8005556 <TIM_TimeBaseInit+0x96>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8005544:	89fb      	ldrh	r3, [r7, #14]
 8005546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	891a      	ldrh	r2, [r3, #8]
 8005550:	89fb      	ldrh	r3, [r7, #14]
 8005552:	4313      	orrs	r3, r2
 8005554:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	89fa      	ldrh	r2, [r7, #14]
 800555a:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	881a      	ldrh	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005572:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005576:	429a      	cmp	r2, r3
 8005578:	d01b      	beq.n	80055b2 <TIM_TimeBaseInit+0xf2>
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8005580:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005584:	429a      	cmp	r2, r3
 8005586:	d014      	beq.n	80055b2 <TIM_TimeBaseInit+0xf2>
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800558e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005592:	429a      	cmp	r2, r3
 8005594:	d00d      	beq.n	80055b2 <TIM_TimeBaseInit+0xf2>
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800559c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d006      	beq.n	80055b2 <TIM_TimeBaseInit+0xf2>
      (TIMx == TIM16) || (TIMx == TIM17))  
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80055aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d104      	bne.n	80055bc <TIM_TimeBaseInit+0xfc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	7a9b      	ldrb	r3, [r3, #10]
 80055b6:	461a      	mov	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f04f 0201 	mov.w	r2, #1
 80055c2:	615a      	str	r2, [r3, #20]
}
 80055c4:	f107 0714 	add.w	r7, r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop

080055d0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f04f 32ff 	mov.w	r2, #4294967295
 80055de:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	729a      	strb	r2, [r3, #10]
}
 8005600:	f107 070c 	add.w	r7, r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop

0800560c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	460a      	mov	r2, r1
 8005618:	807a      	strh	r2, [r7, #2]
 800561a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	887a      	ldrh	r2, [r7, #2]
 8005620:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8005622:	883a      	ldrh	r2, [r7, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	615a      	str	r2, [r3, #20]
}
 8005628:	f107 070c 	add.w	r7, r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop

08005634 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800564c:	89fb      	ldrh	r3, [r7, #14]
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8005654:	89fa      	ldrh	r2, [r7, #14]
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	4313      	orrs	r3, r2
 800565a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	89fa      	ldrh	r2, [r7, #14]
 8005660:	801a      	strh	r2, [r3, #0]
}
 8005662:	f107 0714 	add.w	r7, r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr

0800566c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800567c:	f107 070c 	add.w	r7, r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop

08005688 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005698:	f107 070c 	add.w	r7, r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop

080056a4 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	f107 070c 	add.w	r7, r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c8:	b29b      	uxth	r3, r3
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	f107 070c 	add.w	r7, r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop

080056d8 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d008      	beq.n	80056fc <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f043 0302 	orr.w	r3, r3, #2
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	801a      	strh	r2, [r3, #0]
 80056fa:	e007      	b.n	800570c <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f023 0302 	bic.w	r3, r3, #2
 8005706:	b29a      	uxth	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	801a      	strh	r2, [r3, #0]
  }
}
 800570c:	f107 070c 	add.w	r7, r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop

08005718 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8005724:	887b      	ldrh	r3, [r7, #2]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	e007      	b.n	800574c <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f023 0304 	bic.w	r3, r3, #4
 8005746:	b29a      	uxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	801a      	strh	r2, [r3, #0]
  }
}
 800574c:	f107 070c 	add.w	r7, r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop

08005758 <TIM_UIFRemap>:
  * @param  NewState: new state of the UIFREMAP bit.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UIFRemap(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <TIM_UIFRemap+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_UIFREMAP;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005774:	b29a      	uxth	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	e007      	b.n	800578c <TIM_UIFRemap+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UIFREMAP;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	801a      	strh	r2, [r3, #0]
  }  
}
 800578c:	f107 070c 	add.w	r7, r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop

08005798 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	e007      	b.n	80057cc <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	801a      	strh	r2, [r3, #0]
  }
}
 80057cc:	f107 070c 	add.w	r7, r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop

080057d8 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f023 0308 	bic.w	r3, r3, #8
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	887b      	ldrh	r3, [r7, #2]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	801a      	strh	r2, [r3, #0]
}
 8005804:	f107 070c 	add.w	r7, r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop

08005810 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005826:	b29a      	uxth	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29a      	uxth	r2, r3
 8005832:	887b      	ldrh	r3, [r7, #2]
 8005834:	4313      	orrs	r3, r2
 8005836:	b29a      	uxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	801a      	strh	r2, [r3, #0]
}
 800583c:	f107 070c 	add.w	r7, r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop

08005848 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d008      	beq.n	800586c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	801a      	strh	r2, [r3, #0]
 800586a:	e007      	b.n	800587c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f023 0301 	bic.w	r3, r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	801a      	strh	r2, [r3, #0]
  }
}
 800587c:	f107 070c 	add.w	r7, r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop

08005888 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f023 0201 	bic.w	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f023 0303 	bic.w	r3, r3, #3
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0302 	bic.w	r3, r3, #2
 80058e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	899b      	ldrh	r3, [r3, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	889b      	ldrh	r3, [r3, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005902:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005906:	429a      	cmp	r2, r3
 8005908:	d01b      	beq.n	8005942 <TIM_OC1Init+0xba>
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8005910:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005914:	429a      	cmp	r2, r3
 8005916:	d014      	beq.n	8005942 <TIM_OC1Init+0xba>
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800591e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005922:	429a      	cmp	r2, r3
 8005924:	d00d      	beq.n	8005942 <TIM_OC1Init+0xba>
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800592c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005930:	429a      	cmp	r2, r3
 8005932:	d006      	beq.n	8005942 <TIM_OC1Init+0xba>
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800593a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800593e:	429a      	cmp	r2, r3
 8005940:	d123      	bne.n	800598a <TIM_OC1Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f023 0308 	bic.w	r3, r3, #8
 8005948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	89db      	ldrh	r3, [r3, #14]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f023 0304 	bic.w	r3, r3, #4
 800595a:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	88db      	ldrh	r3, [r3, #6]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	8a1b      	ldrh	r3, [r3, #16]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	8a5b      	ldrh	r3, [r3, #18]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	f107 071c 	add.w	r7, r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop

080059b0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f023 0210 	bic.w	r2, r3, #16
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fc:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0320 	bic.w	r3, r3, #32
 8005a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	899b      	ldrh	r3, [r3, #12]
 8005a18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	889b      	ldrh	r3, [r3, #4]
 8005a26:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005a36:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d006      	beq.n	8005a4c <TIM_OC2Init+0x9c>
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8005a44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d12b      	bne.n	8005aa4 <TIM_OC2Init+0xf4>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	89db      	ldrh	r3, [r3, #14]
 8005a58:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a68:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	88db      	ldrh	r3, [r3, #6]
 8005a6e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	8a1b      	ldrh	r3, [r3, #16]
 8005a8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	8a5b      	ldrh	r3, [r3, #18]
 8005a9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	f107 071c 	add.w	r7, r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr

08005ac8 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f023 0303 	bic.w	r3, r3, #3
 8005b10:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	899b      	ldrh	r3, [r3, #12]
 8005b28:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	889b      	ldrh	r3, [r3, #4]
 8005b36:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005b46:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d006      	beq.n	8005b5c <TIM_OC3Init+0x94>
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8005b54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d12b      	bne.n	8005bb4 <TIM_OC3Init+0xec>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	89db      	ldrh	r3, [r3, #14]
 8005b68:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b78:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	88db      	ldrh	r3, [r3, #6]
 8005b7e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	8a1b      	ldrh	r3, [r3, #16]
 8005b9c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	8a5b      	ldrh	r3, [r3, #18]
 8005baa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	f107 071c 	add.w	r7, r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c18:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c20:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c36:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	899b      	ldrh	r3, [r3, #12]
 8005c3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	889b      	ldrh	r3, [r3, #4]
 8005c4a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005c5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d006      	beq.n	8005c70 <TIM_OC4Init+0x98>
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8005c68:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d10a      	bne.n	8005c86 <TIM_OC4Init+0xae>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	8a1b      	ldrh	r3, [r3, #16]
 8005c7c:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	621a      	str	r2, [r3, #32]
}
 8005ca0:	f107 071c 	add.w	r7, r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop

08005cac <TIM_OC5Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC5Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC5M;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cec:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	899b      	ldrh	r3, [r3, #12]
 8005d04:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	889b      	ldrh	r3, [r3, #4]
 8005d12:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005d22:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d006      	beq.n	8005d38 <TIM_OC5Init+0x8c>
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8005d30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d10a      	bne.n	8005d4e <TIM_OC5Init+0xa2>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS5;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 16);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	8a1b      	ldrh	r3, [r3, #16]
 8005d44:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = TIM_OCInitStruct->TIM_Pulse;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	621a      	str	r2, [r3, #32]
}
 8005d68:	f107 071c 	add.w	r7, r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop

08005d74 <TIM_OC6Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC6Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC6E; /* to be verified*/
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dac:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC6M;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db4:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	899b      	ldrh	r3, [r3, #12]
 8005dd0:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	889b      	ldrh	r3, [r3, #4]
 8005dde:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005dee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d006      	beq.n	8005e04 <TIM_OC6Init+0x90>
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8005dfc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d103      	bne.n	8005e0c <TIM_OC6Init+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS6;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 18);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = TIM_OCInitStruct->TIM_Pulse;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	f107 071c 	add.w	r7, r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr

08005e30 <TIM_SelectGC5C1>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C1(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d006      	beq.n	8005e50 <TIM_SelectGC5C1+0x20>
  {
    /* Set the GC5C1 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	659a      	str	r2, [r3, #88]	; 0x58
 8005e4e:	e005      	b.n	8005e5c <TIM_SelectGC5C1+0x2c>
  }
  else
  {
    /* Reset the GC5C1 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C1;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e54:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8005e5c:	f107 070c 	add.w	r7, r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop

08005e68 <TIM_SelectGC5C2>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C2(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d006      	beq.n	8005e88 <TIM_SelectGC5C2+0x20>
  {
    /* Set the GC5C2 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	659a      	str	r2, [r3, #88]	; 0x58
 8005e86:	e005      	b.n	8005e94 <TIM_SelectGC5C2+0x2c>
  }
  else
  {
    /* Reset the GC5C2 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8005e94:	f107 070c 	add.w	r7, r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bc80      	pop	{r7}
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop

08005ea0 <TIM_SelectGC5C3>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C3(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d006      	beq.n	8005ec0 <TIM_SelectGC5C3+0x20>
  {
    /* Set the GC5C3 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C3;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	659a      	str	r2, [r3, #88]	; 0x58
 8005ebe:	e005      	b.n	8005ecc <TIM_SelectGC5C3+0x2c>
  }
  else
  {
    /* Reset the GC5C3 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C3;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8005ecc:	f107 070c 	add.w	r7, r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop

08005ed8 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	825a      	strh	r2, [r3, #18]
}
 8005f20:	f107 070c 	add.w	r7, r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop

08005f2c <TIM_SelectOCxM>:
  *            @arg TIM_OCMode_Asymmetric_PWM1
  *            @arg TIM_OCMode_Asymmetric_PWM2            
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint32_t TIM_OCMode) /* to be updated*/
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	460b      	mov	r3, r1
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	817b      	strh	r3, [r7, #10]
  uint32_t tmp = 0;
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
  uint16_t tmp1 = 0;
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	827b      	strh	r3, [r7, #18]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	617b      	str	r3, [r7, #20]
  tmp += CCMR_OFFSET;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f103 0318 	add.w	r3, r3, #24
 8005f50:	617b      	str	r3, [r7, #20]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8005f52:	897b      	ldrh	r3, [r7, #10]
 8005f54:	f04f 0201 	mov.w	r2, #1
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1a      	ldr	r2, [r3, #32]
 8005f62:	8a7b      	ldrh	r3, [r7, #18]
 8005f64:	ea6f 0303 	mvn.w	r3, r3
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	621a      	str	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8005f70:	897b      	ldrh	r3, [r7, #10]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <TIM_SelectOCxM+0x50>
 8005f76:	897b      	ldrh	r3, [r7, #10]
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d115      	bne.n	8005fa8 <TIM_SelectOCxM+0x7c>
  {
    tmp += (TIM_Channel>>1);
 8005f7c:	897b      	ldrh	r3, [r7, #10]
 8005f7e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	18d3      	adds	r3, r2, r3
 8005f88:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f98:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	6811      	ldr	r1, [r2, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	e019      	b.n	8005fdc <TIM_SelectOCxM+0xb0>
  }
  else
  {
    tmp += (uint32_t)(TIM_Channel - (uint32_t)4)>> (uint32_t)1;
 8005fa8:	897b      	ldrh	r3, [r7, #10]
 8005faa:	f1a3 0304 	sub.w	r3, r3, #4
 8005fae:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	18d3      	adds	r3, r2, r3
 8005fb6:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	6811      	ldr	r1, [r2, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	b292      	uxth	r2, r2
 8005fd2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005fd6:	b292      	uxth	r2, r2
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	601a      	str	r2, [r3, #0]
  }
}
 8005fdc:	f107 071c 	add.w	r7, r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop

08005fe8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005ff8:	f107 070c 	add.w	r7, r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop

08006004 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006014:	f107 070c 	add.w	r7, r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop

08006020 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006030:	f107 070c 	add.w	r7, r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop

0800603c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800604c:	f107 070c 	add.w	r7, r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop

08006058 <TIM_SetCompare5>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare5: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare5(TIM_TypeDef* TIMx, uint32_t Compare5)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare5 Register value */
  TIMx->CCR5 = Compare5;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006068:	f107 070c 	add.w	r7, r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop

08006074 <TIM_SetCompare6>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare6: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare6(TIM_TypeDef* TIMx, uint32_t Compare6)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare6 Register value */
  TIMx->CCR6 = Compare6;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006084:	f107 070c 	add.w	r7, r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop

08006090 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80060b4:	887b      	ldrh	r3, [r7, #2]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	619a      	str	r2, [r3, #24]
}
 80060c2:	f107 0714 	add.w	r7, r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr

080060cc <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2M;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= ((uint32_t)TIM_ForcedAction << 8);
 80060f0:	887b      	ldrh	r3, [r7, #2]
 80060f2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	619a      	str	r2, [r3, #24]
}
 8006102:	f107 0714 	add.w	r7, r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8006118:	f04f 0300 	mov.w	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3M;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612a:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800612c:	887b      	ldrh	r3, [r7, #2]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	61da      	str	r2, [r3, #28]
}
 800613a:	f107 0714 	add.w	r7, r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4M;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006162:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= ((uint32_t)TIM_ForcedAction << 8);
 8006164:	887b      	ldrh	r3, [r7, #2]
 8006166:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	61da      	str	r2, [r3, #28]
}
 8006176:	f107 0714 	add.w	r7, r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <TIM_ForcedOC5Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC5Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5M;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619e:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= (uint32_t)(TIM_ForcedAction);
 80061a0:	887b      	ldrh	r3, [r7, #2]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	655a      	str	r2, [r3, #84]	; 0x54
}
 80061ae:	f107 0714 	add.w	r7, r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <TIM_ForcedOC6Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC6Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the OC6M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6M;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= ((uint32_t)TIM_ForcedAction << 8);
 80061d8:	887b      	ldrh	r3, [r7, #2]
 80061da:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54
}
 80061ea:	f107 0714 	add.w	r7, r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr

080061f4 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0308 	bic.w	r3, r3, #8
 8006212:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8006214:	887b      	ldrh	r3, [r7, #2]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	619a      	str	r2, [r3, #24]
}
 8006222:	f107 0714 	add.w	r7, r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800624a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= ((uint32_t)TIM_OCPreload << 8);
 800624c:	887b      	ldrh	r3, [r7, #2]
 800624e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	619a      	str	r2, [r3, #24]
}
 800625e:	f107 0714 	add.w	r7, r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr

08006268 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0308 	bic.w	r3, r3, #8
 8006286:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8006288:	887b      	ldrh	r3, [r7, #2]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	61da      	str	r2, [r3, #28]
}
 8006296:	f107 0714 	add.w	r7, r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062be:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= ((uint32_t)TIM_OCPreload << 8);
 80062c0:	887b      	ldrh	r3, [r7, #2]
 80062c2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	61da      	str	r2, [r3, #28]
}
 80062d2:	f107 0714 	add.w	r7, r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <TIM_OC5PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC5PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC5PE);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0308 	bic.w	r3, r3, #8
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= (uint32_t)(TIM_OCPreload);
 80062fc:	887b      	ldrh	r3, [r7, #2]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	655a      	str	r2, [r3, #84]	; 0x54
}
 800630a:	f107 0714 	add.w	r7, r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr

08006314 <TIM_OC6PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC6PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC6PE);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006332:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= ((uint32_t)TIM_OCPreload << 8);
 8006334:	887b      	ldrh	r3, [r7, #2]
 8006336:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	655a      	str	r2, [r3, #84]	; 0x54
}
 8006346:	f107 0714 	add.w	r7, r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr

08006350 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1FE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0304 	bic.w	r3, r3, #4
 800636e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8006370:	887b      	ldrh	r3, [r7, #2]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	619a      	str	r2, [r3, #24]
}
 800637e:	f107 0714 	add.w	r7, r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	bc80      	pop	{r7}
 8006386:	4770      	bx	lr

08006388 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2FE);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCFast << 8);
 80063a8:	887b      	ldrh	r3, [r7, #2]
 80063aa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	619a      	str	r2, [r3, #24]
}
 80063ba:	f107 0714 	add.w	r7, r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr

080063c4 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3FE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0304 	bic.w	r3, r3, #4
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	61da      	str	r2, [r3, #28]
}
 80063f2:	f107 0714 	add.w	r7, r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4FE);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800641a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCFast << 8);
 800641c:	887b      	ldrh	r3, [r7, #2]
 800641e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	61da      	str	r2, [r3, #28]
}
 800642e:	f107 0714 	add.w	r7, r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1CE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006456:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	619a      	str	r2, [r3, #24]
}
 8006466:	f107 0714 	add.w	r7, r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	bc80      	pop	{r7}
 800646e:	4770      	bx	lr

08006470 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2CE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800648e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCClear << 8);
 8006490:	887b      	ldrh	r3, [r7, #2]
 8006492:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	619a      	str	r2, [r3, #24]
}
 80064a2:	f107 0714 	add.w	r7, r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr

080064ac <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3CE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80064cc:	887b      	ldrh	r3, [r7, #2]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	61da      	str	r2, [r3, #28]
}
 80064da:	f107 0714 	add.w	r7, r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4CE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006502:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCClear << 8);
 8006504:	887b      	ldrh	r3, [r7, #2]
 8006506:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	61da      	str	r2, [r3, #28]
}
 8006516:	f107 0714 	add.w	r7, r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <TIM_ClearOC5Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC5Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5CE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800653e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= (uint32_t)(TIM_OCClear);
 8006540:	887b      	ldrh	r3, [r7, #2]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800654e:	f107 0714 	add.w	r7, r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <TIM_ClearOC6Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC6Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6CE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006576:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= ((uint32_t)TIM_OCClear << 8);
 8006578:	887b      	ldrh	r3, [r7, #2]
 800657a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	655a      	str	r2, [r3, #84]	; 0x54
}
 800658a:	f107 0714 	add.w	r7, r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <TIM_SelectOCREFClear>:
  *     @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to ETRF.
  *     @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connected to OCREF_CLR input.  
  * @retval None
  */
void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80065a8:	4013      	ands	r3, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6093      	str	r3, [r2, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	887b      	ldrh	r3, [r7, #2]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	609a      	str	r2, [r3, #8]
}
 80065ba:	f107 070c 	add.w	r7, r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr

080065c4 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC1P);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0302 	bic.w	r3, r3, #2
 80065e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCPolarity;
 80065e4:	887b      	ldrh	r3, [r7, #2]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	621a      	str	r2, [r3, #32]
}
 80065f2:	f107 0714 	add.w	r7, r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr

080065fc <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0308 	bic.w	r3, r3, #8
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCNPolarity;
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	f107 0714 	add.w	r7, r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC2P);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0320 	bic.w	r3, r3, #32
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 4);
 8006654:	887b      	ldrh	r3, [r7, #2]
 8006656:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	f107 0714 	add.w	r7, r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr

08006670 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800668e:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 4);
 8006690:	887b      	ldrh	r3, [r7, #2]
 8006692:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	f107 0714 	add.w	r7, r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr

080066ac <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 8);
 80066cc:	887b      	ldrh	r3, [r7, #2]
 80066ce:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	f107 0714 	add.w	r7, r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 80066f4:	f04f 0300 	mov.w	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006706:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 8);
 8006708:	887b      	ldrh	r3, [r7, #2]
 800670a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	f107 0714 	add.w	r7, r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 12);
 8006744:	887b      	ldrh	r3, [r7, #2]
 8006746:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	621a      	str	r2, [r3, #32]
}
 8006756:	f107 0714 	add.w	r7, r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <TIM_OC5PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC5PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC5P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800677e:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 16);
 8006780:	887b      	ldrh	r3, [r7, #2]
 8006782:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	f107 0714 	add.w	r7, r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr

0800679c <TIM_OC6PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC6PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC6P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 20);
 80067bc:	887b      	ldrh	r3, [r7, #2]
 80067be:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	f107 0714 	add.w	r7, r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	4613      	mov	r3, r2
 80067e2:	460a      	mov	r2, r1
 80067e4:	807a      	strh	r2, [r7, #2]
 80067e6:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = (uint32_t)CCER_CCE_SET << (uint32_t)TIM_Channel;
 80067ee:	887b      	ldrh	r3, [r7, #2]
 80067f0:	f04f 0201 	mov.w	r2, #1
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)(~tmp);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1a      	ldr	r2, [r3, #32]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	ea6f 0303 	mvn.w	r3, r3
 8006804:	401a      	ands	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCx << (uint32_t)TIM_Channel);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1a      	ldr	r2, [r3, #32]
 800680e:	8839      	ldrh	r1, [r7, #0]
 8006810:	887b      	ldrh	r3, [r7, #2]
 8006812:	fa01 f303 	lsl.w	r3, r1, r3
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	f107 0714 	add.w	r7, r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop

08006828 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	4613      	mov	r3, r2
 8006832:	460a      	mov	r2, r1
 8006834:	807a      	strh	r2, [r7, #2]
 8006836:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = (uint32_t)CCER_CCNE_SET << (uint32_t)TIM_Channel;
 800683e:	887b      	ldrh	r3, [r7, #2]
 8006840:	f04f 0204 	mov.w	r2, #4
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint32_t) ~tmp;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1a      	ldr	r2, [r3, #32]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	ea6f 0303 	mvn.w	r3, r3
 8006854:	401a      	ands	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCxN << (uint32_t)TIM_Channel);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1a      	ldr	r2, [r3, #32]
 800685e:	8839      	ldrh	r1, [r7, #0]
 8006860:	887b      	ldrh	r3, [r7, #2]
 8006862:	fa01 f303 	lsl.w	r3, r1, r3
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	621a      	str	r2, [r3, #32]
}
 800686c:	f107 0714 	add.w	r7, r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop

08006878 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10f      	bne.n	80068aa <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800688e:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8006890:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8006892:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8006894:	891b      	ldrh	r3, [r3, #8]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fd02 	bl	80072a0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	88db      	ldrh	r3, [r3, #6]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4619      	mov	r1, r3
 80068a4:	f000 f8ec 	bl	8006a80 <TIM_SetIC1Prescaler>
 80068a8:	e036      	b.n	8006918 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d10f      	bne.n	80068d2 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80068b6:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80068b8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80068ba:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80068bc:	891b      	ldrh	r3, [r3, #8]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fd2a 	bl	8007318 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	88db      	ldrh	r3, [r3, #6]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	4619      	mov	r1, r3
 80068cc:	f000 f8f0 	bl	8006ab0 <TIM_SetIC2Prescaler>
 80068d0:	e022      	b.n	8006918 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d10f      	bne.n	80068fa <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80068de:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80068e0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80068e2:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80068e4:	891b      	ldrh	r3, [r3, #8]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fd60 	bl	80073ac <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	88db      	ldrh	r3, [r3, #6]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	4619      	mov	r1, r3
 80068f4:	f000 f8f6 	bl	8006ae4 <TIM_SetIC3Prescaler>
 80068f8:	e00e      	b.n	8006918 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80068fe:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8006900:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8006902:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8006904:	891b      	ldrh	r3, [r3, #8]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fd96 	bl	8007438 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	88db      	ldrh	r3, [r3, #6]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4619      	mov	r1, r3
 8006914:	f000 f8fe 	bl	8006b14 <TIM_SetIC4Prescaler>
  }
}
 8006918:	f107 0708 	add.w	r7, r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f04f 0201 	mov.w	r2, #1
 800693e:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	811a      	strh	r2, [r3, #8]
}
 8006950:	f107 070c 	add.w	r7, r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop

0800695c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800696c:	f04f 0301 	mov.w	r3, #1
 8006970:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	885b      	ldrh	r3, [r3, #2]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800697a:	f04f 0302 	mov.w	r3, #2
 800697e:	81fb      	strh	r3, [r7, #14]
 8006980:	e002      	b.n	8006988 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	889b      	ldrh	r3, [r3, #4]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d103      	bne.n	8006998 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8006990:	f04f 0302 	mov.w	r3, #2
 8006994:	81bb      	strh	r3, [r7, #12]
 8006996:	e002      	b.n	800699e <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8006998:	f04f 0301 	mov.w	r3, #1
 800699c:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d11c      	bne.n	80069e0 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	8859      	ldrh	r1, [r3, #2]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80069ae:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80069b0:	891b      	ldrh	r3, [r3, #8]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fc74 	bl	80072a0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	88db      	ldrh	r3, [r3, #6]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4619      	mov	r1, r3
 80069c0:	f000 f85e 	bl	8006a80 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	891b      	ldrh	r3, [r3, #8]
 80069c8:	89f9      	ldrh	r1, [r7, #14]
 80069ca:	89ba      	ldrh	r2, [r7, #12]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fca3 	bl	8007318 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	88db      	ldrh	r3, [r3, #6]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	4619      	mov	r1, r3
 80069da:	f000 f869 	bl	8006ab0 <TIM_SetIC2Prescaler>
 80069de:	e01b      	b.n	8006a18 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	8859      	ldrh	r1, [r3, #2]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80069e8:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80069ea:	891b      	ldrh	r3, [r3, #8]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fc93 	bl	8007318 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	88db      	ldrh	r3, [r3, #6]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4619      	mov	r1, r3
 80069fa:	f000 f859 	bl	8006ab0 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	891b      	ldrh	r3, [r3, #8]
 8006a02:	89f9      	ldrh	r1, [r7, #14]
 8006a04:	89ba      	ldrh	r2, [r7, #12]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc4a 	bl	80072a0 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	88db      	ldrh	r3, [r3, #6]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4619      	mov	r1, r3
 8006a14:	f000 f834 	bl	8006a80 <TIM_SetIC1Prescaler>
  }
}
 8006a18:	f107 0710 	add.w	r7, r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f107 070c 	add.w	r7, r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	f107 070c 	add.w	r7, r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f107 070c 	add.w	r7, r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	f107 070c 	add.w	r7, r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr

08006a80 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f023 020c 	bic.w	r2, r3, #12
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	619a      	str	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	887b      	ldrh	r3, [r7, #2]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	619a      	str	r2, [r3, #24]
}
 8006aa4:	f107 070c 	add.w	r7, r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop

08006ab0 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	619a      	str	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699a      	ldr	r2, [r3, #24]
 8006acc:	887b      	ldrh	r3, [r7, #2]
 8006ace:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	619a      	str	r2, [r3, #24]
}
 8006ad8:	f107 070c 	add.w	r7, r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop

08006ae4 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8006af8:	4013      	ands	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	61d3      	str	r3, [r2, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69da      	ldr	r2, [r3, #28]
 8006b02:	887b      	ldrh	r3, [r7, #2]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	61da      	str	r2, [r3, #28]
}
 8006b0a:	f107 070c 	add.w	r7, r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr

08006b14 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 8006b28:	4013      	ands	r3, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	61d3      	str	r3, [r2, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	887b      	ldrh	r3, [r7, #2]
 8006b34:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	61da      	str	r2, [r3, #28]
}
 8006b40:	f107 070c 	add.w	r7, r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop

08006b4c <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	881a      	ldrh	r2, [r3, #0]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	885b      	ldrh	r3, [r3, #2]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	889b      	ldrh	r3, [r3, #4]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8006b66:	4313      	orrs	r3, r2
 8006b68:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	88db      	ldrh	r3, [r3, #6]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	891b      	ldrh	r3, [r3, #8]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	895b      	ldrh	r3, [r3, #10]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	899b      	ldrh	r3, [r3, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8006b86:	4313      	orrs	r3, r2
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	461a      	mov	r2, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	645a      	str	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8006b90:	f107 070c 	add.w	r7, r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop

08006b9c <TIM_Break1Config>:
  * @param  TIM_Break1Filter: specifies the Break1 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break1Config(TIM_TypeDef* TIMx, uint32_t TIM_Break1Polarity, uint8_t TIM_Break1Filter)
{   /* Check the parameters */
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK1_FILTER(TIM_Break1Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BKP | TIM_BDTR_BKF);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bae:	f423 2272 	bic.w	r2, r3, #991232	; 0xf2000
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break1Polarity |((uint32_t)TIM_Break1Filter << 16);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	ea4f 4103 	mov.w	r1, r3, lsl #16
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8006bca:	f107 0714 	add.w	r7, r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr

08006bd4 <TIM_Break2Config>:
  * @param  TIM_Break2Filter: specifies the Break2 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break2Config(TIM_TypeDef* TIMx, uint32_t TIM_Break2Polarity, uint8_t TIM_Break2Filter)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK2_FILTER(TIM_Break2Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BK2P | TIM_BDTR_BK2F);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be6:	f023 723c 	bic.w	r2, r3, #49283072	; 0x2f00000
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break2Polarity |((uint32_t)TIM_Break2Filter << 20);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	ea4f 5103 	mov.w	r1, r3, lsl #20
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	645a      	str	r2, [r3, #68]	; 0x44
}
 8006c02:	f107 0714 	add.w	r7, r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <TIM_Break1Cmd>:
  * @param  NewState: new state of the TIM Break1 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break1Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d006      	beq.n	8006c2c <TIM_Break1Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BKE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	645a      	str	r2, [r3, #68]	; 0x44
 8006c2a:	e005      	b.n	8006c38 <TIM_Break1Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BKE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	645a      	str	r2, [r3, #68]	; 0x44
  } 
}
 8006c38:	f107 070c 	add.w	r7, r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop

08006c44 <TIM_Break2Cmd>:
  * @param  NewState: new state of the TIM Break2 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break2Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d006      	beq.n	8006c64 <TIM_Break2Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BK2E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	645a      	str	r2, [r3, #68]	; 0x44
 8006c62:	e005      	b.n	8006c70 <TIM_Break2Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BK2E;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8006c70:	f107 070c 	add.w	r7, r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop

08006c7c <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	819a      	strh	r2, [r3, #12]
}
 8006cbc:	f107 070c 	add.w	r7, r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop

08006cc8 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d006      	beq.n	8006ce8 <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	645a      	str	r2, [r3, #68]	; 0x44
 8006ce6:	e007      	b.n	8006cf8 <TIM_CtrlPWMOutputs+0x30>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cec:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8006cf0:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6453      	str	r3, [r2, #68]	; 0x44
  }  
}
 8006cf8:	f107 070c 	add.w	r7, r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop

08006d04 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <TIM_SelectCOM+0x20>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f043 0204 	orr.w	r2, r3, #4
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	e006      	b.n	8006d32 <TIM_SelectCOM+0x2e>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6053      	str	r3, [r2, #4]
  }
}
 8006d32:	f107 070c 	add.w	r7, r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr

08006d3c <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d006      	beq.n	8006d5c <TIM_CCPreloadControl+0x20>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f043 0201 	orr.w	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	605a      	str	r2, [r3, #4]
 8006d5a:	e006      	b.n	8006d6a <TIM_CCPreloadControl+0x2e>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006d64:	4013      	ands	r3, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6053      	str	r3, [r2, #4]
  }
}
 8006d6a:	f107 070c 	add.w	r7, r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	460a      	mov	r2, r1
 8006d80:	807a      	strh	r2, [r7, #2]
 8006d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006d84:	787b      	ldrb	r3, [r7, #1]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d006      	beq.n	8006d98 <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	887b      	ldrh	r3, [r7, #2]
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60da      	str	r2, [r3, #12]
 8006d96:	e008      	b.n	8006daa <TIM_ITConfig+0x36>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	887b      	ldrh	r3, [r7, #2]
 8006d9e:	ea6f 0303 	mvn.w	r3, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	401a      	ands	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60da      	str	r2, [r3, #12]
  }
}
 8006daa:	f107 070c 	add.w	r7, r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8006dc0:	887a      	ldrh	r2, [r7, #2]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	615a      	str	r2, [r3, #20]
}
 8006dc6:	f107 070c 	add.w	r7, r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr

08006dd0 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint32_t TIM_FLAG)
{ 
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;  
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <TIM_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 8006dec:	f04f 0301 	mov.w	r3, #1
 8006df0:	73fb      	strb	r3, [r7, #15]
 8006df2:	e002      	b.n	8006dfa <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f107 0714 	add.w	r7, r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8006e14:	887b      	ldrh	r3, [r7, #2]
 8006e16:	ea6f 0303 	mvn.w	r3, r3
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	611a      	str	r2, [r3, #16]
}
 8006e22:	f107 070c 	add.w	r7, r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr

08006e2c <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	81bb      	strh	r3, [r7, #12]
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	887b      	ldrh	r3, [r7, #2]
 8006e52:	4013      	ands	r3, r2
 8006e54:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	887b      	ldrh	r3, [r7, #2]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8006e62:	89bb      	ldrh	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d006      	beq.n	8006e76 <TIM_GetITStatus+0x4a>
 8006e68:	897b      	ldrh	r3, [r7, #10]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 8006e6e:	f04f 0301 	mov.w	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	e002      	b.n	8006e7c <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f107 0714 	add.w	r7, r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop

08006e8c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8006e98:	887b      	ldrh	r3, [r7, #2]
 8006e9a:	ea6f 0303 	mvn.w	r3, r3
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	611a      	str	r2, [r3, #16]
}
 8006ea6:	f107 070c 	add.w	r7, r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bc80      	pop	{r7}
 8006eae:	4770      	bx	lr

08006eb0 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	460a      	mov	r2, r1
 8006ebc:	807a      	strh	r2, [r7, #2]
 8006ebe:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8006ec0:	887a      	ldrh	r2, [r7, #2]
 8006ec2:	883b      	ldrh	r3, [r7, #0]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8006ece:	f107 070c 	add.w	r7, r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr

08006ed8 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	460a      	mov	r2, r1
 8006ee4:	807a      	strh	r2, [r7, #2]
 8006ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006ee8:	787b      	ldrb	r3, [r7, #1]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d006      	beq.n	8006efc <TIM_DMACmd+0x24>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	887b      	ldrh	r3, [r7, #2]
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60da      	str	r2, [r3, #12]
 8006efa:	e008      	b.n	8006f0e <TIM_DMACmd+0x36>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	887b      	ldrh	r3, [r7, #2]
 8006f02:	ea6f 0303 	mvn.w	r3, r3
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	401a      	ands	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60da      	str	r2, [r3, #12]
  }
}
 8006f0e:	f107 070c 	add.w	r7, r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bc80      	pop	{r7}
 8006f16:	4770      	bx	lr

08006f18 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d006      	beq.n	8006f38 <TIM_SelectCCDMA+0x20>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f043 0208 	orr.w	r2, r3, #8
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	e006      	b.n	8006f46 <TIM_SelectCCDMA+0x2e>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8006f40:	4013      	ands	r3, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6053      	str	r3, [r2, #4]
  }
}
 8006f46:	f107 070c 	add.w	r7, r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr

08006f50 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8006f60:	4013      	ands	r3, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6093      	str	r3, [r2, #8]
}
 8006f66:	f107 070c 	add.w	r7, r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr

08006f70 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8006f7c:	887b      	ldrh	r3, [r7, #2]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4619      	mov	r1, r3
 8006f82:	f000 f877 	bl	8007074 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f043 0207 	orr.w	r2, r3, #7
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	609a      	str	r2, [r3, #8]
}
 8006f92:	f107 0708 	add.w	r7, r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop

08006f9c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	8179      	strh	r1, [r7, #10]
 8006fa6:	813a      	strh	r2, [r7, #8]
 8006fa8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8006faa:	897b      	ldrh	r3, [r7, #10]
 8006fac:	2b60      	cmp	r3, #96	; 0x60
 8006fae:	d108      	bne.n	8006fc2 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8006fb0:	893a      	ldrh	r2, [r7, #8]
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	f04f 0201 	mov.w	r2, #1
 8006fbc:	f000 f9ac 	bl	8007318 <TI2_Config>
 8006fc0:	e007      	b.n	8006fd2 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8006fc2:	893a      	ldrh	r2, [r7, #8]
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	f04f 0201 	mov.w	r2, #1
 8006fce:	f000 f967 	bl	80072a0 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8006fd2:	897b      	ldrh	r3, [r7, #10]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	f000 f84c 	bl	8007074 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f043 0207 	orr.w	r2, r3, #7
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	f107 0710 	add.w	r7, r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	8179      	strh	r1, [r7, #10]
 8006ffa:	813a      	strh	r2, [r7, #8]
 8006ffc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8006ffe:	f04f 0300 	mov.w	r3, #0
 8007002:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8007004:	8979      	ldrh	r1, [r7, #10]
 8007006:	893a      	ldrh	r2, [r7, #8]
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 f8ac 	bl	8007168 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8007016:	8afb      	ldrh	r3, [r7, #22]
 8007018:	f023 0307 	bic.w	r3, r3, #7
 800701c:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800701e:	8afb      	ldrh	r3, [r7, #22]
 8007020:	f043 0307 	orr.w	r3, r3, #7
 8007024:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8007026:	8afb      	ldrh	r3, [r7, #22]
 8007028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702c:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800702e:	8afb      	ldrh	r3, [r7, #22]
 8007030:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007034:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007036:	8afa      	ldrh	r2, [r7, #22]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	609a      	str	r2, [r3, #8]
}
 800703c:	f107 0718 	add.w	r7, r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	8179      	strh	r1, [r7, #10]
 800704e:	813a      	strh	r2, [r7, #8]
 8007050:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8007052:	8979      	ldrh	r1, [r7, #10]
 8007054:	893a      	ldrh	r2, [r7, #8]
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f885 	bl	8007168 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	609a      	str	r2, [r3, #8]
}
 800706a:	f107 0710 	add.w	r7, r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop

08007074 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800708c:	89fb      	ldrh	r3, [r7, #14]
 800708e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007092:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8007094:	89fa      	ldrh	r2, [r7, #14]
 8007096:	887b      	ldrh	r3, [r7, #2]
 8007098:	4313      	orrs	r3, r2
 800709a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709c:	89fa      	ldrh	r2, [r7, #14]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
}
 80070a2:	f107 0714 	add.w	r7, r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr

080070ac <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80070c0:	4013      	ands	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6053      	str	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	887b      	ldrh	r3, [r7, #2]
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	605a      	str	r2, [r3, #4]
}
 80070d2:	f107 070c 	add.w	r7, r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bc80      	pop	{r7}
 80070da:	4770      	bx	lr

080070dc <TIM_SelectOutputTrigger2>:
  *            @arg TIM_TRGO2Source_OC5RefRising_OC6RefFalling: OC5Ref Rising and OC6Ref Falling are used as the trigger output(TRGO2)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger2(TIM_TypeDef* TIMx, uint32_t TIM_TRGO2Source)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO2_SOURCE(TIM_TRGO2Source));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint32_t)~TIM_CR2_MMS2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGO2Source;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	605a      	str	r2, [r3, #4]
}
 80070fe:	f107 070c 	add.w	r7, r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <TIM_SelectSlaveMode>:
  *                                                      reinitializes the counter, generates an update 
  *                                                      of the registers and starts the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint32_t TIM_SlaveMode)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint32_t)~TIM_SMCR_SMS;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711a:	f023 0307 	bic.w	r3, r3, #7
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6093      	str	r3, [r2, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= (uint32_t)TIM_SlaveMode;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	609a      	str	r2, [r3, #8]
}
 800712e:	f107 070c 	add.w	r7, r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800714c:	4013      	ands	r3, r2
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6093      	str	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	887b      	ldrh	r3, [r7, #2]
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	609a      	str	r2, [r3, #8]
}
 800715e:	f107 070c 	add.w	r7, r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	8179      	strh	r1, [r7, #10]
 8007172:	813a      	strh	r2, [r7, #8]
 8007174:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8007176:	f04f 0300 	mov.w	r3, #0
 800717a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8007182:	8afb      	ldrh	r3, [r7, #22]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800718e:	b29a      	uxth	r2, r3
 8007190:	893b      	ldrh	r3, [r7, #8]
 8007192:	4313      	orrs	r3, r2
 8007194:	b29a      	uxth	r2, r3
 8007196:	897b      	ldrh	r3, [r7, #10]
 8007198:	4313      	orrs	r3, r2
 800719a:	b29a      	uxth	r2, r3
 800719c:	8afb      	ldrh	r3, [r7, #22]
 800719e:	4313      	orrs	r3, r2
 80071a0:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071a2:	8afa      	ldrh	r2, [r7, #22]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	609a      	str	r2, [r3, #8]
}
 80071a8:	f107 071c 	add.w	r7, r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop

080071b4 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	8179      	strh	r1, [r7, #10]
 80071be:	813a      	strh	r2, [r7, #8]
 80071c0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80071c2:	f04f 0300 	mov.w	r3, #0
 80071c6:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80071e6:	8afb      	ldrh	r3, [r7, #22]
 80071e8:	f023 0307 	bic.w	r3, r3, #7
 80071ec:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80071ee:	8afa      	ldrh	r2, [r7, #22]
 80071f0:	897b      	ldrh	r3, [r7, #10]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80071f6:	8abb      	ldrh	r3, [r7, #20]
 80071f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071fc:	f023 0303 	bic.w	r3, r3, #3
 8007200:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8007202:	8abb      	ldrh	r3, [r7, #20]
 8007204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800720e:	8a7b      	ldrh	r3, [r7, #18]
 8007210:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007214:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800721c:	b29a      	uxth	r2, r3
 800721e:	893b      	ldrh	r3, [r7, #8]
 8007220:	4313      	orrs	r3, r2
 8007222:	b29a      	uxth	r2, r3
 8007224:	8a7b      	ldrh	r3, [r7, #18]
 8007226:	4313      	orrs	r3, r2
 8007228:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800722a:	8afa      	ldrh	r2, [r7, #22]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8007230:	8aba      	ldrh	r2, [r7, #20]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007236:	8a7a      	ldrh	r2, [r7, #18]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	621a      	str	r2, [r3, #32]
}
 800723c:	f107 071c 	add.w	r7, r7, #28
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop

08007248 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <TIM_SelectHallSensor+0x20>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	e006      	b.n	8007276 <TIM_SelectHallSensor+0x2e>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8007270:	4013      	ands	r3, r2
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6053      	str	r3, [r2, #4]
  }
}
 8007276:	f107 070c 	add.w	r7, r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <TIM_RemapConfig>:
  *            @arg TIM8_ADC4_AWDG2: TIM8 ETR is connected to ADC4 AWDG2.
  *            @arg TIM8_ADC4_AWDG3: TIM8 ETR is connected to ADC4 AWDG3.  
  * @retval : None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	887a      	ldrh	r2, [r7, #2]
 8007290:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8007294:	f107 070c 	add.w	r7, r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	bc80      	pop	{r7}
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop

080072a0 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	8179      	strh	r1, [r7, #10]
 80072aa:	813a      	strh	r2, [r7, #8]
 80072ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0;
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f023 0201 	bic.w	r2, r3, #1
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	613b      	str	r3, [r7, #16]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80072d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 80072da:	893a      	ldrh	r2, [r7, #8]
 80072dc:	88fb      	ldrh	r3, [r7, #6]
 80072de:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80072e2:	4313      	orrs	r3, r2
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f023 030a 	bic.w	r3, r3, #10
 80072f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 80072f2:	897b      	ldrh	r3, [r7, #10]
 80072f4:	f043 0301 	orr.w	r3, r3, #1
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	621a      	str	r2, [r3, #32]
}
 800730c:	f107 071c 	add.w	r7, r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop

08007318 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8007318:	b480      	push	{r7}
 800731a:	b089      	sub	sp, #36	; 0x24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	8179      	strh	r1, [r7, #10]
 8007322:	813a      	strh	r2, [r7, #8]
 8007324:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	61fb      	str	r3, [r7, #28]
 800732c:	f04f 0300 	mov.w	r3, #0
 8007330:	61bb      	str	r3, [r7, #24]
 8007332:	f04f 0300 	mov.w	r3, #0
 8007336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a1a      	ldr	r2, [r3, #32]
 800733c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007340:	4013      	ands	r3, r2
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	61fb      	str	r3, [r7, #28]
  tmpccer = TIMx->CCER;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	61bb      	str	r3, [r7, #24]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8007352:	897b      	ldrh	r3, [r7, #10]
 8007354:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007358:	b29b      	uxth	r3, r3
 800735a:	617b      	str	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f423 4373 	bic.w	r3, r3, #62208	; 0xf300
 8007362:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	4313      	orrs	r3, r2
 800736e:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8007370:	893b      	ldrh	r3, [r7, #8]
 8007372:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	4313      	orrs	r3, r2
 800737a:	61fb      	str	r3, [r7, #28]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8007382:	4013      	ands	r3, r2
 8007384:	61bb      	str	r3, [r7, #24]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	b29b      	uxth	r3, r3
 800738a:	f043 0310 	orr.w	r3, r3, #16
 800738e:	b29b      	uxth	r3, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	4313      	orrs	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	621a      	str	r2, [r3, #32]
}
 80073a2:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr

080073ac <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	8179      	strh	r1, [r7, #10]
 80073b6:	813a      	strh	r2, [r7, #8]
 80073b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	82fb      	strh	r3, [r7, #22]
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	82bb      	strh	r3, [r7, #20]
 80073c6:	f04f 0300 	mov.w	r3, #0
 80073ca:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1a      	ldr	r2, [r3, #32]
 80073d0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80073d4:	4013      	ands	r3, r2
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80073e6:	897b      	ldrh	r3, [r7, #10]
 80073e8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80073ec:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80073ee:	8afb      	ldrh	r3, [r7, #22]
 80073f0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80073f4:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	893b      	ldrh	r3, [r7, #8]
 8007400:	4313      	orrs	r3, r2
 8007402:	b29a      	uxth	r2, r3
 8007404:	8afb      	ldrh	r3, [r7, #22]
 8007406:	4313      	orrs	r3, r2
 8007408:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800740a:	8abb      	ldrh	r3, [r7, #20]
 800740c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007410:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8007412:	8a7a      	ldrh	r2, [r7, #18]
 8007414:	8abb      	ldrh	r3, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	b29b      	uxth	r3, r3
 800741a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800741e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007420:	8afa      	ldrh	r2, [r7, #22]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007426:	8aba      	ldrh	r2, [r7, #20]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	621a      	str	r2, [r3, #32]
}
 800742c:	f107 071c 	add.w	r7, r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop

08007438 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	8179      	strh	r1, [r7, #10]
 8007442:	813a      	strh	r2, [r7, #8]
 8007444:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	82fb      	strh	r3, [r7, #22]
 800744c:	f04f 0300 	mov.w	r3, #0
 8007450:	82bb      	strh	r3, [r7, #20]
 8007452:	f04f 0300 	mov.w	r3, #0
 8007456:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a1a      	ldr	r2, [r3, #32]
 800745c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8007460:	4013      	ands	r3, r2
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8007472:	897b      	ldrh	r3, [r7, #10]
 8007474:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007478:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800747a:	8afb      	ldrh	r3, [r7, #22]
 800747c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007480:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8007484:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8007488:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800748a:	893b      	ldrh	r3, [r7, #8]
 800748c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8007490:	b29a      	uxth	r2, r3
 8007492:	8afb      	ldrh	r3, [r7, #22]
 8007494:	4313      	orrs	r3, r2
 8007496:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8007498:	88fb      	ldrh	r3, [r7, #6]
 800749a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800749e:	b29a      	uxth	r2, r3
 80074a0:	8afb      	ldrh	r3, [r7, #22]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80074a6:	8abb      	ldrh	r3, [r7, #20]
 80074a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ac:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80074b0:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80074b4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80074b6:	8a7a      	ldrh	r2, [r7, #18]
 80074b8:	8abb      	ldrh	r3, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074c2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074c4:	8afa      	ldrh	r2, [r7, #22]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074ca:	8aba      	ldrh	r2, [r7, #20]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	621a      	str	r2, [r3, #32]
}
 80074d0:	f107 071c 	add.w	r7, r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bc80      	pop	{r7}
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop

080074dc <USART_DeInit>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80074ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d10c      	bne.n	800750c <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80074f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80074f6:	f04f 0101 	mov.w	r1, #1
 80074fa:	f7fd f8cf 	bl	800469c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80074fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007502:	f04f 0100 	mov.w	r1, #0
 8007506:	f7fd f8c9 	bl	800469c <RCC_APB2PeriphResetCmd>
 800750a:	e04e      	b.n	80075aa <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8007512:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007516:	429a      	cmp	r2, r3
 8007518:	d10c      	bne.n	8007534 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800751a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800751e:	f04f 0101 	mov.w	r1, #1
 8007522:	f7fd f8e5 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8007526:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800752a:	f04f 0100 	mov.w	r1, #0
 800752e:	f7fd f8df 	bl	80046f0 <RCC_APB1PeriphResetCmd>
 8007532:	e03a      	b.n	80075aa <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800753a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800753e:	429a      	cmp	r2, r3
 8007540:	d10c      	bne.n	800755c <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8007542:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007546:	f04f 0101 	mov.w	r1, #1
 800754a:	f7fd f8d1 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800754e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007552:	f04f 0100 	mov.w	r1, #0
 8007556:	f7fd f8cb 	bl	80046f0 <RCC_APB1PeriphResetCmd>
 800755a:	e026      	b.n	80075aa <USART_DeInit+0xce>
  }
  else if (USARTx == UART4)
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8007562:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007566:	429a      	cmp	r2, r3
 8007568:	d10c      	bne.n	8007584 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800756a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800756e:	f04f 0101 	mov.w	r1, #1
 8007572:	f7fd f8bd 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8007576:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800757a:	f04f 0100 	mov.w	r1, #0
 800757e:	f7fd f8b7 	bl	80046f0 <RCC_APB1PeriphResetCmd>
 8007582:	e012      	b.n	80075aa <USART_DeInit+0xce>
  }
  else
  {
    if  (USARTx == UART5)
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800758a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800758e:	429a      	cmp	r2, r3
 8007590:	d10b      	bne.n	80075aa <USART_DeInit+0xce>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8007592:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007596:	f04f 0101 	mov.w	r1, #1
 800759a:	f7fd f8a9 	bl	80046f0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800759e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80075a2:	f04f 0100 	mov.w	r1, #0
 80075a6:	f7fd f8a3 	bl	80046f0 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80075aa:	f107 0708 	add.w	r7, r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop

080075b4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b094      	sub	sp, #80	; 0x50
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	647b      	str	r3, [r7, #68]	; 0x44
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f023 0201 	bic.w	r2, r3, #1
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80075e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80075e8:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075f0:	4313      	orrs	r3, r2
 80075f2:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075f8:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8007600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007602:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007606:	f023 030c 	bic.w	r3, r3, #12
 800760a:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800761a:	4313      	orrs	r3, r2
 800761c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800761e:	4313      	orrs	r3, r2
 8007620:	647b      	str	r3, [r7, #68]	; 0x44
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007626:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800762e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007634:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763c:	4313      	orrs	r3, r2
 800763e:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007644:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8007646:	f107 0308 	add.w	r3, r7, #8
 800764a:	4618      	mov	r0, r3
 800764c:	f7fc fb66 	bl	8003d1c <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007656:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800765a:	429a      	cmp	r2, r3
 800765c:	d102      	bne.n	8007664 <USART_Init+0xb0>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	64bb      	str	r3, [r7, #72]	; 0x48
 8007662:	e01f      	b.n	80076a4 <USART_Init+0xf0>
  }
  else if (USARTx == USART2)
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800766a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800766e:	429a      	cmp	r2, r3
 8007670:	d102      	bne.n	8007678 <USART_Init+0xc4>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8007672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007674:	64bb      	str	r3, [r7, #72]	; 0x48
 8007676:	e015      	b.n	80076a4 <USART_Init+0xf0>
  }
  else if (USARTx == USART3)
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800767e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007682:	429a      	cmp	r2, r3
 8007684:	d102      	bne.n	800768c <USART_Init+0xd8>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8007686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007688:	64bb      	str	r3, [r7, #72]	; 0x48
 800768a:	e00b      	b.n	80076a4 <USART_Init+0xf0>
  }
  else if (USARTx == UART4)
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8007692:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007696:	429a      	cmp	r2, r3
 8007698:	d102      	bne.n	80076a0 <USART_Init+0xec>
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 800769a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769c:	64bb      	str	r3, [r7, #72]	; 0x48
 800769e:	e001      	b.n	80076a4 <USART_Init+0xf0>
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 80076a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a2:	64bb      	str	r3, [r7, #72]	; 0x48
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d013      	beq.n	80076d8 <USART_Init+0x124>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 80076b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b2:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80076be:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 80076c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	6812      	ldr	r2, [r2, #0]
 80076ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ce:	fb02 f201 	mul.w	r2, r2, r1
 80076d2:	1a9b      	subs	r3, r3, r2
 80076d4:	647b      	str	r3, [r7, #68]	; 0x44
 80076d6:	e00e      	b.n	80076f6 <USART_Init+0x142>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076de:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ee:	fb02 f201 	mul.w	r2, r2, r1
 80076f2:	1a9b      	subs	r3, r3, r2
 80076f4:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80076fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007700:	429a      	cmp	r2, r3
 8007702:	d803      	bhi.n	800770c <USART_Init+0x158>
  {
    divider++;
 8007704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007706:	f103 0301 	add.w	r3, r3, #1
 800770a:	64fb      	str	r3, [r7, #76]	; 0x4c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00c      	beq.n	8007732 <USART_Init+0x17e>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8007718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8007722:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8007724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007726:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800772a:	4013      	ands	r3, r2
 800772c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800772e:	4313      	orrs	r3, r2
 8007730:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8007732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007734:	b29a      	uxth	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	819a      	strh	r2, [r3, #12]
}
 800773a:	f107 0750 	add.w	r7, r7, #80	; 0x50
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop

08007744 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007752:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f04f 0200 	mov.w	r2, #0
 800775a:	605a      	str	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	609a      	str	r2, [r3, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	60da      	str	r2, [r3, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f04f 020c 	mov.w	r2, #12
 8007772:	611a      	str	r2, [r3, #16]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f04f 0200 	mov.w	r2, #0
 800777a:	615a      	str	r2, [r3, #20]
}
 800777c:	f107 070c 	add.w	r7, r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop

08007788 <USART_ClockInit>:
  *         structure that contains the configuration information for the specified
  *         USART peripheral.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007792:	f04f 0300 	mov.w	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077a4:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80077b4:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80077ba:	4313      	orrs	r3, r2
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	605a      	str	r2, [r3, #4]
}
 80077c8:	f107 0714 	add.w	r7, r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop

080077d4 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f04f 0200 	mov.w	r2, #0
 80077ea:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f04f 0200 	mov.w	r2, #0
 80077fa:	60da      	str	r2, [r3, #12]
}
 80077fc:	f107 070c 	add.w	r7, r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop

08007808 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007814:	78fb      	ldrb	r3, [r7, #3]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d006      	beq.n	8007828 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f043 0201 	orr.w	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e005      	b.n	8007834 <USART_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f023 0201 	bic.w	r2, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	601a      	str	r2, [r3, #0]
  }
}
 8007834:	f107 070c 	add.w	r7, r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	bc80      	pop	{r7}
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop

08007840 <USART_DirectionModeCmd>:
  * @param  NewState: new state of the USART transfer direction.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState NewState)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <USART_DirectionModeCmd+0x22>
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	431a      	orrs	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e007      	b.n	8007872 <USART_DirectionModeCmd+0x32>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	ea6f 0303 	mvn.w	r3, r3
 800786c:	401a      	ands	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	601a      	str	r2, [r3, #0]
  }
}
 8007872:	f107 0714 	add.w	r7, r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr

0800787c <USART_OverSampling8Cmd>:
  *   This function has to be called before calling USART_Init()
  *   function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d006      	beq.n	800789c <USART_OverSampling8Cmd+0x20>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	e005      	b.n	80078a8 <USART_OverSampling8Cmd+0x2c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	601a      	str	r2, [r3, #0]
  }
}
 80078a8:	f107 070c 	add.w	r7, r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop

080078b4 <USART_OneBitMethodCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d006      	beq.n	80078d4 <USART_OneBitMethodCmd+0x20>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	609a      	str	r2, [r3, #8]
 80078d2:	e005      	b.n	80078e0 <USART_OneBitMethodCmd+0x2c>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	609a      	str	r2, [r3, #8]
  }
}
 80078e0:	f107 070c 	add.w	r7, r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop

080078ec <USART_MSBFirstCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d006      	beq.n	800790c <USART_MSBFirstCmd+0x20>
  {
    /* Enable the most significant bit first transmitted/received following the
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	605a      	str	r2, [r3, #4]
 800790a:	e005      	b.n	8007918 <USART_MSBFirstCmd+0x2c>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	605a      	str	r2, [r3, #4]
  }
}
 8007918:	f107 070c 	add.w	r7, r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop

08007924 <USART_DataInvCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d006      	beq.n	8007944 <USART_DataInvCmd+0x20>
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	e005      	b.n	8007950 <USART_DataInvCmd+0x2c>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	605a      	str	r2, [r3, #4]
  }
}
 8007950:	f107 070c 	add.w	r7, r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop

0800795c <USART_InvPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800796a:	79fb      	ldrb	r3, [r7, #7]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d006      	beq.n	800797e <USART_InvPinCmd+0x22>
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	431a      	orrs	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	605a      	str	r2, [r3, #4]
 800797c:	e007      	b.n	800798e <USART_InvPinCmd+0x32>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	ea6f 0303 	mvn.w	r3, r3
 8007988:	401a      	ands	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	605a      	str	r2, [r3, #4]
  }
}
 800798e:	f107 0714 	add.w	r7, r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr

08007998 <USART_SWAPPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d006      	beq.n	80079b8 <USART_SWAPPinCmd+0x20>
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	605a      	str	r2, [r3, #4]
 80079b6:	e005      	b.n	80079c4 <USART_SWAPPinCmd+0x2c>
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	605a      	str	r2, [r3, #4]
  }
}
 80079c4:	f107 070c 	add.w	r7, r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop

080079d0 <USART_ReceiverTimeOutCmd>:
  * @param  NewState: new state of the USARTx receiver Time Out.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d006      	beq.n	80079f0 <USART_ReceiverTimeOutCmd+0x20>
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	605a      	str	r2, [r3, #4]
 80079ee:	e005      	b.n	80079fc <USART_ReceiverTimeOutCmd+0x2c>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	605a      	str	r2, [r3, #4]
  }
}
 80079fc:	f107 070c 	add.w	r7, r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bc80      	pop	{r7}
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop

08007a08 <USART_SetReceiverTimeOut>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
  * @retval None
  */
void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
{    
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	615a      	str	r2, [r3, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695a      	ldr	r2, [r3, #20]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	615a      	str	r2, [r3, #20]
}
 8007a2a:	f107 070c 	add.w	r7, r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr

08007a34 <USART_SetPrescaler>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8a1b      	ldrh	r3, [r3, #16]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	821a      	strh	r2, [r3, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	8a1b      	ldrh	r3, [r3, #16]
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	78fb      	ldrb	r3, [r7, #3]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	821a      	strh	r2, [r3, #16]
}
 8007a62:	f107 070c 	add.w	r7, r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bc80      	pop	{r7}
 8007a6a:	4770      	bx	lr

08007a6c <USART_STOPModeCmd>:
  * @note
  *   This function has to be called when USART clock is set to HSI or LSE.
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d006      	beq.n	8007a8c <USART_STOPModeCmd+0x20>
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f043 0202 	orr.w	r2, r3, #2
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	e005      	b.n	8007a98 <USART_STOPModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f023 0202 	bic.w	r2, r3, #2
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	601a      	str	r2, [r3, #0]
  }
}
 8007a98:	f107 070c 	add.w	r7, r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop

08007aa4 <USART_StopModeWakeUpSourceConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	609a      	str	r2, [r3, #8]
}
 8007ac6:	f107 070c 	add.w	r7, r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr

08007ad0 <USART_AutoBaudRateCmd>:
  * @param  NewState: new state of the USARTx auto baud rate.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d006      	beq.n	8007af0 <USART_AutoBaudRateCmd+0x20>
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	605a      	str	r2, [r3, #4]
 8007aee:	e005      	b.n	8007afc <USART_AutoBaudRateCmd+0x2c>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	605a      	str	r2, [r3, #4]
  }
}
 8007afc:	f107 070c 	add.w	r7, r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop

08007b08 <USART_AutoBaudRateConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	431a      	orrs	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	605a      	str	r2, [r3, #4]
}
 8007b2a:	f107 070c 	add.w	r7, r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8007b40:	887b      	ldrh	r3, [r7, #2]
 8007b42:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8007b46:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8007b50:	f107 070c 	add.w	r7, r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc80      	pop	{r7}
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop

08007b5c <USART_ReceiveData>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8007b6e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8007b72:	b29b      	uxth	r3, r3
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	f107 070c 	add.w	r7, r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr

08007b80 <USART_SetAddress>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	605a      	str	r2, [r3, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	ea4f 6303 	mov.w	r3, r3, lsl #24
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	605a      	str	r2, [r3, #4]
}
 8007ba8:	f107 070c 	add.w	r7, r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bc80      	pop	{r7}
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop

08007bb4 <USART_MuteModeCmd>:
  * @param  NewState: new state of the USART mute mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d006      	beq.n	8007bd4 <USART_MuteModeCmd+0x20>
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	e005      	b.n	8007be0 <USART_MuteModeCmd+0x2c>
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	601a      	str	r2, [r3, #0]
  }
}
 8007be0:	f107 070c 	add.w	r7, r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop

08007bec <USART_MuteModeWakeUpConfig>:
  *         @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *         @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	601a      	str	r2, [r3, #0]
  USARTx->CR1 |= USART_WakeUp;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
}
 8007c0e:	f107 070c 	add.w	r7, r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bc80      	pop	{r7}
 8007c16:	4770      	bx	lr

08007c18 <USART_AddressDetectionConfig>:
  *         @arg USART_AddressLength_4b: 4-bit address length detection 
  *         @arg USART_AddressLength_7b: 7-bit address length detection 
  * @retval None
  */
void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f023 0210 	bic.w	r2, r3, #16
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AddressLength;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]
}
 8007c3a:	f107 070c 	add.w	r7, r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr

08007c44 <USART_LINBreakDetectLengthConfig>:
  *         @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *         @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f023 0220 	bic.w	r2, r3, #32
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]
}
 8007c66:	f107 070c 	add.w	r7, r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr

08007c70 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d006      	beq.n	8007c90 <USART_LINCmd+0x20>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	605a      	str	r2, [r3, #4]
 8007c8e:	e005      	b.n	8007c9c <USART_LINCmd+0x2c>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	605a      	str	r2, [r3, #4]
  }
}
 8007c9c:	f107 070c 	add.w	r7, r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bc80      	pop	{r7}
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop

08007ca8 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007cb4:	78fb      	ldrb	r3, [r7, #3]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d006      	beq.n	8007cc8 <USART_HalfDuplexCmd+0x20>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f043 0208 	orr.w	r2, r3, #8
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	609a      	str	r2, [r3, #8]
 8007cc6:	e005      	b.n	8007cd4 <USART_HalfDuplexCmd+0x2c>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f023 0208 	bic.w	r2, r3, #8
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	609a      	str	r2, [r3, #8]
  }
}
 8007cd4:	f107 070c 	add.w	r7, r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop

08007ce0 <USART_SetGuardTime>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_GuardTime: specifies the guard time.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	8a1b      	ldrh	r3, [r3, #16]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	821a      	strh	r2, [r3, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	8a1b      	ldrh	r3, [r3, #16]
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	821a      	strh	r2, [r3, #16]
}
 8007d12:	f107 070c 	add.w	r7, r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <USART_SmartCardCmd+0x20>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f043 0220 	orr.w	r2, r3, #32
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	609a      	str	r2, [r3, #8]
 8007d3a:	e005      	b.n	8007d48 <USART_SmartCardCmd+0x2c>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f023 0220 	bic.w	r2, r3, #32
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	609a      	str	r2, [r3, #8]
  }
}
 8007d48:	f107 070c 	add.w	r7, r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop

08007d54 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d006      	beq.n	8007d74 <USART_SmartCardNACKCmd+0x20>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f043 0210 	orr.w	r2, r3, #16
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	609a      	str	r2, [r3, #8]
 8007d72:	e005      	b.n	8007d80 <USART_SmartCardNACKCmd+0x2c>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f023 0210 	bic.w	r2, r3, #16
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	609a      	str	r2, [r3, #8]
  }
}
 8007d80:	f107 070c 	add.w	r7, r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop

08007d8c <USART_SetAutoRetryCount>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_AutoCount: specifies the Smart Card auto retry count.
  * @retval None
  */
void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
{    
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f423 2260 	bic.w	r2, r3, #917504	; 0xe0000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	609a      	str	r2, [r3, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	609a      	str	r2, [r3, #8]
}
 8007db4:	f107 070c 	add.w	r7, r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop

08007dc0 <USART_SetBlockLength>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_BlockLength: specifies the Smart Card block length.
  * @retval None
  */
void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
{    
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	615a      	str	r2, [r3, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	695a      	ldr	r2, [r3, #20]
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	ea4f 6303 	mov.w	r3, r3, lsl #24
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	615a      	str	r2, [r3, #20]
}
 8007de8:	f107 070c 	add.w	r7, r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop

08007df4 <USART_IrDAConfig>:
  *         @arg USART_IrDAMode_LowPower
  *         @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f023 0204 	bic.w	r2, r3, #4
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_IrDAMode;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	431a      	orrs	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	609a      	str	r2, [r3, #8]
}
 8007e16:	f107 070c 	add.w	r7, r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr

08007e20 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d006      	beq.n	8007e40 <USART_IrDACmd+0x20>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f043 0202 	orr.w	r2, r3, #2
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	609a      	str	r2, [r3, #8]
 8007e3e:	e005      	b.n	8007e4c <USART_IrDACmd+0x2c>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f023 0202 	bic.w	r2, r3, #2
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	609a      	str	r2, [r3, #8]
  }
}
 8007e4c:	f107 070c 	add.w	r7, r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop

08007e58 <USART_DECmd>:
  * @param  NewState: new state of the driver enable mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d006      	beq.n	8007e78 <USART_DECmd+0x20>
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	609a      	str	r2, [r3, #8]
 8007e76:	e005      	b.n	8007e84 <USART_DECmd+0x2c>
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	609a      	str	r2, [r3, #8]
  }
}
 8007e84:	f107 070c 	add.w	r7, r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop

08007e90 <USART_DEPolarityConfig>:
  *         @arg USART_DEPolarity_Low
  *         @arg USART_DEPolarity_High
  * @retval None
  */
void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_DEPolarity;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	609a      	str	r2, [r3, #8]
}
 8007eb2:	f107 070c 	add.w	r7, r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr

08007ebc <USART_SetDEAssertionTime>:
  * @param  USART_AssertionTime: specifies the time between the activation of the DE
  *          signal and the beginning of the start bit
  * @retval None
  */
void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	ea4f 5343 	mov.w	r3, r3, lsl #21
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	601a      	str	r2, [r3, #0]
}
 8007ee2:	f107 070c 	add.w	r7, r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <USART_SetDEDeassertionTime>:
  * @param  USART_DeassertionTime: specifies the time between the middle of the last 
  *         stop bit in a transmitted message and the de-activation of the DE signal
  * @retval None
  */
void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
}
 8007f12:	f107 070c 	add.w	r7, r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr

08007f1c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d006      	beq.n	8007f3e <USART_DMACmd+0x22>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	431a      	orrs	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	609a      	str	r2, [r3, #8]
 8007f3c:	e007      	b.n	8007f4e <USART_DMACmd+0x32>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	ea6f 0303 	mvn.w	r3, r3
 8007f48:	401a      	ands	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	609a      	str	r2, [r3, #8]
  }
}
 8007f4e:	f107 0714 	add.w	r7, r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bc80      	pop	{r7}
 8007f56:	4770      	bx	lr

08007f58 <USART_DMAReceptionErrorConfig>:
  *         @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
  *          reception error is asserted.
  * @retval None
  */
void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	609a      	str	r2, [r3, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	609a      	str	r2, [r3, #8]
}
 8007f7a:	f107 070c 	add.w	r7, r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr

08007f84 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b089      	sub	sp, #36	; 0x24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	61bb      	str	r3, [r7, #24]
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f04f 0201 	mov.w	r2, #1
 8007fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fca:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d104      	bne.n	8007fdc <USART_ITConfig+0x58>
  {
    usartxbase += 0x04;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	f103 0304 	add.w	r3, r3, #4
 8007fd8:	61fb      	str	r3, [r7, #28]
 8007fda:	e006      	b.n	8007fea <USART_ITConfig+0x66>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d103      	bne.n	8007fea <USART_ITConfig+0x66>
  {
    usartxbase += 0x08;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	f103 0308 	add.w	r3, r3, #8
 8007fe8:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d006      	beq.n	8007ffe <USART_ITConfig+0x7a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	6811      	ldr	r1, [r2, #0]
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	e007      	b.n	800800e <USART_ITConfig+0x8a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	69fa      	ldr	r2, [r7, #28]
 8008002:	6811      	ldr	r1, [r2, #0]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	ea6f 0202 	mvn.w	r2, r2
 800800a:	400a      	ands	r2, r1
 800800c:	601a      	str	r2, [r3, #0]
  }
}
 800800e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr

08008018 <USART_RequestCmd>:
  * @param  NewState: new state of the DMA interface when reception error occurs.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8008026:	79fb      	ldrb	r3, [r7, #7]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d009      	beq.n	8008040 <USART_RequestCmd+0x28>
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8b1b      	ldrh	r3, [r3, #24]
 8008030:	b29a      	uxth	r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	b29b      	uxth	r3, r3
 8008036:	4313      	orrs	r3, r2
 8008038:	b29a      	uxth	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	831a      	strh	r2, [r3, #24]
 800803e:	e00b      	b.n	8008058 <USART_RequestCmd+0x40>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	8b1b      	ldrh	r3, [r3, #24]
 8008044:	b29a      	uxth	r2, r3
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	b29b      	uxth	r3, r3
 800804a:	ea6f 0303 	mvn.w	r3, r3
 800804e:	b29b      	uxth	r3, r3
 8008050:	4013      	ands	r3, r2
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	831a      	strh	r2, [r3, #24]
  }
}
 8008058:	f107 0714 	add.w	r7, r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	bc80      	pop	{r7}
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop

08008064 <USART_OverrunDetectionConfig>:
  *         @arg USART_OVRDetection_Disable: OVR error detection disabled when the USART OVR error 
  *          is asserted.
  * @retval None
  */
void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	609a      	str	r2, [r3, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	609a      	str	r2, [r3, #8]
}
 8008086:	f107 070c 	add.w	r7, r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	bc80      	pop	{r7}
 800808e:	4770      	bx	lr

08008090 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	69da      	ldr	r2, [r3, #28]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	4013      	ands	r3, r2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <USART_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 80080ac:	f04f 0301 	mov.w	r3, #1
 80080b0:	73fb      	strb	r3, [r7, #15]
 80080b2:	e002      	b.n	80080ba <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80080b4:	f04f 0300 	mov.w	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	f107 0714 	add.w	r7, r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <USART_ClearFlag>:
  *   - SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	621a      	str	r2, [r3, #32]
}
 80080d8:	f107 070c 	add.w	r7, r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop

080080e4 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	f04f 0300 	mov.w	r3, #0
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800810e:	b29b      	uxth	r3, r3
 8008110:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f04f 0201 	mov.w	r2, #1
 800811e:	fa02 f303 	lsl.w	r3, r2, r3
 8008122:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d105      	bne.n	8008136 <USART_GetITStatus+0x52>
  {
    itmask &= USARTx->CR1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4013      	ands	r3, r2
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e00d      	b.n	8008152 <USART_GetITStatus+0x6e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d105      	bne.n	8008148 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	4013      	ands	r3, r2
 8008144:	617b      	str	r3, [r7, #20]
 8008146:	e004      	b.n	8008152 <USART_GetITStatus+0x6e>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4013      	ands	r3, r2
 8008150:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008158:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f04f 0201 	mov.w	r2, #1
 8008160:	fa02 f303 	lsl.w	r3, r2, r3
 8008164:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4013      	ands	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d006      	beq.n	8008184 <USART_GetITStatus+0xa0>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <USART_GetITStatus+0xa0>
  {
    bitstatus = SET;
 800817c:	f04f 0301 	mov.w	r3, #1
 8008180:	74fb      	strb	r3, [r7, #19]
 8008182:	e002      	b.n	800818a <USART_GetITStatus+0xa6>
  }
  else
  {
    bitstatus = RESET;
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800818a:	7cfb      	ldrb	r3, [r7, #19]
}
 800818c:	4618      	mov	r0, r3
 800818e:	f107 071c 	add.w	r7, r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr

08008198 <USART_ClearITPendingBit>:
  *     (USART_SendData()) or by writing 1 to the TXFRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0;
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	f04f 0300 	mov.w	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80081b4:	60fb      	str	r3, [r7, #12]
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f04f 0201 	mov.w	r2, #1
 80081bc:	fa02 f303 	lsl.w	r3, r2, r3
 80081c0:	60bb      	str	r3, [r7, #8]
  USARTx->ICR = (uint32_t)itmask;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	621a      	str	r2, [r3, #32]
}
 80081c8:	f107 0714 	add.w	r7, r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop

080081d4 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(L3GD20_InitTypeDef *L3GD20_InitStruct)
{  
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	73bb      	strb	r3, [r7, #14]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
 80081e8:	f000 f9c6 	bl	8008578 <L3GD20_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	781a      	ldrb	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 80081fc:	4313      	orrs	r3, r2
 80081fe:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 8008204:	4313      	orrs	r3, r2
 8008206:	b2da      	uxtb	r2, r3
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	4313      	orrs	r3, r2
 800820c:	b2db      	uxtb	r3, r3
 800820e:	73fb      	strb	r3, [r7, #15]
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	791a      	ldrb	r2, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	795b      	ldrb	r3, [r3, #5]
 8008218:	4313      	orrs	r3, r2
 800821a:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Full_Scale);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	799b      	ldrb	r3, [r3, #6]
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 8008220:	4313      	orrs	r3, r2
 8008222:	b2da      	uxtb	r2, r3
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	4313      	orrs	r3, r2
 8008228:	b2db      	uxtb	r3, r3
 800822a:	73bb      	strb	r3, [r7, #14]
                    L3GD20_InitStruct->Full_Scale);
                    
  /* Write value to MEMS CTRL_REG1 regsister */
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 800822c:	f107 030f 	add.w	r3, r7, #15
 8008230:	4618      	mov	r0, r3
 8008232:	f04f 0120 	mov.w	r1, #32
 8008236:	f04f 0201 	mov.w	r2, #1
 800823a:	f000 f925 	bl	8008488 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */
  L3GD20_Write(&ctrl4, L3GD20_CTRL_REG4_ADDR, 1);
 800823e:	f107 030e 	add.w	r3, r7, #14
 8008242:	4618      	mov	r0, r3
 8008244:	f04f 0123 	mov.w	r1, #35	; 0x23
 8008248:	f04f 0201 	mov.w	r2, #1
 800824c:	f000 f91c 	bl	8008488 <L3GD20_Write>
}
 8008250:	f107 0710 	add.w	r7, r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800825e:	f107 0307 	add.w	r3, r7, #7
 8008262:	4618      	mov	r0, r3
 8008264:	f04f 0124 	mov.w	r1, #36	; 0x24
 8008268:	f04f 0201 	mov.w	r2, #1
 800826c:	f000 f944 	bl	80084f8 <L3GD20_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008276:	b2db      	uxtb	r3, r3
 8008278:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800827a:	f107 0307 	add.w	r3, r7, #7
 800827e:	4618      	mov	r0, r3
 8008280:	f04f 0124 	mov.w	r1, #36	; 0x24
 8008284:	f04f 0201 	mov.w	r2, #1
 8008288:	f000 f8fe 	bl	8008488 <L3GD20_Write>
}
 800828c:	f107 0708 	add.w	r7, r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(L3GD20_InterruptConfigTypeDef *L3GD20_IntConfigStruct)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800829c:	f04f 0300 	mov.w	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  L3GD20_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80082a8:	f107 030f 	add.w	r3, r7, #15
 80082ac:	4618      	mov	r0, r3
 80082ae:	f04f 0130 	mov.w	r1, #48	; 0x30
 80082b2:	f04f 0201 	mov.w	r2, #1
 80082b6:	f000 f91f 	bl	80084f8 <L3GD20_Read>
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80082ba:	f107 030e 	add.w	r3, r7, #14
 80082be:	4618      	mov	r0, r3
 80082c0:	f04f 0122 	mov.w	r1, #34	; 0x22
 80082c4:	f04f 0201 	mov.w	r2, #1
 80082c8:	f000 f916 	bl	80084f8 <L3GD20_Read>
  
  ctrl_cfr &= 0x80;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	f023 0320 	bic.w	r3, r3, #32
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	73bb      	strb	r3, [r7, #14]
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	781a      	ldrb	r2, [r3, #0]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	785b      	ldrb	r3, [r3, #1]
  ctrl_cfr &= 0x80;
  
  ctrl3 &= 0xDF;
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 80082e8:	4313      	orrs	r3, r2
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	73fb      	strb	r3, [r7, #15]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	789a      	ldrb	r2, [r3, #2]
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  L3GD20_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8008300:	f107 030f 	add.w	r3, r7, #15
 8008304:	4618      	mov	r0, r3
 8008306:	f04f 0130 	mov.w	r1, #48	; 0x30
 800830a:	f04f 0201 	mov.w	r2, #1
 800830e:	f000 f8bb 	bl	8008488 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  L3GD20_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8008312:	f107 030e 	add.w	r3, r7, #14
 8008316:	4618      	mov	r0, r3
 8008318:	f04f 0122 	mov.w	r1, #34	; 0x22
 800831c:	f04f 0201 	mov.w	r2, #1
 8008320:	f000 f8b2 	bl	8008488 <L3GD20_Write>
}
 8008324:	f107 0710 	add.w	r7, r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <L3GD20_INT1InterruptCmd>:
  *        @arg L3GD20_INT1INTERRUPT_DISABLE
  *        @arg L3GD20_INT1INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT1InterruptCmd(uint8_t InterruptState)
{  
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8008336:	f107 030f 	add.w	r3, r7, #15
 800833a:	4618      	mov	r0, r3
 800833c:	f04f 0122 	mov.w	r1, #34	; 0x22
 8008340:	f04f 0201 	mov.w	r2, #1
 8008344:	f000 f8d8 	bl	80084f8 <L3GD20_Read>
                  
  tmpreg &= 0x7F;	
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800834e:	b2db      	uxtb	r3, r3
 8008350:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 8008352:	7bfa      	ldrb	r2, [r7, #15]
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	4313      	orrs	r3, r2
 8008358:	b2db      	uxtb	r3, r3
 800835a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800835c:	f107 030f 	add.w	r3, r7, #15
 8008360:	4618      	mov	r0, r3
 8008362:	f04f 0122 	mov.w	r1, #34	; 0x22
 8008366:	f04f 0201 	mov.w	r2, #1
 800836a:	f000 f88d 	bl	8008488 <L3GD20_Write>
}
 800836e:	f107 0710 	add.w	r7, r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop

08008378 <L3GD20_INT2InterruptCmd>:
  *        @arg L3GD20_INT2INTERRUPT_DISABLE
  *        @arg L3GD20_INT2INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT2InterruptCmd(uint8_t InterruptState)
{  
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8008382:	f107 030f 	add.w	r3, r7, #15
 8008386:	4618      	mov	r0, r3
 8008388:	f04f 0122 	mov.w	r1, #34	; 0x22
 800838c:	f04f 0201 	mov.w	r2, #1
 8008390:	f000 f8b2 	bl	80084f8 <L3GD20_Read>
                  
  tmpreg &= 0xF7;	
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	f023 0308 	bic.w	r3, r3, #8
 800839a:	b2db      	uxtb	r3, r3
 800839c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 800839e:	7bfa      	ldrb	r2, [r7, #15]
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80083a8:	f107 030f 	add.w	r3, r7, #15
 80083ac:	4618      	mov	r0, r3
 80083ae:	f04f 0122 	mov.w	r1, #34	; 0x22
 80083b2:	f04f 0201 	mov.w	r2, #1
 80083b6:	f000 f867 	bl	8008488 <L3GD20_Write>
}
 80083ba:	f107 0710 	add.w	r7, r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop

080083c4 <L3GD20_FilterConfig>:
  * @param  L3GD20_FilterStruct: pointer to a L3GD20_FilterConfigTypeDef structure 
  *         that contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(L3GD20_FilterConfigTypeDef *L3GD20_FilterStruct) 
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80083cc:	f107 030f 	add.w	r3, r7, #15
 80083d0:	4618      	mov	r0, r3
 80083d2:	f04f 0121 	mov.w	r1, #33	; 0x21
 80083d6:	f04f 0201 	mov.w	r2, #1
 80083da:	f000 f88d 	bl	80084f8 <L3GD20_Read>
  
  tmpreg &= 0xC0;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	781a      	ldrb	r2, [r3, #0]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	785b      	ldrb	r3, [r3, #1]
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 80083f0:	4313      	orrs	r3, r2
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	73fb      	strb	r3, [r7, #15]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             

  /* Write value to MEMS CTRL_REG2 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80083fc:	f107 030f 	add.w	r3, r7, #15
 8008400:	4618      	mov	r0, r3
 8008402:	f04f 0121 	mov.w	r1, #33	; 0x21
 8008406:	f04f 0201 	mov.w	r2, #1
 800840a:	f000 f83d 	bl	8008488 <L3GD20_Write>
}
 800840e:	f107 0710 	add.w	r7, r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop

08008418 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
 {
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8008422:	f107 030f 	add.w	r3, r7, #15
 8008426:	4618      	mov	r0, r3
 8008428:	f04f 0124 	mov.w	r1, #36	; 0x24
 800842c:	f04f 0201 	mov.w	r2, #1
 8008430:	f000 f862 	bl	80084f8 <L3GD20_Read>
                  
  tmpreg &= 0xEF;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	f023 0310 	bic.w	r3, r3, #16
 800843a:	b2db      	uxtb	r3, r3
 800843c:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 800843e:	7bfa      	ldrb	r2, [r7, #15]
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	4313      	orrs	r3, r2
 8008444:	b2db      	uxtb	r3, r3
 8008446:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8008448:	f107 030f 	add.w	r3, r7, #15
 800844c:	4618      	mov	r0, r3
 800844e:	f04f 0124 	mov.w	r1, #36	; 0x24
 8008452:	f04f 0201 	mov.w	r2, #1
 8008456:	f000 f817 	bl	8008488 <L3GD20_Write>
}
 800845a:	f107 0710 	add.w	r7, r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop

08008464 <L3GD20_GetDataStatus>:
  * @brief  Get status for L3GD20 data
  * @param  None         
  * @retval Data status in a L3GD20 Data
  */
uint8_t L3GD20_GetDataStatus(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read STATUS_REG register */
  L3GD20_Read(&tmpreg, L3GD20_STATUS_REG_ADDR, 1);
 800846a:	f107 0307 	add.w	r3, r7, #7
 800846e:	4618      	mov	r0, r3
 8008470:	f04f 0127 	mov.w	r1, #39	; 0x27
 8008474:	f04f 0201 	mov.w	r2, #1
 8008478:	f000 f83e 	bl	80084f8 <L3GD20_Read>
                  
  return tmpreg;
 800847c:	79fb      	ldrb	r3, [r7, #7]
}
 800847e:	4618      	mov	r0, r3
 8008480:	f107 0708 	add.w	r7, r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <L3GD20_Write>:
  * @param  WriteAddr : L3GD20's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void L3GD20_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	4613      	mov	r3, r2
 8008492:	460a      	mov	r2, r1
 8008494:	70fa      	strb	r2, [r7, #3]
 8008496:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8008498:	883b      	ldrh	r3, [r7, #0]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d903      	bls.n	80084a6 <L3GD20_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 80084a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80084aa:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80084ae:	f04f 0108 	mov.w	r1, #8
 80084b2:	f7fb f86f 	bl	8003594 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 f93f 	bl	800873c <L3GD20_SendByte>
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80084be:	e00c      	b.n	80084da <L3GD20_Write+0x52>
  {
    L3GD20_SendByte(*pBuffer);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 f939 	bl	800873c <L3GD20_SendByte>
    NumByteToWrite--;
 80084ca:	883b      	ldrh	r3, [r7, #0]
 80084cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80084d0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f103 0301 	add.w	r3, r3, #1
 80084d8:	607b      	str	r3, [r7, #4]
  L3GD20_CS_LOW();
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80084da:	883b      	ldrh	r3, [r7, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1ef      	bne.n	80084c0 <L3GD20_Write+0x38>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 80084e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80084e4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80084e8:	f04f 0108 	mov.w	r1, #8
 80084ec:	f7fb f844 	bl	8003578 <GPIO_SetBits>
}
 80084f0:	f107 0708 	add.w	r7, r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <L3GD20_Read>:
  * @param  ReadAddr : L3GD20's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the L3GD20.
  * @retval None
  */
void L3GD20_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	460a      	mov	r2, r1
 8008504:	70fa      	strb	r2, [r7, #3]
 8008506:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8008508:	883b      	ldrh	r3, [r7, #0]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d904      	bls.n	8008518 <L3GD20_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008514:	70fb      	strb	r3, [r7, #3]
 8008516:	e003      	b.n	8008520 <L3GD20_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800851e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 8008520:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008524:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8008528:	f04f 0108 	mov.w	r1, #8
 800852c:	f7fb f832 	bl	8003594 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f902 	bl	800873c <L3GD20_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8008538:	e00f      	b.n	800855a <L3GD20_Read+0x62>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to L3GD20 (Slave device) */
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 800853a:	f04f 0000 	mov.w	r0, #0
 800853e:	f000 f8fd 	bl	800873c <L3GD20_SendByte>
 8008542:	4603      	mov	r3, r0
 8008544:	461a      	mov	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800854a:	883b      	ldrh	r3, [r7, #0]
 800854c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008550:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f103 0301 	add.w	r3, r3, #1
 8008558:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800855a:	883b      	ldrh	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1ec      	bne.n	800853a <L3GD20_Read+0x42>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 8008560:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008564:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8008568:	f04f 0108 	mov.w	r1, #8
 800856c:	f7fb f804 	bl	8003578 <GPIO_SetBits>
}  
 8008570:	f107 0708 	add.w	r7, r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <L3GD20_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the L3GD20
  * @param  None
  * @retval None
  */
static void L3GD20_LowLevel_Init(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(L3GD20_SPI_CLK, ENABLE);
 800857e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008582:	f04f 0101 	mov.w	r1, #1
 8008586:	f7fc f80b 	bl	80045a0 <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_SCK_GPIO_CLK | L3GD20_SPI_MISO_GPIO_CLK | L3GD20_SPI_MOSI_GPIO_CLK, ENABLE);
 800858a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800858e:	f04f 0101 	mov.w	r1, #1
 8008592:	f7fb ffdb 	bl	800454c <RCC_AHBPeriphClockCmd>

  /* Enable CS  GPIO clock */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_CS_GPIO_CLK, ENABLE);
 8008596:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800859a:	f04f 0101 	mov.w	r1, #1
 800859e:	f7fb ffd5 	bl	800454c <RCC_AHBPeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_INT1_GPIO_CLK, ENABLE);
 80085a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80085a6:	f04f 0101 	mov.w	r1, #1
 80085aa:	f7fb ffcf 	bl	800454c <RCC_AHBPeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_INT2_GPIO_CLK, ENABLE);
 80085ae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80085b2:	f04f 0101 	mov.w	r1, #1
 80085b6:	f7fb ffc9 	bl	800454c <RCC_AHBPeriphClockCmd>

  GPIO_PinAFConfig(L3GD20_SPI_SCK_GPIO_PORT, L3GD20_SPI_SCK_SOURCE, L3GD20_SPI_SCK_AF);
 80085ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085be:	f04f 0105 	mov.w	r1, #5
 80085c2:	f04f 0205 	mov.w	r2, #5
 80085c6:	f7fb f819 	bl	80035fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MISO_GPIO_PORT, L3GD20_SPI_MISO_SOURCE, L3GD20_SPI_MISO_AF);
 80085ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085ce:	f04f 0106 	mov.w	r1, #6
 80085d2:	f04f 0205 	mov.w	r2, #5
 80085d6:	f7fb f811 	bl	80035fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MOSI_GPIO_PORT, L3GD20_SPI_MOSI_SOURCE, L3GD20_SPI_MOSI_AF);
 80085da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085de:	f04f 0107 	mov.w	r1, #7
 80085e2:	f04f 0205 	mov.w	r2, #5
 80085e6:	f7fb f809 	bl	80035fc <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80085ea:	f04f 0302 	mov.w	r3, #2
 80085ee:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;//GPIO_PuPd_DOWN;
 80085f6:	f04f 0300 	mov.w	r3, #0
 80085fa:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80085fc:	f04f 0303 	mov.w	r3, #3
 8008600:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_SCK_PIN;
 8008602:	f04f 0320 	mov.w	r3, #32
 8008606:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8008608:	f107 0318 	add.w	r3, r7, #24
 800860c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008610:	4619      	mov	r1, r3
 8008612:	f7fa fe6d 	bl	80032f0 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  L3GD20_SPI_MOSI_PIN;
 8008616:	f04f 0380 	mov.w	r3, #128	; 0x80
 800861a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800861c:	f107 0318 	add.w	r3, r7, #24
 8008620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008624:	4619      	mov	r1, r3
 8008626:	f7fa fe63 	bl	80032f0 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_MISO_PIN;
 800862a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800862e:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8008630:	f107 0318 	add.w	r3, r7, #24
 8008634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008638:	4619      	mov	r1, r3
 800863a:	f7fa fe59 	bl	80032f0 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(L3GD20_SPI);
 800863e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8008642:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8008646:	f7fc f941 	bl	80048cc <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8008650:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008654:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8008656:	f04f 0300 	mov.w	r3, #0
 800865a:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8008662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008666:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8008668:	f04f 0310 	mov.w	r3, #16
 800866c:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800866e:	f04f 0300 	mov.w	r3, #0
 8008672:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8008674:	f04f 0307 	mov.w	r3, #7
 8008678:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800867a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800867e:	80fb      	strh	r3, [r7, #6]
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 8008680:	f107 0304 	add.w	r3, r7, #4
 8008684:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8008688:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800868c:	4619      	mov	r1, r3
 800868e:	f7fc f98f 	bl	80049b0 <SPI_Init>

  /* Configure the RX FIFO Threshold */
  SPI_RxFIFOThresholdConfig(L3GD20_SPI, SPI_RxFIFOThreshold_QF);
 8008692:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8008696:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800869a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800869e:	f7fc fb87 	bl	8004db0 <SPI_RxFIFOThresholdConfig>
  /* Enable SPI1  */
  SPI_Cmd(L3GD20_SPI, ENABLE);
 80086a2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80086a6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80086aa:	f04f 0101 	mov.w	r1, #1
 80086ae:	f7fc fb03 	bl	8004cb8 <SPI_Cmd>

  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_CS_PIN;
 80086b2:	f04f 0308 	mov.w	r3, #8
 80086b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80086b8:	f04f 0301 	mov.w	r3, #1
 80086bc:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80086be:	f04f 0300 	mov.w	r3, #0
 80086c2:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80086c4:	f04f 0303 	mov.w	r3, #3
 80086c8:	777b      	strb	r3, [r7, #29]
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 80086ca:	f107 0318 	add.w	r3, r7, #24
 80086ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80086d2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80086d6:	4619      	mov	r1, r3
 80086d8:	f7fa fe0a 	bl	80032f0 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(L3GD20_SPI_CS_GPIO_PORT, L3GD20_SPI_CS_PIN);
 80086dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80086e0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80086e4:	f04f 0108 	mov.w	r1, #8
 80086e8:	f7fa ff46 	bl	8003578 <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT1_PIN;
 80086ec:	f04f 0301 	mov.w	r3, #1
 80086f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80086f2:	f04f 0300 	mov.w	r3, #0
 80086f6:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80086f8:	f04f 0300 	mov.w	r3, #0
 80086fc:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80086fe:	f04f 0303 	mov.w	r3, #3
 8008702:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8008704:	f04f 0300 	mov.w	r3, #0
 8008708:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 800870a:	f107 0318 	add.w	r3, r7, #24
 800870e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008712:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8008716:	4619      	mov	r1, r3
 8008718:	f7fa fdea 	bl	80032f0 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
 800871c:	f04f 0302 	mov.w	r3, #2
 8008720:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 8008722:	f107 0318 	add.w	r3, r7, #24
 8008726:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800872a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800872e:	4619      	mov	r1, r3
 8008730:	f7fa fdde 	bl	80032f0 <GPIO_Init>
}  
 8008734:	f107 0720 	add.w	r7, r7, #32
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <L3GD20_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 8008746:	f240 034c 	movw	r3, #76	; 0x4c
 800874a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800874e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008752:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8008754:	e017      	b.n	8008786 <L3GD20_SendByte+0x4a>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 8008756:	f240 034c 	movw	r3, #76	; 0x4c
 800875a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	bf14      	ite	ne
 8008764:	2200      	movne	r2, #0
 8008766:	2201      	moveq	r2, #1
 8008768:	b2d2      	uxtb	r2, r2
 800876a:	f103 31ff 	add.w	r1, r3, #4294967295
 800876e:	f240 034c 	movw	r3, #76	; 0x4c
 8008772:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008776:	6019      	str	r1, [r3, #0]
 8008778:	2a00      	cmp	r2, #0
 800877a:	d004      	beq.n	8008786 <L3GD20_SendByte+0x4a>
 800877c:	f7f8 f9d8 	bl	8000b30 <L3GD20_TIMEOUT_UserCallback>
 8008780:	4603      	mov	r3, r0
 8008782:	b2db      	uxtb	r3, r3
 8008784:	e044      	b.n	8008810 <L3GD20_SendByte+0xd4>
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8008786:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800878a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800878e:	f04f 0102 	mov.w	r1, #2
 8008792:	f7fc fd53 	bl	800523c <SPI_I2S_GetFlagStatus>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0dc      	beq.n	8008756 <L3GD20_SendByte+0x1a>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_SendData8(L3GD20_SPI, byte);
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80087a2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80087a6:	4619      	mov	r1, r3
 80087a8:	f7fc fbf2 	bl	8004f90 <SPI_SendData8>
  
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80087ac:	f240 034c 	movw	r3, #76	; 0x4c
 80087b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80087b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80087b8:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 80087ba:	e017      	b.n	80087ec <L3GD20_SendByte+0xb0>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 80087bc:	f240 034c 	movw	r3, #76	; 0x4c
 80087c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	bf14      	ite	ne
 80087ca:	2200      	movne	r2, #0
 80087cc:	2201      	moveq	r2, #1
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	f103 31ff 	add.w	r1, r3, #4294967295
 80087d4:	f240 034c 	movw	r3, #76	; 0x4c
 80087d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80087dc:	6019      	str	r1, [r3, #0]
 80087de:	2a00      	cmp	r2, #0
 80087e0:	d004      	beq.n	80087ec <L3GD20_SendByte+0xb0>
 80087e2:	f7f8 f9a5 	bl	8000b30 <L3GD20_TIMEOUT_UserCallback>
 80087e6:	4603      	mov	r3, r0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	e011      	b.n	8008810 <L3GD20_SendByte+0xd4>
  /* Send a Byte through the SPI peripheral */
  SPI_SendData8(L3GD20_SPI, byte);
  
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 80087ec:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80087f0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80087f4:	f04f 0101 	mov.w	r1, #1
 80087f8:	f7fc fd20 	bl	800523c <SPI_I2S_GetFlagStatus>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0dc      	beq.n	80087bc <L3GD20_SendByte+0x80>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_ReceiveData8(L3GD20_SPI);
 8008802:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8008806:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800880a:	f7fc fbe7 	bl	8004fdc <SPI_ReceiveData8>
 800880e:	4603      	mov	r3, r0
}
 8008810:	4618      	mov	r0, r3
 8008812:	f107 0708 	add.w	r7, r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop

0800881c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008820:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8008824:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8008828:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800882c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8008830:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008834:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800883c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008840:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008848:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8008854:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008858:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800885c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008860:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008864:	6859      	ldr	r1, [r3, #4]
 8008866:	f24c 030c 	movw	r3, #49164	; 0xc00c
 800886a:	f6cf 037f 	movt	r3, #63615	; 0xf87f
 800886e:	400b      	ands	r3, r1
 8008870:	6053      	str	r3, [r2, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008876:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800887a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800887e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008882:	6812      	ldr	r2, [r2, #0]
 8008884:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008888:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800888c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800888e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008892:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008896:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800889a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800889e:	6812      	ldr	r2, [r2, #0]
 80088a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088a4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80088a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80088b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80088b6:	6852      	ldr	r2, [r2, #4]
 80088b8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80088bc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80088be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80088ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80088ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80088d0:	f022 020f 	bic.w	r2, r2, #15
 80088d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80088d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80088da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80088de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80088e8:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 80088ec:	f6cf 7300 	movt	r3, #65280	; 0xff00
 80088f0:	400b      	ands	r3, r1
 80088f2:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80088f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8008902:	f000 f8a7 	bl	8008a54 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008906:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800890a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800890e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008912:	609a      	str	r2, [r3, #8]
#endif  
}
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop

08008918 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 800891e:	f04f 0300 	mov.w	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	f04f 0300 	mov.w	r3, #0
 8008928:	60bb      	str	r3, [r7, #8]
 800892a:	f04f 0300 	mov.w	r3, #0
 800892e:	607b      	str	r3, [r7, #4]
 8008930:	f04f 0300 	mov.w	r3, #0
 8008934:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8008936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800893a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f003 030c 	and.w	r3, r3, #12
 8008944:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b04      	cmp	r3, #4
 800894a:	d00d      	beq.n	8008968 <SystemCoreClockUpdate+0x50>
 800894c:	2b08      	cmp	r3, #8
 800894e:	d015      	beq.n	800897c <SystemCoreClockUpdate+0x64>
 8008950:	2b00      	cmp	r3, #0
 8008952:	d153      	bne.n	80089fc <SystemCoreClockUpdate+0xe4>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8008954:	f240 0350 	movw	r3, #80	; 0x50
 8008958:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800895c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8008960:	f2c0 027a 	movt	r2, #122	; 0x7a
 8008964:	601a      	str	r2, [r3, #0]
      break;
 8008966:	e053      	b.n	8008a10 <SystemCoreClockUpdate+0xf8>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8008968:	f240 0350 	movw	r3, #80	; 0x50
 800896c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008970:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8008974:	f2c0 027a 	movt	r2, #122	; 0x7a
 8008978:	601a      	str	r2, [r3, #0]
      break;
 800897a:	e049      	b.n	8008a10 <SystemCoreClockUpdate+0xf8>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800897c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008980:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800898a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800898c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008990:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800899a:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	ea4f 4393 	mov.w	r3, r3, lsr #18
 80089a2:	f103 0302 	add.w	r3, r3, #2
 80089a6:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10c      	bne.n	80089c8 <SystemCoreClockUpdate+0xb0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80089b4:	f2c0 033d 	movt	r3, #61	; 0x3d
 80089b8:	fb03 f202 	mul.w	r2, r3, r2
 80089bc:	f240 0350 	movw	r3, #80	; 0x50
 80089c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80089c4:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 80089c6:	e023      	b.n	8008a10 <SystemCoreClockUpdate+0xf8>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80089c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	f103 0301 	add.w	r3, r3, #1
 80089da:	603b      	str	r3, [r7, #0]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80089dc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80089e0:	f2c0 037a 	movt	r3, #122	; 0x7a
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	fb02 f203 	mul.w	r2, r2, r3
 80089f0:	f240 0350 	movw	r3, #80	; 0x50
 80089f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80089f8:	601a      	str	r2, [r3, #0]
      }      
      break;
 80089fa:	e009      	b.n	8008a10 <SystemCoreClockUpdate+0xf8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80089fc:	f240 0350 	movw	r3, #80	; 0x50
 8008a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a04:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8008a08:	f2c0 027a 	movt	r2, #122	; 0x7a
 8008a0c:	601a      	str	r2, [r3, #0]
      break;
 8008a0e:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8008a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a1e:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8008a22:	f240 0354 	movw	r3, #84	; 0x54
 8008a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a2a:	5c9b      	ldrb	r3, [r3, r2]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8008a30:	f240 0350 	movw	r3, #80	; 0x50
 8008a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	fa22 f203 	lsr.w	r2, r2, r3
 8008a40:	f240 0350 	movw	r3, #80	; 0x50
 8008a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a48:	601a      	str	r2, [r3, #0]
}
 8008a4a:	f107 0714 	add.w	r7, r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bc80      	pop	{r7}
 8008a52:	4770      	bx	lr

08008a54 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8008a5a:	f04f 0300 	mov.w	r3, #0
 8008a5e:	607b      	str	r3, [r7, #4]
 8008a60:	f04f 0300 	mov.w	r3, #0
 8008a64:	603b      	str	r3, [r7, #0]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8008a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a76:	6812      	ldr	r2, [r2, #0]
 8008a78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008a7c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8008a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a8c:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f103 0301 	add.w	r3, r3, #1
 8008a94:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d103      	bne.n	8008aa4 <SetSysClock+0x50>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008aa2:	d1ec      	bne.n	8008a7e <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8008aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aa8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8008ab6:	f04f 0301 	mov.w	r3, #1
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	e002      	b.n	8008ac4 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8008abe:	f04f 0300 	mov.w	r3, #0
 8008ac2:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d176      	bne.n	8008bb8 <SetSysClock+0x164>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8008aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ace:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ad2:	f04f 0212 	mov.w	r2, #18
 8008ad6:	601a      	str	r2, [r3, #0]
 
     /* HCLK = SYSCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8008ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008adc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ae4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ae8:	6852      	ldr	r2, [r2, #4]
 8008aea:	605a      	str	r2, [r3, #4]
       
     /* PCLK2 = HCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8008aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008af0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008af8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008afc:	6852      	ldr	r2, [r2, #4]
 8008afe:	605a      	str	r2, [r3, #4]
     
     /* PCLK1 = HCLK / 2 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8008b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b10:	6852      	ldr	r2, [r2, #4]
 8008b12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b16:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8008b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b28:	6852      	ldr	r2, [r2, #4]
 8008b2a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8008b2e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL9);
 8008b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b40:	6852      	ldr	r2, [r2, #4]
 8008b42:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8008b46:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8008b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b58:	6812      	ldr	r2, [r2, #0]
 8008b5a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008b5e:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8008b60:	bf00      	nop
 8008b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0f6      	beq.n	8008b62 <SetSysClock+0x10e>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8008b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b84:	6852      	ldr	r2, [r2, #4]
 8008b86:	f022 0203 	bic.w	r2, r2, #3
 8008b8a:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8008b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b98:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b9c:	6852      	ldr	r2, [r2, #4]
 8008b9e:	f042 0202 	orr.w	r2, r2, #2
 8008ba2:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8008ba4:	bf00      	nop
 8008ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008baa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f003 030c 	and.w	r3, r3, #12
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d1f6      	bne.n	8008ba6 <SetSysClock+0x152>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8008bb8:	f107 070c 	add.w	r7, r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bc80      	pop	{r7}
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop

08008bc4 <__aeabi_drsub>:
 8008bc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008bc8:	e002      	b.n	8008bd0 <__adddf3>
 8008bca:	bf00      	nop

08008bcc <__aeabi_dsub>:
 8008bcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008bd0 <__adddf3>:
 8008bd0:	b530      	push	{r4, r5, lr}
 8008bd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008bd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008bda:	ea94 0f05 	teq	r4, r5
 8008bde:	bf08      	it	eq
 8008be0:	ea90 0f02 	teqeq	r0, r2
 8008be4:	bf1f      	itttt	ne
 8008be6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008bea:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008bee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008bf2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008bf6:	f000 80e2 	beq.w	8008dbe <__adddf3+0x1ee>
 8008bfa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008bfe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008c02:	bfb8      	it	lt
 8008c04:	426d      	neglt	r5, r5
 8008c06:	dd0c      	ble.n	8008c22 <__adddf3+0x52>
 8008c08:	442c      	add	r4, r5
 8008c0a:	ea80 0202 	eor.w	r2, r0, r2
 8008c0e:	ea81 0303 	eor.w	r3, r1, r3
 8008c12:	ea82 0000 	eor.w	r0, r2, r0
 8008c16:	ea83 0101 	eor.w	r1, r3, r1
 8008c1a:	ea80 0202 	eor.w	r2, r0, r2
 8008c1e:	ea81 0303 	eor.w	r3, r1, r3
 8008c22:	2d36      	cmp	r5, #54	; 0x36
 8008c24:	bf88      	it	hi
 8008c26:	bd30      	pophi	{r4, r5, pc}
 8008c28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008c2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008c30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008c34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008c38:	d002      	beq.n	8008c40 <__adddf3+0x70>
 8008c3a:	4240      	negs	r0, r0
 8008c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008c40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008c44:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008c48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008c4c:	d002      	beq.n	8008c54 <__adddf3+0x84>
 8008c4e:	4252      	negs	r2, r2
 8008c50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008c54:	ea94 0f05 	teq	r4, r5
 8008c58:	f000 80a7 	beq.w	8008daa <__adddf3+0x1da>
 8008c5c:	f1a4 0401 	sub.w	r4, r4, #1
 8008c60:	f1d5 0e20 	rsbs	lr, r5, #32
 8008c64:	db0d      	blt.n	8008c82 <__adddf3+0xb2>
 8008c66:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008c6a:	fa22 f205 	lsr.w	r2, r2, r5
 8008c6e:	1880      	adds	r0, r0, r2
 8008c70:	f141 0100 	adc.w	r1, r1, #0
 8008c74:	fa03 f20e 	lsl.w	r2, r3, lr
 8008c78:	1880      	adds	r0, r0, r2
 8008c7a:	fa43 f305 	asr.w	r3, r3, r5
 8008c7e:	4159      	adcs	r1, r3
 8008c80:	e00e      	b.n	8008ca0 <__adddf3+0xd0>
 8008c82:	f1a5 0520 	sub.w	r5, r5, #32
 8008c86:	f10e 0e20 	add.w	lr, lr, #32
 8008c8a:	2a01      	cmp	r2, #1
 8008c8c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008c90:	bf28      	it	cs
 8008c92:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008c96:	fa43 f305 	asr.w	r3, r3, r5
 8008c9a:	18c0      	adds	r0, r0, r3
 8008c9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008ca0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008ca4:	d507      	bpl.n	8008cb6 <__adddf3+0xe6>
 8008ca6:	f04f 0e00 	mov.w	lr, #0
 8008caa:	f1dc 0c00 	rsbs	ip, ip, #0
 8008cae:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008cb2:	eb6e 0101 	sbc.w	r1, lr, r1
 8008cb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008cba:	d31b      	bcc.n	8008cf4 <__adddf3+0x124>
 8008cbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008cc0:	d30c      	bcc.n	8008cdc <__adddf3+0x10c>
 8008cc2:	0849      	lsrs	r1, r1, #1
 8008cc4:	ea5f 0030 	movs.w	r0, r0, rrx
 8008cc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008ccc:	f104 0401 	add.w	r4, r4, #1
 8008cd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008cd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008cd8:	f080 809a 	bcs.w	8008e10 <__adddf3+0x240>
 8008cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008ce0:	bf08      	it	eq
 8008ce2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008ce6:	f150 0000 	adcs.w	r0, r0, #0
 8008cea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008cee:	ea41 0105 	orr.w	r1, r1, r5
 8008cf2:	bd30      	pop	{r4, r5, pc}
 8008cf4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008cf8:	4140      	adcs	r0, r0
 8008cfa:	eb41 0101 	adc.w	r1, r1, r1
 8008cfe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d02:	f1a4 0401 	sub.w	r4, r4, #1
 8008d06:	d1e9      	bne.n	8008cdc <__adddf3+0x10c>
 8008d08:	f091 0f00 	teq	r1, #0
 8008d0c:	bf04      	itt	eq
 8008d0e:	4601      	moveq	r1, r0
 8008d10:	2000      	moveq	r0, #0
 8008d12:	fab1 f381 	clz	r3, r1
 8008d16:	bf08      	it	eq
 8008d18:	3320      	addeq	r3, #32
 8008d1a:	f1a3 030b 	sub.w	r3, r3, #11
 8008d1e:	f1b3 0220 	subs.w	r2, r3, #32
 8008d22:	da0c      	bge.n	8008d3e <__adddf3+0x16e>
 8008d24:	320c      	adds	r2, #12
 8008d26:	dd08      	ble.n	8008d3a <__adddf3+0x16a>
 8008d28:	f102 0c14 	add.w	ip, r2, #20
 8008d2c:	f1c2 020c 	rsb	r2, r2, #12
 8008d30:	fa01 f00c 	lsl.w	r0, r1, ip
 8008d34:	fa21 f102 	lsr.w	r1, r1, r2
 8008d38:	e00c      	b.n	8008d54 <__adddf3+0x184>
 8008d3a:	f102 0214 	add.w	r2, r2, #20
 8008d3e:	bfd8      	it	le
 8008d40:	f1c2 0c20 	rsble	ip, r2, #32
 8008d44:	fa01 f102 	lsl.w	r1, r1, r2
 8008d48:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008d4c:	bfdc      	itt	le
 8008d4e:	ea41 010c 	orrle.w	r1, r1, ip
 8008d52:	4090      	lslle	r0, r2
 8008d54:	1ae4      	subs	r4, r4, r3
 8008d56:	bfa2      	ittt	ge
 8008d58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008d5c:	4329      	orrge	r1, r5
 8008d5e:	bd30      	popge	{r4, r5, pc}
 8008d60:	ea6f 0404 	mvn.w	r4, r4
 8008d64:	3c1f      	subs	r4, #31
 8008d66:	da1c      	bge.n	8008da2 <__adddf3+0x1d2>
 8008d68:	340c      	adds	r4, #12
 8008d6a:	dc0e      	bgt.n	8008d8a <__adddf3+0x1ba>
 8008d6c:	f104 0414 	add.w	r4, r4, #20
 8008d70:	f1c4 0220 	rsb	r2, r4, #32
 8008d74:	fa20 f004 	lsr.w	r0, r0, r4
 8008d78:	fa01 f302 	lsl.w	r3, r1, r2
 8008d7c:	ea40 0003 	orr.w	r0, r0, r3
 8008d80:	fa21 f304 	lsr.w	r3, r1, r4
 8008d84:	ea45 0103 	orr.w	r1, r5, r3
 8008d88:	bd30      	pop	{r4, r5, pc}
 8008d8a:	f1c4 040c 	rsb	r4, r4, #12
 8008d8e:	f1c4 0220 	rsb	r2, r4, #32
 8008d92:	fa20 f002 	lsr.w	r0, r0, r2
 8008d96:	fa01 f304 	lsl.w	r3, r1, r4
 8008d9a:	ea40 0003 	orr.w	r0, r0, r3
 8008d9e:	4629      	mov	r1, r5
 8008da0:	bd30      	pop	{r4, r5, pc}
 8008da2:	fa21 f004 	lsr.w	r0, r1, r4
 8008da6:	4629      	mov	r1, r5
 8008da8:	bd30      	pop	{r4, r5, pc}
 8008daa:	f094 0f00 	teq	r4, #0
 8008dae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008db2:	bf06      	itte	eq
 8008db4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008db8:	3401      	addeq	r4, #1
 8008dba:	3d01      	subne	r5, #1
 8008dbc:	e74e      	b.n	8008c5c <__adddf3+0x8c>
 8008dbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008dc2:	bf18      	it	ne
 8008dc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008dc8:	d029      	beq.n	8008e1e <__adddf3+0x24e>
 8008dca:	ea94 0f05 	teq	r4, r5
 8008dce:	bf08      	it	eq
 8008dd0:	ea90 0f02 	teqeq	r0, r2
 8008dd4:	d005      	beq.n	8008de2 <__adddf3+0x212>
 8008dd6:	ea54 0c00 	orrs.w	ip, r4, r0
 8008dda:	bf04      	itt	eq
 8008ddc:	4619      	moveq	r1, r3
 8008dde:	4610      	moveq	r0, r2
 8008de0:	bd30      	pop	{r4, r5, pc}
 8008de2:	ea91 0f03 	teq	r1, r3
 8008de6:	bf1e      	ittt	ne
 8008de8:	2100      	movne	r1, #0
 8008dea:	2000      	movne	r0, #0
 8008dec:	bd30      	popne	{r4, r5, pc}
 8008dee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008df2:	d105      	bne.n	8008e00 <__adddf3+0x230>
 8008df4:	0040      	lsls	r0, r0, #1
 8008df6:	4149      	adcs	r1, r1
 8008df8:	bf28      	it	cs
 8008dfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008dfe:	bd30      	pop	{r4, r5, pc}
 8008e00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008e04:	bf3c      	itt	cc
 8008e06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008e0a:	bd30      	popcc	{r4, r5, pc}
 8008e0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008e10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008e14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e18:	f04f 0000 	mov.w	r0, #0
 8008e1c:	bd30      	pop	{r4, r5, pc}
 8008e1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008e22:	bf1a      	itte	ne
 8008e24:	4619      	movne	r1, r3
 8008e26:	4610      	movne	r0, r2
 8008e28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008e2c:	bf1c      	itt	ne
 8008e2e:	460b      	movne	r3, r1
 8008e30:	4602      	movne	r2, r0
 8008e32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008e36:	bf06      	itte	eq
 8008e38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008e3c:	ea91 0f03 	teqeq	r1, r3
 8008e40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008e44:	bd30      	pop	{r4, r5, pc}
 8008e46:	bf00      	nop

08008e48 <__aeabi_ui2d>:
 8008e48:	f090 0f00 	teq	r0, #0
 8008e4c:	bf04      	itt	eq
 8008e4e:	2100      	moveq	r1, #0
 8008e50:	4770      	bxeq	lr
 8008e52:	b530      	push	{r4, r5, lr}
 8008e54:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008e58:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008e5c:	f04f 0500 	mov.w	r5, #0
 8008e60:	f04f 0100 	mov.w	r1, #0
 8008e64:	e750      	b.n	8008d08 <__adddf3+0x138>
 8008e66:	bf00      	nop

08008e68 <__aeabi_i2d>:
 8008e68:	f090 0f00 	teq	r0, #0
 8008e6c:	bf04      	itt	eq
 8008e6e:	2100      	moveq	r1, #0
 8008e70:	4770      	bxeq	lr
 8008e72:	b530      	push	{r4, r5, lr}
 8008e74:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008e78:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008e7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008e80:	bf48      	it	mi
 8008e82:	4240      	negmi	r0, r0
 8008e84:	f04f 0100 	mov.w	r1, #0
 8008e88:	e73e      	b.n	8008d08 <__adddf3+0x138>
 8008e8a:	bf00      	nop

08008e8c <__aeabi_f2d>:
 8008e8c:	0042      	lsls	r2, r0, #1
 8008e8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008e92:	ea4f 0131 	mov.w	r1, r1, rrx
 8008e96:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008e9a:	bf1f      	itttt	ne
 8008e9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008ea0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008ea4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008ea8:	4770      	bxne	lr
 8008eaa:	f092 0f00 	teq	r2, #0
 8008eae:	bf14      	ite	ne
 8008eb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008eb4:	4770      	bxeq	lr
 8008eb6:	b530      	push	{r4, r5, lr}
 8008eb8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008ebc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008ec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ec4:	e720      	b.n	8008d08 <__adddf3+0x138>
 8008ec6:	bf00      	nop

08008ec8 <__aeabi_ul2d>:
 8008ec8:	ea50 0201 	orrs.w	r2, r0, r1
 8008ecc:	bf08      	it	eq
 8008ece:	4770      	bxeq	lr
 8008ed0:	b530      	push	{r4, r5, lr}
 8008ed2:	f04f 0500 	mov.w	r5, #0
 8008ed6:	e00a      	b.n	8008eee <__aeabi_l2d+0x16>

08008ed8 <__aeabi_l2d>:
 8008ed8:	ea50 0201 	orrs.w	r2, r0, r1
 8008edc:	bf08      	it	eq
 8008ede:	4770      	bxeq	lr
 8008ee0:	b530      	push	{r4, r5, lr}
 8008ee2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008ee6:	d502      	bpl.n	8008eee <__aeabi_l2d+0x16>
 8008ee8:	4240      	negs	r0, r0
 8008eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008eee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008ef2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008ef6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008efa:	f43f aedc 	beq.w	8008cb6 <__adddf3+0xe6>
 8008efe:	f04f 0203 	mov.w	r2, #3
 8008f02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008f06:	bf18      	it	ne
 8008f08:	3203      	addne	r2, #3
 8008f0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008f0e:	bf18      	it	ne
 8008f10:	3203      	addne	r2, #3
 8008f12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008f16:	f1c2 0320 	rsb	r3, r2, #32
 8008f1a:	fa00 fc03 	lsl.w	ip, r0, r3
 8008f1e:	fa20 f002 	lsr.w	r0, r0, r2
 8008f22:	fa01 fe03 	lsl.w	lr, r1, r3
 8008f26:	ea40 000e 	orr.w	r0, r0, lr
 8008f2a:	fa21 f102 	lsr.w	r1, r1, r2
 8008f2e:	4414      	add	r4, r2
 8008f30:	e6c1      	b.n	8008cb6 <__adddf3+0xe6>
 8008f32:	bf00      	nop

08008f34 <__aeabi_dmul>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008f3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008f3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008f42:	bf1d      	ittte	ne
 8008f44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008f48:	ea94 0f0c 	teqne	r4, ip
 8008f4c:	ea95 0f0c 	teqne	r5, ip
 8008f50:	f000 f8de 	bleq	8009110 <__aeabi_dmul+0x1dc>
 8008f54:	442c      	add	r4, r5
 8008f56:	ea81 0603 	eor.w	r6, r1, r3
 8008f5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008f5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008f62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008f66:	bf18      	it	ne
 8008f68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008f6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f74:	d038      	beq.n	8008fe8 <__aeabi_dmul+0xb4>
 8008f76:	fba0 ce02 	umull	ip, lr, r0, r2
 8008f7a:	f04f 0500 	mov.w	r5, #0
 8008f7e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008f82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008f86:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008f8a:	f04f 0600 	mov.w	r6, #0
 8008f8e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008f92:	f09c 0f00 	teq	ip, #0
 8008f96:	bf18      	it	ne
 8008f98:	f04e 0e01 	orrne.w	lr, lr, #1
 8008f9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008fa0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008fa4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008fa8:	d204      	bcs.n	8008fb4 <__aeabi_dmul+0x80>
 8008faa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008fae:	416d      	adcs	r5, r5
 8008fb0:	eb46 0606 	adc.w	r6, r6, r6
 8008fb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008fb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008fbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008fc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008fc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008fc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008fcc:	bf88      	it	hi
 8008fce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008fd2:	d81e      	bhi.n	8009012 <__aeabi_dmul+0xde>
 8008fd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008fd8:	bf08      	it	eq
 8008fda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008fde:	f150 0000 	adcs.w	r0, r0, #0
 8008fe2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008fec:	ea46 0101 	orr.w	r1, r6, r1
 8008ff0:	ea40 0002 	orr.w	r0, r0, r2
 8008ff4:	ea81 0103 	eor.w	r1, r1, r3
 8008ff8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008ffc:	bfc2      	ittt	gt
 8008ffe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8009002:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009006:	bd70      	popgt	{r4, r5, r6, pc}
 8009008:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800900c:	f04f 0e00 	mov.w	lr, #0
 8009010:	3c01      	subs	r4, #1
 8009012:	f300 80ab 	bgt.w	800916c <__aeabi_dmul+0x238>
 8009016:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800901a:	bfde      	ittt	le
 800901c:	2000      	movle	r0, #0
 800901e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8009022:	bd70      	pople	{r4, r5, r6, pc}
 8009024:	f1c4 0400 	rsb	r4, r4, #0
 8009028:	3c20      	subs	r4, #32
 800902a:	da35      	bge.n	8009098 <__aeabi_dmul+0x164>
 800902c:	340c      	adds	r4, #12
 800902e:	dc1b      	bgt.n	8009068 <__aeabi_dmul+0x134>
 8009030:	f104 0414 	add.w	r4, r4, #20
 8009034:	f1c4 0520 	rsb	r5, r4, #32
 8009038:	fa00 f305 	lsl.w	r3, r0, r5
 800903c:	fa20 f004 	lsr.w	r0, r0, r4
 8009040:	fa01 f205 	lsl.w	r2, r1, r5
 8009044:	ea40 0002 	orr.w	r0, r0, r2
 8009048:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800904c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009050:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009054:	fa21 f604 	lsr.w	r6, r1, r4
 8009058:	eb42 0106 	adc.w	r1, r2, r6
 800905c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009060:	bf08      	it	eq
 8009062:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	f1c4 040c 	rsb	r4, r4, #12
 800906c:	f1c4 0520 	rsb	r5, r4, #32
 8009070:	fa00 f304 	lsl.w	r3, r0, r4
 8009074:	fa20 f005 	lsr.w	r0, r0, r5
 8009078:	fa01 f204 	lsl.w	r2, r1, r4
 800907c:	ea40 0002 	orr.w	r0, r0, r2
 8009080:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009084:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009088:	f141 0100 	adc.w	r1, r1, #0
 800908c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009090:	bf08      	it	eq
 8009092:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	f1c4 0520 	rsb	r5, r4, #32
 800909c:	fa00 f205 	lsl.w	r2, r0, r5
 80090a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80090a4:	fa20 f304 	lsr.w	r3, r0, r4
 80090a8:	fa01 f205 	lsl.w	r2, r1, r5
 80090ac:	ea43 0302 	orr.w	r3, r3, r2
 80090b0:	fa21 f004 	lsr.w	r0, r1, r4
 80090b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80090b8:	fa21 f204 	lsr.w	r2, r1, r4
 80090bc:	ea20 0002 	bic.w	r0, r0, r2
 80090c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80090c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80090c8:	bf08      	it	eq
 80090ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	f094 0f00 	teq	r4, #0
 80090d4:	d10f      	bne.n	80090f6 <__aeabi_dmul+0x1c2>
 80090d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80090da:	0040      	lsls	r0, r0, #1
 80090dc:	eb41 0101 	adc.w	r1, r1, r1
 80090e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80090e4:	bf08      	it	eq
 80090e6:	3c01      	subeq	r4, #1
 80090e8:	d0f7      	beq.n	80090da <__aeabi_dmul+0x1a6>
 80090ea:	ea41 0106 	orr.w	r1, r1, r6
 80090ee:	f095 0f00 	teq	r5, #0
 80090f2:	bf18      	it	ne
 80090f4:	4770      	bxne	lr
 80090f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80090fa:	0052      	lsls	r2, r2, #1
 80090fc:	eb43 0303 	adc.w	r3, r3, r3
 8009100:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009104:	bf08      	it	eq
 8009106:	3d01      	subeq	r5, #1
 8009108:	d0f7      	beq.n	80090fa <__aeabi_dmul+0x1c6>
 800910a:	ea43 0306 	orr.w	r3, r3, r6
 800910e:	4770      	bx	lr
 8009110:	ea94 0f0c 	teq	r4, ip
 8009114:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009118:	bf18      	it	ne
 800911a:	ea95 0f0c 	teqne	r5, ip
 800911e:	d00c      	beq.n	800913a <__aeabi_dmul+0x206>
 8009120:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009124:	bf18      	it	ne
 8009126:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800912a:	d1d1      	bne.n	80090d0 <__aeabi_dmul+0x19c>
 800912c:	ea81 0103 	eor.w	r1, r1, r3
 8009130:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009134:	f04f 0000 	mov.w	r0, #0
 8009138:	bd70      	pop	{r4, r5, r6, pc}
 800913a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800913e:	bf06      	itte	eq
 8009140:	4610      	moveq	r0, r2
 8009142:	4619      	moveq	r1, r3
 8009144:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009148:	d019      	beq.n	800917e <__aeabi_dmul+0x24a>
 800914a:	ea94 0f0c 	teq	r4, ip
 800914e:	d102      	bne.n	8009156 <__aeabi_dmul+0x222>
 8009150:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8009154:	d113      	bne.n	800917e <__aeabi_dmul+0x24a>
 8009156:	ea95 0f0c 	teq	r5, ip
 800915a:	d105      	bne.n	8009168 <__aeabi_dmul+0x234>
 800915c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8009160:	bf1c      	itt	ne
 8009162:	4610      	movne	r0, r2
 8009164:	4619      	movne	r1, r3
 8009166:	d10a      	bne.n	800917e <__aeabi_dmul+0x24a>
 8009168:	ea81 0103 	eor.w	r1, r1, r3
 800916c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009170:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009174:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009178:	f04f 0000 	mov.w	r0, #0
 800917c:	bd70      	pop	{r4, r5, r6, pc}
 800917e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009182:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8009186:	bd70      	pop	{r4, r5, r6, pc}

08009188 <__aeabi_ddiv>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800918e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8009192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009196:	bf1d      	ittte	ne
 8009198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800919c:	ea94 0f0c 	teqne	r4, ip
 80091a0:	ea95 0f0c 	teqne	r5, ip
 80091a4:	f000 f8a7 	bleq	80092f6 <__aeabi_ddiv+0x16e>
 80091a8:	eba4 0405 	sub.w	r4, r4, r5
 80091ac:	ea81 0e03 	eor.w	lr, r1, r3
 80091b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80091b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80091b8:	f000 8088 	beq.w	80092cc <__aeabi_ddiv+0x144>
 80091bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80091c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80091c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80091c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80091cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80091d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80091d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80091d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80091dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80091e0:	429d      	cmp	r5, r3
 80091e2:	bf08      	it	eq
 80091e4:	4296      	cmpeq	r6, r2
 80091e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80091ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80091ee:	d202      	bcs.n	80091f6 <__aeabi_ddiv+0x6e>
 80091f0:	085b      	lsrs	r3, r3, #1
 80091f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80091f6:	1ab6      	subs	r6, r6, r2
 80091f8:	eb65 0503 	sbc.w	r5, r5, r3
 80091fc:	085b      	lsrs	r3, r3, #1
 80091fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8009202:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009206:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800920a:	ebb6 0e02 	subs.w	lr, r6, r2
 800920e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009212:	bf22      	ittt	cs
 8009214:	1ab6      	subcs	r6, r6, r2
 8009216:	4675      	movcs	r5, lr
 8009218:	ea40 000c 	orrcs.w	r0, r0, ip
 800921c:	085b      	lsrs	r3, r3, #1
 800921e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009222:	ebb6 0e02 	subs.w	lr, r6, r2
 8009226:	eb75 0e03 	sbcs.w	lr, r5, r3
 800922a:	bf22      	ittt	cs
 800922c:	1ab6      	subcs	r6, r6, r2
 800922e:	4675      	movcs	r5, lr
 8009230:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8009234:	085b      	lsrs	r3, r3, #1
 8009236:	ea4f 0232 	mov.w	r2, r2, rrx
 800923a:	ebb6 0e02 	subs.w	lr, r6, r2
 800923e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009242:	bf22      	ittt	cs
 8009244:	1ab6      	subcs	r6, r6, r2
 8009246:	4675      	movcs	r5, lr
 8009248:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800924c:	085b      	lsrs	r3, r3, #1
 800924e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009252:	ebb6 0e02 	subs.w	lr, r6, r2
 8009256:	eb75 0e03 	sbcs.w	lr, r5, r3
 800925a:	bf22      	ittt	cs
 800925c:	1ab6      	subcs	r6, r6, r2
 800925e:	4675      	movcs	r5, lr
 8009260:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8009264:	ea55 0e06 	orrs.w	lr, r5, r6
 8009268:	d018      	beq.n	800929c <__aeabi_ddiv+0x114>
 800926a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800926e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8009272:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8009276:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800927a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800927e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8009282:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8009286:	d1c0      	bne.n	800920a <__aeabi_ddiv+0x82>
 8009288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800928c:	d10b      	bne.n	80092a6 <__aeabi_ddiv+0x11e>
 800928e:	ea41 0100 	orr.w	r1, r1, r0
 8009292:	f04f 0000 	mov.w	r0, #0
 8009296:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800929a:	e7b6      	b.n	800920a <__aeabi_ddiv+0x82>
 800929c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80092a0:	bf04      	itt	eq
 80092a2:	4301      	orreq	r1, r0
 80092a4:	2000      	moveq	r0, #0
 80092a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80092aa:	bf88      	it	hi
 80092ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80092b0:	f63f aeaf 	bhi.w	8009012 <__aeabi_dmul+0xde>
 80092b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80092b8:	bf04      	itt	eq
 80092ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80092be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80092c2:	f150 0000 	adcs.w	r0, r0, #0
 80092c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80092d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80092d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80092d8:	bfc2      	ittt	gt
 80092da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80092de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80092e2:	bd70      	popgt	{r4, r5, r6, pc}
 80092e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80092e8:	f04f 0e00 	mov.w	lr, #0
 80092ec:	3c01      	subs	r4, #1
 80092ee:	e690      	b.n	8009012 <__aeabi_dmul+0xde>
 80092f0:	ea45 0e06 	orr.w	lr, r5, r6
 80092f4:	e68d      	b.n	8009012 <__aeabi_dmul+0xde>
 80092f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80092fa:	ea94 0f0c 	teq	r4, ip
 80092fe:	bf08      	it	eq
 8009300:	ea95 0f0c 	teqeq	r5, ip
 8009304:	f43f af3b 	beq.w	800917e <__aeabi_dmul+0x24a>
 8009308:	ea94 0f0c 	teq	r4, ip
 800930c:	d10a      	bne.n	8009324 <__aeabi_ddiv+0x19c>
 800930e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8009312:	f47f af34 	bne.w	800917e <__aeabi_dmul+0x24a>
 8009316:	ea95 0f0c 	teq	r5, ip
 800931a:	f47f af25 	bne.w	8009168 <__aeabi_dmul+0x234>
 800931e:	4610      	mov	r0, r2
 8009320:	4619      	mov	r1, r3
 8009322:	e72c      	b.n	800917e <__aeabi_dmul+0x24a>
 8009324:	ea95 0f0c 	teq	r5, ip
 8009328:	d106      	bne.n	8009338 <__aeabi_ddiv+0x1b0>
 800932a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800932e:	f43f aefd 	beq.w	800912c <__aeabi_dmul+0x1f8>
 8009332:	4610      	mov	r0, r2
 8009334:	4619      	mov	r1, r3
 8009336:	e722      	b.n	800917e <__aeabi_dmul+0x24a>
 8009338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800933c:	bf18      	it	ne
 800933e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009342:	f47f aec5 	bne.w	80090d0 <__aeabi_dmul+0x19c>
 8009346:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800934a:	f47f af0d 	bne.w	8009168 <__aeabi_dmul+0x234>
 800934e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8009352:	f47f aeeb 	bne.w	800912c <__aeabi_dmul+0x1f8>
 8009356:	e712      	b.n	800917e <__aeabi_dmul+0x24a>

08009358 <__gedf2>:
 8009358:	f04f 3cff 	mov.w	ip, #4294967295
 800935c:	e006      	b.n	800936c <__cmpdf2+0x4>
 800935e:	bf00      	nop

08009360 <__ledf2>:
 8009360:	f04f 0c01 	mov.w	ip, #1
 8009364:	e002      	b.n	800936c <__cmpdf2+0x4>
 8009366:	bf00      	nop

08009368 <__cmpdf2>:
 8009368:	f04f 0c01 	mov.w	ip, #1
 800936c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8009370:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009374:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009378:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800937c:	bf18      	it	ne
 800937e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8009382:	d01b      	beq.n	80093bc <__cmpdf2+0x54>
 8009384:	b001      	add	sp, #4
 8009386:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800938a:	bf0c      	ite	eq
 800938c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8009390:	ea91 0f03 	teqne	r1, r3
 8009394:	bf02      	ittt	eq
 8009396:	ea90 0f02 	teqeq	r0, r2
 800939a:	2000      	moveq	r0, #0
 800939c:	4770      	bxeq	lr
 800939e:	f110 0f00 	cmn.w	r0, #0
 80093a2:	ea91 0f03 	teq	r1, r3
 80093a6:	bf58      	it	pl
 80093a8:	4299      	cmppl	r1, r3
 80093aa:	bf08      	it	eq
 80093ac:	4290      	cmpeq	r0, r2
 80093ae:	bf2c      	ite	cs
 80093b0:	17d8      	asrcs	r0, r3, #31
 80093b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80093b6:	f040 0001 	orr.w	r0, r0, #1
 80093ba:	4770      	bx	lr
 80093bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80093c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80093c4:	d102      	bne.n	80093cc <__cmpdf2+0x64>
 80093c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80093ca:	d107      	bne.n	80093dc <__cmpdf2+0x74>
 80093cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80093d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80093d4:	d1d6      	bne.n	8009384 <__cmpdf2+0x1c>
 80093d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80093da:	d0d3      	beq.n	8009384 <__cmpdf2+0x1c>
 80093dc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop

080093e4 <__aeabi_cdrcmple>:
 80093e4:	4684      	mov	ip, r0
 80093e6:	4610      	mov	r0, r2
 80093e8:	4662      	mov	r2, ip
 80093ea:	468c      	mov	ip, r1
 80093ec:	4619      	mov	r1, r3
 80093ee:	4663      	mov	r3, ip
 80093f0:	e000      	b.n	80093f4 <__aeabi_cdcmpeq>
 80093f2:	bf00      	nop

080093f4 <__aeabi_cdcmpeq>:
 80093f4:	b501      	push	{r0, lr}
 80093f6:	f7ff ffb7 	bl	8009368 <__cmpdf2>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	bf48      	it	mi
 80093fe:	f110 0f00 	cmnmi.w	r0, #0
 8009402:	bd01      	pop	{r0, pc}

08009404 <__aeabi_dcmpeq>:
 8009404:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009408:	f7ff fff4 	bl	80093f4 <__aeabi_cdcmpeq>
 800940c:	bf0c      	ite	eq
 800940e:	2001      	moveq	r0, #1
 8009410:	2000      	movne	r0, #0
 8009412:	f85d fb08 	ldr.w	pc, [sp], #8
 8009416:	bf00      	nop

08009418 <__aeabi_dcmplt>:
 8009418:	f84d ed08 	str.w	lr, [sp, #-8]!
 800941c:	f7ff ffea 	bl	80093f4 <__aeabi_cdcmpeq>
 8009420:	bf34      	ite	cc
 8009422:	2001      	movcc	r0, #1
 8009424:	2000      	movcs	r0, #0
 8009426:	f85d fb08 	ldr.w	pc, [sp], #8
 800942a:	bf00      	nop

0800942c <__aeabi_dcmple>:
 800942c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009430:	f7ff ffe0 	bl	80093f4 <__aeabi_cdcmpeq>
 8009434:	bf94      	ite	ls
 8009436:	2001      	movls	r0, #1
 8009438:	2000      	movhi	r0, #0
 800943a:	f85d fb08 	ldr.w	pc, [sp], #8
 800943e:	bf00      	nop

08009440 <__aeabi_dcmpge>:
 8009440:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009444:	f7ff ffce 	bl	80093e4 <__aeabi_cdrcmple>
 8009448:	bf94      	ite	ls
 800944a:	2001      	movls	r0, #1
 800944c:	2000      	movhi	r0, #0
 800944e:	f85d fb08 	ldr.w	pc, [sp], #8
 8009452:	bf00      	nop

08009454 <__aeabi_dcmpgt>:
 8009454:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009458:	f7ff ffc4 	bl	80093e4 <__aeabi_cdrcmple>
 800945c:	bf34      	ite	cc
 800945e:	2001      	movcc	r0, #1
 8009460:	2000      	movcs	r0, #0
 8009462:	f85d fb08 	ldr.w	pc, [sp], #8
 8009466:	bf00      	nop

08009468 <__aeabi_d2iz>:
 8009468:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800946c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8009470:	d215      	bcs.n	800949e <__aeabi_d2iz+0x36>
 8009472:	d511      	bpl.n	8009498 <__aeabi_d2iz+0x30>
 8009474:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8009478:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800947c:	d912      	bls.n	80094a4 <__aeabi_d2iz+0x3c>
 800947e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009486:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800948a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800948e:	fa23 f002 	lsr.w	r0, r3, r2
 8009492:	bf18      	it	ne
 8009494:	4240      	negne	r0, r0
 8009496:	4770      	bx	lr
 8009498:	f04f 0000 	mov.w	r0, #0
 800949c:	4770      	bx	lr
 800949e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80094a2:	d105      	bne.n	80094b0 <__aeabi_d2iz+0x48>
 80094a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80094a8:	bf08      	it	eq
 80094aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80094ae:	4770      	bx	lr
 80094b0:	f04f 0000 	mov.w	r0, #0
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop

080094b8 <__aeabi_uldivmod>:
 80094b8:	b94b      	cbnz	r3, 80094ce <__aeabi_uldivmod+0x16>
 80094ba:	b942      	cbnz	r2, 80094ce <__aeabi_uldivmod+0x16>
 80094bc:	2900      	cmp	r1, #0
 80094be:	bf08      	it	eq
 80094c0:	2800      	cmpeq	r0, #0
 80094c2:	d002      	beq.n	80094ca <__aeabi_uldivmod+0x12>
 80094c4:	f04f 31ff 	mov.w	r1, #4294967295
 80094c8:	4608      	mov	r0, r1
 80094ca:	f000 b837 	b.w	800953c <__aeabi_idiv0>
 80094ce:	b082      	sub	sp, #8
 80094d0:	46ec      	mov	ip, sp
 80094d2:	e92d 5000 	stmdb	sp!, {ip, lr}
 80094d6:	f000 f81b 	bl	8009510 <__gnu_uldivmod_helper>
 80094da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80094de:	b002      	add	sp, #8
 80094e0:	bc0c      	pop	{r2, r3}
 80094e2:	4770      	bx	lr

080094e4 <__gnu_ldivmod_helper>:
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	4616      	mov	r6, r2
 80094e8:	4604      	mov	r4, r0
 80094ea:	460d      	mov	r5, r1
 80094ec:	461f      	mov	r7, r3
 80094ee:	f000 f827 	bl	8009540 <__divdi3>
 80094f2:	fb06 f301 	mul.w	r3, r6, r1
 80094f6:	fb00 3707 	mla	r7, r0, r7, r3
 80094fa:	fba6 2300 	umull	r2, r3, r6, r0
 80094fe:	18fb      	adds	r3, r7, r3
 8009500:	1aa2      	subs	r2, r4, r2
 8009502:	eb65 0303 	sbc.w	r3, r5, r3
 8009506:	9c06      	ldr	r4, [sp, #24]
 8009508:	e9c4 2300 	strd	r2, r3, [r4]
 800950c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800950e:	bf00      	nop

08009510 <__gnu_uldivmod_helper>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	4616      	mov	r6, r2
 8009514:	4604      	mov	r4, r0
 8009516:	460d      	mov	r5, r1
 8009518:	461f      	mov	r7, r3
 800951a:	f000 f96f 	bl	80097fc <__udivdi3>
 800951e:	fb00 f707 	mul.w	r7, r0, r7
 8009522:	fba0 2306 	umull	r2, r3, r0, r6
 8009526:	fb06 7701 	mla	r7, r6, r1, r7
 800952a:	18fb      	adds	r3, r7, r3
 800952c:	1aa2      	subs	r2, r4, r2
 800952e:	eb65 0303 	sbc.w	r3, r5, r3
 8009532:	9c06      	ldr	r4, [sp, #24]
 8009534:	e9c4 2300 	strd	r2, r3, [r4]
 8009538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800953a:	bf00      	nop

0800953c <__aeabi_idiv0>:
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop

08009540 <__divdi3>:
 8009540:	2900      	cmp	r1, #0
 8009542:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009546:	461d      	mov	r5, r3
 8009548:	f2c0 809d 	blt.w	8009686 <__divdi3+0x146>
 800954c:	2400      	movs	r4, #0
 800954e:	2d00      	cmp	r5, #0
 8009550:	f2c0 8094 	blt.w	800967c <__divdi3+0x13c>
 8009554:	4680      	mov	r8, r0
 8009556:	460f      	mov	r7, r1
 8009558:	4694      	mov	ip, r2
 800955a:	461e      	mov	r6, r3
 800955c:	bbe3      	cbnz	r3, 80095d8 <__divdi3+0x98>
 800955e:	428a      	cmp	r2, r1
 8009560:	d955      	bls.n	800960e <__divdi3+0xce>
 8009562:	fab2 f782 	clz	r7, r2
 8009566:	b147      	cbz	r7, 800957a <__divdi3+0x3a>
 8009568:	f1c7 0520 	rsb	r5, r7, #32
 800956c:	fa20 f605 	lsr.w	r6, r0, r5
 8009570:	fa01 f107 	lsl.w	r1, r1, r7
 8009574:	40ba      	lsls	r2, r7
 8009576:	4331      	orrs	r1, r6
 8009578:	40b8      	lsls	r0, r7
 800957a:	0c17      	lsrs	r7, r2, #16
 800957c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009580:	0c03      	lsrs	r3, r0, #16
 8009582:	fa1f fc82 	uxth.w	ip, r2
 8009586:	fb07 1116 	mls	r1, r7, r6, r1
 800958a:	fb0c f506 	mul.w	r5, ip, r6
 800958e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009592:	429d      	cmp	r5, r3
 8009594:	d908      	bls.n	80095a8 <__divdi3+0x68>
 8009596:	1e71      	subs	r1, r6, #1
 8009598:	189b      	adds	r3, r3, r2
 800959a:	f080 8113 	bcs.w	80097c4 <__divdi3+0x284>
 800959e:	429d      	cmp	r5, r3
 80095a0:	f240 8110 	bls.w	80097c4 <__divdi3+0x284>
 80095a4:	3e02      	subs	r6, #2
 80095a6:	189b      	adds	r3, r3, r2
 80095a8:	1b59      	subs	r1, r3, r5
 80095aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80095ae:	fb07 1315 	mls	r3, r7, r5, r1
 80095b2:	b280      	uxth	r0, r0
 80095b4:	fb0c fc05 	mul.w	ip, ip, r5
 80095b8:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 80095bc:	458c      	cmp	ip, r1
 80095be:	d907      	bls.n	80095d0 <__divdi3+0x90>
 80095c0:	1e6b      	subs	r3, r5, #1
 80095c2:	188a      	adds	r2, r1, r2
 80095c4:	f080 8100 	bcs.w	80097c8 <__divdi3+0x288>
 80095c8:	4594      	cmp	ip, r2
 80095ca:	f240 80fd 	bls.w	80097c8 <__divdi3+0x288>
 80095ce:	3d02      	subs	r5, #2
 80095d0:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
 80095d4:	2500      	movs	r5, #0
 80095d6:	e003      	b.n	80095e0 <__divdi3+0xa0>
 80095d8:	428b      	cmp	r3, r1
 80095da:	d90c      	bls.n	80095f6 <__divdi3+0xb6>
 80095dc:	2500      	movs	r5, #0
 80095de:	4629      	mov	r1, r5
 80095e0:	460a      	mov	r2, r1
 80095e2:	462b      	mov	r3, r5
 80095e4:	b114      	cbz	r4, 80095ec <__divdi3+0xac>
 80095e6:	4252      	negs	r2, r2
 80095e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80095ec:	4610      	mov	r0, r2
 80095ee:	4619      	mov	r1, r3
 80095f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80095f4:	4770      	bx	lr
 80095f6:	fab3 f583 	clz	r5, r3
 80095fa:	2d00      	cmp	r5, #0
 80095fc:	f040 8087 	bne.w	800970e <__divdi3+0x1ce>
 8009600:	428b      	cmp	r3, r1
 8009602:	d301      	bcc.n	8009608 <__divdi3+0xc8>
 8009604:	4282      	cmp	r2, r0
 8009606:	d8ea      	bhi.n	80095de <__divdi3+0x9e>
 8009608:	2500      	movs	r5, #0
 800960a:	2101      	movs	r1, #1
 800960c:	e7e8      	b.n	80095e0 <__divdi3+0xa0>
 800960e:	b912      	cbnz	r2, 8009616 <__divdi3+0xd6>
 8009610:	2601      	movs	r6, #1
 8009612:	fbb6 f2f2 	udiv	r2, r6, r2
 8009616:	fab2 f682 	clz	r6, r2
 800961a:	2e00      	cmp	r6, #0
 800961c:	d139      	bne.n	8009692 <__divdi3+0x152>
 800961e:	1a8e      	subs	r6, r1, r2
 8009620:	0c13      	lsrs	r3, r2, #16
 8009622:	fa1f fc82 	uxth.w	ip, r2
 8009626:	2501      	movs	r5, #1
 8009628:	fbb6 f7f3 	udiv	r7, r6, r3
 800962c:	fb03 6117 	mls	r1, r3, r7, r6
 8009630:	ea4f 4910 	mov.w	r9, r0, lsr #16
 8009634:	fb0c f807 	mul.w	r8, ip, r7
 8009638:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
 800963c:	45b0      	cmp	r8, r6
 800963e:	d906      	bls.n	800964e <__divdi3+0x10e>
 8009640:	1e79      	subs	r1, r7, #1
 8009642:	18b6      	adds	r6, r6, r2
 8009644:	d202      	bcs.n	800964c <__divdi3+0x10c>
 8009646:	45b0      	cmp	r8, r6
 8009648:	f200 80d3 	bhi.w	80097f2 <__divdi3+0x2b2>
 800964c:	460f      	mov	r7, r1
 800964e:	ebc8 0606 	rsb	r6, r8, r6
 8009652:	fbb6 f1f3 	udiv	r1, r6, r3
 8009656:	fb03 6311 	mls	r3, r3, r1, r6
 800965a:	b280      	uxth	r0, r0
 800965c:	fb0c fc01 	mul.w	ip, ip, r1
 8009660:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8009664:	459c      	cmp	ip, r3
 8009666:	d906      	bls.n	8009676 <__divdi3+0x136>
 8009668:	1e4e      	subs	r6, r1, #1
 800966a:	189a      	adds	r2, r3, r2
 800966c:	d202      	bcs.n	8009674 <__divdi3+0x134>
 800966e:	4594      	cmp	ip, r2
 8009670:	f200 80c2 	bhi.w	80097f8 <__divdi3+0x2b8>
 8009674:	4631      	mov	r1, r6
 8009676:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800967a:	e7b1      	b.n	80095e0 <__divdi3+0xa0>
 800967c:	43e4      	mvns	r4, r4
 800967e:	4252      	negs	r2, r2
 8009680:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009684:	e766      	b.n	8009554 <__divdi3+0x14>
 8009686:	4240      	negs	r0, r0
 8009688:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800968c:	f04f 34ff 	mov.w	r4, #4294967295
 8009690:	e75d      	b.n	800954e <__divdi3+0xe>
 8009692:	40b2      	lsls	r2, r6
 8009694:	f1c6 0920 	rsb	r9, r6, #32
 8009698:	fa21 f709 	lsr.w	r7, r1, r9
 800969c:	fa20 f509 	lsr.w	r5, r0, r9
 80096a0:	0c13      	lsrs	r3, r2, #16
 80096a2:	fa01 f106 	lsl.w	r1, r1, r6
 80096a6:	fbb7 f8f3 	udiv	r8, r7, r3
 80096aa:	ea45 0901 	orr.w	r9, r5, r1
 80096ae:	fa1f fc82 	uxth.w	ip, r2
 80096b2:	fb03 7718 	mls	r7, r3, r8, r7
 80096b6:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80096ba:	fb0c f508 	mul.w	r5, ip, r8
 80096be:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 80096c2:	40b0      	lsls	r0, r6
 80096c4:	42bd      	cmp	r5, r7
 80096c6:	d90a      	bls.n	80096de <__divdi3+0x19e>
 80096c8:	18bf      	adds	r7, r7, r2
 80096ca:	f108 36ff 	add.w	r6, r8, #4294967295
 80096ce:	f080 808e 	bcs.w	80097ee <__divdi3+0x2ae>
 80096d2:	42bd      	cmp	r5, r7
 80096d4:	f240 808b 	bls.w	80097ee <__divdi3+0x2ae>
 80096d8:	f1a8 0802 	sub.w	r8, r8, #2
 80096dc:	18bf      	adds	r7, r7, r2
 80096de:	1b79      	subs	r1, r7, r5
 80096e0:	fbb1 f5f3 	udiv	r5, r1, r3
 80096e4:	fb03 1715 	mls	r7, r3, r5, r1
 80096e8:	fa1f f989 	uxth.w	r9, r9
 80096ec:	fb0c f605 	mul.w	r6, ip, r5
 80096f0:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
 80096f4:	428e      	cmp	r6, r1
 80096f6:	d906      	bls.n	8009706 <__divdi3+0x1c6>
 80096f8:	1e6f      	subs	r7, r5, #1
 80096fa:	1889      	adds	r1, r1, r2
 80096fc:	d271      	bcs.n	80097e2 <__divdi3+0x2a2>
 80096fe:	428e      	cmp	r6, r1
 8009700:	d96f      	bls.n	80097e2 <__divdi3+0x2a2>
 8009702:	3d02      	subs	r5, #2
 8009704:	1889      	adds	r1, r1, r2
 8009706:	1b8e      	subs	r6, r1, r6
 8009708:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 800970c:	e78c      	b.n	8009628 <__divdi3+0xe8>
 800970e:	f1c5 0120 	rsb	r1, r5, #32
 8009712:	fa22 f301 	lsr.w	r3, r2, r1
 8009716:	fa06 f605 	lsl.w	r6, r6, r5
 800971a:	431e      	orrs	r6, r3
 800971c:	fa27 f201 	lsr.w	r2, r7, r1
 8009720:	ea4f 4916 	mov.w	r9, r6, lsr #16
 8009724:	fa07 f705 	lsl.w	r7, r7, r5
 8009728:	fa20 f101 	lsr.w	r1, r0, r1
 800972c:	fbb2 f8f9 	udiv	r8, r2, r9
 8009730:	430f      	orrs	r7, r1
 8009732:	0c3b      	lsrs	r3, r7, #16
 8009734:	fa1f fa86 	uxth.w	sl, r6
 8009738:	fb09 2218 	mls	r2, r9, r8, r2
 800973c:	fb0a fb08 	mul.w	fp, sl, r8
 8009740:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8009744:	4593      	cmp	fp, r2
 8009746:	fa0c fc05 	lsl.w	ip, ip, r5
 800974a:	d908      	bls.n	800975e <__divdi3+0x21e>
 800974c:	1992      	adds	r2, r2, r6
 800974e:	f108 31ff 	add.w	r1, r8, #4294967295
 8009752:	d24a      	bcs.n	80097ea <__divdi3+0x2aa>
 8009754:	4593      	cmp	fp, r2
 8009756:	d948      	bls.n	80097ea <__divdi3+0x2aa>
 8009758:	f1a8 0802 	sub.w	r8, r8, #2
 800975c:	1992      	adds	r2, r2, r6
 800975e:	ebcb 0302 	rsb	r3, fp, r2
 8009762:	fbb3 f1f9 	udiv	r1, r3, r9
 8009766:	fb09 3211 	mls	r2, r9, r1, r3
 800976a:	b2bf      	uxth	r7, r7
 800976c:	fb0a fa01 	mul.w	sl, sl, r1
 8009770:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
 8009774:	459a      	cmp	sl, r3
 8009776:	d906      	bls.n	8009786 <__divdi3+0x246>
 8009778:	1e4a      	subs	r2, r1, #1
 800977a:	199b      	adds	r3, r3, r6
 800977c:	d233      	bcs.n	80097e6 <__divdi3+0x2a6>
 800977e:	459a      	cmp	sl, r3
 8009780:	d931      	bls.n	80097e6 <__divdi3+0x2a6>
 8009782:	3902      	subs	r1, #2
 8009784:	199b      	adds	r3, r3, r6
 8009786:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800978a:	0c0f      	lsrs	r7, r1, #16
 800978c:	fa1f f88c 	uxth.w	r8, ip
 8009790:	fb08 f607 	mul.w	r6, r8, r7
 8009794:	b28a      	uxth	r2, r1
 8009796:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800979a:	fb08 f802 	mul.w	r8, r8, r2
 800979e:	fb0c 6202 	mla	r2, ip, r2, r6
 80097a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80097a6:	fb0c fc07 	mul.w	ip, ip, r7
 80097aa:	4296      	cmp	r6, r2
 80097ac:	bf88      	it	hi
 80097ae:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
 80097b2:	ebca 0303 	rsb	r3, sl, r3
 80097b6:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
 80097ba:	4563      	cmp	r3, ip
 80097bc:	d30e      	bcc.n	80097dc <__divdi3+0x29c>
 80097be:	d005      	beq.n	80097cc <__divdi3+0x28c>
 80097c0:	2500      	movs	r5, #0
 80097c2:	e70d      	b.n	80095e0 <__divdi3+0xa0>
 80097c4:	460e      	mov	r6, r1
 80097c6:	e6ef      	b.n	80095a8 <__divdi3+0x68>
 80097c8:	461d      	mov	r5, r3
 80097ca:	e701      	b.n	80095d0 <__divdi3+0x90>
 80097cc:	fa1f f888 	uxth.w	r8, r8
 80097d0:	fa00 f005 	lsl.w	r0, r0, r5
 80097d4:	eb08 4502 	add.w	r5, r8, r2, lsl #16
 80097d8:	42a8      	cmp	r0, r5
 80097da:	d2f1      	bcs.n	80097c0 <__divdi3+0x280>
 80097dc:	3901      	subs	r1, #1
 80097de:	2500      	movs	r5, #0
 80097e0:	e6fe      	b.n	80095e0 <__divdi3+0xa0>
 80097e2:	463d      	mov	r5, r7
 80097e4:	e78f      	b.n	8009706 <__divdi3+0x1c6>
 80097e6:	4611      	mov	r1, r2
 80097e8:	e7cd      	b.n	8009786 <__divdi3+0x246>
 80097ea:	4688      	mov	r8, r1
 80097ec:	e7b7      	b.n	800975e <__divdi3+0x21e>
 80097ee:	46b0      	mov	r8, r6
 80097f0:	e775      	b.n	80096de <__divdi3+0x19e>
 80097f2:	3f02      	subs	r7, #2
 80097f4:	18b6      	adds	r6, r6, r2
 80097f6:	e72a      	b.n	800964e <__divdi3+0x10e>
 80097f8:	3902      	subs	r1, #2
 80097fa:	e73c      	b.n	8009676 <__divdi3+0x136>

080097fc <__udivdi3>:
 80097fc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8009800:	4614      	mov	r4, r2
 8009802:	4605      	mov	r5, r0
 8009804:	460e      	mov	r6, r1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d13d      	bne.n	8009886 <__udivdi3+0x8a>
 800980a:	428a      	cmp	r2, r1
 800980c:	d949      	bls.n	80098a2 <__udivdi3+0xa6>
 800980e:	fab2 f782 	clz	r7, r2
 8009812:	b147      	cbz	r7, 8009826 <__udivdi3+0x2a>
 8009814:	f1c7 0120 	rsb	r1, r7, #32
 8009818:	fa20 f201 	lsr.w	r2, r0, r1
 800981c:	fa06 f607 	lsl.w	r6, r6, r7
 8009820:	40bc      	lsls	r4, r7
 8009822:	4316      	orrs	r6, r2
 8009824:	40bd      	lsls	r5, r7
 8009826:	0c22      	lsrs	r2, r4, #16
 8009828:	fbb6 f0f2 	udiv	r0, r6, r2
 800982c:	0c2f      	lsrs	r7, r5, #16
 800982e:	b2a1      	uxth	r1, r4
 8009830:	fb02 6610 	mls	r6, r2, r0, r6
 8009834:	fb01 f300 	mul.w	r3, r1, r0
 8009838:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800983c:	42b3      	cmp	r3, r6
 800983e:	d908      	bls.n	8009852 <__udivdi3+0x56>
 8009840:	1e47      	subs	r7, r0, #1
 8009842:	1936      	adds	r6, r6, r4
 8009844:	f080 80f8 	bcs.w	8009a38 <__udivdi3+0x23c>
 8009848:	42b3      	cmp	r3, r6
 800984a:	f240 80f5 	bls.w	8009a38 <__udivdi3+0x23c>
 800984e:	3802      	subs	r0, #2
 8009850:	1936      	adds	r6, r6, r4
 8009852:	1af6      	subs	r6, r6, r3
 8009854:	fbb6 f3f2 	udiv	r3, r6, r2
 8009858:	fb02 6213 	mls	r2, r2, r3, r6
 800985c:	b2ad      	uxth	r5, r5
 800985e:	fb01 f103 	mul.w	r1, r1, r3
 8009862:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8009866:	4291      	cmp	r1, r2
 8009868:	d907      	bls.n	800987a <__udivdi3+0x7e>
 800986a:	1e5e      	subs	r6, r3, #1
 800986c:	1912      	adds	r2, r2, r4
 800986e:	f080 80e5 	bcs.w	8009a3c <__udivdi3+0x240>
 8009872:	4291      	cmp	r1, r2
 8009874:	f240 80e2 	bls.w	8009a3c <__udivdi3+0x240>
 8009878:	3b02      	subs	r3, #2
 800987a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800987e:	2100      	movs	r1, #0
 8009880:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8009884:	4770      	bx	lr
 8009886:	428b      	cmp	r3, r1
 8009888:	d843      	bhi.n	8009912 <__udivdi3+0x116>
 800988a:	fab3 f483 	clz	r4, r3
 800988e:	2c00      	cmp	r4, #0
 8009890:	d142      	bne.n	8009918 <__udivdi3+0x11c>
 8009892:	428b      	cmp	r3, r1
 8009894:	d302      	bcc.n	800989c <__udivdi3+0xa0>
 8009896:	4282      	cmp	r2, r0
 8009898:	f200 80df 	bhi.w	8009a5a <__udivdi3+0x25e>
 800989c:	2100      	movs	r1, #0
 800989e:	2001      	movs	r0, #1
 80098a0:	e7ee      	b.n	8009880 <__udivdi3+0x84>
 80098a2:	b912      	cbnz	r2, 80098aa <__udivdi3+0xae>
 80098a4:	2701      	movs	r7, #1
 80098a6:	fbb7 f4f2 	udiv	r4, r7, r2
 80098aa:	fab4 f284 	clz	r2, r4
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	f040 8088 	bne.w	80099c4 <__udivdi3+0x1c8>
 80098b4:	1b0a      	subs	r2, r1, r4
 80098b6:	0c23      	lsrs	r3, r4, #16
 80098b8:	b2a7      	uxth	r7, r4
 80098ba:	2101      	movs	r1, #1
 80098bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80098c0:	fb03 2216 	mls	r2, r3, r6, r2
 80098c4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80098c8:	fb07 f006 	mul.w	r0, r7, r6
 80098cc:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 80098d0:	4290      	cmp	r0, r2
 80098d2:	d907      	bls.n	80098e4 <__udivdi3+0xe8>
 80098d4:	1912      	adds	r2, r2, r4
 80098d6:	f106 3cff 	add.w	ip, r6, #4294967295
 80098da:	d202      	bcs.n	80098e2 <__udivdi3+0xe6>
 80098dc:	4290      	cmp	r0, r2
 80098de:	f200 80ce 	bhi.w	8009a7e <__udivdi3+0x282>
 80098e2:	4666      	mov	r6, ip
 80098e4:	1a12      	subs	r2, r2, r0
 80098e6:	fbb2 f0f3 	udiv	r0, r2, r3
 80098ea:	fb03 2310 	mls	r3, r3, r0, r2
 80098ee:	b2ad      	uxth	r5, r5
 80098f0:	fb07 f700 	mul.w	r7, r7, r0
 80098f4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80098f8:	429f      	cmp	r7, r3
 80098fa:	d907      	bls.n	800990c <__udivdi3+0x110>
 80098fc:	1e42      	subs	r2, r0, #1
 80098fe:	191b      	adds	r3, r3, r4
 8009900:	f080 809e 	bcs.w	8009a40 <__udivdi3+0x244>
 8009904:	429f      	cmp	r7, r3
 8009906:	f240 809b 	bls.w	8009a40 <__udivdi3+0x244>
 800990a:	3802      	subs	r0, #2
 800990c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8009910:	e7b6      	b.n	8009880 <__udivdi3+0x84>
 8009912:	2100      	movs	r1, #0
 8009914:	4608      	mov	r0, r1
 8009916:	e7b3      	b.n	8009880 <__udivdi3+0x84>
 8009918:	f1c4 0620 	rsb	r6, r4, #32
 800991c:	fa22 f506 	lsr.w	r5, r2, r6
 8009920:	fa03 f304 	lsl.w	r3, r3, r4
 8009924:	432b      	orrs	r3, r5
 8009926:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800992a:	fa21 f506 	lsr.w	r5, r1, r6
 800992e:	fa01 f104 	lsl.w	r1, r1, r4
 8009932:	fa20 f606 	lsr.w	r6, r0, r6
 8009936:	fbb5 f7fc 	udiv	r7, r5, ip
 800993a:	ea46 0a01 	orr.w	sl, r6, r1
 800993e:	fa1f f883 	uxth.w	r8, r3
 8009942:	fb0c 5517 	mls	r5, ip, r7, r5
 8009946:	ea4f 411a 	mov.w	r1, sl, lsr #16
 800994a:	fb08 f907 	mul.w	r9, r8, r7
 800994e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8009952:	45a9      	cmp	r9, r5
 8009954:	fa02 f204 	lsl.w	r2, r2, r4
 8009958:	d903      	bls.n	8009962 <__udivdi3+0x166>
 800995a:	1e7e      	subs	r6, r7, #1
 800995c:	18ed      	adds	r5, r5, r3
 800995e:	d37f      	bcc.n	8009a60 <__udivdi3+0x264>
 8009960:	4637      	mov	r7, r6
 8009962:	ebc9 0105 	rsb	r1, r9, r5
 8009966:	fbb1 f6fc 	udiv	r6, r1, ip
 800996a:	fb0c 1516 	mls	r5, ip, r6, r1
 800996e:	fa1f fa8a 	uxth.w	sl, sl
 8009972:	fb08 f806 	mul.w	r8, r8, r6
 8009976:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
 800997a:	4588      	cmp	r8, r1
 800997c:	d903      	bls.n	8009986 <__udivdi3+0x18a>
 800997e:	1e75      	subs	r5, r6, #1
 8009980:	18c9      	adds	r1, r1, r3
 8009982:	d373      	bcc.n	8009a6c <__udivdi3+0x270>
 8009984:	462e      	mov	r6, r5
 8009986:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 800998a:	0c37      	lsrs	r7, r6, #16
 800998c:	fa1f fc82 	uxth.w	ip, r2
 8009990:	fb0c f507 	mul.w	r5, ip, r7
 8009994:	0c12      	lsrs	r2, r2, #16
 8009996:	b2b3      	uxth	r3, r6
 8009998:	fb0c fc03 	mul.w	ip, ip, r3
 800999c:	fb02 5303 	mla	r3, r2, r3, r5
 80099a0:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 80099a4:	fb02 f207 	mul.w	r2, r2, r7
 80099a8:	429d      	cmp	r5, r3
 80099aa:	bf88      	it	hi
 80099ac:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
 80099b0:	ebc8 0101 	rsb	r1, r8, r1
 80099b4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80099b8:	4291      	cmp	r1, r2
 80099ba:	d34b      	bcc.n	8009a54 <__udivdi3+0x258>
 80099bc:	d042      	beq.n	8009a44 <__udivdi3+0x248>
 80099be:	4630      	mov	r0, r6
 80099c0:	2100      	movs	r1, #0
 80099c2:	e75d      	b.n	8009880 <__udivdi3+0x84>
 80099c4:	4094      	lsls	r4, r2
 80099c6:	f1c2 0520 	rsb	r5, r2, #32
 80099ca:	fa21 f605 	lsr.w	r6, r1, r5
 80099ce:	0c23      	lsrs	r3, r4, #16
 80099d0:	fa20 f705 	lsr.w	r7, r0, r5
 80099d4:	fa01 f102 	lsl.w	r1, r1, r2
 80099d8:	fbb6 fcf3 	udiv	ip, r6, r3
 80099dc:	4339      	orrs	r1, r7
 80099de:	0c0d      	lsrs	r5, r1, #16
 80099e0:	b2a7      	uxth	r7, r4
 80099e2:	fb03 661c 	mls	r6, r3, ip, r6
 80099e6:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80099ea:	fb07 f80c 	mul.w	r8, r7, ip
 80099ee:	45b0      	cmp	r8, r6
 80099f0:	fa00 f502 	lsl.w	r5, r0, r2
 80099f4:	d908      	bls.n	8009a08 <__udivdi3+0x20c>
 80099f6:	1936      	adds	r6, r6, r4
 80099f8:	f10c 30ff 	add.w	r0, ip, #4294967295
 80099fc:	d23d      	bcs.n	8009a7a <__udivdi3+0x27e>
 80099fe:	45b0      	cmp	r8, r6
 8009a00:	d93b      	bls.n	8009a7a <__udivdi3+0x27e>
 8009a02:	f1ac 0c02 	sub.w	ip, ip, #2
 8009a06:	1936      	adds	r6, r6, r4
 8009a08:	ebc8 0206 	rsb	r2, r8, r6
 8009a0c:	fbb2 f0f3 	udiv	r0, r2, r3
 8009a10:	fb03 2610 	mls	r6, r3, r0, r2
 8009a14:	b28a      	uxth	r2, r1
 8009a16:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8009a1a:	fb07 f100 	mul.w	r1, r7, r0
 8009a1e:	4291      	cmp	r1, r2
 8009a20:	d906      	bls.n	8009a30 <__udivdi3+0x234>
 8009a22:	1e46      	subs	r6, r0, #1
 8009a24:	1912      	adds	r2, r2, r4
 8009a26:	d226      	bcs.n	8009a76 <__udivdi3+0x27a>
 8009a28:	4291      	cmp	r1, r2
 8009a2a:	d924      	bls.n	8009a76 <__udivdi3+0x27a>
 8009a2c:	3802      	subs	r0, #2
 8009a2e:	1912      	adds	r2, r2, r4
 8009a30:	1a52      	subs	r2, r2, r1
 8009a32:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
 8009a36:	e741      	b.n	80098bc <__udivdi3+0xc0>
 8009a38:	4638      	mov	r0, r7
 8009a3a:	e70a      	b.n	8009852 <__udivdi3+0x56>
 8009a3c:	4633      	mov	r3, r6
 8009a3e:	e71c      	b.n	800987a <__udivdi3+0x7e>
 8009a40:	4610      	mov	r0, r2
 8009a42:	e763      	b.n	800990c <__udivdi3+0x110>
 8009a44:	fa1f fc8c 	uxth.w	ip, ip
 8009a48:	fa00 f004 	lsl.w	r0, r0, r4
 8009a4c:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
 8009a50:	4298      	cmp	r0, r3
 8009a52:	d2b4      	bcs.n	80099be <__udivdi3+0x1c2>
 8009a54:	1e70      	subs	r0, r6, #1
 8009a56:	2100      	movs	r1, #0
 8009a58:	e712      	b.n	8009880 <__udivdi3+0x84>
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	e70f      	b.n	8009880 <__udivdi3+0x84>
 8009a60:	45a9      	cmp	r9, r5
 8009a62:	f67f af7d 	bls.w	8009960 <__udivdi3+0x164>
 8009a66:	3f02      	subs	r7, #2
 8009a68:	18ed      	adds	r5, r5, r3
 8009a6a:	e77a      	b.n	8009962 <__udivdi3+0x166>
 8009a6c:	4588      	cmp	r8, r1
 8009a6e:	d989      	bls.n	8009984 <__udivdi3+0x188>
 8009a70:	3e02      	subs	r6, #2
 8009a72:	18c9      	adds	r1, r1, r3
 8009a74:	e787      	b.n	8009986 <__udivdi3+0x18a>
 8009a76:	4630      	mov	r0, r6
 8009a78:	e7da      	b.n	8009a30 <__udivdi3+0x234>
 8009a7a:	4684      	mov	ip, r0
 8009a7c:	e7c4      	b.n	8009a08 <__udivdi3+0x20c>
 8009a7e:	3e02      	subs	r6, #2
 8009a80:	1912      	adds	r2, r2, r4
 8009a82:	e72f      	b.n	80098e4 <__udivdi3+0xe8>

08009a84 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009a86:	f000 b804 	b.w	8009a92 <LoopCopyDataInit>

08009a8a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009a8a:	4b0c      	ldr	r3, [pc, #48]	; (8009abc <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 8009a8c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009a8e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009a90:	3104      	adds	r1, #4

08009a92 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009a92:	480b      	ldr	r0, [pc, #44]	; (8009ac0 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 8009a94:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 8009a96:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009a98:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009a9a:	f4ff aff6 	bcc.w	8009a8a <CopyDataInit>
  ldr  r2, =_sbss
 8009a9e:	4a0a      	ldr	r2, [pc, #40]	; (8009ac8 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 8009aa0:	f000 b803 	b.w	8009aaa <LoopFillZerobss>

08009aa4 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009aa4:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009aa6:	f842 3b04 	str.w	r3, [r2], #4

08009aaa <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009aaa:	4b08      	ldr	r3, [pc, #32]	; (8009acc <LoopFillZerobss+0x22>)
  cmp  r2, r3
 8009aac:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009aae:	f4ff aff9 	bcc.w	8009aa4 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009ab2:	f7fe feb3 	bl	800881c <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8009ab6:	f7f6 ff63 	bl	8000980 <main>
  bx  lr    
 8009aba:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8009abc:	0800fe80 	.word	0x0800fe80
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ac0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009ac4:	20000904 	.word	0x20000904
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8009ac8:	20000904 	.word	0x20000904
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009acc:	2000098c 	.word	0x2000098c

08009ad0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ad0:	f7ff bffe 	b.w	8009ad0 <ADC3_IRQHandler>

08009ad4 <sqrt>:
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	ed2d 8b04 	vpush	{d8-d9}
 8009ada:	eeb0 8a40 	vmov.f32	s16, s0
 8009ade:	eef0 8a60 	vmov.f32	s17, s1
 8009ae2:	4c28      	ldr	r4, [pc, #160]	; (8009b84 <sqrt+0xb0>)
 8009ae4:	b08a      	sub	sp, #40	; 0x28
 8009ae6:	f000 f851 	bl	8009b8c <__ieee754_sqrt>
 8009aea:	f994 3000 	ldrsb.w	r3, [r4]
 8009aee:	eeb0 9a40 	vmov.f32	s18, s0
 8009af2:	eef0 9a60 	vmov.f32	s19, s1
 8009af6:	3301      	adds	r3, #1
 8009af8:	d00d      	beq.n	8009b16 <sqrt+0x42>
 8009afa:	eeb0 0a48 	vmov.f32	s0, s16
 8009afe:	eef0 0a68 	vmov.f32	s1, s17
 8009b02:	f000 f94f 	bl	8009da4 <__fpclassifyd>
 8009b06:	b130      	cbz	r0, 8009b16 <sqrt+0x42>
 8009b08:	ec51 0b18 	vmov	r0, r1, d8
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f7ff fc82 	bl	8009418 <__aeabi_dcmplt>
 8009b14:	b938      	cbnz	r0, 8009b26 <sqrt+0x52>
 8009b16:	eeb0 0a49 	vmov.f32	s0, s18
 8009b1a:	eef0 0a69 	vmov.f32	s1, s19
 8009b1e:	b00a      	add	sp, #40	; 0x28
 8009b20:	ecbd 8b04 	vpop	{d8-d9}
 8009b24:	bd10      	pop	{r4, pc}
 8009b26:	4818      	ldr	r0, [pc, #96]	; (8009b88 <sqrt+0xb4>)
 8009b28:	7824      	ldrb	r4, [r4, #0]
 8009b2a:	9001      	str	r0, [sp, #4]
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	2200      	movs	r2, #0
 8009b30:	9100      	str	r1, [sp, #0]
 8009b32:	9208      	str	r2, [sp, #32]
 8009b34:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009b38:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009b3c:	b974      	cbnz	r4, 8009b5c <sqrt+0x88>
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2300      	movs	r3, #0
 8009b42:	ec43 2b17 	vmov	d7, r2, r3
 8009b46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b4a:	4668      	mov	r0, sp
 8009b4c:	f000 f962 	bl	8009e14 <matherr>
 8009b50:	b170      	cbz	r0, 8009b70 <sqrt+0x9c>
 8009b52:	9808      	ldr	r0, [sp, #32]
 8009b54:	b988      	cbnz	r0, 8009b7a <sqrt+0xa6>
 8009b56:	ed9d 9b06 	vldr	d9, [sp, #24]
 8009b5a:	e7dc      	b.n	8009b16 <sqrt+0x42>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	2100      	movs	r1, #0
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	f7ff fb10 	bl	8009188 <__aeabi_ddiv>
 8009b68:	2c02      	cmp	r4, #2
 8009b6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b6e:	d1ec      	bne.n	8009b4a <sqrt+0x76>
 8009b70:	f000 f9a8 	bl	8009ec4 <__errno>
 8009b74:	2321      	movs	r3, #33	; 0x21
 8009b76:	6003      	str	r3, [r0, #0]
 8009b78:	e7eb      	b.n	8009b52 <sqrt+0x7e>
 8009b7a:	f000 f9a3 	bl	8009ec4 <__errno>
 8009b7e:	9908      	ldr	r1, [sp, #32]
 8009b80:	6001      	str	r1, [r0, #0]
 8009b82:	e7e8      	b.n	8009b56 <sqrt+0x82>
 8009b84:	20000064 	.word	0x20000064
 8009b88:	0800fcc4 	.word	0x0800fcc4

08009b8c <__ieee754_sqrt>:
 8009b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b90:	ec53 2b10 	vmov	r2, r3, d0
 8009b94:	2400      	movs	r4, #0
 8009b96:	4626      	mov	r6, r4
 8009b98:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 8009b9c:	f6c7 76f0 	movt	r6, #32752	; 0x7ff0
 8009ba0:	401c      	ands	r4, r3
 8009ba2:	42b4      	cmp	r4, r6
 8009ba4:	ed2d 8b02 	vpush	{d8}
 8009ba8:	eeb0 8a40 	vmov.f32	s16, s0
 8009bac:	eef0 8a60 	vmov.f32	s17, s1
 8009bb0:	461d      	mov	r5, r3
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	ee10 1a10 	vmov	r1, s0
 8009bb8:	f000 80d3 	beq.w	8009d62 <__ieee754_sqrt+0x1d6>
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f340 80b0 	ble.w	8009d22 <__ieee754_sqrt+0x196>
 8009bc2:	151f      	asrs	r7, r3, #20
 8009bc4:	f000 80b8 	beq.w	8009d38 <__ieee754_sqrt+0x1ac>
 8009bc8:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
 8009bcc:	f426 0270 	bic.w	r2, r6, #15728640	; 0xf00000
 8009bd0:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8009bd4:	f442 1380 	orr.w	r3, r2, #1048576	; 0x100000
 8009bd8:	07e2      	lsls	r2, r4, #31
 8009bda:	f100 8097 	bmi.w	8009d0c <__ieee754_sqrt+0x180>
 8009bde:	0fcd      	lsrs	r5, r1, #31
 8009be0:	f04f 0c00 	mov.w	ip, #0
 8009be4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009be8:	1067      	asrs	r7, r4, #1
 8009bea:	0049      	lsls	r1, r1, #1
 8009bec:	2516      	movs	r5, #22
 8009bee:	4662      	mov	r2, ip
 8009bf0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009bf4:	1816      	adds	r6, r2, r0
 8009bf6:	0844      	lsrs	r4, r0, #1
 8009bf8:	429e      	cmp	r6, r3
 8009bfa:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 8009bfe:	f105 35ff 	add.w	r5, r5, #4294967295
 8009c02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009c06:	dc02      	bgt.n	8009c0e <__ieee754_sqrt+0x82>
 8009c08:	1832      	adds	r2, r6, r0
 8009c0a:	1b9b      	subs	r3, r3, r6
 8009c0c:	4484      	add	ip, r0
 8009c0e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8009c12:	1910      	adds	r0, r2, r4
 8009c14:	4298      	cmp	r0, r3
 8009c16:	dc02      	bgt.n	8009c1e <__ieee754_sqrt+0x92>
 8009c18:	1a1b      	subs	r3, r3, r0
 8009c1a:	1902      	adds	r2, r0, r4
 8009c1c:	44a4      	add	ip, r4
 8009c1e:	0fce      	lsrs	r6, r1, #31
 8009c20:	0860      	lsrs	r0, r4, #1
 8009c22:	0049      	lsls	r1, r1, #1
 8009c24:	3d01      	subs	r5, #1
 8009c26:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8009c2a:	d1e3      	bne.n	8009bf4 <__ieee754_sqrt+0x68>
 8009c2c:	f04f 0820 	mov.w	r8, #32
 8009c30:	462c      	mov	r4, r5
 8009c32:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009c36:	e015      	b.n	8009c64 <__ieee754_sqrt+0xd8>
 8009c38:	f000 808f 	beq.w	8009d5a <__ieee754_sqrt+0x1ce>
 8009c3c:	0fce      	lsrs	r6, r1, #31
 8009c3e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8009c42:	0840      	lsrs	r0, r0, #1
 8009c44:	0049      	lsls	r1, r1, #1
 8009c46:	4293      	cmp	r3, r2
 8009c48:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c4c:	eb04 0600 	add.w	r6, r4, r0
 8009c50:	dc1e      	bgt.n	8009c90 <__ieee754_sqrt+0x104>
 8009c52:	d01b      	beq.n	8009c8c <__ieee754_sqrt+0x100>
 8009c54:	0fce      	lsrs	r6, r1, #31
 8009c56:	0840      	lsrs	r0, r0, #1
 8009c58:	0049      	lsls	r1, r1, #1
 8009c5a:	f1b8 0801 	subs.w	r8, r8, #1
 8009c5e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8009c62:	d02d      	beq.n	8009cc0 <__ieee754_sqrt+0x134>
 8009c64:	4293      	cmp	r3, r2
 8009c66:	eb04 0600 	add.w	r6, r4, r0
 8009c6a:	dde5      	ble.n	8009c38 <__ieee754_sqrt+0xac>
 8009c6c:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 8009c70:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 8009c74:	eb06 0400 	add.w	r4, r6, r0
 8009c78:	d043      	beq.n	8009d02 <__ieee754_sqrt+0x176>
 8009c7a:	4691      	mov	r9, r2
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	428e      	cmp	r6, r1
 8009c80:	bf88      	it	hi
 8009c82:	3b01      	subhi	r3, #1
 8009c84:	1b89      	subs	r1, r1, r6
 8009c86:	182d      	adds	r5, r5, r0
 8009c88:	464a      	mov	r2, r9
 8009c8a:	e7d7      	b.n	8009c3c <__ieee754_sqrt+0xb0>
 8009c8c:	428e      	cmp	r6, r1
 8009c8e:	d8e1      	bhi.n	8009c54 <__ieee754_sqrt+0xc8>
 8009c90:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 8009c94:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 8009c98:	eb06 0400 	add.w	r4, r6, r0
 8009c9c:	d02c      	beq.n	8009cf8 <__ieee754_sqrt+0x16c>
 8009c9e:	4691      	mov	r9, r2
 8009ca0:	428e      	cmp	r6, r1
 8009ca2:	ebc2 0303 	rsb	r3, r2, r3
 8009ca6:	d900      	bls.n	8009caa <__ieee754_sqrt+0x11e>
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	1b89      	subs	r1, r1, r6
 8009cac:	0fce      	lsrs	r6, r1, #31
 8009cae:	182d      	adds	r5, r5, r0
 8009cb0:	0049      	lsls	r1, r1, #1
 8009cb2:	0840      	lsrs	r0, r0, #1
 8009cb4:	f1b8 0801 	subs.w	r8, r8, #1
 8009cb8:	464a      	mov	r2, r9
 8009cba:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8009cbe:	d1d1      	bne.n	8009c64 <__ieee754_sqrt+0xd8>
 8009cc0:	4319      	orrs	r1, r3
 8009cc2:	d128      	bne.n	8009d16 <__ieee754_sqrt+0x18a>
 8009cc4:	ea4f 0855 	mov.w	r8, r5, lsr #1
 8009cc8:	ea4f 036c 	mov.w	r3, ip, asr #1
 8009ccc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009cd0:	f01c 0f01 	tst.w	ip, #1
 8009cd4:	f501 1000 	add.w	r0, r1, #2097152	; 0x200000
 8009cd8:	bf18      	it	ne
 8009cda:	f048 4800 	orrne.w	r8, r8, #2147483648	; 0x80000000
 8009cde:	eb00 5307 	add.w	r3, r0, r7, lsl #20
 8009ce2:	4642      	mov	r2, r8
 8009ce4:	ec43 2b18 	vmov	d8, r2, r3
 8009ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8009cec:	eef0 0a68 	vmov.f32	s1, s17
 8009cf0:	ecbd 8b02 	vpop	{d8}
 8009cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cf8:	2c00      	cmp	r4, #0
 8009cfa:	dbd0      	blt.n	8009c9e <__ieee754_sqrt+0x112>
 8009cfc:	f102 0901 	add.w	r9, r2, #1
 8009d00:	e7ce      	b.n	8009ca0 <__ieee754_sqrt+0x114>
 8009d02:	2c00      	cmp	r4, #0
 8009d04:	dbb9      	blt.n	8009c7a <__ieee754_sqrt+0xee>
 8009d06:	f102 0901 	add.w	r9, r2, #1
 8009d0a:	e7b7      	b.n	8009c7c <__ieee754_sqrt+0xf0>
 8009d0c:	0fc8      	lsrs	r0, r1, #31
 8009d0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009d12:	0049      	lsls	r1, r1, #1
 8009d14:	e763      	b.n	8009bde <__ieee754_sqrt+0x52>
 8009d16:	1c6b      	adds	r3, r5, #1
 8009d18:	d030      	beq.n	8009d7c <__ieee754_sqrt+0x1f0>
 8009d1a:	f005 0201 	and.w	r2, r5, #1
 8009d1e:	1955      	adds	r5, r2, r5
 8009d20:	e7d0      	b.n	8009cc4 <__ieee754_sqrt+0x138>
 8009d22:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8009d26:	4310      	orrs	r0, r2
 8009d28:	d0de      	beq.n	8009ce8 <__ieee754_sqrt+0x15c>
 8009d2a:	bb73      	cbnz	r3, 8009d8a <__ieee754_sqrt+0x1fe>
 8009d2c:	461f      	mov	r7, r3
 8009d2e:	0ac8      	lsrs	r0, r1, #11
 8009d30:	3f15      	subs	r7, #21
 8009d32:	0549      	lsls	r1, r1, #21
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d0fa      	beq.n	8009d2e <__ieee754_sqrt+0x1a2>
 8009d38:	f410 1380 	ands.w	r3, r0, #1048576	; 0x100000
 8009d3c:	d121      	bne.n	8009d82 <__ieee754_sqrt+0x1f6>
 8009d3e:	0040      	lsls	r0, r0, #1
 8009d40:	3301      	adds	r3, #1
 8009d42:	02c4      	lsls	r4, r0, #11
 8009d44:	d5fb      	bpl.n	8009d3e <__ieee754_sqrt+0x1b2>
 8009d46:	f1c3 0401 	rsb	r4, r3, #1
 8009d4a:	f1c3 0220 	rsb	r2, r3, #32
 8009d4e:	fa21 f502 	lsr.w	r5, r1, r2
 8009d52:	193f      	adds	r7, r7, r4
 8009d54:	4328      	orrs	r0, r5
 8009d56:	4099      	lsls	r1, r3
 8009d58:	e736      	b.n	8009bc8 <__ieee754_sqrt+0x3c>
 8009d5a:	428e      	cmp	r6, r1
 8009d5c:	d986      	bls.n	8009c6c <__ieee754_sqrt+0xe0>
 8009d5e:	461a      	mov	r2, r3
 8009d60:	e76c      	b.n	8009c3c <__ieee754_sqrt+0xb0>
 8009d62:	ec51 0b10 	vmov	r0, r1, d0
 8009d66:	f7ff f8e5 	bl	8008f34 <__aeabi_dmul>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	ec51 0b18 	vmov	r0, r1, d8
 8009d72:	f7fe ff2d 	bl	8008bd0 <__adddf3>
 8009d76:	ec41 0b18 	vmov	d8, r0, r1
 8009d7a:	e7b5      	b.n	8009ce8 <__ieee754_sqrt+0x15c>
 8009d7c:	f10c 0c01 	add.w	ip, ip, #1
 8009d80:	e7a2      	b.n	8009cc8 <__ieee754_sqrt+0x13c>
 8009d82:	2220      	movs	r2, #32
 8009d84:	2401      	movs	r4, #1
 8009d86:	2300      	movs	r3, #0
 8009d88:	e7e1      	b.n	8009d4e <__ieee754_sqrt+0x1c2>
 8009d8a:	ec51 0b10 	vmov	r0, r1, d0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	f7fe ff1c 	bl	8008bcc <__aeabi_dsub>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	f7ff f9f6 	bl	8009188 <__aeabi_ddiv>
 8009d9c:	ec41 0b18 	vmov	d8, r0, r1
 8009da0:	e7a2      	b.n	8009ce8 <__ieee754_sqrt+0x15c>
 8009da2:	bf00      	nop

08009da4 <__fpclassifyd>:
 8009da4:	ec53 2b10 	vmov	r2, r3, d0
 8009da8:	ee10 0a10 	vmov	r0, s0
 8009dac:	461a      	mov	r2, r3
 8009dae:	b163      	cbz	r3, 8009dca <__fpclassifyd+0x26>
 8009db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009db4:	d009      	beq.n	8009dca <__fpclassifyd+0x26>
 8009db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009dba:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8009dbe:	f6c7 73df 	movt	r3, #32735	; 0x7fdf
 8009dc2:	4299      	cmp	r1, r3
 8009dc4:	d805      	bhi.n	8009dd2 <__fpclassifyd+0x2e>
 8009dc6:	2004      	movs	r0, #4
 8009dc8:	4770      	bx	lr
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d1f3      	bne.n	8009db6 <__fpclassifyd+0x12>
 8009dce:	2002      	movs	r0, #2
 8009dd0:	4770      	bx	lr
 8009dd2:	f102 41ff 	add.w	r1, r2, #2139095040	; 0x7f800000
 8009dd6:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 8009dda:	4299      	cmp	r1, r3
 8009ddc:	d9f3      	bls.n	8009dc6 <__fpclassifyd+0x22>
 8009dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009de2:	f2c0 030f 	movt	r3, #15
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d801      	bhi.n	8009dee <__fpclassifyd+0x4a>
 8009dea:	2003      	movs	r0, #3
 8009dec:	4770      	bx	lr
 8009dee:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8009df2:	4299      	cmp	r1, r3
 8009df4:	d9f9      	bls.n	8009dea <__fpclassifyd+0x46>
 8009df6:	2300      	movs	r3, #0
 8009df8:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d004      	beq.n	8009e0a <__fpclassifyd+0x66>
 8009e00:	f512 1f80 	cmn.w	r2, #1048576	; 0x100000
 8009e04:	d001      	beq.n	8009e0a <__fpclassifyd+0x66>
 8009e06:	2000      	movs	r0, #0
 8009e08:	4770      	bx	lr
 8009e0a:	f1d0 0001 	rsbs	r0, r0, #1
 8009e0e:	bf38      	it	cc
 8009e10:	2000      	movcc	r0, #0
 8009e12:	4770      	bx	lr

08009e14 <matherr>:
 8009e14:	2000      	movs	r0, #0
 8009e16:	4770      	bx	lr

08009e18 <__register_exitproc>:
 8009e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1c:	4c27      	ldr	r4, [pc, #156]	; (8009ebc <__register_exitproc+0xa4>)
 8009e1e:	6825      	ldr	r5, [r4, #0]
 8009e20:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8009e24:	b084      	sub	sp, #16
 8009e26:	4607      	mov	r7, r0
 8009e28:	2c00      	cmp	r4, #0
 8009e2a:	d041      	beq.n	8009eb0 <__register_exitproc+0x98>
 8009e2c:	6866      	ldr	r6, [r4, #4]
 8009e2e:	2e1f      	cmp	r6, #31
 8009e30:	dd1c      	ble.n	8009e6c <__register_exitproc+0x54>
 8009e32:	4823      	ldr	r0, [pc, #140]	; (8009ec0 <__register_exitproc+0xa8>)
 8009e34:	b910      	cbnz	r0, 8009e3c <__register_exitproc+0x24>
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	e01f      	b.n	8009e7c <__register_exitproc+0x64>
 8009e3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009e40:	9103      	str	r1, [sp, #12]
 8009e42:	9202      	str	r2, [sp, #8]
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	f3af 8000 	nop.w
 8009e4a:	9903      	ldr	r1, [sp, #12]
 8009e4c:	9a02      	ldr	r2, [sp, #8]
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	4604      	mov	r4, r0
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d0ef      	beq.n	8009e36 <__register_exitproc+0x1e>
 8009e56:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	6060      	str	r0, [r4, #4]
 8009e5e:	6026      	str	r6, [r4, #0]
 8009e60:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8009e64:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8009e68:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8009e6c:	6865      	ldr	r5, [r4, #4]
 8009e6e:	b947      	cbnz	r7, 8009e82 <__register_exitproc+0x6a>
 8009e70:	1ca8      	adds	r0, r5, #2
 8009e72:	3501      	adds	r5, #1
 8009e74:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 8009e78:	6065      	str	r5, [r4, #4]
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	b004      	add	sp, #16
 8009e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e82:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8009e86:	2001      	movs	r0, #1
 8009e88:	eb04 0885 	add.w	r8, r4, r5, lsl #2
 8009e8c:	fa00 f005 	lsl.w	r0, r0, r5
 8009e90:	4306      	orrs	r6, r0
 8009e92:	2f02      	cmp	r7, #2
 8009e94:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 8009e98:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8009e9c:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 8009ea0:	d1e6      	bne.n	8009e70 <__register_exitproc+0x58>
 8009ea2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8009ea6:	ea43 0200 	orr.w	r2, r3, r0
 8009eaa:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8009eae:	e7df      	b.n	8009e70 <__register_exitproc+0x58>
 8009eb0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8009eb4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8009eb8:	e7b8      	b.n	8009e2c <__register_exitproc+0x14>
 8009eba:	bf00      	nop
 8009ebc:	0800fcd0 	.word	0x0800fcd0
 8009ec0:	00000000 	.word	0x00000000

08009ec4 <__errno>:
 8009ec4:	f240 4390 	movw	r3, #1168	; 0x490
 8009ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009ecc:	6818      	ldr	r0, [r3, #0]
 8009ece:	4770      	bx	lr

08009ed0 <__libc_fini_array>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	4b11      	ldr	r3, [pc, #68]	; (8009f18 <__libc_fini_array+0x48>)
 8009ed4:	4c11      	ldr	r4, [pc, #68]	; (8009f1c <__libc_fini_array+0x4c>)
 8009ed6:	1b18      	subs	r0, r3, r4
 8009ed8:	1081      	asrs	r1, r0, #2
 8009eda:	d018      	beq.n	8009f0e <__libc_fini_array+0x3e>
 8009edc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8009ee0:	1e4e      	subs	r6, r1, #1
 8009ee2:	4635      	mov	r5, r6
 8009ee4:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 8009ee8:	f006 0601 	and.w	r6, r6, #1
 8009eec:	4790      	blx	r2
 8009eee:	b175      	cbz	r5, 8009f0e <__libc_fini_array+0x3e>
 8009ef0:	b126      	cbz	r6, 8009efc <__libc_fini_array+0x2c>
 8009ef2:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8009ef6:	4798      	blx	r3
 8009ef8:	3d01      	subs	r5, #1
 8009efa:	d008      	beq.n	8009f0e <__libc_fini_array+0x3e>
 8009efc:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8009f00:	4780      	blx	r0
 8009f02:	3d01      	subs	r5, #1
 8009f04:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8009f08:	4788      	blx	r1
 8009f0a:	3d01      	subs	r5, #1
 8009f0c:	d1f6      	bne.n	8009efc <__libc_fini_array+0x2c>
 8009f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f12:	f005 bfa3 	b.w	800fe5c <_fini>
 8009f16:	bf00      	nop
 8009f18:	0800fe7c 	.word	0x0800fe7c
 8009f1c:	0800fe78 	.word	0x0800fe78

08009f20 <memset>:
 8009f20:	b4f0      	push	{r4, r5, r6, r7}
 8009f22:	0784      	lsls	r4, r0, #30
 8009f24:	4603      	mov	r3, r0
 8009f26:	f000 808e 	beq.w	800a046 <memset+0x126>
 8009f2a:	1e54      	subs	r4, r2, #1
 8009f2c:	2a00      	cmp	r2, #0
 8009f2e:	f000 8088 	beq.w	800a042 <memset+0x122>
 8009f32:	07e5      	lsls	r5, r4, #31
 8009f34:	b2ce      	uxtb	r6, r1
 8009f36:	d411      	bmi.n	8009f5c <memset+0x3c>
 8009f38:	461a      	mov	r2, r3
 8009f3a:	1e67      	subs	r7, r4, #1
 8009f3c:	f802 6b01 	strb.w	r6, [r2], #1
 8009f40:	4613      	mov	r3, r2
 8009f42:	4615      	mov	r5, r2
 8009f44:	0792      	lsls	r2, r2, #30
 8009f46:	d00f      	beq.n	8009f68 <memset+0x48>
 8009f48:	2c00      	cmp	r4, #0
 8009f4a:	d07a      	beq.n	800a042 <memset+0x122>
 8009f4c:	f803 6b01 	strb.w	r6, [r3], #1
 8009f50:	079a      	lsls	r2, r3, #30
 8009f52:	463c      	mov	r4, r7
 8009f54:	461d      	mov	r5, r3
 8009f56:	d007      	beq.n	8009f68 <memset+0x48>
 8009f58:	3c01      	subs	r4, #1
 8009f5a:	e7ed      	b.n	8009f38 <memset+0x18>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f803 6b01 	strb.w	r6, [r3], #1
 8009f62:	079a      	lsls	r2, r3, #30
 8009f64:	461d      	mov	r5, r3
 8009f66:	d1f7      	bne.n	8009f58 <memset+0x38>
 8009f68:	2c03      	cmp	r4, #3
 8009f6a:	d952      	bls.n	800a012 <memset+0xf2>
 8009f6c:	b2ce      	uxtb	r6, r1
 8009f6e:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 8009f72:	2c0f      	cmp	r4, #15
 8009f74:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8009f78:	d92d      	bls.n	8009fd6 <memset+0xb6>
 8009f7a:	f1a4 0210 	sub.w	r2, r4, #16
 8009f7e:	4617      	mov	r7, r2
 8009f80:	2f0f      	cmp	r7, #15
 8009f82:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	606b      	str	r3, [r5, #4]
 8009f8a:	60ab      	str	r3, [r5, #8]
 8009f8c:	60eb      	str	r3, [r5, #12]
 8009f8e:	f105 0210 	add.w	r2, r5, #16
 8009f92:	d916      	bls.n	8009fc2 <memset+0xa2>
 8009f94:	b13e      	cbz	r6, 8009fa6 <memset+0x86>
 8009f96:	3f10      	subs	r7, #16
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	6053      	str	r3, [r2, #4]
 8009f9c:	6093      	str	r3, [r2, #8]
 8009f9e:	60d3      	str	r3, [r2, #12]
 8009fa0:	3210      	adds	r2, #16
 8009fa2:	2f0f      	cmp	r7, #15
 8009fa4:	d90d      	bls.n	8009fc2 <memset+0xa2>
 8009fa6:	3f20      	subs	r7, #32
 8009fa8:	f102 0610 	add.w	r6, r2, #16
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	6053      	str	r3, [r2, #4]
 8009fb0:	6093      	str	r3, [r2, #8]
 8009fb2:	60d3      	str	r3, [r2, #12]
 8009fb4:	6113      	str	r3, [r2, #16]
 8009fb6:	6153      	str	r3, [r2, #20]
 8009fb8:	6193      	str	r3, [r2, #24]
 8009fba:	61d3      	str	r3, [r2, #28]
 8009fbc:	3220      	adds	r2, #32
 8009fbe:	2f0f      	cmp	r7, #15
 8009fc0:	d8f1      	bhi.n	8009fa6 <memset+0x86>
 8009fc2:	f1a4 0210 	sub.w	r2, r4, #16
 8009fc6:	f022 020f 	bic.w	r2, r2, #15
 8009fca:	f004 040f 	and.w	r4, r4, #15
 8009fce:	3210      	adds	r2, #16
 8009fd0:	2c03      	cmp	r4, #3
 8009fd2:	4415      	add	r5, r2
 8009fd4:	d91d      	bls.n	800a012 <memset+0xf2>
 8009fd6:	1f27      	subs	r7, r4, #4
 8009fd8:	463e      	mov	r6, r7
 8009fda:	462a      	mov	r2, r5
 8009fdc:	2e03      	cmp	r6, #3
 8009fde:	f842 3b04 	str.w	r3, [r2], #4
 8009fe2:	f3c7 0780 	ubfx	r7, r7, #2, #1
 8009fe6:	d90d      	bls.n	800a004 <memset+0xe4>
 8009fe8:	b127      	cbz	r7, 8009ff4 <memset+0xd4>
 8009fea:	3e04      	subs	r6, #4
 8009fec:	2e03      	cmp	r6, #3
 8009fee:	f842 3b04 	str.w	r3, [r2], #4
 8009ff2:	d907      	bls.n	800a004 <memset+0xe4>
 8009ff4:	4617      	mov	r7, r2
 8009ff6:	3e08      	subs	r6, #8
 8009ff8:	f847 3b04 	str.w	r3, [r7], #4
 8009ffc:	6053      	str	r3, [r2, #4]
 8009ffe:	1d3a      	adds	r2, r7, #4
 800a000:	2e03      	cmp	r6, #3
 800a002:	d8f7      	bhi.n	8009ff4 <memset+0xd4>
 800a004:	1f23      	subs	r3, r4, #4
 800a006:	f023 0203 	bic.w	r2, r3, #3
 800a00a:	1d13      	adds	r3, r2, #4
 800a00c:	f004 0403 	and.w	r4, r4, #3
 800a010:	18ed      	adds	r5, r5, r3
 800a012:	b1b4      	cbz	r4, 800a042 <memset+0x122>
 800a014:	462b      	mov	r3, r5
 800a016:	b2c9      	uxtb	r1, r1
 800a018:	f803 1b01 	strb.w	r1, [r3], #1
 800a01c:	192c      	adds	r4, r5, r4
 800a01e:	43ed      	mvns	r5, r5
 800a020:	1962      	adds	r2, r4, r5
 800a022:	42a3      	cmp	r3, r4
 800a024:	f002 0501 	and.w	r5, r2, #1
 800a028:	d00b      	beq.n	800a042 <memset+0x122>
 800a02a:	b11d      	cbz	r5, 800a034 <memset+0x114>
 800a02c:	f803 1b01 	strb.w	r1, [r3], #1
 800a030:	42a3      	cmp	r3, r4
 800a032:	d006      	beq.n	800a042 <memset+0x122>
 800a034:	461a      	mov	r2, r3
 800a036:	f802 1b01 	strb.w	r1, [r2], #1
 800a03a:	7059      	strb	r1, [r3, #1]
 800a03c:	1c53      	adds	r3, r2, #1
 800a03e:	42a3      	cmp	r3, r4
 800a040:	d1f8      	bne.n	800a034 <memset+0x114>
 800a042:	bcf0      	pop	{r4, r5, r6, r7}
 800a044:	4770      	bx	lr
 800a046:	4605      	mov	r5, r0
 800a048:	4614      	mov	r4, r2
 800a04a:	e78d      	b.n	8009f68 <memset+0x48>

0800a04c <printf>:
 800a04c:	b40f      	push	{r0, r1, r2, r3}
 800a04e:	b500      	push	{lr}
 800a050:	f240 4290 	movw	r2, #1168	; 0x490
 800a054:	b083      	sub	sp, #12
 800a056:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a05a:	ab04      	add	r3, sp, #16
 800a05c:	6810      	ldr	r0, [r2, #0]
 800a05e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a062:	6881      	ldr	r1, [r0, #8]
 800a064:	9301      	str	r3, [sp, #4]
 800a066:	f000 f805 	bl	800a074 <_vfprintf_r>
 800a06a:	b003      	add	sp, #12
 800a06c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a070:	b004      	add	sp, #16
 800a072:	4770      	bx	lr

0800a074 <_vfprintf_r>:
 800a074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a078:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 800a07c:	4689      	mov	r9, r1
 800a07e:	4615      	mov	r5, r2
 800a080:	930c      	str	r3, [sp, #48]	; 0x30
 800a082:	9007      	str	r0, [sp, #28]
 800a084:	f003 fce2 	bl	800da4c <_localeconv_r>
 800a088:	6800      	ldr	r0, [r0, #0]
 800a08a:	9011      	str	r0, [sp, #68]	; 0x44
 800a08c:	f004 feae 	bl	800edec <strlen>
 800a090:	9c07      	ldr	r4, [sp, #28]
 800a092:	9013      	str	r0, [sp, #76]	; 0x4c
 800a094:	2100      	movs	r1, #0
 800a096:	2000      	movs	r0, #0
 800a098:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800a09c:	b11c      	cbz	r4, 800a0a6 <_vfprintf_r+0x32>
 800a09e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8152 	beq.w	800a34a <_vfprintf_r+0x2d6>
 800a0a6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a0aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a0ae:	b210      	sxth	r0, r2
 800a0b0:	b948      	cbnz	r0, 800a0c6 <_vfprintf_r+0x52>
 800a0b2:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 800a0b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a0ba:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
 800a0be:	f8a9 300c 	strh.w	r3, [r9, #12]
 800a0c2:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
 800a0c6:	f003 0008 	and.w	r0, r3, #8
 800a0ca:	b201      	sxth	r1, r0
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	f000 80d1 	beq.w	800a274 <_vfprintf_r+0x200>
 800a0d2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a0d6:	2a00      	cmp	r2, #0
 800a0d8:	f000 80cc 	beq.w	800a274 <_vfprintf_r+0x200>
 800a0dc:	f003 041a 	and.w	r4, r3, #26
 800a0e0:	2c0a      	cmp	r4, #10
 800a0e2:	f000 80d4 	beq.w	800a28e <_vfprintf_r+0x21a>
 800a0e6:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 800a0ea:	f10d 00bf 	add.w	r0, sp, #191	; 0xbf
 800a0ee:	aa30      	add	r2, sp, #192	; 0xc0
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	9004      	str	r0, [sp, #16]
 800a0f4:	9203      	str	r2, [sp, #12]
 800a0f6:	910d      	str	r1, [sp, #52]	; 0x34
 800a0f8:	f8ca 1008 	str.w	r1, [sl, #8]
 800a0fc:	f8ca 1004 	str.w	r1, [sl, #4]
 800a100:	9116      	str	r1, [sp, #88]	; 0x58
 800a102:	9117      	str	r1, [sp, #92]	; 0x5c
 800a104:	910a      	str	r1, [sp, #40]	; 0x28
 800a106:	9c04      	ldr	r4, [sp, #16]
 800a108:	9903      	ldr	r1, [sp, #12]
 800a10a:	9506      	str	r5, [sp, #24]
 800a10c:	ab4a      	add	r3, sp, #296	; 0x128
 800a10e:	1b08      	subs	r0, r1, r4
 800a110:	f8ca 3000 	str.w	r3, [sl]
 800a114:	469b      	mov	fp, r3
 800a116:	9019      	str	r0, [sp, #100]	; 0x64
 800a118:	9d06      	ldr	r5, [sp, #24]
 800a11a:	782a      	ldrb	r2, [r5, #0]
 800a11c:	2a00      	cmp	r2, #0
 800a11e:	f000 8118 	beq.w	800a352 <_vfprintf_r+0x2de>
 800a122:	2a25      	cmp	r2, #37	; 0x25
 800a124:	f000 8115 	beq.w	800a352 <_vfprintf_r+0x2de>
 800a128:	3501      	adds	r5, #1
 800a12a:	e002      	b.n	800a132 <_vfprintf_r+0xbe>
 800a12c:	2925      	cmp	r1, #37	; 0x25
 800a12e:	f000 8093 	beq.w	800a258 <_vfprintf_r+0x1e4>
 800a132:	462c      	mov	r4, r5
 800a134:	3501      	adds	r5, #1
 800a136:	7821      	ldrb	r1, [r4, #0]
 800a138:	2900      	cmp	r1, #0
 800a13a:	d1f7      	bne.n	800a12c <_vfprintf_r+0xb8>
 800a13c:	9806      	ldr	r0, [sp, #24]
 800a13e:	1a25      	subs	r5, r4, r0
 800a140:	b1b5      	cbz	r5, 800a170 <_vfprintf_r+0xfc>
 800a142:	f8da 1008 	ldr.w	r1, [sl, #8]
 800a146:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a14a:	9806      	ldr	r0, [sp, #24]
 800a14c:	f8cb 5004 	str.w	r5, [fp, #4]
 800a150:	194a      	adds	r2, r1, r5
 800a152:	1c59      	adds	r1, r3, #1
 800a154:	2907      	cmp	r1, #7
 800a156:	f8cb 0000 	str.w	r0, [fp]
 800a15a:	f8ca 2008 	str.w	r2, [sl, #8]
 800a15e:	f8ca 1004 	str.w	r1, [sl, #4]
 800a162:	f300 80e8 	bgt.w	800a336 <_vfprintf_r+0x2c2>
 800a166:	f10b 0b08 	add.w	fp, fp, #8
 800a16a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a16c:	1958      	adds	r0, r3, r5
 800a16e:	900a      	str	r0, [sp, #40]	; 0x28
 800a170:	7822      	ldrb	r2, [r4, #0]
 800a172:	2a00      	cmp	r2, #0
 800a174:	f000 80c8 	beq.w	800a308 <_vfprintf_r+0x294>
 800a178:	2600      	movs	r6, #0
 800a17a:	1c65      	adds	r5, r4, #1
 800a17c:	f04f 3cff 	mov.w	ip, #4294967295
 800a180:	f894 8001 	ldrb.w	r8, [r4, #1]
 800a184:	9609      	str	r6, [sp, #36]	; 0x24
 800a186:	f88d 606b 	strb.w	r6, [sp, #107]	; 0x6b
 800a18a:	9605      	str	r6, [sp, #20]
 800a18c:	9506      	str	r5, [sp, #24]
 800a18e:	2120      	movs	r1, #32
 800a190:	222b      	movs	r2, #43	; 0x2b
 800a192:	462b      	mov	r3, r5
 800a194:	4666      	mov	r6, ip
 800a196:	3301      	adds	r3, #1
 800a198:	f1a8 0020 	sub.w	r0, r8, #32
 800a19c:	2858      	cmp	r0, #88	; 0x58
 800a19e:	f200 833d 	bhi.w	800a81c <_vfprintf_r+0x7a8>
 800a1a2:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a1a6:	034d      	.short	0x034d
 800a1a8:	033b033b 	.word	0x033b033b
 800a1ac:	033b0357 	.word	0x033b0357
 800a1b0:	033b033b 	.word	0x033b033b
 800a1b4:	033b033b 	.word	0x033b033b
 800a1b8:	0390033b 	.word	0x0390033b
 800a1bc:	033b00d8 	.word	0x033b00d8
 800a1c0:	00dd0060 	.word	0x00dd0060
 800a1c4:	00f8033b 	.word	0x00f8033b
 800a1c8:	00ff00ff 	.word	0x00ff00ff
 800a1cc:	00ff00ff 	.word	0x00ff00ff
 800a1d0:	00ff00ff 	.word	0x00ff00ff
 800a1d4:	00ff00ff 	.word	0x00ff00ff
 800a1d8:	033b00ff 	.word	0x033b00ff
 800a1dc:	033b033b 	.word	0x033b033b
 800a1e0:	033b033b 	.word	0x033b033b
 800a1e4:	033b033b 	.word	0x033b033b
 800a1e8:	033b033b 	.word	0x033b033b
 800a1ec:	0110033b 	.word	0x0110033b
 800a1f0:	033b01da 	.word	0x033b01da
 800a1f4:	033b01da 	.word	0x033b01da
 800a1f8:	033b033b 	.word	0x033b033b
 800a1fc:	021d033b 	.word	0x021d033b
 800a200:	033b033b 	.word	0x033b033b
 800a204:	033b0224 	.word	0x033b0224
 800a208:	033b033b 	.word	0x033b033b
 800a20c:	033b033b 	.word	0x033b033b
 800a210:	033b023f 	.word	0x033b023f
 800a214:	0256033b 	.word	0x0256033b
 800a218:	033b033b 	.word	0x033b033b
 800a21c:	033b033b 	.word	0x033b033b
 800a220:	033b033b 	.word	0x033b033b
 800a224:	033b033b 	.word	0x033b033b
 800a228:	033b033b 	.word	0x033b033b
 800a22c:	03090325 	.word	0x03090325
 800a230:	01da01da 	.word	0x01da01da
 800a234:	031e01da 	.word	0x031e01da
 800a238:	033b0309 	.word	0x033b0309
 800a23c:	02b2033b 	.word	0x02b2033b
 800a240:	02be033b 	.word	0x02be033b
 800a244:	02ef02cc 	.word	0x02ef02cc
 800a248:	033b027c 	.word	0x033b027c
 800a24c:	033b0283 	.word	0x033b0283
 800a250:	033b035e 	.word	0x033b035e
 800a254:	0375033b 	.word	0x0375033b
 800a258:	9a06      	ldr	r2, [sp, #24]
 800a25a:	1aa5      	subs	r5, r4, r2
 800a25c:	e770      	b.n	800a140 <_vfprintf_r+0xcc>
 800a25e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a260:	900c      	str	r0, [sp, #48]	; 0x30
 800a262:	426d      	negs	r5, r5
 800a264:	9509      	str	r5, [sp, #36]	; 0x24
 800a266:	9c05      	ldr	r4, [sp, #20]
 800a268:	f044 0004 	orr.w	r0, r4, #4
 800a26c:	9005      	str	r0, [sp, #20]
 800a26e:	f893 8000 	ldrb.w	r8, [r3]
 800a272:	e790      	b.n	800a196 <_vfprintf_r+0x122>
 800a274:	9807      	ldr	r0, [sp, #28]
 800a276:	4649      	mov	r1, r9
 800a278:	f001 fe44 	bl	800bf04 <__swsetup_r>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d151      	bne.n	800a324 <_vfprintf_r+0x2b0>
 800a280:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a284:	f003 041a 	and.w	r4, r3, #26
 800a288:	2c0a      	cmp	r4, #10
 800a28a:	f47f af2c 	bne.w	800a0e6 <_vfprintf_r+0x72>
 800a28e:	f8b9 600e 	ldrh.w	r6, [r9, #14]
 800a292:	0432      	lsls	r2, r6, #16
 800a294:	f53f af27 	bmi.w	800a0e6 <_vfprintf_r+0x72>
 800a298:	f8d9 4064 	ldr.w	r4, [r9, #100]	; 0x64
 800a29c:	9807      	ldr	r0, [sp, #28]
 800a29e:	9449      	str	r4, [sp, #292]	; 0x124
 800a2a0:	462a      	mov	r2, r5
 800a2a2:	f8d9 501c 	ldr.w	r5, [r9, #28]
 800a2a6:	f8ad 60ce 	strh.w	r6, [sp, #206]	; 0xce
 800a2aa:	ac4a      	add	r4, sp, #296	; 0x128
 800a2ac:	9537      	str	r5, [sp, #220]	; 0xdc
 800a2ae:	f8d9 5024 	ldr.w	r5, [r9, #36]	; 0x24
 800a2b2:	9430      	str	r4, [sp, #192]	; 0xc0
 800a2b4:	f023 0e02 	bic.w	lr, r3, #2
 800a2b8:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800a2bc:	9434      	str	r4, [sp, #208]	; 0xd0
 800a2be:	a930      	add	r1, sp, #192	; 0xc0
 800a2c0:	2400      	movs	r4, #0
 800a2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2c4:	f8ad e0cc 	strh.w	lr, [sp, #204]	; 0xcc
 800a2c8:	9539      	str	r5, [sp, #228]	; 0xe4
 800a2ca:	9732      	str	r7, [sp, #200]	; 0xc8
 800a2cc:	9735      	str	r7, [sp, #212]	; 0xd4
 800a2ce:	9436      	str	r4, [sp, #216]	; 0xd8
 800a2d0:	f7ff fed0 	bl	800a074 <_vfprintf_r>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	900a      	str	r0, [sp, #40]	; 0x28
 800a2d8:	db09      	blt.n	800a2ee <_vfprintf_r+0x27a>
 800a2da:	9807      	ldr	r0, [sp, #28]
 800a2dc:	a930      	add	r1, sp, #192	; 0xc0
 800a2de:	f003 f92b 	bl	800d538 <_fflush_r>
 800a2e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	bf18      	it	ne
 800a2e8:	f04f 34ff 	movne.w	r4, #4294967295
 800a2ec:	940a      	str	r4, [sp, #40]	; 0x28
 800a2ee:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
 800a2f2:	f002 0140 	and.w	r1, r2, #64	; 0x40
 800a2f6:	b20b      	sxth	r3, r1
 800a2f8:	b1bb      	cbz	r3, 800a32a <_vfprintf_r+0x2b6>
 800a2fa:	f8b9 000c 	ldrh.w	r0, [r9, #12]
 800a2fe:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 800a302:	f8a9 200c 	strh.w	r2, [r9, #12]
 800a306:	e010      	b.n	800a32a <_vfprintf_r+0x2b6>
 800a308:	f8da 2008 	ldr.w	r2, [sl, #8]
 800a30c:	b122      	cbz	r2, 800a318 <_vfprintf_r+0x2a4>
 800a30e:	9807      	ldr	r0, [sp, #28]
 800a310:	4649      	mov	r1, r9
 800a312:	4652      	mov	r2, sl
 800a314:	f004 fd9a 	bl	800ee4c <__sprint_r>
 800a318:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800a31c:	f001 0340 	and.w	r3, r1, #64	; 0x40
 800a320:	b218      	sxth	r0, r3
 800a322:	b110      	cbz	r0, 800a32a <_vfprintf_r+0x2b6>
 800a324:	f04f 35ff 	mov.w	r5, #4294967295
 800a328:	950a      	str	r5, [sp, #40]	; 0x28
 800a32a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a32c:	b04b      	add	sp, #300	; 0x12c
 800a32e:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	9807      	ldr	r0, [sp, #28]
 800a338:	4649      	mov	r1, r9
 800a33a:	4652      	mov	r2, sl
 800a33c:	f004 fd86 	bl	800ee4c <__sprint_r>
 800a340:	2800      	cmp	r0, #0
 800a342:	d1e9      	bne.n	800a318 <_vfprintf_r+0x2a4>
 800a344:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800a348:	e70f      	b.n	800a16a <_vfprintf_r+0xf6>
 800a34a:	4620      	mov	r0, r4
 800a34c:	f003 f9d6 	bl	800d6fc <__sinit>
 800a350:	e6a9      	b.n	800a0a6 <_vfprintf_r+0x32>
 800a352:	9c06      	ldr	r4, [sp, #24]
 800a354:	e70c      	b.n	800a170 <_vfprintf_r+0xfc>
 800a356:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800a35a:	f893 8000 	ldrb.w	r8, [r3]
 800a35e:	e71a      	b.n	800a196 <_vfprintf_r+0x122>
 800a360:	461c      	mov	r4, r3
 800a362:	f814 8b01 	ldrb.w	r8, [r4], #1
 800a366:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 800a36a:	f001 85ac 	beq.w	800bec6 <_vfprintf_r+0x1e52>
 800a36e:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 800a372:	2600      	movs	r6, #0
 800a374:	2809      	cmp	r0, #9
 800a376:	f201 84e1 	bhi.w	800bd3c <_vfprintf_r+0x1cc8>
 800a37a:	f814 8b01 	ldrb.w	r8, [r4], #1
 800a37e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800a382:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800a386:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 800a38a:	2809      	cmp	r0, #9
 800a38c:	4623      	mov	r3, r4
 800a38e:	d9f4      	bls.n	800a37a <_vfprintf_r+0x306>
 800a390:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800a394:	e700      	b.n	800a198 <_vfprintf_r+0x124>
 800a396:	9c05      	ldr	r4, [sp, #20]
 800a398:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 800a39c:	9005      	str	r0, [sp, #20]
 800a39e:	f893 8000 	ldrb.w	r8, [r3]
 800a3a2:	e6f8      	b.n	800a196 <_vfprintf_r+0x122>
 800a3a4:	461c      	mov	r4, r3
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800a3ac:	f814 8b01 	ldrb.w	r8, [r4], #1
 800a3b0:	f1a8 0530 	sub.w	r5, r8, #48	; 0x30
 800a3b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3b8:	2d09      	cmp	r5, #9
 800a3ba:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a3be:	4623      	mov	r3, r4
 800a3c0:	d9f2      	bls.n	800a3a8 <_vfprintf_r+0x334>
 800a3c2:	9009      	str	r0, [sp, #36]	; 0x24
 800a3c4:	e6e8      	b.n	800a198 <_vfprintf_r+0x124>
 800a3c6:	9306      	str	r3, [sp, #24]
 800a3c8:	9b05      	ldr	r3, [sp, #20]
 800a3ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a3ce:	f043 0710 	orr.w	r7, r3, #16
 800a3d2:	9705      	str	r7, [sp, #20]
 800a3d4:	9d05      	ldr	r5, [sp, #20]
 800a3d6:	06ac      	lsls	r4, r5, #26
 800a3d8:	46b6      	mov	lr, r6
 800a3da:	f140 81f5 	bpl.w	800a7c8 <_vfprintf_r+0x754>
 800a3de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3e0:	1dec      	adds	r4, r5, #7
 800a3e2:	f024 0107 	bic.w	r1, r4, #7
 800a3e6:	e9d1 2300 	ldrd	r2, r3, [r1]
 800a3ea:	3108      	adds	r1, #8
 800a3ec:	910c      	str	r1, [sp, #48]	; 0x30
 800a3ee:	4614      	mov	r4, r2
 800a3f0:	461d      	mov	r5, r3
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	f173 0100 	sbcs.w	r1, r3, #0
 800a3f8:	f2c1 814c 	blt.w	800b694 <_vfprintf_r+0x1620>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f1be 0f00 	cmp.w	lr, #0
 800a402:	db03      	blt.n	800a40c <_vfprintf_r+0x398>
 800a404:	9805      	ldr	r0, [sp, #20]
 800a406:	f020 0780 	bic.w	r7, r0, #128	; 0x80
 800a40a:	9705      	str	r7, [sp, #20]
 800a40c:	ea54 0105 	orrs.w	r1, r4, r5
 800a410:	f040 841e 	bne.w	800ac50 <_vfprintf_r+0xbdc>
 800a414:	f1be 0f00 	cmp.w	lr, #0
 800a418:	f040 841a 	bne.w	800ac50 <_vfprintf_r+0xbdc>
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f040 862d 	bne.w	800b07c <_vfprintf_r+0x1008>
 800a422:	9d05      	ldr	r5, [sp, #20]
 800a424:	07e9      	lsls	r1, r5, #31
 800a426:	f140 8629 	bpl.w	800b07c <_vfprintf_r+0x1008>
 800a42a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a42c:	2430      	movs	r4, #48	; 0x30
 800a42e:	f88d 40bf 	strb.w	r4, [sp, #191]	; 0xbf
 800a432:	910b      	str	r1, [sp, #44]	; 0x2c
 800a434:	f10d 08bf 	add.w	r8, sp, #191	; 0xbf
 800a438:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a43a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800a43e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800a442:	4574      	cmp	r4, lr
 800a444:	bfb8      	it	lt
 800a446:	4674      	movlt	r4, lr
 800a448:	2100      	movs	r1, #0
 800a44a:	9408      	str	r4, [sp, #32]
 800a44c:	9112      	str	r1, [sp, #72]	; 0x48
 800a44e:	b113      	cbz	r3, 800a456 <_vfprintf_r+0x3e2>
 800a450:	9d08      	ldr	r5, [sp, #32]
 800a452:	1c68      	adds	r0, r5, #1
 800a454:	9008      	str	r0, [sp, #32]
 800a456:	9d05      	ldr	r5, [sp, #20]
 800a458:	f015 0102 	ands.w	r1, r5, #2
 800a45c:	910f      	str	r1, [sp, #60]	; 0x3c
 800a45e:	d002      	beq.n	800a466 <_vfprintf_r+0x3f2>
 800a460:	9c08      	ldr	r4, [sp, #32]
 800a462:	3402      	adds	r4, #2
 800a464:	9408      	str	r4, [sp, #32]
 800a466:	9d05      	ldr	r5, [sp, #20]
 800a468:	f015 0784 	ands.w	r7, r5, #132	; 0x84
 800a46c:	f040 8241 	bne.w	800a8f2 <_vfprintf_r+0x87e>
 800a470:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a472:	9a08      	ldr	r2, [sp, #32]
 800a474:	1aac      	subs	r4, r5, r2
 800a476:	2c00      	cmp	r4, #0
 800a478:	f340 823b 	ble.w	800a8f2 <_vfprintf_r+0x87e>
 800a47c:	2c10      	cmp	r4, #16
 800a47e:	f341 833a 	ble.w	800baf6 <_vfprintf_r+0x1a82>
 800a482:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a486:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a48a:	4dba      	ldr	r5, [pc, #744]	; (800a774 <_vfprintf_r+0x700>)
 800a48c:	2610      	movs	r6, #16
 800a48e:	1c42      	adds	r2, r0, #1
 800a490:	1999      	adds	r1, r3, r6
 800a492:	f1a4 0c11 	sub.w	ip, r4, #17
 800a496:	2a07      	cmp	r2, #7
 800a498:	e88b 0060 	stmia.w	fp, {r5, r6}
 800a49c:	f3cc 1300 	ubfx	r3, ip, #4, #1
 800a4a0:	f8ca 1008 	str.w	r1, [sl, #8]
 800a4a4:	f8ca 2004 	str.w	r2, [sl, #4]
 800a4a8:	f300 8627 	bgt.w	800b0fa <_vfprintf_r+0x1086>
 800a4ac:	f10b 0b08 	add.w	fp, fp, #8
 800a4b0:	3c10      	subs	r4, #16
 800a4b2:	2c10      	cmp	r4, #16
 800a4b4:	f340 837f 	ble.w	800abb6 <_vfprintf_r+0xb42>
 800a4b8:	b1b3      	cbz	r3, 800a4e8 <_vfprintf_r+0x474>
 800a4ba:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a4be:	f8da 0008 	ldr.w	r0, [sl, #8]
 800a4c2:	f8cb 5000 	str.w	r5, [fp]
 800a4c6:	1c4a      	adds	r2, r1, #1
 800a4c8:	3010      	adds	r0, #16
 800a4ca:	2a07      	cmp	r2, #7
 800a4cc:	f8cb 6004 	str.w	r6, [fp, #4]
 800a4d0:	f8ca 0008 	str.w	r0, [sl, #8]
 800a4d4:	f8ca 2004 	str.w	r2, [sl, #4]
 800a4d8:	f300 861d 	bgt.w	800b116 <_vfprintf_r+0x10a2>
 800a4dc:	f10b 0b08 	add.w	fp, fp, #8
 800a4e0:	3c10      	subs	r4, #16
 800a4e2:	2c10      	cmp	r4, #16
 800a4e4:	f340 8367 	ble.w	800abb6 <_vfprintf_r+0xb42>
 800a4e8:	9718      	str	r7, [sp, #96]	; 0x60
 800a4ea:	462f      	mov	r7, r5
 800a4ec:	9d07      	ldr	r5, [sp, #28]
 800a4ee:	e019      	b.n	800a524 <_vfprintf_r+0x4b0>
 800a4f0:	f10b 0b08 	add.w	fp, fp, #8
 800a4f4:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a4f8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a4fc:	f8cb 7000 	str.w	r7, [fp]
 800a500:	1c50      	adds	r0, r2, #1
 800a502:	3310      	adds	r3, #16
 800a504:	3c10      	subs	r4, #16
 800a506:	2807      	cmp	r0, #7
 800a508:	f8cb 6004 	str.w	r6, [fp, #4]
 800a50c:	f8ca 3008 	str.w	r3, [sl, #8]
 800a510:	f8ca 0004 	str.w	r0, [sl, #4]
 800a514:	f300 833f 	bgt.w	800ab96 <_vfprintf_r+0xb22>
 800a518:	3c10      	subs	r4, #16
 800a51a:	2c10      	cmp	r4, #16
 800a51c:	f10b 0b08 	add.w	fp, fp, #8
 800a520:	f340 8347 	ble.w	800abb2 <_vfprintf_r+0xb3e>
 800a524:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a528:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a52c:	f8cb 7000 	str.w	r7, [fp]
 800a530:	1c41      	adds	r1, r0, #1
 800a532:	3310      	adds	r3, #16
 800a534:	2907      	cmp	r1, #7
 800a536:	f8cb 6004 	str.w	r6, [fp, #4]
 800a53a:	f8ca 3008 	str.w	r3, [sl, #8]
 800a53e:	f8ca 1004 	str.w	r1, [sl, #4]
 800a542:	ddd5      	ble.n	800a4f0 <_vfprintf_r+0x47c>
 800a544:	4628      	mov	r0, r5
 800a546:	4649      	mov	r1, r9
 800a548:	4652      	mov	r2, sl
 800a54a:	f004 fc7f 	bl	800ee4c <__sprint_r>
 800a54e:	2800      	cmp	r0, #0
 800a550:	f47f aee2 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800a554:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800a558:	e7cc      	b.n	800a4f4 <_vfprintf_r+0x480>
 800a55a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a55c:	9306      	str	r3, [sp, #24]
 800a55e:	46b6      	mov	lr, r6
 800a560:	9e05      	ldr	r6, [sp, #20]
 800a562:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a566:	1dc3      	adds	r3, r0, #7
 800a568:	f023 0107 	bic.w	r1, r3, #7
 800a56c:	0732      	lsls	r2, r6, #28
 800a56e:	bf53      	iteet	pl
 800a570:	f101 0608 	addpl.w	r6, r1, #8
 800a574:	f101 0508 	addmi.w	r5, r1, #8
 800a578:	950c      	strmi	r5, [sp, #48]	; 0x30
 800a57a:	960c      	strpl	r6, [sp, #48]	; 0x30
 800a57c:	680e      	ldr	r6, [r1, #0]
 800a57e:	684c      	ldr	r4, [r1, #4]
 800a580:	f8cd e008 	str.w	lr, [sp, #8]
 800a584:	4632      	mov	r2, r6
 800a586:	4623      	mov	r3, r4
 800a588:	4630      	mov	r0, r6
 800a58a:	4621      	mov	r1, r4
 800a58c:	ec43 2b10 	vmov	d0, r2, r3
 800a590:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800a594:	f7ff fc06 	bl	8009da4 <__fpclassifyd>
 800a598:	2801      	cmp	r0, #1
 800a59a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a59e:	f041 8085 	bne.w	800b6ac <_vfprintf_r+0x1638>
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f7fe ff35 	bl	8009418 <__aeabi_dcmplt>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f041 8383 	bne.w	800bcba <_vfprintf_r+0x1c46>
 800a5b4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800a5b8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a5ba:	9905      	ldr	r1, [sp, #20]
 800a5bc:	4f6e      	ldr	r7, [pc, #440]	; (800a778 <_vfprintf_r+0x704>)
 800a5be:	4d6f      	ldr	r5, [pc, #444]	; (800a77c <_vfprintf_r+0x708>)
 800a5c0:	2003      	movs	r0, #3
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	9008      	str	r0, [sp, #32]
 800a5c6:	920e      	str	r2, [sp, #56]	; 0x38
 800a5c8:	2c47      	cmp	r4, #71	; 0x47
 800a5ca:	bfcc      	ite	gt
 800a5cc:	46a8      	movgt	r8, r5
 800a5ce:	46b8      	movle	r8, r7
 800a5d0:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800a5d4:	2403      	movs	r4, #3
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	9005      	str	r0, [sp, #20]
 800a5da:	940b      	str	r4, [sp, #44]	; 0x2c
 800a5dc:	9212      	str	r2, [sp, #72]	; 0x48
 800a5de:	e736      	b.n	800a44e <_vfprintf_r+0x3da>
 800a5e0:	9d05      	ldr	r5, [sp, #20]
 800a5e2:	f045 0508 	orr.w	r5, r5, #8
 800a5e6:	9505      	str	r5, [sp, #20]
 800a5e8:	f893 8000 	ldrb.w	r8, [r3]
 800a5ec:	e5d3      	b.n	800a196 <_vfprintf_r+0x122>
 800a5ee:	9c05      	ldr	r4, [sp, #20]
 800a5f0:	9306      	str	r3, [sp, #24]
 800a5f2:	f044 0110 	orr.w	r1, r4, #16
 800a5f6:	9105      	str	r1, [sp, #20]
 800a5f8:	9f05      	ldr	r7, [sp, #20]
 800a5fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a5fe:	f017 0320 	ands.w	r3, r7, #32
 800a602:	46b6      	mov	lr, r6
 800a604:	f000 80a4 	beq.w	800a750 <_vfprintf_r+0x6dc>
 800a608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a60a:	1dd9      	adds	r1, r3, #7
 800a60c:	f021 0707 	bic.w	r7, r1, #7
 800a610:	f107 0408 	add.w	r4, r7, #8
 800a614:	940c      	str	r4, [sp, #48]	; 0x30
 800a616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a61a:	2300      	movs	r3, #0
 800a61c:	2200      	movs	r2, #0
 800a61e:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800a622:	e6ec      	b.n	800a3fe <_vfprintf_r+0x38a>
 800a624:	9c05      	ldr	r4, [sp, #20]
 800a626:	9306      	str	r3, [sp, #24]
 800a628:	f044 0010 	orr.w	r0, r4, #16
 800a62c:	9005      	str	r0, [sp, #20]
 800a62e:	9d05      	ldr	r5, [sp, #20]
 800a630:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a634:	06ad      	lsls	r5, r5, #26
 800a636:	46b6      	mov	lr, r6
 800a638:	f140 811b 	bpl.w	800a872 <_vfprintf_r+0x7fe>
 800a63c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a63e:	1dea      	adds	r2, r5, #7
 800a640:	f022 0007 	bic.w	r0, r2, #7
 800a644:	f100 0308 	add.w	r3, r0, #8
 800a648:	930c      	str	r3, [sp, #48]	; 0x30
 800a64a:	e9d0 4500 	ldrd	r4, r5, [r0]
 800a64e:	2301      	movs	r3, #1
 800a650:	e7e4      	b.n	800a61c <_vfprintf_r+0x5a8>
 800a652:	9805      	ldr	r0, [sp, #20]
 800a654:	4c4a      	ldr	r4, [pc, #296]	; (800a780 <_vfprintf_r+0x70c>)
 800a656:	9306      	str	r3, [sp, #24]
 800a658:	0681      	lsls	r1, r0, #26
 800a65a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a65e:	46b6      	mov	lr, r6
 800a660:	9416      	str	r4, [sp, #88]	; 0x58
 800a662:	f140 811f 	bpl.w	800a8a4 <_vfprintf_r+0x830>
 800a666:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a668:	1dcb      	adds	r3, r1, #7
 800a66a:	f023 0007 	bic.w	r0, r3, #7
 800a66e:	f100 0508 	add.w	r5, r0, #8
 800a672:	950c      	str	r5, [sp, #48]	; 0x30
 800a674:	e9d0 4500 	ldrd	r4, r5, [r0]
 800a678:	9905      	ldr	r1, [sp, #20]
 800a67a:	07cf      	lsls	r7, r1, #31
 800a67c:	f140 8121 	bpl.w	800a8c2 <_vfprintf_r+0x84e>
 800a680:	ea54 0205 	orrs.w	r2, r4, r5
 800a684:	f000 811d 	beq.w	800a8c2 <_vfprintf_r+0x84e>
 800a688:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a68a:	f041 0302 	orr.w	r3, r1, #2
 800a68e:	2730      	movs	r7, #48	; 0x30
 800a690:	9305      	str	r3, [sp, #20]
 800a692:	f88d 706c 	strb.w	r7, [sp, #108]	; 0x6c
 800a696:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800a69a:	2302      	movs	r3, #2
 800a69c:	e7be      	b.n	800a61c <_vfprintf_r+0x5a8>
 800a69e:	9805      	ldr	r0, [sp, #20]
 800a6a0:	f040 0520 	orr.w	r5, r0, #32
 800a6a4:	9505      	str	r5, [sp, #20]
 800a6a6:	f893 8000 	ldrb.w	r8, [r3]
 800a6aa:	e574      	b.n	800a196 <_vfprintf_r+0x122>
 800a6ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6ae:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a6b2:	2400      	movs	r4, #0
 800a6b4:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
 800a6b8:	f8d5 8000 	ldr.w	r8, [r5]
 800a6bc:	9306      	str	r3, [sp, #24]
 800a6be:	46b6      	mov	lr, r6
 800a6c0:	1d2f      	adds	r7, r5, #4
 800a6c2:	f1b8 0f00 	cmp.w	r8, #0
 800a6c6:	f001 828c 	beq.w	800bbe2 <_vfprintf_r+0x1b6e>
 800a6ca:	2e00      	cmp	r6, #0
 800a6cc:	4640      	mov	r0, r8
 800a6ce:	f2c1 81f8 	blt.w	800bac2 <_vfprintf_r+0x1a4e>
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4632      	mov	r2, r6
 800a6d6:	9602      	str	r6, [sp, #8]
 800a6d8:	f003 fce0 	bl	800e09c <memchr>
 800a6dc:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	f001 831f 	beq.w	800bd24 <_vfprintf_r+0x1cb0>
 800a6e6:	ebc8 0300 	rsb	r3, r8, r0
 800a6ea:	4563      	cmp	r3, ip
 800a6ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6ee:	940e      	str	r4, [sp, #56]	; 0x38
 800a6f0:	f341 818a 	ble.w	800ba08 <_vfprintf_r+0x1994>
 800a6f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a6f6:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800a6fa:	970c      	str	r7, [sp, #48]	; 0x30
 800a6fc:	ea2c 74ec 	bic.w	r4, ip, ip, asr #31
 800a700:	9408      	str	r4, [sp, #32]
 800a702:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800a706:	9512      	str	r5, [sp, #72]	; 0x48
 800a708:	e6a1      	b.n	800a44e <_vfprintf_r+0x3da>
 800a70a:	f893 8000 	ldrb.w	r8, [r3]
 800a70e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800a712:	4618      	mov	r0, r3
 800a714:	f001 81ae 	beq.w	800ba74 <_vfprintf_r+0x1a00>
 800a718:	9c05      	ldr	r4, [sp, #20]
 800a71a:	f044 0010 	orr.w	r0, r4, #16
 800a71e:	9005      	str	r0, [sp, #20]
 800a720:	e539      	b.n	800a196 <_vfprintf_r+0x122>
 800a722:	9c05      	ldr	r4, [sp, #20]
 800a724:	9306      	str	r3, [sp, #24]
 800a726:	06a2      	lsls	r2, r4, #26
 800a728:	f141 806b 	bpl.w	800b802 <_vfprintf_r+0x178e>
 800a72c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a72e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	17d1      	asrs	r1, r2, #31
 800a734:	1d25      	adds	r5, r4, #4
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	6059      	str	r1, [r3, #4]
 800a73a:	950c      	str	r5, [sp, #48]	; 0x30
 800a73c:	e4ec      	b.n	800a118 <_vfprintf_r+0xa4>
 800a73e:	9f05      	ldr	r7, [sp, #20]
 800a740:	9306      	str	r3, [sp, #24]
 800a742:	f017 0320 	ands.w	r3, r7, #32
 800a746:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a74a:	46b6      	mov	lr, r6
 800a74c:	f47f af5c 	bne.w	800a608 <_vfprintf_r+0x594>
 800a750:	9d05      	ldr	r5, [sp, #20]
 800a752:	f015 0210 	ands.w	r2, r5, #16
 800a756:	f040 860f 	bne.w	800b378 <_vfprintf_r+0x1304>
 800a75a:	9805      	ldr	r0, [sp, #20]
 800a75c:	f010 0340 	ands.w	r3, r0, #64	; 0x40
 800a760:	f000 860a 	beq.w	800b378 <_vfprintf_r+0x1304>
 800a764:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a766:	1d0f      	adds	r7, r1, #4
 800a768:	880c      	ldrh	r4, [r1, #0]
 800a76a:	970c      	str	r7, [sp, #48]	; 0x30
 800a76c:	4613      	mov	r3, r2
 800a76e:	2500      	movs	r5, #0
 800a770:	e754      	b.n	800a61c <_vfprintf_r+0x5a8>
 800a772:	bf00      	nop
 800a774:	0800fcd4 	.word	0x0800fcd4
 800a778:	0800fce4 	.word	0x0800fce4
 800a77c:	0800fce8 	.word	0x0800fce8
 800a780:	0800fcf4 	.word	0x0800fcf4
 800a784:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	9805      	ldr	r0, [sp, #20]
 800a78c:	9306      	str	r3, [sp, #24]
 800a78e:	4baa      	ldr	r3, [pc, #680]	; (800aa38 <_vfprintf_r+0x9c4>)
 800a790:	f04f 0878 	mov.w	r8, #120	; 0x78
 800a794:	1d15      	adds	r5, r2, #4
 800a796:	460c      	mov	r4, r1
 800a798:	f040 0702 	orr.w	r7, r0, #2
 800a79c:	2130      	movs	r1, #48	; 0x30
 800a79e:	9316      	str	r3, [sp, #88]	; 0x58
 800a7a0:	950c      	str	r5, [sp, #48]	; 0x30
 800a7a2:	46b6      	mov	lr, r6
 800a7a4:	2500      	movs	r5, #0
 800a7a6:	9705      	str	r7, [sp, #20]
 800a7a8:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800a7ac:	f88d 806d 	strb.w	r8, [sp, #109]	; 0x6d
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a7b6:	e731      	b.n	800a61c <_vfprintf_r+0x5a8>
 800a7b8:	9d05      	ldr	r5, [sp, #20]
 800a7ba:	9306      	str	r3, [sp, #24]
 800a7bc:	06ac      	lsls	r4, r5, #26
 800a7be:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a7c2:	46b6      	mov	lr, r6
 800a7c4:	f53f ae0b 	bmi.w	800a3de <_vfprintf_r+0x36a>
 800a7c8:	9c05      	ldr	r4, [sp, #20]
 800a7ca:	06e0      	lsls	r0, r4, #27
 800a7cc:	f141 8030 	bpl.w	800b830 <_vfprintf_r+0x17bc>
 800a7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a7d6:	17d5      	asrs	r5, r2, #31
 800a7d8:	1d07      	adds	r7, r0, #4
 800a7da:	4614      	mov	r4, r2
 800a7dc:	462b      	mov	r3, r5
 800a7de:	970c      	str	r7, [sp, #48]	; 0x30
 800a7e0:	e607      	b.n	800a3f2 <_vfprintf_r+0x37e>
 800a7e2:	9c05      	ldr	r4, [sp, #20]
 800a7e4:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 800a7e8:	9005      	str	r0, [sp, #20]
 800a7ea:	f893 8000 	ldrb.w	r8, [r3]
 800a7ee:	e4d2      	b.n	800a196 <_vfprintf_r+0x122>
 800a7f0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a7f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	9306      	str	r3, [sp, #24]
 800a7f8:	2401      	movs	r4, #1
 800a7fa:	1d0b      	adds	r3, r1, #4
 800a7fc:	2500      	movs	r5, #0
 800a7fe:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a802:	9408      	str	r4, [sp, #32]
 800a804:	930c      	str	r3, [sp, #48]	; 0x30
 800a806:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800a80a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800a80e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a810:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 800a814:	2000      	movs	r0, #0
 800a816:	900e      	str	r0, [sp, #56]	; 0x38
 800a818:	9012      	str	r0, [sp, #72]	; 0x48
 800a81a:	e61c      	b.n	800a456 <_vfprintf_r+0x3e2>
 800a81c:	4644      	mov	r4, r8
 800a81e:	9306      	str	r3, [sp, #24]
 800a820:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a824:	2c00      	cmp	r4, #0
 800a826:	f43f ad6f 	beq.w	800a308 <_vfprintf_r+0x294>
 800a82a:	2701      	movs	r7, #1
 800a82c:	2300      	movs	r3, #0
 800a82e:	f88d 8098 	strb.w	r8, [sp, #152]	; 0x98
 800a832:	9708      	str	r7, [sp, #32]
 800a834:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a838:	970b      	str	r7, [sp, #44]	; 0x2c
 800a83a:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 800a83e:	e7e9      	b.n	800a814 <_vfprintf_r+0x7a0>
 800a840:	f89d 406b 	ldrb.w	r4, [sp, #107]	; 0x6b
 800a844:	2c00      	cmp	r4, #0
 800a846:	f041 8001 	bne.w	800b84c <_vfprintf_r+0x17d8>
 800a84a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800a84e:	f893 8000 	ldrb.w	r8, [r3]
 800a852:	e4a0      	b.n	800a196 <_vfprintf_r+0x122>
 800a854:	9d05      	ldr	r5, [sp, #20]
 800a856:	f045 0501 	orr.w	r5, r5, #1
 800a85a:	9505      	str	r5, [sp, #20]
 800a85c:	f893 8000 	ldrb.w	r8, [r3]
 800a860:	e499      	b.n	800a196 <_vfprintf_r+0x122>
 800a862:	9d05      	ldr	r5, [sp, #20]
 800a864:	9306      	str	r3, [sp, #24]
 800a866:	06ad      	lsls	r5, r5, #26
 800a868:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a86c:	46b6      	mov	lr, r6
 800a86e:	f53f aee5 	bmi.w	800a63c <_vfprintf_r+0x5c8>
 800a872:	9905      	ldr	r1, [sp, #20]
 800a874:	06cc      	lsls	r4, r1, #27
 800a876:	f100 84fa 	bmi.w	800b26e <_vfprintf_r+0x11fa>
 800a87a:	9f05      	ldr	r7, [sp, #20]
 800a87c:	0678      	lsls	r0, r7, #25
 800a87e:	f140 84f6 	bpl.w	800b26e <_vfprintf_r+0x11fa>
 800a882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a884:	1d10      	adds	r0, r2, #4
 800a886:	8814      	ldrh	r4, [r2, #0]
 800a888:	900c      	str	r0, [sp, #48]	; 0x30
 800a88a:	2301      	movs	r3, #1
 800a88c:	2500      	movs	r5, #0
 800a88e:	e6c5      	b.n	800a61c <_vfprintf_r+0x5a8>
 800a890:	9805      	ldr	r0, [sp, #20]
 800a892:	4f69      	ldr	r7, [pc, #420]	; (800aa38 <_vfprintf_r+0x9c4>)
 800a894:	9306      	str	r3, [sp, #24]
 800a896:	0681      	lsls	r1, r0, #26
 800a898:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a89c:	46b6      	mov	lr, r6
 800a89e:	9716      	str	r7, [sp, #88]	; 0x58
 800a8a0:	f53f aee1 	bmi.w	800a666 <_vfprintf_r+0x5f2>
 800a8a4:	9f05      	ldr	r7, [sp, #20]
 800a8a6:	06fa      	lsls	r2, r7, #27
 800a8a8:	f140 87b7 	bpl.w	800b81a <_vfprintf_r+0x17a6>
 800a8ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a8b2:	9905      	ldr	r1, [sp, #20]
 800a8b4:	1d3a      	adds	r2, r7, #4
 800a8b6:	2500      	movs	r5, #0
 800a8b8:	07cf      	lsls	r7, r1, #31
 800a8ba:	461c      	mov	r4, r3
 800a8bc:	920c      	str	r2, [sp, #48]	; 0x30
 800a8be:	f53f aedf 	bmi.w	800a680 <_vfprintf_r+0x60c>
 800a8c2:	2302      	movs	r3, #2
 800a8c4:	e6aa      	b.n	800a61c <_vfprintf_r+0x5a8>
 800a8c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a8c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a8ca:	6824      	ldr	r4, [r4, #0]
 800a8cc:	3004      	adds	r0, #4
 800a8ce:	2c00      	cmp	r4, #0
 800a8d0:	9409      	str	r4, [sp, #36]	; 0x24
 800a8d2:	f6ff acc4 	blt.w	800a25e <_vfprintf_r+0x1ea>
 800a8d6:	f893 8000 	ldrb.w	r8, [r3]
 800a8da:	900c      	str	r0, [sp, #48]	; 0x30
 800a8dc:	e45b      	b.n	800a196 <_vfprintf_r+0x122>
 800a8de:	9807      	ldr	r0, [sp, #28]
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	4652      	mov	r2, sl
 800a8e4:	f004 fab2 	bl	800ee4c <__sprint_r>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f47f ad15 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800a8ee:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800a8f2:	f89d 106b 	ldrb.w	r1, [sp, #107]	; 0x6b
 800a8f6:	b1a9      	cbz	r1, 800a924 <_vfprintf_r+0x8b0>
 800a8f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a8fc:	f8da 2008 	ldr.w	r2, [sl, #8]
 800a900:	3301      	adds	r3, #1
 800a902:	3201      	adds	r2, #1
 800a904:	2101      	movs	r1, #1
 800a906:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
 800a90a:	2b07      	cmp	r3, #7
 800a90c:	f8cb 0000 	str.w	r0, [fp]
 800a910:	f8cb 1004 	str.w	r1, [fp, #4]
 800a914:	f8ca 2008 	str.w	r2, [sl, #8]
 800a918:	f8ca 3004 	str.w	r3, [sl, #4]
 800a91c:	f300 83a3 	bgt.w	800b066 <_vfprintf_r+0xff2>
 800a920:	f10b 0b08 	add.w	fp, fp, #8
 800a924:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a926:	b1a0      	cbz	r0, 800a952 <_vfprintf_r+0x8de>
 800a928:	f8da 2008 	ldr.w	r2, [sl, #8]
 800a92c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a930:	1c90      	adds	r0, r2, #2
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	a91b      	add	r1, sp, #108	; 0x6c
 800a936:	2302      	movs	r3, #2
 800a938:	2a07      	cmp	r2, #7
 800a93a:	f8cb 1000 	str.w	r1, [fp]
 800a93e:	f8cb 3004 	str.w	r3, [fp, #4]
 800a942:	f8ca 0008 	str.w	r0, [sl, #8]
 800a946:	f8ca 2004 	str.w	r2, [sl, #4]
 800a94a:	f300 8381 	bgt.w	800b050 <_vfprintf_r+0xfdc>
 800a94e:	f10b 0b08 	add.w	fp, fp, #8
 800a952:	2f80      	cmp	r7, #128	; 0x80
 800a954:	f000 8258 	beq.w	800ae08 <_vfprintf_r+0xd94>
 800a958:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a95a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a95c:	1b2c      	subs	r4, r5, r4
 800a95e:	2c00      	cmp	r4, #0
 800a960:	f340 808e 	ble.w	800aa80 <_vfprintf_r+0xa0c>
 800a964:	2c10      	cmp	r4, #16
 800a966:	f340 878a 	ble.w	800b87e <_vfprintf_r+0x180a>
 800a96a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a96e:	f8da 1008 	ldr.w	r1, [sl, #8]
 800a972:	4d32      	ldr	r5, [pc, #200]	; (800aa3c <_vfprintf_r+0x9c8>)
 800a974:	2610      	movs	r6, #16
 800a976:	1c43      	adds	r3, r0, #1
 800a978:	f1a4 0711 	sub.w	r7, r4, #17
 800a97c:	198a      	adds	r2, r1, r6
 800a97e:	2b07      	cmp	r3, #7
 800a980:	e88b 0060 	stmia.w	fp, {r5, r6}
 800a984:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800a988:	f8ca 2008 	str.w	r2, [sl, #8]
 800a98c:	f8ca 3004 	str.w	r3, [sl, #4]
 800a990:	f300 833d 	bgt.w	800b00e <_vfprintf_r+0xf9a>
 800a994:	f10b 0b08 	add.w	fp, fp, #8
 800a998:	3c10      	subs	r4, #16
 800a99a:	2c10      	cmp	r4, #16
 800a99c:	dd5d      	ble.n	800aa5a <_vfprintf_r+0x9e6>
 800a99e:	b1af      	cbz	r7, 800a9cc <_vfprintf_r+0x958>
 800a9a0:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a9a4:	f8da 1008 	ldr.w	r1, [sl, #8]
 800a9a8:	f8cb 5000 	str.w	r5, [fp]
 800a9ac:	1c42      	adds	r2, r0, #1
 800a9ae:	3110      	adds	r1, #16
 800a9b0:	2a07      	cmp	r2, #7
 800a9b2:	f8cb 6004 	str.w	r6, [fp, #4]
 800a9b6:	f8ca 1008 	str.w	r1, [sl, #8]
 800a9ba:	f8ca 2004 	str.w	r2, [sl, #4]
 800a9be:	f300 8331 	bgt.w	800b024 <_vfprintf_r+0xfb0>
 800a9c2:	f10b 0b08 	add.w	fp, fp, #8
 800a9c6:	3c10      	subs	r4, #16
 800a9c8:	2c10      	cmp	r4, #16
 800a9ca:	dd46      	ble.n	800aa5a <_vfprintf_r+0x9e6>
 800a9cc:	9f07      	ldr	r7, [sp, #28]
 800a9ce:	e017      	b.n	800aa00 <_vfprintf_r+0x98c>
 800a9d0:	f10b 0b08 	add.w	fp, fp, #8
 800a9d4:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a9d8:	f8da 2008 	ldr.w	r2, [sl, #8]
 800a9dc:	f8cb 5000 	str.w	r5, [fp]
 800a9e0:	1c4b      	adds	r3, r1, #1
 800a9e2:	3210      	adds	r2, #16
 800a9e4:	3c10      	subs	r4, #16
 800a9e6:	2b07      	cmp	r3, #7
 800a9e8:	f8cb 6004 	str.w	r6, [fp, #4]
 800a9ec:	f8ca 2008 	str.w	r2, [sl, #8]
 800a9f0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a9f4:	dc24      	bgt.n	800aa40 <_vfprintf_r+0x9cc>
 800a9f6:	3c10      	subs	r4, #16
 800a9f8:	2c10      	cmp	r4, #16
 800a9fa:	f10b 0b08 	add.w	fp, fp, #8
 800a9fe:	dd2c      	ble.n	800aa5a <_vfprintf_r+0x9e6>
 800aa00:	f8da 3004 	ldr.w	r3, [sl, #4]
 800aa04:	f8da 1008 	ldr.w	r1, [sl, #8]
 800aa08:	f8cb 5000 	str.w	r5, [fp]
 800aa0c:	1c58      	adds	r0, r3, #1
 800aa0e:	3110      	adds	r1, #16
 800aa10:	2807      	cmp	r0, #7
 800aa12:	f8cb 6004 	str.w	r6, [fp, #4]
 800aa16:	f8ca 1008 	str.w	r1, [sl, #8]
 800aa1a:	f8ca 0004 	str.w	r0, [sl, #4]
 800aa1e:	ddd7      	ble.n	800a9d0 <_vfprintf_r+0x95c>
 800aa20:	4638      	mov	r0, r7
 800aa22:	4649      	mov	r1, r9
 800aa24:	4652      	mov	r2, sl
 800aa26:	f004 fa11 	bl	800ee4c <__sprint_r>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	f47f ac74 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800aa30:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800aa34:	e7ce      	b.n	800a9d4 <_vfprintf_r+0x960>
 800aa36:	bf00      	nop
 800aa38:	0800fd08 	.word	0x0800fd08
 800aa3c:	0800fd28 	.word	0x0800fd28
 800aa40:	4638      	mov	r0, r7
 800aa42:	4649      	mov	r1, r9
 800aa44:	4652      	mov	r2, sl
 800aa46:	f004 fa01 	bl	800ee4c <__sprint_r>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	f47f ac64 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800aa50:	3c10      	subs	r4, #16
 800aa52:	2c10      	cmp	r4, #16
 800aa54:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800aa58:	dcd2      	bgt.n	800aa00 <_vfprintf_r+0x98c>
 800aa5a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800aa5e:	f8da 0008 	ldr.w	r0, [sl, #8]
 800aa62:	f8cb 5000 	str.w	r5, [fp]
 800aa66:	1c4b      	adds	r3, r1, #1
 800aa68:	1902      	adds	r2, r0, r4
 800aa6a:	2b07      	cmp	r3, #7
 800aa6c:	f8cb 4004 	str.w	r4, [fp, #4]
 800aa70:	f8ca 2008 	str.w	r2, [sl, #8]
 800aa74:	f8ca 3004 	str.w	r3, [sl, #4]
 800aa78:	f300 82df 	bgt.w	800b03a <_vfprintf_r+0xfc6>
 800aa7c:	f10b 0b08 	add.w	fp, fp, #8
 800aa80:	9c05      	ldr	r4, [sp, #20]
 800aa82:	05e2      	lsls	r2, r4, #23
 800aa84:	f100 8109 	bmi.w	800ac9a <_vfprintf_r+0xc26>
 800aa88:	f8da 0004 	ldr.w	r0, [sl, #4]
 800aa8c:	f8da 1008 	ldr.w	r1, [sl, #8]
 800aa90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800aa92:	f8cb 8000 	str.w	r8, [fp]
 800aa96:	1c43      	adds	r3, r0, #1
 800aa98:	194a      	adds	r2, r1, r5
 800aa9a:	2b07      	cmp	r3, #7
 800aa9c:	f8cb 5004 	str.w	r5, [fp, #4]
 800aaa0:	f8ca 2008 	str.w	r2, [sl, #8]
 800aaa4:	f8ca 3004 	str.w	r3, [sl, #4]
 800aaa8:	f300 829c 	bgt.w	800afe4 <_vfprintf_r+0xf70>
 800aaac:	f10b 0b08 	add.w	fp, fp, #8
 800aab0:	9d05      	ldr	r5, [sp, #20]
 800aab2:	076b      	lsls	r3, r5, #29
 800aab4:	f140 80b8 	bpl.w	800ac28 <_vfprintf_r+0xbb4>
 800aab8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800aaba:	9908      	ldr	r1, [sp, #32]
 800aabc:	1a64      	subs	r4, r4, r1
 800aabe:	2c00      	cmp	r4, #0
 800aac0:	f340 80b2 	ble.w	800ac28 <_vfprintf_r+0xbb4>
 800aac4:	2c10      	cmp	r4, #16
 800aac6:	f341 80b2 	ble.w	800bc2e <_vfprintf_r+0x1bba>
 800aaca:	f8da 3004 	ldr.w	r3, [sl, #4]
 800aace:	f8da 0008 	ldr.w	r0, [sl, #8]
 800aad2:	4dca      	ldr	r5, [pc, #808]	; (800adfc <_vfprintf_r+0xd88>)
 800aad4:	2610      	movs	r6, #16
 800aad6:	1c59      	adds	r1, r3, #1
 800aad8:	f1a4 0711 	sub.w	r7, r4, #17
 800aadc:	1982      	adds	r2, r0, r6
 800aade:	2907      	cmp	r1, #7
 800aae0:	e88b 0060 	stmia.w	fp, {r5, r6}
 800aae4:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800aae8:	f8ca 2008 	str.w	r2, [sl, #8]
 800aaec:	f8ca 1004 	str.w	r1, [sl, #4]
 800aaf0:	f300 845e 	bgt.w	800b3b0 <_vfprintf_r+0x133c>
 800aaf4:	f10b 0b08 	add.w	fp, fp, #8
 800aaf8:	3c10      	subs	r4, #16
 800aafa:	2c10      	cmp	r4, #16
 800aafc:	dd7c      	ble.n	800abf8 <_vfprintf_r+0xb84>
 800aafe:	b1af      	cbz	r7, 800ab2c <_vfprintf_r+0xab8>
 800ab00:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ab04:	f8da 0008 	ldr.w	r0, [sl, #8]
 800ab08:	f8cb 5000 	str.w	r5, [fp]
 800ab0c:	1c5a      	adds	r2, r3, #1
 800ab0e:	3010      	adds	r0, #16
 800ab10:	2a07      	cmp	r2, #7
 800ab12:	f8cb 6004 	str.w	r6, [fp, #4]
 800ab16:	f8ca 0008 	str.w	r0, [sl, #8]
 800ab1a:	f8ca 2004 	str.w	r2, [sl, #4]
 800ab1e:	f300 8453 	bgt.w	800b3c8 <_vfprintf_r+0x1354>
 800ab22:	f10b 0b08 	add.w	fp, fp, #8
 800ab26:	3c10      	subs	r4, #16
 800ab28:	2c10      	cmp	r4, #16
 800ab2a:	dd65      	ble.n	800abf8 <_vfprintf_r+0xb84>
 800ab2c:	9f07      	ldr	r7, [sp, #28]
 800ab2e:	e017      	b.n	800ab60 <_vfprintf_r+0xaec>
 800ab30:	f10b 0b08 	add.w	fp, fp, #8
 800ab34:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ab38:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ab3c:	f8cb 5000 	str.w	r5, [fp]
 800ab40:	1c48      	adds	r0, r1, #1
 800ab42:	3210      	adds	r2, #16
 800ab44:	3c10      	subs	r4, #16
 800ab46:	2807      	cmp	r0, #7
 800ab48:	f8cb 6004 	str.w	r6, [fp, #4]
 800ab4c:	f8ca 2008 	str.w	r2, [sl, #8]
 800ab50:	f8ca 0004 	str.w	r0, [sl, #4]
 800ab54:	dc43      	bgt.n	800abde <_vfprintf_r+0xb6a>
 800ab56:	3c10      	subs	r4, #16
 800ab58:	2c10      	cmp	r4, #16
 800ab5a:	f10b 0b08 	add.w	fp, fp, #8
 800ab5e:	dd4b      	ble.n	800abf8 <_vfprintf_r+0xb84>
 800ab60:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ab64:	f8da 1008 	ldr.w	r1, [sl, #8]
 800ab68:	f8cb 5000 	str.w	r5, [fp]
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	3110      	adds	r1, #16
 800ab70:	2b07      	cmp	r3, #7
 800ab72:	f8cb 6004 	str.w	r6, [fp, #4]
 800ab76:	f8ca 1008 	str.w	r1, [sl, #8]
 800ab7a:	f8ca 3004 	str.w	r3, [sl, #4]
 800ab7e:	ddd7      	ble.n	800ab30 <_vfprintf_r+0xabc>
 800ab80:	4638      	mov	r0, r7
 800ab82:	4649      	mov	r1, r9
 800ab84:	4652      	mov	r2, sl
 800ab86:	f004 f961 	bl	800ee4c <__sprint_r>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	f47f abc4 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800ab90:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800ab94:	e7ce      	b.n	800ab34 <_vfprintf_r+0xac0>
 800ab96:	4628      	mov	r0, r5
 800ab98:	4649      	mov	r1, r9
 800ab9a:	4652      	mov	r2, sl
 800ab9c:	f004 f956 	bl	800ee4c <__sprint_r>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f47f abb9 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800aba6:	3c10      	subs	r4, #16
 800aba8:	2c10      	cmp	r4, #16
 800abaa:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800abae:	f73f acb9 	bgt.w	800a524 <_vfprintf_r+0x4b0>
 800abb2:	463d      	mov	r5, r7
 800abb4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800abb6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800abba:	f8da 1008 	ldr.w	r1, [sl, #8]
 800abbe:	f8cb 5000 	str.w	r5, [fp]
 800abc2:	1c58      	adds	r0, r3, #1
 800abc4:	190a      	adds	r2, r1, r4
 800abc6:	2807      	cmp	r0, #7
 800abc8:	f8cb 4004 	str.w	r4, [fp, #4]
 800abcc:	f8ca 2008 	str.w	r2, [sl, #8]
 800abd0:	f8ca 0004 	str.w	r0, [sl, #4]
 800abd4:	f73f ae83 	bgt.w	800a8de <_vfprintf_r+0x86a>
 800abd8:	f10b 0b08 	add.w	fp, fp, #8
 800abdc:	e689      	b.n	800a8f2 <_vfprintf_r+0x87e>
 800abde:	4638      	mov	r0, r7
 800abe0:	4649      	mov	r1, r9
 800abe2:	4652      	mov	r2, sl
 800abe4:	f004 f932 	bl	800ee4c <__sprint_r>
 800abe8:	2800      	cmp	r0, #0
 800abea:	f47f ab95 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800abee:	3c10      	subs	r4, #16
 800abf0:	2c10      	cmp	r4, #16
 800abf2:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800abf6:	dcb3      	bgt.n	800ab60 <_vfprintf_r+0xaec>
 800abf8:	f8da 2004 	ldr.w	r2, [sl, #4]
 800abfc:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ac00:	f8cb 5000 	str.w	r5, [fp]
 800ac04:	1c51      	adds	r1, r2, #1
 800ac06:	18e3      	adds	r3, r4, r3
 800ac08:	2907      	cmp	r1, #7
 800ac0a:	f8cb 4004 	str.w	r4, [fp, #4]
 800ac0e:	f8ca 3008 	str.w	r3, [sl, #8]
 800ac12:	f8ca 1004 	str.w	r1, [sl, #4]
 800ac16:	dd09      	ble.n	800ac2c <_vfprintf_r+0xbb8>
 800ac18:	9807      	ldr	r0, [sp, #28]
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	4652      	mov	r2, sl
 800ac1e:	f004 f915 	bl	800ee4c <__sprint_r>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	f47f ab78 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800ac28:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ac2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ac2e:	9808      	ldr	r0, [sp, #32]
 800ac30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ac32:	42a8      	cmp	r0, r5
 800ac34:	bfac      	ite	ge
 800ac36:	1824      	addge	r4, r4, r0
 800ac38:	1964      	addlt	r4, r4, r5
 800ac3a:	940a      	str	r4, [sp, #40]	; 0x28
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 81dc 	bne.w	800affa <_vfprintf_r+0xf86>
 800ac42:	2500      	movs	r5, #0
 800ac44:	f8ca 5004 	str.w	r5, [sl, #4]
 800ac48:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800ac4c:	f7ff ba64 	b.w	800a118 <_vfprintf_r+0xa4>
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	f000 8239 	beq.w	800b0c8 <_vfprintf_r+0x1054>
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	f000 8216 	beq.w	800b088 <_vfprintf_r+0x1014>
 800ac5c:	f10d 06bf 	add.w	r6, sp, #191	; 0xbf
 800ac60:	2307      	movs	r3, #7
 800ac62:	08e2      	lsrs	r2, r4, #3
 800ac64:	ea42 7745 	orr.w	r7, r2, r5, lsl #29
 800ac68:	ea04 0003 	and.w	r0, r4, r3
 800ac6c:	08e9      	lsrs	r1, r5, #3
 800ac6e:	3030      	adds	r0, #48	; 0x30
 800ac70:	463c      	mov	r4, r7
 800ac72:	460d      	mov	r5, r1
 800ac74:	b2c2      	uxtb	r2, r0
 800ac76:	ea54 0105 	orrs.w	r1, r4, r5
 800ac7a:	46b0      	mov	r8, r6
 800ac7c:	7032      	strb	r2, [r6, #0]
 800ac7e:	f106 36ff 	add.w	r6, r6, #4294967295
 800ac82:	d1ee      	bne.n	800ac62 <_vfprintf_r+0xbee>
 800ac84:	9c05      	ldr	r4, [sp, #20]
 800ac86:	07e4      	lsls	r4, r4, #31
 800ac88:	4645      	mov	r5, r8
 800ac8a:	f100 83a9 	bmi.w	800b3e0 <_vfprintf_r+0x136c>
 800ac8e:	9b03      	ldr	r3, [sp, #12]
 800ac90:	ebc8 0003 	rsb	r0, r8, r3
 800ac94:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac96:	f7ff bbcf 	b.w	800a438 <_vfprintf_r+0x3c4>
 800ac9a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ac9c:	2c65      	cmp	r4, #101	; 0x65
 800ac9e:	f340 8143 	ble.w	800af28 <_vfprintf_r+0xeb4>
 800aca2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800aca6:	2200      	movs	r2, #0
 800aca8:	2300      	movs	r3, #0
 800acaa:	f7fe fbab 	bl	8009404 <__aeabi_dcmpeq>
 800acae:	2800      	cmp	r0, #0
 800acb0:	f000 8240 	beq.w	800b134 <_vfprintf_r+0x10c0>
 800acb4:	f8da 2008 	ldr.w	r2, [sl, #8]
 800acb8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800acbc:	4950      	ldr	r1, [pc, #320]	; (800ae00 <_vfprintf_r+0xd8c>)
 800acbe:	1c50      	adds	r0, r2, #1
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	2301      	movs	r3, #1
 800acc4:	2a07      	cmp	r2, #7
 800acc6:	f8cb 1000 	str.w	r1, [fp]
 800acca:	f8cb 3004 	str.w	r3, [fp, #4]
 800acce:	f8ca 0008 	str.w	r0, [sl, #8]
 800acd2:	f8ca 2004 	str.w	r2, [sl, #4]
 800acd6:	f300 85d5 	bgt.w	800b884 <_vfprintf_r+0x1810>
 800acda:	f10b 0b08 	add.w	fp, fp, #8
 800acde:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ace0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ace2:	42ac      	cmp	r4, r5
 800ace4:	db03      	blt.n	800acee <_vfprintf_r+0xc7a>
 800ace6:	9805      	ldr	r0, [sp, #20]
 800ace8:	07c3      	lsls	r3, r0, #31
 800acea:	f57f aee1 	bpl.w	800aab0 <_vfprintf_r+0xa3c>
 800acee:	f8da 1004 	ldr.w	r1, [sl, #4]
 800acf2:	f8da 2008 	ldr.w	r2, [sl, #8]
 800acf6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800acf8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800acfa:	f8cb 4004 	str.w	r4, [fp, #4]
 800acfe:	1c4b      	adds	r3, r1, #1
 800ad00:	18a0      	adds	r0, r4, r2
 800ad02:	2b07      	cmp	r3, #7
 800ad04:	f8cb 5000 	str.w	r5, [fp]
 800ad08:	f8ca 0008 	str.w	r0, [sl, #8]
 800ad0c:	f8ca 3004 	str.w	r3, [sl, #4]
 800ad10:	f300 86b9 	bgt.w	800ba86 <_vfprintf_r+0x1a12>
 800ad14:	f10b 0b08 	add.w	fp, fp, #8
 800ad18:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ad1a:	3c01      	subs	r4, #1
 800ad1c:	2c00      	cmp	r4, #0
 800ad1e:	f77f aec7 	ble.w	800aab0 <_vfprintf_r+0xa3c>
 800ad22:	2c10      	cmp	r4, #16
 800ad24:	f340 8331 	ble.w	800b38a <_vfprintf_r+0x1316>
 800ad28:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ad2c:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ad30:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ad32:	4d34      	ldr	r5, [pc, #208]	; (800ae04 <_vfprintf_r+0xd90>)
 800ad34:	2610      	movs	r6, #16
 800ad36:	1c4b      	adds	r3, r1, #1
 800ad38:	3f12      	subs	r7, #18
 800ad3a:	1990      	adds	r0, r2, r6
 800ad3c:	2b07      	cmp	r3, #7
 800ad3e:	e88b 0060 	stmia.w	fp, {r5, r6}
 800ad42:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800ad46:	f8ca 0008 	str.w	r0, [sl, #8]
 800ad4a:	f8ca 3004 	str.w	r3, [sl, #4]
 800ad4e:	f300 86f9 	bgt.w	800bb44 <_vfprintf_r+0x1ad0>
 800ad52:	f10b 0b08 	add.w	fp, fp, #8
 800ad56:	3c10      	subs	r4, #16
 800ad58:	2c10      	cmp	r4, #16
 800ad5a:	f340 8317 	ble.w	800b38c <_vfprintf_r+0x1318>
 800ad5e:	b1b7      	cbz	r7, 800ad8e <_vfprintf_r+0xd1a>
 800ad60:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ad64:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ad68:	f8cb 5000 	str.w	r5, [fp]
 800ad6c:	1c48      	adds	r0, r1, #1
 800ad6e:	3210      	adds	r2, #16
 800ad70:	2807      	cmp	r0, #7
 800ad72:	f8cb 6004 	str.w	r6, [fp, #4]
 800ad76:	f8ca 2008 	str.w	r2, [sl, #8]
 800ad7a:	f8ca 0004 	str.w	r0, [sl, #4]
 800ad7e:	f300 86f7 	bgt.w	800bb70 <_vfprintf_r+0x1afc>
 800ad82:	f10b 0b08 	add.w	fp, fp, #8
 800ad86:	3c10      	subs	r4, #16
 800ad88:	2c10      	cmp	r4, #16
 800ad8a:	f340 82ff 	ble.w	800b38c <_vfprintf_r+0x1318>
 800ad8e:	9f07      	ldr	r7, [sp, #28]
 800ad90:	e019      	b.n	800adc6 <_vfprintf_r+0xd52>
 800ad92:	f10b 0b08 	add.w	fp, fp, #8
 800ad96:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ad9a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800ad9e:	f8cb 5000 	str.w	r5, [fp]
 800ada2:	1c53      	adds	r3, r2, #1
 800ada4:	3010      	adds	r0, #16
 800ada6:	3c10      	subs	r4, #16
 800ada8:	2b07      	cmp	r3, #7
 800adaa:	f8cb 6004 	str.w	r6, [fp, #4]
 800adae:	f8ca 0008 	str.w	r0, [sl, #8]
 800adb2:	f8ca 3004 	str.w	r3, [sl, #4]
 800adb6:	f300 8195 	bgt.w	800b0e4 <_vfprintf_r+0x1070>
 800adba:	f10b 0b08 	add.w	fp, fp, #8
 800adbe:	3c10      	subs	r4, #16
 800adc0:	2c10      	cmp	r4, #16
 800adc2:	f340 82e3 	ble.w	800b38c <_vfprintf_r+0x1318>
 800adc6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800adca:	f8da 2008 	ldr.w	r2, [sl, #8]
 800adce:	f8cb 5000 	str.w	r5, [fp]
 800add2:	1c59      	adds	r1, r3, #1
 800add4:	3210      	adds	r2, #16
 800add6:	2907      	cmp	r1, #7
 800add8:	f8cb 6004 	str.w	r6, [fp, #4]
 800addc:	f8ca 2008 	str.w	r2, [sl, #8]
 800ade0:	f8ca 1004 	str.w	r1, [sl, #4]
 800ade4:	ddd5      	ble.n	800ad92 <_vfprintf_r+0xd1e>
 800ade6:	4638      	mov	r0, r7
 800ade8:	4649      	mov	r1, r9
 800adea:	4652      	mov	r2, sl
 800adec:	f004 f82e 	bl	800ee4c <__sprint_r>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	f47f aa91 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800adf6:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800adfa:	e7cc      	b.n	800ad96 <_vfprintf_r+0xd22>
 800adfc:	0800fcd4 	.word	0x0800fcd4
 800ae00:	0800fd24 	.word	0x0800fd24
 800ae04:	0800fd28 	.word	0x0800fd28
 800ae08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ae0a:	9c08      	ldr	r4, [sp, #32]
 800ae0c:	1b2c      	subs	r4, r5, r4
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	f77f ada2 	ble.w	800a958 <_vfprintf_r+0x8e4>
 800ae14:	2c10      	cmp	r4, #16
 800ae16:	f340 8760 	ble.w	800bcda <_vfprintf_r+0x1c66>
 800ae1a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ae1e:	f8da 0008 	ldr.w	r0, [sl, #8]
 800ae22:	4dc3      	ldr	r5, [pc, #780]	; (800b130 <_vfprintf_r+0x10bc>)
 800ae24:	2610      	movs	r6, #16
 800ae26:	1c4b      	adds	r3, r1, #1
 800ae28:	f1a4 0711 	sub.w	r7, r4, #17
 800ae2c:	1982      	adds	r2, r0, r6
 800ae2e:	2b07      	cmp	r3, #7
 800ae30:	e88b 0060 	stmia.w	fp, {r5, r6}
 800ae34:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800ae38:	f8ca 2008 	str.w	r2, [sl, #8]
 800ae3c:	f8ca 3004 	str.w	r3, [sl, #4]
 800ae40:	f300 83c0 	bgt.w	800b5c4 <_vfprintf_r+0x1550>
 800ae44:	f10b 0b08 	add.w	fp, fp, #8
 800ae48:	3c10      	subs	r4, #16
 800ae4a:	2c10      	cmp	r4, #16
 800ae4c:	dd58      	ble.n	800af00 <_vfprintf_r+0xe8c>
 800ae4e:	b1af      	cbz	r7, 800ae7c <_vfprintf_r+0xe08>
 800ae50:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ae54:	f8da 0008 	ldr.w	r0, [sl, #8]
 800ae58:	f8cb 5000 	str.w	r5, [fp]
 800ae5c:	1c4a      	adds	r2, r1, #1
 800ae5e:	3010      	adds	r0, #16
 800ae60:	2a07      	cmp	r2, #7
 800ae62:	f8cb 6004 	str.w	r6, [fp, #4]
 800ae66:	f8ca 0008 	str.w	r0, [sl, #8]
 800ae6a:	f8ca 2004 	str.w	r2, [sl, #4]
 800ae6e:	f300 83b4 	bgt.w	800b5da <_vfprintf_r+0x1566>
 800ae72:	f10b 0b08 	add.w	fp, fp, #8
 800ae76:	3c10      	subs	r4, #16
 800ae78:	2c10      	cmp	r4, #16
 800ae7a:	dd41      	ble.n	800af00 <_vfprintf_r+0xe8c>
 800ae7c:	9f07      	ldr	r7, [sp, #28]
 800ae7e:	e017      	b.n	800aeb0 <_vfprintf_r+0xe3c>
 800ae80:	f10b 0b08 	add.w	fp, fp, #8
 800ae84:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ae88:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ae8c:	f8cb 5000 	str.w	r5, [fp]
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	3210      	adds	r2, #16
 800ae94:	3c10      	subs	r4, #16
 800ae96:	2b07      	cmp	r3, #7
 800ae98:	f8cb 6004 	str.w	r6, [fp, #4]
 800ae9c:	f8ca 2008 	str.w	r2, [sl, #8]
 800aea0:	f8ca 3004 	str.w	r3, [sl, #4]
 800aea4:	dc1f      	bgt.n	800aee6 <_vfprintf_r+0xe72>
 800aea6:	3c10      	subs	r4, #16
 800aea8:	2c10      	cmp	r4, #16
 800aeaa:	f10b 0b08 	add.w	fp, fp, #8
 800aeae:	dd27      	ble.n	800af00 <_vfprintf_r+0xe8c>
 800aeb0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800aeb4:	f8da 0008 	ldr.w	r0, [sl, #8]
 800aeb8:	f8cb 5000 	str.w	r5, [fp]
 800aebc:	1c59      	adds	r1, r3, #1
 800aebe:	3010      	adds	r0, #16
 800aec0:	2907      	cmp	r1, #7
 800aec2:	f8cb 6004 	str.w	r6, [fp, #4]
 800aec6:	f8ca 0008 	str.w	r0, [sl, #8]
 800aeca:	f8ca 1004 	str.w	r1, [sl, #4]
 800aece:	ddd7      	ble.n	800ae80 <_vfprintf_r+0xe0c>
 800aed0:	4638      	mov	r0, r7
 800aed2:	4649      	mov	r1, r9
 800aed4:	4652      	mov	r2, sl
 800aed6:	f003 ffb9 	bl	800ee4c <__sprint_r>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	f47f aa1c 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800aee0:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800aee4:	e7ce      	b.n	800ae84 <_vfprintf_r+0xe10>
 800aee6:	4638      	mov	r0, r7
 800aee8:	4649      	mov	r1, r9
 800aeea:	4652      	mov	r2, sl
 800aeec:	f003 ffae 	bl	800ee4c <__sprint_r>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	f47f aa11 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800aef6:	3c10      	subs	r4, #16
 800aef8:	2c10      	cmp	r4, #16
 800aefa:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800aefe:	dcd7      	bgt.n	800aeb0 <_vfprintf_r+0xe3c>
 800af00:	f8da 0004 	ldr.w	r0, [sl, #4]
 800af04:	f8da 1008 	ldr.w	r1, [sl, #8]
 800af08:	f8cb 5000 	str.w	r5, [fp]
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	190a      	adds	r2, r1, r4
 800af10:	2b07      	cmp	r3, #7
 800af12:	f8cb 4004 	str.w	r4, [fp, #4]
 800af16:	f8ca 2008 	str.w	r2, [sl, #8]
 800af1a:	f8ca 3004 	str.w	r3, [sl, #4]
 800af1e:	f300 83ad 	bgt.w	800b67c <_vfprintf_r+0x1608>
 800af22:	f10b 0b08 	add.w	fp, fp, #8
 800af26:	e517      	b.n	800a958 <_vfprintf_r+0x8e4>
 800af28:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800af2a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800af2e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800af32:	2d01      	cmp	r5, #1
 800af34:	f340 835c 	ble.w	800b5f0 <_vfprintf_r+0x157c>
 800af38:	3301      	adds	r3, #1
 800af3a:	1c42      	adds	r2, r0, #1
 800af3c:	2001      	movs	r0, #1
 800af3e:	2b07      	cmp	r3, #7
 800af40:	f8cb 8000 	str.w	r8, [fp]
 800af44:	f8cb 0004 	str.w	r0, [fp, #4]
 800af48:	f8ca 2008 	str.w	r2, [sl, #8]
 800af4c:	f8ca 3004 	str.w	r3, [sl, #4]
 800af50:	f300 836b 	bgt.w	800b62a <_vfprintf_r+0x15b6>
 800af54:	f10b 0b08 	add.w	fp, fp, #8
 800af58:	f8da 3004 	ldr.w	r3, [sl, #4]
 800af5c:	f8da 1008 	ldr.w	r1, [sl, #8]
 800af60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800af62:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800af64:	f8cb 4004 	str.w	r4, [fp, #4]
 800af68:	1c58      	adds	r0, r3, #1
 800af6a:	1862      	adds	r2, r4, r1
 800af6c:	2807      	cmp	r0, #7
 800af6e:	f8cb 5000 	str.w	r5, [fp]
 800af72:	f8ca 2008 	str.w	r2, [sl, #8]
 800af76:	f8ca 0004 	str.w	r0, [sl, #4]
 800af7a:	f300 8374 	bgt.w	800b666 <_vfprintf_r+0x15f2>
 800af7e:	f10b 0b08 	add.w	fp, fp, #8
 800af82:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800af86:	2200      	movs	r2, #0
 800af88:	2300      	movs	r3, #0
 800af8a:	f7fe fa3b 	bl	8009404 <__aeabi_dcmpeq>
 800af8e:	2800      	cmp	r0, #0
 800af90:	f040 8176 	bne.w	800b280 <_vfprintf_r+0x120c>
 800af94:	f8da 3004 	ldr.w	r3, [sl, #4]
 800af98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800af9a:	f8da 1008 	ldr.w	r1, [sl, #8]
 800af9e:	1e6a      	subs	r2, r5, #1
 800afa0:	3301      	adds	r3, #1
 800afa2:	f108 0001 	add.w	r0, r8, #1
 800afa6:	1851      	adds	r1, r2, r1
 800afa8:	2b07      	cmp	r3, #7
 800afaa:	e88b 0005 	stmia.w	fp, {r0, r2}
 800afae:	f8ca 1008 	str.w	r1, [sl, #8]
 800afb2:	f8ca 3004 	str.w	r3, [sl, #4]
 800afb6:	f300 832d 	bgt.w	800b614 <_vfprintf_r+0x15a0>
 800afba:	f10b 0b08 	add.w	fp, fp, #8
 800afbe:	f8da 0004 	ldr.w	r0, [sl, #4]
 800afc2:	f8da 2008 	ldr.w	r2, [sl, #8]
 800afc6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	1912      	adds	r2, r2, r4
 800afcc:	a91f      	add	r1, sp, #124	; 0x7c
 800afce:	2b07      	cmp	r3, #7
 800afd0:	f8cb 4004 	str.w	r4, [fp, #4]
 800afd4:	f8cb 1000 	str.w	r1, [fp]
 800afd8:	f8ca 2008 	str.w	r2, [sl, #8]
 800afdc:	f8ca 3004 	str.w	r3, [sl, #4]
 800afe0:	f77f ad64 	ble.w	800aaac <_vfprintf_r+0xa38>
 800afe4:	9807      	ldr	r0, [sp, #28]
 800afe6:	4649      	mov	r1, r9
 800afe8:	4652      	mov	r2, sl
 800afea:	f003 ff2f 	bl	800ee4c <__sprint_r>
 800afee:	2800      	cmp	r0, #0
 800aff0:	f47f a992 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800aff4:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800aff8:	e55a      	b.n	800aab0 <_vfprintf_r+0xa3c>
 800affa:	9807      	ldr	r0, [sp, #28]
 800affc:	4649      	mov	r1, r9
 800affe:	4652      	mov	r2, sl
 800b000:	f003 ff24 	bl	800ee4c <__sprint_r>
 800b004:	2800      	cmp	r0, #0
 800b006:	f43f ae1c 	beq.w	800ac42 <_vfprintf_r+0xbce>
 800b00a:	f7ff b985 	b.w	800a318 <_vfprintf_r+0x2a4>
 800b00e:	9807      	ldr	r0, [sp, #28]
 800b010:	4649      	mov	r1, r9
 800b012:	4652      	mov	r2, sl
 800b014:	f003 ff1a 	bl	800ee4c <__sprint_r>
 800b018:	2800      	cmp	r0, #0
 800b01a:	f47f a97d 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b01e:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b022:	e4b9      	b.n	800a998 <_vfprintf_r+0x924>
 800b024:	9807      	ldr	r0, [sp, #28]
 800b026:	4649      	mov	r1, r9
 800b028:	4652      	mov	r2, sl
 800b02a:	f003 ff0f 	bl	800ee4c <__sprint_r>
 800b02e:	2800      	cmp	r0, #0
 800b030:	f47f a972 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b034:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b038:	e4c5      	b.n	800a9c6 <_vfprintf_r+0x952>
 800b03a:	9807      	ldr	r0, [sp, #28]
 800b03c:	4649      	mov	r1, r9
 800b03e:	4652      	mov	r2, sl
 800b040:	f003 ff04 	bl	800ee4c <__sprint_r>
 800b044:	2800      	cmp	r0, #0
 800b046:	f47f a967 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b04a:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b04e:	e517      	b.n	800aa80 <_vfprintf_r+0xa0c>
 800b050:	9807      	ldr	r0, [sp, #28]
 800b052:	4649      	mov	r1, r9
 800b054:	4652      	mov	r2, sl
 800b056:	f003 fef9 	bl	800ee4c <__sprint_r>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	f47f a95c 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b060:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b064:	e475      	b.n	800a952 <_vfprintf_r+0x8de>
 800b066:	9807      	ldr	r0, [sp, #28]
 800b068:	4649      	mov	r1, r9
 800b06a:	4652      	mov	r2, sl
 800b06c:	f003 feee 	bl	800ee4c <__sprint_r>
 800b070:	2800      	cmp	r0, #0
 800b072:	f47f a951 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b076:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b07a:	e453      	b.n	800a924 <_vfprintf_r+0x8b0>
 800b07c:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800b080:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 800b084:	f7ff b9d8 	b.w	800a438 <_vfprintf_r+0x3c4>
 800b088:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b08a:	f8cd e020 	str.w	lr, [sp, #32]
 800b08e:	f10d 01bf 	add.w	r1, sp, #191	; 0xbf
 800b092:	260f      	movs	r6, #15
 800b094:	ea04 0306 	and.w	r3, r4, r6
 800b098:	18c7      	adds	r7, r0, r3
 800b09a:	0924      	lsrs	r4, r4, #4
 800b09c:	ea44 7c05 	orr.w	ip, r4, r5, lsl #28
 800b0a0:	092a      	lsrs	r2, r5, #4
 800b0a2:	4688      	mov	r8, r1
 800b0a4:	4664      	mov	r4, ip
 800b0a6:	7839      	ldrb	r1, [r7, #0]
 800b0a8:	4615      	mov	r5, r2
 800b0aa:	ea54 0205 	orrs.w	r2, r4, r5
 800b0ae:	f888 1000 	strb.w	r1, [r8]
 800b0b2:	f108 31ff 	add.w	r1, r8, #4294967295
 800b0b6:	d1ed      	bne.n	800b094 <_vfprintf_r+0x1020>
 800b0b8:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b0bc:	9d03      	ldr	r5, [sp, #12]
 800b0be:	ebc8 0005 	rsb	r0, r8, r5
 800b0c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0c4:	f7ff b9b8 	b.w	800a438 <_vfprintf_r+0x3c4>
 800b0c8:	2d00      	cmp	r5, #0
 800b0ca:	bf08      	it	eq
 800b0cc:	2c0a      	cmpeq	r4, #10
 800b0ce:	f080 8193 	bcs.w	800b3f8 <_vfprintf_r+0x1384>
 800b0d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b0d4:	3430      	adds	r4, #48	; 0x30
 800b0d6:	f88d 40bf 	strb.w	r4, [sp, #191]	; 0xbf
 800b0da:	920b      	str	r2, [sp, #44]	; 0x2c
 800b0dc:	f10d 08bf 	add.w	r8, sp, #191	; 0xbf
 800b0e0:	f7ff b9aa 	b.w	800a438 <_vfprintf_r+0x3c4>
 800b0e4:	4638      	mov	r0, r7
 800b0e6:	4649      	mov	r1, r9
 800b0e8:	4652      	mov	r2, sl
 800b0ea:	f003 feaf 	bl	800ee4c <__sprint_r>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f47f a912 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b0f4:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b0f8:	e661      	b.n	800adbe <_vfprintf_r+0xd4a>
 800b0fa:	9807      	ldr	r0, [sp, #28]
 800b0fc:	9302      	str	r3, [sp, #8]
 800b0fe:	4649      	mov	r1, r9
 800b100:	4652      	mov	r2, sl
 800b102:	f003 fea3 	bl	800ee4c <__sprint_r>
 800b106:	9b02      	ldr	r3, [sp, #8]
 800b108:	2800      	cmp	r0, #0
 800b10a:	f47f a905 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b10e:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b112:	f7ff b9cd 	b.w	800a4b0 <_vfprintf_r+0x43c>
 800b116:	9807      	ldr	r0, [sp, #28]
 800b118:	4649      	mov	r1, r9
 800b11a:	4652      	mov	r2, sl
 800b11c:	f003 fe96 	bl	800ee4c <__sprint_r>
 800b120:	2800      	cmp	r0, #0
 800b122:	f47f a8f9 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b126:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b12a:	f7ff b9d9 	b.w	800a4e0 <_vfprintf_r+0x46c>
 800b12e:	bf00      	nop
 800b130:	0800fd28 	.word	0x0800fd28
 800b134:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b136:	2c00      	cmp	r4, #0
 800b138:	f340 83b0 	ble.w	800b89c <_vfprintf_r+0x1828>
 800b13c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b13e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b140:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b142:	42ac      	cmp	r4, r5
 800b144:	bfa8      	it	ge
 800b146:	462c      	movge	r4, r5
 800b148:	2c00      	cmp	r4, #0
 800b14a:	eb08 0500 	add.w	r5, r8, r0
 800b14e:	950b      	str	r5, [sp, #44]	; 0x2c
 800b150:	dd12      	ble.n	800b178 <_vfprintf_r+0x1104>
 800b152:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b156:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b15a:	f8cb 8000 	str.w	r8, [fp]
 800b15e:	1c58      	adds	r0, r3, #1
 800b160:	1911      	adds	r1, r2, r4
 800b162:	2807      	cmp	r0, #7
 800b164:	f8cb 4004 	str.w	r4, [fp, #4]
 800b168:	f8ca 1008 	str.w	r1, [sl, #8]
 800b16c:	f8ca 0004 	str.w	r0, [sl, #4]
 800b170:	f300 84dc 	bgt.w	800bb2c <_vfprintf_r+0x1ab8>
 800b174:	f10b 0b08 	add.w	fp, fp, #8
 800b178:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b17a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b17e:	1b2c      	subs	r4, r5, r4
 800b180:	2c00      	cmp	r4, #0
 800b182:	f340 8165 	ble.w	800b450 <_vfprintf_r+0x13dc>
 800b186:	2c10      	cmp	r4, #16
 800b188:	f340 8364 	ble.w	800b854 <_vfprintf_r+0x17e0>
 800b18c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b190:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b194:	4da8      	ldr	r5, [pc, #672]	; (800b438 <_vfprintf_r+0x13c4>)
 800b196:	2610      	movs	r6, #16
 800b198:	1c58      	adds	r0, r3, #1
 800b19a:	f1a4 0711 	sub.w	r7, r4, #17
 800b19e:	1991      	adds	r1, r2, r6
 800b1a0:	2807      	cmp	r0, #7
 800b1a2:	e88b 0060 	stmia.w	fp, {r5, r6}
 800b1a6:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800b1aa:	f8ca 1008 	str.w	r1, [sl, #8]
 800b1ae:	f8ca 0004 	str.w	r0, [sl, #4]
 800b1b2:	f300 84af 	bgt.w	800bb14 <_vfprintf_r+0x1aa0>
 800b1b6:	f10b 0b08 	add.w	fp, fp, #8
 800b1ba:	3c10      	subs	r4, #16
 800b1bc:	2c10      	cmp	r4, #16
 800b1be:	f340 834a 	ble.w	800b856 <_vfprintf_r+0x17e2>
 800b1c2:	b1b7      	cbz	r7, 800b1f2 <_vfprintf_r+0x117e>
 800b1c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b1c8:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b1cc:	f8cb 5000 	str.w	r5, [fp]
 800b1d0:	1c59      	adds	r1, r3, #1
 800b1d2:	3210      	adds	r2, #16
 800b1d4:	2907      	cmp	r1, #7
 800b1d6:	f8cb 6004 	str.w	r6, [fp, #4]
 800b1da:	f8ca 2008 	str.w	r2, [sl, #8]
 800b1de:	f8ca 1004 	str.w	r1, [sl, #4]
 800b1e2:	f300 84d1 	bgt.w	800bb88 <_vfprintf_r+0x1b14>
 800b1e6:	f10b 0b08 	add.w	fp, fp, #8
 800b1ea:	3c10      	subs	r4, #16
 800b1ec:	2c10      	cmp	r4, #16
 800b1ee:	f340 8332 	ble.w	800b856 <_vfprintf_r+0x17e2>
 800b1f2:	9f07      	ldr	r7, [sp, #28]
 800b1f4:	e016      	b.n	800b224 <_vfprintf_r+0x11b0>
 800b1f6:	f10b 0008 	add.w	r0, fp, #8
 800b1fa:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b1fe:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b202:	6005      	str	r5, [r0, #0]
 800b204:	1c53      	adds	r3, r2, #1
 800b206:	3110      	adds	r1, #16
 800b208:	3c10      	subs	r4, #16
 800b20a:	2b07      	cmp	r3, #7
 800b20c:	6046      	str	r6, [r0, #4]
 800b20e:	f8ca 1008 	str.w	r1, [sl, #8]
 800b212:	f8ca 3004 	str.w	r3, [sl, #4]
 800b216:	dc1f      	bgt.n	800b258 <_vfprintf_r+0x11e4>
 800b218:	f100 0b08 	add.w	fp, r0, #8
 800b21c:	3c10      	subs	r4, #16
 800b21e:	2c10      	cmp	r4, #16
 800b220:	f340 8319 	ble.w	800b856 <_vfprintf_r+0x17e2>
 800b224:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b228:	f8da 0008 	ldr.w	r0, [sl, #8]
 800b22c:	f8cb 5000 	str.w	r5, [fp]
 800b230:	1c53      	adds	r3, r2, #1
 800b232:	3010      	adds	r0, #16
 800b234:	2b07      	cmp	r3, #7
 800b236:	f8cb 6004 	str.w	r6, [fp, #4]
 800b23a:	f8ca 0008 	str.w	r0, [sl, #8]
 800b23e:	f8ca 3004 	str.w	r3, [sl, #4]
 800b242:	ddd8      	ble.n	800b1f6 <_vfprintf_r+0x1182>
 800b244:	4638      	mov	r0, r7
 800b246:	4649      	mov	r1, r9
 800b248:	4652      	mov	r2, sl
 800b24a:	f003 fdff 	bl	800ee4c <__sprint_r>
 800b24e:	2800      	cmp	r0, #0
 800b250:	f47f a862 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b254:	a84a      	add	r0, sp, #296	; 0x128
 800b256:	e7d0      	b.n	800b1fa <_vfprintf_r+0x1186>
 800b258:	4638      	mov	r0, r7
 800b25a:	4649      	mov	r1, r9
 800b25c:	4652      	mov	r2, sl
 800b25e:	f003 fdf5 	bl	800ee4c <__sprint_r>
 800b262:	2800      	cmp	r0, #0
 800b264:	f47f a858 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b268:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b26c:	e7d6      	b.n	800b21c <_vfprintf_r+0x11a8>
 800b26e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b272:	1d0f      	adds	r7, r1, #4
 800b274:	681c      	ldr	r4, [r3, #0]
 800b276:	970c      	str	r7, [sp, #48]	; 0x30
 800b278:	2500      	movs	r5, #0
 800b27a:	2301      	movs	r3, #1
 800b27c:	f7ff b9ce 	b.w	800a61c <_vfprintf_r+0x5a8>
 800b280:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b282:	1e6c      	subs	r4, r5, #1
 800b284:	2c00      	cmp	r4, #0
 800b286:	f77f ae9a 	ble.w	800afbe <_vfprintf_r+0xf4a>
 800b28a:	2c10      	cmp	r4, #16
 800b28c:	f340 81d8 	ble.w	800b640 <_vfprintf_r+0x15cc>
 800b290:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b294:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b298:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b29a:	4d67      	ldr	r5, [pc, #412]	; (800b438 <_vfprintf_r+0x13c4>)
 800b29c:	2610      	movs	r6, #16
 800b29e:	1c58      	adds	r0, r3, #1
 800b2a0:	3f12      	subs	r7, #18
 800b2a2:	198a      	adds	r2, r1, r6
 800b2a4:	2807      	cmp	r0, #7
 800b2a6:	e88b 0060 	stmia.w	fp, {r5, r6}
 800b2aa:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800b2ae:	f8ca 2008 	str.w	r2, [sl, #8]
 800b2b2:	f8ca 0004 	str.w	r0, [sl, #4]
 800b2b6:	f300 8412 	bgt.w	800bade <_vfprintf_r+0x1a6a>
 800b2ba:	f10b 0b08 	add.w	fp, fp, #8
 800b2be:	3c10      	subs	r4, #16
 800b2c0:	2c10      	cmp	r4, #16
 800b2c2:	f340 81be 	ble.w	800b642 <_vfprintf_r+0x15ce>
 800b2c6:	b1b7      	cbz	r7, 800b2f6 <_vfprintf_r+0x1282>
 800b2c8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b2cc:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b2d0:	f8cb 5000 	str.w	r5, [fp]
 800b2d4:	1c5a      	adds	r2, r3, #1
 800b2d6:	3110      	adds	r1, #16
 800b2d8:	2a07      	cmp	r2, #7
 800b2da:	f8cb 6004 	str.w	r6, [fp, #4]
 800b2de:	f8ca 1008 	str.w	r1, [sl, #8]
 800b2e2:	f8ca 2004 	str.w	r2, [sl, #4]
 800b2e6:	f300 8409 	bgt.w	800bafc <_vfprintf_r+0x1a88>
 800b2ea:	f10b 0b08 	add.w	fp, fp, #8
 800b2ee:	3c10      	subs	r4, #16
 800b2f0:	2c10      	cmp	r4, #16
 800b2f2:	f340 81a6 	ble.w	800b642 <_vfprintf_r+0x15ce>
 800b2f6:	9f07      	ldr	r7, [sp, #28]
 800b2f8:	e018      	b.n	800b32c <_vfprintf_r+0x12b8>
 800b2fa:	f10b 0b08 	add.w	fp, fp, #8
 800b2fe:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b302:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b306:	f8cb 5000 	str.w	r5, [fp]
 800b30a:	1c41      	adds	r1, r0, #1
 800b30c:	3210      	adds	r2, #16
 800b30e:	3c10      	subs	r4, #16
 800b310:	2907      	cmp	r1, #7
 800b312:	f8cb 6004 	str.w	r6, [fp, #4]
 800b316:	f8ca 2008 	str.w	r2, [sl, #8]
 800b31a:	f8ca 1004 	str.w	r1, [sl, #4]
 800b31e:	dc20      	bgt.n	800b362 <_vfprintf_r+0x12ee>
 800b320:	f10b 0b08 	add.w	fp, fp, #8
 800b324:	3c10      	subs	r4, #16
 800b326:	2c10      	cmp	r4, #16
 800b328:	f340 818b 	ble.w	800b642 <_vfprintf_r+0x15ce>
 800b32c:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b330:	f8da 0008 	ldr.w	r0, [sl, #8]
 800b334:	f8cb 5000 	str.w	r5, [fp]
 800b338:	1c4b      	adds	r3, r1, #1
 800b33a:	3010      	adds	r0, #16
 800b33c:	2b07      	cmp	r3, #7
 800b33e:	f8cb 6004 	str.w	r6, [fp, #4]
 800b342:	f8ca 0008 	str.w	r0, [sl, #8]
 800b346:	f8ca 3004 	str.w	r3, [sl, #4]
 800b34a:	ddd6      	ble.n	800b2fa <_vfprintf_r+0x1286>
 800b34c:	4638      	mov	r0, r7
 800b34e:	4649      	mov	r1, r9
 800b350:	4652      	mov	r2, sl
 800b352:	f003 fd7b 	bl	800ee4c <__sprint_r>
 800b356:	2800      	cmp	r0, #0
 800b358:	f47e afde 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b35c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b360:	e7cd      	b.n	800b2fe <_vfprintf_r+0x128a>
 800b362:	4638      	mov	r0, r7
 800b364:	4649      	mov	r1, r9
 800b366:	4652      	mov	r2, sl
 800b368:	f003 fd70 	bl	800ee4c <__sprint_r>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	f47e afd3 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b372:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b376:	e7d5      	b.n	800b324 <_vfprintf_r+0x12b0>
 800b378:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b37a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b37c:	6825      	ldr	r5, [r4, #0]
 800b37e:	1d10      	adds	r0, r2, #4
 800b380:	462c      	mov	r4, r5
 800b382:	900c      	str	r0, [sp, #48]	; 0x30
 800b384:	2500      	movs	r5, #0
 800b386:	f7ff b949 	b.w	800a61c <_vfprintf_r+0x5a8>
 800b38a:	4d2b      	ldr	r5, [pc, #172]	; (800b438 <_vfprintf_r+0x13c4>)
 800b38c:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b390:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b394:	f8cb 5000 	str.w	r5, [fp]
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	190a      	adds	r2, r1, r4
 800b39c:	2b07      	cmp	r3, #7
 800b39e:	f8cb 4004 	str.w	r4, [fp, #4]
 800b3a2:	f8ca 2008 	str.w	r2, [sl, #8]
 800b3a6:	f8ca 3004 	str.w	r3, [sl, #4]
 800b3aa:	f77f ab7f 	ble.w	800aaac <_vfprintf_r+0xa38>
 800b3ae:	e619      	b.n	800afe4 <_vfprintf_r+0xf70>
 800b3b0:	9807      	ldr	r0, [sp, #28]
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	4652      	mov	r2, sl
 800b3b6:	f003 fd49 	bl	800ee4c <__sprint_r>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	f47e afac 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b3c0:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b3c4:	f7ff bb98 	b.w	800aaf8 <_vfprintf_r+0xa84>
 800b3c8:	9807      	ldr	r0, [sp, #28]
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	4652      	mov	r2, sl
 800b3ce:	f003 fd3d 	bl	800ee4c <__sprint_r>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	f47e afa0 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b3d8:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b3dc:	f7ff bba3 	b.w	800ab26 <_vfprintf_r+0xab2>
 800b3e0:	2a30      	cmp	r2, #48	; 0x30
 800b3e2:	f43f ae6b 	beq.w	800b0bc <_vfprintf_r+0x1048>
 800b3e6:	9903      	ldr	r1, [sp, #12]
 800b3e8:	2730      	movs	r7, #48	; 0x30
 800b3ea:	1b8a      	subs	r2, r1, r6
 800b3ec:	46b0      	mov	r8, r6
 800b3ee:	f805 7c01 	strb.w	r7, [r5, #-1]
 800b3f2:	920b      	str	r2, [sp, #44]	; 0x2c
 800b3f4:	f7ff b820 	b.w	800a438 <_vfprintf_r+0x3c4>
 800b3f8:	f10d 06bf 	add.w	r6, sp, #191	; 0xbf
 800b3fc:	4677      	mov	r7, lr
 800b3fe:	4620      	mov	r0, r4
 800b400:	4629      	mov	r1, r5
 800b402:	220a      	movs	r2, #10
 800b404:	2300      	movs	r3, #0
 800b406:	f7fe f857 	bl	80094b8 <__aeabi_uldivmod>
 800b40a:	3230      	adds	r2, #48	; 0x30
 800b40c:	7032      	strb	r2, [r6, #0]
 800b40e:	4620      	mov	r0, r4
 800b410:	4629      	mov	r1, r5
 800b412:	220a      	movs	r2, #10
 800b414:	2300      	movs	r3, #0
 800b416:	f7fe f84f 	bl	80094b8 <__aeabi_uldivmod>
 800b41a:	4604      	mov	r4, r0
 800b41c:	460d      	mov	r5, r1
 800b41e:	ea54 0005 	orrs.w	r0, r4, r5
 800b422:	46b0      	mov	r8, r6
 800b424:	f106 36ff 	add.w	r6, r6, #4294967295
 800b428:	d1e9      	bne.n	800b3fe <_vfprintf_r+0x138a>
 800b42a:	9b03      	ldr	r3, [sp, #12]
 800b42c:	ebc8 0403 	rsb	r4, r8, r3
 800b430:	46be      	mov	lr, r7
 800b432:	940b      	str	r4, [sp, #44]	; 0x2c
 800b434:	f7ff b800 	b.w	800a438 <_vfprintf_r+0x3c4>
 800b438:	0800fd28 	.word	0x0800fd28
 800b43c:	9807      	ldr	r0, [sp, #28]
 800b43e:	4649      	mov	r1, r9
 800b440:	4652      	mov	r2, sl
 800b442:	f003 fd03 	bl	800ee4c <__sprint_r>
 800b446:	2800      	cmp	r0, #0
 800b448:	f47e af66 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b44c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b450:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b452:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b454:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b456:	42a3      	cmp	r3, r4
 800b458:	4446      	add	r6, r8
 800b45a:	f2c0 8092 	blt.w	800b582 <_vfprintf_r+0x150e>
 800b45e:	9d05      	ldr	r5, [sp, #20]
 800b460:	07e8      	lsls	r0, r5, #31
 800b462:	f100 808e 	bmi.w	800b582 <_vfprintf_r+0x150e>
 800b466:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b468:	1ba5      	subs	r5, r4, r6
 800b46a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b46c:	1ae3      	subs	r3, r4, r3
 800b46e:	42ab      	cmp	r3, r5
 800b470:	bfb8      	it	lt
 800b472:	461d      	movlt	r5, r3
 800b474:	2d00      	cmp	r5, #0
 800b476:	dd12      	ble.n	800b49e <_vfprintf_r+0x142a>
 800b478:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b47c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b480:	f8cb 6000 	str.w	r6, [fp]
 800b484:	1948      	adds	r0, r1, r5
 800b486:	1c51      	adds	r1, r2, #1
 800b488:	2907      	cmp	r1, #7
 800b48a:	f8cb 5004 	str.w	r5, [fp, #4]
 800b48e:	f8ca 0008 	str.w	r0, [sl, #8]
 800b492:	f8ca 1004 	str.w	r1, [sl, #4]
 800b496:	f300 83bc 	bgt.w	800bc12 <_vfprintf_r+0x1b9e>
 800b49a:	f10b 0b08 	add.w	fp, fp, #8
 800b49e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800b4a2:	1b5c      	subs	r4, r3, r5
 800b4a4:	2c00      	cmp	r4, #0
 800b4a6:	f77f ab03 	ble.w	800aab0 <_vfprintf_r+0xa3c>
 800b4aa:	2c10      	cmp	r4, #16
 800b4ac:	f77f af6d 	ble.w	800b38a <_vfprintf_r+0x1316>
 800b4b0:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b4b4:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b4b8:	4d7b      	ldr	r5, [pc, #492]	; (800b6a8 <_vfprintf_r+0x1634>)
 800b4ba:	2610      	movs	r6, #16
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	f1a4 0711 	sub.w	r7, r4, #17
 800b4c2:	1991      	adds	r1, r2, r6
 800b4c4:	2b07      	cmp	r3, #7
 800b4c6:	e88b 0060 	stmia.w	fp, {r5, r6}
 800b4ca:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800b4ce:	f8ca 1008 	str.w	r1, [sl, #8]
 800b4d2:	f8ca 3004 	str.w	r3, [sl, #4]
 800b4d6:	f300 8391 	bgt.w	800bbfc <_vfprintf_r+0x1b88>
 800b4da:	f10b 0b08 	add.w	fp, fp, #8
 800b4de:	3c10      	subs	r4, #16
 800b4e0:	2c10      	cmp	r4, #16
 800b4e2:	f77f af53 	ble.w	800b38c <_vfprintf_r+0x1318>
 800b4e6:	b1b7      	cbz	r7, 800b516 <_vfprintf_r+0x14a2>
 800b4e8:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b4ec:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b4f0:	f8cb 5000 	str.w	r5, [fp]
 800b4f4:	1c41      	adds	r1, r0, #1
 800b4f6:	3210      	adds	r2, #16
 800b4f8:	2907      	cmp	r1, #7
 800b4fa:	f8cb 6004 	str.w	r6, [fp, #4]
 800b4fe:	f8ca 2008 	str.w	r2, [sl, #8]
 800b502:	f8ca 1004 	str.w	r1, [sl, #4]
 800b506:	f300 83dd 	bgt.w	800bcc4 <_vfprintf_r+0x1c50>
 800b50a:	f10b 0b08 	add.w	fp, fp, #8
 800b50e:	3c10      	subs	r4, #16
 800b510:	2c10      	cmp	r4, #16
 800b512:	f77f af3b 	ble.w	800b38c <_vfprintf_r+0x1318>
 800b516:	9f07      	ldr	r7, [sp, #28]
 800b518:	e018      	b.n	800b54c <_vfprintf_r+0x14d8>
 800b51a:	f10b 0b08 	add.w	fp, fp, #8
 800b51e:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b522:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b526:	f8cb 5000 	str.w	r5, [fp]
 800b52a:	1c53      	adds	r3, r2, #1
 800b52c:	3110      	adds	r1, #16
 800b52e:	3c10      	subs	r4, #16
 800b530:	2b07      	cmp	r3, #7
 800b532:	f8cb 6004 	str.w	r6, [fp, #4]
 800b536:	f8ca 1008 	str.w	r1, [sl, #8]
 800b53a:	f8ca 3004 	str.w	r3, [sl, #4]
 800b53e:	dc36      	bgt.n	800b5ae <_vfprintf_r+0x153a>
 800b540:	f10b 0b08 	add.w	fp, fp, #8
 800b544:	3c10      	subs	r4, #16
 800b546:	2c10      	cmp	r4, #16
 800b548:	f77f af20 	ble.w	800b38c <_vfprintf_r+0x1318>
 800b54c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b550:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b554:	f8cb 5000 	str.w	r5, [fp]
 800b558:	1c58      	adds	r0, r3, #1
 800b55a:	3210      	adds	r2, #16
 800b55c:	2807      	cmp	r0, #7
 800b55e:	f8cb 6004 	str.w	r6, [fp, #4]
 800b562:	f8ca 2008 	str.w	r2, [sl, #8]
 800b566:	f8ca 0004 	str.w	r0, [sl, #4]
 800b56a:	ddd6      	ble.n	800b51a <_vfprintf_r+0x14a6>
 800b56c:	4638      	mov	r0, r7
 800b56e:	4649      	mov	r1, r9
 800b570:	4652      	mov	r2, sl
 800b572:	f003 fc6b 	bl	800ee4c <__sprint_r>
 800b576:	2800      	cmp	r0, #0
 800b578:	f47e aece 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b57c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b580:	e7cd      	b.n	800b51e <_vfprintf_r+0x14aa>
 800b582:	f8da 0008 	ldr.w	r0, [sl, #8]
 800b586:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b58a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b58c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b58e:	f8cb 4004 	str.w	r4, [fp, #4]
 800b592:	1821      	adds	r1, r4, r0
 800b594:	1c50      	adds	r0, r2, #1
 800b596:	2807      	cmp	r0, #7
 800b598:	f8cb 5000 	str.w	r5, [fp]
 800b59c:	f8ca 1008 	str.w	r1, [sl, #8]
 800b5a0:	f8ca 0004 	str.w	r0, [sl, #4]
 800b5a4:	f300 82fc 	bgt.w	800bba0 <_vfprintf_r+0x1b2c>
 800b5a8:	f10b 0b08 	add.w	fp, fp, #8
 800b5ac:	e75b      	b.n	800b466 <_vfprintf_r+0x13f2>
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	4652      	mov	r2, sl
 800b5b4:	f003 fc4a 	bl	800ee4c <__sprint_r>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	f47e aead 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b5be:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b5c2:	e7bf      	b.n	800b544 <_vfprintf_r+0x14d0>
 800b5c4:	9807      	ldr	r0, [sp, #28]
 800b5c6:	4649      	mov	r1, r9
 800b5c8:	4652      	mov	r2, sl
 800b5ca:	f003 fc3f 	bl	800ee4c <__sprint_r>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f47e aea2 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b5d4:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b5d8:	e436      	b.n	800ae48 <_vfprintf_r+0xdd4>
 800b5da:	9807      	ldr	r0, [sp, #28]
 800b5dc:	4649      	mov	r1, r9
 800b5de:	4652      	mov	r2, sl
 800b5e0:	f003 fc34 	bl	800ee4c <__sprint_r>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	f47e ae97 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b5ea:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b5ee:	e442      	b.n	800ae76 <_vfprintf_r+0xe02>
 800b5f0:	9c05      	ldr	r4, [sp, #20]
 800b5f2:	07e1      	lsls	r1, r4, #31
 800b5f4:	f53f aca0 	bmi.w	800af38 <_vfprintf_r+0xec4>
 800b5f8:	1c42      	adds	r2, r0, #1
 800b5fa:	1c58      	adds	r0, r3, #1
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	2807      	cmp	r0, #7
 800b600:	f8cb 8000 	str.w	r8, [fp]
 800b604:	f8cb 1004 	str.w	r1, [fp, #4]
 800b608:	f8ca 2008 	str.w	r2, [sl, #8]
 800b60c:	f8ca 0004 	str.w	r0, [sl, #4]
 800b610:	f77f acd3 	ble.w	800afba <_vfprintf_r+0xf46>
 800b614:	9807      	ldr	r0, [sp, #28]
 800b616:	4649      	mov	r1, r9
 800b618:	4652      	mov	r2, sl
 800b61a:	f003 fc17 	bl	800ee4c <__sprint_r>
 800b61e:	2800      	cmp	r0, #0
 800b620:	f47e ae7a 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b624:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b628:	e4c9      	b.n	800afbe <_vfprintf_r+0xf4a>
 800b62a:	9807      	ldr	r0, [sp, #28]
 800b62c:	4649      	mov	r1, r9
 800b62e:	4652      	mov	r2, sl
 800b630:	f003 fc0c 	bl	800ee4c <__sprint_r>
 800b634:	2800      	cmp	r0, #0
 800b636:	f47e ae6f 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b63a:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b63e:	e48b      	b.n	800af58 <_vfprintf_r+0xee4>
 800b640:	4d19      	ldr	r5, [pc, #100]	; (800b6a8 <_vfprintf_r+0x1634>)
 800b642:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b646:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b64a:	f8cb 5000 	str.w	r5, [fp]
 800b64e:	1c59      	adds	r1, r3, #1
 800b650:	1910      	adds	r0, r2, r4
 800b652:	2907      	cmp	r1, #7
 800b654:	f8cb 4004 	str.w	r4, [fp, #4]
 800b658:	f8ca 0008 	str.w	r0, [sl, #8]
 800b65c:	f8ca 1004 	str.w	r1, [sl, #4]
 800b660:	f77f acab 	ble.w	800afba <_vfprintf_r+0xf46>
 800b664:	e7d6      	b.n	800b614 <_vfprintf_r+0x15a0>
 800b666:	9807      	ldr	r0, [sp, #28]
 800b668:	4649      	mov	r1, r9
 800b66a:	4652      	mov	r2, sl
 800b66c:	f003 fbee 	bl	800ee4c <__sprint_r>
 800b670:	2800      	cmp	r0, #0
 800b672:	f47e ae51 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b676:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b67a:	e482      	b.n	800af82 <_vfprintf_r+0xf0e>
 800b67c:	9807      	ldr	r0, [sp, #28]
 800b67e:	4649      	mov	r1, r9
 800b680:	4652      	mov	r2, sl
 800b682:	f003 fbe3 	bl	800ee4c <__sprint_r>
 800b686:	2800      	cmp	r0, #0
 800b688:	f47e ae46 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b68c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b690:	f7ff b962 	b.w	800a958 <_vfprintf_r+0x8e4>
 800b694:	222d      	movs	r2, #45	; 0x2d
 800b696:	4264      	negs	r4, r4
 800b698:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800b69c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	f7fe beac 	b.w	800a3fe <_vfprintf_r+0x38a>
 800b6a6:	bf00      	nop
 800b6a8:	0800fd28 	.word	0x0800fd28
 800b6ac:	4632      	mov	r2, r6
 800b6ae:	4623      	mov	r3, r4
 800b6b0:	ec43 2b10 	vmov	d0, r2, r3
 800b6b4:	f8cd c008 	str.w	ip, [sp, #8]
 800b6b8:	f7fe fb74 	bl	8009da4 <__fpclassifyd>
 800b6bc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	f000 818c 	beq.w	800b9de <_vfprintf_r+0x196a>
 800b6c6:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b6ca:	f000 835b 	beq.w	800bd84 <_vfprintf_r+0x1d10>
 800b6ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b6d0:	2d67      	cmp	r5, #103	; 0x67
 800b6d2:	f000 8337 	beq.w	800bd44 <_vfprintf_r+0x1cd0>
 800b6d6:	2d47      	cmp	r5, #71	; 0x47
 800b6d8:	f000 8334 	beq.w	800bd44 <_vfprintf_r+0x1cd0>
 800b6dc:	9b05      	ldr	r3, [sp, #20]
 800b6de:	2c00      	cmp	r4, #0
 800b6e0:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800b6e4:	910f      	str	r1, [sp, #60]	; 0x3c
 800b6e6:	f2c0 8350 	blt.w	800bd8a <_vfprintf_r+0x1d16>
 800b6ea:	2700      	movs	r7, #0
 800b6ec:	970e      	str	r7, [sp, #56]	; 0x38
 800b6ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b6f0:	2d66      	cmp	r5, #102	; 0x66
 800b6f2:	f000 82f5 	beq.w	800bce0 <_vfprintf_r+0x1c6c>
 800b6f6:	2d46      	cmp	r5, #70	; 0x46
 800b6f8:	f000 82f2 	beq.w	800bce0 <_vfprintf_r+0x1c6c>
 800b6fc:	2d65      	cmp	r5, #101	; 0x65
 800b6fe:	f000 8349 	beq.w	800bd94 <_vfprintf_r+0x1d20>
 800b702:	2d45      	cmp	r5, #69	; 0x45
 800b704:	f000 8346 	beq.w	800bd94 <_vfprintf_r+0x1d20>
 800b708:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b70c:	4632      	mov	r2, r6
 800b70e:	4623      	mov	r3, r4
 800b710:	ad1c      	add	r5, sp, #112	; 0x70
 800b712:	a91d      	add	r1, sp, #116	; 0x74
 800b714:	af1e      	add	r7, sp, #120	; 0x78
 800b716:	ec43 2b10 	vmov	d0, r2, r3
 800b71a:	e88d 0082 	stmia.w	sp, {r1, r7}
 800b71e:	462b      	mov	r3, r5
 800b720:	2102      	movs	r1, #2
 800b722:	9807      	ldr	r0, [sp, #28]
 800b724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b726:	f8cd 8008 	str.w	r8, [sp, #8]
 800b72a:	9508      	str	r5, [sp, #32]
 800b72c:	f000 fdd4 	bl	800c2d8 <_dtoa_r>
 800b730:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b732:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b736:	2b67      	cmp	r3, #103	; 0x67
 800b738:	4680      	mov	r8, r0
 800b73a:	d001      	beq.n	800b740 <_vfprintf_r+0x16cc>
 800b73c:	2b47      	cmp	r3, #71	; 0x47
 800b73e:	d103      	bne.n	800b748 <_vfprintf_r+0x16d4>
 800b740:	9905      	ldr	r1, [sp, #20]
 800b742:	07cb      	lsls	r3, r1, #31
 800b744:	f140 832a 	bpl.w	800bd9c <_vfprintf_r+0x1d28>
 800b748:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b74a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b74c:	2846      	cmp	r0, #70	; 0x46
 800b74e:	eb08 0502 	add.w	r5, r8, r2
 800b752:	f000 82de 	beq.w	800bd12 <_vfprintf_r+0x1c9e>
 800b756:	4630      	mov	r0, r6
 800b758:	4621      	mov	r1, r4
 800b75a:	2200      	movs	r2, #0
 800b75c:	2300      	movs	r3, #0
 800b75e:	f8cd c008 	str.w	ip, [sp, #8]
 800b762:	f7fd fe4f 	bl	8009404 <__aeabi_dcmpeq>
 800b766:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b76a:	b9e8      	cbnz	r0, 800b7a8 <_vfprintf_r+0x1734>
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	4295      	cmp	r5, r2
 800b770:	f240 83c5 	bls.w	800befe <_vfprintf_r+0x1e8a>
 800b774:	4613      	mov	r3, r2
 800b776:	2430      	movs	r4, #48	; 0x30
 800b778:	f803 4b01 	strb.w	r4, [r3], #1
 800b77c:	43d0      	mvns	r0, r2
 800b77e:	1829      	adds	r1, r5, r0
 800b780:	42ab      	cmp	r3, r5
 800b782:	603b      	str	r3, [r7, #0]
 800b784:	f001 0001 	and.w	r0, r1, #1
 800b788:	d00d      	beq.n	800b7a6 <_vfprintf_r+0x1732>
 800b78a:	b120      	cbz	r0, 800b796 <_vfprintf_r+0x1722>
 800b78c:	3301      	adds	r3, #1
 800b78e:	42ab      	cmp	r3, r5
 800b790:	7054      	strb	r4, [r2, #1]
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	d007      	beq.n	800b7a6 <_vfprintf_r+0x1732>
 800b796:	461a      	mov	r2, r3
 800b798:	f802 4b01 	strb.w	r4, [r2], #1
 800b79c:	705c      	strb	r4, [r3, #1]
 800b79e:	1c53      	adds	r3, r2, #1
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	603b      	str	r3, [r7, #0]
 800b7a4:	d1f7      	bne.n	800b796 <_vfprintf_r+0x1722>
 800b7a6:	461d      	mov	r5, r3
 800b7a8:	ebc8 0705 	rsb	r7, r8, r5
 800b7ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b7ae:	970d      	str	r7, [sp, #52]	; 0x34
 800b7b0:	2d67      	cmp	r5, #103	; 0x67
 800b7b2:	f000 823f 	beq.w	800bc34 <_vfprintf_r+0x1bc0>
 800b7b6:	2d47      	cmp	r5, #71	; 0x47
 800b7b8:	f000 823c 	beq.w	800bc34 <_vfprintf_r+0x1bc0>
 800b7bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b7be:	2a66      	cmp	r2, #102	; 0x66
 800b7c0:	f040 8241 	bne.w	800bc46 <_vfprintf_r+0x1bd2>
 800b7c4:	9c08      	ldr	r4, [sp, #32]
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f340 835b 	ble.w	800be84 <_vfprintf_r+0x1e10>
 800b7ce:	f1bc 0f00 	cmp.w	ip, #0
 800b7d2:	f040 8340 	bne.w	800be56 <_vfprintf_r+0x1de2>
 800b7d6:	9a05      	ldr	r2, [sp, #20]
 800b7d8:	07d4      	lsls	r4, r2, #31
 800b7da:	f100 833c 	bmi.w	800be56 <_vfprintf_r+0x1de2>
 800b7de:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 800b7e2:	9408      	str	r4, [sp, #32]
 800b7e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7e6:	9312      	str	r3, [sp, #72]	; 0x48
 800b7e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b7ea:	2d00      	cmp	r5, #0
 800b7ec:	f000 825f 	beq.w	800bcae <_vfprintf_r+0x1c3a>
 800b7f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b7f2:	222d      	movs	r2, #45	; 0x2d
 800b7f4:	2700      	movs	r7, #0
 800b7f6:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800b7fa:	9405      	str	r4, [sp, #20]
 800b7fc:	970e      	str	r7, [sp, #56]	; 0x38
 800b7fe:	f7fe be27 	b.w	800a450 <_vfprintf_r+0x3dc>
 800b802:	9b05      	ldr	r3, [sp, #20]
 800b804:	06db      	lsls	r3, r3, #27
 800b806:	f140 8111 	bpl.w	800ba2c <_vfprintf_r+0x19b8>
 800b80a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b80c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b80e:	6813      	ldr	r3, [r2, #0]
 800b810:	1d15      	adds	r5, r2, #4
 800b812:	950c      	str	r5, [sp, #48]	; 0x30
 800b814:	6018      	str	r0, [r3, #0]
 800b816:	f7fe bc7f 	b.w	800a118 <_vfprintf_r+0xa4>
 800b81a:	9a05      	ldr	r2, [sp, #20]
 800b81c:	0653      	lsls	r3, r2, #25
 800b81e:	f140 8101 	bpl.w	800ba24 <_vfprintf_r+0x19b0>
 800b822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b824:	1d28      	adds	r0, r5, #4
 800b826:	882c      	ldrh	r4, [r5, #0]
 800b828:	900c      	str	r0, [sp, #48]	; 0x30
 800b82a:	2500      	movs	r5, #0
 800b82c:	f7fe bf24 	b.w	800a678 <_vfprintf_r+0x604>
 800b830:	9905      	ldr	r1, [sp, #20]
 800b832:	0649      	lsls	r1, r1, #25
 800b834:	f140 80f2 	bpl.w	800ba1c <_vfprintf_r+0x19a8>
 800b838:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b83a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800b83e:	1d39      	adds	r1, r7, #4
 800b840:	17e5      	asrs	r5, r4, #31
 800b842:	4622      	mov	r2, r4
 800b844:	462b      	mov	r3, r5
 800b846:	910c      	str	r1, [sp, #48]	; 0x30
 800b848:	f7fe bdd3 	b.w	800a3f2 <_vfprintf_r+0x37e>
 800b84c:	f893 8000 	ldrb.w	r8, [r3]
 800b850:	f7fe bca1 	b.w	800a196 <_vfprintf_r+0x122>
 800b854:	4dc1      	ldr	r5, [pc, #772]	; (800bb5c <_vfprintf_r+0x1ae8>)
 800b856:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b85a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800b85e:	f8cb 5000 	str.w	r5, [fp]
 800b862:	1c4b      	adds	r3, r1, #1
 800b864:	1902      	adds	r2, r0, r4
 800b866:	2b07      	cmp	r3, #7
 800b868:	f8cb 4004 	str.w	r4, [fp, #4]
 800b86c:	f8ca 2008 	str.w	r2, [sl, #8]
 800b870:	f8ca 3004 	str.w	r3, [sl, #4]
 800b874:	f73f ade2 	bgt.w	800b43c <_vfprintf_r+0x13c8>
 800b878:	f10b 0b08 	add.w	fp, fp, #8
 800b87c:	e5e8      	b.n	800b450 <_vfprintf_r+0x13dc>
 800b87e:	4db7      	ldr	r5, [pc, #732]	; (800bb5c <_vfprintf_r+0x1ae8>)
 800b880:	f7ff b8eb 	b.w	800aa5a <_vfprintf_r+0x9e6>
 800b884:	9807      	ldr	r0, [sp, #28]
 800b886:	4649      	mov	r1, r9
 800b888:	4652      	mov	r2, sl
 800b88a:	f003 fadf 	bl	800ee4c <__sprint_r>
 800b88e:	2800      	cmp	r0, #0
 800b890:	f47e ad42 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b894:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b898:	f7ff ba21 	b.w	800acde <_vfprintf_r+0xc6a>
 800b89c:	f8da 0008 	ldr.w	r0, [sl, #8]
 800b8a0:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b8a4:	1c42      	adds	r2, r0, #1
 800b8a6:	1c4b      	adds	r3, r1, #1
 800b8a8:	48ad      	ldr	r0, [pc, #692]	; (800bb60 <_vfprintf_r+0x1aec>)
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	2b07      	cmp	r3, #7
 800b8ae:	f8cb 0000 	str.w	r0, [fp]
 800b8b2:	f8cb 1004 	str.w	r1, [fp, #4]
 800b8b6:	f8ca 2008 	str.w	r2, [sl, #8]
 800b8ba:	f8ca 3004 	str.w	r3, [sl, #4]
 800b8be:	f300 80c2 	bgt.w	800ba46 <_vfprintf_r+0x19d2>
 800b8c2:	f10b 0b08 	add.w	fp, fp, #8
 800b8c6:	b92c      	cbnz	r4, 800b8d4 <_vfprintf_r+0x1860>
 800b8c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b8ca:	b91d      	cbnz	r5, 800b8d4 <_vfprintf_r+0x1860>
 800b8cc:	9a05      	ldr	r2, [sp, #20]
 800b8ce:	07d5      	lsls	r5, r2, #31
 800b8d0:	f57f a8ee 	bpl.w	800aab0 <_vfprintf_r+0xa3c>
 800b8d4:	f8da 0008 	ldr.w	r0, [sl, #8]
 800b8d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b8dc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800b8de:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b8e0:	f8cb 5004 	str.w	r5, [fp, #4]
 800b8e4:	182a      	adds	r2, r5, r0
 800b8e6:	1c58      	adds	r0, r3, #1
 800b8e8:	2807      	cmp	r0, #7
 800b8ea:	f8cb 1000 	str.w	r1, [fp]
 800b8ee:	f8ca 2008 	str.w	r2, [sl, #8]
 800b8f2:	f8ca 0004 	str.w	r0, [sl, #4]
 800b8f6:	f300 822b 	bgt.w	800bd50 <_vfprintf_r+0x1cdc>
 800b8fa:	f10b 0b08 	add.w	fp, fp, #8
 800b8fe:	4264      	negs	r4, r4
 800b900:	2c00      	cmp	r4, #0
 800b902:	f340 80d6 	ble.w	800bab2 <_vfprintf_r+0x1a3e>
 800b906:	2c10      	cmp	r4, #16
 800b908:	f340 8156 	ble.w	800bbb8 <_vfprintf_r+0x1b44>
 800b90c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b910:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b914:	4e91      	ldr	r6, [pc, #580]	; (800bb5c <_vfprintf_r+0x1ae8>)
 800b916:	2710      	movs	r7, #16
 800b918:	1c58      	adds	r0, r3, #1
 800b91a:	f1a4 0511 	sub.w	r5, r4, #17
 800b91e:	19ca      	adds	r2, r1, r7
 800b920:	2807      	cmp	r0, #7
 800b922:	e88b 00c0 	stmia.w	fp, {r6, r7}
 800b926:	f3c5 1500 	ubfx	r5, r5, #4, #1
 800b92a:	f8ca 2008 	str.w	r2, [sl, #8]
 800b92e:	f8ca 0004 	str.w	r0, [sl, #4]
 800b932:	f300 827d 	bgt.w	800be30 <_vfprintf_r+0x1dbc>
 800b936:	f10b 0b08 	add.w	fp, fp, #8
 800b93a:	3c10      	subs	r4, #16
 800b93c:	2c10      	cmp	r4, #16
 800b93e:	f340 813c 	ble.w	800bbba <_vfprintf_r+0x1b46>
 800b942:	b1b5      	cbz	r5, 800b972 <_vfprintf_r+0x18fe>
 800b944:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b948:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b94c:	f8cb 6000 	str.w	r6, [fp]
 800b950:	1c5a      	adds	r2, r3, #1
 800b952:	3110      	adds	r1, #16
 800b954:	2a07      	cmp	r2, #7
 800b956:	f8cb 7004 	str.w	r7, [fp, #4]
 800b95a:	f8ca 1008 	str.w	r1, [sl, #8]
 800b95e:	f8ca 2004 	str.w	r2, [sl, #4]
 800b962:	f300 821d 	bgt.w	800bda0 <_vfprintf_r+0x1d2c>
 800b966:	f10b 0b08 	add.w	fp, fp, #8
 800b96a:	3c10      	subs	r4, #16
 800b96c:	2c10      	cmp	r4, #16
 800b96e:	f340 8124 	ble.w	800bbba <_vfprintf_r+0x1b46>
 800b972:	9d07      	ldr	r5, [sp, #28]
 800b974:	e018      	b.n	800b9a8 <_vfprintf_r+0x1934>
 800b976:	f10b 0b08 	add.w	fp, fp, #8
 800b97a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b97e:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b982:	f8cb 6000 	str.w	r6, [fp]
 800b986:	1c41      	adds	r1, r0, #1
 800b988:	3210      	adds	r2, #16
 800b98a:	3c10      	subs	r4, #16
 800b98c:	2907      	cmp	r1, #7
 800b98e:	f8cb 7004 	str.w	r7, [fp, #4]
 800b992:	f8ca 2008 	str.w	r2, [sl, #8]
 800b996:	f8ca 1004 	str.w	r1, [sl, #4]
 800b99a:	dc60      	bgt.n	800ba5e <_vfprintf_r+0x19ea>
 800b99c:	f10b 0b08 	add.w	fp, fp, #8
 800b9a0:	3c10      	subs	r4, #16
 800b9a2:	2c10      	cmp	r4, #16
 800b9a4:	f340 8109 	ble.w	800bbba <_vfprintf_r+0x1b46>
 800b9a8:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b9ac:	f8da 0008 	ldr.w	r0, [sl, #8]
 800b9b0:	f8cb 6000 	str.w	r6, [fp]
 800b9b4:	1c4b      	adds	r3, r1, #1
 800b9b6:	3010      	adds	r0, #16
 800b9b8:	2b07      	cmp	r3, #7
 800b9ba:	f8cb 7004 	str.w	r7, [fp, #4]
 800b9be:	f8ca 0008 	str.w	r0, [sl, #8]
 800b9c2:	f8ca 3004 	str.w	r3, [sl, #4]
 800b9c6:	ddd6      	ble.n	800b976 <_vfprintf_r+0x1902>
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	4652      	mov	r2, sl
 800b9ce:	f003 fa3d 	bl	800ee4c <__sprint_r>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	f47e aca0 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800b9d8:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800b9dc:	e7cd      	b.n	800b97a <_vfprintf_r+0x1906>
 800b9de:	9c05      	ldr	r4, [sp, #20]
 800b9e0:	4a60      	ldr	r2, [pc, #384]	; (800bb64 <_vfprintf_r+0x1af0>)
 800b9e2:	4f61      	ldr	r7, [pc, #388]	; (800bb68 <_vfprintf_r+0x1af4>)
 800b9e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b9e6:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800b9ea:	900e      	str	r0, [sp, #56]	; 0x38
 800b9ec:	2103      	movs	r1, #3
 800b9ee:	9108      	str	r1, [sp, #32]
 800b9f0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800b9f4:	2103      	movs	r1, #3
 800b9f6:	2d47      	cmp	r5, #71	; 0x47
 800b9f8:	bfcc      	ite	gt
 800b9fa:	46b8      	movgt	r8, r7
 800b9fc:	4690      	movle	r8, r2
 800b9fe:	9405      	str	r4, [sp, #20]
 800ba00:	910b      	str	r1, [sp, #44]	; 0x2c
 800ba02:	9012      	str	r0, [sp, #72]	; 0x48
 800ba04:	f7fe bd23 	b.w	800a44e <_vfprintf_r+0x3da>
 800ba08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba0a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800ba0e:	970c      	str	r7, [sp, #48]	; 0x30
 800ba10:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800ba14:	9008      	str	r0, [sp, #32]
 800ba16:	9412      	str	r4, [sp, #72]	; 0x48
 800ba18:	f7fe bd19 	b.w	800a44e <_vfprintf_r+0x3da>
 800ba1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba1e:	6802      	ldr	r2, [r0, #0]
 800ba20:	f7fe bed8 	b.w	800a7d4 <_vfprintf_r+0x760>
 800ba24:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba26:	680b      	ldr	r3, [r1, #0]
 800ba28:	f7fe bf42 	b.w	800a8b0 <_vfprintf_r+0x83c>
 800ba2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba2e:	9a05      	ldr	r2, [sp, #20]
 800ba30:	6828      	ldr	r0, [r5, #0]
 800ba32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba34:	1d29      	adds	r1, r5, #4
 800ba36:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ba3a:	910c      	str	r1, [sp, #48]	; 0x30
 800ba3c:	bf14      	ite	ne
 800ba3e:	8004      	strhne	r4, [r0, #0]
 800ba40:	6004      	streq	r4, [r0, #0]
 800ba42:	f7fe bb69 	b.w	800a118 <_vfprintf_r+0xa4>
 800ba46:	9807      	ldr	r0, [sp, #28]
 800ba48:	4649      	mov	r1, r9
 800ba4a:	4652      	mov	r2, sl
 800ba4c:	f003 f9fe 	bl	800ee4c <__sprint_r>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	f47e ac61 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800ba56:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ba58:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800ba5c:	e733      	b.n	800b8c6 <_vfprintf_r+0x1852>
 800ba5e:	4628      	mov	r0, r5
 800ba60:	4649      	mov	r1, r9
 800ba62:	4652      	mov	r2, sl
 800ba64:	f003 f9f2 	bl	800ee4c <__sprint_r>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	f47e ac55 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800ba6e:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800ba72:	e795      	b.n	800b9a0 <_vfprintf_r+0x192c>
 800ba74:	9d05      	ldr	r5, [sp, #20]
 800ba76:	f890 8001 	ldrb.w	r8, [r0, #1]
 800ba7a:	f045 0520 	orr.w	r5, r5, #32
 800ba7e:	3301      	adds	r3, #1
 800ba80:	9505      	str	r5, [sp, #20]
 800ba82:	f7fe bb88 	b.w	800a196 <_vfprintf_r+0x122>
 800ba86:	9807      	ldr	r0, [sp, #28]
 800ba88:	4649      	mov	r1, r9
 800ba8a:	4652      	mov	r2, sl
 800ba8c:	f003 f9de 	bl	800ee4c <__sprint_r>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	f47e ac41 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800ba96:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800ba9a:	f7ff b93d 	b.w	800ad18 <_vfprintf_r+0xca4>
 800ba9e:	9807      	ldr	r0, [sp, #28]
 800baa0:	4649      	mov	r1, r9
 800baa2:	4652      	mov	r2, sl
 800baa4:	f003 f9d2 	bl	800ee4c <__sprint_r>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	f47e ac35 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800baae:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bab2:	f8da 1008 	ldr.w	r1, [sl, #8]
 800bab6:	f8da 0004 	ldr.w	r0, [sl, #4]
 800baba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800babc:	f8cb 8000 	str.w	r8, [fp]
 800bac0:	e46a      	b.n	800b398 <_vfprintf_r+0x1324>
 800bac2:	f003 f993 	bl	800edec <strlen>
 800bac6:	940e      	str	r4, [sp, #56]	; 0x38
 800bac8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800baca:	900b      	str	r0, [sp, #44]	; 0x2c
 800bacc:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 800bad0:	9408      	str	r4, [sp, #32]
 800bad2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bad6:	970c      	str	r7, [sp, #48]	; 0x30
 800bad8:	9112      	str	r1, [sp, #72]	; 0x48
 800bada:	f7fe bcb8 	b.w	800a44e <_vfprintf_r+0x3da>
 800bade:	9807      	ldr	r0, [sp, #28]
 800bae0:	4649      	mov	r1, r9
 800bae2:	4652      	mov	r2, sl
 800bae4:	f003 f9b2 	bl	800ee4c <__sprint_r>
 800bae8:	2800      	cmp	r0, #0
 800baea:	f47e ac15 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800baee:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800baf2:	f7ff bbe4 	b.w	800b2be <_vfprintf_r+0x124a>
 800baf6:	4d1d      	ldr	r5, [pc, #116]	; (800bb6c <_vfprintf_r+0x1af8>)
 800baf8:	f7ff b85d 	b.w	800abb6 <_vfprintf_r+0xb42>
 800bafc:	9807      	ldr	r0, [sp, #28]
 800bafe:	4649      	mov	r1, r9
 800bb00:	4652      	mov	r2, sl
 800bb02:	f003 f9a3 	bl	800ee4c <__sprint_r>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	f47e ac06 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bb0c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bb10:	f7ff bbed 	b.w	800b2ee <_vfprintf_r+0x127a>
 800bb14:	9807      	ldr	r0, [sp, #28]
 800bb16:	4649      	mov	r1, r9
 800bb18:	4652      	mov	r2, sl
 800bb1a:	f003 f997 	bl	800ee4c <__sprint_r>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	f47e abfa 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bb24:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bb28:	f7ff bb47 	b.w	800b1ba <_vfprintf_r+0x1146>
 800bb2c:	9807      	ldr	r0, [sp, #28]
 800bb2e:	4649      	mov	r1, r9
 800bb30:	4652      	mov	r2, sl
 800bb32:	f003 f98b 	bl	800ee4c <__sprint_r>
 800bb36:	2800      	cmp	r0, #0
 800bb38:	f47e abee 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bb3c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bb40:	f7ff bb1a 	b.w	800b178 <_vfprintf_r+0x1104>
 800bb44:	9807      	ldr	r0, [sp, #28]
 800bb46:	4649      	mov	r1, r9
 800bb48:	4652      	mov	r2, sl
 800bb4a:	f003 f97f 	bl	800ee4c <__sprint_r>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	f47e abe2 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bb54:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bb58:	f7ff b8fd 	b.w	800ad56 <_vfprintf_r+0xce2>
 800bb5c:	0800fd28 	.word	0x0800fd28
 800bb60:	0800fd24 	.word	0x0800fd24
 800bb64:	0800fcec 	.word	0x0800fcec
 800bb68:	0800fcf0 	.word	0x0800fcf0
 800bb6c:	0800fcd4 	.word	0x0800fcd4
 800bb70:	9807      	ldr	r0, [sp, #28]
 800bb72:	4649      	mov	r1, r9
 800bb74:	4652      	mov	r2, sl
 800bb76:	f003 f969 	bl	800ee4c <__sprint_r>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	f47e abcc 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bb80:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bb84:	f7ff b8ff 	b.w	800ad86 <_vfprintf_r+0xd12>
 800bb88:	9807      	ldr	r0, [sp, #28]
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	4652      	mov	r2, sl
 800bb8e:	f003 f95d 	bl	800ee4c <__sprint_r>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f47e abc0 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bb98:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bb9c:	f7ff bb25 	b.w	800b1ea <_vfprintf_r+0x1176>
 800bba0:	9807      	ldr	r0, [sp, #28]
 800bba2:	4649      	mov	r1, r9
 800bba4:	4652      	mov	r2, sl
 800bba6:	f003 f951 	bl	800ee4c <__sprint_r>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	f47e abb4 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bbb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bbb2:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bbb6:	e456      	b.n	800b466 <_vfprintf_r+0x13f2>
 800bbb8:	4eb7      	ldr	r6, [pc, #732]	; (800be98 <_vfprintf_r+0x1e24>)
 800bbba:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bbbe:	f8da 2008 	ldr.w	r2, [sl, #8]
 800bbc2:	f8cb 6000 	str.w	r6, [fp]
 800bbc6:	1c59      	adds	r1, r3, #1
 800bbc8:	1910      	adds	r0, r2, r4
 800bbca:	2907      	cmp	r1, #7
 800bbcc:	f8cb 4004 	str.w	r4, [fp, #4]
 800bbd0:	f8ca 0008 	str.w	r0, [sl, #8]
 800bbd4:	f8ca 1004 	str.w	r1, [sl, #4]
 800bbd8:	f73f af61 	bgt.w	800ba9e <_vfprintf_r+0x1a2a>
 800bbdc:	f10b 0b08 	add.w	fp, fp, #8
 800bbe0:	e767      	b.n	800bab2 <_vfprintf_r+0x1a3e>
 800bbe2:	2e06      	cmp	r6, #6
 800bbe4:	bf34      	ite	cc
 800bbe6:	4634      	movcc	r4, r6
 800bbe8:	2406      	movcs	r4, #6
 800bbea:	940b      	str	r4, [sp, #44]	; 0x2c
 800bbec:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800bbf0:	9408      	str	r4, [sp, #32]
 800bbf2:	970c      	str	r7, [sp, #48]	; 0x30
 800bbf4:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800bea0 <_vfprintf_r+0x1e2c>
 800bbf8:	f7fe be0c 	b.w	800a814 <_vfprintf_r+0x7a0>
 800bbfc:	9807      	ldr	r0, [sp, #28]
 800bbfe:	4649      	mov	r1, r9
 800bc00:	4652      	mov	r2, sl
 800bc02:	f003 f923 	bl	800ee4c <__sprint_r>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f47e ab86 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bc0c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bc10:	e465      	b.n	800b4de <_vfprintf_r+0x146a>
 800bc12:	9807      	ldr	r0, [sp, #28]
 800bc14:	4649      	mov	r1, r9
 800bc16:	4652      	mov	r2, sl
 800bc18:	f003 f918 	bl	800ee4c <__sprint_r>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	f47e ab7b 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bc22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bc24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bc26:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bc2a:	1ae3      	subs	r3, r4, r3
 800bc2c:	e437      	b.n	800b49e <_vfprintf_r+0x142a>
 800bc2e:	4d9b      	ldr	r5, [pc, #620]	; (800be9c <_vfprintf_r+0x1e28>)
 800bc30:	f7fe bfe2 	b.w	800abf8 <_vfprintf_r+0xb84>
 800bc34:	9b08      	ldr	r3, [sp, #32]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	1cdf      	adds	r7, r3, #3
 800bc3a:	db01      	blt.n	800bc40 <_vfprintf_r+0x1bcc>
 800bc3c:	459c      	cmp	ip, r3
 800bc3e:	da28      	bge.n	800bc92 <_vfprintf_r+0x1c1e>
 800bc40:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800bc42:	1eb3      	subs	r3, r6, #2
 800bc44:	9310      	str	r3, [sp, #64]	; 0x40
 800bc46:	9808      	ldr	r0, [sp, #32]
 800bc48:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bc4a:	6807      	ldr	r7, [r0, #0]
 800bc4c:	ae1f      	add	r6, sp, #124	; 0x7c
 800bc4e:	1e7b      	subs	r3, r7, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	6003      	str	r3, [r0, #0]
 800bc54:	7035      	strb	r5, [r6, #0]
 800bc56:	f2c0 8132 	blt.w	800bebe <_vfprintf_r+0x1e4a>
 800bc5a:	222b      	movs	r2, #43	; 0x2b
 800bc5c:	7072      	strb	r2, [r6, #1]
 800bc5e:	2b09      	cmp	r3, #9
 800bc60:	f300 80a9 	bgt.w	800bdb6 <_vfprintf_r+0x1d42>
 800bc64:	3330      	adds	r3, #48	; 0x30
 800bc66:	2130      	movs	r1, #48	; 0x30
 800bc68:	70b1      	strb	r1, [r6, #2]
 800bc6a:	70f3      	strb	r3, [r6, #3]
 800bc6c:	a820      	add	r0, sp, #128	; 0x80
 800bc6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bc70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc72:	1b86      	subs	r6, r0, r6
 800bc74:	19a0      	adds	r0, r4, r6
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	9617      	str	r6, [sp, #92]	; 0x5c
 800bc7a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc7c:	f340 8131 	ble.w	800bee2 <_vfprintf_r+0x1e6e>
 800bc80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bc82:	1c60      	adds	r0, r4, #1
 800bc84:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 800bc88:	2100      	movs	r1, #0
 800bc8a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc8c:	9308      	str	r3, [sp, #32]
 800bc8e:	9112      	str	r1, [sp, #72]	; 0x48
 800bc90:	e5aa      	b.n	800b7e8 <_vfprintf_r+0x1774>
 800bc92:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bc94:	42bb      	cmp	r3, r7
 800bc96:	db67      	blt.n	800bd68 <_vfprintf_r+0x1cf4>
 800bc98:	9805      	ldr	r0, [sp, #20]
 800bc9a:	07c1      	lsls	r1, r0, #31
 800bc9c:	f100 80d3 	bmi.w	800be46 <_vfprintf_r+0x1dd2>
 800bca0:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
 800bca4:	2567      	movs	r5, #103	; 0x67
 800bca6:	9708      	str	r7, [sp, #32]
 800bca8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcaa:	9510      	str	r5, [sp, #64]	; 0x40
 800bcac:	e59b      	b.n	800b7e6 <_vfprintf_r+0x1772>
 800bcae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800bcb0:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bcb4:	9405      	str	r4, [sp, #20]
 800bcb6:	f7fe bbca 	b.w	800a44e <_vfprintf_r+0x3da>
 800bcba:	232d      	movs	r3, #45	; 0x2d
 800bcbc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800bcc0:	f7fe bc7a 	b.w	800a5b8 <_vfprintf_r+0x544>
 800bcc4:	9807      	ldr	r0, [sp, #28]
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	4652      	mov	r2, sl
 800bcca:	f003 f8bf 	bl	800ee4c <__sprint_r>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	f47e ab22 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bcd4:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bcd8:	e419      	b.n	800b50e <_vfprintf_r+0x149a>
 800bcda:	4d6f      	ldr	r5, [pc, #444]	; (800be98 <_vfprintf_r+0x1e24>)
 800bcdc:	f7ff b910 	b.w	800af00 <_vfprintf_r+0xe8c>
 800bce0:	ad1c      	add	r5, sp, #112	; 0x70
 800bce2:	4632      	mov	r2, r6
 800bce4:	4623      	mov	r3, r4
 800bce6:	a91d      	add	r1, sp, #116	; 0x74
 800bce8:	af1e      	add	r7, sp, #120	; 0x78
 800bcea:	ec43 2b10 	vmov	d0, r2, r3
 800bcee:	e88d 0082 	stmia.w	sp, {r1, r7}
 800bcf2:	4642      	mov	r2, r8
 800bcf4:	462b      	mov	r3, r5
 800bcf6:	9807      	ldr	r0, [sp, #28]
 800bcf8:	9508      	str	r5, [sp, #32]
 800bcfa:	2103      	movs	r1, #3
 800bcfc:	f8cd 8008 	str.w	r8, [sp, #8]
 800bd00:	f000 faea 	bl	800c2d8 <_dtoa_r>
 800bd04:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bd08:	4680      	mov	r8, r0
 800bd0a:	eb00 050c 	add.w	r5, r0, ip
 800bd0e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800bd12:	f898 3000 	ldrb.w	r3, [r8]
 800bd16:	2b30      	cmp	r3, #48	; 0x30
 800bd18:	f000 80a6 	beq.w	800be68 <_vfprintf_r+0x1df4>
 800bd1c:	9908      	ldr	r1, [sp, #32]
 800bd1e:	680b      	ldr	r3, [r1, #0]
 800bd20:	18ed      	adds	r5, r5, r3
 800bd22:	e518      	b.n	800b756 <_vfprintf_r+0x16e2>
 800bd24:	ea2c 74ec 	bic.w	r4, ip, ip, asr #31
 800bd28:	900e      	str	r0, [sp, #56]	; 0x38
 800bd2a:	9408      	str	r4, [sp, #32]
 800bd2c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bd30:	970c      	str	r7, [sp, #48]	; 0x30
 800bd32:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800bd36:	9012      	str	r0, [sp, #72]	; 0x48
 800bd38:	f7fe bb89 	b.w	800a44e <_vfprintf_r+0x3da>
 800bd3c:	4623      	mov	r3, r4
 800bd3e:	2600      	movs	r6, #0
 800bd40:	f7fe ba2a 	b.w	800a198 <_vfprintf_r+0x124>
 800bd44:	f1b8 0f00 	cmp.w	r8, #0
 800bd48:	bf08      	it	eq
 800bd4a:	f04f 0801 	moveq.w	r8, #1
 800bd4e:	e4c5      	b.n	800b6dc <_vfprintf_r+0x1668>
 800bd50:	9807      	ldr	r0, [sp, #28]
 800bd52:	4649      	mov	r1, r9
 800bd54:	4652      	mov	r2, sl
 800bd56:	f003 f879 	bl	800ee4c <__sprint_r>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	f47e aadc 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bd60:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800bd62:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bd66:	e5ca      	b.n	800b8fe <_vfprintf_r+0x188a>
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bd6c:	bfd4      	ite	le
 800bd6e:	f1c3 0202 	rsble	r2, r3, #2
 800bd72:	2201      	movgt	r2, #1
 800bd74:	1952      	adds	r2, r2, r5
 800bd76:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 800bd7a:	2167      	movs	r1, #103	; 0x67
 800bd7c:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd7e:	9408      	str	r4, [sp, #32]
 800bd80:	9110      	str	r1, [sp, #64]	; 0x40
 800bd82:	e530      	b.n	800b7e6 <_vfprintf_r+0x1772>
 800bd84:	f04f 0806 	mov.w	r8, #6
 800bd88:	e4a8      	b.n	800b6dc <_vfprintf_r+0x1668>
 800bd8a:	222d      	movs	r2, #45	; 0x2d
 800bd8c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800bd90:	920e      	str	r2, [sp, #56]	; 0x38
 800bd92:	e4ac      	b.n	800b6ee <_vfprintf_r+0x167a>
 800bd94:	f108 0001 	add.w	r0, r8, #1
 800bd98:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd9a:	e4b7      	b.n	800b70c <_vfprintf_r+0x1698>
 800bd9c:	683d      	ldr	r5, [r7, #0]
 800bd9e:	e503      	b.n	800b7a8 <_vfprintf_r+0x1734>
 800bda0:	9807      	ldr	r0, [sp, #28]
 800bda2:	4649      	mov	r1, r9
 800bda4:	4652      	mov	r2, sl
 800bda6:	f003 f851 	bl	800ee4c <__sprint_r>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	f47e aab4 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800bdb0:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800bdb4:	e5d9      	b.n	800b96a <_vfprintf_r+0x18f6>
 800bdb6:	f246 6067 	movw	r0, #26215	; 0x6667
 800bdba:	f10d 058a 	add.w	r5, sp, #138	; 0x8a
 800bdbe:	f2c6 6066 	movt	r0, #26214	; 0x6666
 800bdc2:	fb80 2703 	smull	r2, r7, r0, r3
 800bdc6:	17da      	asrs	r2, r3, #31
 800bdc8:	ebc2 01a7 	rsb	r1, r2, r7, asr #2
 800bdcc:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800bdd0:	462a      	mov	r2, r5
 800bdd2:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 800bdd6:	f103 0530 	add.w	r5, r3, #48	; 0x30
 800bdda:	7015      	strb	r5, [r2, #0]
 800bddc:	1e55      	subs	r5, r2, #1
 800bdde:	2909      	cmp	r1, #9
 800bde0:	460b      	mov	r3, r1
 800bde2:	dcee      	bgt.n	800bdc2 <_vfprintf_r+0x1d4e>
 800bde4:	3330      	adds	r3, #48	; 0x30
 800bde6:	f10d 078b 	add.w	r7, sp, #139	; 0x8b
 800bdea:	b2d9      	uxtb	r1, r3
 800bdec:	42af      	cmp	r7, r5
 800bdee:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bdf2:	f240 8081 	bls.w	800bef8 <_vfprintf_r+0x1e84>
 800bdf6:	1abc      	subs	r4, r7, r2
 800bdf8:	07e5      	lsls	r5, r4, #31
 800bdfa:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
 800bdfe:	4613      	mov	r3, r2
 800be00:	d50c      	bpl.n	800be1c <_vfprintf_r+0x1da8>
 800be02:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 800be06:	4613      	mov	r3, r2
 800be08:	7001      	strb	r1, [r0, #0]
 800be0a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800be0e:	e005      	b.n	800be1c <_vfprintf_r+0x1da8>
 800be10:	f813 4b01 	ldrb.w	r4, [r3], #1
 800be14:	706c      	strb	r4, [r5, #1]
 800be16:	f813 1b01 	ldrb.w	r1, [r3], #1
 800be1a:	1c68      	adds	r0, r5, #1
 800be1c:	1c45      	adds	r5, r0, #1
 800be1e:	42bb      	cmp	r3, r7
 800be20:	7041      	strb	r1, [r0, #1]
 800be22:	d1f5      	bne.n	800be10 <_vfprintf_r+0x1d9c>
 800be24:	ebc2 020a 	rsb	r2, r2, sl
 800be28:	f10d 077e 	add.w	r7, sp, #126	; 0x7e
 800be2c:	18b8      	adds	r0, r7, r2
 800be2e:	e71e      	b.n	800bc6e <_vfprintf_r+0x1bfa>
 800be30:	9807      	ldr	r0, [sp, #28]
 800be32:	4649      	mov	r1, r9
 800be34:	4652      	mov	r2, sl
 800be36:	f003 f809 	bl	800ee4c <__sprint_r>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	f47e aa6c 	bne.w	800a318 <_vfprintf_r+0x2a4>
 800be40:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800be44:	e579      	b.n	800b93a <_vfprintf_r+0x18c6>
 800be46:	1c5a      	adds	r2, r3, #1
 800be48:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 800be4c:	2167      	movs	r1, #103	; 0x67
 800be4e:	920b      	str	r2, [sp, #44]	; 0x2c
 800be50:	9408      	str	r4, [sp, #32]
 800be52:	9110      	str	r1, [sp, #64]	; 0x40
 800be54:	e4c7      	b.n	800b7e6 <_vfprintf_r+0x1772>
 800be56:	f10c 0e01 	add.w	lr, ip, #1
 800be5a:	eb03 010e 	add.w	r1, r3, lr
 800be5e:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 800be62:	910b      	str	r1, [sp, #44]	; 0x2c
 800be64:	9008      	str	r0, [sp, #32]
 800be66:	e4be      	b.n	800b7e6 <_vfprintf_r+0x1772>
 800be68:	4630      	mov	r0, r6
 800be6a:	4621      	mov	r1, r4
 800be6c:	2200      	movs	r2, #0
 800be6e:	2300      	movs	r3, #0
 800be70:	f8cd c008 	str.w	ip, [sp, #8]
 800be74:	f7fd fac6 	bl	8009404 <__aeabi_dcmpeq>
 800be78:	f8dd c008 	ldr.w	ip, [sp, #8]
 800be7c:	b190      	cbz	r0, 800bea4 <_vfprintf_r+0x1e30>
 800be7e:	9a08      	ldr	r2, [sp, #32]
 800be80:	6813      	ldr	r3, [r2, #0]
 800be82:	e74d      	b.n	800bd20 <_vfprintf_r+0x1cac>
 800be84:	f1bc 0f00 	cmp.w	ip, #0
 800be88:	d112      	bne.n	800beb0 <_vfprintf_r+0x1e3c>
 800be8a:	9905      	ldr	r1, [sp, #20]
 800be8c:	07c8      	lsls	r0, r1, #31
 800be8e:	d40f      	bmi.n	800beb0 <_vfprintf_r+0x1e3c>
 800be90:	2001      	movs	r0, #1
 800be92:	9008      	str	r0, [sp, #32]
 800be94:	900b      	str	r0, [sp, #44]	; 0x2c
 800be96:	e4a6      	b.n	800b7e6 <_vfprintf_r+0x1772>
 800be98:	0800fd28 	.word	0x0800fd28
 800be9c:	0800fcd4 	.word	0x0800fcd4
 800bea0:	0800fd1c 	.word	0x0800fd1c
 800bea4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bea6:	9908      	ldr	r1, [sp, #32]
 800bea8:	f1c0 0301 	rsb	r3, r0, #1
 800beac:	600b      	str	r3, [r1, #0]
 800beae:	e737      	b.n	800bd20 <_vfprintf_r+0x1cac>
 800beb0:	f10c 0702 	add.w	r7, ip, #2
 800beb4:	ea27 75e7 	bic.w	r5, r7, r7, asr #31
 800beb8:	970b      	str	r7, [sp, #44]	; 0x2c
 800beba:	9508      	str	r5, [sp, #32]
 800bebc:	e493      	b.n	800b7e6 <_vfprintf_r+0x1772>
 800bebe:	242d      	movs	r4, #45	; 0x2d
 800bec0:	425b      	negs	r3, r3
 800bec2:	7074      	strb	r4, [r6, #1]
 800bec4:	e6cb      	b.n	800bc5e <_vfprintf_r+0x1bea>
 800bec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bec8:	f893 8001 	ldrb.w	r8, [r3, #1]
 800becc:	682e      	ldr	r6, [r5, #0]
 800bece:	1d28      	adds	r0, r5, #4
 800bed0:	2e00      	cmp	r6, #0
 800bed2:	900c      	str	r0, [sp, #48]	; 0x30
 800bed4:	4623      	mov	r3, r4
 800bed6:	f6be a95e 	bge.w	800a196 <_vfprintf_r+0x122>
 800beda:	f04f 36ff 	mov.w	r6, #4294967295
 800bede:	f7fe b95a 	b.w	800a196 <_vfprintf_r+0x122>
 800bee2:	9905      	ldr	r1, [sp, #20]
 800bee4:	f011 0501 	ands.w	r5, r1, #1
 800bee8:	f47f aeca 	bne.w	800bc80 <_vfprintf_r+0x1c0c>
 800beec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800beee:	9512      	str	r5, [sp, #72]	; 0x48
 800bef0:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
 800bef4:	9708      	str	r7, [sp, #32]
 800bef6:	e477      	b.n	800b7e8 <_vfprintf_r+0x1774>
 800bef8:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 800befc:	e6b7      	b.n	800bc6e <_vfprintf_r+0x1bfa>
 800befe:	4615      	mov	r5, r2
 800bf00:	e452      	b.n	800b7a8 <_vfprintf_r+0x1734>
 800bf02:	bf00      	nop

0800bf04 <__swsetup_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	4b2f      	ldr	r3, [pc, #188]	; (800bfc4 <__swsetup_r+0xc0>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	b113      	cbz	r3, 800bf16 <__swsetup_r+0x12>
 800bf10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf12:	2a00      	cmp	r2, #0
 800bf14:	d03d      	beq.n	800bf92 <__swsetup_r+0x8e>
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	f003 0008 	and.w	r0, r3, #8
 800bf1c:	b202      	sxth	r2, r0
 800bf1e:	4619      	mov	r1, r3
 800bf20:	b16a      	cbz	r2, 800bf3e <__swsetup_r+0x3a>
 800bf22:	6922      	ldr	r2, [r4, #16]
 800bf24:	b1ca      	cbz	r2, 800bf5a <__swsetup_r+0x56>
 800bf26:	f013 0101 	ands.w	r1, r3, #1
 800bf2a:	d122      	bne.n	800bf72 <__swsetup_r+0x6e>
 800bf2c:	f003 0002 	and.w	r0, r3, #2
 800bf30:	b203      	sxth	r3, r0
 800bf32:	b903      	cbnz	r3, 800bf36 <__swsetup_r+0x32>
 800bf34:	6961      	ldr	r1, [r4, #20]
 800bf36:	60a1      	str	r1, [r4, #8]
 800bf38:	b312      	cbz	r2, 800bf80 <__swsetup_r+0x7c>
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	bd38      	pop	{r3, r4, r5, pc}
 800bf3e:	f003 0010 	and.w	r0, r3, #16
 800bf42:	b202      	sxth	r2, r0
 800bf44:	b312      	cbz	r2, 800bf8c <__swsetup_r+0x88>
 800bf46:	f001 0104 	and.w	r1, r1, #4
 800bf4a:	b208      	sxth	r0, r1
 800bf4c:	bb28      	cbnz	r0, 800bf9a <__swsetup_r+0x96>
 800bf4e:	6922      	ldr	r2, [r4, #16]
 800bf50:	f043 0308 	orr.w	r3, r3, #8
 800bf54:	81a3      	strh	r3, [r4, #12]
 800bf56:	2a00      	cmp	r2, #0
 800bf58:	d1e5      	bne.n	800bf26 <__swsetup_r+0x22>
 800bf5a:	f403 7020 	and.w	r0, r3, #640	; 0x280
 800bf5e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800bf62:	d0e0      	beq.n	800bf26 <__swsetup_r+0x22>
 800bf64:	4628      	mov	r0, r5
 800bf66:	4621      	mov	r1, r4
 800bf68:	f001 fd76 	bl	800da58 <__smakebuf_r>
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	6922      	ldr	r2, [r4, #16]
 800bf70:	e7d9      	b.n	800bf26 <__swsetup_r+0x22>
 800bf72:	6960      	ldr	r0, [r4, #20]
 800bf74:	2100      	movs	r1, #0
 800bf76:	4243      	negs	r3, r0
 800bf78:	60a1      	str	r1, [r4, #8]
 800bf7a:	61a3      	str	r3, [r4, #24]
 800bf7c:	2a00      	cmp	r2, #0
 800bf7e:	d1dc      	bne.n	800bf3a <__swsetup_r+0x36>
 800bf80:	89a2      	ldrh	r2, [r4, #12]
 800bf82:	f002 0080 	and.w	r0, r2, #128	; 0x80
 800bf86:	b203      	sxth	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d0d6      	beq.n	800bf3a <__swsetup_r+0x36>
 800bf8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf90:	bd38      	pop	{r3, r4, r5, pc}
 800bf92:	4618      	mov	r0, r3
 800bf94:	f001 fbb2 	bl	800d6fc <__sinit>
 800bf98:	e7bd      	b.n	800bf16 <__swsetup_r+0x12>
 800bf9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bf9c:	b149      	cbz	r1, 800bfb2 <__swsetup_r+0xae>
 800bf9e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800bfa2:	4291      	cmp	r1, r2
 800bfa4:	d003      	beq.n	800bfae <__swsetup_r+0xaa>
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f001 fc1e 	bl	800d7e8 <_free_r>
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	2100      	movs	r1, #0
 800bfb0:	6321      	str	r1, [r4, #48]	; 0x30
 800bfb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfb6:	6922      	ldr	r2, [r4, #16]
 800bfb8:	0418      	lsls	r0, r3, #16
 800bfba:	2100      	movs	r1, #0
 800bfbc:	0c03      	lsrs	r3, r0, #16
 800bfbe:	6061      	str	r1, [r4, #4]
 800bfc0:	6022      	str	r2, [r4, #0]
 800bfc2:	e7c5      	b.n	800bf50 <__swsetup_r+0x4c>
 800bfc4:	20000490 	.word	0x20000490

0800bfc8 <register_fini>:
 800bfc8:	4b02      	ldr	r3, [pc, #8]	; (800bfd4 <register_fini+0xc>)
 800bfca:	b113      	cbz	r3, 800bfd2 <register_fini+0xa>
 800bfcc:	4802      	ldr	r0, [pc, #8]	; (800bfd8 <register_fini+0x10>)
 800bfce:	f000 b805 	b.w	800bfdc <atexit>
 800bfd2:	4770      	bx	lr
 800bfd4:	00000000 	.word	0x00000000
 800bfd8:	08009ed1 	.word	0x08009ed1

0800bfdc <atexit>:
 800bfdc:	4601      	mov	r1, r0
 800bfde:	2000      	movs	r0, #0
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f7fd bf18 	b.w	8009e18 <__register_exitproc>

0800bfe8 <quorem>:
 800bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfec:	6903      	ldr	r3, [r0, #16]
 800bfee:	690c      	ldr	r4, [r1, #16]
 800bff0:	429c      	cmp	r4, r3
 800bff2:	b083      	sub	sp, #12
 800bff4:	4606      	mov	r6, r0
 800bff6:	f300 816b 	bgt.w	800c2d0 <quorem+0x2e8>
 800bffa:	1ce0      	adds	r0, r4, #3
 800bffc:	0082      	lsls	r2, r0, #2
 800bffe:	188f      	adds	r7, r1, r2
 800c000:	18b5      	adds	r5, r6, r2
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6868      	ldr	r0, [r5, #4]
 800c006:	1c5a      	adds	r2, r3, #1
 800c008:	fbb0 f5f2 	udiv	r5, r0, r2
 800c00c:	f101 0314 	add.w	r3, r1, #20
 800c010:	9301      	str	r3, [sp, #4]
 800c012:	3c01      	subs	r4, #1
 800c014:	3704      	adds	r7, #4
 800c016:	f106 0814 	add.w	r8, r6, #20
 800c01a:	2d00      	cmp	r5, #0
 800c01c:	f000 80be 	beq.w	800c19c <quorem+0x1b4>
 800c020:	694a      	ldr	r2, [r1, #20]
 800c022:	f8d8 3000 	ldr.w	r3, [r8]
 800c026:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c02a:	b290      	uxth	r0, r2
 800c02c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c030:	fb05 f000 	mul.w	r0, r5, r0
 800c034:	fb05 f20c 	mul.w	r2, r5, ip
 800c038:	eb02 4c10 	add.w	ip, r2, r0, lsr #16
 800c03c:	fa1f fe8c 	uxth.w	lr, ip
 800c040:	b29a      	uxth	r2, r3
 800c042:	b280      	uxth	r0, r0
 800c044:	1a12      	subs	r2, r2, r0
 800c046:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 800c04a:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 800c04e:	b292      	uxth	r2, r2
 800c050:	ebc9 0007 	rsb	r0, r9, r7
 800c054:	f106 0318 	add.w	r3, r6, #24
 800c058:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 800c05c:	f101 0218 	add.w	r2, r1, #24
 800c060:	4297      	cmp	r7, r2
 800c062:	f843 9c04 	str.w	r9, [r3, #-4]
 800c066:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800c06a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c06e:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800c072:	d370      	bcc.n	800c156 <quorem+0x16e>
 800c074:	b328      	cbz	r0, 800c0c2 <quorem+0xda>
 800c076:	6810      	ldr	r0, [r2, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	b282      	uxth	r2, r0
 800c07c:	0c00      	lsrs	r0, r0, #16
 800c07e:	fb05 cc02 	mla	ip, r5, r2, ip
 800c082:	fb05 f000 	mul.w	r0, r5, r0
 800c086:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 800c08a:	fa1e f283 	uxtah	r2, lr, r3
 800c08e:	fa1f fc8c 	uxth.w	ip, ip
 800c092:	fa1f fe80 	uxth.w	lr, r0
 800c096:	ebcc 0202 	rsb	r2, ip, r2
 800c09a:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 800c09e:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 800c0a2:	fa1f fc82 	uxth.w	ip, r2
 800c0a6:	f106 031c 	add.w	r3, r6, #28
 800c0aa:	f101 021c 	add.w	r2, r1, #28
 800c0ae:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 800c0b2:	4297      	cmp	r7, r2
 800c0b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c0b8:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800c0bc:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800c0c0:	d349      	bcc.n	800c156 <quorem+0x16e>
 800c0c2:	4610      	mov	r0, r2
 800c0c4:	f8d3 9000 	ldr.w	r9, [r3]
 800c0c8:	f850 bb04 	ldr.w	fp, [r0], #4
 800c0cc:	fa1f fa8b 	uxth.w	sl, fp
 800c0d0:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 800c0d4:	fb05 cc0a 	mla	ip, r5, sl, ip
 800c0d8:	fb05 fa0b 	mul.w	sl, r5, fp
 800c0dc:	eb0a 4b1c 	add.w	fp, sl, ip, lsr #16
 800c0e0:	fa1f fa8b 	uxth.w	sl, fp
 800c0e4:	fa1e fe89 	uxtah	lr, lr, r9
 800c0e8:	fa1f fc8c 	uxth.w	ip, ip
 800c0ec:	ebcc 0e0e 	rsb	lr, ip, lr
 800c0f0:	ebca 4c19 	rsb	ip, sl, r9, lsr #16
 800c0f4:	eb0c 4a2e 	add.w	sl, ip, lr, asr #16
 800c0f8:	4699      	mov	r9, r3
 800c0fa:	fa1f fe8e 	uxth.w	lr, lr
 800c0fe:	ea4e 4c0a 	orr.w	ip, lr, sl, lsl #16
 800c102:	f849 cb04 	str.w	ip, [r9], #4
 800c106:	6852      	ldr	r2, [r2, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	fa1f fe82 	uxth.w	lr, r2
 800c10e:	fb05 fe0e 	mul.w	lr, r5, lr
 800c112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c116:	eb0e 4b1b 	add.w	fp, lr, fp, lsr #16
 800c11a:	fb05 f20c 	mul.w	r2, r5, ip
 800c11e:	eb02 4c1b 	add.w	ip, r2, fp, lsr #16
 800c122:	b29a      	uxth	r2, r3
 800c124:	fa1f fe8c 	uxth.w	lr, ip
 800c128:	eb02 422a 	add.w	r2, r2, sl, asr #16
 800c12c:	fa1f fb8b 	uxth.w	fp, fp
 800c130:	ebcb 0202 	rsb	r2, fp, r2
 800c134:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 800c138:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 800c13c:	b292      	uxth	r2, r2
 800c13e:	464b      	mov	r3, r9
 800c140:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 800c144:	1d02      	adds	r2, r0, #4
 800c146:	4297      	cmp	r7, r2
 800c148:	f843 9b04 	str.w	r9, [r3], #4
 800c14c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c150:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800c154:	d2b5      	bcs.n	800c0c2 <quorem+0xda>
 800c156:	1d20      	adds	r0, r4, #4
 800c158:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 800c15c:	685a      	ldr	r2, [r3, #4]
 800c15e:	b9ea      	cbnz	r2, 800c19c <quorem+0x1b4>
 800c160:	1d18      	adds	r0, r3, #4
 800c162:	4598      	cmp	r8, r3
 800c164:	d219      	bcs.n	800c19a <quorem+0x1b2>
 800c166:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c16a:	b9b2      	cbnz	r2, 800c19a <quorem+0x1b2>
 800c16c:	3b04      	subs	r3, #4
 800c16e:	ebc8 0003 	rsb	r0, r8, r3
 800c172:	1cc2      	adds	r2, r0, #3
 800c174:	0750      	lsls	r0, r2, #29
 800c176:	d50d      	bpl.n	800c194 <quorem+0x1ac>
 800c178:	3c01      	subs	r4, #1
 800c17a:	4598      	cmp	r8, r3
 800c17c:	d20d      	bcs.n	800c19a <quorem+0x1b2>
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	3b04      	subs	r3, #4
 800c182:	b13a      	cbz	r2, 800c194 <quorem+0x1ac>
 800c184:	e009      	b.n	800c19a <quorem+0x1b2>
 800c186:	6818      	ldr	r0, [r3, #0]
 800c188:	3b04      	subs	r3, #4
 800c18a:	b930      	cbnz	r0, 800c19a <quorem+0x1b2>
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	3c01      	subs	r4, #1
 800c190:	3b04      	subs	r3, #4
 800c192:	b912      	cbnz	r2, 800c19a <quorem+0x1b2>
 800c194:	3c01      	subs	r4, #1
 800c196:	4598      	cmp	r8, r3
 800c198:	d3f5      	bcc.n	800c186 <quorem+0x19e>
 800c19a:	6134      	str	r4, [r6, #16]
 800c19c:	4630      	mov	r0, r6
 800c19e:	f002 fc3b 	bl	800ea18 <__mcmp>
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	f2c0 8083 	blt.w	800c2ae <quorem+0x2c6>
 800c1a8:	9a01      	ldr	r2, [sp, #4]
 800c1aa:	f8d8 3000 	ldr.w	r3, [r8]
 800c1ae:	f852 0b04 	ldr.w	r0, [r2], #4
 800c1b2:	fa1f f983 	uxth.w	r9, r3
 800c1b6:	b281      	uxth	r1, r0
 800c1b8:	0c00      	lsrs	r0, r0, #16
 800c1ba:	ebc1 0109 	rsb	r1, r1, r9
 800c1be:	ebc0 4313 	rsb	r3, r0, r3, lsr #16
 800c1c2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c1c6:	eb03 4021 	add.w	r0, r3, r1, asr #16
 800c1ca:	4643      	mov	r3, r8
 800c1cc:	b289      	uxth	r1, r1
 800c1ce:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c1d2:	ebc9 0c07 	rsb	ip, r9, r7
 800c1d6:	3501      	adds	r5, #1
 800c1d8:	1400      	asrs	r0, r0, #16
 800c1da:	4297      	cmp	r7, r2
 800c1dc:	f843 1b04 	str.w	r1, [r3], #4
 800c1e0:	f3cc 0180 	ubfx	r1, ip, #2, #1
 800c1e4:	d34b      	bcc.n	800c27e <quorem+0x296>
 800c1e6:	b1b9      	cbz	r1, 800c218 <quorem+0x230>
 800c1e8:	f852 eb04 	ldr.w	lr, [r2], #4
 800c1ec:	6819      	ldr	r1, [r3, #0]
 800c1ee:	fa1f f98e 	uxth.w	r9, lr
 800c1f2:	fa1f fa81 	uxth.w	sl, r1
 800c1f6:	ebc9 090a 	rsb	r9, r9, sl
 800c1fa:	ea4f 4c1e 	mov.w	ip, lr, lsr #16
 800c1fe:	4448      	add	r0, r9
 800c200:	ebcc 4111 	rsb	r1, ip, r1, lsr #16
 800c204:	eb01 4120 	add.w	r1, r1, r0, asr #16
 800c208:	b280      	uxth	r0, r0
 800c20a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800c20e:	f843 0b04 	str.w	r0, [r3], #4
 800c212:	1408      	asrs	r0, r1, #16
 800c214:	4297      	cmp	r7, r2
 800c216:	d332      	bcc.n	800c27e <quorem+0x296>
 800c218:	4682      	mov	sl, r0
 800c21a:	4611      	mov	r1, r2
 800c21c:	f8d3 e000 	ldr.w	lr, [r3]
 800c220:	f851 0b04 	ldr.w	r0, [r1], #4
 800c224:	fa1f fb8e 	uxth.w	fp, lr
 800c228:	fa1f f980 	uxth.w	r9, r0
 800c22c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800c230:	ebc9 0b0b 	rsb	fp, r9, fp
 800c234:	eb0b 000a 	add.w	r0, fp, sl
 800c238:	ebcc 4a1e 	rsb	sl, ip, lr, lsr #16
 800c23c:	eb0a 4920 	add.w	r9, sl, r0, asr #16
 800c240:	469e      	mov	lr, r3
 800c242:	b280      	uxth	r0, r0
 800c244:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c248:	f84e 0b04 	str.w	r0, [lr], #4
 800c24c:	6850      	ldr	r0, [r2, #4]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	b282      	uxth	r2, r0
 800c252:	fa1f fc83 	uxth.w	ip, r3
 800c256:	0c00      	lsrs	r0, r0, #16
 800c258:	ebc2 020c 	rsb	r2, r2, ip
 800c25c:	eb02 4229 	add.w	r2, r2, r9, asr #16
 800c260:	ebc0 4313 	rsb	r3, r0, r3, lsr #16
 800c264:	eb03 4022 	add.w	r0, r3, r2, asr #16
 800c268:	b292      	uxth	r2, r2
 800c26a:	ea42 4a00 	orr.w	sl, r2, r0, lsl #16
 800c26e:	4673      	mov	r3, lr
 800c270:	1d0a      	adds	r2, r1, #4
 800c272:	4297      	cmp	r7, r2
 800c274:	f843 ab04 	str.w	sl, [r3], #4
 800c278:	ea4f 4a20 	mov.w	sl, r0, asr #16
 800c27c:	d2cd      	bcs.n	800c21a <quorem+0x232>
 800c27e:	1d21      	adds	r1, r4, #4
 800c280:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 800c284:	6858      	ldr	r0, [r3, #4]
 800c286:	b990      	cbnz	r0, 800c2ae <quorem+0x2c6>
 800c288:	1d1a      	adds	r2, r3, #4
 800c28a:	4598      	cmp	r8, r3
 800c28c:	d20e      	bcs.n	800c2ac <quorem+0x2c4>
 800c28e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800c292:	b959      	cbnz	r1, 800c2ac <quorem+0x2c4>
 800c294:	3b04      	subs	r3, #4
 800c296:	ebc8 0003 	rsb	r0, r8, r3
 800c29a:	1cc2      	adds	r2, r0, #3
 800c29c:	0752      	lsls	r2, r2, #29
 800c29e:	d513      	bpl.n	800c2c8 <quorem+0x2e0>
 800c2a0:	3c01      	subs	r4, #1
 800c2a2:	4598      	cmp	r8, r3
 800c2a4:	d202      	bcs.n	800c2ac <quorem+0x2c4>
 800c2a6:	6818      	ldr	r0, [r3, #0]
 800c2a8:	3b04      	subs	r3, #4
 800c2aa:	b168      	cbz	r0, 800c2c8 <quorem+0x2e0>
 800c2ac:	6134      	str	r4, [r6, #16]
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	b003      	add	sp, #12
 800c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	3b04      	subs	r3, #4
 800c2ba:	2a00      	cmp	r2, #0
 800c2bc:	d1f6      	bne.n	800c2ac <quorem+0x2c4>
 800c2be:	6819      	ldr	r1, [r3, #0]
 800c2c0:	3c01      	subs	r4, #1
 800c2c2:	3b04      	subs	r3, #4
 800c2c4:	2900      	cmp	r1, #0
 800c2c6:	d1f1      	bne.n	800c2ac <quorem+0x2c4>
 800c2c8:	3c01      	subs	r4, #1
 800c2ca:	4598      	cmp	r8, r3
 800c2cc:	d3f3      	bcc.n	800c2b6 <quorem+0x2ce>
 800c2ce:	e7ed      	b.n	800c2ac <quorem+0x2c4>
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	e7ed      	b.n	800c2b0 <quorem+0x2c8>
 800c2d4:	0000      	movs	r0, r0
	...

0800c2d8 <_dtoa_r>:
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	b09d      	sub	sp, #116	; 0x74
 800c2de:	4681      	mov	r9, r0
 800c2e0:	9102      	str	r1, [sp, #8]
 800c2e2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800c2e4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800c2e6:	9205      	str	r2, [sp, #20]
 800c2e8:	9308      	str	r3, [sp, #32]
 800c2ea:	ec5b ab10 	vmov	sl, fp, d0
 800c2ee:	b151      	cbz	r1, 800c306 <_dtoa_r+0x2e>
 800c2f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	fa02 f203 	lsl.w	r2, r2, r3
 800c2f8:	604b      	str	r3, [r1, #4]
 800c2fa:	608a      	str	r2, [r1, #8]
 800c2fc:	f002 f83a 	bl	800e374 <_Bfree>
 800c300:	2000      	movs	r0, #0
 800c302:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800c306:	f1bb 0800 	subs.w	r8, fp, #0
 800c30a:	db3b      	blt.n	800c384 <_dtoa_r+0xac>
 800c30c:	2100      	movs	r1, #0
 800c30e:	6021      	str	r1, [r4, #0]
 800c310:	2300      	movs	r3, #0
 800c312:	461a      	mov	r2, r3
 800c314:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800c318:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800c31c:	ea08 0003 	and.w	r0, r8, r3
 800c320:	4290      	cmp	r0, r2
 800c322:	d018      	beq.n	800c356 <_dtoa_r+0x7e>
 800c324:	2200      	movs	r2, #0
 800c326:	2300      	movs	r3, #0
 800c328:	4650      	mov	r0, sl
 800c32a:	4659      	mov	r1, fp
 800c32c:	4654      	mov	r4, sl
 800c32e:	465d      	mov	r5, fp
 800c330:	f7fd f868 	bl	8009404 <__aeabi_dcmpeq>
 800c334:	2800      	cmp	r0, #0
 800c336:	d02b      	beq.n	800c390 <_dtoa_r+0xb8>
 800c338:	9808      	ldr	r0, [sp, #32]
 800c33a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800c33c:	2301      	movs	r3, #1
 800c33e:	6003      	str	r3, [r0, #0]
 800c340:	2d00      	cmp	r5, #0
 800c342:	f000 80d1 	beq.w	800c4e8 <_dtoa_r+0x210>
 800c346:	49a4      	ldr	r1, [pc, #656]	; (800c5d8 <_dtoa_r+0x300>)
 800c348:	1e4a      	subs	r2, r1, #1
 800c34a:	6029      	str	r1, [r5, #0]
 800c34c:	9204      	str	r2, [sp, #16]
 800c34e:	9804      	ldr	r0, [sp, #16]
 800c350:	b01d      	add	sp, #116	; 0x74
 800c352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c356:	9d08      	ldr	r5, [sp, #32]
 800c358:	f242 730f 	movw	r3, #9999	; 0x270f
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	f1ba 0f00 	cmp.w	sl, #0
 800c362:	f000 80a8 	beq.w	800c4b6 <_dtoa_r+0x1de>
 800c366:	489d      	ldr	r0, [pc, #628]	; (800c5dc <_dtoa_r+0x304>)
 800c368:	9004      	str	r0, [sp, #16]
 800c36a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800c36c:	2d00      	cmp	r5, #0
 800c36e:	d0ee      	beq.n	800c34e <_dtoa_r+0x76>
 800c370:	9d04      	ldr	r5, [sp, #16]
 800c372:	78eb      	ldrb	r3, [r5, #3]
 800c374:	2b00      	cmp	r3, #0
 800c376:	f000 820e 	beq.w	800c796 <_dtoa_r+0x4be>
 800c37a:	4629      	mov	r1, r5
 800c37c:	3108      	adds	r1, #8
 800c37e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800c380:	6029      	str	r1, [r5, #0]
 800c382:	e7e4      	b.n	800c34e <_dtoa_r+0x76>
 800c384:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
 800c388:	2501      	movs	r5, #1
 800c38a:	6025      	str	r5, [r4, #0]
 800c38c:	46c3      	mov	fp, r8
 800c38e:	e7bf      	b.n	800c310 <_dtoa_r+0x38>
 800c390:	4648      	mov	r0, r9
 800c392:	ec45 4b10 	vmov	d0, r4, r5
 800c396:	a91b      	add	r1, sp, #108	; 0x6c
 800c398:	aa1a      	add	r2, sp, #104	; 0x68
 800c39a:	f002 fc71 	bl	800ec80 <__d2b>
 800c39e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c3a2:	900a      	str	r0, [sp, #40]	; 0x28
 800c3a4:	2e00      	cmp	r6, #0
 800c3a6:	f040 8090 	bne.w	800c4ca <_dtoa_r+0x1f2>
 800c3aa:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c3ac:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800c3ae:	f46f 6182 	mvn.w	r1, #1040	; 0x410
 800c3b2:	193e      	adds	r6, r7, r4
 800c3b4:	428e      	cmp	r6, r1
 800c3b6:	f2c0 8339 	blt.w	800ca2c <_dtoa_r+0x754>
 800c3ba:	f64f 420e 	movw	r2, #64526	; 0xfc0e
 800c3be:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 800c3c2:	1b90      	subs	r0, r2, r6
 800c3c4:	f206 4412 	addw	r4, r6, #1042	; 0x412
 800c3c8:	fa08 f100 	lsl.w	r1, r8, r0
 800c3cc:	fa2a f504 	lsr.w	r5, sl, r4
 800c3d0:	ea41 0005 	orr.w	r0, r1, r5
 800c3d4:	f7fc fd38 	bl	8008e48 <__aeabi_ui2d>
 800c3d8:	2501      	movs	r5, #1
 800c3da:	3e01      	subs	r6, #1
 800c3dc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c3e0:	950b      	str	r5, [sp, #44]	; 0x2c
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800c3ea:	f7fc fbef 	bl	8008bcc <__aeabi_dsub>
 800c3ee:	a374      	add	r3, pc, #464	; (adr r3, 800c5c0 <_dtoa_r+0x2e8>)
 800c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f4:	f7fc fd9e 	bl	8008f34 <__aeabi_dmul>
 800c3f8:	a373      	add	r3, pc, #460	; (adr r3, 800c5c8 <_dtoa_r+0x2f0>)
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	f7fc fbe7 	bl	8008bd0 <__adddf3>
 800c402:	4604      	mov	r4, r0
 800c404:	4630      	mov	r0, r6
 800c406:	460d      	mov	r5, r1
 800c408:	f7fc fd2e 	bl	8008e68 <__aeabi_i2d>
 800c40c:	a370      	add	r3, pc, #448	; (adr r3, 800c5d0 <_dtoa_r+0x2f8>)
 800c40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c412:	f7fc fd8f 	bl	8008f34 <__aeabi_dmul>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7fc fbd7 	bl	8008bd0 <__adddf3>
 800c422:	4604      	mov	r4, r0
 800c424:	460d      	mov	r5, r1
 800c426:	f7fd f81f 	bl	8009468 <__aeabi_d2iz>
 800c42a:	4629      	mov	r1, r5
 800c42c:	9006      	str	r0, [sp, #24]
 800c42e:	2200      	movs	r2, #0
 800c430:	4620      	mov	r0, r4
 800c432:	2300      	movs	r3, #0
 800c434:	f7fc fff0 	bl	8009418 <__aeabi_dcmplt>
 800c438:	2800      	cmp	r0, #0
 800c43a:	f040 82c7 	bne.w	800c9cc <_dtoa_r+0x6f4>
 800c43e:	9a06      	ldr	r2, [sp, #24]
 800c440:	2a16      	cmp	r2, #22
 800c442:	f200 82c0 	bhi.w	800c9c6 <_dtoa_r+0x6ee>
 800c446:	4c66      	ldr	r4, [pc, #408]	; (800c5e0 <_dtoa_r+0x308>)
 800c448:	eb04 05c2 	add.w	r5, r4, r2, lsl #3
 800c44c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c450:	4652      	mov	r2, sl
 800c452:	465b      	mov	r3, fp
 800c454:	f7fc fffe 	bl	8009454 <__aeabi_dcmpgt>
 800c458:	2800      	cmp	r0, #0
 800c45a:	f000 82ef 	beq.w	800ca3c <_dtoa_r+0x764>
 800c45e:	9806      	ldr	r0, [sp, #24]
 800c460:	2200      	movs	r2, #0
 800c462:	1e41      	subs	r1, r0, #1
 800c464:	9106      	str	r1, [sp, #24]
 800c466:	9210      	str	r2, [sp, #64]	; 0x40
 800c468:	1bbe      	subs	r6, r7, r6
 800c46a:	3e01      	subs	r6, #1
 800c46c:	f100 82c8 	bmi.w	800ca00 <_dtoa_r+0x728>
 800c470:	2400      	movs	r4, #0
 800c472:	9607      	str	r6, [sp, #28]
 800c474:	940c      	str	r4, [sp, #48]	; 0x30
 800c476:	9d06      	ldr	r5, [sp, #24]
 800c478:	2d00      	cmp	r5, #0
 800c47a:	f2c0 82b5 	blt.w	800c9e8 <_dtoa_r+0x710>
 800c47e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800c482:	950f      	str	r5, [sp, #60]	; 0x3c
 800c484:	eb08 0c05 	add.w	ip, r8, r5
 800c488:	2400      	movs	r4, #0
 800c48a:	f8cd c01c 	str.w	ip, [sp, #28]
 800c48e:	940e      	str	r4, [sp, #56]	; 0x38
 800c490:	9d02      	ldr	r5, [sp, #8]
 800c492:	2d09      	cmp	r5, #9
 800c494:	d82b      	bhi.n	800c4ee <_dtoa_r+0x216>
 800c496:	2d05      	cmp	r5, #5
 800c498:	f341 8044 	ble.w	800d524 <_dtoa_r+0x124c>
 800c49c:	1f28      	subs	r0, r5, #4
 800c49e:	9002      	str	r0, [sp, #8]
 800c4a0:	2500      	movs	r5, #0
 800c4a2:	9902      	ldr	r1, [sp, #8]
 800c4a4:	1e8a      	subs	r2, r1, #2
 800c4a6:	2a03      	cmp	r2, #3
 800c4a8:	d823      	bhi.n	800c4f2 <_dtoa_r+0x21a>
 800c4aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c4ae:	0544      	.short	0x0544
 800c4b0:	034a0530 	.word	0x034a0530
 800c4b4:	0541      	.short	0x0541
 800c4b6:	4949      	ldr	r1, [pc, #292]	; (800c5dc <_dtoa_r+0x304>)
 800c4b8:	4a4a      	ldr	r2, [pc, #296]	; (800c5e4 <_dtoa_r+0x30c>)
 800c4ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
 800c4be:	f1b8 0f00 	cmp.w	r8, #0
 800c4c2:	bf18      	it	ne
 800c4c4:	460a      	movne	r2, r1
 800c4c6:	9204      	str	r2, [sp, #16]
 800c4c8:	e74f      	b.n	800c36a <_dtoa_r+0x92>
 800c4ca:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
 800c4ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c4d2:	f042 547f 	orr.w	r4, r2, #1069547520	; 0x3fc00000
 800c4d6:	2500      	movs	r5, #0
 800c4d8:	4650      	mov	r0, sl
 800c4da:	f444 1140 	orr.w	r1, r4, #3145728	; 0x300000
 800c4de:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800c4e2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c4e4:	950b      	str	r5, [sp, #44]	; 0x2c
 800c4e6:	e77c      	b.n	800c3e2 <_dtoa_r+0x10a>
 800c4e8:	4d3f      	ldr	r5, [pc, #252]	; (800c5e8 <_dtoa_r+0x310>)
 800c4ea:	9504      	str	r5, [sp, #16]
 800c4ec:	e72f      	b.n	800c34e <_dtoa_r+0x76>
 800c4ee:	2400      	movs	r4, #0
 800c4f0:	9402      	str	r4, [sp, #8]
 800c4f2:	2400      	movs	r4, #0
 800c4f4:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800c4f8:	4648      	mov	r0, r9
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	f001 ff14 	bl	800e328 <_Balloc>
 800c500:	2501      	movs	r5, #1
 800c502:	f04f 32ff 	mov.w	r2, #4294967295
 800c506:	9004      	str	r0, [sp, #16]
 800c508:	9209      	str	r2, [sp, #36]	; 0x24
 800c50a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800c50e:	9211      	str	r2, [sp, #68]	; 0x44
 800c510:	9405      	str	r4, [sp, #20]
 800c512:	950d      	str	r5, [sp, #52]	; 0x34
 800c514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c516:	2b00      	cmp	r3, #0
 800c518:	f2c0 8140 	blt.w	800c79c <_dtoa_r+0x4c4>
 800c51c:	9906      	ldr	r1, [sp, #24]
 800c51e:	290e      	cmp	r1, #14
 800c520:	f300 813c 	bgt.w	800c79c <_dtoa_r+0x4c4>
 800c524:	4d2e      	ldr	r5, [pc, #184]	; (800c5e0 <_dtoa_r+0x308>)
 800c526:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
 800c52a:	ed90 7b00 	vldr	d7, [r0]
 800c52e:	9905      	ldr	r1, [sp, #20]
 800c530:	2900      	cmp	r1, #0
 800c532:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c536:	f2c0 8501 	blt.w	800cf3c <_dtoa_r+0xc64>
 800c53a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c53e:	4650      	mov	r0, sl
 800c540:	4659      	mov	r1, fp
 800c542:	f7fc fe21 	bl	8009188 <__aeabi_ddiv>
 800c546:	f7fc ff8f 	bl	8009468 <__aeabi_d2iz>
 800c54a:	4606      	mov	r6, r0
 800c54c:	f7fc fc8c 	bl	8008e68 <__aeabi_i2d>
 800c550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c554:	f7fc fcee 	bl	8008f34 <__aeabi_dmul>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	4650      	mov	r0, sl
 800c55e:	4659      	mov	r1, fp
 800c560:	f7fc fb34 	bl	8008bcc <__aeabi_dsub>
 800c564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c566:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c56a:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800c56e:	2a01      	cmp	r2, #1
 800c570:	4604      	mov	r4, r0
 800c572:	460d      	mov	r5, r1
 800c574:	f808 3b01 	strb.w	r3, [r8], #1
 800c578:	f000 8092 	beq.w	800c6a0 <_dtoa_r+0x3c8>
 800c57c:	2300      	movs	r3, #0
 800c57e:	2200      	movs	r2, #0
 800c580:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800c584:	f7fc fcd6 	bl	8008f34 <__aeabi_dmul>
 800c588:	2200      	movs	r2, #0
 800c58a:	2300      	movs	r3, #0
 800c58c:	4604      	mov	r4, r0
 800c58e:	460d      	mov	r5, r1
 800c590:	f7fc ff38 	bl	8009404 <__aeabi_dcmpeq>
 800c594:	2800      	cmp	r0, #0
 800c596:	f040 80c1 	bne.w	800c71c <_dtoa_r+0x444>
 800c59a:	9f04      	ldr	r7, [sp, #16]
 800c59c:	9e04      	ldr	r6, [sp, #16]
 800c59e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5a0:	3702      	adds	r7, #2
 800c5a2:	eb06 0b00 	add.w	fp, r6, r0
 800c5a6:	ebc7 010b 	rsb	r1, r7, fp
 800c5aa:	07c9      	lsls	r1, r1, #31
 800c5ac:	f100 80c8 	bmi.w	800c740 <_dtoa_r+0x468>
 800c5b0:	f8cd b014 	str.w	fp, [sp, #20]
 800c5b4:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800c5b8:	e04c      	b.n	800c654 <_dtoa_r+0x37c>
 800c5ba:	bf00      	nop
 800c5bc:	f3af 8000 	nop.w
 800c5c0:	636f4361 	.word	0x636f4361
 800c5c4:	3fd287a7 	.word	0x3fd287a7
 800c5c8:	8b60c8b3 	.word	0x8b60c8b3
 800c5cc:	3fc68a28 	.word	0x3fc68a28
 800c5d0:	509f79fb 	.word	0x509f79fb
 800c5d4:	3fd34413 	.word	0x3fd34413
 800c5d8:	0800fd25 	.word	0x0800fd25
 800c5dc:	0800fd44 	.word	0x0800fd44
 800c5e0:	0800fd60 	.word	0x0800fd60
 800c5e4:	0800fd38 	.word	0x0800fd38
 800c5e8:	0800fd24 	.word	0x0800fd24
 800c5ec:	f7fc fca2 	bl	8008f34 <__aeabi_dmul>
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	460d      	mov	r5, r1
 800c5f8:	f7fc ff04 	bl	8009404 <__aeabi_dcmpeq>
 800c5fc:	4652      	mov	r2, sl
 800c5fe:	465b      	mov	r3, fp
 800c600:	2800      	cmp	r0, #0
 800c602:	f040 808b 	bne.w	800c71c <_dtoa_r+0x444>
 800c606:	4620      	mov	r0, r4
 800c608:	4629      	mov	r1, r5
 800c60a:	f7fc fdbd 	bl	8009188 <__aeabi_ddiv>
 800c60e:	f7fc ff2b 	bl	8009468 <__aeabi_d2iz>
 800c612:	4606      	mov	r6, r0
 800c614:	f7fc fc28 	bl	8008e68 <__aeabi_i2d>
 800c618:	4652      	mov	r2, sl
 800c61a:	465b      	mov	r3, fp
 800c61c:	f7fc fc8a 	bl	8008f34 <__aeabi_dmul>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4620      	mov	r0, r4
 800c626:	4629      	mov	r1, r5
 800c628:	f7fc fad0 	bl	8008bcc <__aeabi_dsub>
 800c62c:	3630      	adds	r6, #48	; 0x30
 800c62e:	2300      	movs	r3, #0
 800c630:	2200      	movs	r2, #0
 800c632:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800c636:	f807 6c01 	strb.w	r6, [r7, #-1]
 800c63a:	f7fc fc7b 	bl	8008f34 <__aeabi_dmul>
 800c63e:	2200      	movs	r2, #0
 800c640:	2300      	movs	r3, #0
 800c642:	46b8      	mov	r8, r7
 800c644:	4604      	mov	r4, r0
 800c646:	460d      	mov	r5, r1
 800c648:	f107 0701 	add.w	r7, r7, #1
 800c64c:	f7fc feda 	bl	8009404 <__aeabi_dcmpeq>
 800c650:	2800      	cmp	r0, #0
 800c652:	d163      	bne.n	800c71c <_dtoa_r+0x444>
 800c654:	4652      	mov	r2, sl
 800c656:	465b      	mov	r3, fp
 800c658:	4620      	mov	r0, r4
 800c65a:	4629      	mov	r1, r5
 800c65c:	f7fc fd94 	bl	8009188 <__aeabi_ddiv>
 800c660:	f7fc ff02 	bl	8009468 <__aeabi_d2iz>
 800c664:	4606      	mov	r6, r0
 800c666:	f7fc fbff 	bl	8008e68 <__aeabi_i2d>
 800c66a:	4652      	mov	r2, sl
 800c66c:	465b      	mov	r3, fp
 800c66e:	f7fc fc61 	bl	8008f34 <__aeabi_dmul>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	4620      	mov	r0, r4
 800c678:	4629      	mov	r1, r5
 800c67a:	f7fc faa7 	bl	8008bcc <__aeabi_dsub>
 800c67e:	f8dd c014 	ldr.w	ip, [sp, #20]
 800c682:	2300      	movs	r3, #0
 800c684:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800c688:	2200      	movs	r2, #0
 800c68a:	4567      	cmp	r7, ip
 800c68c:	f807 8c01 	strb.w	r8, [r7, #-1]
 800c690:	4604      	mov	r4, r0
 800c692:	46b8      	mov	r8, r7
 800c694:	460d      	mov	r5, r1
 800c696:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800c69a:	f107 0701 	add.w	r7, r7, #1
 800c69e:	d1a5      	bne.n	800c5ec <_dtoa_r+0x314>
 800c6a0:	4622      	mov	r2, r4
 800c6a2:	462b      	mov	r3, r5
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	f7fc fa92 	bl	8008bd0 <__adddf3>
 800c6ac:	4604      	mov	r4, r0
 800c6ae:	460d      	mov	r5, r1
 800c6b0:	4622      	mov	r2, r4
 800c6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6b6:	462b      	mov	r3, r5
 800c6b8:	f7fc feae 	bl	8009418 <__aeabi_dcmplt>
 800c6bc:	b940      	cbnz	r0, 800c6d0 <_dtoa_r+0x3f8>
 800c6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6c2:	4622      	mov	r2, r4
 800c6c4:	462b      	mov	r3, r5
 800c6c6:	f7fc fe9d 	bl	8009404 <__aeabi_dcmpeq>
 800c6ca:	b338      	cbz	r0, 800c71c <_dtoa_r+0x444>
 800c6cc:	07f5      	lsls	r5, r6, #31
 800c6ce:	d525      	bpl.n	800c71c <_dtoa_r+0x444>
 800c6d0:	f818 bc01 	ldrb.w	fp, [r8, #-1]
 800c6d4:	9a04      	ldr	r2, [sp, #16]
 800c6d6:	43d3      	mvns	r3, r2
 800c6d8:	eb08 0003 	add.w	r0, r8, r3
 800c6dc:	07c0      	lsls	r0, r0, #31
 800c6de:	f100 8505 	bmi.w	800d0ec <_dtoa_r+0xe14>
 800c6e2:	4615      	mov	r5, r2
 800c6e4:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 800c6e8:	f108 31ff 	add.w	r1, r8, #4294967295
 800c6ec:	d112      	bne.n	800c714 <_dtoa_r+0x43c>
 800c6ee:	428d      	cmp	r5, r1
 800c6f0:	f000 853f 	beq.w	800d172 <_dtoa_r+0xe9a>
 800c6f4:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 800c6f8:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 800c6fc:	4688      	mov	r8, r1
 800c6fe:	f101 31ff 	add.w	r1, r1, #4294967295
 800c702:	d107      	bne.n	800c714 <_dtoa_r+0x43c>
 800c704:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 800c708:	4688      	mov	r8, r1
 800c70a:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 800c70e:	f108 31ff 	add.w	r1, r8, #4294967295
 800c712:	d0ec      	beq.n	800c6ee <_dtoa_r+0x416>
 800c714:	f10b 0201 	add.w	r2, fp, #1
 800c718:	b2d3      	uxtb	r3, r2
 800c71a:	700b      	strb	r3, [r1, #0]
 800c71c:	4648      	mov	r0, r9
 800c71e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c720:	f001 fe28 	bl	800e374 <_Bfree>
 800c724:	9806      	ldr	r0, [sp, #24]
 800c726:	9d08      	ldr	r5, [sp, #32]
 800c728:	1c41      	adds	r1, r0, #1
 800c72a:	2200      	movs	r2, #0
 800c72c:	f888 2000 	strb.w	r2, [r8]
 800c730:	6029      	str	r1, [r5, #0]
 800c732:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800c734:	2d00      	cmp	r5, #0
 800c736:	f43f ae0a 	beq.w	800c34e <_dtoa_r+0x76>
 800c73a:	f8c5 8000 	str.w	r8, [r5]
 800c73e:	e606      	b.n	800c34e <_dtoa_r+0x76>
 800c740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	f7fc fd1e 	bl	8009188 <__aeabi_ddiv>
 800c74c:	f7fc fe8c 	bl	8009468 <__aeabi_d2iz>
 800c750:	4606      	mov	r6, r0
 800c752:	f7fc fb89 	bl	8008e68 <__aeabi_i2d>
 800c756:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c75a:	f7fc fbeb 	bl	8008f34 <__aeabi_dmul>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4620      	mov	r0, r4
 800c764:	4629      	mov	r1, r5
 800c766:	f7fc fa31 	bl	8008bcc <__aeabi_dsub>
 800c76a:	3630      	adds	r6, #48	; 0x30
 800c76c:	2300      	movs	r3, #0
 800c76e:	2200      	movs	r2, #0
 800c770:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800c774:	f807 6c01 	strb.w	r6, [r7, #-1]
 800c778:	f7fc fbdc 	bl	8008f34 <__aeabi_dmul>
 800c77c:	46b8      	mov	r8, r7
 800c77e:	9f04      	ldr	r7, [sp, #16]
 800c780:	2200      	movs	r2, #0
 800c782:	2300      	movs	r3, #0
 800c784:	4604      	mov	r4, r0
 800c786:	460d      	mov	r5, r1
 800c788:	3703      	adds	r7, #3
 800c78a:	f7fc fe3b 	bl	8009404 <__aeabi_dcmpeq>
 800c78e:	2800      	cmp	r0, #0
 800c790:	f43f af0e 	beq.w	800c5b0 <_dtoa_r+0x2d8>
 800c794:	e7c2      	b.n	800c71c <_dtoa_r+0x444>
 800c796:	9804      	ldr	r0, [sp, #16]
 800c798:	1cc1      	adds	r1, r0, #3
 800c79a:	e5f0      	b.n	800c37e <_dtoa_r+0xa6>
 800c79c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c79e:	2f00      	cmp	r7, #0
 800c7a0:	f000 8133 	beq.w	800ca0a <_dtoa_r+0x732>
 800c7a4:	9c02      	ldr	r4, [sp, #8]
 800c7a6:	2c01      	cmp	r4, #1
 800c7a8:	f340 83f8 	ble.w	800cf9c <_dtoa_r+0xcc4>
 800c7ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7b0:	1e57      	subs	r7, r2, #1
 800c7b2:	42bb      	cmp	r3, r7
 800c7b4:	f2c0 84e8 	blt.w	800d188 <_dtoa_r+0xeb0>
 800c7b8:	1bdd      	subs	r5, r3, r7
 800c7ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c7bc:	2c00      	cmp	r4, #0
 800c7be:	f2c0 8637 	blt.w	800d430 <_dtoa_r+0x1158>
 800c7c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c7c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c7c6:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800c7ca:	9a07      	ldr	r2, [sp, #28]
 800c7cc:	eb0e 0807 	add.w	r8, lr, r7
 800c7d0:	4648      	mov	r0, r9
 800c7d2:	19d7      	adds	r7, r2, r7
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800c7da:	9707      	str	r7, [sp, #28]
 800c7dc:	f001 fe9c 	bl	800e518 <__i2b>
 800c7e0:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7e2:	b164      	cbz	r4, 800c7fe <_dtoa_r+0x526>
 800c7e4:	9907      	ldr	r1, [sp, #28]
 800c7e6:	2900      	cmp	r1, #0
 800c7e8:	dd09      	ble.n	800c7fe <_dtoa_r+0x526>
 800c7ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7ec:	4608      	mov	r0, r1
 800c7ee:	42a0      	cmp	r0, r4
 800c7f0:	bfa8      	it	ge
 800c7f2:	4620      	movge	r0, r4
 800c7f4:	1a1a      	subs	r2, r3, r0
 800c7f6:	1a0f      	subs	r7, r1, r0
 800c7f8:	920c      	str	r2, [sp, #48]	; 0x30
 800c7fa:	1a24      	subs	r4, r4, r0
 800c7fc:	9707      	str	r7, [sp, #28]
 800c7fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c800:	2900      	cmp	r1, #0
 800c802:	dd1a      	ble.n	800c83a <_dtoa_r+0x562>
 800c804:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c806:	2800      	cmp	r0, #0
 800c808:	f000 84ab 	beq.w	800d162 <_dtoa_r+0xe8a>
 800c80c:	2d00      	cmp	r5, #0
 800c80e:	dd10      	ble.n	800c832 <_dtoa_r+0x55a>
 800c810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c812:	462a      	mov	r2, r5
 800c814:	4648      	mov	r0, r9
 800c816:	f001 fff1 	bl	800e7fc <__pow5mult>
 800c81a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c81c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c81e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c820:	4648      	mov	r0, r9
 800c822:	f001 fe83 	bl	800e52c <__multiply>
 800c826:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c828:	4606      	mov	r6, r0
 800c82a:	4648      	mov	r0, r9
 800c82c:	f001 fda2 	bl	800e374 <_Bfree>
 800c830:	960a      	str	r6, [sp, #40]	; 0x28
 800c832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c834:	1b5a      	subs	r2, r3, r5
 800c836:	f040 83ab 	bne.w	800cf90 <_dtoa_r+0xcb8>
 800c83a:	2101      	movs	r1, #1
 800c83c:	4648      	mov	r0, r9
 800c83e:	f001 fe6b 	bl	800e518 <__i2b>
 800c842:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c844:	2d00      	cmp	r5, #0
 800c846:	4607      	mov	r7, r0
 800c848:	dd05      	ble.n	800c856 <_dtoa_r+0x57e>
 800c84a:	4639      	mov	r1, r7
 800c84c:	4648      	mov	r0, r9
 800c84e:	462a      	mov	r2, r5
 800c850:	f001 ffd4 	bl	800e7fc <__pow5mult>
 800c854:	4607      	mov	r7, r0
 800c856:	9a02      	ldr	r2, [sp, #8]
 800c858:	2a01      	cmp	r2, #1
 800c85a:	f340 8159 	ble.w	800cb10 <_dtoa_r+0x838>
 800c85e:	2500      	movs	r5, #0
 800c860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c862:	2b00      	cmp	r3, #0
 800c864:	f040 841a 	bne.w	800d09c <_dtoa_r+0xdc4>
 800c868:	2101      	movs	r1, #1
 800c86a:	9b07      	ldr	r3, [sp, #28]
 800c86c:	18c9      	adds	r1, r1, r3
 800c86e:	f011 001f 	ands.w	r0, r1, #31
 800c872:	f000 80cf 	beq.w	800ca14 <_dtoa_r+0x73c>
 800c876:	f1c0 0220 	rsb	r2, r0, #32
 800c87a:	2a04      	cmp	r2, #4
 800c87c:	f340 8655 	ble.w	800d52a <_dtoa_r+0x1252>
 800c880:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c884:	9a07      	ldr	r2, [sp, #28]
 800c886:	f1c0 031c 	rsb	r3, r0, #28
 800c88a:	eb08 0c03 	add.w	ip, r8, r3
 800c88e:	18d1      	adds	r1, r2, r3
 800c890:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800c894:	18e4      	adds	r4, r4, r3
 800c896:	9107      	str	r1, [sp, #28]
 800c898:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c89a:	2800      	cmp	r0, #0
 800c89c:	dd05      	ble.n	800c8aa <_dtoa_r+0x5d2>
 800c89e:	4648      	mov	r0, r9
 800c8a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c8a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8a4:	f001 fff4 	bl	800e890 <__lshift>
 800c8a8:	900a      	str	r0, [sp, #40]	; 0x28
 800c8aa:	9a07      	ldr	r2, [sp, #28]
 800c8ac:	2a00      	cmp	r2, #0
 800c8ae:	dd04      	ble.n	800c8ba <_dtoa_r+0x5e2>
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	4648      	mov	r0, r9
 800c8b4:	f001 ffec 	bl	800e890 <__lshift>
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f040 83d2 	bne.w	800d066 <_dtoa_r+0xd8e>
 800c8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f340 83f3 	ble.w	800d0b0 <_dtoa_r+0xdd8>
 800c8ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c8cc:	2900      	cmp	r1, #0
 800c8ce:	f040 80b7 	bne.w	800ca40 <_dtoa_r+0x768>
 800c8d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c8d6:	07c2      	lsls	r2, r0, #31
 800c8d8:	f140 83a2 	bpl.w	800d020 <_dtoa_r+0xd48>
 800c8dc:	4682      	mov	sl, r0
 800c8de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c8e0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c8e4:	e010      	b.n	800c908 <_dtoa_r+0x630>
 800c8e6:	f001 fd4f 	bl	800e388 <__multadd>
 800c8ea:	4639      	mov	r1, r7
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	f7ff fb7b 	bl	800bfe8 <quorem>
 800c8f2:	3030      	adds	r0, #48	; 0x30
 800c8f4:	f808 0004 	strb.w	r0, [r8, r4]
 800c8f8:	4631      	mov	r1, r6
 800c8fa:	4648      	mov	r0, r9
 800c8fc:	220a      	movs	r2, #10
 800c8fe:	2300      	movs	r3, #0
 800c900:	f001 fd42 	bl	800e388 <__multadd>
 800c904:	1c65      	adds	r5, r4, #1
 800c906:	4606      	mov	r6, r0
 800c908:	4639      	mov	r1, r7
 800c90a:	4630      	mov	r0, r6
 800c90c:	f7ff fb6c 	bl	800bfe8 <quorem>
 800c910:	1c6c      	adds	r4, r5, #1
 800c912:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 800c916:	220a      	movs	r2, #10
 800c918:	2300      	movs	r3, #0
 800c91a:	45a2      	cmp	sl, r4
 800c91c:	4631      	mov	r1, r6
 800c91e:	4648      	mov	r0, r9
 800c920:	f808 b005 	strb.w	fp, [r8, r5]
 800c924:	dcdf      	bgt.n	800c8e6 <_dtoa_r+0x60e>
 800c926:	960a      	str	r6, [sp, #40]	; 0x28
 800c928:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c92c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c92e:	2500      	movs	r5, #0
 800c930:	2a01      	cmp	r2, #1
 800c932:	bfac      	ite	ge
 800c934:	4490      	addge	r8, r2
 800c936:	f108 0801 	addlt.w	r8, r8, #1
 800c93a:	2201      	movs	r2, #1
 800c93c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c93e:	4648      	mov	r0, r9
 800c940:	f001 ffa6 	bl	800e890 <__lshift>
 800c944:	4639      	mov	r1, r7
 800c946:	900a      	str	r0, [sp, #40]	; 0x28
 800c948:	f002 f866 	bl	800ea18 <__mcmp>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	f340 844f 	ble.w	800d1f0 <_dtoa_r+0xf18>
 800c952:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c956:	9904      	ldr	r1, [sp, #16]
 800c958:	43c8      	mvns	r0, r1
 800c95a:	eb08 0300 	add.w	r3, r8, r0
 800c95e:	07db      	lsls	r3, r3, #31
 800c960:	d507      	bpl.n	800c972 <_dtoa_r+0x69a>
 800c962:	2a39      	cmp	r2, #57	; 0x39
 800c964:	f108 30ff 	add.w	r0, r8, #4294967295
 800c968:	d118      	bne.n	800c99c <_dtoa_r+0x6c4>
 800c96a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800c96e:	9904      	ldr	r1, [sp, #16]
 800c970:	4680      	mov	r8, r0
 800c972:	2a39      	cmp	r2, #57	; 0x39
 800c974:	f108 30ff 	add.w	r0, r8, #4294967295
 800c978:	d110      	bne.n	800c99c <_dtoa_r+0x6c4>
 800c97a:	4281      	cmp	r1, r0
 800c97c:	f000 836c 	beq.w	800d058 <_dtoa_r+0xd80>
 800c980:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800c984:	2a39      	cmp	r2, #57	; 0x39
 800c986:	4680      	mov	r8, r0
 800c988:	f100 30ff 	add.w	r0, r0, #4294967295
 800c98c:	d106      	bne.n	800c99c <_dtoa_r+0x6c4>
 800c98e:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800c992:	4680      	mov	r8, r0
 800c994:	2a39      	cmp	r2, #57	; 0x39
 800c996:	f108 30ff 	add.w	r0, r8, #4294967295
 800c99a:	d0ee      	beq.n	800c97a <_dtoa_r+0x6a2>
 800c99c:	3201      	adds	r2, #1
 800c99e:	7002      	strb	r2, [r0, #0]
 800c9a0:	4648      	mov	r0, r9
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	f001 fce6 	bl	800e374 <_Bfree>
 800c9a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f43f aeb6 	beq.w	800c71c <_dtoa_r+0x444>
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	f000 82e7 	beq.w	800cf84 <_dtoa_r+0xcac>
 800c9b6:	429d      	cmp	r5, r3
 800c9b8:	f000 82e4 	beq.w	800cf84 <_dtoa_r+0xcac>
 800c9bc:	4648      	mov	r0, r9
 800c9be:	4629      	mov	r1, r5
 800c9c0:	f001 fcd8 	bl	800e374 <_Bfree>
 800c9c4:	e2de      	b.n	800cf84 <_dtoa_r+0xcac>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	9310      	str	r3, [sp, #64]	; 0x40
 800c9ca:	e54d      	b.n	800c468 <_dtoa_r+0x190>
 800c9cc:	9806      	ldr	r0, [sp, #24]
 800c9ce:	f7fc fa4b 	bl	8008e68 <__aeabi_i2d>
 800c9d2:	4622      	mov	r2, r4
 800c9d4:	462b      	mov	r3, r5
 800c9d6:	f7fc fd15 	bl	8009404 <__aeabi_dcmpeq>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	f47f ad2f 	bne.w	800c43e <_dtoa_r+0x166>
 800c9e0:	9806      	ldr	r0, [sp, #24]
 800c9e2:	1e41      	subs	r1, r0, #1
 800c9e4:	9106      	str	r1, [sp, #24]
 800c9e6:	e52a      	b.n	800c43e <_dtoa_r+0x166>
 800c9e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9ea:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	ebce 0100 	rsb	r1, lr, r0
 800c9f4:	f1ce 0200 	rsb	r2, lr, #0
 800c9f8:	910c      	str	r1, [sp, #48]	; 0x30
 800c9fa:	920e      	str	r2, [sp, #56]	; 0x38
 800c9fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9fe:	e547      	b.n	800c490 <_dtoa_r+0x1b8>
 800ca00:	4276      	negs	r6, r6
 800ca02:	2300      	movs	r3, #0
 800ca04:	960c      	str	r6, [sp, #48]	; 0x30
 800ca06:	9307      	str	r3, [sp, #28]
 800ca08:	e535      	b.n	800c476 <_dtoa_r+0x19e>
 800ca0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ca0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ca0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ca10:	900b      	str	r0, [sp, #44]	; 0x2c
 800ca12:	e6e6      	b.n	800c7e2 <_dtoa_r+0x50a>
 800ca14:	231c      	movs	r3, #28
 800ca16:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ca18:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800ca1c:	18c8      	adds	r0, r1, r3
 800ca1e:	eb0c 0e03 	add.w	lr, ip, r3
 800ca22:	900c      	str	r0, [sp, #48]	; 0x30
 800ca24:	18e4      	adds	r4, r4, r3
 800ca26:	f8cd e01c 	str.w	lr, [sp, #28]
 800ca2a:	e735      	b.n	800c898 <_dtoa_r+0x5c0>
 800ca2c:	f64f 35ee 	movw	r5, #64494	; 0xfbee
 800ca30:	f6cf 75ff 	movt	r5, #65535	; 0xffff
 800ca34:	1bab      	subs	r3, r5, r6
 800ca36:	fa0a f003 	lsl.w	r0, sl, r3
 800ca3a:	e4cb      	b.n	800c3d4 <_dtoa_r+0xfc>
 800ca3c:	9010      	str	r0, [sp, #64]	; 0x40
 800ca3e:	e513      	b.n	800c468 <_dtoa_r+0x190>
 800ca40:	2c00      	cmp	r4, #0
 800ca42:	dd05      	ble.n	800ca50 <_dtoa_r+0x778>
 800ca44:	4648      	mov	r0, r9
 800ca46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca48:	4622      	mov	r2, r4
 800ca4a:	f001 ff21 	bl	800e890 <__lshift>
 800ca4e:	900b      	str	r0, [sp, #44]	; 0x2c
 800ca50:	2d00      	cmp	r5, #0
 800ca52:	f040 8405 	bne.w	800d260 <_dtoa_r+0xf88>
 800ca56:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ca58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ca5a:	9a04      	ldr	r2, [sp, #16]
 800ca5c:	9b04      	ldr	r3, [sp, #16]
 800ca5e:	1951      	adds	r1, r2, r5
 800ca60:	f00a 0001 	and.w	r0, sl, #1
 800ca64:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ca66:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ca6a:	9107      	str	r1, [sp, #28]
 800ca6c:	1c5c      	adds	r4, r3, #1
 800ca6e:	9009      	str	r0, [sp, #36]	; 0x24
 800ca70:	4639      	mov	r1, r7
 800ca72:	4650      	mov	r0, sl
 800ca74:	f7ff fab8 	bl	800bfe8 <quorem>
 800ca78:	4629      	mov	r1, r5
 800ca7a:	4680      	mov	r8, r0
 800ca7c:	4650      	mov	r0, sl
 800ca7e:	f001 ffcb 	bl	800ea18 <__mcmp>
 800ca82:	4639      	mov	r1, r7
 800ca84:	4632      	mov	r2, r6
 800ca86:	4683      	mov	fp, r0
 800ca88:	4648      	mov	r0, r9
 800ca8a:	f001 fff3 	bl	800ea74 <__mdiff>
 800ca8e:	68c1      	ldr	r1, [r0, #12]
 800ca90:	1e63      	subs	r3, r4, #1
 800ca92:	4602      	mov	r2, r0
 800ca94:	9305      	str	r3, [sp, #20]
 800ca96:	f108 0c30 	add.w	ip, r8, #48	; 0x30
 800ca9a:	2900      	cmp	r1, #0
 800ca9c:	f000 8287 	beq.w	800cfae <_dtoa_r+0xcd6>
 800caa0:	4648      	mov	r0, r9
 800caa2:	4611      	mov	r1, r2
 800caa4:	f8cd c000 	str.w	ip, [sp]
 800caa8:	f001 fc64 	bl	800e374 <_Bfree>
 800caac:	f8dd c000 	ldr.w	ip, [sp]
 800cab0:	2001      	movs	r0, #1
 800cab2:	f1bb 0f00 	cmp.w	fp, #0
 800cab6:	f2c0 837b 	blt.w	800d1b0 <_dtoa_r+0xed8>
 800caba:	d105      	bne.n	800cac8 <_dtoa_r+0x7f0>
 800cabc:	9a02      	ldr	r2, [sp, #8]
 800cabe:	b91a      	cbnz	r2, 800cac8 <_dtoa_r+0x7f0>
 800cac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cac2:	2900      	cmp	r1, #0
 800cac4:	f000 8374 	beq.w	800d1b0 <_dtoa_r+0xed8>
 800cac8:	2800      	cmp	r0, #0
 800caca:	f300 83e0 	bgt.w	800d28e <_dtoa_r+0xfb6>
 800cace:	9807      	ldr	r0, [sp, #28]
 800cad0:	f804 cc01 	strb.w	ip, [r4, #-1]
 800cad4:	4284      	cmp	r4, r0
 800cad6:	46a0      	mov	r8, r4
 800cad8:	f000 83e8 	beq.w	800d2ac <_dtoa_r+0xfd4>
 800cadc:	4651      	mov	r1, sl
 800cade:	220a      	movs	r2, #10
 800cae0:	2300      	movs	r3, #0
 800cae2:	4648      	mov	r0, r9
 800cae4:	f001 fc50 	bl	800e388 <__multadd>
 800cae8:	42b5      	cmp	r5, r6
 800caea:	4682      	mov	sl, r0
 800caec:	f000 828e 	beq.w	800d00c <_dtoa_r+0xd34>
 800caf0:	4629      	mov	r1, r5
 800caf2:	220a      	movs	r2, #10
 800caf4:	2300      	movs	r3, #0
 800caf6:	4648      	mov	r0, r9
 800caf8:	f001 fc46 	bl	800e388 <__multadd>
 800cafc:	4631      	mov	r1, r6
 800cafe:	4605      	mov	r5, r0
 800cb00:	220a      	movs	r2, #10
 800cb02:	4648      	mov	r0, r9
 800cb04:	2300      	movs	r3, #0
 800cb06:	f001 fc3f 	bl	800e388 <__multadd>
 800cb0a:	3401      	adds	r4, #1
 800cb0c:	4606      	mov	r6, r0
 800cb0e:	e7af      	b.n	800ca70 <_dtoa_r+0x798>
 800cb10:	f1ba 0f00 	cmp.w	sl, #0
 800cb14:	f47f aea3 	bne.w	800c85e <_dtoa_r+0x586>
 800cb18:	f3cb 0013 	ubfx	r0, fp, #0, #20
 800cb1c:	4659      	mov	r1, fp
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	f040 8492 	bne.w	800d448 <_dtoa_r+0x1170>
 800cb24:	2500      	movs	r5, #0
 800cb26:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 800cb2a:	400d      	ands	r5, r1
 800cb2c:	2d00      	cmp	r5, #0
 800cb2e:	f43f ae97 	beq.w	800c860 <_dtoa_r+0x588>
 800cb32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb34:	9907      	ldr	r1, [sp, #28]
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	1c48      	adds	r0, r1, #1
 800cb3a:	920c      	str	r2, [sp, #48]	; 0x30
 800cb3c:	9007      	str	r0, [sp, #28]
 800cb3e:	2501      	movs	r5, #1
 800cb40:	e68e      	b.n	800c860 <_dtoa_r+0x588>
 800cb42:	2301      	movs	r3, #1
 800cb44:	930d      	str	r3, [sp, #52]	; 0x34
 800cb46:	9905      	ldr	r1, [sp, #20]
 800cb48:	2900      	cmp	r1, #0
 800cb4a:	f340 832c 	ble.w	800d1a6 <_dtoa_r+0xece>
 800cb4e:	460c      	mov	r4, r1
 800cb50:	9111      	str	r1, [sp, #68]	; 0x44
 800cb52:	9109      	str	r1, [sp, #36]	; 0x24
 800cb54:	2100      	movs	r1, #0
 800cb56:	2c17      	cmp	r4, #23
 800cb58:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800cb5c:	d90a      	bls.n	800cb74 <_dtoa_r+0x89c>
 800cb5e:	2201      	movs	r2, #1
 800cb60:	2304      	movs	r3, #4
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	f103 0014 	add.w	r0, r3, #20
 800cb68:	4611      	mov	r1, r2
 800cb6a:	3201      	adds	r2, #1
 800cb6c:	42a0      	cmp	r0, r4
 800cb6e:	d9f8      	bls.n	800cb62 <_dtoa_r+0x88a>
 800cb70:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800cb74:	4648      	mov	r0, r9
 800cb76:	f001 fbd7 	bl	800e328 <_Balloc>
 800cb7a:	2c0e      	cmp	r4, #14
 800cb7c:	9004      	str	r0, [sp, #16]
 800cb7e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800cb82:	f63f acc7 	bhi.w	800c514 <_dtoa_r+0x23c>
 800cb86:	2d00      	cmp	r5, #0
 800cb88:	f43f acc4 	beq.w	800c514 <_dtoa_r+0x23c>
 800cb8c:	9f06      	ldr	r7, [sp, #24]
 800cb8e:	2f00      	cmp	r7, #0
 800cb90:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 800cb94:	f340 8340 	ble.w	800d218 <_dtoa_r+0xf40>
 800cb98:	4c99      	ldr	r4, [pc, #612]	; (800ce00 <_dtoa_r+0xb28>)
 800cb9a:	f007 060f 	and.w	r6, r7, #15
 800cb9e:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
 800cba2:	113e      	asrs	r6, r7, #4
 800cba4:	06f1      	lsls	r1, r6, #27
 800cba6:	e9d0 4500 	ldrd	r4, r5, [r0]
 800cbaa:	f140 82f8 	bpl.w	800d19e <_dtoa_r+0xec6>
 800cbae:	4f95      	ldr	r7, [pc, #596]	; (800ce04 <_dtoa_r+0xb2c>)
 800cbb0:	4650      	mov	r0, sl
 800cbb2:	4659      	mov	r1, fp
 800cbb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cbb8:	f7fc fae6 	bl	8009188 <__aeabi_ddiv>
 800cbbc:	f006 060f 	and.w	r6, r6, #15
 800cbc0:	4682      	mov	sl, r0
 800cbc2:	468b      	mov	fp, r1
 800cbc4:	2703      	movs	r7, #3
 800cbc6:	b186      	cbz	r6, 800cbea <_dtoa_r+0x912>
 800cbc8:	f8df 8238 	ldr.w	r8, [pc, #568]	; 800ce04 <_dtoa_r+0xb2c>
 800cbcc:	4620      	mov	r0, r4
 800cbce:	4629      	mov	r1, r5
 800cbd0:	07f2      	lsls	r2, r6, #31
 800cbd2:	d504      	bpl.n	800cbde <_dtoa_r+0x906>
 800cbd4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cbd8:	f7fc f9ac 	bl	8008f34 <__aeabi_dmul>
 800cbdc:	3701      	adds	r7, #1
 800cbde:	1076      	asrs	r6, r6, #1
 800cbe0:	f108 0808 	add.w	r8, r8, #8
 800cbe4:	d1f4      	bne.n	800cbd0 <_dtoa_r+0x8f8>
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	460d      	mov	r5, r1
 800cbea:	4650      	mov	r0, sl
 800cbec:	4659      	mov	r1, fp
 800cbee:	4622      	mov	r2, r4
 800cbf0:	462b      	mov	r3, r5
 800cbf2:	f7fc fac9 	bl	8009188 <__aeabi_ddiv>
 800cbf6:	4682      	mov	sl, r0
 800cbf8:	468b      	mov	fp, r1
 800cbfa:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cbfc:	b151      	cbz	r1, 800cc14 <_dtoa_r+0x93c>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	4650      	mov	r0, sl
 800cc02:	4659      	mov	r1, fp
 800cc04:	2200      	movs	r2, #0
 800cc06:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800cc0a:	f7fc fc05 	bl	8009418 <__aeabi_dcmplt>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	f040 8422 	bne.w	800d458 <_dtoa_r+0x1180>
 800cc14:	4638      	mov	r0, r7
 800cc16:	f7fc f927 	bl	8008e68 <__aeabi_i2d>
 800cc1a:	4652      	mov	r2, sl
 800cc1c:	465b      	mov	r3, fp
 800cc1e:	f7fc f989 	bl	8008f34 <__aeabi_dmul>
 800cc22:	2300      	movs	r3, #0
 800cc24:	2200      	movs	r2, #0
 800cc26:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800cc2a:	f7fb ffd1 	bl	8008bd0 <__adddf3>
 800cc2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc30:	4604      	mov	r4, r0
 800cc32:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800cc36:	2a00      	cmp	r2, #0
 800cc38:	f000 8276 	beq.w	800d128 <_dtoa_r+0xe50>
 800cc3c:	9e06      	ldr	r6, [sp, #24]
 800cc3e:	9619      	str	r6, [sp, #100]	; 0x64
 800cc40:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cc42:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cc44:	2800      	cmp	r0, #0
 800cc46:	f000 8337 	beq.w	800d2b8 <_dtoa_r+0xfe0>
 800cc4a:	4a6d      	ldr	r2, [pc, #436]	; (800ce00 <_dtoa_r+0xb28>)
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800cc52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc56:	2000      	movs	r0, #0
 800cc58:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800cc5c:	f7fc fa94 	bl	8009188 <__aeabi_ddiv>
 800cc60:	4622      	mov	r2, r4
 800cc62:	462b      	mov	r3, r5
 800cc64:	f7fb ffb2 	bl	8008bcc <__aeabi_dsub>
 800cc68:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800cc6c:	4659      	mov	r1, fp
 800cc6e:	4650      	mov	r0, sl
 800cc70:	f7fc fbfa 	bl	8009468 <__aeabi_d2iz>
 800cc74:	4604      	mov	r4, r0
 800cc76:	f7fc f8f7 	bl	8008e68 <__aeabi_i2d>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	4650      	mov	r0, sl
 800cc80:	4659      	mov	r1, fp
 800cc82:	f7fb ffa3 	bl	8008bcc <__aeabi_dsub>
 800cc86:	3430      	adds	r4, #48	; 0x30
 800cc88:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cc8c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800cc90:	fa5f fb84 	uxtb.w	fp, r4
 800cc94:	f808 bb01 	strb.w	fp, [r8], #1
 800cc98:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800cc9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cca0:	f7fc fbd8 	bl	8009454 <__aeabi_dcmpgt>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	f040 812f 	bne.w	800cf08 <_dtoa_r+0xc30>
 800ccaa:	2100      	movs	r1, #0
 800ccac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800ccb6:	f7fb ff89 	bl	8008bcc <__aeabi_dsub>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800ccc2:	f7fc fbc7 	bl	8009454 <__aeabi_dcmpgt>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	f040 840d 	bne.w	800d4e6 <_dtoa_r+0x120e>
 800cccc:	2e01      	cmp	r6, #1
 800ccce:	f340 829f 	ble.w	800d210 <_dtoa_r+0xf38>
 800ccd2:	9c04      	ldr	r4, [sp, #16]
 800ccd4:	ea6f 0708 	mvn.w	r7, r8
 800ccd8:	19a6      	adds	r6, r4, r6
 800ccda:	19bd      	adds	r5, r7, r6
 800ccdc:	2300      	movs	r3, #0
 800ccde:	f005 0701 	and.w	r7, r5, #1
 800cce2:	2200      	movs	r2, #0
 800cce4:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800cce8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800ccec:	9618      	str	r6, [sp, #96]	; 0x60
 800ccee:	9716      	str	r7, [sp, #88]	; 0x58
 800ccf0:	f7fc f920 	bl	8008f34 <__aeabi_dmul>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	460d      	mov	r5, r1
 800cd00:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800cd04:	f7fc f916 	bl	8008f34 <__aeabi_dmul>
 800cd08:	460f      	mov	r7, r1
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	f7fc fbac 	bl	8009468 <__aeabi_d2iz>
 800cd10:	4683      	mov	fp, r0
 800cd12:	f7fc f8a9 	bl	8008e68 <__aeabi_i2d>
 800cd16:	4602      	mov	r2, r0
 800cd18:	460b      	mov	r3, r1
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	4639      	mov	r1, r7
 800cd1e:	f7fb ff55 	bl	8008bcc <__aeabi_dsub>
 800cd22:	46c2      	mov	sl, r8
 800cd24:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 800cd28:	fa5f fb82 	uxtb.w	fp, r2
 800cd2c:	f80a bb01 	strb.w	fp, [sl], #1
 800cd30:	4622      	mov	r2, r4
 800cd32:	462b      	mov	r3, r5
 800cd34:	4606      	mov	r6, r0
 800cd36:	460f      	mov	r7, r1
 800cd38:	46d0      	mov	r8, sl
 800cd3a:	f7fc fb6d 	bl	8009418 <__aeabi_dcmplt>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	f040 80e2 	bne.w	800cf08 <_dtoa_r+0xc30>
 800cd44:	2100      	movs	r1, #0
 800cd46:	4632      	mov	r2, r6
 800cd48:	463b      	mov	r3, r7
 800cd4a:	2000      	movs	r0, #0
 800cd4c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800cd50:	f7fb ff3c 	bl	8008bcc <__aeabi_dsub>
 800cd54:	4622      	mov	r2, r4
 800cd56:	462b      	mov	r3, r5
 800cd58:	f7fc fb5e 	bl	8009418 <__aeabi_dcmplt>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	f040 83c2 	bne.w	800d4e6 <_dtoa_r+0x120e>
 800cd62:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd64:	458a      	cmp	sl, r1
 800cd66:	f000 8253 	beq.w	800d210 <_dtoa_r+0xf38>
 800cd6a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	d042      	beq.n	800cdf6 <_dtoa_r+0xb1e>
 800cd70:	2300      	movs	r3, #0
 800cd72:	2200      	movs	r2, #0
 800cd74:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800cd78:	4620      	mov	r0, r4
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7fc f8da 	bl	8008f34 <__aeabi_dmul>
 800cd80:	2300      	movs	r3, #0
 800cd82:	2200      	movs	r2, #0
 800cd84:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800cd88:	4604      	mov	r4, r0
 800cd8a:	460d      	mov	r5, r1
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	4639      	mov	r1, r7
 800cd90:	f7fc f8d0 	bl	8008f34 <__aeabi_dmul>
 800cd94:	460f      	mov	r7, r1
 800cd96:	4606      	mov	r6, r0
 800cd98:	f7fc fb66 	bl	8009468 <__aeabi_d2iz>
 800cd9c:	4680      	mov	r8, r0
 800cd9e:	f7fc f863 	bl	8008e68 <__aeabi_i2d>
 800cda2:	4602      	mov	r2, r0
 800cda4:	460b      	mov	r3, r1
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	f7fb ff0f 	bl	8008bcc <__aeabi_dsub>
 800cdae:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800cdb2:	fa5f fb83 	uxtb.w	fp, r3
 800cdb6:	f80a bb01 	strb.w	fp, [sl], #1
 800cdba:	4622      	mov	r2, r4
 800cdbc:	462b      	mov	r3, r5
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	460f      	mov	r7, r1
 800cdc2:	46d0      	mov	r8, sl
 800cdc4:	f7fc fb28 	bl	8009418 <__aeabi_dcmplt>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f040 809d 	bne.w	800cf08 <_dtoa_r+0xc30>
 800cdce:	2100      	movs	r1, #0
 800cdd0:	4632      	mov	r2, r6
 800cdd2:	463b      	mov	r3, r7
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800cdda:	f7fb fef7 	bl	8008bcc <__aeabi_dsub>
 800cdde:	4622      	mov	r2, r4
 800cde0:	462b      	mov	r3, r5
 800cde2:	f7fc fb19 	bl	8009418 <__aeabi_dcmplt>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	f040 837d 	bne.w	800d4e6 <_dtoa_r+0x120e>
 800cdec:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 800cdf0:	45f2      	cmp	sl, lr
 800cdf2:	f000 820d 	beq.w	800d210 <_dtoa_r+0xf38>
 800cdf6:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800cdfa:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800cdfe:	e050      	b.n	800cea2 <_dtoa_r+0xbca>
 800ce00:	0800fd60 	.word	0x0800fd60
 800ce04:	0800fe28 	.word	0x0800fe28
 800ce08:	2100      	movs	r1, #0
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800ce10:	f7fb fedc 	bl	8008bcc <__aeabi_dsub>
 800ce14:	4622      	mov	r2, r4
 800ce16:	462b      	mov	r3, r5
 800ce18:	f7fc fafe 	bl	8009418 <__aeabi_dcmplt>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ce24:	2800      	cmp	r0, #0
 800ce26:	f040 835c 	bne.w	800d4e2 <_dtoa_r+0x120a>
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	f7fc f881 	bl	8008f34 <__aeabi_dmul>
 800ce32:	2300      	movs	r3, #0
 800ce34:	2200      	movs	r2, #0
 800ce36:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	460d      	mov	r5, r1
 800ce3e:	4630      	mov	r0, r6
 800ce40:	4639      	mov	r1, r7
 800ce42:	f7fc f877 	bl	8008f34 <__aeabi_dmul>
 800ce46:	460f      	mov	r7, r1
 800ce48:	4606      	mov	r6, r0
 800ce4a:	f7fc fb0d 	bl	8009468 <__aeabi_d2iz>
 800ce4e:	4680      	mov	r8, r0
 800ce50:	f7fc f80a 	bl	8008e68 <__aeabi_i2d>
 800ce54:	4602      	mov	r2, r0
 800ce56:	460b      	mov	r3, r1
 800ce58:	4630      	mov	r0, r6
 800ce5a:	4639      	mov	r1, r7
 800ce5c:	f7fb feb6 	bl	8008bcc <__aeabi_dsub>
 800ce60:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800ce64:	fa5f fb83 	uxtb.w	fp, r3
 800ce68:	f80a bb01 	strb.w	fp, [sl], #1
 800ce6c:	4622      	mov	r2, r4
 800ce6e:	462b      	mov	r3, r5
 800ce70:	4606      	mov	r6, r0
 800ce72:	460f      	mov	r7, r1
 800ce74:	f7fc fad0 	bl	8009418 <__aeabi_dcmplt>
 800ce78:	46d0      	mov	r8, sl
 800ce7a:	4632      	mov	r2, r6
 800ce7c:	463b      	mov	r3, r7
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d140      	bne.n	800cf04 <_dtoa_r+0xc2c>
 800ce82:	2100      	movs	r1, #0
 800ce84:	2000      	movs	r0, #0
 800ce86:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800ce8a:	f7fb fe9f 	bl	8008bcc <__aeabi_dsub>
 800ce8e:	4622      	mov	r2, r4
 800ce90:	462b      	mov	r3, r5
 800ce92:	f7fc fac1 	bl	8009418 <__aeabi_dcmplt>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	f040 8323 	bne.w	800d4e2 <_dtoa_r+0x120a>
 800ce9c:	45ca      	cmp	sl, r9
 800ce9e:	f000 81b5 	beq.w	800d20c <_dtoa_r+0xf34>
 800cea2:	2300      	movs	r3, #0
 800cea4:	4620      	mov	r0, r4
 800cea6:	4629      	mov	r1, r5
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ceae:	f7fc f841 	bl	8008f34 <__aeabi_dmul>
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ceba:	4604      	mov	r4, r0
 800cebc:	460d      	mov	r5, r1
 800cebe:	4630      	mov	r0, r6
 800cec0:	4639      	mov	r1, r7
 800cec2:	f7fc f837 	bl	8008f34 <__aeabi_dmul>
 800cec6:	460f      	mov	r7, r1
 800cec8:	4606      	mov	r6, r0
 800ceca:	f7fc facd 	bl	8009468 <__aeabi_d2iz>
 800cece:	4683      	mov	fp, r0
 800ced0:	f7fb ffca 	bl	8008e68 <__aeabi_i2d>
 800ced4:	4602      	mov	r2, r0
 800ced6:	460b      	mov	r3, r1
 800ced8:	4630      	mov	r0, r6
 800ceda:	4639      	mov	r1, r7
 800cedc:	f7fb fe76 	bl	8008bcc <__aeabi_dsub>
 800cee0:	46d0      	mov	r8, sl
 800cee2:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 800cee6:	fa5f fb82 	uxtb.w	fp, r2
 800ceea:	f808 bb01 	strb.w	fp, [r8], #1
 800ceee:	4622      	mov	r2, r4
 800cef0:	462b      	mov	r3, r5
 800cef2:	4606      	mov	r6, r0
 800cef4:	460f      	mov	r7, r1
 800cef6:	f7fc fa8f 	bl	8009418 <__aeabi_dcmplt>
 800cefa:	46c2      	mov	sl, r8
 800cefc:	4632      	mov	r2, r6
 800cefe:	463b      	mov	r3, r7
 800cf00:	2800      	cmp	r0, #0
 800cf02:	d081      	beq.n	800ce08 <_dtoa_r+0xb30>
 800cf04:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800cf08:	9819      	ldr	r0, [sp, #100]	; 0x64
 800cf0a:	9006      	str	r0, [sp, #24]
 800cf0c:	e406      	b.n	800c71c <_dtoa_r+0x444>
 800cf0e:	2400      	movs	r4, #0
 800cf10:	940d      	str	r4, [sp, #52]	; 0x34
 800cf12:	9b05      	ldr	r3, [sp, #20]
 800cf14:	f8dd e018 	ldr.w	lr, [sp, #24]
 800cf18:	eb03 040e 	add.w	r4, r3, lr
 800cf1c:	9411      	str	r4, [sp, #68]	; 0x44
 800cf1e:	3401      	adds	r4, #1
 800cf20:	2c00      	cmp	r4, #0
 800cf22:	9409      	str	r4, [sp, #36]	; 0x24
 800cf24:	f73f ae16 	bgt.w	800cb54 <_dtoa_r+0x87c>
 800cf28:	2100      	movs	r1, #0
 800cf2a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800cf2e:	e621      	b.n	800cb74 <_dtoa_r+0x89c>
 800cf30:	2201      	movs	r2, #1
 800cf32:	920d      	str	r2, [sp, #52]	; 0x34
 800cf34:	e7ed      	b.n	800cf12 <_dtoa_r+0xc3a>
 800cf36:	2000      	movs	r0, #0
 800cf38:	900d      	str	r0, [sp, #52]	; 0x34
 800cf3a:	e604      	b.n	800cb46 <_dtoa_r+0x86e>
 800cf3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf3e:	2a00      	cmp	r2, #0
 800cf40:	f73f aafb 	bgt.w	800c53a <_dtoa_r+0x262>
 800cf44:	f040 82e9 	bne.w	800d51a <_dtoa_r+0x1242>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800cf50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf54:	f7fb ffee 	bl	8008f34 <__aeabi_dmul>
 800cf58:	4652      	mov	r2, sl
 800cf5a:	465b      	mov	r3, fp
 800cf5c:	f7fc fa70 	bl	8009440 <__aeabi_dcmpge>
 800cf60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cf62:	970b      	str	r7, [sp, #44]	; 0x2c
 800cf64:	2800      	cmp	r0, #0
 800cf66:	f000 80b8 	beq.w	800d0da <_dtoa_r+0xe02>
 800cf6a:	9a05      	ldr	r2, [sp, #20]
 800cf6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cf70:	43d5      	mvns	r5, r2
 800cf72:	9506      	str	r5, [sp, #24]
 800cf74:	4648      	mov	r0, r9
 800cf76:	4639      	mov	r1, r7
 800cf78:	f001 f9fc 	bl	800e374 <_Bfree>
 800cf7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f43f abcc 	beq.w	800c71c <_dtoa_r+0x444>
 800cf84:	4648      	mov	r0, r9
 800cf86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf88:	f001 f9f4 	bl	800e374 <_Bfree>
 800cf8c:	f7ff bbc6 	b.w	800c71c <_dtoa_r+0x444>
 800cf90:	4648      	mov	r0, r9
 800cf92:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cf94:	f001 fc32 	bl	800e7fc <__pow5mult>
 800cf98:	900a      	str	r0, [sp, #40]	; 0x28
 800cf9a:	e44e      	b.n	800c83a <_dtoa_r+0x562>
 800cf9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cf9e:	2d00      	cmp	r5, #0
 800cfa0:	f000 824b 	beq.w	800d43a <_dtoa_r+0x1162>
 800cfa4:	f203 4733 	addw	r7, r3, #1075	; 0x433
 800cfa8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cfaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cfac:	e40b      	b.n	800c7c6 <_dtoa_r+0x4ee>
 800cfae:	4611      	mov	r1, r2
 800cfb0:	4650      	mov	r0, sl
 800cfb2:	f8cd c000 	str.w	ip, [sp]
 800cfb6:	9201      	str	r2, [sp, #4]
 800cfb8:	f001 fd2e 	bl	800ea18 <__mcmp>
 800cfbc:	9a01      	ldr	r2, [sp, #4]
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	4648      	mov	r0, r9
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	f001 f9d5 	bl	800e374 <_Bfree>
 800cfca:	9801      	ldr	r0, [sp, #4]
 800cfcc:	f8dd c000 	ldr.w	ip, [sp]
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	f47f ad6e 	bne.w	800cab2 <_dtoa_r+0x7da>
 800cfd6:	9902      	ldr	r1, [sp, #8]
 800cfd8:	2900      	cmp	r1, #0
 800cfda:	f47f ad6a 	bne.w	800cab2 <_dtoa_r+0x7da>
 800cfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f47f ad66 	bne.w	800cab2 <_dtoa_r+0x7da>
 800cfe6:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800cfea:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800cfee:	46da      	mov	sl, fp
 800cff0:	46e3      	mov	fp, ip
 800cff2:	f000 80f5 	beq.w	800d1e0 <_dtoa_r+0xf08>
 800cff6:	f1ba 0f00 	cmp.w	sl, #0
 800cffa:	dd01      	ble.n	800d000 <_dtoa_r+0xd28>
 800cffc:	f108 0b31 	add.w	fp, r8, #49	; 0x31
 800d000:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d004:	960b      	str	r6, [sp, #44]	; 0x2c
 800d006:	f808 bb01 	strb.w	fp, [r8], #1
 800d00a:	e4c9      	b.n	800c9a0 <_dtoa_r+0x6c8>
 800d00c:	4629      	mov	r1, r5
 800d00e:	4648      	mov	r0, r9
 800d010:	220a      	movs	r2, #10
 800d012:	2300      	movs	r3, #0
 800d014:	f001 f9b8 	bl	800e388 <__multadd>
 800d018:	3401      	adds	r4, #1
 800d01a:	4605      	mov	r5, r0
 800d01c:	4606      	mov	r6, r0
 800d01e:	e527      	b.n	800ca70 <_dtoa_r+0x798>
 800d020:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d022:	4639      	mov	r1, r7
 800d024:	f7fe ffe0 	bl	800bfe8 <quorem>
 800d028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d02a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800d02e:	2501      	movs	r5, #1
 800d030:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 800d034:	42ab      	cmp	r3, r5
 800d036:	f88c b000 	strb.w	fp, [ip]
 800d03a:	f77f ac75 	ble.w	800c928 <_dtoa_r+0x650>
 800d03e:	4648      	mov	r0, r9
 800d040:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d044:	220a      	movs	r2, #10
 800d046:	f001 f99f 	bl	800e388 <__multadd>
 800d04a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d04e:	900a      	str	r0, [sp, #40]	; 0x28
 800d050:	4606      	mov	r6, r0
 800d052:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d056:	e457      	b.n	800c908 <_dtoa_r+0x630>
 800d058:	9b06      	ldr	r3, [sp, #24]
 800d05a:	9a04      	ldr	r2, [sp, #16]
 800d05c:	1c58      	adds	r0, r3, #1
 800d05e:	2131      	movs	r1, #49	; 0x31
 800d060:	9006      	str	r0, [sp, #24]
 800d062:	7011      	strb	r1, [r2, #0]
 800d064:	e49c      	b.n	800c9a0 <_dtoa_r+0x6c8>
 800d066:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d068:	4639      	mov	r1, r7
 800d06a:	f001 fcd5 	bl	800ea18 <__mcmp>
 800d06e:	2800      	cmp	r0, #0
 800d070:	f6bf ac27 	bge.w	800c8c2 <_dtoa_r+0x5ea>
 800d074:	220a      	movs	r2, #10
 800d076:	4648      	mov	r0, r9
 800d078:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d07a:	2300      	movs	r3, #0
 800d07c:	f001 f984 	bl	800e388 <__multadd>
 800d080:	f8dd e018 	ldr.w	lr, [sp, #24]
 800d084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d086:	900a      	str	r0, [sp, #40]	; 0x28
 800d088:	f10e 38ff 	add.w	r8, lr, #4294967295
 800d08c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d090:	2a00      	cmp	r2, #0
 800d092:	f040 8237 	bne.w	800d504 <_dtoa_r+0x122c>
 800d096:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d098:	9109      	str	r1, [sp, #36]	; 0x24
 800d09a:	e412      	b.n	800c8c2 <_dtoa_r+0x5ea>
 800d09c:	693a      	ldr	r2, [r7, #16]
 800d09e:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 800d0a2:	6900      	ldr	r0, [r0, #16]
 800d0a4:	f001 f9ec 	bl	800e480 <__hi0bits>
 800d0a8:	f1c0 0120 	rsb	r1, r0, #32
 800d0ac:	f7ff bbdd 	b.w	800c86a <_dtoa_r+0x592>
 800d0b0:	9a02      	ldr	r2, [sp, #8]
 800d0b2:	2a02      	cmp	r2, #2
 800d0b4:	f77f ac09 	ble.w	800c8ca <_dtoa_r+0x5f2>
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f47f af56 	bne.w	800cf6a <_dtoa_r+0xc92>
 800d0be:	4639      	mov	r1, r7
 800d0c0:	2205      	movs	r2, #5
 800d0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0c4:	4648      	mov	r0, r9
 800d0c6:	f001 f95f 	bl	800e388 <__multadd>
 800d0ca:	4607      	mov	r7, r0
 800d0cc:	4639      	mov	r1, r7
 800d0ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d0d0:	f001 fca2 	bl	800ea18 <__mcmp>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	f77f af48 	ble.w	800cf6a <_dtoa_r+0xc92>
 800d0da:	9806      	ldr	r0, [sp, #24]
 800d0dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d0e0:	2331      	movs	r3, #49	; 0x31
 800d0e2:	1c41      	adds	r1, r0, #1
 800d0e4:	f808 3b01 	strb.w	r3, [r8], #1
 800d0e8:	9106      	str	r1, [sp, #24]
 800d0ea:	e743      	b.n	800cf74 <_dtoa_r+0xc9c>
 800d0ec:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 800d0f0:	f108 31ff 	add.w	r1, r8, #4294967295
 800d0f4:	f47f ab0e 	bne.w	800c714 <_dtoa_r+0x43c>
 800d0f8:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 800d0fc:	9d04      	ldr	r5, [sp, #16]
 800d0fe:	4688      	mov	r8, r1
 800d100:	f7ff baf0 	b.w	800c6e4 <_dtoa_r+0x40c>
 800d104:	4638      	mov	r0, r7
 800d106:	f7fb feaf 	bl	8008e68 <__aeabi_i2d>
 800d10a:	4602      	mov	r2, r0
 800d10c:	460b      	mov	r3, r1
 800d10e:	4650      	mov	r0, sl
 800d110:	4659      	mov	r1, fp
 800d112:	f7fb ff0f 	bl	8008f34 <__aeabi_dmul>
 800d116:	2300      	movs	r3, #0
 800d118:	2200      	movs	r2, #0
 800d11a:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800d11e:	f7fb fd57 	bl	8008bd0 <__adddf3>
 800d122:	4604      	mov	r4, r0
 800d124:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800d128:	2300      	movs	r3, #0
 800d12a:	2200      	movs	r2, #0
 800d12c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800d130:	4650      	mov	r0, sl
 800d132:	4659      	mov	r1, fp
 800d134:	f7fb fd4a 	bl	8008bcc <__aeabi_dsub>
 800d138:	4622      	mov	r2, r4
 800d13a:	462b      	mov	r3, r5
 800d13c:	4682      	mov	sl, r0
 800d13e:	468b      	mov	fp, r1
 800d140:	f7fc f988 	bl	8009454 <__aeabi_dcmpgt>
 800d144:	4607      	mov	r7, r0
 800d146:	2800      	cmp	r0, #0
 800d148:	f040 816f 	bne.w	800d42a <_dtoa_r+0x1152>
 800d14c:	4622      	mov	r2, r4
 800d14e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d152:	4650      	mov	r0, sl
 800d154:	4659      	mov	r1, fp
 800d156:	f7fc f95f 	bl	8009418 <__aeabi_dcmplt>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	d058      	beq.n	800d210 <_dtoa_r+0xf38>
 800d15e:	970b      	str	r7, [sp, #44]	; 0x2c
 800d160:	e703      	b.n	800cf6a <_dtoa_r+0xc92>
 800d162:	4648      	mov	r0, r9
 800d164:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d168:	f001 fb48 	bl	800e7fc <__pow5mult>
 800d16c:	900a      	str	r0, [sp, #40]	; 0x28
 800d16e:	f7ff bb64 	b.w	800c83a <_dtoa_r+0x562>
 800d172:	9806      	ldr	r0, [sp, #24]
 800d174:	9d04      	ldr	r5, [sp, #16]
 800d176:	1c41      	adds	r1, r0, #1
 800d178:	9106      	str	r1, [sp, #24]
 800d17a:	4629      	mov	r1, r5
 800d17c:	2230      	movs	r2, #48	; 0x30
 800d17e:	2331      	movs	r3, #49	; 0x31
 800d180:	702a      	strb	r2, [r5, #0]
 800d182:	700b      	strb	r3, [r1, #0]
 800d184:	f7ff baca 	b.w	800c71c <_dtoa_r+0x444>
 800d188:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800d18c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d18e:	970e      	str	r7, [sp, #56]	; 0x38
 800d190:	ebcc 0507 	rsb	r5, ip, r7
 800d194:	1948      	adds	r0, r1, r5
 800d196:	900f      	str	r0, [sp, #60]	; 0x3c
 800d198:	2500      	movs	r5, #0
 800d19a:	f7ff bb0e 	b.w	800c7ba <_dtoa_r+0x4e2>
 800d19e:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 800d1a2:	2702      	movs	r7, #2
 800d1a4:	e50f      	b.n	800cbc6 <_dtoa_r+0x8ee>
 800d1a6:	2401      	movs	r4, #1
 800d1a8:	9411      	str	r4, [sp, #68]	; 0x44
 800d1aa:	9409      	str	r4, [sp, #36]	; 0x24
 800d1ac:	9405      	str	r4, [sp, #20]
 800d1ae:	e6bb      	b.n	800cf28 <_dtoa_r+0xc50>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	46e3      	mov	fp, ip
 800d1b4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800d1b8:	4664      	mov	r4, ip
 800d1ba:	f77f af21 	ble.w	800d000 <_dtoa_r+0xd28>
 800d1be:	2201      	movs	r2, #1
 800d1c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d1c2:	4648      	mov	r0, r9
 800d1c4:	f001 fb64 	bl	800e890 <__lshift>
 800d1c8:	4639      	mov	r1, r7
 800d1ca:	900a      	str	r0, [sp, #40]	; 0x28
 800d1cc:	f001 fc24 	bl	800ea18 <__mcmp>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	f340 818c 	ble.w	800d4ee <_dtoa_r+0x1216>
 800d1d6:	2c39      	cmp	r4, #57	; 0x39
 800d1d8:	f108 0b31 	add.w	fp, r8, #49	; 0x31
 800d1dc:	f47f af10 	bne.w	800d000 <_dtoa_r+0xd28>
 800d1e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d1e4:	960b      	str	r6, [sp, #44]	; 0x2c
 800d1e6:	2239      	movs	r2, #57	; 0x39
 800d1e8:	f808 2b01 	strb.w	r2, [r8], #1
 800d1ec:	f7ff bbb3 	b.w	800c956 <_dtoa_r+0x67e>
 800d1f0:	d103      	bne.n	800d1fa <_dtoa_r+0xf22>
 800d1f2:	f01b 0f01 	tst.w	fp, #1
 800d1f6:	f47f abac 	bne.w	800c952 <_dtoa_r+0x67a>
 800d1fa:	4643      	mov	r3, r8
 800d1fc:	4698      	mov	r8, r3
 800d1fe:	3b01      	subs	r3, #1
 800d200:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d204:	2a30      	cmp	r2, #48	; 0x30
 800d206:	d0f9      	beq.n	800d1fc <_dtoa_r+0xf24>
 800d208:	f7ff bbca 	b.w	800c9a0 <_dtoa_r+0x6c8>
 800d20c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800d210:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 800d214:	f7ff b97e 	b.w	800c514 <_dtoa_r+0x23c>
 800d218:	9d06      	ldr	r5, [sp, #24]
 800d21a:	426c      	negs	r4, r5
 800d21c:	2c00      	cmp	r4, #0
 800d21e:	f000 8116 	beq.w	800d44e <_dtoa_r+0x1176>
 800d222:	4bb6      	ldr	r3, [pc, #728]	; (800d4fc <_dtoa_r+0x1224>)
 800d224:	f004 010f 	and.w	r1, r4, #15
 800d228:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800d22c:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d230:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800d234:	f7fb fe7e 	bl	8008f34 <__aeabi_dmul>
 800d238:	1124      	asrs	r4, r4, #4
 800d23a:	4682      	mov	sl, r0
 800d23c:	468b      	mov	fp, r1
 800d23e:	f000 816e 	beq.w	800d51e <_dtoa_r+0x1246>
 800d242:	4daf      	ldr	r5, [pc, #700]	; (800d500 <_dtoa_r+0x1228>)
 800d244:	2702      	movs	r7, #2
 800d246:	07e3      	lsls	r3, r4, #31
 800d248:	d504      	bpl.n	800d254 <_dtoa_r+0xf7c>
 800d24a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d24e:	f7fb fe71 	bl	8008f34 <__aeabi_dmul>
 800d252:	3701      	adds	r7, #1
 800d254:	3508      	adds	r5, #8
 800d256:	1064      	asrs	r4, r4, #1
 800d258:	d1f5      	bne.n	800d246 <_dtoa_r+0xf6e>
 800d25a:	4682      	mov	sl, r0
 800d25c:	468b      	mov	fp, r1
 800d25e:	e4cc      	b.n	800cbfa <_dtoa_r+0x922>
 800d260:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d262:	4648      	mov	r0, r9
 800d264:	6869      	ldr	r1, [r5, #4]
 800d266:	f001 f85f 	bl	800e328 <_Balloc>
 800d26a:	6929      	ldr	r1, [r5, #16]
 800d26c:	4604      	mov	r4, r0
 800d26e:	1c88      	adds	r0, r1, #2
 800d270:	4629      	mov	r1, r5
 800d272:	0082      	lsls	r2, r0, #2
 800d274:	310c      	adds	r1, #12
 800d276:	f104 000c 	add.w	r0, r4, #12
 800d27a:	f000 ffaf 	bl	800e1dc <memcpy>
 800d27e:	4648      	mov	r0, r9
 800d280:	4621      	mov	r1, r4
 800d282:	2201      	movs	r2, #1
 800d284:	f001 fb04 	bl	800e890 <__lshift>
 800d288:	4606      	mov	r6, r0
 800d28a:	f7ff bbe5 	b.w	800ca58 <_dtoa_r+0x780>
 800d28e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800d292:	46e3      	mov	fp, ip
 800d294:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800d298:	d0a2      	beq.n	800d1e0 <_dtoa_r+0xf08>
 800d29a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d29e:	960b      	str	r6, [sp, #44]	; 0x2c
 800d2a0:	f10c 0e01 	add.w	lr, ip, #1
 800d2a4:	f808 eb01 	strb.w	lr, [r8], #1
 800d2a8:	f7ff bb7a 	b.w	800c9a0 <_dtoa_r+0x6c8>
 800d2ac:	46e3      	mov	fp, ip
 800d2ae:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800d2b2:	960b      	str	r6, [sp, #44]	; 0x2c
 800d2b4:	f7ff bb41 	b.w	800c93a <_dtoa_r+0x662>
 800d2b8:	4990      	ldr	r1, [pc, #576]	; (800d4fc <_dtoa_r+0x1224>)
 800d2ba:	1e73      	subs	r3, r6, #1
 800d2bc:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 800d2c0:	4622      	mov	r2, r4
 800d2c2:	9318      	str	r3, [sp, #96]	; 0x60
 800d2c4:	e9d0 0100 	ldrd	r0, r1, [r0]
 800d2c8:	462b      	mov	r3, r5
 800d2ca:	f7fb fe33 	bl	8008f34 <__aeabi_dmul>
 800d2ce:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800d2d2:	4659      	mov	r1, fp
 800d2d4:	4650      	mov	r0, sl
 800d2d6:	f7fc f8c7 	bl	8009468 <__aeabi_d2iz>
 800d2da:	4604      	mov	r4, r0
 800d2dc:	f7fb fdc4 	bl	8008e68 <__aeabi_i2d>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4650      	mov	r0, sl
 800d2e6:	4659      	mov	r1, fp
 800d2e8:	f7fb fc70 	bl	8008bcc <__aeabi_dsub>
 800d2ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d2f0:	3430      	adds	r4, #48	; 0x30
 800d2f2:	2e01      	cmp	r6, #1
 800d2f4:	4682      	mov	sl, r0
 800d2f6:	468b      	mov	fp, r1
 800d2f8:	f808 4b01 	strb.w	r4, [r8], #1
 800d2fc:	f000 8081 	beq.w	800d402 <_dtoa_r+0x112a>
 800d300:	9c04      	ldr	r4, [sp, #16]
 800d302:	2300      	movs	r3, #0
 800d304:	1e67      	subs	r7, r4, #1
 800d306:	eb07 0a06 	add.w	sl, r7, r6
 800d30a:	2200      	movs	r2, #0
 800d30c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800d310:	f8cd a000 	str.w	sl, [sp]
 800d314:	f7fb fe0e 	bl	8008f34 <__aeabi_dmul>
 800d318:	43e6      	mvns	r6, r4
 800d31a:	460f      	mov	r7, r1
 800d31c:	eb06 050a 	add.w	r5, r6, sl
 800d320:	4606      	mov	r6, r0
 800d322:	f7fc f8a1 	bl	8009468 <__aeabi_d2iz>
 800d326:	4604      	mov	r4, r0
 800d328:	f7fb fd9e 	bl	8008e68 <__aeabi_i2d>
 800d32c:	4602      	mov	r2, r0
 800d32e:	460b      	mov	r3, r1
 800d330:	4630      	mov	r0, r6
 800d332:	4639      	mov	r1, r7
 800d334:	f7fb fc4a 	bl	8008bcc <__aeabi_dsub>
 800d338:	f8dd c010 	ldr.w	ip, [sp, #16]
 800d33c:	3430      	adds	r4, #48	; 0x30
 800d33e:	f88c 4001 	strb.w	r4, [ip, #1]
 800d342:	f8dd c000 	ldr.w	ip, [sp]
 800d346:	45e0      	cmp	r8, ip
 800d348:	f005 0501 	and.w	r5, r5, #1
 800d34c:	4682      	mov	sl, r0
 800d34e:	468b      	mov	fp, r1
 800d350:	4647      	mov	r7, r8
 800d352:	d054      	beq.n	800d3fe <_dtoa_r+0x1126>
 800d354:	b1f5      	cbz	r5, 800d394 <_dtoa_r+0x10bc>
 800d356:	2300      	movs	r3, #0
 800d358:	2200      	movs	r2, #0
 800d35a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800d35e:	f8cd c000 	str.w	ip, [sp]
 800d362:	f7fb fde7 	bl	8008f34 <__aeabi_dmul>
 800d366:	468b      	mov	fp, r1
 800d368:	4682      	mov	sl, r0
 800d36a:	f7fc f87d 	bl	8009468 <__aeabi_d2iz>
 800d36e:	4604      	mov	r4, r0
 800d370:	f7fb fd7a 	bl	8008e68 <__aeabi_i2d>
 800d374:	4647      	mov	r7, r8
 800d376:	4602      	mov	r2, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	4650      	mov	r0, sl
 800d37c:	4659      	mov	r1, fp
 800d37e:	3430      	adds	r4, #48	; 0x30
 800d380:	f7fb fc24 	bl	8008bcc <__aeabi_dsub>
 800d384:	f807 4f01 	strb.w	r4, [r7, #1]!
 800d388:	f8dd c000 	ldr.w	ip, [sp]
 800d38c:	4567      	cmp	r7, ip
 800d38e:	4682      	mov	sl, r0
 800d390:	468b      	mov	fp, r1
 800d392:	d034      	beq.n	800d3fe <_dtoa_r+0x1126>
 800d394:	4650      	mov	r0, sl
 800d396:	4659      	mov	r1, fp
 800d398:	4666      	mov	r6, ip
 800d39a:	2300      	movs	r3, #0
 800d39c:	2200      	movs	r2, #0
 800d39e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800d3a2:	f7fb fdc7 	bl	8008f34 <__aeabi_dmul>
 800d3a6:	460d      	mov	r5, r1
 800d3a8:	4604      	mov	r4, r0
 800d3aa:	f7fc f85d 	bl	8009468 <__aeabi_d2iz>
 800d3ae:	4682      	mov	sl, r0
 800d3b0:	f7fb fd5a 	bl	8008e68 <__aeabi_i2d>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	f7fb fc06 	bl	8008bcc <__aeabi_dsub>
 800d3c0:	f10a 0430 	add.w	r4, sl, #48	; 0x30
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800d3cc:	f807 4f01 	strb.w	r4, [r7, #1]!
 800d3d0:	f7fb fdb0 	bl	8008f34 <__aeabi_dmul>
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	f7fc f846 	bl	8009468 <__aeabi_d2iz>
 800d3dc:	4683      	mov	fp, r0
 800d3de:	f7fb fd43 	bl	8008e68 <__aeabi_i2d>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	f7fb fbef 	bl	8008bcc <__aeabi_dsub>
 800d3ee:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 800d3f2:	f807 2f01 	strb.w	r2, [r7, #1]!
 800d3f6:	42b7      	cmp	r7, r6
 800d3f8:	d1cf      	bne.n	800d39a <_dtoa_r+0x10c2>
 800d3fa:	4682      	mov	sl, r0
 800d3fc:	468b      	mov	fp, r1
 800d3fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d400:	4498      	add	r8, r3
 800d402:	2300      	movs	r3, #0
 800d404:	2200      	movs	r2, #0
 800d406:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800d40a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800d40e:	f7fb fbdf 	bl	8008bd0 <__adddf3>
 800d412:	4652      	mov	r2, sl
 800d414:	465b      	mov	r3, fp
 800d416:	f7fb ffff 	bl	8009418 <__aeabi_dcmplt>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d049      	beq.n	800d4b2 <_dtoa_r+0x11da>
 800d41e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800d420:	f818 bc01 	ldrb.w	fp, [r8, #-1]
 800d424:	9506      	str	r5, [sp, #24]
 800d426:	f7ff b955 	b.w	800c6d4 <_dtoa_r+0x3fc>
 800d42a:	2700      	movs	r7, #0
 800d42c:	970b      	str	r7, [sp, #44]	; 0x2c
 800d42e:	e654      	b.n	800d0da <_dtoa_r+0xe02>
 800d430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d432:	2700      	movs	r7, #0
 800d434:	1b14      	subs	r4, r2, r4
 800d436:	f7ff b9c6 	b.w	800c7c6 <_dtoa_r+0x4ee>
 800d43a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d43c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d43e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d440:	f1c3 0736 	rsb	r7, r3, #54	; 0x36
 800d444:	f7ff b9bf 	b.w	800c7c6 <_dtoa_r+0x4ee>
 800d448:	4655      	mov	r5, sl
 800d44a:	f7ff ba09 	b.w	800c860 <_dtoa_r+0x588>
 800d44e:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 800d452:	2702      	movs	r7, #2
 800d454:	f7ff bbd1 	b.w	800cbfa <_dtoa_r+0x922>
 800d458:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d45a:	2d00      	cmp	r5, #0
 800d45c:	f43f ae52 	beq.w	800d104 <_dtoa_r+0xe2c>
 800d460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d462:	2b00      	cmp	r3, #0
 800d464:	f77f aed4 	ble.w	800d210 <_dtoa_r+0xf38>
 800d468:	2300      	movs	r3, #0
 800d46a:	2200      	movs	r2, #0
 800d46c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800d470:	4650      	mov	r0, sl
 800d472:	4659      	mov	r1, fp
 800d474:	f7fb fd5e 	bl	8008f34 <__aeabi_dmul>
 800d478:	4682      	mov	sl, r0
 800d47a:	1c78      	adds	r0, r7, #1
 800d47c:	468b      	mov	fp, r1
 800d47e:	f7fb fcf3 	bl	8008e68 <__aeabi_i2d>
 800d482:	4602      	mov	r2, r0
 800d484:	460b      	mov	r3, r1
 800d486:	4650      	mov	r0, sl
 800d488:	4659      	mov	r1, fp
 800d48a:	f7fb fd53 	bl	8008f34 <__aeabi_dmul>
 800d48e:	2300      	movs	r3, #0
 800d490:	2200      	movs	r2, #0
 800d492:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800d496:	f7fb fb9b 	bl	8008bd0 <__adddf3>
 800d49a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800d49e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d4a0:	f10c 3eff 	add.w	lr, ip, #4294967295
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 800d4aa:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800d4ae:	f7ff bbc8 	b.w	800cc42 <_dtoa_r+0x96a>
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800d4be:	f7fb fb85 	bl	8008bcc <__aeabi_dsub>
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	465b      	mov	r3, fp
 800d4c6:	f7fb ffc5 	bl	8009454 <__aeabi_dcmpgt>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	f43f aea0 	beq.w	800d210 <_dtoa_r+0xf38>
 800d4d0:	4641      	mov	r1, r8
 800d4d2:	4688      	mov	r8, r1
 800d4d4:	f101 31ff 	add.w	r1, r1, #4294967295
 800d4d8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 800d4dc:	2830      	cmp	r0, #48	; 0x30
 800d4de:	d0f8      	beq.n	800d4d2 <_dtoa_r+0x11fa>
 800d4e0:	e512      	b.n	800cf08 <_dtoa_r+0xc30>
 800d4e2:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800d4e6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d4e8:	9106      	str	r1, [sp, #24]
 800d4ea:	f7ff b8f3 	b.w	800c6d4 <_dtoa_r+0x3fc>
 800d4ee:	f47f ad87 	bne.w	800d000 <_dtoa_r+0xd28>
 800d4f2:	f01b 0f01 	tst.w	fp, #1
 800d4f6:	f43f ad83 	beq.w	800d000 <_dtoa_r+0xd28>
 800d4fa:	e66c      	b.n	800d1d6 <_dtoa_r+0xefe>
 800d4fc:	0800fd60 	.word	0x0800fd60
 800d500:	0800fe28 	.word	0x0800fe28
 800d504:	4648      	mov	r0, r9
 800d506:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d508:	220a      	movs	r2, #10
 800d50a:	2300      	movs	r3, #0
 800d50c:	f000 ff3c 	bl	800e388 <__multadd>
 800d510:	900b      	str	r0, [sp, #44]	; 0x2c
 800d512:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d514:	9009      	str	r0, [sp, #36]	; 0x24
 800d516:	f7ff b9d4 	b.w	800c8c2 <_dtoa_r+0x5ea>
 800d51a:	2700      	movs	r7, #0
 800d51c:	e61f      	b.n	800d15e <_dtoa_r+0xe86>
 800d51e:	2702      	movs	r7, #2
 800d520:	f7ff bb6b 	b.w	800cbfa <_dtoa_r+0x922>
 800d524:	2501      	movs	r5, #1
 800d526:	f7fe bfbc 	b.w	800c4a2 <_dtoa_r+0x1ca>
 800d52a:	f43f a9b5 	beq.w	800c898 <_dtoa_r+0x5c0>
 800d52e:	f1c0 033c 	rsb	r3, r0, #60	; 0x3c
 800d532:	f7ff ba70 	b.w	800ca16 <_dtoa_r+0x73e>
 800d536:	bf00      	nop

0800d538 <_fflush_r>:
 800d538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d53c:	460d      	mov	r5, r1
 800d53e:	4680      	mov	r8, r0
 800d540:	b110      	cbz	r0, 800d548 <_fflush_r+0x10>
 800d542:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d544:	2b00      	cmp	r3, #0
 800d546:	d062      	beq.n	800d60e <_fflush_r+0xd6>
 800d548:	89a8      	ldrh	r0, [r5, #12]
 800d54a:	b1e0      	cbz	r0, 800d586 <_fflush_r+0x4e>
 800d54c:	f000 0208 	and.w	r2, r0, #8
 800d550:	b211      	sxth	r1, r2
 800d552:	b1d9      	cbz	r1, 800d58c <_fflush_r+0x54>
 800d554:	692e      	ldr	r6, [r5, #16]
 800d556:	b1b6      	cbz	r6, 800d586 <_fflush_r+0x4e>
 800d558:	0783      	lsls	r3, r0, #30
 800d55a:	682c      	ldr	r4, [r5, #0]
 800d55c:	bf08      	it	eq
 800d55e:	696b      	ldreq	r3, [r5, #20]
 800d560:	602e      	str	r6, [r5, #0]
 800d562:	bf18      	it	ne
 800d564:	2300      	movne	r3, #0
 800d566:	1ba4      	subs	r4, r4, r6
 800d568:	60ab      	str	r3, [r5, #8]
 800d56a:	e00a      	b.n	800d582 <_fflush_r+0x4a>
 800d56c:	4632      	mov	r2, r6
 800d56e:	4623      	mov	r3, r4
 800d570:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800d572:	69e9      	ldr	r1, [r5, #28]
 800d574:	4640      	mov	r0, r8
 800d576:	47b8      	blx	r7
 800d578:	2800      	cmp	r0, #0
 800d57a:	ebc0 0404 	rsb	r4, r0, r4
 800d57e:	4406      	add	r6, r0
 800d580:	dd52      	ble.n	800d628 <_fflush_r+0xf0>
 800d582:	2c00      	cmp	r4, #0
 800d584:	dcf2      	bgt.n	800d56c <_fflush_r+0x34>
 800d586:	2000      	movs	r0, #0
 800d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d58c:	686a      	ldr	r2, [r5, #4]
 800d58e:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
 800d592:	2a00      	cmp	r2, #0
 800d594:	81a9      	strh	r1, [r5, #12]
 800d596:	dd4f      	ble.n	800d638 <_fflush_r+0x100>
 800d598:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800d59a:	2c00      	cmp	r4, #0
 800d59c:	d0f3      	beq.n	800d586 <_fflush_r+0x4e>
 800d59e:	f400 5680 	and.w	r6, r0, #4096	; 0x1000
 800d5a2:	b232      	sxth	r2, r6
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	f8d8 6000 	ldr.w	r6, [r8]
 800d5aa:	f8c8 0000 	str.w	r0, [r8]
 800d5ae:	2a00      	cmp	r2, #0
 800d5b0:	d030      	beq.n	800d614 <_fflush_r+0xdc>
 800d5b2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d5b4:	f001 0004 	and.w	r0, r1, #4
 800d5b8:	b201      	sxth	r1, r0
 800d5ba:	b129      	cbz	r1, 800d5c8 <_fflush_r+0x90>
 800d5bc:	6868      	ldr	r0, [r5, #4]
 800d5be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800d5c0:	1a12      	subs	r2, r2, r0
 800d5c2:	b10b      	cbz	r3, 800d5c8 <_fflush_r+0x90>
 800d5c4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800d5c6:	1a52      	subs	r2, r2, r1
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4640      	mov	r0, r8
 800d5cc:	69e9      	ldr	r1, [r5, #28]
 800d5ce:	47a0      	blx	r4
 800d5d0:	1c42      	adds	r2, r0, #1
 800d5d2:	d035      	beq.n	800d640 <_fflush_r+0x108>
 800d5d4:	89ab      	ldrh	r3, [r5, #12]
 800d5d6:	692a      	ldr	r2, [r5, #16]
 800d5d8:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 800d5dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5e0:	81ab      	strh	r3, [r5, #12]
 800d5e2:	b209      	sxth	r1, r1
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	e885 000c 	stmia.w	r5, {r2, r3}
 800d5ea:	2900      	cmp	r1, #0
 800d5ec:	d144      	bne.n	800d678 <_fflush_r+0x140>
 800d5ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800d5f0:	f8c8 6000 	str.w	r6, [r8]
 800d5f4:	2900      	cmp	r1, #0
 800d5f6:	d0c6      	beq.n	800d586 <_fflush_r+0x4e>
 800d5f8:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800d5fc:	4281      	cmp	r1, r0
 800d5fe:	d002      	beq.n	800d606 <_fflush_r+0xce>
 800d600:	4640      	mov	r0, r8
 800d602:	f000 f8f1 	bl	800d7e8 <_free_r>
 800d606:	2000      	movs	r0, #0
 800d608:	6328      	str	r0, [r5, #48]	; 0x30
 800d60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d60e:	f000 f875 	bl	800d6fc <__sinit>
 800d612:	e799      	b.n	800d548 <_fflush_r+0x10>
 800d614:	69e9      	ldr	r1, [r5, #28]
 800d616:	2301      	movs	r3, #1
 800d618:	4640      	mov	r0, r8
 800d61a:	47a0      	blx	r4
 800d61c:	1c41      	adds	r1, r0, #1
 800d61e:	4602      	mov	r2, r0
 800d620:	d02c      	beq.n	800d67c <_fflush_r+0x144>
 800d622:	89a9      	ldrh	r1, [r5, #12]
 800d624:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800d626:	e7c5      	b.n	800d5b4 <_fflush_r+0x7c>
 800d628:	89aa      	ldrh	r2, [r5, #12]
 800d62a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d62e:	81ab      	strh	r3, [r5, #12]
 800d630:	f04f 30ff 	mov.w	r0, #4294967295
 800d634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d638:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	dcac      	bgt.n	800d598 <_fflush_r+0x60>
 800d63e:	e7a2      	b.n	800d586 <_fflush_r+0x4e>
 800d640:	f8d8 3000 	ldr.w	r3, [r8]
 800d644:	b163      	cbz	r3, 800d660 <_fflush_r+0x128>
 800d646:	2b1d      	cmp	r3, #29
 800d648:	d001      	beq.n	800d64e <_fflush_r+0x116>
 800d64a:	2b16      	cmp	r3, #22
 800d64c:	d121      	bne.n	800d692 <_fflush_r+0x15a>
 800d64e:	89a8      	ldrh	r0, [r5, #12]
 800d650:	692b      	ldr	r3, [r5, #16]
 800d652:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
 800d656:	2100      	movs	r1, #0
 800d658:	81aa      	strh	r2, [r5, #12]
 800d65a:	6069      	str	r1, [r5, #4]
 800d65c:	602b      	str	r3, [r5, #0]
 800d65e:	e7c6      	b.n	800d5ee <_fflush_r+0xb6>
 800d660:	89aa      	ldrh	r2, [r5, #12]
 800d662:	6929      	ldr	r1, [r5, #16]
 800d664:	606b      	str	r3, [r5, #4]
 800d666:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d66a:	b21b      	sxth	r3, r3
 800d66c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d670:	81aa      	strh	r2, [r5, #12]
 800d672:	6029      	str	r1, [r5, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d0ba      	beq.n	800d5ee <_fflush_r+0xb6>
 800d678:	6528      	str	r0, [r5, #80]	; 0x50
 800d67a:	e7b8      	b.n	800d5ee <_fflush_r+0xb6>
 800d67c:	f8d8 1000 	ldr.w	r1, [r8]
 800d680:	2900      	cmp	r1, #0
 800d682:	d0ce      	beq.n	800d622 <_fflush_r+0xea>
 800d684:	291d      	cmp	r1, #29
 800d686:	d001      	beq.n	800d68c <_fflush_r+0x154>
 800d688:	2916      	cmp	r1, #22
 800d68a:	d1cd      	bne.n	800d628 <_fflush_r+0xf0>
 800d68c:	f8c8 6000 	str.w	r6, [r8]
 800d690:	e779      	b.n	800d586 <_fflush_r+0x4e>
 800d692:	89aa      	ldrh	r2, [r5, #12]
 800d694:	f042 0140 	orr.w	r1, r2, #64	; 0x40
 800d698:	81a9      	strh	r1, [r5, #12]
 800d69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d69e:	bf00      	nop

0800d6a0 <_cleanup_r>:
 800d6a0:	f24f 014d 	movw	r1, #61517	; 0xf04d
 800d6a4:	f6c0 0100 	movt	r1, #2048	; 0x800
 800d6a8:	f000 b968 	b.w	800d97c <_fwalk>

0800d6ac <std.isra.0>:
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	b510      	push	{r4, lr}
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	8181      	strh	r1, [r0, #12]
 800d6b4:	81c2      	strh	r2, [r0, #14]
 800d6b6:	6003      	str	r3, [r0, #0]
 800d6b8:	6043      	str	r3, [r0, #4]
 800d6ba:	6083      	str	r3, [r0, #8]
 800d6bc:	6643      	str	r3, [r0, #100]	; 0x64
 800d6be:	6103      	str	r3, [r0, #16]
 800d6c0:	6143      	str	r3, [r0, #20]
 800d6c2:	6183      	str	r3, [r0, #24]
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	2208      	movs	r2, #8
 800d6c8:	f100 005c 	add.w	r0, r0, #92	; 0x5c
 800d6cc:	f7fc fc28 	bl	8009f20 <memset>
 800d6d0:	f64e 5059 	movw	r0, #60761	; 0xed59
 800d6d4:	f64e 517d 	movw	r1, #60797	; 0xed7d
 800d6d8:	f64e 52c1 	movw	r2, #60865	; 0xedc1
 800d6dc:	f64e 53e5 	movw	r3, #60901	; 0xede5
 800d6e0:	f6c0 0000 	movt	r0, #2048	; 0x800
 800d6e4:	f6c0 0100 	movt	r1, #2048	; 0x800
 800d6e8:	f6c0 0200 	movt	r2, #2048	; 0x800
 800d6ec:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d6f0:	61e4      	str	r4, [r4, #28]
 800d6f2:	6220      	str	r0, [r4, #32]
 800d6f4:	6261      	str	r1, [r4, #36]	; 0x24
 800d6f6:	62a2      	str	r2, [r4, #40]	; 0x28
 800d6f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6fa:	bd10      	pop	{r4, pc}

0800d6fc <__sinit>:
 800d6fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d6fe:	b570      	push	{r4, r5, r6, lr}
 800d700:	4604      	mov	r4, r0
 800d702:	b103      	cbz	r3, 800d706 <__sinit+0xa>
 800d704:	bd70      	pop	{r4, r5, r6, pc}
 800d706:	4a0f      	ldr	r2, [pc, #60]	; (800d744 <__sinit+0x48>)
 800d708:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
 800d70c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800d70e:	2501      	movs	r5, #1
 800d710:	461a      	mov	r2, r3
 800d712:	f504 763b 	add.w	r6, r4, #748	; 0x2ec
 800d716:	2303      	movs	r3, #3
 800d718:	2104      	movs	r1, #4
 800d71a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800d71e:	6840      	ldr	r0, [r0, #4]
 800d720:	63a5      	str	r5, [r4, #56]	; 0x38
 800d722:	f8c4 62e8 	str.w	r6, [r4, #744]	; 0x2e8
 800d726:	f7ff ffc1 	bl	800d6ac <std.isra.0>
 800d72a:	68a0      	ldr	r0, [r4, #8]
 800d72c:	2109      	movs	r1, #9
 800d72e:	462a      	mov	r2, r5
 800d730:	f7ff ffbc 	bl	800d6ac <std.isra.0>
 800d734:	68e0      	ldr	r0, [r4, #12]
 800d736:	2112      	movs	r1, #18
 800d738:	2202      	movs	r2, #2
 800d73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d73e:	f7ff bfb5 	b.w	800d6ac <std.isra.0>
 800d742:	bf00      	nop
 800d744:	0800d6a1 	.word	0x0800d6a1

0800d748 <__sfp_lock_acquire>:
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop

0800d74c <__sfp_lock_release>:
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop

0800d750 <_malloc_trim_r>:
 800d750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d752:	4d22      	ldr	r5, [pc, #136]	; (800d7dc <_malloc_trim_r+0x8c>)
 800d754:	460f      	mov	r7, r1
 800d756:	4604      	mov	r4, r0
 800d758:	f000 fde2 	bl	800e320 <__malloc_lock>
 800d75c:	68ab      	ldr	r3, [r5, #8]
 800d75e:	685e      	ldr	r6, [r3, #4]
 800d760:	f026 0603 	bic.w	r6, r6, #3
 800d764:	f606 70ef 	addw	r0, r6, #4079	; 0xfef
 800d768:	1bc1      	subs	r1, r0, r7
 800d76a:	0b0a      	lsrs	r2, r1, #12
 800d76c:	1e57      	subs	r7, r2, #1
 800d76e:	033f      	lsls	r7, r7, #12
 800d770:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800d774:	db07      	blt.n	800d786 <_malloc_trim_r+0x36>
 800d776:	2100      	movs	r1, #0
 800d778:	4620      	mov	r0, r4
 800d77a:	f001 fadb 	bl	800ed34 <_sbrk_r>
 800d77e:	68ab      	ldr	r3, [r5, #8]
 800d780:	1999      	adds	r1, r3, r6
 800d782:	4288      	cmp	r0, r1
 800d784:	d004      	beq.n	800d790 <_malloc_trim_r+0x40>
 800d786:	4620      	mov	r0, r4
 800d788:	f000 fdcc 	bl	800e324 <__malloc_unlock>
 800d78c:	2000      	movs	r0, #0
 800d78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d790:	4279      	negs	r1, r7
 800d792:	4620      	mov	r0, r4
 800d794:	f001 face 	bl	800ed34 <_sbrk_r>
 800d798:	3001      	adds	r0, #1
 800d79a:	d00d      	beq.n	800d7b8 <_malloc_trim_r+0x68>
 800d79c:	4b10      	ldr	r3, [pc, #64]	; (800d7e0 <_malloc_trim_r+0x90>)
 800d79e:	68a8      	ldr	r0, [r5, #8]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	1bf6      	subs	r6, r6, r7
 800d7a4:	f046 0601 	orr.w	r6, r6, #1
 800d7a8:	1bd7      	subs	r7, r2, r7
 800d7aa:	6046      	str	r6, [r0, #4]
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	601f      	str	r7, [r3, #0]
 800d7b0:	f000 fdb8 	bl	800e324 <__malloc_unlock>
 800d7b4:	2001      	movs	r0, #1
 800d7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	f001 faba 	bl	800ed34 <_sbrk_r>
 800d7c0:	68ab      	ldr	r3, [r5, #8]
 800d7c2:	1ac2      	subs	r2, r0, r3
 800d7c4:	2a0f      	cmp	r2, #15
 800d7c6:	ddde      	ble.n	800d786 <_malloc_trim_r+0x36>
 800d7c8:	4906      	ldr	r1, [pc, #24]	; (800d7e4 <_malloc_trim_r+0x94>)
 800d7ca:	6809      	ldr	r1, [r1, #0]
 800d7cc:	1a40      	subs	r0, r0, r1
 800d7ce:	4904      	ldr	r1, [pc, #16]	; (800d7e0 <_malloc_trim_r+0x90>)
 800d7d0:	f042 0201 	orr.w	r2, r2, #1
 800d7d4:	6008      	str	r0, [r1, #0]
 800d7d6:	605a      	str	r2, [r3, #4]
 800d7d8:	e7d5      	b.n	800d786 <_malloc_trim_r+0x36>
 800d7da:	bf00      	nop
 800d7dc:	200004f0 	.word	0x200004f0
 800d7e0:	20000960 	.word	0x20000960
 800d7e4:	200008fc 	.word	0x200008fc

0800d7e8 <_free_r>:
 800d7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ec:	460d      	mov	r5, r1
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	2900      	cmp	r1, #0
 800d7f2:	d055      	beq.n	800d8a0 <_free_r+0xb8>
 800d7f4:	f000 fd94 	bl	800e320 <__malloc_lock>
 800d7f8:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800d7fc:	f8df c16c 	ldr.w	ip, [pc, #364]	; 800d96c <_free_r+0x184>
 800d800:	f1a5 0408 	sub.w	r4, r5, #8
 800d804:	f021 0301 	bic.w	r3, r1, #1
 800d808:	18e2      	adds	r2, r4, r3
 800d80a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800d80e:	6857      	ldr	r7, [r2, #4]
 800d810:	4290      	cmp	r0, r2
 800d812:	f027 0703 	bic.w	r7, r7, #3
 800d816:	d065      	beq.n	800d8e4 <_free_r+0xfc>
 800d818:	f011 0101 	ands.w	r1, r1, #1
 800d81c:	6057      	str	r7, [r2, #4]
 800d81e:	d032      	beq.n	800d886 <_free_r+0x9e>
 800d820:	2100      	movs	r1, #0
 800d822:	19d0      	adds	r0, r2, r7
 800d824:	6840      	ldr	r0, [r0, #4]
 800d826:	07c0      	lsls	r0, r0, #31
 800d828:	d406      	bmi.n	800d838 <_free_r+0x50>
 800d82a:	19db      	adds	r3, r3, r7
 800d82c:	6890      	ldr	r0, [r2, #8]
 800d82e:	2900      	cmp	r1, #0
 800d830:	d04a      	beq.n	800d8c8 <_free_r+0xe0>
 800d832:	68d2      	ldr	r2, [r2, #12]
 800d834:	60c2      	str	r2, [r0, #12]
 800d836:	6090      	str	r0, [r2, #8]
 800d838:	f043 0001 	orr.w	r0, r3, #1
 800d83c:	6060      	str	r0, [r4, #4]
 800d83e:	50e3      	str	r3, [r4, r3]
 800d840:	b9e1      	cbnz	r1, 800d87c <_free_r+0x94>
 800d842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d846:	d32d      	bcc.n	800d8a4 <_free_r+0xbc>
 800d848:	0a5a      	lsrs	r2, r3, #9
 800d84a:	2a04      	cmp	r2, #4
 800d84c:	d866      	bhi.n	800d91c <_free_r+0x134>
 800d84e:	0998      	lsrs	r0, r3, #6
 800d850:	3038      	adds	r0, #56	; 0x38
 800d852:	0042      	lsls	r2, r0, #1
 800d854:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 800d858:	4944      	ldr	r1, [pc, #272]	; (800d96c <_free_r+0x184>)
 800d85a:	f8de 2008 	ldr.w	r2, [lr, #8]
 800d85e:	4572      	cmp	r2, lr
 800d860:	d062      	beq.n	800d928 <_free_r+0x140>
 800d862:	6850      	ldr	r0, [r2, #4]
 800d864:	f020 0103 	bic.w	r1, r0, #3
 800d868:	428b      	cmp	r3, r1
 800d86a:	d202      	bcs.n	800d872 <_free_r+0x8a>
 800d86c:	6892      	ldr	r2, [r2, #8]
 800d86e:	4596      	cmp	lr, r2
 800d870:	d1f7      	bne.n	800d862 <_free_r+0x7a>
 800d872:	68d0      	ldr	r0, [r2, #12]
 800d874:	60e0      	str	r0, [r4, #12]
 800d876:	60a2      	str	r2, [r4, #8]
 800d878:	60d4      	str	r4, [r2, #12]
 800d87a:	6084      	str	r4, [r0, #8]
 800d87c:	4630      	mov	r0, r6
 800d87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d882:	f000 bd4f 	b.w	800e324 <__malloc_unlock>
 800d886:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800d88a:	1b64      	subs	r4, r4, r5
 800d88c:	f10c 0808 	add.w	r8, ip, #8
 800d890:	68a0      	ldr	r0, [r4, #8]
 800d892:	4540      	cmp	r0, r8
 800d894:	442b      	add	r3, r5
 800d896:	d03f      	beq.n	800d918 <_free_r+0x130>
 800d898:	68e5      	ldr	r5, [r4, #12]
 800d89a:	60c5      	str	r5, [r0, #12]
 800d89c:	60a8      	str	r0, [r5, #8]
 800d89e:	e7c0      	b.n	800d822 <_free_r+0x3a>
 800d8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a4:	08dd      	lsrs	r5, r3, #3
 800d8a6:	eb0c 02c5 	add.w	r2, ip, r5, lsl #3
 800d8aa:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800d8ae:	6891      	ldr	r1, [r2, #8]
 800d8b0:	60e2      	str	r2, [r4, #12]
 800d8b2:	10ab      	asrs	r3, r5, #2
 800d8b4:	2501      	movs	r5, #1
 800d8b6:	fa05 f303 	lsl.w	r3, r5, r3
 800d8ba:	4318      	orrs	r0, r3
 800d8bc:	60a1      	str	r1, [r4, #8]
 800d8be:	f8cc 0004 	str.w	r0, [ip, #4]
 800d8c2:	6094      	str	r4, [r2, #8]
 800d8c4:	60cc      	str	r4, [r1, #12]
 800d8c6:	e7d9      	b.n	800d87c <_free_r+0x94>
 800d8c8:	4d29      	ldr	r5, [pc, #164]	; (800d970 <_free_r+0x188>)
 800d8ca:	42a8      	cmp	r0, r5
 800d8cc:	d1b1      	bne.n	800d832 <_free_r+0x4a>
 800d8ce:	f043 0201 	orr.w	r2, r3, #1
 800d8d2:	f8cc 4014 	str.w	r4, [ip, #20]
 800d8d6:	f8cc 4010 	str.w	r4, [ip, #16]
 800d8da:	60e0      	str	r0, [r4, #12]
 800d8dc:	60a0      	str	r0, [r4, #8]
 800d8de:	6062      	str	r2, [r4, #4]
 800d8e0:	50e3      	str	r3, [r4, r3]
 800d8e2:	e7cb      	b.n	800d87c <_free_r+0x94>
 800d8e4:	18ff      	adds	r7, r7, r3
 800d8e6:	07cb      	lsls	r3, r1, #31
 800d8e8:	d407      	bmi.n	800d8fa <_free_r+0x112>
 800d8ea:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800d8ee:	1a64      	subs	r4, r4, r1
 800d8f0:	187f      	adds	r7, r7, r1
 800d8f2:	68e3      	ldr	r3, [r4, #12]
 800d8f4:	68a0      	ldr	r0, [r4, #8]
 800d8f6:	60c3      	str	r3, [r0, #12]
 800d8f8:	6098      	str	r0, [r3, #8]
 800d8fa:	4a1e      	ldr	r2, [pc, #120]	; (800d974 <_free_r+0x18c>)
 800d8fc:	f8cc 4008 	str.w	r4, [ip, #8]
 800d900:	6811      	ldr	r1, [r2, #0]
 800d902:	f047 0301 	orr.w	r3, r7, #1
 800d906:	428f      	cmp	r7, r1
 800d908:	6063      	str	r3, [r4, #4]
 800d90a:	d3b7      	bcc.n	800d87c <_free_r+0x94>
 800d90c:	4a1a      	ldr	r2, [pc, #104]	; (800d978 <_free_r+0x190>)
 800d90e:	4630      	mov	r0, r6
 800d910:	6811      	ldr	r1, [r2, #0]
 800d912:	f7ff ff1d 	bl	800d750 <_malloc_trim_r>
 800d916:	e7b1      	b.n	800d87c <_free_r+0x94>
 800d918:	2101      	movs	r1, #1
 800d91a:	e782      	b.n	800d822 <_free_r+0x3a>
 800d91c:	2a14      	cmp	r2, #20
 800d91e:	d80c      	bhi.n	800d93a <_free_r+0x152>
 800d920:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 800d924:	0042      	lsls	r2, r0, #1
 800d926:	e795      	b.n	800d854 <_free_r+0x6c>
 800d928:	684b      	ldr	r3, [r1, #4]
 800d92a:	1080      	asrs	r0, r0, #2
 800d92c:	2501      	movs	r5, #1
 800d92e:	fa05 f000 	lsl.w	r0, r5, r0
 800d932:	4303      	orrs	r3, r0
 800d934:	604b      	str	r3, [r1, #4]
 800d936:	4610      	mov	r0, r2
 800d938:	e79c      	b.n	800d874 <_free_r+0x8c>
 800d93a:	2a54      	cmp	r2, #84	; 0x54
 800d93c:	d803      	bhi.n	800d946 <_free_r+0x15e>
 800d93e:	0b18      	lsrs	r0, r3, #12
 800d940:	306e      	adds	r0, #110	; 0x6e
 800d942:	0042      	lsls	r2, r0, #1
 800d944:	e786      	b.n	800d854 <_free_r+0x6c>
 800d946:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d94a:	d803      	bhi.n	800d954 <_free_r+0x16c>
 800d94c:	0bd8      	lsrs	r0, r3, #15
 800d94e:	3077      	adds	r0, #119	; 0x77
 800d950:	0042      	lsls	r2, r0, #1
 800d952:	e77f      	b.n	800d854 <_free_r+0x6c>
 800d954:	f240 5154 	movw	r1, #1364	; 0x554
 800d958:	428a      	cmp	r2, r1
 800d95a:	d803      	bhi.n	800d964 <_free_r+0x17c>
 800d95c:	0c98      	lsrs	r0, r3, #18
 800d95e:	307c      	adds	r0, #124	; 0x7c
 800d960:	0042      	lsls	r2, r0, #1
 800d962:	e777      	b.n	800d854 <_free_r+0x6c>
 800d964:	22fc      	movs	r2, #252	; 0xfc
 800d966:	207e      	movs	r0, #126	; 0x7e
 800d968:	e774      	b.n	800d854 <_free_r+0x6c>
 800d96a:	bf00      	nop
 800d96c:	200004f0 	.word	0x200004f0
 800d970:	200004f8 	.word	0x200004f8
 800d974:	200008f8 	.word	0x200008f8
 800d978:	2000095c 	.word	0x2000095c

0800d97c <_fwalk>:
 800d97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d980:	4680      	mov	r8, r0
 800d982:	4689      	mov	r9, r1
 800d984:	f7ff fee0 	bl	800d748 <__sfp_lock_acquire>
 800d988:	f518 7838 	adds.w	r8, r8, #736	; 0x2e0
 800d98c:	d04f      	beq.n	800da2e <_fwalk+0xb2>
 800d98e:	f04f 0a00 	mov.w	sl, #0
 800d992:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d996:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d99a:	3d01      	subs	r5, #1
 800d99c:	d43d      	bmi.n	800da1a <_fwalk+0x9e>
 800d99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9a2:	f005 0601 	and.w	r6, r5, #1
 800d9a6:	b13b      	cbz	r3, 800d9b8 <_fwalk+0x3c>
 800d9a8:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	d003      	beq.n	800d9b8 <_fwalk+0x3c>
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	47c8      	blx	r9
 800d9b4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d9b8:	3468      	adds	r4, #104	; 0x68
 800d9ba:	1e6f      	subs	r7, r5, #1
 800d9bc:	b36d      	cbz	r5, 800da1a <_fwalk+0x9e>
 800d9be:	b176      	cbz	r6, 800d9de <_fwalk+0x62>
 800d9c0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800d9c4:	b139      	cbz	r1, 800d9d6 <_fwalk+0x5a>
 800d9c6:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800d9ca:	1c53      	adds	r3, r2, #1
 800d9cc:	d003      	beq.n	800d9d6 <_fwalk+0x5a>
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	47c8      	blx	r9
 800d9d2:	ea4a 0a00 	orr.w	sl, sl, r0
 800d9d6:	3f01      	subs	r7, #1
 800d9d8:	3468      	adds	r4, #104	; 0x68
 800d9da:	1c7b      	adds	r3, r7, #1
 800d9dc:	d01d      	beq.n	800da1a <_fwalk+0x9e>
 800d9de:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800d9e2:	f104 0568 	add.w	r5, r4, #104	; 0x68
 800d9e6:	b13e      	cbz	r6, 800d9f8 <_fwalk+0x7c>
 800d9e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	d002      	beq.n	800d9f8 <_fwalk+0x7c>
 800d9f2:	47c8      	blx	r9
 800d9f4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d9f8:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 800d9fc:	1e7e      	subs	r6, r7, #1
 800d9fe:	b13c      	cbz	r4, 800da10 <_fwalk+0x94>
 800da00:	f9b5 700e 	ldrsh.w	r7, [r5, #14]
 800da04:	1c7b      	adds	r3, r7, #1
 800da06:	4628      	mov	r0, r5
 800da08:	d002      	beq.n	800da10 <_fwalk+0x94>
 800da0a:	47c8      	blx	r9
 800da0c:	ea4a 0a00 	orr.w	sl, sl, r0
 800da10:	f105 0468 	add.w	r4, r5, #104	; 0x68
 800da14:	1e77      	subs	r7, r6, #1
 800da16:	2e00      	cmp	r6, #0
 800da18:	d1e1      	bne.n	800d9de <_fwalk+0x62>
 800da1a:	f8d8 8000 	ldr.w	r8, [r8]
 800da1e:	f1b8 0f00 	cmp.w	r8, #0
 800da22:	d1b6      	bne.n	800d992 <_fwalk+0x16>
 800da24:	f7ff fe92 	bl	800d74c <__sfp_lock_release>
 800da28:	4650      	mov	r0, sl
 800da2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da2e:	46c2      	mov	sl, r8
 800da30:	e7f8      	b.n	800da24 <_fwalk+0xa8>
 800da32:	bf00      	nop

0800da34 <__locale_charset>:
 800da34:	f240 40cc 	movw	r0, #1228	; 0x4cc
 800da38:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop

0800da40 <__locale_mb_cur_max>:
 800da40:	f240 43ec 	movw	r3, #1260	; 0x4ec
 800da44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da48:	6818      	ldr	r0, [r3, #0]
 800da4a:	4770      	bx	lr

0800da4c <_localeconv_r>:
 800da4c:	f240 4094 	movw	r0, #1172	; 0x494
 800da50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop

0800da58 <__smakebuf_r>:
 800da58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da5a:	898b      	ldrh	r3, [r1, #12]
 800da5c:	f003 0202 	and.w	r2, r3, #2
 800da60:	460c      	mov	r4, r1
 800da62:	b211      	sxth	r1, r2
 800da64:	b091      	sub	sp, #68	; 0x44
 800da66:	4605      	mov	r5, r0
 800da68:	2900      	cmp	r1, #0
 800da6a:	d138      	bne.n	800dade <__smakebuf_r+0x86>
 800da6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da70:	2900      	cmp	r1, #0
 800da72:	db16      	blt.n	800daa2 <__smakebuf_r+0x4a>
 800da74:	aa01      	add	r2, sp, #4
 800da76:	f001 fbc9 	bl	800f20c <_fstat_r>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	db10      	blt.n	800daa0 <__smakebuf_r+0x48>
 800da7e:	9b02      	ldr	r3, [sp, #8]
 800da80:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
 800da84:	f5b0 5600 	subs.w	r6, r0, #8192	; 0x2000
 800da88:	4277      	negs	r7, r6
 800da8a:	4177      	adcs	r7, r6
 800da8c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800da90:	d02c      	beq.n	800daec <__smakebuf_r+0x94>
 800da92:	89a3      	ldrh	r3, [r4, #12]
 800da94:	f443 6000 	orr.w	r0, r3, #2048	; 0x800
 800da98:	81a0      	strh	r0, [r4, #12]
 800da9a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800da9e:	e00c      	b.n	800daba <__smakebuf_r+0x62>
 800daa0:	89a3      	ldrh	r3, [r4, #12]
 800daa2:	f003 0680 	and.w	r6, r3, #128	; 0x80
 800daa6:	b237      	sxth	r7, r6
 800daa8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800daac:	2f00      	cmp	r7, #0
 800daae:	bf0c      	ite	eq
 800dab0:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800dab4:	2640      	movne	r6, #64	; 0x40
 800dab6:	81a2      	strh	r2, [r4, #12]
 800dab8:	2700      	movs	r7, #0
 800daba:	4631      	mov	r1, r6
 800dabc:	4628      	mov	r0, r5
 800dabe:	f000 f83f 	bl	800db40 <_malloc_r>
 800dac2:	89a1      	ldrh	r1, [r4, #12]
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d028      	beq.n	800db1a <__smakebuf_r+0xc2>
 800dac8:	4a1b      	ldr	r2, [pc, #108]	; (800db38 <__smakebuf_r+0xe0>)
 800daca:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 800dace:	63ea      	str	r2, [r5, #60]	; 0x3c
 800dad0:	81a3      	strh	r3, [r4, #12]
 800dad2:	6020      	str	r0, [r4, #0]
 800dad4:	6120      	str	r0, [r4, #16]
 800dad6:	6166      	str	r6, [r4, #20]
 800dad8:	b99f      	cbnz	r7, 800db02 <__smakebuf_r+0xaa>
 800dada:	b011      	add	sp, #68	; 0x44
 800dadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dade:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dae2:	2001      	movs	r0, #1
 800dae4:	6022      	str	r2, [r4, #0]
 800dae6:	6122      	str	r2, [r4, #16]
 800dae8:	6160      	str	r0, [r4, #20]
 800daea:	e7f6      	b.n	800dada <__smakebuf_r+0x82>
 800daec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800daee:	4a13      	ldr	r2, [pc, #76]	; (800db3c <__smakebuf_r+0xe4>)
 800daf0:	4291      	cmp	r1, r2
 800daf2:	d1ce      	bne.n	800da92 <__smakebuf_r+0x3a>
 800daf4:	89a1      	ldrh	r1, [r4, #12]
 800daf6:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800dafa:	4331      	orrs	r1, r6
 800dafc:	81a1      	strh	r1, [r4, #12]
 800dafe:	64e6      	str	r6, [r4, #76]	; 0x4c
 800db00:	e7db      	b.n	800daba <__smakebuf_r+0x62>
 800db02:	4628      	mov	r0, r5
 800db04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db08:	f001 fd1e 	bl	800f548 <_isatty_r>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d0e4      	beq.n	800dada <__smakebuf_r+0x82>
 800db10:	89a0      	ldrh	r0, [r4, #12]
 800db12:	f040 0101 	orr.w	r1, r0, #1
 800db16:	81a1      	strh	r1, [r4, #12]
 800db18:	e7df      	b.n	800dada <__smakebuf_r+0x82>
 800db1a:	f401 7300 	and.w	r3, r1, #512	; 0x200
 800db1e:	b21a      	sxth	r2, r3
 800db20:	2a00      	cmp	r2, #0
 800db22:	d1da      	bne.n	800dada <__smakebuf_r+0x82>
 800db24:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800db28:	f041 0102 	orr.w	r1, r1, #2
 800db2c:	2301      	movs	r3, #1
 800db2e:	81a1      	strh	r1, [r4, #12]
 800db30:	6020      	str	r0, [r4, #0]
 800db32:	6120      	str	r0, [r4, #16]
 800db34:	6163      	str	r3, [r4, #20]
 800db36:	e7d0      	b.n	800dada <__smakebuf_r+0x82>
 800db38:	0800d6a1 	.word	0x0800d6a1
 800db3c:	0800edc1 	.word	0x0800edc1

0800db40 <_malloc_r>:
 800db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	f101 050b 	add.w	r5, r1, #11
 800db48:	2d16      	cmp	r5, #22
 800db4a:	b083      	sub	sp, #12
 800db4c:	4606      	mov	r6, r0
 800db4e:	d927      	bls.n	800dba0 <_malloc_r+0x60>
 800db50:	f035 0507 	bics.w	r5, r5, #7
 800db54:	d427      	bmi.n	800dba6 <_malloc_r+0x66>
 800db56:	42a9      	cmp	r1, r5
 800db58:	d825      	bhi.n	800dba6 <_malloc_r+0x66>
 800db5a:	4630      	mov	r0, r6
 800db5c:	f000 fbe0 	bl	800e320 <__malloc_lock>
 800db60:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800db64:	d223      	bcs.n	800dbae <_malloc_r+0x6e>
 800db66:	4fba      	ldr	r7, [pc, #744]	; (800de50 <_malloc_r+0x310>)
 800db68:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 800db6c:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800db70:	68d4      	ldr	r4, [r2, #12]
 800db72:	4294      	cmp	r4, r2
 800db74:	f000 81de 	beq.w	800df34 <_malloc_r+0x3f4>
 800db78:	6863      	ldr	r3, [r4, #4]
 800db7a:	68e2      	ldr	r2, [r4, #12]
 800db7c:	68a1      	ldr	r1, [r4, #8]
 800db7e:	f023 0003 	bic.w	r0, r3, #3
 800db82:	1823      	adds	r3, r4, r0
 800db84:	60ca      	str	r2, [r1, #12]
 800db86:	6858      	ldr	r0, [r3, #4]
 800db88:	6091      	str	r1, [r2, #8]
 800db8a:	f040 0201 	orr.w	r2, r0, #1
 800db8e:	605a      	str	r2, [r3, #4]
 800db90:	4630      	mov	r0, r6
 800db92:	f000 fbc7 	bl	800e324 <__malloc_unlock>
 800db96:	3408      	adds	r4, #8
 800db98:	4620      	mov	r0, r4
 800db9a:	b003      	add	sp, #12
 800db9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dba0:	2510      	movs	r5, #16
 800dba2:	42a9      	cmp	r1, r5
 800dba4:	d9d9      	bls.n	800db5a <_malloc_r+0x1a>
 800dba6:	240c      	movs	r4, #12
 800dba8:	6034      	str	r4, [r6, #0]
 800dbaa:	2400      	movs	r4, #0
 800dbac:	e7f4      	b.n	800db98 <_malloc_r+0x58>
 800dbae:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 800dbb2:	f000 808b 	beq.w	800dccc <_malloc_r+0x18c>
 800dbb6:	f1bc 0f04 	cmp.w	ip, #4
 800dbba:	f200 8155 	bhi.w	800de68 <_malloc_r+0x328>
 800dbbe:	ea4f 1795 	mov.w	r7, r5, lsr #6
 800dbc2:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 800dbc6:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800dbca:	4fa1      	ldr	r7, [pc, #644]	; (800de50 <_malloc_r+0x310>)
 800dbcc:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800dbd0:	68cc      	ldr	r4, [r1, #12]
 800dbd2:	42a1      	cmp	r1, r4
 800dbd4:	d105      	bne.n	800dbe2 <_malloc_r+0xa2>
 800dbd6:	e00c      	b.n	800dbf2 <_malloc_r+0xb2>
 800dbd8:	2a00      	cmp	r2, #0
 800dbda:	da7c      	bge.n	800dcd6 <_malloc_r+0x196>
 800dbdc:	68e4      	ldr	r4, [r4, #12]
 800dbde:	42a1      	cmp	r1, r4
 800dbe0:	d007      	beq.n	800dbf2 <_malloc_r+0xb2>
 800dbe2:	6863      	ldr	r3, [r4, #4]
 800dbe4:	f023 0003 	bic.w	r0, r3, #3
 800dbe8:	1b42      	subs	r2, r0, r5
 800dbea:	2a0f      	cmp	r2, #15
 800dbec:	ddf4      	ble.n	800dbd8 <_malloc_r+0x98>
 800dbee:	f10e 3eff 	add.w	lr, lr, #4294967295
 800dbf2:	f10e 0c01 	add.w	ip, lr, #1
 800dbf6:	4b96      	ldr	r3, [pc, #600]	; (800de50 <_malloc_r+0x310>)
 800dbf8:	693c      	ldr	r4, [r7, #16]
 800dbfa:	f103 0e08 	add.w	lr, r3, #8
 800dbfe:	4574      	cmp	r4, lr
 800dc00:	f000 8175 	beq.w	800deee <_malloc_r+0x3ae>
 800dc04:	6861      	ldr	r1, [r4, #4]
 800dc06:	f021 0103 	bic.w	r1, r1, #3
 800dc0a:	1b4a      	subs	r2, r1, r5
 800dc0c:	2a0f      	cmp	r2, #15
 800dc0e:	f300 815b 	bgt.w	800dec8 <_malloc_r+0x388>
 800dc12:	2a00      	cmp	r2, #0
 800dc14:	f8c3 e014 	str.w	lr, [r3, #20]
 800dc18:	f8c3 e010 	str.w	lr, [r3, #16]
 800dc1c:	da69      	bge.n	800dcf2 <_malloc_r+0x1b2>
 800dc1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dc22:	f080 812f 	bcs.w	800de84 <_malloc_r+0x344>
 800dc26:	08ca      	lsrs	r2, r1, #3
 800dc28:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800dc2c:	f04f 0901 	mov.w	r9, #1
 800dc30:	1092      	asrs	r2, r2, #2
 800dc32:	fa09 f902 	lsl.w	r9, r9, r2
 800dc36:	685a      	ldr	r2, [r3, #4]
 800dc38:	6888      	ldr	r0, [r1, #8]
 800dc3a:	60e1      	str	r1, [r4, #12]
 800dc3c:	ea49 0902 	orr.w	r9, r9, r2
 800dc40:	60a0      	str	r0, [r4, #8]
 800dc42:	f8c3 9004 	str.w	r9, [r3, #4]
 800dc46:	608c      	str	r4, [r1, #8]
 800dc48:	60c4      	str	r4, [r0, #12]
 800dc4a:	2001      	movs	r0, #1
 800dc4c:	ea4f 04ac 	mov.w	r4, ip, asr #2
 800dc50:	fa00 f004 	lsl.w	r0, r0, r4
 800dc54:	4548      	cmp	r0, r9
 800dc56:	d856      	bhi.n	800dd06 <_malloc_r+0x1c6>
 800dc58:	ea19 0f00 	tst.w	r9, r0
 800dc5c:	d107      	bne.n	800dc6e <_malloc_r+0x12e>
 800dc5e:	f02c 0c03 	bic.w	ip, ip, #3
 800dc62:	0040      	lsls	r0, r0, #1
 800dc64:	ea19 0f00 	tst.w	r9, r0
 800dc68:	f10c 0c04 	add.w	ip, ip, #4
 800dc6c:	d0f9      	beq.n	800dc62 <_malloc_r+0x122>
 800dc6e:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
 800dc72:	464c      	mov	r4, r9
 800dc74:	46e0      	mov	r8, ip
 800dc76:	68e3      	ldr	r3, [r4, #12]
 800dc78:	429c      	cmp	r4, r3
 800dc7a:	d107      	bne.n	800dc8c <_malloc_r+0x14c>
 800dc7c:	e13a      	b.n	800def4 <_malloc_r+0x3b4>
 800dc7e:	2a00      	cmp	r2, #0
 800dc80:	f280 8162 	bge.w	800df48 <_malloc_r+0x408>
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	429c      	cmp	r4, r3
 800dc88:	f000 8134 	beq.w	800def4 <_malloc_r+0x3b4>
 800dc8c:	6859      	ldr	r1, [r3, #4]
 800dc8e:	f021 0103 	bic.w	r1, r1, #3
 800dc92:	1b4a      	subs	r2, r1, r5
 800dc94:	2a0f      	cmp	r2, #15
 800dc96:	ddf2      	ble.n	800dc7e <_malloc_r+0x13e>
 800dc98:	461c      	mov	r4, r3
 800dc9a:	1959      	adds	r1, r3, r5
 800dc9c:	68d8      	ldr	r0, [r3, #12]
 800dc9e:	f854 cf08 	ldr.w	ip, [r4, #8]!
 800dca2:	508a      	str	r2, [r1, r2]
 800dca4:	f045 0501 	orr.w	r5, r5, #1
 800dca8:	f042 0201 	orr.w	r2, r2, #1
 800dcac:	f8cc 000c 	str.w	r0, [ip, #12]
 800dcb0:	f8c0 c008 	str.w	ip, [r0, #8]
 800dcb4:	605d      	str	r5, [r3, #4]
 800dcb6:	6179      	str	r1, [r7, #20]
 800dcb8:	6139      	str	r1, [r7, #16]
 800dcba:	f8c1 e00c 	str.w	lr, [r1, #12]
 800dcbe:	f8c1 e008 	str.w	lr, [r1, #8]
 800dcc2:	604a      	str	r2, [r1, #4]
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	f000 fb2d 	bl	800e324 <__malloc_unlock>
 800dcca:	e765      	b.n	800db98 <_malloc_r+0x58>
 800dccc:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 800dcd0:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800dcd4:	e779      	b.n	800dbca <_malloc_r+0x8a>
 800dcd6:	1822      	adds	r2, r4, r0
 800dcd8:	68e3      	ldr	r3, [r4, #12]
 800dcda:	6850      	ldr	r0, [r2, #4]
 800dcdc:	68a1      	ldr	r1, [r4, #8]
 800dcde:	f040 0001 	orr.w	r0, r0, #1
 800dce2:	6050      	str	r0, [r2, #4]
 800dce4:	60cb      	str	r3, [r1, #12]
 800dce6:	6099      	str	r1, [r3, #8]
 800dce8:	4630      	mov	r0, r6
 800dcea:	f000 fb1b 	bl	800e324 <__malloc_unlock>
 800dcee:	3408      	adds	r4, #8
 800dcf0:	e752      	b.n	800db98 <_malloc_r+0x58>
 800dcf2:	1861      	adds	r1, r4, r1
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	684b      	ldr	r3, [r1, #4]
 800dcf8:	f043 0201 	orr.w	r2, r3, #1
 800dcfc:	604a      	str	r2, [r1, #4]
 800dcfe:	f000 fb11 	bl	800e324 <__malloc_unlock>
 800dd02:	3408      	adds	r4, #8
 800dd04:	e748      	b.n	800db98 <_malloc_r+0x58>
 800dd06:	68bc      	ldr	r4, [r7, #8]
 800dd08:	6860      	ldr	r0, [r4, #4]
 800dd0a:	f020 0903 	bic.w	r9, r0, #3
 800dd0e:	45a9      	cmp	r9, r5
 800dd10:	d304      	bcc.n	800dd1c <_malloc_r+0x1dc>
 800dd12:	ebc5 0309 	rsb	r3, r5, r9
 800dd16:	2b0f      	cmp	r3, #15
 800dd18:	f300 808d 	bgt.w	800de36 <_malloc_r+0x2f6>
 800dd1c:	4a4d      	ldr	r2, [pc, #308]	; (800de54 <_malloc_r+0x314>)
 800dd1e:	4b4e      	ldr	r3, [pc, #312]	; (800de58 <_malloc_r+0x318>)
 800dd20:	6811      	ldr	r1, [r2, #0]
 800dd22:	6818      	ldr	r0, [r3, #0]
 800dd24:	3101      	adds	r1, #1
 800dd26:	eb04 0b09 	add.w	fp, r4, r9
 800dd2a:	eb05 0300 	add.w	r3, r5, r0
 800dd2e:	f000 815a 	beq.w	800dfe6 <_malloc_r+0x4a6>
 800dd32:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 800dd36:	300f      	adds	r0, #15
 800dd38:	f420 617f 	bic.w	r1, r0, #4080	; 0xff0
 800dd3c:	f021 0c0f 	bic.w	ip, r1, #15
 800dd40:	4661      	mov	r1, ip
 800dd42:	4630      	mov	r0, r6
 800dd44:	e88d 1004 	stmia.w	sp, {r2, ip}
 800dd48:	f000 fff4 	bl	800ed34 <_sbrk_r>
 800dd4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dd50:	4680      	mov	r8, r0
 800dd52:	e89d 1004 	ldmia.w	sp, {r2, ip}
 800dd56:	f000 8152 	beq.w	800dffe <_malloc_r+0x4be>
 800dd5a:	4583      	cmp	fp, r0
 800dd5c:	f200 810f 	bhi.w	800df7e <_malloc_r+0x43e>
 800dd60:	f8df a100 	ldr.w	sl, [pc, #256]	; 800de64 <_malloc_r+0x324>
 800dd64:	f8da 3000 	ldr.w	r3, [sl]
 800dd68:	45c3      	cmp	fp, r8
 800dd6a:	4463      	add	r3, ip
 800dd6c:	f8ca 3000 	str.w	r3, [sl]
 800dd70:	f000 814a 	beq.w	800e008 <_malloc_r+0x4c8>
 800dd74:	6812      	ldr	r2, [r2, #0]
 800dd76:	3201      	adds	r2, #1
 800dd78:	f000 8157 	beq.w	800e02a <_malloc_r+0x4ea>
 800dd7c:	ebcb 0b08 	rsb	fp, fp, r8
 800dd80:	445b      	add	r3, fp
 800dd82:	f8ca 3000 	str.w	r3, [sl]
 800dd86:	f018 0107 	ands.w	r1, r8, #7
 800dd8a:	f000 810b 	beq.w	800dfa4 <_malloc_r+0x464>
 800dd8e:	f1c1 0008 	rsb	r0, r1, #8
 800dd92:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
 800dd96:	4480      	add	r8, r0
 800dd98:	f103 0208 	add.w	r2, r3, #8
 800dd9c:	eb08 010c 	add.w	r1, r8, ip
 800dda0:	0508      	lsls	r0, r1, #20
 800dda2:	0d03      	lsrs	r3, r0, #20
 800dda4:	ebc3 0b02 	rsb	fp, r3, r2
 800dda8:	4630      	mov	r0, r6
 800ddaa:	4659      	mov	r1, fp
 800ddac:	f000 ffc2 	bl	800ed34 <_sbrk_r>
 800ddb0:	1c43      	adds	r3, r0, #1
 800ddb2:	f000 8146 	beq.w	800e042 <_malloc_r+0x502>
 800ddb6:	ebc8 0200 	rsb	r2, r8, r0
 800ddba:	eb0b 0102 	add.w	r1, fp, r2
 800ddbe:	f041 0001 	orr.w	r0, r1, #1
 800ddc2:	f8da 3000 	ldr.w	r3, [sl]
 800ddc6:	f8c7 8008 	str.w	r8, [r7, #8]
 800ddca:	445b      	add	r3, fp
 800ddcc:	42bc      	cmp	r4, r7
 800ddce:	f8ca 3000 	str.w	r3, [sl]
 800ddd2:	f8c8 0004 	str.w	r0, [r8, #4]
 800ddd6:	d015      	beq.n	800de04 <_malloc_r+0x2c4>
 800ddd8:	f1b9 0f0f 	cmp.w	r9, #15
 800dddc:	f240 80f2 	bls.w	800dfc4 <_malloc_r+0x484>
 800dde0:	6861      	ldr	r1, [r4, #4]
 800dde2:	f1a9 020c 	sub.w	r2, r9, #12
 800dde6:	f022 0207 	bic.w	r2, r2, #7
 800ddea:	18a0      	adds	r0, r4, r2
 800ddec:	f001 0c01 	and.w	ip, r1, #1
 800ddf0:	ea42 0e0c 	orr.w	lr, r2, ip
 800ddf4:	2105      	movs	r1, #5
 800ddf6:	2a0f      	cmp	r2, #15
 800ddf8:	f8c4 e004 	str.w	lr, [r4, #4]
 800ddfc:	6041      	str	r1, [r0, #4]
 800ddfe:	6081      	str	r1, [r0, #8]
 800de00:	f200 8117 	bhi.w	800e032 <_malloc_r+0x4f2>
 800de04:	4a15      	ldr	r2, [pc, #84]	; (800de5c <_malloc_r+0x31c>)
 800de06:	68bc      	ldr	r4, [r7, #8]
 800de08:	6810      	ldr	r0, [r2, #0]
 800de0a:	4283      	cmp	r3, r0
 800de0c:	bf88      	it	hi
 800de0e:	6013      	strhi	r3, [r2, #0]
 800de10:	4a13      	ldr	r2, [pc, #76]	; (800de60 <_malloc_r+0x320>)
 800de12:	6811      	ldr	r1, [r2, #0]
 800de14:	428b      	cmp	r3, r1
 800de16:	bf88      	it	hi
 800de18:	6013      	strhi	r3, [r2, #0]
 800de1a:	6863      	ldr	r3, [r4, #4]
 800de1c:	f023 0003 	bic.w	r0, r3, #3
 800de20:	42a8      	cmp	r0, r5
 800de22:	ebc5 0300 	rsb	r3, r5, r0
 800de26:	d301      	bcc.n	800de2c <_malloc_r+0x2ec>
 800de28:	2b0f      	cmp	r3, #15
 800de2a:	dc04      	bgt.n	800de36 <_malloc_r+0x2f6>
 800de2c:	4630      	mov	r0, r6
 800de2e:	f000 fa79 	bl	800e324 <__malloc_unlock>
 800de32:	2400      	movs	r4, #0
 800de34:	e6b0      	b.n	800db98 <_malloc_r+0x58>
 800de36:	1962      	adds	r2, r4, r5
 800de38:	f043 0101 	orr.w	r1, r3, #1
 800de3c:	f045 0501 	orr.w	r5, r5, #1
 800de40:	6065      	str	r5, [r4, #4]
 800de42:	4630      	mov	r0, r6
 800de44:	6051      	str	r1, [r2, #4]
 800de46:	60ba      	str	r2, [r7, #8]
 800de48:	f000 fa6c 	bl	800e324 <__malloc_unlock>
 800de4c:	3408      	adds	r4, #8
 800de4e:	e6a3      	b.n	800db98 <_malloc_r+0x58>
 800de50:	200004f0 	.word	0x200004f0
 800de54:	200008fc 	.word	0x200008fc
 800de58:	2000095c 	.word	0x2000095c
 800de5c:	20000958 	.word	0x20000958
 800de60:	20000954 	.word	0x20000954
 800de64:	20000960 	.word	0x20000960
 800de68:	f1bc 0f14 	cmp.w	ip, #20
 800de6c:	d97b      	bls.n	800df66 <_malloc_r+0x426>
 800de6e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800de72:	f200 808d 	bhi.w	800df90 <_malloc_r+0x450>
 800de76:	ea4f 3415 	mov.w	r4, r5, lsr #12
 800de7a:	f104 0e6e 	add.w	lr, r4, #110	; 0x6e
 800de7e:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800de82:	e6a2      	b.n	800dbca <_malloc_r+0x8a>
 800de84:	0a48      	lsrs	r0, r1, #9
 800de86:	2804      	cmp	r0, #4
 800de88:	d972      	bls.n	800df70 <_malloc_r+0x430>
 800de8a:	2814      	cmp	r0, #20
 800de8c:	f200 80ae 	bhi.w	800dfec <_malloc_r+0x4ac>
 800de90:	f100 095b 	add.w	r9, r0, #91	; 0x5b
 800de94:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800de98:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 800de9c:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800e090 <_malloc_r+0x550>
 800dea0:	6883      	ldr	r3, [r0, #8]
 800dea2:	4283      	cmp	r3, r0
 800dea4:	f000 8081 	beq.w	800dfaa <_malloc_r+0x46a>
 800dea8:	685a      	ldr	r2, [r3, #4]
 800deaa:	f022 0203 	bic.w	r2, r2, #3
 800deae:	4291      	cmp	r1, r2
 800deb0:	d202      	bcs.n	800deb8 <_malloc_r+0x378>
 800deb2:	689b      	ldr	r3, [r3, #8]
 800deb4:	4298      	cmp	r0, r3
 800deb6:	d1f7      	bne.n	800dea8 <_malloc_r+0x368>
 800deb8:	68da      	ldr	r2, [r3, #12]
 800deba:	f8d7 9004 	ldr.w	r9, [r7, #4]
 800debe:	60e2      	str	r2, [r4, #12]
 800dec0:	60a3      	str	r3, [r4, #8]
 800dec2:	60dc      	str	r4, [r3, #12]
 800dec4:	6094      	str	r4, [r2, #8]
 800dec6:	e6c0      	b.n	800dc4a <_malloc_r+0x10a>
 800dec8:	1961      	adds	r1, r4, r5
 800deca:	f042 0001 	orr.w	r0, r2, #1
 800dece:	f045 0501 	orr.w	r5, r5, #1
 800ded2:	6065      	str	r5, [r4, #4]
 800ded4:	6159      	str	r1, [r3, #20]
 800ded6:	6119      	str	r1, [r3, #16]
 800ded8:	6048      	str	r0, [r1, #4]
 800deda:	f8c1 e00c 	str.w	lr, [r1, #12]
 800dede:	f8c1 e008 	str.w	lr, [r1, #8]
 800dee2:	508a      	str	r2, [r1, r2]
 800dee4:	4630      	mov	r0, r6
 800dee6:	f000 fa1d 	bl	800e324 <__malloc_unlock>
 800deea:	3408      	adds	r4, #8
 800deec:	e654      	b.n	800db98 <_malloc_r+0x58>
 800deee:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800def2:	e6aa      	b.n	800dc4a <_malloc_r+0x10a>
 800def4:	f108 0801 	add.w	r8, r8, #1
 800def8:	3408      	adds	r4, #8
 800defa:	f018 0f03 	tst.w	r8, #3
 800defe:	f47f aeba 	bne.w	800dc76 <_malloc_r+0x136>
 800df02:	4649      	mov	r1, r9
 800df04:	f01c 0f03 	tst.w	ip, #3
 800df08:	f1a1 0408 	sub.w	r4, r1, #8
 800df0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800df10:	f000 80b0 	beq.w	800e074 <_malloc_r+0x534>
 800df14:	6809      	ldr	r1, [r1, #0]
 800df16:	42a1      	cmp	r1, r4
 800df18:	d0f4      	beq.n	800df04 <_malloc_r+0x3c4>
 800df1a:	687c      	ldr	r4, [r7, #4]
 800df1c:	0040      	lsls	r0, r0, #1
 800df1e:	42a0      	cmp	r0, r4
 800df20:	f63f aef1 	bhi.w	800dd06 <_malloc_r+0x1c6>
 800df24:	2800      	cmp	r0, #0
 800df26:	f43f aeee 	beq.w	800dd06 <_malloc_r+0x1c6>
 800df2a:	4204      	tst	r4, r0
 800df2c:	f000 80a7 	beq.w	800e07e <_malloc_r+0x53e>
 800df30:	46c4      	mov	ip, r8
 800df32:	e69c      	b.n	800dc6e <_malloc_r+0x12e>
 800df34:	f104 0308 	add.w	r3, r4, #8
 800df38:	6964      	ldr	r4, [r4, #20]
 800df3a:	42a3      	cmp	r3, r4
 800df3c:	bf08      	it	eq
 800df3e:	f10c 0c02 	addeq.w	ip, ip, #2
 800df42:	f43f ae58 	beq.w	800dbf6 <_malloc_r+0xb6>
 800df46:	e617      	b.n	800db78 <_malloc_r+0x38>
 800df48:	1859      	adds	r1, r3, r1
 800df4a:	461c      	mov	r4, r3
 800df4c:	6848      	ldr	r0, [r1, #4]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800df54:	f040 0001 	orr.w	r0, r0, #1
 800df58:	6048      	str	r0, [r1, #4]
 800df5a:	60d3      	str	r3, [r2, #12]
 800df5c:	609a      	str	r2, [r3, #8]
 800df5e:	4630      	mov	r0, r6
 800df60:	f000 f9e0 	bl	800e324 <__malloc_unlock>
 800df64:	e618      	b.n	800db98 <_malloc_r+0x58>
 800df66:	f10c 0e5b 	add.w	lr, ip, #91	; 0x5b
 800df6a:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800df6e:	e62c      	b.n	800dbca <_malloc_r+0x8a>
 800df70:	ea4f 1891 	mov.w	r8, r1, lsr #6
 800df74:	f108 0938 	add.w	r9, r8, #56	; 0x38
 800df78:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800df7c:	e78c      	b.n	800de98 <_malloc_r+0x358>
 800df7e:	42bc      	cmp	r4, r7
 800df80:	f43f aeee 	beq.w	800dd60 <_malloc_r+0x220>
 800df84:	4c42      	ldr	r4, [pc, #264]	; (800e090 <_malloc_r+0x550>)
 800df86:	68a4      	ldr	r4, [r4, #8]
 800df88:	6862      	ldr	r2, [r4, #4]
 800df8a:	f022 0003 	bic.w	r0, r2, #3
 800df8e:	e747      	b.n	800de20 <_malloc_r+0x2e0>
 800df90:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800df94:	d81c      	bhi.n	800dfd0 <_malloc_r+0x490>
 800df96:	ea4f 32d5 	mov.w	r2, r5, lsr #15
 800df9a:	f102 0e77 	add.w	lr, r2, #119	; 0x77
 800df9e:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800dfa2:	e612      	b.n	800dbca <_malloc_r+0x8a>
 800dfa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dfa8:	e6f8      	b.n	800dd9c <_malloc_r+0x25c>
 800dfaa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dfae:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	fa01 f202 	lsl.w	r2, r1, r2
 800dfb8:	ea42 0900 	orr.w	r9, r2, r0
 800dfbc:	f8c8 9004 	str.w	r9, [r8, #4]
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	e77c      	b.n	800debe <_malloc_r+0x37e>
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	f8c8 2004 	str.w	r2, [r8, #4]
 800dfca:	4644      	mov	r4, r8
 800dfcc:	2000      	movs	r0, #0
 800dfce:	e727      	b.n	800de20 <_malloc_r+0x2e0>
 800dfd0:	f240 5354 	movw	r3, #1364	; 0x554
 800dfd4:	459c      	cmp	ip, r3
 800dfd6:	d824      	bhi.n	800e022 <_malloc_r+0x4e2>
 800dfd8:	ea4f 4095 	mov.w	r0, r5, lsr #18
 800dfdc:	f100 0e7c 	add.w	lr, r0, #124	; 0x7c
 800dfe0:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800dfe4:	e5f1      	b.n	800dbca <_malloc_r+0x8a>
 800dfe6:	f103 0c10 	add.w	ip, r3, #16
 800dfea:	e6a9      	b.n	800dd40 <_malloc_r+0x200>
 800dfec:	2854      	cmp	r0, #84	; 0x54
 800dfee:	d82c      	bhi.n	800e04a <_malloc_r+0x50a>
 800dff0:	ea4f 3211 	mov.w	r2, r1, lsr #12
 800dff4:	f102 096e 	add.w	r9, r2, #110	; 0x6e
 800dff8:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800dffc:	e74c      	b.n	800de98 <_malloc_r+0x358>
 800dffe:	68bc      	ldr	r4, [r7, #8]
 800e000:	6861      	ldr	r1, [r4, #4]
 800e002:	f021 0003 	bic.w	r0, r1, #3
 800e006:	e70b      	b.n	800de20 <_malloc_r+0x2e0>
 800e008:	ea4f 500b 	mov.w	r0, fp, lsl #20
 800e00c:	0d01      	lsrs	r1, r0, #20
 800e00e:	2900      	cmp	r1, #0
 800e010:	f47f aeb0 	bne.w	800dd74 <_malloc_r+0x234>
 800e014:	68b8      	ldr	r0, [r7, #8]
 800e016:	eb0c 0109 	add.w	r1, ip, r9
 800e01a:	f041 0401 	orr.w	r4, r1, #1
 800e01e:	6044      	str	r4, [r0, #4]
 800e020:	e6f0      	b.n	800de04 <_malloc_r+0x2c4>
 800e022:	21fc      	movs	r1, #252	; 0xfc
 800e024:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 800e028:	e5cf      	b.n	800dbca <_malloc_r+0x8a>
 800e02a:	481a      	ldr	r0, [pc, #104]	; (800e094 <_malloc_r+0x554>)
 800e02c:	f8c0 8000 	str.w	r8, [r0]
 800e030:	e6a9      	b.n	800dd86 <_malloc_r+0x246>
 800e032:	f104 0108 	add.w	r1, r4, #8
 800e036:	4c18      	ldr	r4, [pc, #96]	; (800e098 <_malloc_r+0x558>)
 800e038:	4630      	mov	r0, r6
 800e03a:	f7ff fbd5 	bl	800d7e8 <_free_r>
 800e03e:	6823      	ldr	r3, [r4, #0]
 800e040:	e6e0      	b.n	800de04 <_malloc_r+0x2c4>
 800e042:	2001      	movs	r0, #1
 800e044:	f04f 0b00 	mov.w	fp, #0
 800e048:	e6bb      	b.n	800ddc2 <_malloc_r+0x282>
 800e04a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800e04e:	d806      	bhi.n	800e05e <_malloc_r+0x51e>
 800e050:	ea4f 33d1 	mov.w	r3, r1, lsr #15
 800e054:	f103 0977 	add.w	r9, r3, #119	; 0x77
 800e058:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800e05c:	e71c      	b.n	800de98 <_malloc_r+0x358>
 800e05e:	f240 5354 	movw	r3, #1364	; 0x554
 800e062:	4298      	cmp	r0, r3
 800e064:	d80f      	bhi.n	800e086 <_malloc_r+0x546>
 800e066:	ea4f 4091 	mov.w	r0, r1, lsr #18
 800e06a:	f100 097c 	add.w	r9, r0, #124	; 0x7c
 800e06e:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800e072:	e711      	b.n	800de98 <_malloc_r+0x358>
 800e074:	687c      	ldr	r4, [r7, #4]
 800e076:	ea24 0400 	bic.w	r4, r4, r0
 800e07a:	607c      	str	r4, [r7, #4]
 800e07c:	e74e      	b.n	800df1c <_malloc_r+0x3dc>
 800e07e:	0040      	lsls	r0, r0, #1
 800e080:	f108 0804 	add.w	r8, r8, #4
 800e084:	e751      	b.n	800df2a <_malloc_r+0x3ea>
 800e086:	22fc      	movs	r2, #252	; 0xfc
 800e088:	f04f 097e 	mov.w	r9, #126	; 0x7e
 800e08c:	e704      	b.n	800de98 <_malloc_r+0x358>
 800e08e:	bf00      	nop
 800e090:	200004f0 	.word	0x200004f0
 800e094:	200008fc 	.word	0x200008fc
 800e098:	20000960 	.word	0x20000960

0800e09c <memchr>:
 800e09c:	0783      	lsls	r3, r0, #30
 800e09e:	b4f0      	push	{r4, r5, r6, r7}
 800e0a0:	b2c9      	uxtb	r1, r1
 800e0a2:	f000 8096 	beq.w	800e1d2 <memchr+0x136>
 800e0a6:	1e53      	subs	r3, r2, #1
 800e0a8:	2a00      	cmp	r2, #0
 800e0aa:	f000 8094 	beq.w	800e1d6 <memchr+0x13a>
 800e0ae:	7802      	ldrb	r2, [r0, #0]
 800e0b0:	428a      	cmp	r2, r1
 800e0b2:	d00b      	beq.n	800e0cc <memchr+0x30>
 800e0b4:	1c42      	adds	r2, r0, #1
 800e0b6:	07d8      	lsls	r0, r3, #31
 800e0b8:	d51a      	bpl.n	800e0f0 <memchr+0x54>
 800e0ba:	f012 0f03 	tst.w	r2, #3
 800e0be:	4610      	mov	r0, r2
 800e0c0:	d01c      	beq.n	800e0fc <memchr+0x60>
 800e0c2:	7814      	ldrb	r4, [r2, #0]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	3201      	adds	r2, #1
 800e0c8:	428c      	cmp	r4, r1
 800e0ca:	d111      	bne.n	800e0f0 <memchr+0x54>
 800e0cc:	bcf0      	pop	{r4, r5, r6, r7}
 800e0ce:	4770      	bx	lr
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d07c      	beq.n	800e1ce <memchr+0x132>
 800e0d4:	7812      	ldrb	r2, [r2, #0]
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	428a      	cmp	r2, r1
 800e0da:	d0f7      	beq.n	800e0cc <memchr+0x30>
 800e0dc:	f014 0f03 	tst.w	r4, #3
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f104 0201 	add.w	r2, r4, #1
 800e0e6:	d009      	beq.n	800e0fc <memchr+0x60>
 800e0e8:	7824      	ldrb	r4, [r4, #0]
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	428c      	cmp	r4, r1
 800e0ee:	d0ed      	beq.n	800e0cc <memchr+0x30>
 800e0f0:	f012 0f03 	tst.w	r2, #3
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	f102 0401 	add.w	r4, r2, #1
 800e0fa:	d1e9      	bne.n	800e0d0 <memchr+0x34>
 800e0fc:	2b03      	cmp	r3, #3
 800e0fe:	d93f      	bls.n	800e180 <memchr+0xe4>
 800e100:	6804      	ldr	r4, [r0, #0]
 800e102:	ea41 2501 	orr.w	r5, r1, r1, lsl #8
 800e106:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800e10a:	ea85 0704 	eor.w	r7, r5, r4
 800e10e:	f1a7 3201 	sub.w	r2, r7, #16843009	; 0x1010101
 800e112:	ea22 0207 	bic.w	r2, r2, r7
 800e116:	1f1e      	subs	r6, r3, #4
 800e118:	1d04      	adds	r4, r0, #4
 800e11a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800e11e:	f3c6 0780 	ubfx	r7, r6, #2, #1
 800e122:	d12d      	bne.n	800e180 <memchr+0xe4>
 800e124:	2e03      	cmp	r6, #3
 800e126:	4633      	mov	r3, r6
 800e128:	d929      	bls.n	800e17e <memchr+0xe2>
 800e12a:	b167      	cbz	r7, 800e146 <memchr+0xaa>
 800e12c:	4620      	mov	r0, r4
 800e12e:	3404      	adds	r4, #4
 800e130:	6806      	ldr	r6, [r0, #0]
 800e132:	ea85 0206 	eor.w	r2, r5, r6
 800e136:	f1a2 3601 	sub.w	r6, r2, #16843009	; 0x1010101
 800e13a:	ea26 0202 	bic.w	r2, r6, r2
 800e13e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800e142:	d019      	beq.n	800e178 <memchr+0xdc>
 800e144:	e01c      	b.n	800e180 <memchr+0xe4>
 800e146:	1d26      	adds	r6, r4, #4
 800e148:	4620      	mov	r0, r4
 800e14a:	6824      	ldr	r4, [r4, #0]
 800e14c:	ea85 0204 	eor.w	r2, r5, r4
 800e150:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 800e154:	ea24 0202 	bic.w	r2, r4, r2
 800e158:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800e15c:	d110      	bne.n	800e180 <memchr+0xe4>
 800e15e:	6834      	ldr	r4, [r6, #0]
 800e160:	ea85 0204 	eor.w	r2, r5, r4
 800e164:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 800e168:	ea24 0202 	bic.w	r2, r4, r2
 800e16c:	3b04      	subs	r3, #4
 800e16e:	1d34      	adds	r4, r6, #4
 800e170:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800e174:	4630      	mov	r0, r6
 800e176:	d103      	bne.n	800e180 <memchr+0xe4>
 800e178:	3b04      	subs	r3, #4
 800e17a:	2b03      	cmp	r3, #3
 800e17c:	d8e3      	bhi.n	800e146 <memchr+0xaa>
 800e17e:	4620      	mov	r0, r4
 800e180:	1e5d      	subs	r5, r3, #1
 800e182:	b323      	cbz	r3, 800e1ce <memchr+0x132>
 800e184:	7803      	ldrb	r3, [r0, #0]
 800e186:	428b      	cmp	r3, r1
 800e188:	d0a0      	beq.n	800e0cc <memchr+0x30>
 800e18a:	1c43      	adds	r3, r0, #1
 800e18c:	2200      	movs	r2, #0
 800e18e:	07e8      	lsls	r0, r5, #31
 800e190:	d514      	bpl.n	800e1bc <memchr+0x120>
 800e192:	4618      	mov	r0, r3
 800e194:	2201      	movs	r2, #1
 800e196:	7804      	ldrb	r4, [r0, #0]
 800e198:	3301      	adds	r3, #1
 800e19a:	428c      	cmp	r4, r1
 800e19c:	d096      	beq.n	800e0cc <memchr+0x30>
 800e19e:	4295      	cmp	r5, r2
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f103 0401 	add.w	r4, r3, #1
 800e1a6:	f102 0202 	add.w	r2, r2, #2
 800e1aa:	d00e      	beq.n	800e1ca <memchr+0x12e>
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	428b      	cmp	r3, r1
 800e1b0:	d08c      	beq.n	800e0cc <memchr+0x30>
 800e1b2:	1c63      	adds	r3, r4, #1
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	7824      	ldrb	r4, [r4, #0]
 800e1b8:	428c      	cmp	r4, r1
 800e1ba:	d087      	beq.n	800e0cc <memchr+0x30>
 800e1bc:	4295      	cmp	r5, r2
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f103 0401 	add.w	r4, r3, #1
 800e1c4:	f102 0202 	add.w	r2, r2, #2
 800e1c8:	d1f0      	bne.n	800e1ac <memchr+0x110>
 800e1ca:	2000      	movs	r0, #0
 800e1cc:	e77e      	b.n	800e0cc <memchr+0x30>
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	e77c      	b.n	800e0cc <memchr+0x30>
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	e792      	b.n	800e0fc <memchr+0x60>
 800e1d6:	4610      	mov	r0, r2
 800e1d8:	e778      	b.n	800e0cc <memchr+0x30>
 800e1da:	bf00      	nop

0800e1dc <memcpy>:
 800e1dc:	2a0f      	cmp	r2, #15
 800e1de:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e1e2:	f240 8095 	bls.w	800e310 <memcpy+0x134>
 800e1e6:	ea41 0300 	orr.w	r3, r1, r0
 800e1ea:	079b      	lsls	r3, r3, #30
 800e1ec:	f040 8092 	bne.w	800e314 <memcpy+0x138>
 800e1f0:	680c      	ldr	r4, [r1, #0]
 800e1f2:	6004      	str	r4, [r0, #0]
 800e1f4:	684d      	ldr	r5, [r1, #4]
 800e1f6:	6045      	str	r5, [r0, #4]
 800e1f8:	688e      	ldr	r6, [r1, #8]
 800e1fa:	f1a2 0310 	sub.w	r3, r2, #16
 800e1fe:	6086      	str	r6, [r0, #8]
 800e200:	68cc      	ldr	r4, [r1, #12]
 800e202:	461d      	mov	r5, r3
 800e204:	2d0f      	cmp	r5, #15
 800e206:	60c4      	str	r4, [r0, #12]
 800e208:	f3c3 1600 	ubfx	r6, r3, #4, #1
 800e20c:	f101 0410 	add.w	r4, r1, #16
 800e210:	f100 0310 	add.w	r3, r0, #16
 800e214:	d922      	bls.n	800e25c <memcpy+0x80>
 800e216:	b166      	cbz	r6, 800e232 <memcpy+0x56>
 800e218:	6826      	ldr	r6, [r4, #0]
 800e21a:	601e      	str	r6, [r3, #0]
 800e21c:	6866      	ldr	r6, [r4, #4]
 800e21e:	605e      	str	r6, [r3, #4]
 800e220:	68a6      	ldr	r6, [r4, #8]
 800e222:	609e      	str	r6, [r3, #8]
 800e224:	68e6      	ldr	r6, [r4, #12]
 800e226:	3d10      	subs	r5, #16
 800e228:	60de      	str	r6, [r3, #12]
 800e22a:	3410      	adds	r4, #16
 800e22c:	3310      	adds	r3, #16
 800e22e:	2d0f      	cmp	r5, #15
 800e230:	d914      	bls.n	800e25c <memcpy+0x80>
 800e232:	6826      	ldr	r6, [r4, #0]
 800e234:	601e      	str	r6, [r3, #0]
 800e236:	6866      	ldr	r6, [r4, #4]
 800e238:	605e      	str	r6, [r3, #4]
 800e23a:	68a6      	ldr	r6, [r4, #8]
 800e23c:	609e      	str	r6, [r3, #8]
 800e23e:	68e6      	ldr	r6, [r4, #12]
 800e240:	60de      	str	r6, [r3, #12]
 800e242:	6926      	ldr	r6, [r4, #16]
 800e244:	611e      	str	r6, [r3, #16]
 800e246:	6966      	ldr	r6, [r4, #20]
 800e248:	615e      	str	r6, [r3, #20]
 800e24a:	69a6      	ldr	r6, [r4, #24]
 800e24c:	619e      	str	r6, [r3, #24]
 800e24e:	69e6      	ldr	r6, [r4, #28]
 800e250:	3d20      	subs	r5, #32
 800e252:	61de      	str	r6, [r3, #28]
 800e254:	3420      	adds	r4, #32
 800e256:	3320      	adds	r3, #32
 800e258:	2d0f      	cmp	r5, #15
 800e25a:	d8ea      	bhi.n	800e232 <memcpy+0x56>
 800e25c:	f1a2 0310 	sub.w	r3, r2, #16
 800e260:	f023 040f 	bic.w	r4, r3, #15
 800e264:	f002 030f 	and.w	r3, r2, #15
 800e268:	3410      	adds	r4, #16
 800e26a:	2b03      	cmp	r3, #3
 800e26c:	eb00 0804 	add.w	r8, r0, r4
 800e270:	4421      	add	r1, r4
 800e272:	d951      	bls.n	800e318 <memcpy+0x13c>
 800e274:	f1a3 0904 	sub.w	r9, r3, #4
 800e278:	460b      	mov	r3, r1
 800e27a:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800e27e:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 800e282:	f853 6b04 	ldr.w	r6, [r3], #4
 800e286:	ebc1 050c 	rsb	r5, r1, ip
 800e28a:	4644      	mov	r4, r8
 800e28c:	f10c 0c04 	add.w	ip, ip, #4
 800e290:	4563      	cmp	r3, ip
 800e292:	f844 6b04 	str.w	r6, [r4], #4
 800e296:	f3c5 0580 	ubfx	r5, r5, #2, #1
 800e29a:	d012      	beq.n	800e2c2 <memcpy+0xe6>
 800e29c:	b12d      	cbz	r5, 800e2aa <memcpy+0xce>
 800e29e:	f853 5b04 	ldr.w	r5, [r3], #4
 800e2a2:	4563      	cmp	r3, ip
 800e2a4:	f844 5b04 	str.w	r5, [r4], #4
 800e2a8:	d00b      	beq.n	800e2c2 <memcpy+0xe6>
 800e2aa:	461e      	mov	r6, r3
 800e2ac:	4625      	mov	r5, r4
 800e2ae:	f856 7b04 	ldr.w	r7, [r6], #4
 800e2b2:	f845 7b04 	str.w	r7, [r5], #4
 800e2b6:	685f      	ldr	r7, [r3, #4]
 800e2b8:	1d33      	adds	r3, r6, #4
 800e2ba:	6067      	str	r7, [r4, #4]
 800e2bc:	1d2c      	adds	r4, r5, #4
 800e2be:	4563      	cmp	r3, ip
 800e2c0:	d1f3      	bne.n	800e2aa <memcpy+0xce>
 800e2c2:	f109 0301 	add.w	r3, r9, #1
 800e2c6:	009c      	lsls	r4, r3, #2
 800e2c8:	1909      	adds	r1, r1, r4
 800e2ca:	f002 0203 	and.w	r2, r2, #3
 800e2ce:	4444      	add	r4, r8
 800e2d0:	b1da      	cbz	r2, 800e30a <memcpy+0x12e>
 800e2d2:	4623      	mov	r3, r4
 800e2d4:	780d      	ldrb	r5, [r1, #0]
 800e2d6:	f803 5b01 	strb.w	r5, [r3], #1
 800e2da:	18a2      	adds	r2, r4, r2
 800e2dc:	43e4      	mvns	r4, r4
 800e2de:	1914      	adds	r4, r2, r4
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	f004 0401 	and.w	r4, r4, #1
 800e2e6:	d010      	beq.n	800e30a <memcpy+0x12e>
 800e2e8:	b12c      	cbz	r4, 800e2f6 <memcpy+0x11a>
 800e2ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e2ee:	f803 4b01 	strb.w	r4, [r3], #1
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d009      	beq.n	800e30a <memcpy+0x12e>
 800e2f6:	784d      	ldrb	r5, [r1, #1]
 800e2f8:	461c      	mov	r4, r3
 800e2fa:	f804 5b01 	strb.w	r5, [r4], #1
 800e2fe:	788d      	ldrb	r5, [r1, #2]
 800e300:	705d      	strb	r5, [r3, #1]
 800e302:	1c63      	adds	r3, r4, #1
 800e304:	3102      	adds	r1, #2
 800e306:	4293      	cmp	r3, r2
 800e308:	d1f5      	bne.n	800e2f6 <memcpy+0x11a>
 800e30a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e30e:	4770      	bx	lr
 800e310:	4604      	mov	r4, r0
 800e312:	e7dd      	b.n	800e2d0 <memcpy+0xf4>
 800e314:	4604      	mov	r4, r0
 800e316:	e7dc      	b.n	800e2d2 <memcpy+0xf6>
 800e318:	4644      	mov	r4, r8
 800e31a:	461a      	mov	r2, r3
 800e31c:	e7d8      	b.n	800e2d0 <memcpy+0xf4>
 800e31e:	bf00      	nop

0800e320 <__malloc_lock>:
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop

0800e324 <__malloc_unlock>:
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop

0800e328 <_Balloc>:
 800e328:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e32a:	b570      	push	{r4, r5, r6, lr}
 800e32c:	4605      	mov	r5, r0
 800e32e:	460c      	mov	r4, r1
 800e330:	b14b      	cbz	r3, 800e346 <_Balloc+0x1e>
 800e332:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e336:	b180      	cbz	r0, 800e35a <_Balloc+0x32>
 800e338:	6801      	ldr	r1, [r0, #0]
 800e33a:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
 800e33e:	2300      	movs	r3, #0
 800e340:	6103      	str	r3, [r0, #16]
 800e342:	60c3      	str	r3, [r0, #12]
 800e344:	bd70      	pop	{r4, r5, r6, pc}
 800e346:	2104      	movs	r1, #4
 800e348:	2221      	movs	r2, #33	; 0x21
 800e34a:	f000 fdf3 	bl	800ef34 <_calloc_r>
 800e34e:	4603      	mov	r3, r0
 800e350:	64e8      	str	r0, [r5, #76]	; 0x4c
 800e352:	2800      	cmp	r0, #0
 800e354:	d1ed      	bne.n	800e332 <_Balloc+0xa>
 800e356:	2000      	movs	r0, #0
 800e358:	bd70      	pop	{r4, r5, r6, pc}
 800e35a:	2101      	movs	r1, #1
 800e35c:	fa01 f604 	lsl.w	r6, r1, r4
 800e360:	1d72      	adds	r2, r6, #5
 800e362:	4628      	mov	r0, r5
 800e364:	0092      	lsls	r2, r2, #2
 800e366:	f000 fde5 	bl	800ef34 <_calloc_r>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d0f3      	beq.n	800e356 <_Balloc+0x2e>
 800e36e:	6044      	str	r4, [r0, #4]
 800e370:	6086      	str	r6, [r0, #8]
 800e372:	e7e4      	b.n	800e33e <_Balloc+0x16>

0800e374 <_Bfree>:
 800e374:	b131      	cbz	r1, 800e384 <_Bfree+0x10>
 800e376:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e378:	684a      	ldr	r2, [r1, #4]
 800e37a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e37e:	6008      	str	r0, [r1, #0]
 800e380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e384:	4770      	bx	lr
 800e386:	bf00      	nop

0800e388 <__multadd>:
 800e388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38c:	460e      	mov	r6, r1
 800e38e:	6949      	ldr	r1, [r1, #20]
 800e390:	6937      	ldr	r7, [r6, #16]
 800e392:	b28c      	uxth	r4, r1
 800e394:	0c0d      	lsrs	r5, r1, #16
 800e396:	fb02 3304 	mla	r3, r2, r4, r3
 800e39a:	fb02 f105 	mul.w	r1, r2, r5
 800e39e:	eb01 4513 	add.w	r5, r1, r3, lsr #16
 800e3a2:	f106 0418 	add.w	r4, r6, #24
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	eb03 4305 	add.w	r3, r3, r5, lsl #16
 800e3ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	1e79      	subs	r1, r7, #1
 800e3b4:	0c2d      	lsrs	r5, r5, #16
 800e3b6:	429f      	cmp	r7, r3
 800e3b8:	4680      	mov	r8, r0
 800e3ba:	f001 0001 	and.w	r0, r1, #1
 800e3be:	dd39      	ble.n	800e434 <__multadd+0xac>
 800e3c0:	b198      	cbz	r0, 800e3ea <__multadd+0x62>
 800e3c2:	6824      	ldr	r4, [r4, #0]
 800e3c4:	b2a3      	uxth	r3, r4
 800e3c6:	0c21      	lsrs	r1, r4, #16
 800e3c8:	fb02 5503 	mla	r5, r2, r3, r5
 800e3cc:	fb02 f101 	mul.w	r1, r2, r1
 800e3d0:	b2ab      	uxth	r3, r5
 800e3d2:	eb01 4015 	add.w	r0, r1, r5, lsr #16
 800e3d6:	eb03 4100 	add.w	r1, r3, r0, lsl #16
 800e3da:	f106 041c 	add.w	r4, r6, #28
 800e3de:	2302      	movs	r3, #2
 800e3e0:	0c05      	lsrs	r5, r0, #16
 800e3e2:	429f      	cmp	r7, r3
 800e3e4:	f844 1c04 	str.w	r1, [r4, #-4]
 800e3e8:	dd24      	ble.n	800e434 <__multadd+0xac>
 800e3ea:	6820      	ldr	r0, [r4, #0]
 800e3ec:	b281      	uxth	r1, r0
 800e3ee:	0c00      	lsrs	r0, r0, #16
 800e3f0:	fb02 5101 	mla	r1, r2, r1, r5
 800e3f4:	fb02 f000 	mul.w	r0, r2, r0
 800e3f8:	4625      	mov	r5, r4
 800e3fa:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 800e3fe:	b289      	uxth	r1, r1
 800e400:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e404:	f845 1b04 	str.w	r1, [r5], #4
 800e408:	6864      	ldr	r4, [r4, #4]
 800e40a:	fa1f fc84 	uxth.w	ip, r4
 800e40e:	0c21      	lsrs	r1, r4, #16
 800e410:	fb02 fc0c 	mul.w	ip, r2, ip
 800e414:	eb0c 4010 	add.w	r0, ip, r0, lsr #16
 800e418:	fb02 f101 	mul.w	r1, r2, r1
 800e41c:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 800e420:	462c      	mov	r4, r5
 800e422:	3302      	adds	r3, #2
 800e424:	b285      	uxth	r5, r0
 800e426:	eb05 4001 	add.w	r0, r5, r1, lsl #16
 800e42a:	0c0d      	lsrs	r5, r1, #16
 800e42c:	429f      	cmp	r7, r3
 800e42e:	f844 0b04 	str.w	r0, [r4], #4
 800e432:	dcda      	bgt.n	800e3ea <__multadd+0x62>
 800e434:	b13d      	cbz	r5, 800e446 <__multadd+0xbe>
 800e436:	68b2      	ldr	r2, [r6, #8]
 800e438:	4297      	cmp	r7, r2
 800e43a:	da07      	bge.n	800e44c <__multadd+0xc4>
 800e43c:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 800e440:	3701      	adds	r7, #1
 800e442:	6155      	str	r5, [r2, #20]
 800e444:	6137      	str	r7, [r6, #16]
 800e446:	4630      	mov	r0, r6
 800e448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e44c:	6873      	ldr	r3, [r6, #4]
 800e44e:	4640      	mov	r0, r8
 800e450:	1c59      	adds	r1, r3, #1
 800e452:	f7ff ff69 	bl	800e328 <_Balloc>
 800e456:	6931      	ldr	r1, [r6, #16]
 800e458:	1c8a      	adds	r2, r1, #2
 800e45a:	4604      	mov	r4, r0
 800e45c:	f106 010c 	add.w	r1, r6, #12
 800e460:	f100 000c 	add.w	r0, r0, #12
 800e464:	0092      	lsls	r2, r2, #2
 800e466:	f7ff feb9 	bl	800e1dc <memcpy>
 800e46a:	6870      	ldr	r0, [r6, #4]
 800e46c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800e470:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800e474:	6031      	str	r1, [r6, #0]
 800e476:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800e47a:	4626      	mov	r6, r4
 800e47c:	e7de      	b.n	800e43c <__multadd+0xb4>
 800e47e:	bf00      	nop

0800e480 <__hi0bits>:
 800e480:	0c02      	lsrs	r2, r0, #16
 800e482:	4603      	mov	r3, r0
 800e484:	d116      	bne.n	800e4b4 <__hi0bits+0x34>
 800e486:	0403      	lsls	r3, r0, #16
 800e488:	2010      	movs	r0, #16
 800e48a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e48e:	d101      	bne.n	800e494 <__hi0bits+0x14>
 800e490:	3008      	adds	r0, #8
 800e492:	021b      	lsls	r3, r3, #8
 800e494:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e498:	d101      	bne.n	800e49e <__hi0bits+0x1e>
 800e49a:	3004      	adds	r0, #4
 800e49c:	011b      	lsls	r3, r3, #4
 800e49e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e4a2:	d101      	bne.n	800e4a8 <__hi0bits+0x28>
 800e4a4:	3002      	adds	r0, #2
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	db02      	blt.n	800e4b2 <__hi0bits+0x32>
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	d403      	bmi.n	800e4b8 <__hi0bits+0x38>
 800e4b0:	2020      	movs	r0, #32
 800e4b2:	4770      	bx	lr
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	e7e8      	b.n	800e48a <__hi0bits+0xa>
 800e4b8:	3001      	adds	r0, #1
 800e4ba:	4770      	bx	lr

0800e4bc <__lo0bits>:
 800e4bc:	6803      	ldr	r3, [r0, #0]
 800e4be:	4602      	mov	r2, r0
 800e4c0:	f013 0007 	ands.w	r0, r3, #7
 800e4c4:	d007      	beq.n	800e4d6 <__lo0bits+0x1a>
 800e4c6:	07d9      	lsls	r1, r3, #31
 800e4c8:	d41f      	bmi.n	800e50a <__lo0bits+0x4e>
 800e4ca:	0798      	lsls	r0, r3, #30
 800e4cc:	d41f      	bmi.n	800e50e <__lo0bits+0x52>
 800e4ce:	0898      	lsrs	r0, r3, #2
 800e4d0:	6010      	str	r0, [r2, #0]
 800e4d2:	2002      	movs	r0, #2
 800e4d4:	4770      	bx	lr
 800e4d6:	b299      	uxth	r1, r3
 800e4d8:	b909      	cbnz	r1, 800e4de <__lo0bits+0x22>
 800e4da:	0c1b      	lsrs	r3, r3, #16
 800e4dc:	2010      	movs	r0, #16
 800e4de:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e4e2:	d101      	bne.n	800e4e8 <__lo0bits+0x2c>
 800e4e4:	3008      	adds	r0, #8
 800e4e6:	0a1b      	lsrs	r3, r3, #8
 800e4e8:	0719      	lsls	r1, r3, #28
 800e4ea:	d101      	bne.n	800e4f0 <__lo0bits+0x34>
 800e4ec:	3004      	adds	r0, #4
 800e4ee:	091b      	lsrs	r3, r3, #4
 800e4f0:	0799      	lsls	r1, r3, #30
 800e4f2:	d101      	bne.n	800e4f8 <__lo0bits+0x3c>
 800e4f4:	3002      	adds	r0, #2
 800e4f6:	089b      	lsrs	r3, r3, #2
 800e4f8:	07d9      	lsls	r1, r3, #31
 800e4fa:	d404      	bmi.n	800e506 <__lo0bits+0x4a>
 800e4fc:	085b      	lsrs	r3, r3, #1
 800e4fe:	d101      	bne.n	800e504 <__lo0bits+0x48>
 800e500:	2020      	movs	r0, #32
 800e502:	4770      	bx	lr
 800e504:	3001      	adds	r0, #1
 800e506:	6013      	str	r3, [r2, #0]
 800e508:	4770      	bx	lr
 800e50a:	2000      	movs	r0, #0
 800e50c:	4770      	bx	lr
 800e50e:	0859      	lsrs	r1, r3, #1
 800e510:	6011      	str	r1, [r2, #0]
 800e512:	2001      	movs	r0, #1
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop

0800e518 <__i2b>:
 800e518:	b510      	push	{r4, lr}
 800e51a:	460c      	mov	r4, r1
 800e51c:	2101      	movs	r1, #1
 800e51e:	f7ff ff03 	bl	800e328 <_Balloc>
 800e522:	2201      	movs	r2, #1
 800e524:	6144      	str	r4, [r0, #20]
 800e526:	6102      	str	r2, [r0, #16]
 800e528:	bd10      	pop	{r4, pc}
 800e52a:	bf00      	nop

0800e52c <__multiply>:
 800e52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e530:	690c      	ldr	r4, [r1, #16]
 800e532:	6917      	ldr	r7, [r2, #16]
 800e534:	42bc      	cmp	r4, r7
 800e536:	b085      	sub	sp, #20
 800e538:	460e      	mov	r6, r1
 800e53a:	4690      	mov	r8, r2
 800e53c:	da04      	bge.n	800e548 <__multiply+0x1c>
 800e53e:	4622      	mov	r2, r4
 800e540:	4646      	mov	r6, r8
 800e542:	463c      	mov	r4, r7
 800e544:	4688      	mov	r8, r1
 800e546:	4617      	mov	r7, r2
 800e548:	68b3      	ldr	r3, [r6, #8]
 800e54a:	6871      	ldr	r1, [r6, #4]
 800e54c:	19e2      	adds	r2, r4, r7
 800e54e:	429a      	cmp	r2, r3
 800e550:	bfc8      	it	gt
 800e552:	3101      	addgt	r1, #1
 800e554:	9201      	str	r2, [sp, #4]
 800e556:	f7ff fee7 	bl	800e328 <_Balloc>
 800e55a:	9901      	ldr	r1, [sp, #4]
 800e55c:	9003      	str	r0, [sp, #12]
 800e55e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800e562:	3314      	adds	r3, #20
 800e564:	3014      	adds	r0, #20
 800e566:	4298      	cmp	r0, r3
 800e568:	9302      	str	r3, [sp, #8]
 800e56a:	d21a      	bcs.n	800e5a2 <__multiply+0x76>
 800e56c:	9902      	ldr	r1, [sp, #8]
 800e56e:	9b03      	ldr	r3, [sp, #12]
 800e570:	43c2      	mvns	r2, r0
 800e572:	188a      	adds	r2, r1, r2
 800e574:	9902      	ldr	r1, [sp, #8]
 800e576:	3318      	adds	r3, #24
 800e578:	2500      	movs	r5, #0
 800e57a:	4299      	cmp	r1, r3
 800e57c:	6005      	str	r5, [r0, #0]
 800e57e:	f3c2 0080 	ubfx	r0, r2, #2, #1
 800e582:	d90e      	bls.n	800e5a2 <__multiply+0x76>
 800e584:	b128      	cbz	r0, 800e592 <__multiply+0x66>
 800e586:	601d      	str	r5, [r3, #0]
 800e588:	9b03      	ldr	r3, [sp, #12]
 800e58a:	9a02      	ldr	r2, [sp, #8]
 800e58c:	331c      	adds	r3, #28
 800e58e:	429a      	cmp	r2, r3
 800e590:	d907      	bls.n	800e5a2 <__multiply+0x76>
 800e592:	9802      	ldr	r0, [sp, #8]
 800e594:	4619      	mov	r1, r3
 800e596:	f841 5b04 	str.w	r5, [r1], #4
 800e59a:	605d      	str	r5, [r3, #4]
 800e59c:	1d0b      	adds	r3, r1, #4
 800e59e:	4298      	cmp	r0, r3
 800e5a0:	d8f8      	bhi.n	800e594 <__multiply+0x68>
 800e5a2:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 800e5a6:	3314      	adds	r3, #20
 800e5a8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800e5ac:	f108 0714 	add.w	r7, r8, #20
 800e5b0:	3414      	adds	r4, #20
 800e5b2:	429f      	cmp	r7, r3
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	f106 0c14 	add.w	ip, r6, #20
 800e5ba:	f080 80f8 	bcs.w	800e7ae <__multiply+0x282>
 800e5be:	9803      	ldr	r0, [sp, #12]
 800e5c0:	3018      	adds	r0, #24
 800e5c2:	f857 3b04 	ldr.w	r3, [r7], #4
 800e5c6:	b29a      	uxth	r2, r3
 800e5c8:	2a00      	cmp	r2, #0
 800e5ca:	d06e      	beq.n	800e6aa <__multiply+0x17e>
 800e5cc:	4661      	mov	r1, ip
 800e5ce:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800e5d2:	f851 6b04 	ldr.w	r6, [r1], #4
 800e5d6:	b2ab      	uxth	r3, r5
 800e5d8:	fa1f f886 	uxth.w	r8, r6
 800e5dc:	0c2d      	lsrs	r5, r5, #16
 800e5de:	0c36      	lsrs	r6, r6, #16
 800e5e0:	fb02 3308 	mla	r3, r2, r8, r3
 800e5e4:	fb02 5606 	mla	r6, r2, r6, r5
 800e5e8:	eb06 4613 	add.w	r6, r6, r3, lsr #16
 800e5ec:	ea6f 050c 	mvn.w	r5, ip
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800e5f6:	1965      	adds	r5, r4, r5
 800e5f8:	0c36      	lsrs	r6, r6, #16
 800e5fa:	428c      	cmp	r4, r1
 800e5fc:	f840 3c04 	str.w	r3, [r0, #-4]
 800e600:	f3c5 0580 	ubfx	r5, r5, #2, #1
 800e604:	4603      	mov	r3, r0
 800e606:	d94d      	bls.n	800e6a4 <__multiply+0x178>
 800e608:	b1cd      	cbz	r5, 800e63e <__multiply+0x112>
 800e60a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800e60e:	6803      	ldr	r3, [r0, #0]
 800e610:	fa1f f985 	uxth.w	r9, r5
 800e614:	fa1f f883 	uxth.w	r8, r3
 800e618:	0c2d      	lsrs	r5, r5, #16
 800e61a:	0c1b      	lsrs	r3, r3, #16
 800e61c:	fb02 8809 	mla	r8, r2, r9, r8
 800e620:	4446      	add	r6, r8
 800e622:	fb02 3505 	mla	r5, r2, r5, r3
 800e626:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 800e62a:	4603      	mov	r3, r0
 800e62c:	b2b6      	uxth	r6, r6
 800e62e:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800e632:	3104      	adds	r1, #4
 800e634:	f843 6b04 	str.w	r6, [r3], #4
 800e638:	0c2e      	lsrs	r6, r5, #16
 800e63a:	428c      	cmp	r4, r1
 800e63c:	d932      	bls.n	800e6a4 <__multiply+0x178>
 800e63e:	460d      	mov	r5, r1
 800e640:	f8d3 e000 	ldr.w	lr, [r3]
 800e644:	f855 9b04 	ldr.w	r9, [r5], #4
 800e648:	fa1f fa8e 	uxth.w	sl, lr
 800e64c:	fa1f fb89 	uxth.w	fp, r9
 800e650:	fb02 aa0b 	mla	sl, r2, fp, sl
 800e654:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800e658:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800e65c:	4456      	add	r6, sl
 800e65e:	fb02 8e09 	mla	lr, r2, r9, r8
 800e662:	eb0e 4916 	add.w	r9, lr, r6, lsr #16
 800e666:	4698      	mov	r8, r3
 800e668:	b2b6      	uxth	r6, r6
 800e66a:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800e66e:	f848 6b04 	str.w	r6, [r8], #4
 800e672:	684e      	ldr	r6, [r1, #4]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	fa1f fa86 	uxth.w	sl, r6
 800e67a:	b299      	uxth	r1, r3
 800e67c:	0c36      	lsrs	r6, r6, #16
 800e67e:	0c1b      	lsrs	r3, r3, #16
 800e680:	fb02 110a 	mla	r1, r2, sl, r1
 800e684:	eb01 4119 	add.w	r1, r1, r9, lsr #16
 800e688:	fb02 3606 	mla	r6, r2, r6, r3
 800e68c:	eb06 4611 	add.w	r6, r6, r1, lsr #16
 800e690:	b289      	uxth	r1, r1
 800e692:	4643      	mov	r3, r8
 800e694:	ea41 4806 	orr.w	r8, r1, r6, lsl #16
 800e698:	1d29      	adds	r1, r5, #4
 800e69a:	0c36      	lsrs	r6, r6, #16
 800e69c:	428c      	cmp	r4, r1
 800e69e:	f843 8b04 	str.w	r8, [r3], #4
 800e6a2:	d8cc      	bhi.n	800e63e <__multiply+0x112>
 800e6a4:	601e      	str	r6, [r3, #0]
 800e6a6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800e6aa:	0c1a      	lsrs	r2, r3, #16
 800e6ac:	d07a      	beq.n	800e7a4 <__multiply+0x278>
 800e6ae:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800e6b2:	f8bc 5000 	ldrh.w	r5, [ip]
 800e6b6:	0c31      	lsrs	r1, r6, #16
 800e6b8:	fb02 1505 	mla	r5, r2, r5, r1
 800e6bc:	b2b3      	uxth	r3, r6
 800e6be:	ea43 4605 	orr.w	r6, r3, r5, lsl #16
 800e6c2:	46e1      	mov	r9, ip
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	f840 6c04 	str.w	r6, [r0, #-4]
 800e6ca:	f859 1b04 	ldr.w	r1, [r9], #4
 800e6ce:	f853 6b04 	ldr.w	r6, [r3], #4
 800e6d2:	0c09      	lsrs	r1, r1, #16
 800e6d4:	fa1f fa86 	uxth.w	sl, r6
 800e6d8:	fb02 a101 	mla	r1, r2, r1, sl
 800e6dc:	ea6f 0e0c 	mvn.w	lr, ip
 800e6e0:	eb04 080e 	add.w	r8, r4, lr
 800e6e4:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 800e6e8:	454c      	cmp	r4, r9
 800e6ea:	f3c8 0a80 	ubfx	sl, r8, #2, #1
 800e6ee:	4605      	mov	r5, r0
 800e6f0:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800e6f4:	d955      	bls.n	800e7a2 <__multiply+0x276>
 800e6f6:	f1ba 0f00 	cmp.w	sl, #0
 800e6fa:	d01b      	beq.n	800e734 <__multiply+0x208>
 800e6fc:	f8bc 5004 	ldrh.w	r5, [ip, #4]
 800e700:	0c36      	lsrs	r6, r6, #16
 800e702:	fb02 6505 	mla	r5, r2, r5, r6
 800e706:	eb05 0e08 	add.w	lr, r5, r8
 800e70a:	b289      	uxth	r1, r1
 800e70c:	ea41 460e 	orr.w	r6, r1, lr, lsl #16
 800e710:	f843 6c04 	str.w	r6, [r3, #-4]
 800e714:	f859 1b04 	ldr.w	r1, [r9], #4
 800e718:	461d      	mov	r5, r3
 800e71a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e71e:	0c09      	lsrs	r1, r1, #16
 800e720:	fa1f fa86 	uxth.w	sl, r6
 800e724:	fb02 a101 	mla	r1, r2, r1, sl
 800e728:	eb01 411e 	add.w	r1, r1, lr, lsr #16
 800e72c:	454c      	cmp	r4, r9
 800e72e:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800e732:	d936      	bls.n	800e7a2 <__multiply+0x276>
 800e734:	f8b9 b000 	ldrh.w	fp, [r9]
 800e738:	0c35      	lsrs	r5, r6, #16
 800e73a:	fb02 5a0b 	mla	sl, r2, fp, r5
 800e73e:	44c2      	add	sl, r8
 800e740:	b289      	uxth	r1, r1
 800e742:	461d      	mov	r5, r3
 800e744:	464e      	mov	r6, r9
 800e746:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e74a:	f843 1c04 	str.w	r1, [r3, #-4]
 800e74e:	f856 eb04 	ldr.w	lr, [r6], #4
 800e752:	f855 1b04 	ldr.w	r1, [r5], #4
 800e756:	f8d9 8004 	ldr.w	r8, [r9, #4]
 800e75a:	fa1f fb81 	uxth.w	fp, r1
 800e75e:	ea4f 491e 	mov.w	r9, lr, lsr #16
 800e762:	0c09      	lsrs	r1, r1, #16
 800e764:	fb02 be09 	mla	lr, r2, r9, fp
 800e768:	fa1f f888 	uxth.w	r8, r8
 800e76c:	eb0e 491a 	add.w	r9, lr, sl, lsr #16
 800e770:	fb02 1e08 	mla	lr, r2, r8, r1
 800e774:	eb0e 4819 	add.w	r8, lr, r9, lsr #16
 800e778:	fa1f f189 	uxth.w	r1, r9
 800e77c:	46b1      	mov	r9, r6
 800e77e:	ea41 4608 	orr.w	r6, r1, r8, lsl #16
 800e782:	f845 6c04 	str.w	r6, [r5, #-4]
 800e786:	f859 1b04 	ldr.w	r1, [r9], #4
 800e78a:	685e      	ldr	r6, [r3, #4]
 800e78c:	0c09      	lsrs	r1, r1, #16
 800e78e:	b2b3      	uxth	r3, r6
 800e790:	fb02 3301 	mla	r3, r2, r1, r3
 800e794:	eb03 4118 	add.w	r1, r3, r8, lsr #16
 800e798:	1d2b      	adds	r3, r5, #4
 800e79a:	454c      	cmp	r4, r9
 800e79c:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800e7a0:	d8c8      	bhi.n	800e734 <__multiply+0x208>
 800e7a2:	6029      	str	r1, [r5, #0]
 800e7a4:	9a00      	ldr	r2, [sp, #0]
 800e7a6:	3004      	adds	r0, #4
 800e7a8:	42ba      	cmp	r2, r7
 800e7aa:	f63f af0a 	bhi.w	800e5c2 <__multiply+0x96>
 800e7ae:	9901      	ldr	r1, [sp, #4]
 800e7b0:	2900      	cmp	r1, #0
 800e7b2:	dd1a      	ble.n	800e7ea <__multiply+0x2be>
 800e7b4:	9b02      	ldr	r3, [sp, #8]
 800e7b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e7ba:	3b04      	subs	r3, #4
 800e7bc:	b9a8      	cbnz	r0, 800e7ea <__multiply+0x2be>
 800e7be:	9901      	ldr	r1, [sp, #4]
 800e7c0:	1e4a      	subs	r2, r1, #1
 800e7c2:	07d0      	lsls	r0, r2, #31
 800e7c4:	d517      	bpl.n	800e7f6 <__multiply+0x2ca>
 800e7c6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800e7ca:	9201      	str	r2, [sp, #4]
 800e7cc:	b968      	cbnz	r0, 800e7ea <__multiply+0x2be>
 800e7ce:	9a01      	ldr	r2, [sp, #4]
 800e7d0:	e008      	b.n	800e7e4 <__multiply+0x2b8>
 800e7d2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e7d6:	3b04      	subs	r3, #4
 800e7d8:	b931      	cbnz	r1, 800e7e8 <__multiply+0x2bc>
 800e7da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e7de:	3a01      	subs	r2, #1
 800e7e0:	3b04      	subs	r3, #4
 800e7e2:	b908      	cbnz	r0, 800e7e8 <__multiply+0x2bc>
 800e7e4:	3a01      	subs	r2, #1
 800e7e6:	d1f4      	bne.n	800e7d2 <__multiply+0x2a6>
 800e7e8:	9201      	str	r2, [sp, #4]
 800e7ea:	9901      	ldr	r1, [sp, #4]
 800e7ec:	9803      	ldr	r0, [sp, #12]
 800e7ee:	6101      	str	r1, [r0, #16]
 800e7f0:	b005      	add	sp, #20
 800e7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f6:	460a      	mov	r2, r1
 800e7f8:	e7f4      	b.n	800e7e4 <__multiply+0x2b8>
 800e7fa:	bf00      	nop

0800e7fc <__pow5mult>:
 800e7fc:	f012 0303 	ands.w	r3, r2, #3
 800e800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e804:	4614      	mov	r4, r2
 800e806:	4680      	mov	r8, r0
 800e808:	460f      	mov	r7, r1
 800e80a:	d12b      	bne.n	800e864 <__pow5mult+0x68>
 800e80c:	10a4      	asrs	r4, r4, #2
 800e80e:	d01b      	beq.n	800e848 <__pow5mult+0x4c>
 800e810:	f8d8 6048 	ldr.w	r6, [r8, #72]	; 0x48
 800e814:	b92e      	cbnz	r6, 800e822 <__pow5mult+0x26>
 800e816:	e02e      	b.n	800e876 <__pow5mult+0x7a>
 800e818:	1064      	asrs	r4, r4, #1
 800e81a:	d015      	beq.n	800e848 <__pow5mult+0x4c>
 800e81c:	6835      	ldr	r5, [r6, #0]
 800e81e:	b1b5      	cbz	r5, 800e84e <__pow5mult+0x52>
 800e820:	462e      	mov	r6, r5
 800e822:	07e3      	lsls	r3, r4, #31
 800e824:	d5f8      	bpl.n	800e818 <__pow5mult+0x1c>
 800e826:	4639      	mov	r1, r7
 800e828:	4632      	mov	r2, r6
 800e82a:	4640      	mov	r0, r8
 800e82c:	f7ff fe7e 	bl	800e52c <__multiply>
 800e830:	b1b7      	cbz	r7, 800e860 <__pow5mult+0x64>
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800e838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e83c:	1064      	asrs	r4, r4, #1
 800e83e:	6039      	str	r1, [r7, #0]
 800e840:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800e844:	4607      	mov	r7, r0
 800e846:	d1e9      	bne.n	800e81c <__pow5mult+0x20>
 800e848:	4638      	mov	r0, r7
 800e84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e84e:	4631      	mov	r1, r6
 800e850:	4632      	mov	r2, r6
 800e852:	4640      	mov	r0, r8
 800e854:	f7ff fe6a 	bl	800e52c <__multiply>
 800e858:	6030      	str	r0, [r6, #0]
 800e85a:	6005      	str	r5, [r0, #0]
 800e85c:	4606      	mov	r6, r0
 800e85e:	e7e0      	b.n	800e822 <__pow5mult+0x26>
 800e860:	4607      	mov	r7, r0
 800e862:	e7d9      	b.n	800e818 <__pow5mult+0x1c>
 800e864:	1e5d      	subs	r5, r3, #1
 800e866:	4a09      	ldr	r2, [pc, #36]	; (800e88c <__pow5mult+0x90>)
 800e868:	2300      	movs	r3, #0
 800e86a:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800e86e:	f7ff fd8b 	bl	800e388 <__multadd>
 800e872:	4607      	mov	r7, r0
 800e874:	e7ca      	b.n	800e80c <__pow5mult+0x10>
 800e876:	4640      	mov	r0, r8
 800e878:	f240 2171 	movw	r1, #625	; 0x271
 800e87c:	f7ff fe4c 	bl	800e518 <__i2b>
 800e880:	4606      	mov	r6, r0
 800e882:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
 800e886:	2000      	movs	r0, #0
 800e888:	6030      	str	r0, [r6, #0]
 800e88a:	e7ca      	b.n	800e822 <__pow5mult+0x26>
 800e88c:	0800fd54 	.word	0x0800fd54

0800e890 <__lshift>:
 800e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	4617      	mov	r7, r2
 800e896:	690a      	ldr	r2, [r1, #16]
 800e898:	688b      	ldr	r3, [r1, #8]
 800e89a:	117e      	asrs	r6, r7, #5
 800e89c:	b083      	sub	sp, #12
 800e89e:	18b4      	adds	r4, r6, r2
 800e8a0:	9401      	str	r4, [sp, #4]
 800e8a2:	3401      	adds	r4, #1
 800e8a4:	429c      	cmp	r4, r3
 800e8a6:	460d      	mov	r5, r1
 800e8a8:	4680      	mov	r8, r0
 800e8aa:	6849      	ldr	r1, [r1, #4]
 800e8ac:	dd03      	ble.n	800e8b6 <__lshift+0x26>
 800e8ae:	005b      	lsls	r3, r3, #1
 800e8b0:	3101      	adds	r1, #1
 800e8b2:	429c      	cmp	r4, r3
 800e8b4:	dcfb      	bgt.n	800e8ae <__lshift+0x1e>
 800e8b6:	4640      	mov	r0, r8
 800e8b8:	f7ff fd36 	bl	800e328 <_Balloc>
 800e8bc:	2e00      	cmp	r6, #0
 800e8be:	f100 0114 	add.w	r1, r0, #20
 800e8c2:	dd1f      	ble.n	800e904 <__lshift+0x74>
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	1e72      	subs	r2, r6, #1
 800e8c8:	f04f 0c00 	mov.w	ip, #0
 800e8cc:	42b3      	cmp	r3, r6
 800e8ce:	f8c1 c000 	str.w	ip, [r1]
 800e8d2:	ea02 0103 	and.w	r1, r2, r3
 800e8d6:	f100 0218 	add.w	r2, r0, #24
 800e8da:	d010      	beq.n	800e8fe <__lshift+0x6e>
 800e8dc:	b131      	cbz	r1, 800e8ec <__lshift+0x5c>
 800e8de:	2302      	movs	r3, #2
 800e8e0:	42b3      	cmp	r3, r6
 800e8e2:	f8c2 c000 	str.w	ip, [r2]
 800e8e6:	f100 021c 	add.w	r2, r0, #28
 800e8ea:	d008      	beq.n	800e8fe <__lshift+0x6e>
 800e8ec:	4611      	mov	r1, r2
 800e8ee:	3302      	adds	r3, #2
 800e8f0:	f841 cb04 	str.w	ip, [r1], #4
 800e8f4:	f8c2 c004 	str.w	ip, [r2, #4]
 800e8f8:	1d0a      	adds	r2, r1, #4
 800e8fa:	42b3      	cmp	r3, r6
 800e8fc:	d1f6      	bne.n	800e8ec <__lshift+0x5c>
 800e8fe:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800e902:	3114      	adds	r1, #20
 800e904:	692e      	ldr	r6, [r5, #16]
 800e906:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800e90a:	3614      	adds	r6, #20
 800e90c:	f017 071f 	ands.w	r7, r7, #31
 800e910:	f105 0e14 	add.w	lr, r5, #20
 800e914:	9700      	str	r7, [sp, #0]
 800e916:	d05b      	beq.n	800e9d0 <__lshift+0x140>
 800e918:	f8de 2000 	ldr.w	r2, [lr]
 800e91c:	fa02 f207 	lsl.w	r2, r2, r7
 800e920:	f105 0318 	add.w	r3, r5, #24
 800e924:	f841 2b04 	str.w	r2, [r1], #4
 800e928:	ea6f 090e 	mvn.w	r9, lr
 800e92c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800e930:	eb06 0a09 	add.w	sl, r6, r9
 800e934:	f1c7 0e20 	rsb	lr, r7, #32
 800e938:	429e      	cmp	r6, r3
 800e93a:	f3ca 0a80 	ubfx	sl, sl, #2, #1
 800e93e:	fa22 f90e 	lsr.w	r9, r2, lr
 800e942:	d931      	bls.n	800e9a8 <__lshift+0x118>
 800e944:	f1ba 0f00 	cmp.w	sl, #0
 800e948:	d00f      	beq.n	800e96a <__lshift+0xda>
 800e94a:	681f      	ldr	r7, [r3, #0]
 800e94c:	9b00      	ldr	r3, [sp, #0]
 800e94e:	fa07 f703 	lsl.w	r7, r7, r3
 800e952:	ea49 0207 	orr.w	r2, r9, r7
 800e956:	f105 031c 	add.w	r3, r5, #28
 800e95a:	f841 2b04 	str.w	r2, [r1], #4
 800e95e:	f853 7c04 	ldr.w	r7, [r3, #-4]
 800e962:	429e      	cmp	r6, r3
 800e964:	fa27 f90e 	lsr.w	r9, r7, lr
 800e968:	d91e      	bls.n	800e9a8 <__lshift+0x118>
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	f8dd b000 	ldr.w	fp, [sp]
 800e970:	460f      	mov	r7, r1
 800e972:	fa02 fc0b 	lsl.w	ip, r2, fp
 800e976:	ea49 090c 	orr.w	r9, r9, ip
 800e97a:	f847 9b04 	str.w	r9, [r7], #4
 800e97e:	461a      	mov	r2, r3
 800e980:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800e984:	f852 3b04 	ldr.w	r3, [r2], #4
 800e988:	fa0a fc0b 	lsl.w	ip, sl, fp
 800e98c:	fa23 fb0e 	lsr.w	fp, r3, lr
 800e990:	ea4b 0a0c 	orr.w	sl, fp, ip
 800e994:	4613      	mov	r3, r2
 800e996:	f8c1 a004 	str.w	sl, [r1, #4]
 800e99a:	f853 9b04 	ldr.w	r9, [r3], #4
 800e99e:	1d39      	adds	r1, r7, #4
 800e9a0:	429e      	cmp	r6, r3
 800e9a2:	fa29 f90e 	lsr.w	r9, r9, lr
 800e9a6:	d8e0      	bhi.n	800e96a <__lshift+0xda>
 800e9a8:	f8c1 9000 	str.w	r9, [r1]
 800e9ac:	f1b9 0f00 	cmp.w	r9, #0
 800e9b0:	d001      	beq.n	800e9b6 <__lshift+0x126>
 800e9b2:	9c01      	ldr	r4, [sp, #4]
 800e9b4:	3402      	adds	r4, #2
 800e9b6:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800e9ba:	686a      	ldr	r2, [r5, #4]
 800e9bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e9c0:	3c01      	subs	r4, #1
 800e9c2:	6104      	str	r4, [r0, #16]
 800e9c4:	6029      	str	r1, [r5, #0]
 800e9c6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e9ca:	b003      	add	sp, #12
 800e9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d0:	ea6f 030e 	mvn.w	r3, lr
 800e9d4:	f8de 7000 	ldr.w	r7, [lr]
 800e9d8:	f105 0218 	add.w	r2, r5, #24
 800e9dc:	18f3      	adds	r3, r6, r3
 800e9de:	4296      	cmp	r6, r2
 800e9e0:	f841 7b04 	str.w	r7, [r1], #4
 800e9e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e9e8:	d9e5      	bls.n	800e9b6 <__lshift+0x126>
 800e9ea:	b133      	cbz	r3, 800e9fa <__lshift+0x16a>
 800e9ec:	6813      	ldr	r3, [r2, #0]
 800e9ee:	f105 021c 	add.w	r2, r5, #28
 800e9f2:	4296      	cmp	r6, r2
 800e9f4:	f841 3b04 	str.w	r3, [r1], #4
 800e9f8:	d9dd      	bls.n	800e9b6 <__lshift+0x126>
 800e9fa:	4694      	mov	ip, r2
 800e9fc:	460f      	mov	r7, r1
 800e9fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ea02:	f847 3b04 	str.w	r3, [r7], #4
 800ea06:	6853      	ldr	r3, [r2, #4]
 800ea08:	f10c 0204 	add.w	r2, ip, #4
 800ea0c:	604b      	str	r3, [r1, #4]
 800ea0e:	1d39      	adds	r1, r7, #4
 800ea10:	4296      	cmp	r6, r2
 800ea12:	d8f2      	bhi.n	800e9fa <__lshift+0x16a>
 800ea14:	e7cf      	b.n	800e9b6 <__lshift+0x126>
 800ea16:	bf00      	nop

0800ea18 <__mcmp>:
 800ea18:	b4f0      	push	{r4, r5, r6, r7}
 800ea1a:	690b      	ldr	r3, [r1, #16]
 800ea1c:	4605      	mov	r5, r0
 800ea1e:	6900      	ldr	r0, [r0, #16]
 800ea20:	1ac0      	subs	r0, r0, r3
 800ea22:	d124      	bne.n	800ea6e <__mcmp+0x56>
 800ea24:	1d1a      	adds	r2, r3, #4
 800ea26:	0094      	lsls	r4, r2, #2
 800ea28:	192b      	adds	r3, r5, r4
 800ea2a:	1d1e      	adds	r6, r3, #4
 800ea2c:	1909      	adds	r1, r1, r4
 800ea2e:	3514      	adds	r5, #20
 800ea30:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800ea34:	680a      	ldr	r2, [r1, #0]
 800ea36:	43ef      	mvns	r7, r5
 800ea38:	19be      	adds	r6, r7, r6
 800ea3a:	4294      	cmp	r4, r2
 800ea3c:	f3c6 0680 	ubfx	r6, r6, #2, #1
 800ea40:	d110      	bne.n	800ea64 <__mcmp+0x4c>
 800ea42:	429d      	cmp	r5, r3
 800ea44:	d213      	bcs.n	800ea6e <__mcmp+0x56>
 800ea46:	b13e      	cbz	r6, 800ea58 <__mcmp+0x40>
 800ea48:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800ea4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea50:	4294      	cmp	r4, r2
 800ea52:	d107      	bne.n	800ea64 <__mcmp+0x4c>
 800ea54:	429d      	cmp	r5, r3
 800ea56:	d20a      	bcs.n	800ea6e <__mcmp+0x56>
 800ea58:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800ea5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea60:	4294      	cmp	r4, r2
 800ea62:	d0f1      	beq.n	800ea48 <__mcmp+0x30>
 800ea64:	42a2      	cmp	r2, r4
 800ea66:	bf94      	ite	ls
 800ea68:	2001      	movls	r0, #1
 800ea6a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea6e:	bcf0      	pop	{r4, r5, r6, r7}
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop

0800ea74 <__mdiff>:
 800ea74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea78:	460f      	mov	r7, r1
 800ea7a:	4605      	mov	r5, r0
 800ea7c:	4611      	mov	r1, r2
 800ea7e:	4638      	mov	r0, r7
 800ea80:	4693      	mov	fp, r2
 800ea82:	f7ff ffc9 	bl	800ea18 <__mcmp>
 800ea86:	1e04      	subs	r4, r0, #0
 800ea88:	f000 80f1 	beq.w	800ec6e <__mdiff+0x1fa>
 800ea8c:	f2c0 80ea 	blt.w	800ec64 <__mdiff+0x1f0>
 800ea90:	2400      	movs	r4, #0
 800ea92:	4628      	mov	r0, r5
 800ea94:	6879      	ldr	r1, [r7, #4]
 800ea96:	f7ff fc47 	bl	800e328 <_Balloc>
 800ea9a:	f8db 6014 	ldr.w	r6, [fp, #20]
 800ea9e:	697a      	ldr	r2, [r7, #20]
 800eaa0:	f8db 5010 	ldr.w	r5, [fp, #16]
 800eaa4:	60c4      	str	r4, [r0, #12]
 800eaa6:	fa1f fc82 	uxth.w	ip, r2
 800eaaa:	ea4f 4a16 	mov.w	sl, r6, lsr #16
 800eaae:	b2b4      	uxth	r4, r6
 800eab0:	ebc4 060c 	rsb	r6, r4, ip
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 800eaba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800eabe:	f10b 0114 	add.w	r1, fp, #20
 800eac2:	eb02 4a26 	add.w	sl, r2, r6, asr #16
 800eac6:	f105 0814 	add.w	r8, r5, #20
 800eaca:	43c9      	mvns	r1, r1
 800eacc:	b2b4      	uxth	r4, r6
 800eace:	f10b 0618 	add.w	r6, fp, #24
 800ead2:	eb08 0201 	add.w	r2, r8, r1
 800ead6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800eada:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800eade:	f100 0518 	add.w	r5, r0, #24
 800eae2:	45b0      	cmp	r8, r6
 800eae4:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800eae8:	6144      	str	r4, [r0, #20]
 800eaea:	f109 0914 	add.w	r9, r9, #20
 800eaee:	f107 0c18 	add.w	ip, r7, #24
 800eaf2:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 800eaf6:	462a      	mov	r2, r5
 800eaf8:	d952      	bls.n	800eba0 <__mdiff+0x12c>
 800eafa:	b1d9      	cbz	r1, 800eb34 <__mdiff+0xc0>
 800eafc:	f8dc 2000 	ldr.w	r2, [ip]
 800eb00:	6836      	ldr	r6, [r6, #0]
 800eb02:	fa1a fe82 	uxtah	lr, sl, r2
 800eb06:	0c31      	lsrs	r1, r6, #16
 800eb08:	b2b4      	uxth	r4, r6
 800eb0a:	ebc4 060e 	rsb	r6, r4, lr
 800eb0e:	ebc1 4c12 	rsb	ip, r1, r2, lsr #16
 800eb12:	eb0c 4a26 	add.w	sl, ip, r6, asr #16
 800eb16:	b2b2      	uxth	r2, r6
 800eb18:	ea42 440a 	orr.w	r4, r2, sl, lsl #16
 800eb1c:	f10b 061c 	add.w	r6, fp, #28
 800eb20:	602c      	str	r4, [r5, #0]
 800eb22:	45b0      	cmp	r8, r6
 800eb24:	f100 051c 	add.w	r5, r0, #28
 800eb28:	f107 0c1c 	add.w	ip, r7, #28
 800eb2c:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 800eb30:	462a      	mov	r2, r5
 800eb32:	d935      	bls.n	800eba0 <__mdiff+0x12c>
 800eb34:	4662      	mov	r2, ip
 800eb36:	4637      	mov	r7, r6
 800eb38:	f852 1b04 	ldr.w	r1, [r2], #4
 800eb3c:	f857 4b04 	ldr.w	r4, [r7], #4
 800eb40:	fa1a fe81 	uxtah	lr, sl, r1
 800eb44:	fa1f fb84 	uxth.w	fp, r4
 800eb48:	0c24      	lsrs	r4, r4, #16
 800eb4a:	ebcb 0a0e 	rsb	sl, fp, lr
 800eb4e:	ebc4 4111 	rsb	r1, r4, r1, lsr #16
 800eb52:	eb01 442a 	add.w	r4, r1, sl, asr #16
 800eb56:	fa1f fe8a 	uxth.w	lr, sl
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	ea4e 4b04 	orr.w	fp, lr, r4, lsl #16
 800eb60:	f841 bb04 	str.w	fp, [r1], #4
 800eb64:	f8dc c004 	ldr.w	ip, [ip, #4]
 800eb68:	6876      	ldr	r6, [r6, #4]
 800eb6a:	fa1f fa8c 	uxth.w	sl, ip
 800eb6e:	eb0a 4424 	add.w	r4, sl, r4, asr #16
 800eb72:	fa1f fb86 	uxth.w	fp, r6
 800eb76:	ea4f 4616 	mov.w	r6, r6, lsr #16
 800eb7a:	ebcb 0404 	rsb	r4, fp, r4
 800eb7e:	ebc6 4e1c 	rsb	lr, r6, ip, lsr #16
 800eb82:	eb0e 4a24 	add.w	sl, lr, r4, asr #16
 800eb86:	b2a6      	uxth	r6, r4
 800eb88:	ea46 440a 	orr.w	r4, r6, sl, lsl #16
 800eb8c:	1d3e      	adds	r6, r7, #4
 800eb8e:	606c      	str	r4, [r5, #4]
 800eb90:	1d0d      	adds	r5, r1, #4
 800eb92:	45b0      	cmp	r8, r6
 800eb94:	f102 0c04 	add.w	ip, r2, #4
 800eb98:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 800eb9c:	462a      	mov	r2, r5
 800eb9e:	d8c9      	bhi.n	800eb34 <__mdiff+0xc0>
 800eba0:	45e1      	cmp	r9, ip
 800eba2:	d955      	bls.n	800ec50 <__mdiff+0x1dc>
 800eba4:	4662      	mov	r2, ip
 800eba6:	ea6f 040c 	mvn.w	r4, ip
 800ebaa:	f852 1b04 	ldr.w	r1, [r2], #4
 800ebae:	fa1a fe81 	uxtah	lr, sl, r1
 800ebb2:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800ebb6:	eb08 482e 	add.w	r8, r8, lr, asr #16
 800ebba:	fa1f fa8e 	uxth.w	sl, lr
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	eb09 0604 	add.w	r6, r9, r4
 800ebc4:	4591      	cmp	r9, r2
 800ebc6:	ea4a 4408 	orr.w	r4, sl, r8, lsl #16
 800ebca:	f841 4b04 	str.w	r4, [r1], #4
 800ebce:	f3c6 0680 	ubfx	r6, r6, #2, #1
 800ebd2:	ea4f 4828 	mov.w	r8, r8, asr #16
 800ebd6:	d933      	bls.n	800ec40 <__mdiff+0x1cc>
 800ebd8:	b186      	cbz	r6, 800ebfc <__mdiff+0x188>
 800ebda:	f852 4b04 	ldr.w	r4, [r2], #4
 800ebde:	fa18 fe84 	uxtah	lr, r8, r4
 800ebe2:	0c26      	lsrs	r6, r4, #16
 800ebe4:	eb06 462e 	add.w	r6, r6, lr, asr #16
 800ebe8:	fa1f f88e 	uxth.w	r8, lr
 800ebec:	ea48 4406 	orr.w	r4, r8, r6, lsl #16
 800ebf0:	4591      	cmp	r9, r2
 800ebf2:	f841 4b04 	str.w	r4, [r1], #4
 800ebf6:	ea4f 4826 	mov.w	r8, r6, asr #16
 800ebfa:	d921      	bls.n	800ec40 <__mdiff+0x1cc>
 800ebfc:	4617      	mov	r7, r2
 800ebfe:	460e      	mov	r6, r1
 800ec00:	f857 4b04 	ldr.w	r4, [r7], #4
 800ec04:	fa18 fe84 	uxtah	lr, r8, r4
 800ec08:	0c24      	lsrs	r4, r4, #16
 800ec0a:	eb04 442e 	add.w	r4, r4, lr, asr #16
 800ec0e:	fa1f f88e 	uxth.w	r8, lr
 800ec12:	ea48 4e04 	orr.w	lr, r8, r4, lsl #16
 800ec16:	f846 eb04 	str.w	lr, [r6], #4
 800ec1a:	6852      	ldr	r2, [r2, #4]
 800ec1c:	fa1f f882 	uxth.w	r8, r2
 800ec20:	eb08 4424 	add.w	r4, r8, r4, asr #16
 800ec24:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ec28:	eb02 4e24 	add.w	lr, r2, r4, asr #16
 800ec2c:	b2a4      	uxth	r4, r4
 800ec2e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800ec32:	1d3a      	adds	r2, r7, #4
 800ec34:	604c      	str	r4, [r1, #4]
 800ec36:	1d31      	adds	r1, r6, #4
 800ec38:	4591      	cmp	r9, r2
 800ec3a:	ea4f 482e 	mov.w	r8, lr, asr #16
 800ec3e:	d8dd      	bhi.n	800ebfc <__mdiff+0x188>
 800ec40:	ea6f 010c 	mvn.w	r1, ip
 800ec44:	eb01 0209 	add.w	r2, r1, r9
 800ec48:	f022 0103 	bic.w	r1, r2, #3
 800ec4c:	1d0a      	adds	r2, r1, #4
 800ec4e:	18aa      	adds	r2, r5, r2
 800ec50:	3a04      	subs	r2, #4
 800ec52:	b924      	cbnz	r4, 800ec5e <__mdiff+0x1ea>
 800ec54:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ec58:	3b01      	subs	r3, #1
 800ec5a:	2900      	cmp	r1, #0
 800ec5c:	d0fa      	beq.n	800ec54 <__mdiff+0x1e0>
 800ec5e:	6103      	str	r3, [r0, #16]
 800ec60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec64:	463b      	mov	r3, r7
 800ec66:	2401      	movs	r4, #1
 800ec68:	465f      	mov	r7, fp
 800ec6a:	469b      	mov	fp, r3
 800ec6c:	e711      	b.n	800ea92 <__mdiff+0x1e>
 800ec6e:	4628      	mov	r0, r5
 800ec70:	4621      	mov	r1, r4
 800ec72:	f7ff fb59 	bl	800e328 <_Balloc>
 800ec76:	2201      	movs	r2, #1
 800ec78:	6102      	str	r2, [r0, #16]
 800ec7a:	6144      	str	r4, [r0, #20]
 800ec7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec80 <__d2b>:
 800ec80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec84:	4689      	mov	r9, r1
 800ec86:	b083      	sub	sp, #12
 800ec88:	2101      	movs	r1, #1
 800ec8a:	ec55 4b10 	vmov	r4, r5, d0
 800ec8e:	4690      	mov	r8, r2
 800ec90:	f7ff fb4a 	bl	800e328 <_Balloc>
 800ec94:	f3c5 570a 	ubfx	r7, r5, #20, #11
 800ec98:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 800ec9c:	4606      	mov	r6, r0
 800ec9e:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
 800eca2:	b10f      	cbz	r7, 800eca8 <__d2b+0x28>
 800eca4:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800eca8:	9001      	str	r0, [sp, #4]
 800ecaa:	2c00      	cmp	r4, #0
 800ecac:	d022      	beq.n	800ecf4 <__d2b+0x74>
 800ecae:	aa02      	add	r2, sp, #8
 800ecb0:	4668      	mov	r0, sp
 800ecb2:	f842 4d08 	str.w	r4, [r2, #-8]!
 800ecb6:	f7ff fc01 	bl	800e4bc <__lo0bits>
 800ecba:	9b01      	ldr	r3, [sp, #4]
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d12d      	bne.n	800ed1c <__d2b+0x9c>
 800ecc0:	9c00      	ldr	r4, [sp, #0]
 800ecc2:	6174      	str	r4, [r6, #20]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	bf0c      	ite	eq
 800ecc8:	2401      	moveq	r4, #1
 800ecca:	2402      	movne	r4, #2
 800eccc:	61b3      	str	r3, [r6, #24]
 800ecce:	6134      	str	r4, [r6, #16]
 800ecd0:	b9d7      	cbnz	r7, 800ed08 <__d2b+0x88>
 800ecd2:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 800ecd6:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 800ecda:	6910      	ldr	r0, [r2, #16]
 800ecdc:	f8c9 3000 	str.w	r3, [r9]
 800ece0:	f7ff fbce 	bl	800e480 <__hi0bits>
 800ece4:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800ece8:	f8c8 0000 	str.w	r0, [r8]
 800ecec:	4630      	mov	r0, r6
 800ecee:	b003      	add	sp, #12
 800ecf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecf4:	a801      	add	r0, sp, #4
 800ecf6:	f7ff fbe1 	bl	800e4bc <__lo0bits>
 800ecfa:	9901      	ldr	r1, [sp, #4]
 800ecfc:	2401      	movs	r4, #1
 800ecfe:	6171      	str	r1, [r6, #20]
 800ed00:	6134      	str	r4, [r6, #16]
 800ed02:	3020      	adds	r0, #32
 800ed04:	2f00      	cmp	r7, #0
 800ed06:	d0e4      	beq.n	800ecd2 <__d2b+0x52>
 800ed08:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 800ed0c:	183f      	adds	r7, r7, r0
 800ed0e:	f1c0 0135 	rsb	r1, r0, #53	; 0x35
 800ed12:	f8c9 7000 	str.w	r7, [r9]
 800ed16:	f8c8 1000 	str.w	r1, [r8]
 800ed1a:	e7e7      	b.n	800ecec <__d2b+0x6c>
 800ed1c:	f1c0 0120 	rsb	r1, r0, #32
 800ed20:	9a00      	ldr	r2, [sp, #0]
 800ed22:	fa03 f401 	lsl.w	r4, r3, r1
 800ed26:	ea44 0102 	orr.w	r1, r4, r2
 800ed2a:	fa23 f300 	lsr.w	r3, r3, r0
 800ed2e:	6171      	str	r1, [r6, #20]
 800ed30:	9301      	str	r3, [sp, #4]
 800ed32:	e7c7      	b.n	800ecc4 <__d2b+0x44>

0800ed34 <_sbrk_r>:
 800ed34:	b538      	push	{r3, r4, r5, lr}
 800ed36:	4c07      	ldr	r4, [pc, #28]	; (800ed54 <_sbrk_r+0x20>)
 800ed38:	2300      	movs	r3, #0
 800ed3a:	4605      	mov	r5, r0
 800ed3c:	4608      	mov	r0, r1
 800ed3e:	6023      	str	r3, [r4, #0]
 800ed40:	f7f2 f9da 	bl	80010f8 <_sbrk>
 800ed44:	1c43      	adds	r3, r0, #1
 800ed46:	d000      	beq.n	800ed4a <_sbrk_r+0x16>
 800ed48:	bd38      	pop	{r3, r4, r5, pc}
 800ed4a:	6821      	ldr	r1, [r4, #0]
 800ed4c:	2900      	cmp	r1, #0
 800ed4e:	d0fb      	beq.n	800ed48 <_sbrk_r+0x14>
 800ed50:	6029      	str	r1, [r5, #0]
 800ed52:	bd38      	pop	{r3, r4, r5, pc}
 800ed54:	20000988 	.word	0x20000988

0800ed58 <__sread>:
 800ed58:	b510      	push	{r4, lr}
 800ed5a:	460c      	mov	r4, r1
 800ed5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed60:	f000 fce4 	bl	800f72c <_read_r>
 800ed64:	2800      	cmp	r0, #0
 800ed66:	db03      	blt.n	800ed70 <__sread+0x18>
 800ed68:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ed6a:	1813      	adds	r3, r2, r0
 800ed6c:	6523      	str	r3, [r4, #80]	; 0x50
 800ed6e:	bd10      	pop	{r4, pc}
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed76:	81a1      	strh	r1, [r4, #12]
 800ed78:	bd10      	pop	{r4, pc}
 800ed7a:	bf00      	nop

0800ed7c <__swrite>:
 800ed7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed80:	460c      	mov	r4, r1
 800ed82:	8989      	ldrh	r1, [r1, #12]
 800ed84:	f401 7c80 	and.w	ip, r1, #256	; 0x100
 800ed88:	fa0f fc8c 	sxth.w	ip, ip
 800ed8c:	4607      	mov	r7, r0
 800ed8e:	4616      	mov	r6, r2
 800ed90:	461d      	mov	r5, r3
 800ed92:	f1bc 0f00 	cmp.w	ip, #0
 800ed96:	d006      	beq.n	800eda6 <__swrite+0x2a>
 800ed98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	2302      	movs	r3, #2
 800eda0:	f000 fbe4 	bl	800f56c <_lseek_r>
 800eda4:	89a1      	ldrh	r1, [r4, #12]
 800eda6:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 800edaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edae:	81a0      	strh	r0, [r4, #12]
 800edb0:	4632      	mov	r2, r6
 800edb2:	4638      	mov	r0, r7
 800edb4:	462b      	mov	r3, r5
 800edb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edba:	f000 b8a7 	b.w	800ef0c <_write_r>
 800edbe:	bf00      	nop

0800edc0 <__sseek>:
 800edc0:	b510      	push	{r4, lr}
 800edc2:	460c      	mov	r4, r1
 800edc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edc8:	f000 fbd0 	bl	800f56c <_lseek_r>
 800edcc:	1c42      	adds	r2, r0, #1
 800edce:	89a3      	ldrh	r3, [r4, #12]
 800edd0:	d004      	beq.n	800eddc <__sseek+0x1c>
 800edd2:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 800edd6:	6520      	str	r0, [r4, #80]	; 0x50
 800edd8:	81a1      	strh	r1, [r4, #12]
 800edda:	bd10      	pop	{r4, pc}
 800eddc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ede0:	81a2      	strh	r2, [r4, #12]
 800ede2:	bd10      	pop	{r4, pc}

0800ede4 <__sclose>:
 800ede4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ede8:	f000 b8d4 	b.w	800ef94 <_close_r>

0800edec <strlen>:
 800edec:	f020 0103 	bic.w	r1, r0, #3
 800edf0:	f010 0003 	ands.w	r0, r0, #3
 800edf4:	f1c0 0000 	rsb	r0, r0, #0
 800edf8:	f851 3b04 	ldr.w	r3, [r1], #4
 800edfc:	f100 0c04 	add.w	ip, r0, #4
 800ee00:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ee04:	f06f 0200 	mvn.w	r2, #0
 800ee08:	bf1c      	itt	ne
 800ee0a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800ee0e:	4313      	orrne	r3, r2
 800ee10:	f04f 0c01 	mov.w	ip, #1
 800ee14:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800ee18:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800ee1c:	eba3 020c 	sub.w	r2, r3, ip
 800ee20:	ea22 0203 	bic.w	r2, r2, r3
 800ee24:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800ee28:	bf04      	itt	eq
 800ee2a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800ee2e:	3004      	addeq	r0, #4
 800ee30:	d0f4      	beq.n	800ee1c <strlen+0x30>
 800ee32:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ee36:	bf1f      	itttt	ne
 800ee38:	3001      	addne	r0, #1
 800ee3a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800ee3e:	3001      	addne	r0, #1
 800ee40:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800ee44:	bf18      	it	ne
 800ee46:	3001      	addne	r0, #1
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop

0800ee4c <__sprint_r>:
 800ee4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee50:	6893      	ldr	r3, [r2, #8]
 800ee52:	4692      	mov	sl, r2
 800ee54:	4680      	mov	r8, r0
 800ee56:	460f      	mov	r7, r1
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d050      	beq.n	800eefe <__sprint_r+0xb2>
 800ee5c:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 800ee5e:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800ee62:	d050      	beq.n	800ef06 <__sprint_r+0xba>
 800ee64:	6812      	ldr	r2, [r2, #0]
 800ee66:	f102 0b08 	add.w	fp, r2, #8
 800ee6a:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 800ee6e:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800ee72:	ea5f 0990 	movs.w	r9, r0, lsr #2
 800ee76:	d038      	beq.n	800eeea <__sprint_r+0x9e>
 800ee78:	f109 33ff 	add.w	r3, r9, #4294967295
 800ee7c:	4640      	mov	r0, r8
 800ee7e:	6821      	ldr	r1, [r4, #0]
 800ee80:	463a      	mov	r2, r7
 800ee82:	f003 0601 	and.w	r6, r3, #1
 800ee86:	f000 f8e9 	bl	800f05c <_fputwc_r>
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	d022      	beq.n	800eed4 <__sprint_r+0x88>
 800ee8e:	2501      	movs	r5, #1
 800ee90:	45a9      	cmp	r9, r5
 800ee92:	d028      	beq.n	800eee6 <__sprint_r+0x9a>
 800ee94:	b196      	cbz	r6, 800eebc <__sprint_r+0x70>
 800ee96:	4640      	mov	r0, r8
 800ee98:	f854 1f04 	ldr.w	r1, [r4, #4]!
 800ee9c:	463a      	mov	r2, r7
 800ee9e:	f000 f8dd 	bl	800f05c <_fputwc_r>
 800eea2:	3001      	adds	r0, #1
 800eea4:	d016      	beq.n	800eed4 <__sprint_r+0x88>
 800eea6:	2502      	movs	r5, #2
 800eea8:	45a9      	cmp	r9, r5
 800eeaa:	d107      	bne.n	800eebc <__sprint_r+0x70>
 800eeac:	e01b      	b.n	800eee6 <__sprint_r+0x9a>
 800eeae:	6871      	ldr	r1, [r6, #4]
 800eeb0:	f000 f8d4 	bl	800f05c <_fputwc_r>
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	d00d      	beq.n	800eed4 <__sprint_r+0x88>
 800eeb8:	45a9      	cmp	r9, r5
 800eeba:	d014      	beq.n	800eee6 <__sprint_r+0x9a>
 800eebc:	6861      	ldr	r1, [r4, #4]
 800eebe:	463a      	mov	r2, r7
 800eec0:	4640      	mov	r0, r8
 800eec2:	f000 f8cb 	bl	800f05c <_fputwc_r>
 800eec6:	1d26      	adds	r6, r4, #4
 800eec8:	3502      	adds	r5, #2
 800eeca:	3408      	adds	r4, #8
 800eecc:	3001      	adds	r0, #1
 800eece:	463a      	mov	r2, r7
 800eed0:	4640      	mov	r0, r8
 800eed2:	d1ec      	bne.n	800eeae <__sprint_r+0x62>
 800eed4:	f04f 30ff 	mov.w	r0, #4294967295
 800eed8:	2100      	movs	r1, #0
 800eeda:	f8ca 1008 	str.w	r1, [sl, #8]
 800eede:	f8ca 1004 	str.w	r1, [sl, #4]
 800eee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee6:	f8da 3008 	ldr.w	r3, [sl, #8]
 800eeea:	eba3 0389 	sub.w	r3, r3, r9, lsl #2
 800eeee:	f8ca 3008 	str.w	r3, [sl, #8]
 800eef2:	f10b 0b08 	add.w	fp, fp, #8
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d1b7      	bne.n	800ee6a <__sprint_r+0x1e>
 800eefa:	4618      	mov	r0, r3
 800eefc:	e7ec      	b.n	800eed8 <__sprint_r+0x8c>
 800eefe:	6053      	str	r3, [r2, #4]
 800ef00:	4618      	mov	r0, r3
 800ef02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef06:	f000 f995 	bl	800f234 <__sfvwrite_r>
 800ef0a:	e7e5      	b.n	800eed8 <__sprint_r+0x8c>

0800ef0c <_write_r>:
 800ef0c:	b538      	push	{r3, r4, r5, lr}
 800ef0e:	4c08      	ldr	r4, [pc, #32]	; (800ef30 <_write_r+0x24>)
 800ef10:	4605      	mov	r5, r0
 800ef12:	4608      	mov	r0, r1
 800ef14:	4611      	mov	r1, r2
 800ef16:	461a      	mov	r2, r3
 800ef18:	2300      	movs	r3, #0
 800ef1a:	6023      	str	r3, [r4, #0]
 800ef1c:	f7f2 f9c6 	bl	80012ac <_write>
 800ef20:	1c43      	adds	r3, r0, #1
 800ef22:	d000      	beq.n	800ef26 <_write_r+0x1a>
 800ef24:	bd38      	pop	{r3, r4, r5, pc}
 800ef26:	6821      	ldr	r1, [r4, #0]
 800ef28:	2900      	cmp	r1, #0
 800ef2a:	d0fb      	beq.n	800ef24 <_write_r+0x18>
 800ef2c:	6029      	str	r1, [r5, #0]
 800ef2e:	bd38      	pop	{r3, r4, r5, pc}
 800ef30:	20000988 	.word	0x20000988

0800ef34 <_calloc_r>:
 800ef34:	b510      	push	{r4, lr}
 800ef36:	fb01 f102 	mul.w	r1, r1, r2
 800ef3a:	f7fe fe01 	bl	800db40 <_malloc_r>
 800ef3e:	4604      	mov	r4, r0
 800ef40:	b168      	cbz	r0, 800ef5e <_calloc_r+0x2a>
 800ef42:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ef46:	f022 0103 	bic.w	r1, r2, #3
 800ef4a:	1f0a      	subs	r2, r1, #4
 800ef4c:	2a24      	cmp	r2, #36	; 0x24
 800ef4e:	d818      	bhi.n	800ef82 <_calloc_r+0x4e>
 800ef50:	2a13      	cmp	r2, #19
 800ef52:	d806      	bhi.n	800ef62 <_calloc_r+0x2e>
 800ef54:	4603      	mov	r3, r0
 800ef56:	2000      	movs	r0, #0
 800ef58:	6018      	str	r0, [r3, #0]
 800ef5a:	6058      	str	r0, [r3, #4]
 800ef5c:	6098      	str	r0, [r3, #8]
 800ef5e:	4620      	mov	r0, r4
 800ef60:	bd10      	pop	{r4, pc}
 800ef62:	2300      	movs	r3, #0
 800ef64:	2a1b      	cmp	r2, #27
 800ef66:	6003      	str	r3, [r0, #0]
 800ef68:	6043      	str	r3, [r0, #4]
 800ef6a:	d90f      	bls.n	800ef8c <_calloc_r+0x58>
 800ef6c:	2a24      	cmp	r2, #36	; 0x24
 800ef6e:	6083      	str	r3, [r0, #8]
 800ef70:	60c3      	str	r3, [r0, #12]
 800ef72:	bf05      	ittet	eq
 800ef74:	6103      	streq	r3, [r0, #16]
 800ef76:	6143      	streq	r3, [r0, #20]
 800ef78:	f100 0310 	addne.w	r3, r0, #16
 800ef7c:	f100 0318 	addeq.w	r3, r0, #24
 800ef80:	e7e9      	b.n	800ef56 <_calloc_r+0x22>
 800ef82:	2100      	movs	r1, #0
 800ef84:	f7fa ffcc 	bl	8009f20 <memset>
 800ef88:	4620      	mov	r0, r4
 800ef8a:	bd10      	pop	{r4, pc}
 800ef8c:	f100 0308 	add.w	r3, r0, #8
 800ef90:	e7e1      	b.n	800ef56 <_calloc_r+0x22>
 800ef92:	bf00      	nop

0800ef94 <_close_r>:
 800ef94:	b538      	push	{r3, r4, r5, lr}
 800ef96:	4c07      	ldr	r4, [pc, #28]	; (800efb4 <_close_r+0x20>)
 800ef98:	2300      	movs	r3, #0
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	4608      	mov	r0, r1
 800ef9e:	6023      	str	r3, [r4, #0]
 800efa0:	f7f2 f80c 	bl	8000fbc <_close>
 800efa4:	1c43      	adds	r3, r0, #1
 800efa6:	d000      	beq.n	800efaa <_close_r+0x16>
 800efa8:	bd38      	pop	{r3, r4, r5, pc}
 800efaa:	6821      	ldr	r1, [r4, #0]
 800efac:	2900      	cmp	r1, #0
 800efae:	d0fb      	beq.n	800efa8 <_close_r+0x14>
 800efb0:	6029      	str	r1, [r5, #0]
 800efb2:	bd38      	pop	{r3, r4, r5, pc}
 800efb4:	20000988 	.word	0x20000988

0800efb8 <_fclose_r>:
 800efb8:	b570      	push	{r4, r5, r6, lr}
 800efba:	460c      	mov	r4, r1
 800efbc:	4605      	mov	r5, r0
 800efbe:	2900      	cmp	r1, #0
 800efc0:	d034      	beq.n	800f02c <_fclose_r+0x74>
 800efc2:	f7fe fbc1 	bl	800d748 <__sfp_lock_acquire>
 800efc6:	b115      	cbz	r5, 800efce <_fclose_r+0x16>
 800efc8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d031      	beq.n	800f032 <_fclose_r+0x7a>
 800efce:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800efd2:	b33e      	cbz	r6, 800f024 <_fclose_r+0x6c>
 800efd4:	4628      	mov	r0, r5
 800efd6:	4621      	mov	r1, r4
 800efd8:	f7fe faae 	bl	800d538 <_fflush_r>
 800efdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800efde:	4606      	mov	r6, r0
 800efe0:	b13a      	cbz	r2, 800eff2 <_fclose_r+0x3a>
 800efe2:	4628      	mov	r0, r5
 800efe4:	69e1      	ldr	r1, [r4, #28]
 800efe6:	4790      	blx	r2
 800efe8:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 800efec:	bf28      	it	cs
 800efee:	f04f 36ff 	movcs.w	r6, #4294967295
 800eff2:	89a0      	ldrh	r0, [r4, #12]
 800eff4:	f000 0180 	and.w	r1, r0, #128	; 0x80
 800eff8:	b20b      	sxth	r3, r1
 800effa:	bb13      	cbnz	r3, 800f042 <_fclose_r+0x8a>
 800effc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800effe:	b141      	cbz	r1, 800f012 <_fclose_r+0x5a>
 800f000:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800f004:	4291      	cmp	r1, r2
 800f006:	d002      	beq.n	800f00e <_fclose_r+0x56>
 800f008:	4628      	mov	r0, r5
 800f00a:	f7fe fbed 	bl	800d7e8 <_free_r>
 800f00e:	2000      	movs	r0, #0
 800f010:	6320      	str	r0, [r4, #48]	; 0x30
 800f012:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f014:	b121      	cbz	r1, 800f020 <_fclose_r+0x68>
 800f016:	4628      	mov	r0, r5
 800f018:	f7fe fbe6 	bl	800d7e8 <_free_r>
 800f01c:	2100      	movs	r1, #0
 800f01e:	6461      	str	r1, [r4, #68]	; 0x44
 800f020:	2300      	movs	r3, #0
 800f022:	81a3      	strh	r3, [r4, #12]
 800f024:	f7fe fb92 	bl	800d74c <__sfp_lock_release>
 800f028:	4630      	mov	r0, r6
 800f02a:	bd70      	pop	{r4, r5, r6, pc}
 800f02c:	460e      	mov	r6, r1
 800f02e:	4630      	mov	r0, r6
 800f030:	bd70      	pop	{r4, r5, r6, pc}
 800f032:	4628      	mov	r0, r5
 800f034:	f7fe fb62 	bl	800d6fc <__sinit>
 800f038:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800f03c:	2e00      	cmp	r6, #0
 800f03e:	d1c9      	bne.n	800efd4 <_fclose_r+0x1c>
 800f040:	e7f0      	b.n	800f024 <_fclose_r+0x6c>
 800f042:	4628      	mov	r0, r5
 800f044:	6921      	ldr	r1, [r4, #16]
 800f046:	f7fe fbcf 	bl	800d7e8 <_free_r>
 800f04a:	e7d7      	b.n	800effc <_fclose_r+0x44>

0800f04c <fclose>:
 800f04c:	f240 4390 	movw	r3, #1168	; 0x490
 800f050:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f054:	4601      	mov	r1, r0
 800f056:	6818      	ldr	r0, [r3, #0]
 800f058:	f7ff bfae 	b.w	800efb8 <_fclose_r>

0800f05c <_fputwc_r>:
 800f05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f060:	8993      	ldrh	r3, [r2, #12]
 800f062:	4614      	mov	r4, r2
 800f064:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f068:	4680      	mov	r8, r0
 800f06a:	b210      	sxth	r0, r2
 800f06c:	b082      	sub	sp, #8
 800f06e:	460f      	mov	r7, r1
 800f070:	b930      	cbnz	r0, 800f080 <_fputwc_r+0x24>
 800f072:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f074:	f443 5600 	orr.w	r6, r3, #8192	; 0x2000
 800f078:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 800f07c:	81a6      	strh	r6, [r4, #12]
 800f07e:	6663      	str	r3, [r4, #100]	; 0x64
 800f080:	f7fe fcde 	bl	800da40 <__locale_mb_cur_max>
 800f084:	2801      	cmp	r0, #1
 800f086:	d079      	beq.n	800f17c <_fputwc_r+0x120>
 800f088:	ae01      	add	r6, sp, #4
 800f08a:	4640      	mov	r0, r8
 800f08c:	4631      	mov	r1, r6
 800f08e:	463a      	mov	r2, r7
 800f090:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800f094:	f000 fdaa 	bl	800fbec <_wcrtomb_r>
 800f098:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f09c:	4681      	mov	r9, r0
 800f09e:	d053      	beq.n	800f148 <_fputwc_r+0xec>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	d03d      	beq.n	800f120 <_fputwc_r+0xc4>
 800f0a4:	68a1      	ldr	r1, [r4, #8]
 800f0a6:	1e4b      	subs	r3, r1, #1
 800f0a8:	f109 32ff 	add.w	r2, r9, #4294967295
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	60a3      	str	r3, [r4, #8]
 800f0b0:	f002 0a01 	and.w	sl, r2, #1
 800f0b4:	f2c0 8085 	blt.w	800f1c2 <_fputwc_r+0x166>
 800f0b8:	6825      	ldr	r5, [r4, #0]
 800f0ba:	7830      	ldrb	r0, [r6, #0]
 800f0bc:	7028      	strb	r0, [r5, #0]
 800f0be:	6821      	ldr	r1, [r4, #0]
 800f0c0:	1c4a      	adds	r2, r1, #1
 800f0c2:	6022      	str	r2, [r4, #0]
 800f0c4:	2501      	movs	r5, #1
 800f0c6:	454d      	cmp	r5, r9
 800f0c8:	d22a      	bcs.n	800f120 <_fputwc_r+0xc4>
 800f0ca:	f1ba 0f00 	cmp.w	sl, #0
 800f0ce:	d00d      	beq.n	800f0ec <_fputwc_r+0x90>
 800f0d0:	68a3      	ldr	r3, [r4, #8]
 800f0d2:	1e58      	subs	r0, r3, #1
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	60a0      	str	r0, [r4, #8]
 800f0d8:	db24      	blt.n	800f124 <_fputwc_r+0xc8>
 800f0da:	6821      	ldr	r1, [r4, #0]
 800f0dc:	5d72      	ldrb	r2, [r6, r5]
 800f0de:	700a      	strb	r2, [r1, #0]
 800f0e0:	6823      	ldr	r3, [r4, #0]
 800f0e2:	1958      	adds	r0, r3, r5
 800f0e4:	6020      	str	r0, [r4, #0]
 800f0e6:	3501      	adds	r5, #1
 800f0e8:	454d      	cmp	r5, r9
 800f0ea:	d219      	bcs.n	800f120 <_fputwc_r+0xc4>
 800f0ec:	68a1      	ldr	r1, [r4, #8]
 800f0ee:	1e4b      	subs	r3, r1, #1
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	60a3      	str	r3, [r4, #8]
 800f0f4:	db30      	blt.n	800f158 <_fputwc_r+0xfc>
 800f0f6:	6820      	ldr	r0, [r4, #0]
 800f0f8:	5d72      	ldrb	r2, [r6, r5]
 800f0fa:	7002      	strb	r2, [r0, #0]
 800f0fc:	6821      	ldr	r1, [r4, #0]
 800f0fe:	1c4b      	adds	r3, r1, #1
 800f100:	6023      	str	r3, [r4, #0]
 800f102:	68a1      	ldr	r1, [r4, #8]
 800f104:	1e48      	subs	r0, r1, #1
 800f106:	3501      	adds	r5, #1
 800f108:	2800      	cmp	r0, #0
 800f10a:	60a0      	str	r0, [r4, #8]
 800f10c:	db0a      	blt.n	800f124 <_fputwc_r+0xc8>
 800f10e:	6820      	ldr	r0, [r4, #0]
 800f110:	5d72      	ldrb	r2, [r6, r5]
 800f112:	7002      	strb	r2, [r0, #0]
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	3501      	adds	r5, #1
 800f118:	1c59      	adds	r1, r3, #1
 800f11a:	454d      	cmp	r5, r9
 800f11c:	6021      	str	r1, [r4, #0]
 800f11e:	d3e5      	bcc.n	800f0ec <_fputwc_r+0x90>
 800f120:	4638      	mov	r0, r7
 800f122:	e016      	b.n	800f152 <_fputwc_r+0xf6>
 800f124:	69a1      	ldr	r1, [r4, #24]
 800f126:	4288      	cmp	r0, r1
 800f128:	db31      	blt.n	800f18e <_fputwc_r+0x132>
 800f12a:	6823      	ldr	r3, [r4, #0]
 800f12c:	5d72      	ldrb	r2, [r6, r5]
 800f12e:	701a      	strb	r2, [r3, #0]
 800f130:	6820      	ldr	r0, [r4, #0]
 800f132:	7801      	ldrb	r1, [r0, #0]
 800f134:	290a      	cmp	r1, #10
 800f136:	d055      	beq.n	800f1e4 <_fputwc_r+0x188>
 800f138:	1c42      	adds	r2, r0, #1
 800f13a:	2000      	movs	r0, #0
 800f13c:	6022      	str	r2, [r4, #0]
 800f13e:	2800      	cmp	r0, #0
 800f140:	d0d1      	beq.n	800f0e6 <_fputwc_r+0x8a>
 800f142:	f04f 30ff 	mov.w	r0, #4294967295
 800f146:	e004      	b.n	800f152 <_fputwc_r+0xf6>
 800f148:	89a2      	ldrh	r2, [r4, #12]
 800f14a:	f042 0040 	orr.w	r0, r2, #64	; 0x40
 800f14e:	81a0      	strh	r0, [r4, #12]
 800f150:	4648      	mov	r0, r9
 800f152:	b002      	add	sp, #8
 800f154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f158:	69a0      	ldr	r0, [r4, #24]
 800f15a:	4283      	cmp	r3, r0
 800f15c:	db24      	blt.n	800f1a8 <_fputwc_r+0x14c>
 800f15e:	6821      	ldr	r1, [r4, #0]
 800f160:	5d72      	ldrb	r2, [r6, r5]
 800f162:	700a      	strb	r2, [r1, #0]
 800f164:	6823      	ldr	r3, [r4, #0]
 800f166:	7819      	ldrb	r1, [r3, #0]
 800f168:	290a      	cmp	r1, #10
 800f16a:	d03d      	beq.n	800f1e8 <_fputwc_r+0x18c>
 800f16c:	3301      	adds	r3, #1
 800f16e:	2200      	movs	r2, #0
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	2a00      	cmp	r2, #0
 800f174:	d0c5      	beq.n	800f102 <_fputwc_r+0xa6>
 800f176:	f04f 30ff 	mov.w	r0, #4294967295
 800f17a:	e7ea      	b.n	800f152 <_fputwc_r+0xf6>
 800f17c:	2f00      	cmp	r7, #0
 800f17e:	d083      	beq.n	800f088 <_fputwc_r+0x2c>
 800f180:	2fff      	cmp	r7, #255	; 0xff
 800f182:	d881      	bhi.n	800f088 <_fputwc_r+0x2c>
 800f184:	ae02      	add	r6, sp, #8
 800f186:	4681      	mov	r9, r0
 800f188:	f806 7d04 	strb.w	r7, [r6, #-4]!
 800f18c:	e78a      	b.n	800f0a4 <_fputwc_r+0x48>
 800f18e:	5d71      	ldrb	r1, [r6, r5]
 800f190:	4640      	mov	r0, r8
 800f192:	4622      	mov	r2, r4
 800f194:	f000 fccc 	bl	800fb30 <__swbuf_r>
 800f198:	f1b0 31ff 	subs.w	r1, r0, #4294967295
 800f19c:	424b      	negs	r3, r1
 800f19e:	eb53 0001 	adcs.w	r0, r3, r1
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d09f      	beq.n	800f0e6 <_fputwc_r+0x8a>
 800f1a6:	e7cc      	b.n	800f142 <_fputwc_r+0xe6>
 800f1a8:	5d71      	ldrb	r1, [r6, r5]
 800f1aa:	4640      	mov	r0, r8
 800f1ac:	4622      	mov	r2, r4
 800f1ae:	f000 fcbf 	bl	800fb30 <__swbuf_r>
 800f1b2:	f1b0 31ff 	subs.w	r1, r0, #4294967295
 800f1b6:	4248      	negs	r0, r1
 800f1b8:	eb50 0201 	adcs.w	r2, r0, r1
 800f1bc:	2a00      	cmp	r2, #0
 800f1be:	d0a0      	beq.n	800f102 <_fputwc_r+0xa6>
 800f1c0:	e7d9      	b.n	800f176 <_fputwc_r+0x11a>
 800f1c2:	69a0      	ldr	r0, [r4, #24]
 800f1c4:	4283      	cmp	r3, r0
 800f1c6:	db11      	blt.n	800f1ec <_fputwc_r+0x190>
 800f1c8:	7831      	ldrb	r1, [r6, #0]
 800f1ca:	6823      	ldr	r3, [r4, #0]
 800f1cc:	7019      	strb	r1, [r3, #0]
 800f1ce:	6822      	ldr	r2, [r4, #0]
 800f1d0:	7811      	ldrb	r1, [r2, #0]
 800f1d2:	290a      	cmp	r1, #10
 800f1d4:	d018      	beq.n	800f208 <_fputwc_r+0x1ac>
 800f1d6:	1c51      	adds	r1, r2, #1
 800f1d8:	2200      	movs	r2, #0
 800f1da:	6021      	str	r1, [r4, #0]
 800f1dc:	2a00      	cmp	r2, #0
 800f1de:	f43f af71 	beq.w	800f0c4 <_fputwc_r+0x68>
 800f1e2:	e7ae      	b.n	800f142 <_fputwc_r+0xe6>
 800f1e4:	4640      	mov	r0, r8
 800f1e6:	e7d4      	b.n	800f192 <_fputwc_r+0x136>
 800f1e8:	4640      	mov	r0, r8
 800f1ea:	e7df      	b.n	800f1ac <_fputwc_r+0x150>
 800f1ec:	7831      	ldrb	r1, [r6, #0]
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	4622      	mov	r2, r4
 800f1f2:	f000 fc9d 	bl	800fb30 <__swbuf_r>
 800f1f6:	f1b0 33ff 	subs.w	r3, r0, #4294967295
 800f1fa:	4258      	negs	r0, r3
 800f1fc:	eb50 0203 	adcs.w	r2, r0, r3
 800f200:	2a00      	cmp	r2, #0
 800f202:	f43f af5f 	beq.w	800f0c4 <_fputwc_r+0x68>
 800f206:	e79c      	b.n	800f142 <_fputwc_r+0xe6>
 800f208:	4640      	mov	r0, r8
 800f20a:	e7f1      	b.n	800f1f0 <_fputwc_r+0x194>

0800f20c <_fstat_r>:
 800f20c:	b538      	push	{r3, r4, r5, lr}
 800f20e:	4c08      	ldr	r4, [pc, #32]	; (800f230 <_fstat_r+0x24>)
 800f210:	2300      	movs	r3, #0
 800f212:	4605      	mov	r5, r0
 800f214:	4608      	mov	r0, r1
 800f216:	4611      	mov	r1, r2
 800f218:	6023      	str	r3, [r4, #0]
 800f21a:	f7f1 ff01 	bl	8001020 <_fstat>
 800f21e:	1c43      	adds	r3, r0, #1
 800f220:	d000      	beq.n	800f224 <_fstat_r+0x18>
 800f222:	bd38      	pop	{r3, r4, r5, pc}
 800f224:	6821      	ldr	r1, [r4, #0]
 800f226:	2900      	cmp	r1, #0
 800f228:	d0fb      	beq.n	800f222 <_fstat_r+0x16>
 800f22a:	6029      	str	r1, [r5, #0]
 800f22c:	bd38      	pop	{r3, r4, r5, pc}
 800f22e:	bf00      	nop
 800f230:	20000988 	.word	0x20000988

0800f234 <__sfvwrite_r>:
 800f234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f238:	6893      	ldr	r3, [r2, #8]
 800f23a:	b085      	sub	sp, #20
 800f23c:	4690      	mov	r8, r2
 800f23e:	4681      	mov	r9, r0
 800f240:	460c      	mov	r4, r1
 800f242:	2b00      	cmp	r3, #0
 800f244:	d02a      	beq.n	800f29c <__sfvwrite_r+0x68>
 800f246:	898b      	ldrh	r3, [r1, #12]
 800f248:	f003 0208 	and.w	r2, r3, #8
 800f24c:	b210      	sxth	r0, r2
 800f24e:	2800      	cmp	r0, #0
 800f250:	d028      	beq.n	800f2a4 <__sfvwrite_r+0x70>
 800f252:	6909      	ldr	r1, [r1, #16]
 800f254:	2900      	cmp	r1, #0
 800f256:	d025      	beq.n	800f2a4 <__sfvwrite_r+0x70>
 800f258:	f003 0502 	and.w	r5, r3, #2
 800f25c:	b22e      	sxth	r6, r5
 800f25e:	f8d8 5000 	ldr.w	r5, [r8]
 800f262:	2e00      	cmp	r6, #0
 800f264:	d033      	beq.n	800f2ce <__sfvwrite_r+0x9a>
 800f266:	f04f 0a00 	mov.w	sl, #0
 800f26a:	4657      	mov	r7, sl
 800f26c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800f270:	bf34      	ite	cc
 800f272:	463b      	movcc	r3, r7
 800f274:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800f278:	4652      	mov	r2, sl
 800f27a:	4648      	mov	r0, r9
 800f27c:	2f00      	cmp	r7, #0
 800f27e:	d021      	beq.n	800f2c4 <__sfvwrite_r+0x90>
 800f280:	69e1      	ldr	r1, [r4, #28]
 800f282:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f284:	47b0      	blx	r6
 800f286:	2800      	cmp	r0, #0
 800f288:	dd6a      	ble.n	800f360 <__sfvwrite_r+0x12c>
 800f28a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f28e:	1a13      	subs	r3, r2, r0
 800f290:	4482      	add	sl, r0
 800f292:	1a3f      	subs	r7, r7, r0
 800f294:	f8c8 3008 	str.w	r3, [r8, #8]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d1e7      	bne.n	800f26c <__sfvwrite_r+0x38>
 800f29c:	2000      	movs	r0, #0
 800f29e:	b005      	add	sp, #20
 800f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a4:	4648      	mov	r0, r9
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	f7fc fe2c 	bl	800bf04 <__swsetup_r>
 800f2ac:	89a3      	ldrh	r3, [r4, #12]
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	d0d2      	beq.n	800f258 <__sfvwrite_r+0x24>
 800f2b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f2b6:	2309      	movs	r3, #9
 800f2b8:	81a2      	strh	r2, [r4, #12]
 800f2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f2be:	f8c9 3000 	str.w	r3, [r9]
 800f2c2:	e7ec      	b.n	800f29e <__sfvwrite_r+0x6a>
 800f2c4:	f8d5 a000 	ldr.w	sl, [r5]
 800f2c8:	686f      	ldr	r7, [r5, #4]
 800f2ca:	3508      	adds	r5, #8
 800f2cc:	e7ce      	b.n	800f26c <__sfvwrite_r+0x38>
 800f2ce:	f013 0a01 	ands.w	sl, r3, #1
 800f2d2:	d14c      	bne.n	800f36e <__sfvwrite_r+0x13a>
 800f2d4:	4656      	mov	r6, sl
 800f2d6:	2e00      	cmp	r6, #0
 800f2d8:	d030      	beq.n	800f33c <__sfvwrite_r+0x108>
 800f2da:	f403 7700 	and.w	r7, r3, #512	; 0x200
 800f2de:	b238      	sxth	r0, r7
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	68a7      	ldr	r7, [r4, #8]
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d07f      	beq.n	800f3e8 <__sfvwrite_r+0x1b4>
 800f2e8:	42be      	cmp	r6, r7
 800f2ea:	46be      	mov	lr, r7
 800f2ec:	f0c0 80ac 	bcc.w	800f448 <__sfvwrite_r+0x214>
 800f2f0:	f401 6090 	and.w	r0, r1, #1152	; 0x480
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	f040 80c8 	bne.w	800f48a <__sfvwrite_r+0x256>
 800f2fa:	6820      	ldr	r0, [r4, #0]
 800f2fc:	9703      	str	r7, [sp, #12]
 800f2fe:	46b3      	mov	fp, r6
 800f300:	4637      	mov	r7, r6
 800f302:	4651      	mov	r1, sl
 800f304:	4672      	mov	r2, lr
 800f306:	f8cd e004 	str.w	lr, [sp, #4]
 800f30a:	f000 f943 	bl	800f594 <memmove>
 800f30e:	68a0      	ldr	r0, [r4, #8]
 800f310:	f8dd c004 	ldr.w	ip, [sp, #4]
 800f314:	6822      	ldr	r2, [r4, #0]
 800f316:	9903      	ldr	r1, [sp, #12]
 800f318:	1a43      	subs	r3, r0, r1
 800f31a:	eb02 000c 	add.w	r0, r2, ip
 800f31e:	60a3      	str	r3, [r4, #8]
 800f320:	6020      	str	r0, [r4, #0]
 800f322:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f326:	1bd7      	subs	r7, r2, r7
 800f328:	44da      	add	sl, fp
 800f32a:	ebcb 0606 	rsb	r6, fp, r6
 800f32e:	f8c8 7008 	str.w	r7, [r8, #8]
 800f332:	2f00      	cmp	r7, #0
 800f334:	d0b2      	beq.n	800f29c <__sfvwrite_r+0x68>
 800f336:	89a3      	ldrh	r3, [r4, #12]
 800f338:	2e00      	cmp	r6, #0
 800f33a:	d1ce      	bne.n	800f2da <__sfvwrite_r+0xa6>
 800f33c:	f8d5 a000 	ldr.w	sl, [r5]
 800f340:	686e      	ldr	r6, [r5, #4]
 800f342:	3508      	adds	r5, #8
 800f344:	e7c7      	b.n	800f2d6 <__sfvwrite_r+0xa2>
 800f346:	f000 fa05 	bl	800f754 <_realloc_r>
 800f34a:	4601      	mov	r1, r0
 800f34c:	2800      	cmp	r0, #0
 800f34e:	f040 80c7 	bne.w	800f4e0 <__sfvwrite_r+0x2ac>
 800f352:	4648      	mov	r0, r9
 800f354:	6921      	ldr	r1, [r4, #16]
 800f356:	f7fe fa47 	bl	800d7e8 <_free_r>
 800f35a:	210c      	movs	r1, #12
 800f35c:	f8c9 1000 	str.w	r1, [r9]
 800f360:	89a0      	ldrh	r0, [r4, #12]
 800f362:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800f366:	81a1      	strh	r1, [r4, #12]
 800f368:	f04f 30ff 	mov.w	r0, #4294967295
 800f36c:	e797      	b.n	800f29e <__sfvwrite_r+0x6a>
 800f36e:	46b2      	mov	sl, r6
 800f370:	46b4      	mov	ip, r6
 800f372:	46b3      	mov	fp, r6
 800f374:	4637      	mov	r7, r6
 800f376:	2f00      	cmp	r7, #0
 800f378:	d02f      	beq.n	800f3da <__sfvwrite_r+0x1a6>
 800f37a:	f1bc 0f00 	cmp.w	ip, #0
 800f37e:	d076      	beq.n	800f46e <__sfvwrite_r+0x23a>
 800f380:	6820      	ldr	r0, [r4, #0]
 800f382:	6922      	ldr	r2, [r4, #16]
 800f384:	68a1      	ldr	r1, [r4, #8]
 800f386:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800f38a:	45ba      	cmp	sl, r7
 800f38c:	bf34      	ite	cc
 800f38e:	4653      	movcc	r3, sl
 800f390:	463b      	movcs	r3, r7
 800f392:	4290      	cmp	r0, r2
 800f394:	d904      	bls.n	800f3a0 <__sfvwrite_r+0x16c>
 800f396:	eb01 060e 	add.w	r6, r1, lr
 800f39a:	42b3      	cmp	r3, r6
 800f39c:	f300 80ad 	bgt.w	800f4fa <__sfvwrite_r+0x2c6>
 800f3a0:	4573      	cmp	r3, lr
 800f3a2:	db35      	blt.n	800f410 <__sfvwrite_r+0x1dc>
 800f3a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f3a6:	69e1      	ldr	r1, [r4, #28]
 800f3a8:	f8cd c004 	str.w	ip, [sp, #4]
 800f3ac:	4648      	mov	r0, r9
 800f3ae:	465a      	mov	r2, fp
 800f3b0:	4673      	mov	r3, lr
 800f3b2:	47b0      	blx	r6
 800f3b4:	1e06      	subs	r6, r0, #0
 800f3b6:	f8dd c004 	ldr.w	ip, [sp, #4]
 800f3ba:	ddd1      	ble.n	800f360 <__sfvwrite_r+0x12c>
 800f3bc:	ebba 0a06 	subs.w	sl, sl, r6
 800f3c0:	d03a      	beq.n	800f438 <__sfvwrite_r+0x204>
 800f3c2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f3c6:	1b8a      	subs	r2, r1, r6
 800f3c8:	44b3      	add	fp, r6
 800f3ca:	1bbf      	subs	r7, r7, r6
 800f3cc:	f8c8 2008 	str.w	r2, [r8, #8]
 800f3d0:	2a00      	cmp	r2, #0
 800f3d2:	f43f af63 	beq.w	800f29c <__sfvwrite_r+0x68>
 800f3d6:	2f00      	cmp	r7, #0
 800f3d8:	d1cf      	bne.n	800f37a <__sfvwrite_r+0x146>
 800f3da:	f8d5 b000 	ldr.w	fp, [r5]
 800f3de:	686f      	ldr	r7, [r5, #4]
 800f3e0:	f04f 0c00 	mov.w	ip, #0
 800f3e4:	3508      	adds	r5, #8
 800f3e6:	e7c6      	b.n	800f376 <__sfvwrite_r+0x142>
 800f3e8:	6820      	ldr	r0, [r4, #0]
 800f3ea:	6923      	ldr	r3, [r4, #16]
 800f3ec:	4298      	cmp	r0, r3
 800f3ee:	d903      	bls.n	800f3f8 <__sfvwrite_r+0x1c4>
 800f3f0:	42be      	cmp	r6, r7
 800f3f2:	46bb      	mov	fp, r7
 800f3f4:	f200 8094 	bhi.w	800f520 <__sfvwrite_r+0x2ec>
 800f3f8:	6963      	ldr	r3, [r4, #20]
 800f3fa:	429e      	cmp	r6, r3
 800f3fc:	d32a      	bcc.n	800f454 <__sfvwrite_r+0x220>
 800f3fe:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800f400:	69e1      	ldr	r1, [r4, #28]
 800f402:	4648      	mov	r0, r9
 800f404:	4652      	mov	r2, sl
 800f406:	47b8      	blx	r7
 800f408:	1e07      	subs	r7, r0, #0
 800f40a:	dda9      	ble.n	800f360 <__sfvwrite_r+0x12c>
 800f40c:	46bb      	mov	fp, r7
 800f40e:	e788      	b.n	800f322 <__sfvwrite_r+0xee>
 800f410:	461a      	mov	r2, r3
 800f412:	4659      	mov	r1, fp
 800f414:	9302      	str	r3, [sp, #8]
 800f416:	f8cd c004 	str.w	ip, [sp, #4]
 800f41a:	f000 f8bb 	bl	800f594 <memmove>
 800f41e:	9b02      	ldr	r3, [sp, #8]
 800f420:	6826      	ldr	r6, [r4, #0]
 800f422:	68a0      	ldr	r0, [r4, #8]
 800f424:	f8dd c004 	ldr.w	ip, [sp, #4]
 800f428:	18f2      	adds	r2, r6, r3
 800f42a:	461e      	mov	r6, r3
 800f42c:	1ac1      	subs	r1, r0, r3
 800f42e:	ebba 0a06 	subs.w	sl, sl, r6
 800f432:	60a1      	str	r1, [r4, #8]
 800f434:	6022      	str	r2, [r4, #0]
 800f436:	d1c4      	bne.n	800f3c2 <__sfvwrite_r+0x18e>
 800f438:	4648      	mov	r0, r9
 800f43a:	4621      	mov	r1, r4
 800f43c:	f7fe f87c 	bl	800d538 <_fflush_r>
 800f440:	2800      	cmp	r0, #0
 800f442:	d18d      	bne.n	800f360 <__sfvwrite_r+0x12c>
 800f444:	46d4      	mov	ip, sl
 800f446:	e7bc      	b.n	800f3c2 <__sfvwrite_r+0x18e>
 800f448:	6820      	ldr	r0, [r4, #0]
 800f44a:	9603      	str	r6, [sp, #12]
 800f44c:	46b3      	mov	fp, r6
 800f44e:	4637      	mov	r7, r6
 800f450:	46b6      	mov	lr, r6
 800f452:	e756      	b.n	800f302 <__sfvwrite_r+0xce>
 800f454:	4651      	mov	r1, sl
 800f456:	4632      	mov	r2, r6
 800f458:	f000 f89c 	bl	800f594 <memmove>
 800f45c:	6827      	ldr	r7, [r4, #0]
 800f45e:	68a2      	ldr	r2, [r4, #8]
 800f460:	19b9      	adds	r1, r7, r6
 800f462:	1b90      	subs	r0, r2, r6
 800f464:	4637      	mov	r7, r6
 800f466:	60a0      	str	r0, [r4, #8]
 800f468:	6021      	str	r1, [r4, #0]
 800f46a:	46b3      	mov	fp, r6
 800f46c:	e759      	b.n	800f322 <__sfvwrite_r+0xee>
 800f46e:	4658      	mov	r0, fp
 800f470:	210a      	movs	r1, #10
 800f472:	463a      	mov	r2, r7
 800f474:	f7fe fe12 	bl	800e09c <memchr>
 800f478:	2800      	cmp	r0, #0
 800f47a:	d060      	beq.n	800f53e <__sfvwrite_r+0x30a>
 800f47c:	f100 0a01 	add.w	sl, r0, #1
 800f480:	ebcb 0a0a 	rsb	sl, fp, sl
 800f484:	f04f 0c01 	mov.w	ip, #1
 800f488:	e77a      	b.n	800f380 <__sfvwrite_r+0x14c>
 800f48a:	6822      	ldr	r2, [r4, #0]
 800f48c:	6967      	ldr	r7, [r4, #20]
 800f48e:	6921      	ldr	r1, [r4, #16]
 800f490:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800f494:	ebc1 0b02 	rsb	fp, r1, r2
 800f498:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 800f49c:	f10b 0001 	add.w	r0, fp, #1
 800f4a0:	1057      	asrs	r7, r2, #1
 800f4a2:	1980      	adds	r0, r0, r6
 800f4a4:	4287      	cmp	r7, r0
 800f4a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4aa:	463a      	mov	r2, r7
 800f4ac:	b21b      	sxth	r3, r3
 800f4ae:	bf3c      	itt	cc
 800f4b0:	4607      	movcc	r7, r0
 800f4b2:	463a      	movcc	r2, r7
 800f4b4:	4648      	mov	r0, r9
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	f43f af45 	beq.w	800f346 <__sfvwrite_r+0x112>
 800f4bc:	4611      	mov	r1, r2
 800f4be:	f7fe fb3f 	bl	800db40 <_malloc_r>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	f43f af49 	beq.w	800f35a <__sfvwrite_r+0x126>
 800f4c8:	6921      	ldr	r1, [r4, #16]
 800f4ca:	9002      	str	r0, [sp, #8]
 800f4cc:	465a      	mov	r2, fp
 800f4ce:	f7fe fe85 	bl	800e1dc <memcpy>
 800f4d2:	89a2      	ldrh	r2, [r4, #12]
 800f4d4:	f422 6090 	bic.w	r0, r2, #1152	; 0x480
 800f4d8:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 800f4dc:	81a1      	strh	r1, [r4, #12]
 800f4de:	9902      	ldr	r1, [sp, #8]
 800f4e0:	ebcb 0307 	rsb	r3, fp, r7
 800f4e4:	eb01 000b 	add.w	r0, r1, fp
 800f4e8:	6167      	str	r7, [r4, #20]
 800f4ea:	6121      	str	r1, [r4, #16]
 800f4ec:	6020      	str	r0, [r4, #0]
 800f4ee:	9603      	str	r6, [sp, #12]
 800f4f0:	60a3      	str	r3, [r4, #8]
 800f4f2:	46b3      	mov	fp, r6
 800f4f4:	4637      	mov	r7, r6
 800f4f6:	46b6      	mov	lr, r6
 800f4f8:	e703      	b.n	800f302 <__sfvwrite_r+0xce>
 800f4fa:	4659      	mov	r1, fp
 800f4fc:	4632      	mov	r2, r6
 800f4fe:	f8cd c004 	str.w	ip, [sp, #4]
 800f502:	f000 f847 	bl	800f594 <memmove>
 800f506:	6820      	ldr	r0, [r4, #0]
 800f508:	1983      	adds	r3, r0, r6
 800f50a:	6023      	str	r3, [r4, #0]
 800f50c:	4648      	mov	r0, r9
 800f50e:	4621      	mov	r1, r4
 800f510:	f7fe f812 	bl	800d538 <_fflush_r>
 800f514:	f8dd c004 	ldr.w	ip, [sp, #4]
 800f518:	2800      	cmp	r0, #0
 800f51a:	f43f af4f 	beq.w	800f3bc <__sfvwrite_r+0x188>
 800f51e:	e71f      	b.n	800f360 <__sfvwrite_r+0x12c>
 800f520:	4651      	mov	r1, sl
 800f522:	463a      	mov	r2, r7
 800f524:	f000 f836 	bl	800f594 <memmove>
 800f528:	6823      	ldr	r3, [r4, #0]
 800f52a:	19da      	adds	r2, r3, r7
 800f52c:	6022      	str	r2, [r4, #0]
 800f52e:	4648      	mov	r0, r9
 800f530:	4621      	mov	r1, r4
 800f532:	f7fe f801 	bl	800d538 <_fflush_r>
 800f536:	2800      	cmp	r0, #0
 800f538:	f43f aef3 	beq.w	800f322 <__sfvwrite_r+0xee>
 800f53c:	e710      	b.n	800f360 <__sfvwrite_r+0x12c>
 800f53e:	f107 0a01 	add.w	sl, r7, #1
 800f542:	f04f 0c01 	mov.w	ip, #1
 800f546:	e71b      	b.n	800f380 <__sfvwrite_r+0x14c>

0800f548 <_isatty_r>:
 800f548:	b538      	push	{r3, r4, r5, lr}
 800f54a:	4c07      	ldr	r4, [pc, #28]	; (800f568 <_isatty_r+0x20>)
 800f54c:	2300      	movs	r3, #0
 800f54e:	4605      	mov	r5, r0
 800f550:	4608      	mov	r0, r1
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	f7f1 fd7e 	bl	8001054 <_isatty>
 800f558:	1c43      	adds	r3, r0, #1
 800f55a:	d000      	beq.n	800f55e <_isatty_r+0x16>
 800f55c:	bd38      	pop	{r3, r4, r5, pc}
 800f55e:	6821      	ldr	r1, [r4, #0]
 800f560:	2900      	cmp	r1, #0
 800f562:	d0fb      	beq.n	800f55c <_isatty_r+0x14>
 800f564:	6029      	str	r1, [r5, #0]
 800f566:	bd38      	pop	{r3, r4, r5, pc}
 800f568:	20000988 	.word	0x20000988

0800f56c <_lseek_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4c08      	ldr	r4, [pc, #32]	; (800f590 <_lseek_r+0x24>)
 800f570:	4605      	mov	r5, r0
 800f572:	4608      	mov	r0, r1
 800f574:	4611      	mov	r1, r2
 800f576:	461a      	mov	r2, r3
 800f578:	2300      	movs	r3, #0
 800f57a:	6023      	str	r3, [r4, #0]
 800f57c:	f7f1 fdae 	bl	80010dc <_lseek>
 800f580:	1c43      	adds	r3, r0, #1
 800f582:	d000      	beq.n	800f586 <_lseek_r+0x1a>
 800f584:	bd38      	pop	{r3, r4, r5, pc}
 800f586:	6821      	ldr	r1, [r4, #0]
 800f588:	2900      	cmp	r1, #0
 800f58a:	d0fb      	beq.n	800f584 <_lseek_r+0x18>
 800f58c:	6029      	str	r1, [r5, #0]
 800f58e:	bd38      	pop	{r3, r4, r5, pc}
 800f590:	20000988 	.word	0x20000988

0800f594 <memmove>:
 800f594:	4288      	cmp	r0, r1
 800f596:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800f59a:	d926      	bls.n	800f5ea <memmove+0x56>
 800f59c:	188c      	adds	r4, r1, r2
 800f59e:	42a0      	cmp	r0, r4
 800f5a0:	d223      	bcs.n	800f5ea <memmove+0x56>
 800f5a2:	1883      	adds	r3, r0, r2
 800f5a4:	1e55      	subs	r5, r2, #1
 800f5a6:	b1ea      	cbz	r2, 800f5e4 <memmove+0x50>
 800f5a8:	4622      	mov	r2, r4
 800f5aa:	f005 0401 	and.w	r4, r5, #1
 800f5ae:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 800f5b2:	f803 1d01 	strb.w	r1, [r3, #-1]!
 800f5b6:	1e69      	subs	r1, r5, #1
 800f5b8:	b1a5      	cbz	r5, 800f5e4 <memmove+0x50>
 800f5ba:	b13c      	cbz	r4, 800f5cc <memmove+0x38>
 800f5bc:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 800f5c0:	3901      	subs	r1, #1
 800f5c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f5c6:	f803 4d01 	strb.w	r4, [r3, #-1]!
 800f5ca:	d00b      	beq.n	800f5e4 <memmove+0x50>
 800f5cc:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 800f5d0:	f803 4d01 	strb.w	r4, [r3, #-1]!
 800f5d4:	3902      	subs	r1, #2
 800f5d6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 800f5da:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f5de:	f803 4d01 	strb.w	r4, [r3, #-1]!
 800f5e2:	d1f3      	bne.n	800f5cc <memmove+0x38>
 800f5e4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800f5e8:	4770      	bx	lr
 800f5ea:	2a0f      	cmp	r2, #15
 800f5ec:	f240 8096 	bls.w	800f71c <memmove+0x188>
 800f5f0:	ea41 0300 	orr.w	r3, r1, r0
 800f5f4:	079b      	lsls	r3, r3, #30
 800f5f6:	f040 8093 	bne.w	800f720 <memmove+0x18c>
 800f5fa:	680c      	ldr	r4, [r1, #0]
 800f5fc:	6004      	str	r4, [r0, #0]
 800f5fe:	684d      	ldr	r5, [r1, #4]
 800f600:	6045      	str	r5, [r0, #4]
 800f602:	688e      	ldr	r6, [r1, #8]
 800f604:	f1a2 0310 	sub.w	r3, r2, #16
 800f608:	6086      	str	r6, [r0, #8]
 800f60a:	68cc      	ldr	r4, [r1, #12]
 800f60c:	461d      	mov	r5, r3
 800f60e:	2d0f      	cmp	r5, #15
 800f610:	60c4      	str	r4, [r0, #12]
 800f612:	f3c3 1600 	ubfx	r6, r3, #4, #1
 800f616:	f101 0410 	add.w	r4, r1, #16
 800f61a:	f100 0310 	add.w	r3, r0, #16
 800f61e:	d922      	bls.n	800f666 <memmove+0xd2>
 800f620:	b166      	cbz	r6, 800f63c <memmove+0xa8>
 800f622:	6826      	ldr	r6, [r4, #0]
 800f624:	601e      	str	r6, [r3, #0]
 800f626:	6866      	ldr	r6, [r4, #4]
 800f628:	605e      	str	r6, [r3, #4]
 800f62a:	68a6      	ldr	r6, [r4, #8]
 800f62c:	609e      	str	r6, [r3, #8]
 800f62e:	68e6      	ldr	r6, [r4, #12]
 800f630:	3d10      	subs	r5, #16
 800f632:	60de      	str	r6, [r3, #12]
 800f634:	3410      	adds	r4, #16
 800f636:	3310      	adds	r3, #16
 800f638:	2d0f      	cmp	r5, #15
 800f63a:	d914      	bls.n	800f666 <memmove+0xd2>
 800f63c:	6826      	ldr	r6, [r4, #0]
 800f63e:	601e      	str	r6, [r3, #0]
 800f640:	6866      	ldr	r6, [r4, #4]
 800f642:	605e      	str	r6, [r3, #4]
 800f644:	68a6      	ldr	r6, [r4, #8]
 800f646:	609e      	str	r6, [r3, #8]
 800f648:	68e6      	ldr	r6, [r4, #12]
 800f64a:	60de      	str	r6, [r3, #12]
 800f64c:	6926      	ldr	r6, [r4, #16]
 800f64e:	611e      	str	r6, [r3, #16]
 800f650:	6966      	ldr	r6, [r4, #20]
 800f652:	615e      	str	r6, [r3, #20]
 800f654:	69a6      	ldr	r6, [r4, #24]
 800f656:	619e      	str	r6, [r3, #24]
 800f658:	69e6      	ldr	r6, [r4, #28]
 800f65a:	3d20      	subs	r5, #32
 800f65c:	61de      	str	r6, [r3, #28]
 800f65e:	3420      	adds	r4, #32
 800f660:	3320      	adds	r3, #32
 800f662:	2d0f      	cmp	r5, #15
 800f664:	d8ea      	bhi.n	800f63c <memmove+0xa8>
 800f666:	f1a2 0310 	sub.w	r3, r2, #16
 800f66a:	f023 040f 	bic.w	r4, r3, #15
 800f66e:	f002 030f 	and.w	r3, r2, #15
 800f672:	3410      	adds	r4, #16
 800f674:	2b03      	cmp	r3, #3
 800f676:	eb00 0804 	add.w	r8, r0, r4
 800f67a:	4421      	add	r1, r4
 800f67c:	d952      	bls.n	800f724 <memmove+0x190>
 800f67e:	f1a3 0904 	sub.w	r9, r3, #4
 800f682:	460b      	mov	r3, r1
 800f684:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800f688:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 800f68c:	f853 6b04 	ldr.w	r6, [r3], #4
 800f690:	ebc1 050c 	rsb	r5, r1, ip
 800f694:	4644      	mov	r4, r8
 800f696:	f10c 0c04 	add.w	ip, ip, #4
 800f69a:	4563      	cmp	r3, ip
 800f69c:	f844 6b04 	str.w	r6, [r4], #4
 800f6a0:	f3c5 0580 	ubfx	r5, r5, #2, #1
 800f6a4:	d012      	beq.n	800f6cc <memmove+0x138>
 800f6a6:	b12d      	cbz	r5, 800f6b4 <memmove+0x120>
 800f6a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f6ac:	4563      	cmp	r3, ip
 800f6ae:	f844 5b04 	str.w	r5, [r4], #4
 800f6b2:	d00b      	beq.n	800f6cc <memmove+0x138>
 800f6b4:	461e      	mov	r6, r3
 800f6b6:	4625      	mov	r5, r4
 800f6b8:	f856 7b04 	ldr.w	r7, [r6], #4
 800f6bc:	f845 7b04 	str.w	r7, [r5], #4
 800f6c0:	685f      	ldr	r7, [r3, #4]
 800f6c2:	1d33      	adds	r3, r6, #4
 800f6c4:	6067      	str	r7, [r4, #4]
 800f6c6:	1d2c      	adds	r4, r5, #4
 800f6c8:	4563      	cmp	r3, ip
 800f6ca:	d1f3      	bne.n	800f6b4 <memmove+0x120>
 800f6cc:	f109 0301 	add.w	r3, r9, #1
 800f6d0:	009c      	lsls	r4, r3, #2
 800f6d2:	1909      	adds	r1, r1, r4
 800f6d4:	f002 0203 	and.w	r2, r2, #3
 800f6d8:	4444      	add	r4, r8
 800f6da:	2a00      	cmp	r2, #0
 800f6dc:	d082      	beq.n	800f5e4 <memmove+0x50>
 800f6de:	4623      	mov	r3, r4
 800f6e0:	780d      	ldrb	r5, [r1, #0]
 800f6e2:	f803 5b01 	strb.w	r5, [r3], #1
 800f6e6:	18a2      	adds	r2, r4, r2
 800f6e8:	43e4      	mvns	r4, r4
 800f6ea:	1914      	adds	r4, r2, r4
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	f004 0401 	and.w	r4, r4, #1
 800f6f2:	f43f af77 	beq.w	800f5e4 <memmove+0x50>
 800f6f6:	b134      	cbz	r4, 800f706 <memmove+0x172>
 800f6f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f6fc:	f803 4b01 	strb.w	r4, [r3], #1
 800f700:	4293      	cmp	r3, r2
 800f702:	f43f af6f 	beq.w	800f5e4 <memmove+0x50>
 800f706:	784d      	ldrb	r5, [r1, #1]
 800f708:	461c      	mov	r4, r3
 800f70a:	f804 5b01 	strb.w	r5, [r4], #1
 800f70e:	788d      	ldrb	r5, [r1, #2]
 800f710:	705d      	strb	r5, [r3, #1]
 800f712:	1c63      	adds	r3, r4, #1
 800f714:	3102      	adds	r1, #2
 800f716:	4293      	cmp	r3, r2
 800f718:	d1f5      	bne.n	800f706 <memmove+0x172>
 800f71a:	e763      	b.n	800f5e4 <memmove+0x50>
 800f71c:	4604      	mov	r4, r0
 800f71e:	e7dc      	b.n	800f6da <memmove+0x146>
 800f720:	4604      	mov	r4, r0
 800f722:	e7dc      	b.n	800f6de <memmove+0x14a>
 800f724:	4644      	mov	r4, r8
 800f726:	461a      	mov	r2, r3
 800f728:	e7d7      	b.n	800f6da <memmove+0x146>
 800f72a:	bf00      	nop

0800f72c <_read_r>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	4c08      	ldr	r4, [pc, #32]	; (800f750 <_read_r+0x24>)
 800f730:	4605      	mov	r5, r0
 800f732:	4608      	mov	r0, r1
 800f734:	4611      	mov	r1, r2
 800f736:	461a      	mov	r2, r3
 800f738:	2300      	movs	r3, #0
 800f73a:	6023      	str	r3, [r4, #0]
 800f73c:	f7f1 fd2a 	bl	8001194 <_read>
 800f740:	1c43      	adds	r3, r0, #1
 800f742:	d000      	beq.n	800f746 <_read_r+0x1a>
 800f744:	bd38      	pop	{r3, r4, r5, pc}
 800f746:	6821      	ldr	r1, [r4, #0]
 800f748:	2900      	cmp	r1, #0
 800f74a:	d0fb      	beq.n	800f744 <_read_r+0x18>
 800f74c:	6029      	str	r1, [r5, #0]
 800f74e:	bd38      	pop	{r3, r4, r5, pc}
 800f750:	20000988 	.word	0x20000988

0800f754 <_realloc_r>:
 800f754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f758:	460c      	mov	r4, r1
 800f75a:	b083      	sub	sp, #12
 800f75c:	4681      	mov	r9, r0
 800f75e:	4617      	mov	r7, r2
 800f760:	2900      	cmp	r1, #0
 800f762:	f000 80c5 	beq.w	800f8f0 <_realloc_r+0x19c>
 800f766:	f7fe fddb 	bl	800e320 <__malloc_lock>
 800f76a:	f107 050b 	add.w	r5, r7, #11
 800f76e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f772:	2d16      	cmp	r5, #22
 800f774:	f1a4 0a08 	sub.w	sl, r4, #8
 800f778:	f023 0603 	bic.w	r6, r3, #3
 800f77c:	d84f      	bhi.n	800f81e <_realloc_r+0xca>
 800f77e:	2110      	movs	r1, #16
 800f780:	460d      	mov	r5, r1
 800f782:	42af      	cmp	r7, r5
 800f784:	d850      	bhi.n	800f828 <_realloc_r+0xd4>
 800f786:	428e      	cmp	r6, r1
 800f788:	da53      	bge.n	800f832 <_realloc_r+0xde>
 800f78a:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 800fb2c <_realloc_r+0x3d8>
 800f78e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800f792:	eb0a 0206 	add.w	r2, sl, r6
 800f796:	4290      	cmp	r0, r2
 800f798:	f000 80b0 	beq.w	800f8fc <_realloc_r+0x1a8>
 800f79c:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800f7a0:	f02e 0801 	bic.w	r8, lr, #1
 800f7a4:	4490      	add	r8, r2
 800f7a6:	f8d8 8004 	ldr.w	r8, [r8, #4]
 800f7aa:	f018 0f01 	tst.w	r8, #1
 800f7ae:	d059      	beq.n	800f864 <_realloc_r+0x110>
 800f7b0:	f04f 0e00 	mov.w	lr, #0
 800f7b4:	4672      	mov	r2, lr
 800f7b6:	07db      	lsls	r3, r3, #31
 800f7b8:	d476      	bmi.n	800f8a8 <_realloc_r+0x154>
 800f7ba:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800f7be:	ebc3 0b0a 	rsb	fp, r3, sl
 800f7c2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800f7c6:	f023 0303 	bic.w	r3, r3, #3
 800f7ca:	199b      	adds	r3, r3, r6
 800f7cc:	9301      	str	r3, [sp, #4]
 800f7ce:	2a00      	cmp	r2, #0
 800f7d0:	d067      	beq.n	800f8a2 <_realloc_r+0x14e>
 800f7d2:	4282      	cmp	r2, r0
 800f7d4:	eb0e 0803 	add.w	r8, lr, r3
 800f7d8:	f000 80f1 	beq.w	800f9be <_realloc_r+0x26a>
 800f7dc:	4588      	cmp	r8, r1
 800f7de:	db60      	blt.n	800f8a2 <_realloc_r+0x14e>
 800f7e0:	68d1      	ldr	r1, [r2, #12]
 800f7e2:	6890      	ldr	r0, [r2, #8]
 800f7e4:	465f      	mov	r7, fp
 800f7e6:	60c1      	str	r1, [r0, #12]
 800f7e8:	6088      	str	r0, [r1, #8]
 800f7ea:	f8db 300c 	ldr.w	r3, [fp, #12]
 800f7ee:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800f7f2:	1f32      	subs	r2, r6, #4
 800f7f4:	2a24      	cmp	r2, #36	; 0x24
 800f7f6:	60cb      	str	r3, [r1, #12]
 800f7f8:	6099      	str	r1, [r3, #8]
 800f7fa:	f200 812a 	bhi.w	800fa52 <_realloc_r+0x2fe>
 800f7fe:	2a13      	cmp	r2, #19
 800f800:	f240 80b9 	bls.w	800f976 <_realloc_r+0x222>
 800f804:	6823      	ldr	r3, [r4, #0]
 800f806:	f8cb 3008 	str.w	r3, [fp, #8]
 800f80a:	6861      	ldr	r1, [r4, #4]
 800f80c:	2a1b      	cmp	r2, #27
 800f80e:	f8cb 100c 	str.w	r1, [fp, #12]
 800f812:	f200 8134 	bhi.w	800fa7e <_realloc_r+0x32a>
 800f816:	f10b 0010 	add.w	r0, fp, #16
 800f81a:	3408      	adds	r4, #8
 800f81c:	e0ac      	b.n	800f978 <_realloc_r+0x224>
 800f81e:	f025 0507 	bic.w	r5, r5, #7
 800f822:	2d00      	cmp	r5, #0
 800f824:	4629      	mov	r1, r5
 800f826:	daac      	bge.n	800f782 <_realloc_r+0x2e>
 800f828:	270c      	movs	r7, #12
 800f82a:	f8c9 7000 	str.w	r7, [r9]
 800f82e:	2700      	movs	r7, #0
 800f830:	e014      	b.n	800f85c <_realloc_r+0x108>
 800f832:	46b0      	mov	r8, r6
 800f834:	ebc5 0708 	rsb	r7, r5, r8
 800f838:	2f0f      	cmp	r7, #15
 800f83a:	d81e      	bhi.n	800f87a <_realloc_r+0x126>
 800f83c:	f003 0301 	and.w	r3, r3, #1
 800f840:	eb0a 0108 	add.w	r1, sl, r8
 800f844:	ea43 0008 	orr.w	r0, r3, r8
 800f848:	f8ca 0004 	str.w	r0, [sl, #4]
 800f84c:	684a      	ldr	r2, [r1, #4]
 800f84e:	f042 0701 	orr.w	r7, r2, #1
 800f852:	604f      	str	r7, [r1, #4]
 800f854:	4648      	mov	r0, r9
 800f856:	f7fe fd65 	bl	800e324 <__malloc_unlock>
 800f85a:	4627      	mov	r7, r4
 800f85c:	4638      	mov	r0, r7
 800f85e:	b003      	add	sp, #12
 800f860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f864:	f02e 0e03 	bic.w	lr, lr, #3
 800f868:	eb0e 0806 	add.w	r8, lr, r6
 800f86c:	4588      	cmp	r8, r1
 800f86e:	dba2      	blt.n	800f7b6 <_realloc_r+0x62>
 800f870:	68d7      	ldr	r7, [r2, #12]
 800f872:	6892      	ldr	r2, [r2, #8]
 800f874:	60d7      	str	r7, [r2, #12]
 800f876:	60ba      	str	r2, [r7, #8]
 800f878:	e7dc      	b.n	800f834 <_realloc_r+0xe0>
 800f87a:	eb0a 0105 	add.w	r1, sl, r5
 800f87e:	f003 0301 	and.w	r3, r3, #1
 800f882:	19c8      	adds	r0, r1, r7
 800f884:	431d      	orrs	r5, r3
 800f886:	f047 0201 	orr.w	r2, r7, #1
 800f88a:	f8ca 5004 	str.w	r5, [sl, #4]
 800f88e:	604a      	str	r2, [r1, #4]
 800f890:	6847      	ldr	r7, [r0, #4]
 800f892:	f047 0301 	orr.w	r3, r7, #1
 800f896:	6043      	str	r3, [r0, #4]
 800f898:	3108      	adds	r1, #8
 800f89a:	4648      	mov	r0, r9
 800f89c:	f7fd ffa4 	bl	800d7e8 <_free_r>
 800f8a0:	e7d8      	b.n	800f854 <_realloc_r+0x100>
 800f8a2:	9b01      	ldr	r3, [sp, #4]
 800f8a4:	428b      	cmp	r3, r1
 800f8a6:	da34      	bge.n	800f912 <_realloc_r+0x1be>
 800f8a8:	4639      	mov	r1, r7
 800f8aa:	4648      	mov	r0, r9
 800f8ac:	f7fe f948 	bl	800db40 <_malloc_r>
 800f8b0:	4607      	mov	r7, r0
 800f8b2:	b1c8      	cbz	r0, 800f8e8 <_realloc_r+0x194>
 800f8b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f8b8:	f023 0201 	bic.w	r2, r3, #1
 800f8bc:	f1a0 0108 	sub.w	r1, r0, #8
 800f8c0:	4452      	add	r2, sl
 800f8c2:	4291      	cmp	r1, r2
 800f8c4:	f000 80be 	beq.w	800fa44 <_realloc_r+0x2f0>
 800f8c8:	1f32      	subs	r2, r6, #4
 800f8ca:	2a24      	cmp	r2, #36	; 0x24
 800f8cc:	d873      	bhi.n	800f9b6 <_realloc_r+0x262>
 800f8ce:	2a13      	cmp	r2, #19
 800f8d0:	d846      	bhi.n	800f960 <_realloc_r+0x20c>
 800f8d2:	4623      	mov	r3, r4
 800f8d4:	6819      	ldr	r1, [r3, #0]
 800f8d6:	6001      	str	r1, [r0, #0]
 800f8d8:	685a      	ldr	r2, [r3, #4]
 800f8da:	6042      	str	r2, [r0, #4]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	6083      	str	r3, [r0, #8]
 800f8e0:	4648      	mov	r0, r9
 800f8e2:	4621      	mov	r1, r4
 800f8e4:	f7fd ff80 	bl	800d7e8 <_free_r>
 800f8e8:	4648      	mov	r0, r9
 800f8ea:	f7fe fd1b 	bl	800e324 <__malloc_unlock>
 800f8ee:	e7b5      	b.n	800f85c <_realloc_r+0x108>
 800f8f0:	4611      	mov	r1, r2
 800f8f2:	b003      	add	sp, #12
 800f8f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f8:	f7fe b922 	b.w	800db40 <_malloc_r>
 800f8fc:	6842      	ldr	r2, [r0, #4]
 800f8fe:	f022 0e03 	bic.w	lr, r2, #3
 800f902:	eb0e 0206 	add.w	r2, lr, r6
 800f906:	f105 0810 	add.w	r8, r5, #16
 800f90a:	4542      	cmp	r2, r8
 800f90c:	da3f      	bge.n	800f98e <_realloc_r+0x23a>
 800f90e:	4602      	mov	r2, r0
 800f910:	e751      	b.n	800f7b6 <_realloc_r+0x62>
 800f912:	465f      	mov	r7, fp
 800f914:	f8db 000c 	ldr.w	r0, [fp, #12]
 800f918:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800f91c:	1f32      	subs	r2, r6, #4
 800f91e:	2a24      	cmp	r2, #36	; 0x24
 800f920:	60c8      	str	r0, [r1, #12]
 800f922:	6081      	str	r1, [r0, #8]
 800f924:	f200 80a0 	bhi.w	800fa68 <_realloc_r+0x314>
 800f928:	2a13      	cmp	r2, #19
 800f92a:	f240 809b 	bls.w	800fa64 <_realloc_r+0x310>
 800f92e:	6820      	ldr	r0, [r4, #0]
 800f930:	f8cb 0008 	str.w	r0, [fp, #8]
 800f934:	6861      	ldr	r1, [r4, #4]
 800f936:	2a1b      	cmp	r2, #27
 800f938:	f8cb 100c 	str.w	r1, [fp, #12]
 800f93c:	f200 80b4 	bhi.w	800faa8 <_realloc_r+0x354>
 800f940:	f10b 0310 	add.w	r3, fp, #16
 800f944:	3408      	adds	r4, #8
 800f946:	6820      	ldr	r0, [r4, #0]
 800f948:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f94c:	6018      	str	r0, [r3, #0]
 800f94e:	6862      	ldr	r2, [r4, #4]
 800f950:	605a      	str	r2, [r3, #4]
 800f952:	68a4      	ldr	r4, [r4, #8]
 800f954:	609c      	str	r4, [r3, #8]
 800f956:	f8db 3004 	ldr.w	r3, [fp, #4]
 800f95a:	463c      	mov	r4, r7
 800f95c:	46da      	mov	sl, fp
 800f95e:	e769      	b.n	800f834 <_realloc_r+0xe0>
 800f960:	6821      	ldr	r1, [r4, #0]
 800f962:	6001      	str	r1, [r0, #0]
 800f964:	6860      	ldr	r0, [r4, #4]
 800f966:	2a1b      	cmp	r2, #27
 800f968:	6078      	str	r0, [r7, #4]
 800f96a:	d860      	bhi.n	800fa2e <_realloc_r+0x2da>
 800f96c:	f107 0008 	add.w	r0, r7, #8
 800f970:	f104 0308 	add.w	r3, r4, #8
 800f974:	e7ae      	b.n	800f8d4 <_realloc_r+0x180>
 800f976:	4638      	mov	r0, r7
 800f978:	6823      	ldr	r3, [r4, #0]
 800f97a:	6003      	str	r3, [r0, #0]
 800f97c:	6862      	ldr	r2, [r4, #4]
 800f97e:	6042      	str	r2, [r0, #4]
 800f980:	68a4      	ldr	r4, [r4, #8]
 800f982:	6084      	str	r4, [r0, #8]
 800f984:	f8db 3004 	ldr.w	r3, [fp, #4]
 800f988:	463c      	mov	r4, r7
 800f98a:	46da      	mov	sl, fp
 800f98c:	e752      	b.n	800f834 <_realloc_r+0xe0>
 800f98e:	eb0a 0705 	add.w	r7, sl, r5
 800f992:	1b50      	subs	r0, r2, r5
 800f994:	f040 0201 	orr.w	r2, r0, #1
 800f998:	607a      	str	r2, [r7, #4]
 800f99a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800f99e:	f8cc 7008 	str.w	r7, [ip, #8]
 800f9a2:	f001 0301 	and.w	r3, r1, #1
 800f9a6:	431d      	orrs	r5, r3
 800f9a8:	f844 5c04 	str.w	r5, [r4, #-4]
 800f9ac:	4648      	mov	r0, r9
 800f9ae:	f7fe fcb9 	bl	800e324 <__malloc_unlock>
 800f9b2:	4627      	mov	r7, r4
 800f9b4:	e752      	b.n	800f85c <_realloc_r+0x108>
 800f9b6:	4621      	mov	r1, r4
 800f9b8:	f7ff fdec 	bl	800f594 <memmove>
 800f9bc:	e790      	b.n	800f8e0 <_realloc_r+0x18c>
 800f9be:	f105 0010 	add.w	r0, r5, #16
 800f9c2:	4580      	cmp	r8, r0
 800f9c4:	f6ff af6d 	blt.w	800f8a2 <_realloc_r+0x14e>
 800f9c8:	465f      	mov	r7, fp
 800f9ca:	f8db 000c 	ldr.w	r0, [fp, #12]
 800f9ce:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800f9d2:	1f32      	subs	r2, r6, #4
 800f9d4:	2a24      	cmp	r2, #36	; 0x24
 800f9d6:	60c8      	str	r0, [r1, #12]
 800f9d8:	6081      	str	r1, [r0, #8]
 800f9da:	f200 8087 	bhi.w	800faec <_realloc_r+0x398>
 800f9de:	2a13      	cmp	r2, #19
 800f9e0:	d978      	bls.n	800fad4 <_realloc_r+0x380>
 800f9e2:	6820      	ldr	r0, [r4, #0]
 800f9e4:	f8cb 0008 	str.w	r0, [fp, #8]
 800f9e8:	6861      	ldr	r1, [r4, #4]
 800f9ea:	2a1b      	cmp	r2, #27
 800f9ec:	f8cb 100c 	str.w	r1, [fp, #12]
 800f9f0:	f200 8085 	bhi.w	800fafe <_realloc_r+0x3aa>
 800f9f4:	f10b 0310 	add.w	r3, fp, #16
 800f9f8:	3408      	adds	r4, #8
 800f9fa:	6820      	ldr	r0, [r4, #0]
 800f9fc:	6018      	str	r0, [r3, #0]
 800f9fe:	6862      	ldr	r2, [r4, #4]
 800fa00:	605a      	str	r2, [r3, #4]
 800fa02:	68a1      	ldr	r1, [r4, #8]
 800fa04:	6099      	str	r1, [r3, #8]
 800fa06:	eb0b 0305 	add.w	r3, fp, r5
 800fa0a:	ebc5 0008 	rsb	r0, r5, r8
 800fa0e:	f040 0201 	orr.w	r2, r0, #1
 800fa12:	605a      	str	r2, [r3, #4]
 800fa14:	f8db 1004 	ldr.w	r1, [fp, #4]
 800fa18:	f8cc 3008 	str.w	r3, [ip, #8]
 800fa1c:	f001 0301 	and.w	r3, r1, #1
 800fa20:	431d      	orrs	r5, r3
 800fa22:	f8cb 5004 	str.w	r5, [fp, #4]
 800fa26:	4648      	mov	r0, r9
 800fa28:	f7fe fc7c 	bl	800e324 <__malloc_unlock>
 800fa2c:	e716      	b.n	800f85c <_realloc_r+0x108>
 800fa2e:	68a3      	ldr	r3, [r4, #8]
 800fa30:	60bb      	str	r3, [r7, #8]
 800fa32:	68e1      	ldr	r1, [r4, #12]
 800fa34:	2a24      	cmp	r2, #36	; 0x24
 800fa36:	60f9      	str	r1, [r7, #12]
 800fa38:	d02d      	beq.n	800fa96 <_realloc_r+0x342>
 800fa3a:	f107 0010 	add.w	r0, r7, #16
 800fa3e:	f104 0310 	add.w	r3, r4, #16
 800fa42:	e747      	b.n	800f8d4 <_realloc_r+0x180>
 800fa44:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800fa48:	f027 0c03 	bic.w	ip, r7, #3
 800fa4c:	eb0c 0806 	add.w	r8, ip, r6
 800fa50:	e6f0      	b.n	800f834 <_realloc_r+0xe0>
 800fa52:	4621      	mov	r1, r4
 800fa54:	4638      	mov	r0, r7
 800fa56:	f7ff fd9d 	bl	800f594 <memmove>
 800fa5a:	463c      	mov	r4, r7
 800fa5c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800fa60:	46da      	mov	sl, fp
 800fa62:	e6e7      	b.n	800f834 <_realloc_r+0xe0>
 800fa64:	463b      	mov	r3, r7
 800fa66:	e76e      	b.n	800f946 <_realloc_r+0x1f2>
 800fa68:	4621      	mov	r1, r4
 800fa6a:	4638      	mov	r0, r7
 800fa6c:	f7ff fd92 	bl	800f594 <memmove>
 800fa70:	463c      	mov	r4, r7
 800fa72:	f8db 3004 	ldr.w	r3, [fp, #4]
 800fa76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fa7a:	46da      	mov	sl, fp
 800fa7c:	e6da      	b.n	800f834 <_realloc_r+0xe0>
 800fa7e:	68a0      	ldr	r0, [r4, #8]
 800fa80:	f8cb 0010 	str.w	r0, [fp, #16]
 800fa84:	68e3      	ldr	r3, [r4, #12]
 800fa86:	2a24      	cmp	r2, #36	; 0x24
 800fa88:	f8cb 3014 	str.w	r3, [fp, #20]
 800fa8c:	d018      	beq.n	800fac0 <_realloc_r+0x36c>
 800fa8e:	f10b 0018 	add.w	r0, fp, #24
 800fa92:	3410      	adds	r4, #16
 800fa94:	e770      	b.n	800f978 <_realloc_r+0x224>
 800fa96:	6922      	ldr	r2, [r4, #16]
 800fa98:	613a      	str	r2, [r7, #16]
 800fa9a:	6963      	ldr	r3, [r4, #20]
 800fa9c:	f107 0018 	add.w	r0, r7, #24
 800faa0:	617b      	str	r3, [r7, #20]
 800faa2:	f104 0318 	add.w	r3, r4, #24
 800faa6:	e715      	b.n	800f8d4 <_realloc_r+0x180>
 800faa8:	68a3      	ldr	r3, [r4, #8]
 800faaa:	f8cb 3010 	str.w	r3, [fp, #16]
 800faae:	68e0      	ldr	r0, [r4, #12]
 800fab0:	2a24      	cmp	r2, #36	; 0x24
 800fab2:	f8cb 0014 	str.w	r0, [fp, #20]
 800fab6:	d00f      	beq.n	800fad8 <_realloc_r+0x384>
 800fab8:	f10b 0318 	add.w	r3, fp, #24
 800fabc:	3410      	adds	r4, #16
 800fabe:	e742      	b.n	800f946 <_realloc_r+0x1f2>
 800fac0:	6922      	ldr	r2, [r4, #16]
 800fac2:	f8cb 2018 	str.w	r2, [fp, #24]
 800fac6:	6961      	ldr	r1, [r4, #20]
 800fac8:	f10b 0020 	add.w	r0, fp, #32
 800facc:	f8cb 101c 	str.w	r1, [fp, #28]
 800fad0:	3418      	adds	r4, #24
 800fad2:	e751      	b.n	800f978 <_realloc_r+0x224>
 800fad4:	463b      	mov	r3, r7
 800fad6:	e790      	b.n	800f9fa <_realloc_r+0x2a6>
 800fad8:	6922      	ldr	r2, [r4, #16]
 800fada:	f8cb 2018 	str.w	r2, [fp, #24]
 800fade:	6961      	ldr	r1, [r4, #20]
 800fae0:	f10b 0320 	add.w	r3, fp, #32
 800fae4:	f8cb 101c 	str.w	r1, [fp, #28]
 800fae8:	3418      	adds	r4, #24
 800faea:	e72c      	b.n	800f946 <_realloc_r+0x1f2>
 800faec:	4638      	mov	r0, r7
 800faee:	4621      	mov	r1, r4
 800faf0:	f8cd c000 	str.w	ip, [sp]
 800faf4:	f7ff fd4e 	bl	800f594 <memmove>
 800faf8:	f8dd c000 	ldr.w	ip, [sp]
 800fafc:	e783      	b.n	800fa06 <_realloc_r+0x2b2>
 800fafe:	68a3      	ldr	r3, [r4, #8]
 800fb00:	f8cb 3010 	str.w	r3, [fp, #16]
 800fb04:	68e0      	ldr	r0, [r4, #12]
 800fb06:	2a24      	cmp	r2, #36	; 0x24
 800fb08:	f8cb 0014 	str.w	r0, [fp, #20]
 800fb0c:	d003      	beq.n	800fb16 <_realloc_r+0x3c2>
 800fb0e:	f10b 0318 	add.w	r3, fp, #24
 800fb12:	3410      	adds	r4, #16
 800fb14:	e771      	b.n	800f9fa <_realloc_r+0x2a6>
 800fb16:	6922      	ldr	r2, [r4, #16]
 800fb18:	f8cb 2018 	str.w	r2, [fp, #24]
 800fb1c:	6961      	ldr	r1, [r4, #20]
 800fb1e:	f10b 0320 	add.w	r3, fp, #32
 800fb22:	f8cb 101c 	str.w	r1, [fp, #28]
 800fb26:	3418      	adds	r4, #24
 800fb28:	e767      	b.n	800f9fa <_realloc_r+0x2a6>
 800fb2a:	bf00      	nop
 800fb2c:	200004f0 	.word	0x200004f0

0800fb30 <__swbuf_r>:
 800fb30:	b570      	push	{r4, r5, r6, lr}
 800fb32:	460d      	mov	r5, r1
 800fb34:	4614      	mov	r4, r2
 800fb36:	4606      	mov	r6, r0
 800fb38:	b110      	cbz	r0, 800fb40 <__swbuf_r+0x10>
 800fb3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d04a      	beq.n	800fbd6 <__swbuf_r+0xa6>
 800fb40:	89a3      	ldrh	r3, [r4, #12]
 800fb42:	69a2      	ldr	r2, [r4, #24]
 800fb44:	f003 0008 	and.w	r0, r3, #8
 800fb48:	b201      	sxth	r1, r0
 800fb4a:	60a2      	str	r2, [r4, #8]
 800fb4c:	2900      	cmp	r1, #0
 800fb4e:	d03a      	beq.n	800fbc6 <__swbuf_r+0x96>
 800fb50:	6922      	ldr	r2, [r4, #16]
 800fb52:	2a00      	cmp	r2, #0
 800fb54:	d037      	beq.n	800fbc6 <__swbuf_r+0x96>
 800fb56:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 800fb5a:	b201      	sxth	r1, r0
 800fb5c:	b2ed      	uxtb	r5, r5
 800fb5e:	b1a9      	cbz	r1, 800fb8c <__swbuf_r+0x5c>
 800fb60:	6823      	ldr	r3, [r4, #0]
 800fb62:	6960      	ldr	r0, [r4, #20]
 800fb64:	1a9a      	subs	r2, r3, r2
 800fb66:	4282      	cmp	r2, r0
 800fb68:	da1c      	bge.n	800fba4 <__swbuf_r+0x74>
 800fb6a:	1c50      	adds	r0, r2, #1
 800fb6c:	68a1      	ldr	r1, [r4, #8]
 800fb6e:	1e4a      	subs	r2, r1, #1
 800fb70:	60a2      	str	r2, [r4, #8]
 800fb72:	f803 5b01 	strb.w	r5, [r3], #1
 800fb76:	6961      	ldr	r1, [r4, #20]
 800fb78:	6023      	str	r3, [r4, #0]
 800fb7a:	4281      	cmp	r1, r0
 800fb7c:	d01a      	beq.n	800fbb4 <__swbuf_r+0x84>
 800fb7e:	89a3      	ldrh	r3, [r4, #12]
 800fb80:	07db      	lsls	r3, r3, #31
 800fb82:	d501      	bpl.n	800fb88 <__swbuf_r+0x58>
 800fb84:	2d0a      	cmp	r5, #10
 800fb86:	d015      	beq.n	800fbb4 <__swbuf_r+0x84>
 800fb88:	4628      	mov	r0, r5
 800fb8a:	bd70      	pop	{r4, r5, r6, pc}
 800fb8c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800fb8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fb92:	81a3      	strh	r3, [r4, #12]
 800fb94:	6823      	ldr	r3, [r4, #0]
 800fb96:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 800fb9a:	6960      	ldr	r0, [r4, #20]
 800fb9c:	6661      	str	r1, [r4, #100]	; 0x64
 800fb9e:	1a9a      	subs	r2, r3, r2
 800fba0:	4282      	cmp	r2, r0
 800fba2:	dbe2      	blt.n	800fb6a <__swbuf_r+0x3a>
 800fba4:	4630      	mov	r0, r6
 800fba6:	4621      	mov	r1, r4
 800fba8:	f7fd fcc6 	bl	800d538 <_fflush_r>
 800fbac:	b940      	cbnz	r0, 800fbc0 <__swbuf_r+0x90>
 800fbae:	6823      	ldr	r3, [r4, #0]
 800fbb0:	2001      	movs	r0, #1
 800fbb2:	e7db      	b.n	800fb6c <__swbuf_r+0x3c>
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	f7fd fcbe 	bl	800d538 <_fflush_r>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	d0e3      	beq.n	800fb88 <__swbuf_r+0x58>
 800fbc0:	f04f 35ff 	mov.w	r5, #4294967295
 800fbc4:	e7e0      	b.n	800fb88 <__swbuf_r+0x58>
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	4621      	mov	r1, r4
 800fbca:	f7fc f99b 	bl	800bf04 <__swsetup_r>
 800fbce:	89a3      	ldrh	r3, [r4, #12]
 800fbd0:	b920      	cbnz	r0, 800fbdc <__swbuf_r+0xac>
 800fbd2:	6922      	ldr	r2, [r4, #16]
 800fbd4:	e7bf      	b.n	800fb56 <__swbuf_r+0x26>
 800fbd6:	f7fd fd91 	bl	800d6fc <__sinit>
 800fbda:	e7b1      	b.n	800fb40 <__swbuf_r+0x10>
 800fbdc:	f043 0540 	orr.w	r5, r3, #64	; 0x40
 800fbe0:	2009      	movs	r0, #9
 800fbe2:	81a5      	strh	r5, [r4, #12]
 800fbe4:	f04f 35ff 	mov.w	r5, #4294967295
 800fbe8:	6030      	str	r0, [r6, #0]
 800fbea:	e7cd      	b.n	800fb88 <__swbuf_r+0x58>

0800fbec <_wcrtomb_r>:
 800fbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf0:	461e      	mov	r6, r3
 800fbf2:	b086      	sub	sp, #24
 800fbf4:	460c      	mov	r4, r1
 800fbf6:	4605      	mov	r5, r0
 800fbf8:	4617      	mov	r7, r2
 800fbfa:	4b0f      	ldr	r3, [pc, #60]	; (800fc38 <_wcrtomb_r+0x4c>)
 800fbfc:	b191      	cbz	r1, 800fc24 <_wcrtomb_r+0x38>
 800fbfe:	f8d3 8000 	ldr.w	r8, [r3]
 800fc02:	f7fd ff17 	bl	800da34 <__locale_charset>
 800fc06:	9600      	str	r6, [sp, #0]
 800fc08:	4603      	mov	r3, r0
 800fc0a:	4621      	mov	r1, r4
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	463a      	mov	r2, r7
 800fc10:	47c0      	blx	r8
 800fc12:	1c43      	adds	r3, r0, #1
 800fc14:	d103      	bne.n	800fc1e <_wcrtomb_r+0x32>
 800fc16:	2100      	movs	r1, #0
 800fc18:	228a      	movs	r2, #138	; 0x8a
 800fc1a:	6031      	str	r1, [r6, #0]
 800fc1c:	602a      	str	r2, [r5, #0]
 800fc1e:	b006      	add	sp, #24
 800fc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc24:	681f      	ldr	r7, [r3, #0]
 800fc26:	f7fd ff05 	bl	800da34 <__locale_charset>
 800fc2a:	9600      	str	r6, [sp, #0]
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	a903      	add	r1, sp, #12
 800fc30:	4628      	mov	r0, r5
 800fc32:	4622      	mov	r2, r4
 800fc34:	47b8      	blx	r7
 800fc36:	e7ec      	b.n	800fc12 <_wcrtomb_r+0x26>
 800fc38:	20000900 	.word	0x20000900

0800fc3c <__ascii_wctomb>:
 800fc3c:	b121      	cbz	r1, 800fc48 <__ascii_wctomb+0xc>
 800fc3e:	2aff      	cmp	r2, #255	; 0xff
 800fc40:	d804      	bhi.n	800fc4c <__ascii_wctomb+0x10>
 800fc42:	700a      	strb	r2, [r1, #0]
 800fc44:	2001      	movs	r0, #1
 800fc46:	4770      	bx	lr
 800fc48:	4608      	mov	r0, r1
 800fc4a:	4770      	bx	lr
 800fc4c:	238a      	movs	r3, #138	; 0x8a
 800fc4e:	6003      	str	r3, [r0, #0]
 800fc50:	f04f 30ff 	mov.w	r0, #4294967295
 800fc54:	4770      	bx	lr
 800fc56:	bf00      	nop
 800fc58:	0d0a6425 	.word	0x0d0a6425
 800fc5c:	00000000 	.word	0x00000000
 800fc60:	4447334c 	.word	0x4447334c
 800fc64:	72203032 	.word	0x72203032
 800fc68:	20646165 	.word	0x20646165
 800fc6c:	65747461 	.word	0x65747461
 800fc70:	2074706d 	.word	0x2074706d
 800fc74:	656d6974 	.word	0x656d6974
 800fc78:	756f2064 	.word	0x756f2064
 800fc7c:	2e2e2e74 	.word	0x2e2e2e74
 800fc80:	65686320 	.word	0x65686320
 800fc84:	79206b63 	.word	0x79206b63
 800fc88:	2072756f 	.word	0x2072756f
 800fc8c:	69726977 	.word	0x69726977
 800fc90:	632f676e 	.word	0x632f676e
 800fc94:	2165646f 	.word	0x2165646f
 800fc98:	0d0a2121 	.word	0x0d0a2121
 800fc9c:	00000000 	.word	0x00000000
 800fca0:	74697865 	.word	0x74697865
 800fca4:	00000000 	.word	0x00000000
 800fca8:	70616548 	.word	0x70616548
 800fcac:	646e6120 	.word	0x646e6120
 800fcb0:	61747320 	.word	0x61747320
 800fcb4:	63206b63 	.word	0x63206b63
 800fcb8:	696c6c6f 	.word	0x696c6c6f
 800fcbc:	6e6f6973 	.word	0x6e6f6973
 800fcc0:	0000000a 	.word	0x0000000a
 800fcc4:	74727173 	.word	0x74727173
 800fcc8:	00000000 	.word	0x00000000
 800fccc:	00000043 	.word	0x00000043

0800fcd0 <_global_impure_ptr>:
 800fcd0:	20000068                                h.. 

0800fcd4 <blanks.6735>:
 800fcd4:	20202020 20202020 20202020 20202020                     
 800fce4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800fcf4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800fd04:	00000000 33323130 37363534 62613938     ....0123456789ab
 800fd14:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800fd24:	00000030                                0...

0800fd28 <zeroes.6736>:
 800fd28:	30303030 30303030 30303030 30303030     0000000000000000
 800fd38:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800fd48:	49534f50 00000058 0000002e              POSIX.......

0800fd54 <p05.5242>:
 800fd54:	00000005 00000019 0000007d              ........}...

0800fd60 <__mprec_tens>:
 800fd60:	00000000 3ff00000 00000000 40240000     .......?......$@
 800fd70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800fd80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800fd90:	00000000 412e8480 00000000 416312d0     .......A......cA
 800fda0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800fdb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800fdc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800fdd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800fde0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800fdf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800fe00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800fe10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800fe20:	79d99db4 44ea7843                       ...yCx.D

0800fe28 <__mprec_bigtens>:
 800fe28:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800fe38:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800fe48:	7f73bf3c 75154fdd                       <.s..O.u

0800fe50 <_init>:
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe52:	bf00      	nop
 800fe54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe56:	bc08      	pop	{r3}
 800fe58:	469e      	mov	lr, r3
 800fe5a:	4770      	bx	lr

0800fe5c <_fini>:
 800fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5e:	bf00      	nop
 800fe60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe62:	bc08      	pop	{r3}
 800fe64:	469e      	mov	lr, r3
 800fe66:	4770      	bx	lr
